var ve = (d, e, t) => {
  if (!e.has(d))
    throw TypeError("Cannot " + t);
};
var P = (d, e, t) => (ve(d, e, "read from private field"), t ? t.call(d) : e.get(d)), k = (d, e, t) => {
  if (e.has(d))
    throw TypeError("Cannot add the same private member more than once");
  e instanceof WeakSet ? e.add(d) : e.set(d, t);
}, z = (d, e, t, s) => (ve(d, e, "write to private field"), s ? s.call(d, t) : e.set(d, t), t);
var ke = (d, e, t, s) => ({
  set _(r) {
    z(d, e, r, t);
  },
  get _() {
    return P(d, e, s);
  }
}), _e = (d, e, t) => (ve(d, e, "access private method"), t);
const Y = () => "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (d) => {
  const e = Math.random() * 16 | 0;
  return (d === "x" ? e : e & 3 | 8).toString(16).toUpperCase();
}), de = (d) => d.replace(/(?:^\w|[A-Z]|\b\w)/g, (e, t) => t === 0 ? e.toLowerCase() : e.toUpperCase()).replace(/\s+/g, ""), Be = (d) => {
  const e = de(d);
  return e.charAt(0).toUpperCase() + e.slice(1);
};
let Me = 0;
const _ = (d) => {
  Me > 100 || (console.warn(Me === 100 ? "GPUCurtains: too many warnings thrown, stop logging." : d), Me++);
}, j = (d) => {
  throw new Error(d);
}, Se = (d, e = "GPURenderer", t) => {
  const s = t ? `Unable to create ${t} because the ${e} is not defined: ${d}` : `The ${e} is not defined: ${d}`;
  j(s);
}, U = (d, e) => {
  const t = d && (d.type === "GPURenderer" || d.type === "GPUCameraRenderer" || d.type === "GPUCurtainsRenderer");
  return t || Se(d, "GPURenderer", e), t;
}, ze = (d, e) => {
  const t = d && (d.type === "GPUCameraRenderer" || d.type === "GPUCurtainsRenderer");
  return t || Se(d, "GPUCameraRenderer", e), t;
}, Ge = (d, e) => {
  const t = d && d.type === "GPUCurtainsRenderer";
  return t || Se(d, "GPUCurtainsRenderer", e), t;
}, gt = /* @__PURE__ */ (() => {
  let d, e;
  const t = {};
  return function(r, i) {
    e || (e = r.createShaderModule({
      label: "textured quad shaders for mip level generation",
      code: `
            struct VSOutput {
              @builtin(position) position: vec4f,
              @location(0) texcoord: vec2f,
            };

            @vertex fn vs(
              @builtin(vertex_index) vertexIndex : u32
            ) -> VSOutput {
              var pos = array<vec2f, 6>(

                vec2f( 0.0,  0.0),  // center
                vec2f( 1.0,  0.0),  // right, center
                vec2f( 0.0,  1.0),  // center, top

                // 2st triangle
                vec2f( 0.0,  1.0),  // center, top
                vec2f( 1.0,  0.0),  // right, center
                vec2f( 1.0,  1.0),  // right, top
              );

              var vsOutput: VSOutput;
              let xy = pos[vertexIndex];
              vsOutput.position = vec4f(xy * 2.0 - 1.0, 0.0, 1.0);
              vsOutput.texcoord = vec2f(xy.x, 1.0 - xy.y);
              return vsOutput;
            }

            @group(0) @binding(0) var ourSampler: sampler;
            @group(0) @binding(1) var ourTexture: texture_2d<f32>;

            @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {
              return textureSample(ourTexture, ourSampler, fsInput.texcoord);
            }
          `
    }), d = r.createSampler({
      minFilter: "linear"
    })), t[i.format] || (t[i.format] = r.createRenderPipeline({
      label: "mip level generator pipeline",
      layout: "auto",
      vertex: {
        module: e,
        entryPoint: "vs"
      },
      fragment: {
        module: e,
        entryPoint: "fs",
        targets: [{ format: i.format }]
      }
    }));
    const n = t[i.format], o = r.createCommandEncoder({
      label: "mip gen encoder"
    });
    let a = i.width, h = i.height, u = 0;
    for (; a > 1 || h > 1; ) {
      a = Math.max(1, a / 2 | 0), h = Math.max(1, h / 2 | 0);
      const l = r.createBindGroup({
        layout: n.getBindGroupLayout(0),
        entries: [
          { binding: 0, resource: d },
          {
            binding: 1,
            resource: i.createView({
              baseMipLevel: u,
              mipLevelCount: 1
            })
          }
        ]
      });
      ++u;
      const p = {
        label: "our basic canvas renderPass",
        colorAttachments: [
          {
            view: i.createView({ baseMipLevel: u, mipLevelCount: 1 }),
            loadOp: "clear",
            storeOp: "store"
          }
        ]
      }, m = o.beginRenderPass(p);
      m.setPipeline(n), m.setBindGroup(0, l), m.draw(6), m.end();
    }
    const c = o.finish();
    r.queue.submit([c]);
  };
})();
class Ue {
  /**
   * Binding constructor
   * @param parameters - {@link BindingParams | parameters} used to create our {@link Binding}
   */
  constructor({ label: e = "Uniform", name: t = "uniform", bindingType: s = "uniform", visibility: r }) {
    this.label = e, this.name = de(t), this.bindingType = s, this.visibility = r ? (() => {
      switch (r) {
        case "vertex":
          return GPUShaderStage.VERTEX;
        case "fragment":
          return GPUShaderStage.FRAGMENT;
        case "compute":
          return GPUShaderStage.COMPUTE;
        default:
          return GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE;
      }
    })() : GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE, this.options = {
      label: e,
      name: t,
      bindingType: s,
      visibility: r
    }, this.shouldResetBindGroup = !1, this.shouldResetBindGroupLayout = !1;
  }
}
const et = (d) => ({
  i32: { numElements: 1, align: 4, size: 4, type: "i32", View: Int32Array },
  u32: { numElements: 1, align: 4, size: 4, type: "u32", View: Uint32Array },
  f32: { numElements: 1, align: 4, size: 4, type: "f32", View: Float32Array },
  f16: { numElements: 1, align: 2, size: 2, type: "u16", View: Uint16Array },
  vec2f: { numElements: 2, align: 8, size: 8, type: "f32", View: Float32Array },
  vec2i: { numElements: 2, align: 8, size: 8, type: "i32", View: Int32Array },
  vec2u: { numElements: 2, align: 8, size: 8, type: "u32", View: Uint32Array },
  vec2h: { numElements: 2, align: 4, size: 4, type: "u16", View: Uint16Array },
  vec3i: { numElements: 3, align: 16, size: 12, type: "i32", View: Int32Array },
  vec3u: { numElements: 3, align: 16, size: 12, type: "u32", View: Uint32Array },
  vec3f: { numElements: 3, align: 16, size: 12, type: "f32", View: Float32Array },
  vec3h: { numElements: 3, align: 8, size: 6, type: "u16", View: Uint16Array },
  vec4i: { numElements: 4, align: 16, size: 16, type: "i32", View: Int32Array },
  vec4u: { numElements: 4, align: 16, size: 16, type: "u32", View: Uint32Array },
  vec4f: { numElements: 4, align: 16, size: 16, type: "f32", View: Float32Array },
  vec4h: { numElements: 4, align: 8, size: 8, type: "u16", View: Uint16Array },
  // AlignOf(vecR)	SizeOf(array<vecR, C>)
  mat2x2f: { numElements: 4, align: 8, size: 16, type: "f32", View: Float32Array },
  mat2x2h: { numElements: 4, align: 4, size: 8, type: "u16", View: Uint16Array },
  mat3x2f: { numElements: 6, align: 8, size: 24, type: "f32", View: Float32Array },
  mat3x2h: { numElements: 6, align: 4, size: 12, type: "u16", View: Uint16Array },
  mat4x2f: { numElements: 8, align: 8, size: 32, type: "f32", View: Float32Array },
  mat4x2h: { numElements: 8, align: 4, size: 16, type: "u16", View: Uint16Array },
  mat2x3f: { numElements: 8, align: 16, size: 32, pad: [3, 1], type: "f32", View: Float32Array },
  mat2x3h: { numElements: 8, align: 8, size: 16, pad: [3, 1], type: "u16", View: Uint16Array },
  mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: "f32", View: Float32Array },
  mat3x3h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: "u16", View: Uint16Array },
  mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: "f32", View: Float32Array },
  mat4x3h: { numElements: 16, align: 8, size: 32, pad: [3, 1], type: "u16", View: Uint16Array },
  mat2x4f: { numElements: 8, align: 16, size: 32, type: "f32", View: Float32Array },
  mat2x4h: { numElements: 8, align: 8, size: 16, type: "u16", View: Uint16Array },
  mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: "f32", View: Float32Array },
  mat3x4h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: "u16", View: Uint16Array },
  mat4x4f: { numElements: 16, align: 16, size: 64, type: "f32", View: Float32Array },
  mat4x4h: { numElements: 16, align: 8, size: 32, type: "u16", View: Uint16Array }
})[d], ye = (d) => (() => {
  switch (d.bindingType) {
    case "storage":
      return `var<${d.bindingType}, ${d.options.access}>`;
    case "uniform":
    default:
      return "var<uniform>";
  }
})(), bt = (d) => d.bindingType === "externalTexture" ? `var ${d.name}: texture_external;` : d.bindingType === "storageTexture" ? `var ${d.name}: texture_storage_${d.options.viewDimension}<${d.options.format}, ${d.options.access}>;` : d.bindingType === "depthTexture" ? `var ${d.name}: texture_depth${d.options.multisampled ? "_multisampled" : ""}_${d.options.viewDimension};` : `var ${d.name}: texture${d.options.multisampled ? "_multisampled" : ""}_${d.options.viewDimension}<f32>;`, wt = (d) => d.bindingType === "storage" && d.options.access === "read_write" ? "storage" : d.bindingType === "storage" ? "read-only-storage" : "uniform", Pt = (d) => (() => {
  switch (d.bindingType) {
    case "externalTexture":
      return { externalTexture: {} };
    case "storageTexture":
      return {
        storageTexture: {
          format: d.options.format,
          viewDimension: d.options.viewDimension
        }
      };
    case "texture":
      return {
        texture: {
          multisampled: d.options.multisampled,
          viewDimension: d.options.viewDimension
        }
      };
    case "depthTexture":
      return {
        texture: {
          multisampled: d.options.multisampled,
          format: d.options.format,
          viewDimension: d.options.viewDimension,
          sampleType: "depth"
        }
      };
    default:
      return null;
  }
})();
class O {
  /**
   * Vec2 constructor
   * @param x - X component of our {@link Vec2}
   * @param y - Y component of our {@link Vec2}
   */
  constructor(e = 0, t = e) {
    this.type = "Vec2", this._x = e, this._y = t;
  }
  /**
   * Get the X component of the {@link Vec2}
   */
  get x() {
    return this._x;
  }
  /**
   * Set the X component of the {@link Vec2}
   * Can trigger {@link onChange} callback
   * @param value - X component to set
   */
  set x(e) {
    const t = e !== this._x;
    this._x = e, t && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Get the Y component of the {@link Vec2}
   */
  get y() {
    return this._y;
  }
  /**
   * Set the Y component of the {@link Vec2}
   * Can trigger {@link onChange} callback
   * @param value - Y component to set
   */
  set y(e) {
    const t = e !== this._y;
    this._y = e, t && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Called when at least one component of the {@link Vec2} has changed
   * @param callback - callback to run when at least one component of the {@link Vec2} has changed
   * @returns - our {@link Vec2}
   */
  onChange(e) {
    return e && (this._onChangeCallback = e), this;
  }
  /**
   * Set the {@link Vec2} from values
   * @param x - new X component to set
   * @param y - new Y component to set
   * @returns - this {@link Vec2} after being set
   */
  set(e = 0, t = e) {
    return this.x = e, this.y = t, this;
  }
  /**
   * Add a {@link Vec2} to this {@link Vec2}
   * @param vector - {@link Vec2} to add
   * @returns - this {@link Vec2} after addition
   */
  add(e = new O()) {
    return this.x += e.x, this.y += e.y, this;
  }
  /**
   * Add a scalar to all the components of this {@link Vec2}
   * @param value - number to add
   * @returns - this {@link Vec2} after addition
   */
  addScalar(e = 0) {
    return this.x += e, this.y += e, this;
  }
  /**
   * Subtract a {@link Vec2} from this {@link Vec2}
   * @param vector - {@link Vec2} to subtract
   * @returns - this {@link Vec2} after subtraction
   */
  sub(e = new O()) {
    return this.x -= e.x, this.y -= e.y, this;
  }
  /**
   * Subtract a scalar to all the components of this {@link Vec2}
   * @param value - number to subtract
   * @returns - this {@link Vec2} after subtraction
   */
  subScalar(e = 0) {
    return this.x -= e, this.y -= e, this;
  }
  /**
   * Multiply a {@link Vec2} with this {@link Vec2}
   * @param vector - {@link Vec2} to multiply with
   * @returns - this {@link Vec2} after multiplication
   */
  multiply(e = new O(1)) {
    return this.x *= e.x, this.y *= e.y, this;
  }
  /**
   * Multiply all components of this {@link Vec2} with a scalar
   * @param value - number to multiply with
   * @returns - this {@link Vec2} after multiplication
   */
  multiplyScalar(e = 1) {
    return this.x *= e, this.y *= e, this;
  }
  /**
   * Copy a {@link Vec2} into this {@link Vec2}
   * @param vector - {@link Vec2} to copy
   * @returns - this {@link Vec2} after copy
   */
  copy(e = new O()) {
    return this.x = e.x, this.y = e.y, this;
  }
  /**
   * Clone this {@link Vec2}
   * @returns - cloned {@link Vec2}
   */
  clone() {
    return new O(this.x, this.y);
  }
  /**
   * Apply max values to this {@link Vec2} components
   * @param vector - {@link Vec2} representing max values
   * @returns - {@link Vec2} with max values applied
   */
  max(e = new O()) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this;
  }
  /**
   * Apply min values to this {@link Vec2} components
   * @param vector - {@link Vec2} representing min values
   * @returns - {@link Vec2} with min values applied
   */
  min(e = new O()) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this;
  }
  /**
   * Clamp this {@link Vec2} components by min and max {@link Vec2} vectors
   * @param min - minimum {@link Vec2} components to compare with
   * @param max - maximum {@link Vec2} components to compare with
   * @returns - clamped {@link Vec2}
   */
  clamp(e = new O(), t = new O()) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this;
  }
  /**
   * Check if 2 {@link Vec2} are equal
   * @param vector - {@link Vec2} to compare
   * @returns - whether the {@link Vec2} are equals or not
   */
  equals(e = new O()) {
    return this.x === e.x && this.y === e.y;
  }
  /**
   * Get the square length of this {@link Vec2}
   * @returns - square length of this {@link Vec2}
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  /**
   * Get the length of this {@link Vec2}
   * @returns - length of this {@link Vec2}
   */
  length() {
    return Math.sqrt(this.lengthSq());
  }
  /**
   * Normalize this {@link Vec2}
   * @returns - normalized {@link Vec2}
   */
  normalize() {
    let e = this.x * this.x + this.y * this.y;
    return e > 0 && (e = 1 / Math.sqrt(e)), this.x *= e, this.y *= e, this;
  }
  /**
   * Calculate the dot product of 2 {@link Vec2}
   * @param vector - {@link Vec2} to use for dot product
   * @returns - dot product of the 2 {@link Vec2}
   */
  dot(e = new O()) {
    return this.x * e.x + this.y * e.y;
  }
  /**
   * Calculate the linear interpolation of this {@link Vec2} by given {@link Vec2} and alpha, where alpha is the percent distance along the line
   * @param vector - {@link Vec2} to interpolate towards
   * @param [alpha=1] - interpolation factor in the [0, 1] interval
   * @returns - this {@link Vec2} after linear interpolation
   */
  lerp(e = new O(), t = 1) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this;
  }
}
class N {
  /**
   * Quat constructor
   * @param [elements] - initial array to use
   * @param [axisOrder='XYZ'] - axis order to use
   */
  constructor(e = new Float32Array([0, 0, 0, 1]), t = "XYZ") {
    this.type = "Quat", this.elements = e, this.axisOrder = t;
  }
  /**
   * Sets the {@link Quat} values from an array
   * @param array - an array of at least 4 elements
   * @returns - this {@link Quat} after being set
   */
  setFromArray(e = new Float32Array([0, 0, 0, 1])) {
    return this.elements[0] = e[0], this.elements[1] = e[1], this.elements[2] = e[2], this.elements[3] = e[3], this;
  }
  /**
   * Sets the {@link Quat} axis order
   * @param axisOrder - axis order to use
   * @returns - this {@link Quat} after axis order has been set
   */
  setAxisOrder(e = "XYZ") {
    switch (e = e.toUpperCase(), e) {
      case "XYZ":
      case "YXZ":
      case "ZXY":
      case "ZYX":
      case "YZX":
      case "XZY":
        this.axisOrder = e;
        break;
      default:
        this.axisOrder = "XYZ";
    }
    return this;
  }
  /**
   * Copy a {@link Quat} into this {@link Quat}
   * @param quaternion - {@link Quat} to copy
   * @returns - this {@link Quat} after copy
   */
  copy(e = new N()) {
    return this.elements = e.elements, this.axisOrder = e.axisOrder, this;
  }
  /**
   * Clone a {@link Quat}
   * @returns - cloned {@link Quat}
   */
  clone() {
    return new N().copy(this);
  }
  /**
   * Check if 2 {@link Quat} are equal
   * @param quaternion - {@link Quat} to check against
   * @returns - whether the {@link Quat} are equal or not
   */
  equals(e = new N()) {
    return this.elements[0] === e.elements[0] && this.elements[1] === e.elements[1] && this.elements[2] === e.elements[2] && this.elements[3] === e.elements[3] && this.axisOrder === e.axisOrder;
  }
  /**
   * Sets a rotation {@link Quat} using Euler angles {@link Vec3 | vector} and its axis order
   * @param vector - rotation {@link Vec3 | vector} to set our {@link Quat} from
   * @returns - {@link Quat} after having applied the rotation
   */
  setFromVec3(e = new f()) {
    const t = e.x * 0.5, s = e.y * 0.5, r = e.z * 0.5, i = Math.cos(t), n = Math.cos(s), o = Math.cos(r), a = Math.sin(t), h = Math.sin(s), u = Math.sin(r);
    return this.axisOrder === "XYZ" ? (this.elements[0] = a * n * o + i * h * u, this.elements[1] = i * h * o - a * n * u, this.elements[2] = i * n * u + a * h * o, this.elements[3] = i * n * o - a * h * u) : this.axisOrder === "YXZ" ? (this.elements[0] = a * n * o + i * h * u, this.elements[1] = i * h * o - a * n * u, this.elements[2] = i * n * u - a * h * o, this.elements[3] = i * n * o + a * h * u) : this.axisOrder === "ZXY" ? (this.elements[0] = a * n * o - i * h * u, this.elements[1] = i * h * o + a * n * u, this.elements[2] = i * n * u + a * h * o, this.elements[3] = i * n * o - a * h * u) : this.axisOrder === "ZYX" ? (this.elements[0] = a * n * o - i * h * u, this.elements[1] = i * h * o + a * n * u, this.elements[2] = i * n * u - a * h * o, this.elements[3] = i * n * o + a * h * u) : this.axisOrder === "YZX" ? (this.elements[0] = a * n * o + i * h * u, this.elements[1] = i * h * o + a * n * u, this.elements[2] = i * n * u - a * h * o, this.elements[3] = i * n * o - a * h * u) : this.axisOrder === "XZY" && (this.elements[0] = a * n * o - i * h * u, this.elements[1] = i * h * o - a * n * u, this.elements[2] = i * n * u + a * h * o, this.elements[3] = i * n * o + a * h * u), this;
  }
  /**
   * Set a {@link Quat} from a rotation axis {@link Vec3 | vector} and an angle
   * @param axis - normalized {@link Vec3 | vector} around which to rotate
   * @param angle - angle (in radians) to rotate
   * @returns - {@link Quat} after having applied the rotation
   */
  setFromAxisAngle(e = new f(), t = 0) {
    const s = t / 2, r = Math.sin(s);
    return this.elements[0] = e.x * r, this.elements[1] = e.y * r, this.elements[2] = e.z * r, this.elements[3] = Math.cos(s), this;
  }
  /**
   * Set a {@link Quat} from a rotation {@link Mat4 | matrix}
   * @param matrix - rotation {@link Mat4 | matrix} to use
   * @returns - {@link Quat} after having applied the rotation
   */
  setFromRotationMatrix(e) {
    const t = e.elements, s = t[0], r = t[4], i = t[8], n = t[1], o = t[5], a = t[9], h = t[2], u = t[6], c = t[10], l = s + o + c;
    if (l > 0) {
      const p = 0.5 / Math.sqrt(l + 1);
      this.elements[3] = 0.25 / p, this.elements[0] = (u - a) * p, this.elements[1] = (i - h) * p, this.elements[2] = (n - r) * p;
    } else if (s > o && s > c) {
      const p = 2 * Math.sqrt(1 + s - o - c);
      this.elements[3] = (u - a) / p, this.elements[0] = 0.25 * p, this.elements[1] = (r + n) / p, this.elements[2] = (i + h) / p;
    } else if (o > c) {
      const p = 2 * Math.sqrt(1 + o - s - c);
      this.elements[3] = (i - h) / p, this.elements[0] = (r + n) / p, this.elements[1] = 0.25 * p, this.elements[2] = (a + u) / p;
    } else {
      const p = 2 * Math.sqrt(1 + c - s - o);
      this.elements[3] = (n - r) / p, this.elements[0] = (i + h) / p, this.elements[1] = (a + u) / p, this.elements[2] = 0.25 * p;
    }
    return this;
  }
}
class G {
  // prettier-ignore
  /**
   * Mat4 constructor
   * @param elements - initial array to use, default to identity matrix
   */
  constructor(e = new Float32Array([
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
  ])) {
    this.type = "Mat4", this.elements = e;
  }
  /***
   * Sets the matrix from 16 numbers
   *
   * @param n11 number
   * @param n12 number
   * @param n13 number
   * @param n14 number
   * @param n21 number
   * @param n22 number
   * @param n23 number
   * @param n24 number
   * @param n31 number
   * @param n32 number
   * @param n33 number
   * @param n34 number
   * @param n41 number
   * @param n42 number
   * @param n43 number
   * @param n44 number
   *
   * @returns - this {@link Mat4} after being set
   */
  set(e, t, s, r, i, n, o, a, h, u, c, l, p, m, g, y) {
    const x = this.elements;
    return x[0] = e, x[1] = t, x[2] = s, x[3] = r, x[4] = i, x[5] = n, x[6] = o, x[7] = a, x[8] = h, x[9] = u, x[10] = c, x[11] = l, x[12] = p, x[13] = m, x[14] = g, x[15] = y, this;
  }
  /**
   * Sets the {@link Mat4} to an identity matrix
   * @returns - this {@link Mat4} after being set
   */
  identity() {
    return this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    ), this;
  }
  /**
   * Sets the {@link Mat4} values from an array
   * @param array - array to use
   * @returns - this {@link Mat4} after being set
   */
  // prettier-ignore
  setFromArray(e = new Float32Array([
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
  ])) {
    for (let t = 0; t < this.elements.length; t++)
      this.elements[t] = e[t];
    return this;
  }
  /**
   * Copy another {@link Mat4}
   * @param matrix
   * @returns - this {@link Mat4} after being set
   */
  copy(e = new G()) {
    const t = e.elements;
    return this.elements[0] = t[0], this.elements[1] = t[1], this.elements[2] = t[2], this.elements[3] = t[3], this.elements[4] = t[4], this.elements[5] = t[5], this.elements[6] = t[6], this.elements[7] = t[7], this.elements[8] = t[8], this.elements[9] = t[9], this.elements[10] = t[10], this.elements[11] = t[11], this.elements[12] = t[12], this.elements[13] = t[13], this.elements[14] = t[14], this.elements[15] = t[15], this;
  }
  /**
   * Clone a {@link Mat4}
   * @returns - cloned {@link Mat4}
   */
  clone() {
    return new G().copy(this);
  }
  /**
   * Multiply this {@link Mat4} with another {@link Mat4}
   * @param matrix - {@link Mat4} to multiply with
   * @returns - this {@link Mat4} after multiplication
   */
  multiply(e = new G()) {
    return this.multiplyMatrices(this, e);
  }
  /**
   * Multiply another {@link Mat4} with this {@link Mat4}
   * @param matrix - {@link Mat4} to multiply with
   * @returns - this {@link Mat4} after multiplication
   */
  premultiply(e = new G()) {
    return this.multiplyMatrices(e, this);
  }
  /**
   * Multiply two {@link Mat4}
   * @param a - first {@link Mat4}
   * @param b - second {@link Mat4}
   * @returns - {@link Mat4} resulting from the multiplication
   */
  multiplyMatrices(e = new G(), t = new G()) {
    const s = e.elements, r = t.elements, i = this.elements, n = s[0], o = s[4], a = s[8], h = s[12], u = s[1], c = s[5], l = s[9], p = s[13], m = s[2], g = s[6], y = s[10], x = s[14], R = s[3], B = s[7], w = s[11], v = s[15], M = r[0], b = r[4], C = r[8], T = r[12], A = r[1], q = r[5], D = r[9], X = r[13], W = r[2], E = r[6], S = r[10], F = r[14], L = r[3], $ = r[7], H = r[11], J = r[15];
    return i[0] = n * M + o * A + a * W + h * L, i[4] = n * b + o * q + a * E + h * $, i[8] = n * C + o * D + a * S + h * H, i[12] = n * T + o * X + a * F + h * J, i[1] = u * M + c * A + l * W + p * L, i[5] = u * b + c * q + l * E + p * $, i[9] = u * C + c * D + l * S + p * H, i[13] = u * T + c * X + l * F + p * J, i[2] = m * M + g * A + y * W + x * L, i[6] = m * b + g * q + y * E + x * $, i[10] = m * C + g * D + y * S + x * H, i[14] = m * T + g * X + y * F + x * J, i[3] = R * M + B * A + w * W + v * L, i[7] = R * b + B * q + w * E + v * $, i[11] = R * C + B * D + w * S + v * H, i[15] = R * T + B * X + w * F + v * J, this;
  }
  /**
   * {@link premultiply} this {@link Mat4} by a translate matrix (i.e. translateMatrix = new Mat4().translate(vector))
   * @param vector - translation {@link Vec3 | vector} to use
   * @returns - this {@link Mat4} after the premultiply translate operation
   */
  premultiplyTranslate(e = new f()) {
    const n = e.x, o = e.y, a = e.z, h = this.elements, u = this.elements, c = h[0], l = h[4], p = h[8], m = h[12], g = h[1], y = h[5], x = h[9], R = h[13], B = h[2], w = h[6], v = h[10], M = h[14], b = h[3], C = h[7], T = h[11], A = h[15];
    return u[0] = 1 * c + n * b, u[4] = 1 * l + n * C, u[8] = 1 * p + n * T, u[12] = 1 * m + n * A, u[1] = 1 * g + o * b, u[5] = 1 * y + o * C, u[9] = 1 * x + o * T, u[13] = 1 * R + o * A, u[2] = 1 * B + a * b, u[6] = 1 * w + a * C, u[10] = 1 * v + a * T, u[14] = 1 * M + a * A, u[3] = 1 * b, u[7] = 1 * C, u[11] = 1 * T, u[15] = 1 * A, this;
  }
  /**
   * {@link premultiply} this {@link Mat4} by a scale matrix (i.e. translateMatrix = new Mat4().scale(vector))
   * @param vector - scale {@link Vec3 | vector} to use
   * @returns - this {@link Mat4} after the premultiply scale operation
   */
  premultiplyScale(e = new f()) {
    const t = this.elements, s = this.elements, r = e.x, i = e.y, n = e.z, o = 1, a = t[0], h = t[4], u = t[8], c = t[12], l = t[1], p = t[5], m = t[9], g = t[13], y = t[2], x = t[6], R = t[10], B = t[14], w = t[3], v = t[7], M = t[11], b = t[15];
    return s[0] = r * a, s[4] = r * h, s[8] = r * u, s[12] = r * c, s[1] = i * l, s[5] = i * p, s[9] = i * m, s[13] = i * g, s[2] = n * y, s[6] = n * x, s[10] = n * R, s[14] = n * B, s[3] = o * w, s[7] = o * v, s[11] = o * M, s[15] = o * b, this;
  }
  /**
   * Get the {@link Mat4} inverse
   * @returns - the {@link Mat4} inverted
   */
  invert() {
    const e = this.elements, t = e[0], s = e[1], r = e[2], i = e[3], n = e[4], o = e[5], a = e[6], h = e[7], u = e[8], c = e[9], l = e[10], p = e[11], m = e[12], g = e[13], y = e[14], x = e[15], R = c * y * h - g * l * h + g * a * p - o * y * p - c * a * x + o * l * x, B = m * l * h - u * y * h - m * a * p + n * y * p + u * a * x - n * l * x, w = u * g * h - m * c * h + m * o * p - n * g * p - u * o * x + n * c * x, v = m * c * a - u * g * a - m * o * l + n * g * l + u * o * y - n * c * y, M = t * R + s * B + r * w + i * v;
    if (M === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const b = 1 / M;
    return e[0] = R * b, e[1] = (g * l * i - c * y * i - g * r * p + s * y * p + c * r * x - s * l * x) * b, e[2] = (o * y * i - g * a * i + g * r * h - s * y * h - o * r * x + s * a * x) * b, e[3] = (c * a * i - o * l * i - c * r * h + s * l * h + o * r * p - s * a * p) * b, e[4] = B * b, e[5] = (u * y * i - m * l * i + m * r * p - t * y * p - u * r * x + t * l * x) * b, e[6] = (m * a * i - n * y * i - m * r * h + t * y * h + n * r * x - t * a * x) * b, e[7] = (n * l * i - u * a * i + u * r * h - t * l * h - n * r * p + t * a * p) * b, e[8] = w * b, e[9] = (m * c * i - u * g * i - m * s * p + t * g * p + u * s * x - t * c * x) * b, e[10] = (n * g * i - m * o * i + m * s * h - t * g * h - n * s * x + t * o * x) * b, e[11] = (u * o * i - n * c * i - u * s * h + t * c * h + n * s * p - t * o * p) * b, e[12] = v * b, e[13] = (u * g * r - m * c * r + m * s * l - t * g * l - u * s * y + t * c * y) * b, e[14] = (m * o * r - n * g * r - m * s * a + t * g * a + n * s * y - t * o * y) * b, e[15] = (n * c * r - u * o * r + u * s * a - t * c * a - n * s * l + t * o * l) * b, this;
  }
  /**
   * Clone and invert the {@link Mat4}
   * @returns - inverted cloned {@link Mat4}
   */
  getInverse() {
    return this.clone().invert();
  }
  /**
   * Translate a {@link Mat4}
   * @param vector - translation {@link Vec3 | vector} to use
   * @returns - translated {@link Mat4}
   */
  translate(e = new f()) {
    const t = this.elements;
    return t[12] = t[0] * e.x + t[4] * e.y + t[8] * e.z + t[12], t[13] = t[1] * e.x + t[5] * e.y + t[9] * e.z + t[13], t[14] = t[2] * e.x + t[6] * e.y + t[10] * e.z + t[14], t[15] = t[3] * e.x + t[7] * e.y + t[11] * e.z + t[15], this;
  }
  /**
   * Scale a {@link Mat4}
   * @param vector - scale {@link Vec3 | vector} to use
   * @returns - scaled {@link Mat4}
   */
  scale(e = new f()) {
    const t = this.elements;
    return t[0] *= e.x, t[1] *= e.x, t[2] *= e.x, t[3] *= e.x, t[4] *= e.y, t[5] *= e.y, t[6] *= e.y, t[7] *= e.y, t[8] *= e.z, t[9] *= e.z, t[10] *= e.z, t[11] *= e.z, this;
  }
  /**
   * Rotate a {@link Mat4} from a {@link Quat | quaternion}
   * @param quaternion - {@link Quat | quaternion} to use
   * @returns - rotated {@link Mat4}
   */
  rotateFromQuaternion(e = new N()) {
    const t = this.elements, s = e.elements[0], r = e.elements[1], i = e.elements[2], n = e.elements[3], o = s + s, a = r + r, h = i + i, u = s * o, c = s * a, l = s * h, p = r * a, m = r * h, g = i * h, y = n * o, x = n * a, R = n * h;
    return t[0] = 1 - (p + g), t[4] = c - R, t[8] = l + x, t[1] = c + R, t[5] = 1 - (u + g), t[9] = m - y, t[2] = l - x, t[6] = m + y, t[10] = 1 - (u + p), this;
  }
  /**
   * Set this {@link Mat4} as a rotation matrix based on an eye, target and up {@link Vec3 | vectors}
   * @param eye - {@link Vec3 | position vector} of the object that should be rotated
   * @param target - {@link Vec3 | target vector} to look at
   * @param up - up {@link Vec3 | vector}
   * @returns - rotated {@link Mat4}
   */
  lookAt(e = new f(), t = new f(), s = new f(0, 1, 0)) {
    const r = this.elements, i = e.clone().sub(t);
    i.lengthSq() === 0 && (i.z = 1), i.normalize();
    const n = new f().crossVectors(s, i);
    n.lengthSq() === 0 && (Math.abs(s.z) === 1 ? i.x += 1e-4 : i.z += 1e-4, i.normalize(), n.crossVectors(s, i)), n.normalize();
    const o = new f().crossVectors(i, n);
    return r[0] = n.x, r[4] = o.x, r[8] = i.x, r[1] = n.y, r[5] = o.y, r[9] = i.y, r[2] = n.z, r[6] = o.z, r[10] = i.z, this;
  }
  /**
   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale
   * Equivalent for applying translation, rotation and scale matrices but much faster
   * Source code from: http://glmatrix.net/docs/mat4.js.html
   *
   * @param translation - translation {@link Vec3 | vector} to use
   * @param quaternion - {@link Quat | quaternion} to use
   * @param scale - translation {@link Vec3 | vector} to use
   * @returns - transformed {@link Mat4}
   */
  compose(e = new f(), t = new N(), s = new f(1)) {
    const r = this.elements, i = t.elements[0], n = t.elements[1], o = t.elements[2], a = t.elements[3], h = i + i, u = n + n, c = o + o, l = i * h, p = i * u, m = i * c, g = n * u, y = n * c, x = o * c, R = a * h, B = a * u, w = a * c, v = s.x, M = s.y, b = s.z;
    return r[0] = (1 - (g + x)) * v, r[1] = (p + w) * v, r[2] = (m - B) * v, r[3] = 0, r[4] = (p - w) * M, r[5] = (1 - (l + x)) * M, r[6] = (y + R) * M, r[7] = 0, r[8] = (m + B) * b, r[9] = (y - R) * b, r[10] = (1 - (l + g)) * b, r[11] = 0, r[12] = e.x, r[13] = e.y, r[14] = e.z, r[15] = 1, this;
  }
  /**
   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale, rotating and scaling around the given {@link Vec3 | origin vector}
   * Equivalent for applying translation, rotation and scale matrices but much faster
   * Source code from: http://glmatrix.net/docs/mat4.js.html
   *
   * @param translation - translation {@link Vec3 | vector} to use
   * @param quaternion - {@link Quat | quaternion} to use
   * @param scale - translation {@link Vec3 | vector} to use
   * @param origin - origin {@link Vec3 | vector} around which to scale and rotate
   * @returns - transformed {@link Mat4}
   */
  composeFromOrigin(e = new f(), t = new N(), s = new f(1), r = new f()) {
    const i = this.elements, n = t.elements[0], o = t.elements[1], a = t.elements[2], h = t.elements[3], u = n + n, c = o + o, l = a + a, p = n * u, m = n * c, g = n * l, y = o * c, x = o * l, R = a * l, B = h * u, w = h * c, v = h * l, M = s.x, b = s.y, C = s.z, T = r.x, A = r.y, q = r.z, D = (1 - (y + R)) * M, X = (m + v) * M, W = (g - w) * M, E = (m - v) * b, S = (1 - (p + R)) * b, F = (x + B) * b, L = (g + w) * C, $ = (x - B) * C, H = (1 - (p + y)) * C;
    return i[0] = D, i[1] = X, i[2] = W, i[3] = 0, i[4] = E, i[5] = S, i[6] = F, i[7] = 0, i[8] = L, i[9] = $, i[10] = H, i[11] = 0, i[12] = e.x + T - (D * T + E * A + L * q), i[13] = e.y + A - (X * T + S * A + $ * q), i[14] = e.z + q - (W * T + F * A + H * q), i[15] = 1, this;
  }
  /**
   * Get the translation {@link Vec3} component of a {@link Mat4}
   * @param position - {@link Vec3} to set
   * @returns - translation {@link Vec3} component of this {@link Mat4}
   */
  getTranslation(e = new f()) {
    return e.set(this.elements[12], this.elements[13], this.elements[14]);
  }
}
class f {
  /**
   * Vec3 constructor
   * @param x - X component of our {@link Vec3}
   * @param y - Y component of our {@link Vec3}
   * @param z - Z component of our {@link Vec3}
   */
  constructor(e = 0, t = e, s = e) {
    this.type = "Vec3", this._x = e, this._y = t, this._z = s;
  }
  /**
   * Get the X component of the {@link Vec3}
   */
  get x() {
    return this._x;
  }
  /**
   * Set the X component of the {@link Vec3}
   * Can trigger {@link onChange} callback
   * @param value - X component to set
   */
  set x(e) {
    const t = e !== this._x;
    this._x = e, t && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Get the Y component of the {@link Vec3}
   */
  get y() {
    return this._y;
  }
  /**
   * Set the Y component of the {@link Vec3}
   * Can trigger {@link onChange} callback
   * @param value - Y component to set
   */
  set y(e) {
    const t = e !== this._y;
    this._y = e, t && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Get the Z component of the {@link Vec3}
   */
  get z() {
    return this._z;
  }
  /**
   * Set the Z component of the {@link Vec3}
   * Can trigger {@link onChange} callback
   * @param value - Z component to set
   */
  set z(e) {
    const t = e !== this._z;
    this._z = e, t && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Called when at least one component of the {@link Vec3} has changed
   * @param callback - callback to run when at least one component of the {@link Vec3} has changed
   * @returns - our {@link Vec3}
   */
  onChange(e) {
    return e && (this._onChangeCallback = e), this;
  }
  /**
   * Set the {@link Vec3} from values
   * @param x - new X component to set
   * @param y - new Y component to set
   * @param z - new Z component to set
   * @returns - this {@link Vec3} after being set
   */
  set(e = 0, t = e, s = e) {
    return this.x = e, this.y = t, this.z = s, this;
  }
  /**
   * Add a {@link Vec3} to this {@link Vec3}
   * @param vector - {@link Vec3} to add
   * @returns - this {@link Vec3} after addition
   */
  add(e = new f()) {
    return this.x += e.x, this.y += e.y, this.z += e.z, this;
  }
  /**
   * Add a scalar to all the components of this {@link Vec3}
   * @param value - number to add
   * @returns - this {@link Vec3} after addition
   */
  addScalar(e = 0) {
    return this.x += e, this.y += e, this.z += e, this;
  }
  /**
   * Subtract a {@link Vec3} from this {@link Vec3}
   * @param vector - {@link Vec3} to subtract
   * @returns - this {@link Vec3} after subtraction
   */
  sub(e = new f()) {
    return this.x -= e.x, this.y -= e.y, this.z -= e.z, this;
  }
  /**
   * Subtract a scalar to all the components of this {@link Vec3}
   * @param value - number to subtract
   * @returns - this {@link Vec3} after subtraction
   */
  subScalar(e = 0) {
    return this.x -= e, this.y -= e, this.z -= e, this;
  }
  /**
   * Multiply a {@link Vec3} with this {@link Vec3}
   * @param vector - {@link Vec3} to multiply with
   * @returns - this {@link Vec3} after multiplication
   */
  multiply(e = new f(1)) {
    return this.x *= e.x, this.y *= e.y, this.z *= e.z, this;
  }
  /**
   * Multiply all components of this {@link Vec3} with a scalar
   * @param value - number to multiply with
   * @returns - this {@link Vec3} after multiplication
   */
  multiplyScalar(e = 1) {
    return this.x *= e, this.y *= e, this.z *= e, this;
  }
  /**
   * Copy a {@link Vec3} into this {@link Vec3}
   * @param vector - {@link Vec3} to copy
   * @returns - this {@link Vec3} after copy
   */
  copy(e = new f()) {
    return this.x = e.x, this.y = e.y, this.z = e.z, this;
  }
  /**
   * Clone this {@link Vec3}
   * @returns - cloned {@link Vec3}
   */
  clone() {
    return new f(this.x, this.y, this.z);
  }
  /**
   * Apply max values to this {@link Vec3} components
   * @param vector - {@link Vec3} representing max values
   * @returns - {@link Vec3} with max values applied
   */
  max(e = new f()) {
    return this.x = Math.max(this.x, e.x), this.y = Math.max(this.y, e.y), this.z = Math.max(this.z, e.z), this;
  }
  /**
   * Apply min values to this {@link Vec3} components
   * @param vector - {@link Vec3} representing min values
   * @returns - {@link Vec3} with min values applied
   */
  min(e = new f()) {
    return this.x = Math.min(this.x, e.x), this.y = Math.min(this.y, e.y), this.z = Math.min(this.z, e.z), this;
  }
  /**
   * Clamp this {@link Vec3} components by min and max {@link Vec3} vectors
   * @param min - minimum {@link Vec3} components to compare with
   * @param max - maximum {@link Vec3} components to compare with
   * @returns - clamped {@link Vec3}
   */
  clamp(e = new f(), t = new f()) {
    return this.x = Math.max(e.x, Math.min(t.x, this.x)), this.y = Math.max(e.y, Math.min(t.y, this.y)), this.z = Math.max(e.z, Math.min(t.z, this.z)), this;
  }
  /**
   * Check if 2 {@link Vec3} are equal
   * @param vector - {@link Vec3} to compare
   * @returns - whether the {@link Vec3} are equals or not
   */
  equals(e = new f()) {
    return this.x === e.x && this.y === e.y && this.z === e.z;
  }
  /**
   * Get the square length of this {@link Vec3}
   * @returns - square length of this {@link Vec3}
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  /**
   * Get the length of this {@link Vec3}
   * @returns - length of this {@link Vec3}
   */
  length() {
    return Math.sqrt(this.lengthSq());
  }
  /**
   * Normalize this {@link Vec3}
   * @returns - normalized {@link Vec3}
   */
  normalize() {
    let e = this.lengthSq();
    return e > 0 && (e = 1 / Math.sqrt(e)), this.x *= e, this.y *= e, this.z *= e, this;
  }
  /**
   * Calculate the dot product of 2 {@link Vec3}
   * @param vector - {@link Vec3} to use for dot product
   * @returns - dot product of the 2 {@link Vec3}
   */
  dot(e = new f()) {
    return this.x * e.x + this.y * e.y + this.z * e.z;
  }
  /**
   * Get the cross product of this {@link Vec3} with another {@link Vec3}
   * @param vector - {@link Vec3} to use for cross product
   * @returns - this {@link Vec3} after cross product
   */
  cross(e = new f()) {
    return this.crossVectors(this, e);
  }
  /**
   * Set this {@link Vec3} as the result of the cross product of two {@link Vec3}
   * @param a - first {@link Vec3} to use for cross product
   * @param b - second {@link Vec3} to use for cross product
   * @returns - this {@link Vec3} after cross product
   */
  crossVectors(e = new f(), t = new f()) {
    const s = e.x, r = e.y, i = e.z, n = t.x, o = t.y, a = t.z;
    return this.x = r * a - i * o, this.y = i * n - s * a, this.z = s * o - r * n, this;
  }
  /**
   * Calculate the linear interpolation of this {@link Vec3} by given {@link Vec3} and alpha, where alpha is the percent distance along the line
   * @param vector - {@link Vec3} to interpolate towards
   * @param alpha - interpolation factor in the [0, 1] interval
   * @returns - this {@link Vec3} after linear interpolation
   */
  lerp(e = new f(), t = 1) {
    return this.x += (e.x - this.x) * t, this.y += (e.y - this.y) * t, this.z += (e.z - this.z) * t, this;
  }
  /**
   * Apply a {@link Mat4 | matrix} to a {@link Vec3}
   * Useful to convert a position {@link Vec3} from plane local world to webgl space using projection view matrix for example
   * Source code from: http://glmatrix.net/docs/vec3.js.html
   * @param matrix - {@link Mat4 | matrix} to use
   * @returns - this {@link Vec3} after {@link Mat4 | matrix} application
   */
  applyMat4(e = new G()) {
    const t = this._x, s = this._y, r = this._z, i = e.elements;
    let n = i[3] * t + i[7] * s + i[11] * r + i[15];
    return n = n || 1, this.x = (i[0] * t + i[4] * s + i[8] * r + i[12]) / n, this.y = (i[1] * t + i[5] * s + i[9] * r + i[13]) / n, this.z = (i[2] * t + i[6] * s + i[10] * r + i[14]) / n, this;
  }
  /**
   * Apply a {@link Quat | quaternion} (rotation in 3D space) to this {@link Vec3}
   * @param quaternion - {@link Quat | quaternion} to use
   * @returns - this {@link Vec3} with the transformation applied
   */
  applyQuat(e = new N()) {
    const t = this.x, s = this.y, r = this.z, i = e.elements[0], n = e.elements[1], o = e.elements[2], a = e.elements[3], h = a * t + n * r - o * s, u = a * s + o * t - i * r, c = a * r + i * s - n * t, l = -i * t - n * s - o * r;
    return this.x = h * a + l * -i + u * -o - c * -n, this.y = u * a + l * -n + c * -i - h * -o, this.z = c * a + l * -o + h * -n - u * -i, this;
  }
  /**
   * Rotate a {@link Vec3} around and axis by a given angle
   * @param axis - normalized {@link Vec3} around which to rotate
   * @param angle - angle (in radians) to rotate
   * @param quaternion - optional {@link Quat | quaternion} to use for rotation computations
   * @returns - this {@link Vec3} with the rotation applied
   */
  applyAxisAngle(e = new f(), t = 0, s = new N()) {
    return this.applyQuat(s.setFromAxisAngle(e, t));
  }
  /**
   * Project a 3D coordinate {@link Vec3} to a 2D coordinate {@link Vec3}
   * @param camera - {@link Camera} to use for projection
   * @returns - projected {@link Vec3}
   */
  project(e) {
    return this.applyMat4(e.viewMatrix).applyMat4(e.projectionMatrix), this;
  }
  /**
   * Unproject a 2D coordinate {@link Vec3} to 3D coordinate {@link Vec3}
   * @param camera - {@link Camera} to use for projection
   * @returns - unprojected {@link Vec3}
   */
  unproject(e) {
    return this.applyMat4(e.projectionMatrix.getInverse()).applyMat4(e.modelMatrix), this;
  }
}
const vt = 4, be = 4, V = vt * be;
class Te {
  /**
   * BufferElement constructor
   * @param parameters - {@link BufferElementParams | parameters} used to create our {@link BufferElement}
   */
  constructor({ name: e, key: t, type: s = "f32" }) {
    this.name = e, this.key = t, this.type = s, this.bufferLayout = et(this.type.replace("array", "").replace("<", "").replace(">", "")), this.alignment = {
      start: {
        row: 0,
        byte: 0
      },
      end: {
        row: 0,
        byte: 0
      }
    };
  }
  /**
   * Get the total number of rows used by this {@link BufferElement}
   * @readonly
   */
  get rowCount() {
    return this.alignment.end.row - this.alignment.start.row + 1;
  }
  /**
   * Get the total number of bytes used by this {@link BufferElement} based on {@link BufferElementAlignment | alignment} start and end offsets
   * @readonly
   */
  get byteCount() {
    return Math.abs(this.endOffset - this.startOffset) + 1;
  }
  /**
   * Get the total number of bytes used by this {@link BufferElement}, including final padding
   * @readonly
   */
  get paddedByteCount() {
    return (this.alignment.end.row + 1) * V;
  }
  /**
   * Get the offset (i.e. byte index) at which our {@link BufferElement} starts
   * @readonly
   */
  get startOffset() {
    return this.getByteCountAtPosition(this.alignment.start);
  }
  /**
   * Get the array offset (i.e. array index) at which our {@link BufferElement} starts
   * @readonly
   */
  get startOffsetToIndex() {
    return this.startOffset / be;
  }
  /**
   * Get the offset (i.e. byte index) at which our {@link BufferElement} ends
   * @readonly
   */
  get endOffset() {
    return this.getByteCountAtPosition(this.alignment.end);
  }
  /**
   * Get the array offset (i.e. array index) at which our {@link BufferElement} ends
   * @readonly
   */
  get endOffsetToIndex() {
    return Math.floor(this.endOffset / be);
  }
  /**
   * Get the position at given offset (i.e. byte index)
   * @param offset - byte index to use
   */
  getPositionAtOffset(e = 0) {
    return {
      row: Math.floor(e / V),
      byte: e % V
    };
  }
  /**
   * Get the number of bytes at a given {@link BufferElementAlignmentPosition | position}
   * @param position - {@link BufferElementAlignmentPosition | position} from which to count
   * @returns - byte count at the given {@link BufferElementAlignmentPosition | position}
   */
  getByteCountAtPosition(e = { row: 0, byte: 0 }) {
    return e.row * V + e.byte;
  }
  /**
   * Check that a {@link BufferElementAlignmentPosition#byte | byte position} does not overflow its max value (16)
   * @param position - {@link BufferElementAlignmentPosition | position}
   * @returns - updated {@link BufferElementAlignmentPosition | position}
   */
  applyOverflowToPosition(e = { row: 0, byte: 0 }) {
    if (e.byte > V - 1) {
      const t = e.byte % V;
      e.row += Math.floor(e.byte / V), e.byte = t;
    }
    return e;
  }
  /**
   * Get the number of bytes between two {@link BufferElementAlignmentPosition | positions}
   * @param p1 - first {@link BufferElementAlignmentPosition | position}
   * @param p2 - second {@link BufferElementAlignmentPosition | position}
   * @returns - number of bytes
   */
  getByteCountBetweenPositions(e = { row: 0, byte: 0 }, t = { row: 0, byte: 0 }) {
    return Math.abs(this.getByteCountAtPosition(t) - this.getByteCountAtPosition(e));
  }
  /**
   * Compute the right alignment (i.e. start and end rows and bytes) given the size and align properties and the next available {@link BufferElementAlignmentPosition | position}
   * @param nextPositionAvailable - next {@link BufferElementAlignmentPosition | position} at which we should insert this element
   * @returns - computed {@link BufferElementAlignment | alignment}
   */
  getElementAlignment(e = { row: 0, byte: 0 }) {
    const t = {
      start: e,
      end: e
    }, { size: s, align: r } = this.bufferLayout;
    return e.byte % r !== 0 && (e.byte += e.byte % r), s <= V && e.byte + s > V && (e.row += 1, e.byte = 0), t.end = {
      row: e.row + Math.ceil(s / V) - 1,
      byte: e.byte + (s % V === 0 ? V - 1 : s % V - 1)
      // end of row ? then it ends on slot (bytesPerRow - 1)
    }, t.end = this.applyOverflowToPosition(t.end), t;
  }
  /**
   * Set the {@link BufferElementAlignment | alignment} from a {@link BufferElementAlignmentPosition | position}
   * @param position - {@link BufferElementAlignmentPosition | position} at which to start inserting the values in the {@link !core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   */
  setAlignmentFromPosition(e = { row: 0, byte: 0 }) {
    this.alignment = this.getElementAlignment(e);
  }
  /**
   * Set the {@link BufferElementAlignment | alignment} from an offset (byte count)
   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   */
  setAlignment(e = 0) {
    this.setAlignmentFromPosition(this.getPositionAtOffset(e));
  }
  /**
   * Set the {@link view}
   * @param arrayBuffer - the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   * @param arrayView - the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view}
   */
  setView(e, t) {
    this.view = new this.bufferLayout.View(
      e,
      this.startOffset,
      this.byteCount / this.bufferLayout.View.BYTES_PER_ELEMENT
    );
  }
  /**
   * Update the {@link view} based on the new value
   * @param value - new value to use
   */
  update(e) {
    this.type === "f32" || this.type === "u32" || this.type === "i32" ? this.view[0] = e : this.type === "vec2f" ? (this.view[0] = e.x ?? e[0] ?? 0, this.view[1] = e.y ?? e[1] ?? 0) : this.type === "vec3f" ? (this.view[0] = e.x ?? e[0] ?? 0, this.view[1] = e.y ?? e[1] ?? 0, this.view[2] = e.z ?? e[2] ?? 0) : e.elements ? this.view.set(e.elements) : (ArrayBuffer.isView(e) || Array.isArray(e)) && this.view.set(e);
  }
  /**
   * Extract the data corresponding to this specific {@link BufferElement} from a {@link Float32Array} holding the {@link GPUBuffer} data of the parentMesh {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}
   * @param result - {@link Float32Array} holding {@link GPUBuffer} data
   * @returns - extracted data from the {@link Float32Array}
   */
  extractDataFromBufferResult(e) {
    return e.slice(this.startOffsetToIndex, this.endOffsetToIndex);
  }
}
class tt extends Te {
  /**
   * BufferArrayElement constructor
   * @param parameters - {@link BufferArrayElementParams | parameters} used to create our {@link BufferArrayElement}
   */
  constructor({ name: e, key: t, type: s = "f32", arrayLength: r = 1 }) {
    super({ name: e, key: t, type: s }), this.arrayLength = r, this.numElements = this.arrayLength / this.bufferLayout.numElements;
  }
  /**
   * Get the array stride between two elements of the array, in indices
   * @readonly
   */
  get arrayStrideToIndex() {
    return this.arrayStride / be;
  }
  /**
   * Set the {@link core/bindings/bufferElements/BufferElement.BufferElementAlignment | alignment}
   * To compute how arrays are packed, we get the second item alignment as well and use it to calculate the arrayStride between two array elements. Using the arrayStride and the total number of elements, we can easily get the end alignment position.
   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array buffer}
   */
  setAlignment(e = 0) {
    super.setAlignment(e);
    const t = this.getElementAlignment(this.getPositionAtOffset(this.endOffset + 1));
    this.arrayStride = this.getByteCountBetweenPositions(this.alignment.end, t.end), this.alignment.end = this.getPositionAtOffset(this.endOffset + this.arrayStride * (this.numElements - 1));
  }
  /**
   * Update the {@link view} based on the new value
   * @param value - new value to use
   */
  update(e) {
    if (ArrayBuffer.isView(e) || Array.isArray(e)) {
      let t = 0;
      const s = this.byteCount / this.bufferLayout.View.BYTES_PER_ELEMENT, r = Math.ceil(s / this.numElements);
      for (let i = 0; i < this.numElements; i++)
        for (let n = 0; n < this.bufferLayout.numElements; n++)
          this.view[n + i * r] = e[t], t++;
    } else
      _(`BufferArrayElement: value passed to ${this.name} is not an array: ${e}`);
  }
}
class Re extends tt {
  /**
   * BufferInterleavedArrayElement constructor
   * @param parameters - {@link BufferArrayElementParams | parameters} used to create our {@link BufferInterleavedArrayElement}
   */
  constructor({ name: e, key: t, type: s = "f32", arrayLength: r = 1 }) {
    super({ name: e, key: t, type: s, arrayLength: r }), this.arrayStride = 1, this.arrayLength = r, this.numElements = this.arrayLength / this.bufferLayout.numElements;
  }
  /**
   * Get the total number of slots used by this {@link BufferInterleavedArrayElement} based on buffer layout size and total number of elements
   * @readonly
   */
  get byteCount() {
    return this.bufferLayout.size * this.numElements;
  }
  /**
   * Set the {@link core/bindings/bufferElements/BufferElement.BufferElementAlignment | alignment}
   * To compute how arrays are packed, we need to compute the arrayStride between two elements beforehand and pass it here. Using the arrayStride and the total number of elements, we can easily get the end alignment position.
   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   * @param stride - Stride in the {@link ArrayBuffer} between two elements of the array
   */
  setAlignment(e = 0, t = 0) {
    this.alignment = this.getElementAlignment(this.getPositionAtOffset(e)), this.arrayStride = t, this.alignment.end = this.getPositionAtOffset(this.endOffset + t * (this.numElements - 1));
  }
  /**
   * Set the {@link view} and {@link viewSetFunction}
   * @param arrayBuffer - the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   * @param arrayView - the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view}
   */
  setView(e, t) {
    this.view = new this.bufferLayout.View(this.bufferLayout.numElements * this.numElements), this.viewSetFunction = ((s) => {
      switch (this.bufferLayout.View) {
        case Int32Array:
          return s.setInt32.bind(s);
        case Uint16Array:
          return s.setUint16.bind(s);
        case Uint32Array:
          return s.setUint32.bind(s);
        case Float32Array:
        default:
          return s.setFloat32.bind(s);
      }
    })(t);
  }
  /**
   * Update the {@link view} based on the new value, and then update the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view} using sub arrays
   * @param value - new value to use
   */
  update(e) {
    super.update(e);
    for (let t = 0; t < this.numElements; t++) {
      const s = this.view.subarray(
        t * this.bufferLayout.numElements,
        t * this.bufferLayout.numElements + this.bufferLayout.numElements
      ), r = this.startOffset + t * this.arrayStride;
      s.forEach((i, n) => {
        this.viewSetFunction(r + n * this.bufferLayout.View.BYTES_PER_ELEMENT, i, !0);
      });
    }
  }
  /**
   * Extract the data corresponding to this specific {@link BufferInterleavedArrayElement} from a {@link Float32Array} holding the {@link GPUBuffer} data of the parentMesh {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}
   * @param result - {@link Float32Array} holding {@link GPUBuffer} data
   */
  extractDataFromBufferResult(e) {
    const t = new Float32Array(this.arrayLength);
    for (let s = 0; s < this.numElements; s++) {
      const r = this.startOffsetToIndex + s * this.arrayStrideToIndex;
      for (let i = 0; i < this.bufferLayout.numElements; i++)
        t[s * this.bufferLayout.numElements + i] = e[r + i];
    }
    return t;
  }
}
class le extends Ue {
  /**
   * BufferBinding constructor
   * @param parameters - {@link BufferBindingParams | parameters} used to create our BufferBindings
   */
  constructor({
    label: e = "Uniform",
    name: t = "uniform",
    bindingType: s,
    visibility: r,
    useStruct: i = !0,
    access: n = "read",
    struct: o = {}
  }) {
    s = s ?? "uniform", super({ label: e, name: t, bindingType: s, visibility: r }), this.options = {
      ...this.options,
      useStruct: i,
      access: n,
      struct: o
    }, this.arrayBufferSize = 0, this.shouldUpdate = !1, this.useStruct = i, this.bufferElements = [], this.inputs = {}, this.buffer = null, this.setBindings(o), this.setBufferAttributes(), this.setWGSLFragment();
  }
  /**
   * Get {@link GPUBindGroupLayoutEntry#buffer | bind group layout entry resource}
   * @readonly
   */
  get resourceLayout() {
    return {
      buffer: {
        type: wt(this)
      }
    };
  }
  /**
   * Get {@link GPUBindGroupEntry#resource | bind group resource}
   * @readonly
   */
  get resource() {
    return { buffer: this.buffer };
  }
  /**
   * Format bindings struct and set our {@link inputs}
   * @param bindings - bindings inputs
   */
  setBindings(e) {
    Object.keys(e).forEach((t) => {
      const s = {};
      for (const r in e[t])
        r !== "value" && (s[r] = e[t][r]);
      Object.defineProperty(s, "value", {
        get() {
          return s._value;
        },
        set(r) {
          s._value = r, s.shouldUpdate = !0;
        }
      }), s.value = e[t].value, (s.value instanceof O || s.value instanceof f) && s.value.onChange(() => s.shouldUpdate = !0), this.inputs[t] = s;
    });
  }
  /**
   * Set our buffer attributes:
   * Takes all the {@link inputs} and adds them to the {@link bufferElements} array with the correct start and end offsets (padded), then fill our {@link arrayBuffer} typed array accordingly.
   */
  setBufferAttributes() {
    const e = Object.keys(this.inputs).filter(
      (s) => this.inputs[s].type.indexOf("array") !== -1
    );
    let t = Object.keys(this.inputs).sort((s, r) => {
      const i = Math.min(0, this.inputs[s].type.indexOf("array")), n = Math.min(0, this.inputs[r].type.indexOf("array"));
      return i - n;
    });
    if (e.length > 1 && (t = t.filter((s) => !e.includes(s))), t.forEach((s) => {
      const r = this.inputs[s], i = {
        name: de(r.name ?? s),
        key: s,
        type: r.type
      }, n = r.type.indexOf("array") !== -1 && (Array.isArray(r.value) || ArrayBuffer.isView(r.value));
      this.bufferElements.push(
        n ? new tt({
          ...i,
          arrayLength: r.value.length
        }) : new Te(i)
      );
    }), this.bufferElements.forEach((s, r) => {
      const i = r === 0 ? 0 : this.bufferElements[r - 1].endOffset + 1;
      s.setAlignment(i);
    }), e.length > 1)
      if (e.map((i) => {
        const n = this.inputs[i], o = et(n.type.replace("array", "").replace("<", "").replace(">", ""));
        return n.value.length / o.numElements;
      }).every((i, n, o) => i === o[0])) {
        const i = e.map((a) => {
          const h = this.inputs[a];
          return new Re({
            name: de(h.name ?? a),
            key: a,
            type: h.type,
            arrayLength: h.value.length
          });
        }), n = e.map((a) => {
          const h = this.inputs[a];
          return new Te({
            name: de(h.name ?? a),
            key: a,
            type: h.type.replace("array", "").replace("<", "").replace(">", "")
          });
        });
        n.forEach((a, h) => {
          h === 0 ? this.bufferElements.length ? a.setAlignmentFromPosition({
            row: this.bufferElements[this.bufferElements.length - 1].alignment.end.row + 1,
            byte: 0
          }) : a.setAlignment(0) : a.setAlignment(n[h - 1].endOffset + 1);
        });
        const o = n[n.length - 1].endOffset + 1 - n[0].startOffset;
        i.forEach((a, h) => {
          a.setAlignment(n[h].startOffset, o);
        }), this.bufferElements = [...this.bufferElements, ...i];
      } else
        _(
          `BufferBinding: "${this.label}" contains multiple array inputs that should use an interleaved array, but their sizes do not match. These inputs cannot be added to the BufferBinding: "${e.join(
            ", "
          )}"`
        );
    this.arrayBufferSize = this.bufferElements.length ? this.bufferElements[this.bufferElements.length - 1].paddedByteCount : 0, this.arrayBuffer = new ArrayBuffer(this.arrayBufferSize), this.arrayView = new DataView(this.arrayBuffer, 0, this.arrayBuffer.byteLength), this.bufferElements.forEach((s) => {
      s.setView(this.arrayBuffer, this.arrayView);
    }), this.shouldUpdate = this.arrayBufferSize > 0;
  }
  /**
   * Set the WGSL code snippet to append to the shaders code. It consists of variable (and Struct structures if needed) declarations.
   */
  setWGSLFragment() {
    const e = Be(this.label);
    if (this.useStruct) {
      const t = this.bufferElements.filter(
        (r) => !(r instanceof Re)
      ), s = this.bufferElements.filter(
        (r) => r instanceof Re
      );
      if (s.length) {
        const r = this.bindingType === "uniform" ? `, ${s[0].numElements}` : "";
        if (t.length) {
          this.wgslStructFragment = `struct ${e}Element {
	${s.map((o) => o.name + ": " + o.type.replace("array", "").replace("<", "").replace(">", "")).join(`,
	`)}
};

`;
          const i = `${this.name}Element: array<${e}Element${r}>,`;
          this.wgslStructFragment += `struct ${e} {
	${t.map((o) => o.name + ": " + o.type).join(`,
	`)}
	${i}
};`;
          const n = ye(this);
          this.wgslGroupFragment = [`${n} ${this.name}: ${e};`];
        } else {
          this.wgslStructFragment = `struct ${e} {
	${this.bufferElements.map((n) => n.name + ": " + n.type.replace("array", "").replace("<", "").replace(">", "")).join(`,
	`)}
};`;
          const i = ye(this);
          this.wgslGroupFragment = [`${i} ${this.name}: array<${e}${r}>;`];
        }
      } else {
        this.wgslStructFragment = `struct ${e} {
	${this.bufferElements.map((i) => {
          const n = this.bindingType === "uniform" && "numElements" in i ? `array<${i.type.replace("array", "").replace("<", "").replace(">", "")}, ${i.numElements}>` : i.type;
          return i.name + ": " + n;
        }).join(`,
	`)}
};`;
        const r = ye(this);
        this.wgslGroupFragment = [`${r} ${this.name}: ${e};`];
      }
    } else
      this.wgslStructFragment = "", this.wgslGroupFragment = this.bufferElements.map((t) => `${ye(this)} ${t.name}: ${t.type};`);
  }
  /**
   * Set a binding shouldUpdate flag to true to update our {@link arrayBuffer} array during next render.
   * @param bindingName - the binding name/key to update
   */
  shouldUpdateBinding(e = "") {
    const t = Object.keys(this.inputs).find((s) => this.inputs[s].name === e);
    t && (this.inputs[t].shouldUpdate = !0);
  }
  /**
   * Executed at the beginning of a Material render call.
   * If any of the {@link inputs} has changed, run its onBeforeUpdate callback then updates our {@link arrayBuffer} array.
   * Also sets the {@link shouldUpdate} property to true so the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} knows it will need to update the {@link GPUBuffer}.
   */
  update() {
    Object.keys(this.inputs).forEach((e) => {
      const t = this.inputs[e], s = this.bufferElements.find((r) => r.key === e);
      t.shouldUpdate && s && (t.onBeforeUpdate && t.onBeforeUpdate(), s.update(t.value), this.shouldUpdate = !0, t.shouldUpdate = !1);
    });
  }
  /**
   * Extract the data corresponding to a specific {@link BufferElement} from a {@link Float32Array} holding the {@link BufferBinding#buffer | GPU buffer} data of this {@link BufferBinding}
   * @param parameters - parameters used to extract the data
   * @param parameters.result - {@link Float32Array} holding {@link GPUBuffer} data
   * @param parameters.bufferElementName - name of the {@link BufferElement} to use to extract the data
   * @returns - extracted data from the {@link Float32Array}
   */
  extractBufferElementDataFromBufferResult({
    result: e,
    bufferElementName: t
  }) {
    const s = this.bufferElements.find((r) => r.name === t);
    return s ? s.extractDataFromBufferResult(e) : e;
  }
}
class Le extends le {
  /**
   * WritableBufferBinding constructor
   * @param parameters - {@link WritableBufferBindingParams | parameters} used to create our {@link WritableBufferBinding}
   */
  constructor({
    label: e = "Work",
    name: t = "work",
    bindingType: s,
    useStruct: r = !0,
    struct: i = {},
    visibility: n,
    access: o = "read_write",
    shouldCopyResult: a = !1
  }) {
    s = "storage", n = "compute", super({ label: e, name: t, bindingType: s, useStruct: r, struct: i, visibility: n, access: o }), this.options = {
      ...this.options,
      shouldCopyResult: a
    }, this.shouldCopyResult = a, this.resultBuffer = null;
  }
}
class Oe {
  /**
   * BindGroup constructor
   * @param renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object
   * @param parameters - {@link BindGroupParams | parameters} used to create our {@link BindGroup}
   */
  constructor(e, { label: t = "BindGroup", index: s = 0, bindings: r = [], uniforms: i, storages: n } = {}) {
    this.type = "BindGroup", e = e && e.renderer || e, U(e, this.type), this.renderer = e, this.options = {
      label: t,
      index: s,
      bindings: r,
      ...i && { uniforms: i },
      ...n && { storages: n }
    }, this.index = s, this.uuid = Y(), this.bindings = [], r.length && this.addBindings(r), (this.options.uniforms || this.options.storages) && this.setInputBindings(), this.resetEntries(), this.bindGroupLayout = null, this.bindGroup = null, this.needsPipelineFlush = !1, this.renderer.addBindGroup(this);
  }
  /**
   * Sets our {@link BindGroup#index | bind group index}
   * @param index - {@link BindGroup#index | bind group index} to set
   */
  setIndex(e) {
    this.index = e;
  }
  /**
   * Adds an array of already created {@link bindings} (buffers, texture, etc.) to the {@link bindings} array
   * @param bindings - {@link bindings} to add
   */
  addBindings(e = []) {
    this.bindings = [...this.bindings, ...e];
  }
  /**
   * Adds an already created {@link bindings} (buffers, texture, etc.) to the {@link bindings} array
   * @param binding - binding to add
   */
  addBinding(e) {
    this.bindings.push(e);
  }
  /**
   * Creates Bindings based on a list of inputs
   * @param bindingType - {@link core/bindings/Binding.Binding#bindingType | binding type}
   * @param inputs - {@link ReadOnlyInputBindings | inputs (uniform or storage)} that will be used to create the binding
   * @returns - a {@link bindings} array
   */
  createInputBindings(e = "uniform", t = {}) {
    return [
      ...Object.keys(t).map((s) => {
        const r = t[s], i = {
          label: Be(r.label || s),
          name: s,
          bindingType: e,
          useStruct: !0,
          // by default
          visibility: r.access === "read_write" ? "compute" : r.visibility,
          access: r.access ?? "read",
          // read by default
          struct: r.struct,
          ...r.shouldCopyResult !== void 0 && { shouldCopyResult: r.shouldCopyResult }
        }, n = i.access === "read_write" ? Le : le;
        return r.useStruct !== !1 ? new n(i) : Object.keys(r.struct).map((o) => (i.label = Be(r.label ? r.label + o : s + o), i.name = s + o, i.useStruct = !1, i.struct = { [o]: r.struct[o] }, new n(i)));
      })
    ].flat();
  }
  /**
   * Create and adds {@link bindings} based on inputs provided upon creation
   */
  setInputBindings() {
    this.addBindings([
      ...this.createInputBindings("uniform", this.options.uniforms),
      ...this.createInputBindings("storage", this.options.storages)
    ]);
  }
  /**
   * Get whether the GPU bind group is ready to be created
   * It can be created if it has {@link bindings} and has not been created yet
   * @readonly
   */
  get shouldCreateBindGroup() {
    return !this.bindGroup && !!this.bindings.length;
  }
  /**
   * Reset our {@link BindGroup} {@link entries}
   */
  resetEntries() {
    this.entries = {
      bindGroupLayout: [],
      bindGroup: []
    };
  }
  /**
   * Create the GPU buffers, {@link bindings}, {@link entries}, {@link bindGroupLayout} and {@link bindGroup}
   */
  createBindGroup() {
    this.fillEntries(), this.setBindGroupLayout(), this.setBindGroup();
  }
  /**
   * Reset the {@link BindGroup#entries.bindGroup | bindGroup entries}, recreates them and then recreate the {@link BindGroup#bindGroup | GPU bind group}
   */
  resetBindGroup() {
    this.entries.bindGroup = [], this.bindings.forEach((e) => {
      this.entries.bindGroup.push({
        binding: this.entries.bindGroup.length,
        resource: e.resource
      });
    }), this.setBindGroup();
  }
  /**
   * Reset the {@link BindGroup#entries.bindGroupLayout | bindGroupLayout entries}, recreates them and then recreate the {@link BindGroup#bindGroupLayout | GPU bind group layout}
   */
  resetBindGroupLayout() {
    this.entries.bindGroupLayout = [], this.bindings.forEach((e) => {
      this.entries.bindGroupLayout.push({
        binding: this.entries.bindGroupLayout.length,
        ...e.resourceLayout,
        visibility: e.visibility
      });
    }), this.setBindGroupLayout();
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration
   */
  loseContext() {
    this.resetEntries(), this.bufferBindings.forEach((e) => {
      e.buffer = null, "resultBuffer" in e && (e.resultBuffer = null);
    }), this.bindGroup = null, this.bindGroupLayout = null, this.needsPipelineFlush = !0;
  }
  /**
   * Get all {@link BindGroup#bindings | bind group bindings} that handle a {@link GPUBuffer}
   */
  get bufferBindings() {
    return this.bindings.filter(
      (e) => e instanceof le || e instanceof Le
    );
  }
  /**
   * Creates binding GPUBuffer with correct params
   * @param binding - the binding element
   */
  createBindingBuffer(e) {
    e.buffer = this.renderer.createBuffer({
      label: this.options.label + ": " + e.bindingType + " buffer from: " + e.label,
      size: e.arrayBuffer.byteLength,
      usage: e.bindingType === "uniform" ? GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX : GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX
    }), "resultBuffer" in e && (e.resultBuffer = this.renderer.createBuffer({
      label: this.options.label + ": Result buffer from: " + e.label,
      size: e.arrayBuffer.byteLength,
      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
    }));
  }
  /**
   * Fill in our entries bindGroupLayout and bindGroup arrays with the correct binding resources.
   * For buffer struct, create a GPUBuffer first if needed
   */
  fillEntries() {
    this.bindings.forEach((e) => {
      e.visibility || (e.visibility = GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE), "buffer" in e && !e.buffer && this.createBindingBuffer(e), this.entries.bindGroupLayout.push({
        binding: this.entries.bindGroupLayout.length,
        ...e.resourceLayout,
        visibility: e.visibility
      }), this.entries.bindGroup.push({
        binding: this.entries.bindGroup.length,
        resource: e.resource
      });
    });
  }
  /**
   * Get a bind group binding by name/key
   * @param bindingName - the binding name or key
   * @returns - the found binding, or null if not found
   */
  getBindingByName(e = "") {
    return this.bindings.find((t) => t.name === e);
  }
  /**
   * Create a GPUBindGroupLayout and set our {@link bindGroupLayout}
   */
  setBindGroupLayout() {
    this.bindGroupLayout = this.renderer.createBindGroupLayout({
      label: this.options.label + " layout",
      entries: this.entries.bindGroupLayout
    });
  }
  /**
   * Create a GPUBindGroup and set our {@link bindGroup}
   */
  setBindGroup() {
    this.bindGroup = this.renderer.createBindGroup({
      label: this.options.label,
      layout: this.bindGroupLayout,
      entries: this.entries.bindGroup
    });
  }
  /**
   * Check whether we should update (write) our {@link GPUBuffer} or not.
   */
  updateBufferBindings() {
    this.bufferBindings.forEach((e, t) => {
      e.update(), e.shouldUpdate && (!e.useStruct && e.bufferElements.length > 1 ? this.renderer.queueWriteBuffer(e.buffer, 0, e.bufferElements[t].view) : this.renderer.queueWriteBuffer(e.buffer, 0, e.arrayBuffer)), e.shouldUpdate = !1;
    });
  }
  /**
   * Update the {@link BindGroup}, which means update its {@link BindGroup#bufferBindings | buffer bindings} and {@link BindGroup#resetBindGroup | reset it} if needed.
   * Called at each render from the parentMesh {@link core/materials/Material.Material | material}
   */
  update() {
    this.updateBufferBindings();
    const e = this.bindings.some((s) => s.shouldResetBindGroup), t = this.bindings.some((s) => s.shouldResetBindGroupLayout);
    (e || t) && this.renderer.onAfterCommandEncoderSubmission.add(
      () => {
        this.bindings.forEach((s) => {
          s.shouldResetBindGroup = !1, s.shouldResetBindGroupLayout = !1;
        });
      },
      { once: !0 }
    ), t && (this.resetBindGroupLayout(), this.needsPipelineFlush = !0), e && this.resetBindGroup();
  }
  /**
   * Clones a {@link BindGroup} from a list of {@link bindings}
   * Useful to create a new bind group with already created buffers, but swapped
   * @param parameters - parameters to use for cloning
   * @param parameters.bindings - our input {@link bindings}
   * @param [parameters.keepLayout=false] - whether we should keep original {@link bindGroupLayout} or not
   * @returns - the cloned {@link BindGroup}
   */
  clone({
    bindings: e = [],
    keepLayout: t = !1
  } = {}) {
    const s = { ...this.options };
    s.label += " (copy)";
    const r = new this.constructor(this.renderer, {
      label: s.label
    });
    return r.setIndex(this.index), r.options = s, (e.length ? e : this.bindings).forEach((n, o) => {
      r.addBinding(n), "buffer" in n && !n.buffer && r.createBindingBuffer(n), t || r.entries.bindGroupLayout.push({
        binding: r.entries.bindGroupLayout.length,
        ...n.resourceLayout,
        visibility: n.visibility
      }), r.entries.bindGroup.push({
        binding: r.entries.bindGroup.length,
        resource: n.resource
      });
    }), t && (r.entries.bindGroupLayout = [...this.entries.bindGroupLayout]), r.setBindGroupLayout(), r.setBindGroup(), r;
  }
  /**
   * Destroy our {@link BindGroup}
   * Most important is to destroy the GPUBuffers to free the memory
   */
  destroy() {
    this.renderer.removeBindGroup(this), this.bufferBindings.forEach((e) => {
      var t, s;
      "buffer" in e && (this.renderer.removeBuffer(e.buffer), (t = e.buffer) == null || t.destroy(), e.buffer = null), "resultBuffer" in e && (this.renderer.removeBuffer(e.resultBuffer), (s = e.resultBuffer) == null || s.destroy(), e.resultBuffer = null);
    }), this.bindings = [], this.bindGroupLayout = null, this.bindGroup = null, this.resetEntries();
  }
}
class st extends Ue {
  /**
   * TextureBinding constructor
   * @param parameters - {@link TextureBindingParams | parameters} used to create our {@link TextureBinding}
   */
  constructor({
    label: e = "Texture",
    name: t = "texture",
    bindingType: s,
    visibility: r,
    texture: i,
    format: n = "rgba8unorm",
    access: o = "write",
    viewDimension: a = "2d",
    multisampled: h = !1
  }) {
    s = s ?? "texture", s === "storageTexture" && (r = "compute"), super({ label: e, name: t, bindingType: s, visibility: r }), this.options = {
      ...this.options,
      texture: i,
      format: n,
      access: o,
      viewDimension: a,
      multisampled: h
    }, this.resource = i, this.setWGSLFragment();
  }
  /**
   * Get bind group layout entry resource, either for {@link GPUBindGroupLayoutEntry#texture | texture} or {@link GPUBindGroupLayoutEntry#externalTexture | external texture}
   * @readonly
   */
  get resourceLayout() {
    return Pt(this);
  }
  /**
   * Get the {@link GPUBindGroupEntry#resource | bind group resource}
   */
  get resource() {
    return this.texture instanceof GPUTexture ? this.texture.createView({ label: this.options.label + " view" }) : this.texture instanceof GPUExternalTexture ? this.texture : null;
  }
  /**
   * Set the {@link GPUBindGroupEntry#resource | bind group resource}
   * @param value - new bind group resource
   */
  set resource(e) {
    (e || this.texture) && (this.shouldResetBindGroup = !0), this.texture = e;
  }
  /**
   * Set or update our {@link Binding#bindingType | bindingType} and our WGSL code snippet
   * @param bindingType - the new {@link Binding#bindingType | binding type}
   */
  setBindingType(e) {
    e !== this.bindingType && (e && (this.shouldResetBindGroupLayout = !0), this.bindingType = e, this.setWGSLFragment());
  }
  /**
   * Set the correct WGSL code snippet.
   */
  setWGSLFragment() {
    this.wgslGroupFragment = [`${bt(this)}`];
  }
}
let Mt = 0;
class Ae {
  /**
   * Object3D constructor
   */
  constructor() {
    this.parent = null, this.children = [], Object.defineProperty(this, "object3DIndex", { value: Mt++ }), this.setMatrices(), this.setTransforms();
  }
  /* PARENT */
  /**
   * Get the parent of this {@link Object3D} if any
   */
  get parent() {
    return this._parent;
  }
  /**
   * Set the parent of this {@link Object3D}
   * @param value - new parent to set, could be an {@link Object3D} or null
   */
  set parent(e) {
    var t;
    this.parent && (this.parent.children = this.parent.children.filter((s) => s.object3DIndex !== this.object3DIndex)), this._parent = e, (t = this._parent) == null || t.children.push(this);
  }
  /* TRANSFORMS */
  /**
   * Set our transforms properties and {@link Vec3#onChange | vectors onChange} callbacks
   */
  setTransforms() {
    this.transforms = {
      origin: {
        model: new f()
      },
      quaternion: new N(),
      rotation: new f(),
      position: {
        world: new f()
      },
      scale: new f(1)
    }, this.rotation.onChange(() => this.applyRotation()), this.position.onChange(() => this.applyPosition()), this.scale.onChange(() => this.applyScale()), this.transformOrigin.onChange(() => this.applyTransformOrigin());
  }
  /**
   * Get our rotation {@link Vec3 | vector}
   */
  get rotation() {
    return this.transforms.rotation;
  }
  /**
   * Set our rotation {@link Vec3 | vector}
   * @param value - new rotation {@link Vec3 | vector}
   */
  set rotation(e) {
    this.transforms.rotation = e, this.applyRotation();
  }
  /**
   * Get our {@link Quat | quaternion}
   */
  get quaternion() {
    return this.transforms.quaternion;
  }
  /**
   * Set our {@link Quat | quaternion}
   * @param value - new {@link Quat | quaternion}
   */
  set quaternion(e) {
    this.transforms.quaternion = e;
  }
  /**
   * Get our position {@link Vec3 | vector}
   */
  get position() {
    return this.transforms.position.world;
  }
  /**
   * Set our position {@link Vec3 | vector}
   * @param value - new position {@link Vec3 | vector}
   */
  set position(e) {
    this.transforms.position.world = e;
  }
  /**
   * Get our scale {@link Vec3 | vector}
   */
  get scale() {
    return this.transforms.scale;
  }
  /**
   * Set our scale {@link Vec3 | vector}
   * @param value - new scale {@link Vec3 | vector}
   */
  set scale(e) {
    this.transforms.scale = e, this.applyScale();
  }
  /**
   * Get our transform origin {@link Vec3 | vector}
   */
  get transformOrigin() {
    return this.transforms.origin.model;
  }
  /**
   * Set our transform origin {@link Vec3 | vector}
   * @param value - new transform origin {@link Vec3 | vector}
   */
  set transformOrigin(e) {
    this.transforms.origin.model = e;
  }
  /**
   * Apply our rotation and tell our {@link modelMatrix | model matrix} to update
   */
  applyRotation() {
    this.quaternion.setFromVec3(this.rotation), this.shouldUpdateModelMatrix();
  }
  /**
   * Tell our {@link modelMatrix | model matrix} to update
   */
  applyPosition() {
    this.shouldUpdateModelMatrix();
  }
  /**
   * Tell our {@link modelMatrix | model matrix} to update
   */
  applyScale() {
    this.shouldUpdateModelMatrix();
  }
  /**
   * Tell our {@link modelMatrix | model matrix} to update
   */
  applyTransformOrigin() {
    this.shouldUpdateModelMatrix();
  }
  /* MATRICES */
  /**
   * Set our {@link modelMatrix | model matrix} and {@link worldMatrix | world matrix}
   */
  setMatrices() {
    this.matrices = {
      model: {
        matrix: new G(),
        shouldUpdate: !1,
        onUpdate: () => this.updateModelMatrix()
      },
      world: {
        matrix: new G(),
        shouldUpdate: !1,
        onUpdate: () => this.updateWorldMatrix()
      }
    };
  }
  /**
   * Get our {@link Mat4 | model matrix}
   */
  get modelMatrix() {
    return this.matrices.model.matrix;
  }
  /**
   * Set our {@link Mat4 | model matrix}
   * @param value - new {@link Mat4 | model matrix}
   */
  set modelMatrix(e) {
    this.matrices.model.matrix = e, this.shouldUpdateModelMatrix();
  }
  /**
   * Set our {@link modelMatrix | model matrix} shouldUpdate flag to true (tell it to update)
   */
  shouldUpdateModelMatrix() {
    this.matrices.model.shouldUpdate = !0, this.shouldUpdateWorldMatrix();
  }
  /**
   * Get our {@link Mat4 | world matrix}
   */
  get worldMatrix() {
    return this.matrices.world.matrix;
  }
  /**
   * Set our {@link Mat4 | world matrix}
   * @param value - new {@link Mat4 | world matrix}
   */
  set worldMatrix(e) {
    this.matrices.world.matrix = e, this.shouldUpdateWorldMatrix();
  }
  /**
   * Set our {@link worldMatrix | world matrix} shouldUpdate flag to true (tell it to update)
   */
  shouldUpdateWorldMatrix() {
    this.matrices.world.shouldUpdate = !0;
  }
  /**
   * Rotate this {@link Object3D} so it looks at the {@link Vec3 | target}
   * @param target - {@link Vec3 | target} to look at
   */
  lookAt(e = new f()) {
    const t = new G().lookAt(e, this.position);
    this.quaternion.setFromRotationMatrix(t), this.shouldUpdateModelMatrix();
  }
  /**
   * Update our {@link modelMatrix | model matrix}
   */
  updateModelMatrix() {
    this.modelMatrix = this.modelMatrix.composeFromOrigin(
      this.position,
      this.quaternion,
      this.scale,
      this.transformOrigin
    ), this.shouldUpdateWorldMatrix();
  }
  /**
   * Update our {@link worldMatrix | model matrix}
   */
  updateWorldMatrix() {
    this.parent ? this.worldMatrix.multiplyMatrices(this.parent.worldMatrix, this.modelMatrix) : this.worldMatrix.copy(this.modelMatrix), this.children.forEach((e) => {
      e.shouldUpdateWorldMatrix();
    });
  }
  /**
   * Callback to run if at least one matrix of the stack has been updated
   */
  onAfterMatrixStackUpdate() {
  }
  /**
   * Check at each render whether we should update our matrices, and update them if needed
   */
  updateMatrixStack() {
    if (this.parent && this.parent.constructor.name === "Object3D" && this.parent.updateMatrixStack(), !!Object.keys(this.matrices).find((t) => this.matrices[t].shouldUpdate)) {
      for (const t in this.matrices)
        this.matrices[t].shouldUpdate && (this.matrices[t].onUpdate(), this.matrices[t].shouldUpdate = !1);
      this.onAfterMatrixStackUpdate();
    }
  }
}
const De = {
  name: "texture",
  generateMips: !1,
  flipY: !1,
  format: "rgba8unorm",
  premultipliedAlpha: !0,
  placeholderColor: [0, 0, 0, 255],
  // default to black
  useExternalTextures: !0,
  fromTexture: null,
  viewDimension: "2d",
  cache: !0
};
var Z, Q, oe, ae;
class ue extends Ae {
  /**
   * Texture constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Texture}
   * @param parameters - {@link TextureParams | parameters} used to create this {@link Texture}
   */
  constructor(t, s = De) {
    super();
    k(this, Z, void 0);
    k(this, Q, void 0);
    k(this, oe, void 0);
    k(this, ae, void 0);
    z(this, Z, new f(1)), z(this, Q, new f(1)), z(this, oe, new f(1)), z(this, ae, new G()), this._onSourceLoadedCallback = () => {
    }, this._onSourceUploadedCallback = () => {
    }, this.type = "Texture", t = t && t.renderer || t, U(t, s.label ? s.label + " " + this.type : this.type), this.renderer = t, this.uuid = Y();
    const r = {
      ...De,
      source: s.fromTexture ? s.fromTexture.options.source : null,
      sourceType: s.fromTexture ? s.fromTexture.options.sourceType : null
    };
    this.options = { ...r, ...s }, this.options.label = this.options.label ?? this.options.name, this.texture = null, this.externalTexture = null, this.source = null, this.size = {
      width: 1,
      height: 1,
      depth: 1
    }, this.textureMatrix = new le({
      label: this.options.label + ": model matrix",
      name: this.options.name + "Matrix",
      useStruct: !1,
      struct: {
        matrix: {
          name: this.options.name + "Matrix",
          type: "mat4x4f",
          value: this.modelMatrix
        }
      }
    }), this.setBindings(), this._parentMesh = null, this.sourceLoaded = !1, this.sourceUploaded = !1, this.shouldUpdate = !1, this.renderer.addTexture(this), this.createTexture();
  }
  /**
   * Set our {@link bindings}
   */
  setBindings() {
    this.bindings = [
      new st({
        label: this.options.label + ": texture",
        name: this.options.name,
        texture: this.options.sourceType === "externalVideo" ? this.externalTexture : this.texture,
        bindingType: this.options.sourceType === "externalVideo" ? "externalTexture" : "texture",
        viewDimension: this.options.viewDimension
      }),
      this.textureMatrix
    ];
  }
  /**
   * Get our {@link TextureBinding | GPU texture binding}
   * @readonly
   */
  get textureBinding() {
    return this.bindings[0];
  }
  /**
   * Get our texture {@link parentMesh}
   */
  get parentMesh() {
    return this._parentMesh;
  }
  /**
   * Set our texture {@link parentMesh}
   * @param value - texture {@link parentMesh} to set (i.e. any kind of {@link core/renderers/GPURenderer.RenderedMesh | Mesh}
   */
  set parentMesh(t) {
    this._parentMesh = t, this.resize();
  }
  /**
   * Get whether our {@link source} has been loaded
   */
  get sourceLoaded() {
    return this._sourceLoaded;
  }
  /**
   * Set whether our {@link source} has been loaded
   * @param value - boolean flag indicating if the {@link source} has been loaded
   */
  set sourceLoaded(t) {
    t && !this.sourceLoaded && this._onSourceLoadedCallback && this._onSourceLoadedCallback(), this._sourceLoaded = t;
  }
  /**
   * Get whether our {@link source} has been uploaded
   */
  get sourceUploaded() {
    return this._sourceUploaded;
  }
  /**
   * Set whether our {@link source} has been uploaded
   * @param value - boolean flag indicating if the {@link source} has been uploaded
   */
  set sourceUploaded(t) {
    t && !this.sourceUploaded && this._onSourceUploadedCallback && this._onSourceUploadedCallback(), this._sourceUploaded = t;
  }
  /**
   * Set our texture {@link transforms} object
   */
  setTransforms() {
    super.setTransforms(), this.transforms.quaternion.setAxisOrder("ZXY"), this.transforms.origin.model.set(0.5, 0.5, 0);
  }
  /* TEXTURE MATRIX */
  /**
   * Update the {@link modelMatrix}
   */
  updateModelMatrix() {
    if (!this.parentMesh)
      return;
    const t = this.parentMesh.scale ? this.parentMesh.scale : new f(1, 1, 1), s = this.parentMesh.boundingRect ? this.parentMesh.boundingRect.width * t.x : this.size.width, r = this.parentMesh.boundingRect ? this.parentMesh.boundingRect.height * t.y : this.size.height, i = s / r, n = this.size.width / this.size.height;
    s > r ? (P(this, Z).set(i, 1, 1), P(this, Q).set(1 / n, 1, 1)) : (P(this, Z).set(1, 1 / i, 1), P(this, Q).set(1, n, 1));
    const o = i > n != s > r ? 1 : s > r ? P(this, Z).x * P(this, Q).x : P(this, Q).y * P(this, Z).y;
    P(this, oe).set(1 / (o * this.scale.x), 1 / (o * this.scale.y), 1), P(this, ae).rotateFromQuaternion(this.quaternion), this.modelMatrix.identity().premultiplyTranslate(this.transformOrigin.clone().multiplyScalar(-1)).premultiplyScale(P(this, oe)).premultiplyScale(P(this, Z)).premultiply(P(this, ae)).premultiplyScale(P(this, Q)).premultiplyTranslate(this.transformOrigin).translate(this.position);
  }
  /**
   * If our {@link modelMatrix} has been updated, tell the {@link textureMatrix | texture matrix binding} to update as well
   */
  onAfterMatrixStackUpdate() {
    this.textureMatrix.shouldUpdateBinding(this.options.name + "Matrix");
  }
  /**
   * Resize our {@link Texture}
   */
  resize() {
    this.source && this.source instanceof HTMLCanvasElement && (this.source.width !== this.size.width || this.source.height !== this.size.height) && (this.setSourceSize(), this.createTexture()), this.shouldUpdateModelMatrix();
  }
  /**
   * Get the number of mip levels create based on {@link size}
   * @param sizes - Array containing our texture width, height and depth
   * @returns - number of mip levels
   */
  getNumMipLevels(...t) {
    const s = Math.max(...t);
    return 1 + Math.log2(s) | 0;
  }
  /**
   * Tell the {@link Renderer} to upload or texture
   */
  uploadTexture() {
    this.renderer.uploadTexture(this), this.shouldUpdate = !1;
  }
  /**
   * Import a {@link GPUExternalTexture} from the {@link Renderer}, update the  {@link textureBinding} and its {@link core/bindGroups/TextureBindGroup.TextureBindGroup | bind group}
   */
  uploadVideoTexture() {
    this.externalTexture = this.renderer.importExternalTexture(this.source), this.textureBinding.resource = this.externalTexture, this.textureBinding.setBindingType("externalTexture"), this.shouldUpdate = !1, this.sourceUploaded = !0;
  }
  /**
   * Copy a {@link Texture}
   * @param texture - {@link Texture} to copy
   */
  copy(t) {
    if (this.options.sourceType === "externalVideo" && t.options.sourceType !== "externalVideo") {
      _(`${this.options.label}: cannot copy a GPUTexture to a GPUExternalTexture`);
      return;
    } else if (this.options.sourceType !== "externalVideo" && t.options.sourceType === "externalVideo") {
      _(`${this.options.label}: cannot copy a GPUExternalTexture to a GPUTexture`);
      return;
    }
    this.options.fromTexture = t, this.options.sourceType = t.options.sourceType, this.options.generateMips = t.options.generateMips, this.options.flipY = t.options.flipY, this.options.format = t.options.format, this.options.premultipliedAlpha = t.options.premultipliedAlpha, this.options.placeholderColor = t.options.placeholderColor, this.options.useExternalTextures = t.options.useExternalTextures, this.sourceLoaded = t.sourceLoaded, this.sourceUploaded = t.sourceUploaded, t.texture && (t.sourceLoaded && (this.size = t.size, this.source = t.source, this.resize()), t.sourceUploaded ? (this.texture = t.texture, this.textureBinding.resource = this.texture) : this.createTexture());
  }
  /**
   * Set the {@link texture | GPU texture}
   */
  createTexture() {
    var s;
    const t = {
      label: this.options.label,
      format: this.options.format,
      size: [this.size.width, this.size.height, this.size.depth],
      // [1, 1] if no source
      dimensions: this.options.viewDimension === "1d" ? "1d" : this.options.viewDimension === "3d" ? "3d" : "2d",
      //sampleCount: this.source ? this.renderer.sampleCount : 1,
      usage: this.source ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST
    };
    this.options.sourceType !== "externalVideo" && (t.mipLevelCount = this.options.generateMips ? this.getNumMipLevels(this.size.width, this.size.height) : 1, (s = this.texture) == null || s.destroy(), this.texture = this.renderer.createTexture(t), this.textureBinding.resource = this.texture), this.shouldUpdate = !0;
  }
  /* SOURCES */
  /**
   * Set the {@link size} based on the {@link source}
   */
  setSourceSize() {
    this.size = {
      width: this.source.naturalWidth || this.source.width || this.source.videoWidth,
      height: this.source.naturalHeight || this.source.height || this.source.videoHeight,
      depth: 1
    };
  }
  /**
   * Load an {@link HTMLImageElement} from a URL and create an {@link ImageBitmap} to use as a {@link source}
   * @async
   * @param url - URL of the image to load
   * @returns - the newly created {@link ImageBitmap}
   */
  async loadImageBitmap(t) {
    const r = await (await fetch(t)).blob();
    return await createImageBitmap(r, { colorSpaceConversion: "none" });
  }
  /**
   * Load and create an {@link ImageBitmap} from a URL or {@link HTMLImageElement}, use it as a {@link source} and create the {@link GPUTexture}
   * @async
   * @param source - the image URL or {@link HTMLImageElement} to load
   * @returns - the newly created {@link ImageBitmap}
   */
  async loadImage(t) {
    const s = typeof t == "string" ? t : t.getAttribute("src");
    this.options.source = s, this.options.sourceType = "image";
    const r = this.renderer.textures.find((i) => i.options.source === s);
    if (r && r.texture && r.sourceUploaded) {
      this.copy(r);
      return;
    }
    this.sourceLoaded = !1, this.sourceUploaded = !1, this.source = await this.loadImageBitmap(this.options.source), this.setSourceSize(), this.resize(), this.sourceLoaded = !0, this.createTexture();
  }
  // weirldy enough, we don't have to do anything in that callback
  // because the <video> is not visible in the viewport, the video playback is throttled
  // and the rendering is janky
  // using requestVideoFrameCallback helps preventing this but is unsupported in Firefox at the moment
  // WebCodecs may be the way to go when time comes!
  // https://developer.chrome.com/blog/new-in-webgpu-113/#use-webcodecs-videoframe-source-in-importexternaltexture
  /**
   * Set our {@link shouldUpdate} flag to true at each new video frame
   */
  onVideoFrameCallback() {
    this.videoFrameCallbackId && (this.shouldUpdate = !0, this.source.requestVideoFrameCallback(this.onVideoFrameCallback.bind(this)));
  }
  /**
   * Callback to run when a {@link HTMLVideoElement} has loaded (when it has enough data to play).
   * Set the {@link HTMLVideoElement} as a {@link source} and create the {@link GPUTexture} or {@link GPUExternalTexture}
   * @param video - the newly loaded {@link HTMLVideoElement}
   */
  onVideoLoaded(t) {
    var s;
    this.sourceLoaded || (this.source = t, this.setSourceSize(), this.resize(), this.options.useExternalTextures ? (this.options.sourceType = "externalVideo", (s = this.texture) == null || s.destroy()) : (this.options.sourceType = "video", this.createTexture()), "requestVideoFrameCallback" in HTMLVideoElement.prototype && (this.videoFrameCallbackId = this.source.requestVideoFrameCallback(
      this.onVideoFrameCallback.bind(this)
    )), this.sourceLoaded = !0);
  }
  /**
   * Get whether the {@link source} is a video
   * @readonly
   */
  get isVideoSource() {
    return this.source && (this.options.sourceType === "video" || this.options.sourceType === "externalVideo");
  }
  /**
   * Load a video from a URL or {@link HTMLVideoElement} and register {@link onVideoLoaded} callback
   * @param source - the video URL or {@link HTMLVideoElement} to load
   */
  loadVideo(t) {
    let s;
    typeof t == "string" ? (s = document.createElement("video"), s.src = t) : s = t, s.preload = "auto", s.muted = !0, s.loop = !0, s.crossOrigin = "anonymous", s.setAttribute("playsinline", ""), this.options.source = s.src, this.sourceLoaded = !1, this.sourceUploaded = !1, s.readyState >= s.HAVE_ENOUGH_DATA ? this.onVideoLoaded(s) : s.addEventListener("canplaythrough", this.onVideoLoaded.bind(this, s), {
      once: !0
    }), isNaN(s.duration) && s.load();
  }
  /**
   * Load a {@link HTMLCanvasElement}, use it as a {@link source} and create the {@link GPUTexture}
   * @param source - the {@link HTMLCanvasElement} to use
   */
  loadCanvas(t) {
    this.options.source = t, this.options.sourceType = "canvas", this.sourceLoaded = !1, this.sourceUploaded = !1, this.source = t, this.setSourceSize(), this.resize(), this.sourceLoaded = !0, this.createTexture();
  }
  /* EVENTS */
  /**
   * Callback to run when the {@link source} has been loaded
   * @param callback - callback to run when the {@link source} has been loaded
   * @returns - our {@link Texture}
   */
  onSourceLoaded(t) {
    return t && (this._onSourceLoadedCallback = t), this;
  }
  /**
   * Callback to run when the {@link source} has been uploaded
   * @param callback - callback to run when the {@link source} been uploaded
   * @returns - our {@link Texture}
   */
  onSourceUploaded(t) {
    return t && (this._onSourceUploadedCallback = t), this;
  }
  /* RENDER */
  /**
   * Render a {@link Texture}:
   * - Update its {@link modelMatrix} and {@link bindings} if needed
   * - Upload the texture if it needs to be done
   */
  render() {
    this.updateMatrixStack(), this.textureMatrix.update(), this.options.sourceType === "externalVideo" && (this.shouldUpdate = !0), this.isVideoSource && !this.videoFrameCallbackId && this.source.readyState >= this.source.HAVE_CURRENT_DATA && !this.source.paused && (this.shouldUpdate = !0), this.shouldUpdate && this.options.sourceType && this.options.sourceType !== "externalVideo" && this.uploadTexture();
  }
  /* DESTROY */
  /**
   * Destroy the {@link Texture}
   */
  destroy() {
    var t;
    this.videoFrameCallbackId && this.source.cancelVideoFrameCallback(this.videoFrameCallbackId), this.isVideoSource && this.source.removeEventListener(
      "canplaythrough",
      this.onVideoLoaded.bind(this, this.source),
      {
        once: !0
      }
    ), this.renderer.removeTexture(this), (t = this.texture) == null || t.destroy(), this.texture = null;
  }
}
Z = new WeakMap(), Q = new WeakMap(), oe = new WeakMap(), ae = new WeakMap();
class Ve extends Oe {
  /**
   * TextureBindGroup constructor
   * @param  renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object
   * @param parameters - {@link TextureBindGroupParams | parameters} used to create our {@link TextureBindGroup}
   */
  constructor(e, { label: t, index: s = 0, bindings: r = [], uniforms: i, storages: n, textures: o = [], samplers: a = [] } = {}) {
    const h = "TextureBindGroup";
    e = e && e.renderer || e, U(e, h), super(e, { label: t, index: s, bindings: r, uniforms: i, storages: n }), this.options = {
      ...this.options,
      // will be filled after
      textures: [],
      samplers: []
    }, o.length && o.forEach((u) => this.addTexture(u)), a.length && a.forEach((u) => this.addSampler(u)), this.type = h;
  }
  /**
   * Adds a texture to the textures array and the struct
   * @param texture - texture to add
   */
  addTexture(e) {
    this.textures.push(e), this.addBindings([...e.bindings]);
  }
  /**
   * Get the current textures array
   * @readonly
   */
  get textures() {
    return this.options.textures;
  }
  /**
   * Adds a sampler to the samplers array and the struct
   * @param sampler
   */
  addSampler(e) {
    this.samplers.push(e), this.addBindings([e.binding]);
  }
  /**
   * Get the current samplers array
   * @readonly
   */
  get samplers() {
    return this.options.samplers;
  }
  /**
   * Get whether the GPU bind group is ready to be created
   * It can be created if it has {@link BindGroup#bindings} and has not been created yet and all GPU textures and samplers are created
   * @readonly
   */
  get shouldCreateBindGroup() {
    return !this.bindGroup && !!this.bindings.length && !this.textures.find((e) => !(e.texture || e.externalTexture)) && !this.samplers.find((e) => !e.sampler);
  }
  /**
   * Update the {@link TextureBindGroup#textures | bind group textures}:
   * - Check if they need to copy their source texture
   * - Upload video texture if needed
   */
  updateTextures() {
    this.textures.forEach((e, t) => {
      e instanceof ue && (e.options.fromTexture && e.options.fromTexture.sourceUploaded && !e.sourceUploaded && e.copy(e.options.fromTexture), e.shouldUpdate && e.options.sourceType && e.options.sourceType === "externalVideo" && e.uploadVideoTexture());
    });
  }
  /**
   * Update the {@link TextureBindGroup}, which means update its {@link TextureBindGroup#textures | textures}, then update its {@link TextureBindGroup#bufferBindings | buffer bindings} and finally {@link TextureBindGroup#resetBindGroup | reset it} if needed
   */
  update() {
    this.updateTextures(), super.update();
  }
  /**
   * Destroy our {@link TextureBindGroup}
   */
  destroy() {
    super.destroy(), this.options.textures = [], this.options.samplers = [];
  }
}
class Rt extends Ue {
  /**
   * SamplerBinding constructor
   * @param parameters - {@link SamplerBindingParams | parameters} used to create our SamplerBindings
   */
  constructor({
    label: e = "Sampler",
    name: t = "sampler",
    bindingType: s,
    visibility: r,
    sampler: i,
    type: n = "filtering"
  }) {
    s = s ?? "sampler", super({ label: e, name: t, bindingType: s, visibility: r }), this.options = {
      ...this.options,
      sampler: i,
      type: n
    }, this.resource = i, this.setWGSLFragment();
  }
  /**
   * Get {@link GPUBindGroupLayoutEntry#sampler | bind group layout entry resource}
   * @readonly
   */
  get resourceLayout() {
    return {
      sampler: {
        type: this.options.type
        // TODO set shouldResetBindGroupLayout to true if it changes afterwards
      }
    };
  }
  /**
   * Get the {@link GPUBindGroupEntry#resource | bind group resource}
   */
  get resource() {
    return this.sampler;
  }
  /**
   * Set the {@link GPUBindGroupEntry#resource | bind group resource}
   * @param value - new bind group resource
   */
  set resource(e) {
    e && this.sampler && (this.shouldResetBindGroup = !0), this.sampler = e;
  }
  /**
   * Set the correct WGSL code snippet.
   */
  setWGSLFragment() {
    this.wgslGroupFragment = [`var ${this.name}: ${this.bindingType};`];
  }
}
var pe, fe, me, xe;
class Bt extends Ae {
  /**
   * Camera constructor
   * @param parameters - {@link CameraParams | parameters} used to create our {@link Camera}
   */
  constructor({
    fov: t = 50,
    near: s = 0.01,
    far: r = 150,
    width: i = 1,
    height: n = 1,
    pixelRatio: o = 1,
    onMatricesChanged: a = () => {
    }
  } = {}) {
    super();
    /** Private {@link Camera} field of view */
    k(this, pe, void 0);
    /** Private {@link Camera} near plane */
    k(this, fe, void 0);
    /** Private {@link Camera} far plane */
    k(this, me, void 0);
    /** Private {@link Camera} pixel ratio, used in {@link CSSPerspective} calcs */
    k(this, xe, void 0);
    this.position.set(0, 0, 10), this.onMatricesChanged = a, this.size = {
      width: 1,
      height: 1
    }, this.setPerspective({ fov: t, near: s, far: r, width: i, height: n, pixelRatio: o });
  }
  /**
   * Set our transform and projection matrices
   */
  setMatrices() {
    super.setMatrices(), this.matrices = {
      ...this.matrices,
      view: {
        matrix: new G(),
        shouldUpdate: !1,
        onUpdate: () => {
          this.viewMatrix.copy(this.modelMatrix).invert();
        }
      },
      projection: {
        matrix: new G(),
        shouldUpdate: !1,
        onUpdate: () => this.updateProjectionMatrix()
      }
    };
  }
  /**
   * Get our view matrix
   * @readonly
   */
  get viewMatrix() {
    return this.matrices.view.matrix;
  }
  set viewMatrix(t) {
    this.matrices.view.matrix = t, this.matrices.view.shouldUpdate = !0;
  }
  /**
   * Get our projection matrix
   * @readonly
   */
  get projectionMatrix() {
    return this.matrices.projection.matrix;
  }
  set projectionMatrix(t) {
    this.matrices.projection.matrix = t, this.shouldUpdateProjectionMatrix();
  }
  /**
   * Set our projection matrix shouldUpdate flag to true (tell it to update)
   */
  shouldUpdateProjectionMatrix() {
    this.matrices.projection.shouldUpdate = !0;
  }
  /**
   * Update our model matrix and tell our view matrix to update as well
   */
  updateModelMatrix() {
    super.updateModelMatrix(), this.setScreenRatios(), this.matrices.view.shouldUpdate = !0;
  }
  /**
   * Get the {@link Camera} {@link fov | field of view}
   */
  get fov() {
    return P(this, pe);
  }
  /**
   * Set the {@link Camera} {@link fov | field of view}. Update the {@link projectionMatrix} only if the field of view actually changed
   * @param fov - new field of view
   */
  set fov(t) {
    t = Math.max(1, Math.min(t ?? this.fov, 179)), t !== this.fov && (z(this, pe, t), this.shouldUpdateProjectionMatrix()), this.setScreenRatios(), this.setCSSPerspective();
  }
  /**
   * Get the {@link Camera} {@link near} plane value.
   */
  get near() {
    return P(this, fe);
  }
  /**
   * Set the {@link Camera} {@link near} plane value. Update the {@link projectionMatrix} only if the near plane actually changed
   * @param near - new near plane value
   */
  set near(t) {
    t = Math.max(t ?? this.near, 0.01), t !== this.near && (z(this, fe, t), this.shouldUpdateProjectionMatrix());
  }
  /**
   * Get / set the {@link Camera} {@link far} plane value.
   */
  get far() {
    return P(this, me);
  }
  /**
   * Set the {@link Camera} {@link far} plane value. Update {@link projectionMatrix} only if the far plane actually changed
   * @param far - new far plane value
   */
  set far(t) {
    t = Math.max(t ?? this.far, this.near + 1), t !== this.far && (z(this, me, t), this.shouldUpdateProjectionMatrix());
  }
  /**
   * Get the {@link Camera} {@link pixelRatio} value.
   */
  get pixelRatio() {
    return P(this, xe);
  }
  /**
   * Set the {@link Camera} {@link pixelRatio} value. Update the {@link CSSPerspective} only if the pixel ratio actually changed
   * @param pixelRatio - new pixel ratio value
   */
  set pixelRatio(t) {
    z(this, xe, t ?? this.pixelRatio), this.setCSSPerspective();
  }
  /**
   * Set the {@link Camera} {@link width} and {@link height}. Update the {@link projectionMatrix} only if the width or height actually changed
   * @param size - {@link width} and {@link height} values to use
   */
  setSize({ width: t, height: s }) {
    (t !== this.size.width || s !== this.size.height) && this.shouldUpdateProjectionMatrix(), this.size.width = t, this.size.height = s, this.setScreenRatios(), this.setCSSPerspective();
  }
  /**
   * Sets the {@link Camera} perspective. Update the {@link projectionMatrix} if needed.
   * @param parameters - {@link CameraPerspectiveOptions | parameters} to use for the perspective
   */
  setPerspective({
    fov: t = this.fov,
    near: s = this.near,
    far: r = this.far,
    width: i = this.size.width,
    height: n = this.size.height,
    pixelRatio: o = this.pixelRatio
  } = {}) {
    this.setSize({ width: i, height: n }), this.pixelRatio = o, this.fov = t, this.near = s, this.far = r;
  }
  /**
   * Callback to run when the camera {@link modelMatrix | model matrix} has been updated
   */
  onAfterMatrixStackUpdate() {
    this.onMatricesChanged();
  }
  /**
   * Sets a {@link CSSPerspective} property based on {@link size}, {@link pixelRatio} and {@link fov}.<br>
   * Used to translate planes along the Z axis using pixel units as CSS would do.<br>
   * {@link https://stackoverflow.com/questions/22421439/convert-field-of-view-value-to-css3d-perspective-value | See reference}
   */
  setCSSPerspective() {
    this.CSSPerspective = Math.pow(
      Math.pow(this.size.width / (2 * this.pixelRatio), 2) + Math.pow(this.size.height / (2 * this.pixelRatio), 2),
      0.5
    ) / Math.tan(this.fov * 0.5 * Math.PI / 180);
  }
  /**
   * Sets visible width / height at a given z-depth from our {@link Camera} parameters.<br>
   * {@link https://discourse.threejs.org/t/functions-to-calculate-the-visible-width-height-at-a-given-z-depth-from-a-perspective-camera/269 | See reference}
   * @param depth - depth to use for calculations
   */
  setScreenRatios(t = 0) {
    const s = this.position.z;
    t < s ? t -= s : t += s;
    const r = this.fov * Math.PI / 180, i = 2 * Math.tan(r / 2) * Math.abs(t);
    this.screenRatio = {
      width: i * this.size.width / this.size.height,
      height: i
    };
  }
  /**
   * Rotate this {@link Camera} so it looks at the {@link Vec3 | target}
   * @param target - {@link Vec3 | target} to look at
   */
  lookAt(t = new f()) {
    const s = new G().lookAt(this.position, t);
    this.quaternion.setFromRotationMatrix(s), this.shouldUpdateModelMatrix();
  }
  /**
   * Updates the {@link Camera} {@link projectionMatrix}
   */
  updateProjectionMatrix() {
    const t = this.size.width / this.size.height, s = this.near * Math.tan(Math.PI / 180 * 0.5 * this.fov), r = 2 * s, i = t * r, n = -0.5 * i, o = n + i, a = s - r, h = 2 * this.near / (o - n), u = 2 * this.near / (s - a), c = (o + n) / (o - n), l = (s + a) / (s - a), p = -(this.far + this.near) / (this.far - this.near), m = -2 * this.far * this.near / (this.far - this.near);
    this.projectionMatrix.set(
      h,
      0,
      0,
      0,
      0,
      u,
      0,
      0,
      c,
      l,
      p,
      -1,
      0,
      0,
      m,
      0
    );
  }
}
pe = new WeakMap(), fe = new WeakMap(), me = new WeakMap(), xe = new WeakMap();
class Tt {
  /**
   * Sampler constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Sampler}
   * @param parameters - {@link SamplerParams | parameters} used to create this {@link Sampler}
   */
  constructor(e, {
    label: t = "Sampler",
    name: s,
    addressModeU: r = "repeat",
    addressModeV: i = "repeat",
    magFilter: n = "linear",
    minFilter: o = "linear",
    mipmapFilter: a = "linear",
    maxAnisotropy: h = 1,
    type: u = "filtering"
  } = {}) {
    this.type = "Sampler", this.uuid = Y(), e = e && e.renderer || e, U(e, t ? t + " " + this.type : this.type), this.renderer = e, this.label = t, !s && !this.renderer.production && (s = "sampler" + this.renderer.samplers.length, _(
      `Sampler: you are trying to create a sampler without the mandatory name parameter. A default name will be used instead: ${s}`
    )), this.name = s, this.options = {
      addressModeU: r,
      addressModeV: i,
      magFilter: n,
      minFilter: o,
      mipmapFilter: a,
      maxAnisotropy: h,
      type: u
    }, this.createSampler(), this.createBinding();
  }
  /**
   * Set the {@link GPUSampler}
   */
  createSampler() {
    this.sampler = this.renderer.createSampler(this);
  }
  /**
   * Set the {@link SamplerBinding | binding}
   */
  createBinding() {
    this.binding = new Rt({
      label: this.label,
      name: this.name,
      bindingType: "sampler",
      sampler: this.sampler,
      type: this.options.type
    });
  }
}
const je = {
  label: "RenderTexture",
  name: "renderTexture",
  usage: "texture",
  access: "write",
  fromTexture: null,
  viewDimension: "2d",
  sampleCount: 1
};
class ne {
  /**
   * RenderTexture constructor
   * @param renderer - {@link Renderer | renderer} object or {@link GPUCurtains} class object used to create this {@link RenderTexture}
   * @param parameters - {@link RenderTextureParams | parameters} used to create this {@link RenderTexture}
   */
  constructor(e, t = je) {
    e = e && e.renderer || e, U(e, t.label ? t.label + " RenderTexture" : "RenderTexture"), this.type = "RenderTexture", this.renderer = e, this.uuid = Y(), this.options = { ...je, ...t }, this.options.format || (this.options.format = this.renderer.options.preferredFormat), this.size = this.options.size ?? {
      width: Math.floor(this.renderer.pixelRatioBoundingRect.width),
      height: Math.floor(this.renderer.pixelRatioBoundingRect.height),
      depth: 1
    }, this.setBindings(), this.renderer.addRenderTexture(this), this.createTexture();
  }
  /**
   * Copy another {@link RenderTexture} into this {@link RenderTexture}
   * @param texture - {@link RenderTexture} to copy
   */
  copy(e) {
    this.options.fromTexture = e, this.createTexture();
  }
  /**
   * Copy a {@link GPUTexture} directly into this {@link RenderTexture}. Mainly used for depth textures.
   * @param texture - {@link GPUTexture} to copy
   */
  copyGPUTexture(e) {
    this.size = {
      width: e.width,
      height: e.height,
      depth: e.depthOrArrayLayers
    }, this.texture = e, this.textureBinding.resource = this.texture;
  }
  /**
   * Create the {@link GPUTexture | texture} (or copy it from source) and update the {@link TextureBinding#resource | binding resource}
   */
  createTexture() {
    var e;
    if (this.options.fromTexture) {
      this.copyGPUTexture(this.options.fromTexture.texture);
      return;
    }
    (e = this.texture) == null || e.destroy(), this.texture = this.renderer.createTexture({
      label: this.options.label,
      format: this.options.format,
      size: [this.size.width, this.size.height, this.size.depth],
      dimensions: this.options.viewDimension === "1d" ? "1d" : this.options.viewDimension === "3d" ? "3d" : "2d",
      sampleCount: this.options.sampleCount,
      usage: (
        // TODO let user chose?
        // see https://matrix.to/#/!MFogdGJfnZLrDmgkBN:matrix.org/$vESU70SeCkcsrJQdyQGMWBtCgVd3XqnHcBxFDKTKKSQ?via=matrix.org&via=mozilla.org&via=hej.im
        this.options.usage !== "storageTexture" ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT : GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST
      )
    }), this.textureBinding.resource = this.texture;
  }
  /**
   * Set our {@link RenderTexture#bindings | bindings}
   */
  setBindings() {
    this.bindings = [
      new st({
        label: this.options.label + ": " + this.options.name + " render texture",
        name: this.options.name,
        texture: this.texture,
        bindingType: this.options.usage,
        format: this.options.format,
        viewDimension: this.options.viewDimension,
        multisampled: this.options.sampleCount > 1
      })
    ];
  }
  /**
   * Get our {@link TextureBinding | texture binding}
   * @readonly
   */
  get textureBinding() {
    return this.bindings[0];
  }
  /**
   * Force a {@link RenderTexture} to be recreated with the new size
   * @param size - new {@link TextureSize | size} to set
   */
  forceResize(e) {
    this.size = e, this.createTexture();
  }
  /**
   * Resize our {@link RenderTexture}, which means recreate it/copy it again and tell the {@link core/bindGroups/TextureBindGroup.TextureBindGroup | texture bind group} to update
   * @param size - the optional new {@link TextureSize | size} to set
   */
  resize(e = null) {
    e || (e = {
      width: Math.floor(this.renderer.pixelRatioBoundingRect.width),
      height: Math.floor(this.renderer.pixelRatioBoundingRect.height),
      depth: 1
    }), !(e.width === this.size.width && e.height === this.size.height && e.depth === this.size.depth) && this.forceResize(e);
  }
  /**
   * Destroy our {@link RenderTexture}
   */
  destroy() {
    var e;
    this.renderer.removeRenderTexture(this), this.options.fromTexture || (e = this.texture) == null || e.destroy(), this.texture = null;
  }
}
class it {
  /**
   * Material constructor
   * @param renderer - our renderer class object
   * @param parameters - {@link types/Materials.MaterialParams | parameters} used to create our Material
   */
  constructor(e, t) {
    this.type = "Material", e = e && e.renderer || e, U(e, this.type), this.renderer = e, this.uuid = Y();
    const { shaders: s, label: r, useAsyncPipeline: i, uniforms: n, storages: o, bindGroups: a, samplers: h, textures: u, renderTextures: c } = t;
    this.options = {
      shaders: s,
      label: r,
      ...i !== void 0 && { useAsyncPipeline: i },
      ...n !== void 0 && { uniforms: n },
      ...o !== void 0 && { storages: o },
      ...a !== void 0 && { bindGroups: a },
      ...h !== void 0 && { samplers: h },
      ...u !== void 0 && { textures: u },
      ...c !== void 0 && { renderTextures: c }
    }, this.bindGroups = [], this.texturesBindGroups = [], this.clonedBindGroups = [], this.setBindGroups(), this.setTextures(), this.setSamplers();
  }
  /**
   * Check if all bind groups are ready, and create them if needed
   */
  compileMaterial() {
    const e = this.texturesBindGroup.bindings.length ? 1 : 0;
    this.bindGroups.length >= this.inputsBindGroups.length + e || this.createBindGroups();
  }
  /**
   * Get whether the renderer is ready, our pipeline entry and pipeline have been created and successfully compiled
   * @readonly
   */
  get ready() {
    return !!(this.renderer.ready && this.pipelineEntry && this.pipelineEntry.pipeline && this.pipelineEntry.ready);
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.
   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to render
   */
  loseContext() {
    this.textures.forEach((e) => {
      e.texture = null, e.sourceUploaded = !1;
    }), this.renderTextures.forEach((e) => {
      e.texture = null;
    }), [...this.bindGroups, ...this.clonedBindGroups, ...this.inputsBindGroups].forEach(
      (e) => e.loseContext()
    ), this.pipelineEntry.pipeline = null;
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored to recreate our bind groups.
   */
  restoreContext() {
    this.samplers.forEach((e) => {
      e.createSampler(), e.binding.resource = e.sampler;
    }), this.textures.forEach((e) => {
      e.createTexture(), e.resize();
    }), this.renderTextures.forEach((e) => {
      e.resize(e.size);
    }), [...this.bindGroups, ...this.clonedBindGroups, ...this.inputsBindGroups].forEach((e) => {
      e.shouldCreateBindGroup && e.createBindGroup(), e.bufferBindings.forEach((t) => t.shouldUpdate = !0);
    });
  }
  /**
   * Get the complete code of a given shader including all the WGSL fragment code snippets added by the pipeline
   * @param [shaderType="full"] - shader to get the code from
   * @returns - The corresponding shader code
   */
  getShaderCode(e = "full") {
    return this.pipelineEntry ? (e = (() => {
      switch (e) {
        case "vertex":
        case "fragment":
        case "compute":
        case "full":
          return e;
        default:
          return "full";
      }
    })(), this.pipelineEntry.shaders[e].code) : "";
  }
  /**
   * Get the added code of a given shader, i.e. all the WGSL fragment code snippets added by the pipeline
   * @param [shaderType="vertex"] - shader to get the code from
   * @returns - The corresponding shader code
   */
  getAddedShaderCode(e = "vertex") {
    return this.pipelineEntry ? (e = (() => {
      switch (e) {
        case "vertex":
        case "fragment":
        case "compute":
          return e;
        default:
          return "vertex";
      }
    })(), this.pipelineEntry.shaders[e].head) : "";
  }
  /* BIND GROUPS */
  /**
   * Prepare and set our bind groups based on inputs and bindGroups Material parameters
   */
  setBindGroups() {
    var e;
    if (this.uniforms = {}, this.storages = {}, this.inputsBindGroups = [], this.inputsBindings = [], this.options.uniforms || this.options.storages) {
      const t = new Oe(this.renderer, {
        label: this.options.label + ": Bindings bind group",
        uniforms: this.options.uniforms,
        storages: this.options.storages
      });
      this.processBindGroupBindings(t), this.inputsBindGroups.push(t);
    }
    (e = this.options.bindGroups) == null || e.forEach((t) => {
      this.processBindGroupBindings(t), this.inputsBindGroups.push(t);
    });
  }
  /**
   * Get the main {@link TextureBindGroup | texture bind group} created by this {@link Material} to manage all textures related struct
   * @readonly
   */
  get texturesBindGroup() {
    return this.texturesBindGroups[0];
  }
  /**
   * Process all {@link BindGroup} struct and add them to the corresponding objects based on their binding types. Also store them in a inputsBindings array to facilitate further access to struct.
   * @param bindGroup - The {@link BindGroup} to process
   */
  processBindGroupBindings(e) {
    e.bindings.forEach((t) => {
      t.bindingType === "uniform" && (this.uniforms = {
        ...this.uniforms,
        [t.name]: t.inputs
      }), t.bindingType === "storage" && (this.storages = {
        ...this.storages,
        [t.name]: t.inputs
      }), this.inputsBindings.push(t);
    });
  }
  /**
   * Create the bind groups if they need to be created
   */
  createBindGroups() {
    var e;
    this.texturesBindGroup.shouldCreateBindGroup && (this.texturesBindGroup.setIndex(this.bindGroups.length), this.texturesBindGroup.createBindGroup(), this.bindGroups.push(this.texturesBindGroup)), this.inputsBindGroups.forEach((t) => {
      t.shouldCreateBindGroup && (t.setIndex(this.bindGroups.length), t.createBindGroup(), this.bindGroups.push(t));
    }), (e = this.options.bindGroups) == null || e.forEach((t) => {
      !t.shouldCreateBindGroup && !this.bindGroups.find((s) => s.uuid === t.uuid) && (t.setIndex(this.bindGroups.length), this.bindGroups.push(t)), t instanceof Ve && !this.texturesBindGroups.find((s) => s.uuid === t.uuid) && (this.texturesBindGroups.push(t), t.textures.forEach((s) => {
        s instanceof ue && !this.textures.find((r) => r.uuid === s.uuid) ? this.textures.push(s) : s instanceof ne && !this.renderTextures.find((r) => r.uuid === s.uuid) && this.renderTextures.push(s);
      }));
    });
  }
  /**
   * Clones a {@link BindGroup} from a list of buffers
   * Useful to create a new bind group with already created buffers, but swapped
   * @param parameters - parameters used to clone the {@link BindGroup | bind group}
   * @param parameters.bindGroup - the BindGroup to clone
   * @param parameters.bindings - our input binding buffers
   * @param parameters.keepLayout - whether we should keep original bind group layout or not
   * @returns - the cloned BindGroup
   */
  cloneBindGroup({
    bindGroup: e,
    bindings: t = [],
    keepLayout: s = !0
  }) {
    if (!e)
      return null;
    const r = e.clone({ bindings: t, keepLayout: s });
    return this.clonedBindGroups.push(r), r;
  }
  /**
   * Get a corresponding {@link BindGroup} or {@link TextureBindGroup} from one of its binding name/key
   * @param bindingName - the binding name/key to look for
   * @returns - bind group found or null if not found
   */
  getBindGroupByBindingName(e = "") {
    return (this.ready ? this.bindGroups : this.inputsBindGroups).find((t) => t.bindings.find((s) => s.name === e));
  }
  /**
   * Destroy a bind group, only if it is not used by another object
   * @param bindGroup - bind group to eventually destroy
   */
  destroyBindGroup(e) {
    const t = this.renderer.getObjectsByBindGroup(e);
    (!t || !t.find((r) => r.material.uuid !== this.uuid)) && e.destroy();
  }
  /**
   * Destroy all bind groups
   */
  destroyBindGroups() {
    this.bindGroups.forEach((e) => this.destroyBindGroup(e)), this.clonedBindGroups.forEach((e) => this.destroyBindGroup(e)), this.texturesBindGroups.forEach((e) => this.destroyBindGroup(e)), this.texturesBindGroups = [], this.inputsBindGroups = [], this.bindGroups = [], this.clonedBindGroups = [];
  }
  /**
   * {@link BindGroup#update | Update} all bind groups:
   * - Update all {@link texturesBindGroups | textures bind groups} textures
   * - Update its {@link BindGroup#bufferBindings | buffer bindings}
   * - Check if it eventually needs a {@link BindGroup#resetBindGroup | reset}
   * - Check if we need to flush the pipeline
   */
  updateBindGroups() {
    this.bindGroups.forEach((e) => {
      e.update(), e.needsPipelineFlush && this.pipelineEntry.ready && (this.pipelineEntry.flushPipelineEntry(this.bindGroups), e.needsPipelineFlush = !1);
    });
  }
  /* INPUTS */
  /**
   * Look for a {@link BindGroupBindingElement | binding} by name in all {@link inputsBindings | input bindings}
   * @param bindingName - the binding name or key
   * @returns - the found binding, or null if not found
   */
  getBindingByName(e = "") {
    return this.inputsBindings.find((t) => t.name === e);
  }
  /**
   * Look for a {@link BindGroupBufferBindingElement | buffer binding} by name in all {@link inputsBindings | input bindings}
   * @param bindingName - the binding name or key
   * @returns - the found binding, or null if not found
   */
  getBufferBindingByName(e = "") {
    return this.inputsBindings.find((t) => t.name === e && "buffer" in t);
  }
  /**
   * Force a given buffer binding update flag to update it at next render
   * @param bufferBindingName - the buffer binding name
   * @param bindingName - the binding name
   */
  shouldUpdateInputsBindings(e, t) {
    if (!e)
      return;
    const s = this.getBindingByName(e);
    s && (t ? s.shouldUpdateBinding(t) : Object.keys(s.inputs).forEach(
      (r) => s.shouldUpdateBinding(r)
    ));
  }
  /* SAMPLERS & TEXTURES */
  /**
   * Prepare our textures array and set the {@link TextureBindGroup}
   */
  setTextures() {
    var e, t;
    this.textures = [], this.renderTextures = [], this.texturesBindGroups.push(
      new Ve(this.renderer, {
        label: this.options.label + ": Textures bind group"
      })
    ), (e = this.options.textures) == null || e.forEach((s) => {
      this.addTexture(s);
    }), (t = this.options.renderTextures) == null || t.forEach((s) => {
      this.addTexture(s);
    });
  }
  /**
   * Add a texture to our array, and add it to the textures bind group only if used in the shaders (avoid binding useless data)
   * @param texture - texture to add
   */
  addTexture(e) {
    e instanceof ue ? this.textures.push(e) : e instanceof ne && this.renderTextures.push(e), (this.options.shaders.vertex && this.options.shaders.vertex.code.indexOf(e.options.name) !== -1 || this.options.shaders.fragment && this.options.shaders.fragment.code.indexOf(e.options.name) !== -1 || this.options.shaders.compute && this.options.shaders.compute.code.indexOf(e.options.name) !== -1) && this.texturesBindGroup.addTexture(e);
  }
  /**
   * Destroy a {@link Texture} or {@link RenderTexture}, only if it is not used by another object or cached.
   * @param texture - {@link Texture} or {@link RenderTexture} to eventually destroy
   */
  destroyTexture(e) {
    if (e.options.cache)
      return;
    const t = this.renderer.getObjectsByTexture(e);
    (!t || !t.some((r) => r.material.uuid !== this.uuid)) && e.destroy();
  }
  /**
   * Destroy all the Material textures
   */
  destroyTextures() {
    var e, t;
    (e = this.textures) == null || e.forEach((s) => this.destroyTexture(s)), (t = this.renderTextures) == null || t.forEach((s) => this.destroyTexture(s)), this.textures = [], this.renderTextures = [];
  }
  /**
   * Prepare our samplers array and always add a default sampler if not already passed as parameter
   */
  setSamplers() {
    var t;
    if (this.samplers = [], (t = this.options.samplers) == null || t.forEach((s) => {
      this.addSampler(s);
    }), !this.samplers.find((s) => s.name === "defaultSampler")) {
      const s = new Tt(this.renderer, { name: "defaultSampler" });
      this.addSampler(s);
    }
  }
  /**
   * Add a sampler to our array, and add it to the textures bind group only if used in the shaders (avoid binding useless data)
   * @param sampler - sampler to add
   */
  addSampler(e) {
    this.samplers.push(e), (this.options.shaders.vertex && this.options.shaders.vertex.code.indexOf(e.name) !== -1 || this.options.shaders.fragment && this.options.shaders.fragment.code.indexOf(e.name) !== -1 || this.options.shaders.compute && this.options.shaders.compute.code.indexOf(e.name) !== -1) && this.texturesBindGroup.addSampler(e);
  }
  /* BUFFER RESULTS */
  /**
   * Map a {@link GPUBuffer} and put a copy of the data into a {@link Float32Array}
   * @param buffer - {@link GPUBuffer} to map
   * @async
   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data
   */
  async getBufferResult(e) {
    await e.mapAsync(GPUMapMode.READ);
    const t = new Float32Array(e.getMappedRange().slice(0));
    return e.unmap(), t;
  }
  /**
   * Map the content of a {@link BufferBinding#buffer | GPU buffer} and put a copy of the data into a {@link Float32Array}
   * @param bindingName - The name of the {@link inputsBindings | input bindings} from which to map the {@link BufferBinding#buffer | GPU buffer}
   * @async
   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data
   */
  async getBufferBindingResultByBindingName(e = "") {
    const t = this.getBufferBindingByName(e);
    if (t && "buffer" in t) {
      const s = this.renderer.copyBufferToBuffer({
        srcBuffer: t.buffer
      });
      return await this.getBufferResult(s);
    } else
      return new Float32Array(0);
  }
  /**
   * Map the content of a specific {@link BufferElement | buffer element} belonging to a {@link BufferBinding#buffer | GPU buffer} and put a copy of the data into a {@link Float32Array}
   * @param parameters - parameters used to get the result
   * @param parameters.bindingName - The name of the {@link inputsBindings | input bindings} from which to map the {@link BufferBinding#buffer | GPU buffer}
   * @param parameters.bufferElementName - The name of the {@link BufferElement | buffer element} from which to extract the data afterwards
   * @returns - {@link Float32Array} holding {@link GPUBuffer} data
   */
  async getBufferElementResultByNames({
    bindingName: e,
    bufferElementName: t
  }) {
    const s = await this.getBufferBindingResultByBindingName(e);
    if (!t || s.length)
      return s;
    {
      const r = this.getBufferBindingByName(e);
      return r ? r.extractBufferElementDataFromBufferResult({ result: s, bufferElementName: t }) : s;
    }
  }
  /* RENDER */
  /**
   * Called before rendering the Material.
   * First, check if we need to create our bind groups or pipeline
   * Then render the {@link textures}
   * Finally updates all the {@link bindGroups | bind groups}
   */
  onBeforeRender() {
    this.compileMaterial(), this.textures.forEach((e) => {
      e.render();
    }), this.updateBindGroups();
  }
  /**
   * Set the current pipeline
   * @param pass - current pass encoder
   */
  setPipeline(e) {
    this.renderer.pipelineManager.setCurrentPipeline(e, this.pipelineEntry);
  }
  /**
   * Render the material if it is ready:
   * Set the current pipeline and set the bind groups
   * @param pass - current pass encoder
   */
  render(e) {
    this.ready && (this.setPipeline(e), this.bindGroups.forEach((t) => {
      e.setBindGroup(t.index, t.bindGroup);
    }));
  }
  /**
   * Destroy the Material
   */
  destroy() {
    this.destroyBindGroups(), this.destroyTextures();
  }
}
class Ct extends it {
  /**
   * ComputeMaterial constructor
   * @param renderer - our {@link Renderer} class object
   * @param parameters - {@link ComputeMaterialParams | parameters} used to create our {@link ComputeMaterial}
   */
  constructor(e, t) {
    e = e && e.renderer || e;
    const s = "ComputeMaterial";
    U(e, s), super(e, t), this.type = s, this.renderer = e;
    let { shaders: r, dispatchSize: i } = t;
    (!r || !r.compute) && (r = {
      compute: {
        code: "",
        entryPoint: "main"
      }
    }), r.compute.code || (r.compute.code = "@compute @workgroup_size(1) fn main(){}"), r.compute.entryPoint || (r.compute.entryPoint = "main"), this.options = {
      ...this.options,
      shaders: r,
      ...t.dispatchSize !== void 0 && { dispatchSize: t.dispatchSize }
    }, i || (i = 1), Array.isArray(i) ? (i[0] = Math.ceil(i[0] ?? 1), i[1] = Math.ceil(i[1] ?? 1), i[2] = Math.ceil(i[2] ?? 1)) : isNaN(i) || (i = [Math.ceil(i), 1, 1]), this.dispatchSize = i, this.pipelineEntry = this.renderer.pipelineManager.createComputePipeline({
      renderer: this.renderer,
      label: this.options.label + " compute pipeline",
      shaders: this.options.shaders,
      useAsync: this.options.useAsyncPipeline
    });
  }
  /**
   * When all bind groups are created, add them to the {@link ComputePipelineEntry}
   */
  setPipelineEntryProperties() {
    this.pipelineEntry.setPipelineEntryProperties({
      bindGroups: this.bindGroups
    });
  }
  /**
   * Compile the {@link ComputePipelineEntry}
   * @async
   */
  async compilePipelineEntry() {
    await this.pipelineEntry.compilePipelineEntry();
  }
  /**
   * Check if all bind groups are ready, create them if needed, set {@link ComputePipelineEntry} bind group buffers and compile the pipeline
   * @async
   */
  async compileMaterial() {
    super.compileMaterial(), this.pipelineEntry && this.pipelineEntry.canCompile && (this.setPipelineEntryProperties(), await this.compilePipelineEntry());
  }
  /**
   * Get the complete code of a given shader including all the WGSL fragment code snippets added by the pipeline
   * @param [shaderType="compute"] - shader to get the code from
   * @returns - The corresponding shader code
   */
  getShaderCode(e = "compute") {
    return super.getShaderCode(e);
  }
  /**
   * Get the added code of a given shader, i.e. all the WGSL fragment code snippets added by the pipeline
   * @param [shaderType="compute"] - shader to get the code from
   * @returns - The corresponding shader code
   */
  getAddedShaderCode(e = "compute") {
    return super.getAddedShaderCode(e);
  }
  /* RENDER */
  /**
   * If a custom render function has been defined instead of the default one, register the callback
   * @param callback - callback to run instead of the default render behaviour, which is to set the {@link bindGroups | bind groups} and dispatch the work groups based on the {@link dispatchSize | default dispatch size}. This is where you will have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.
   */
  useCustomRender(e) {
    e && (this._useCustomRenderCallback = e);
  }
  /**
   * Render the material if it is ready:
   * Set the current pipeline, set the bind groups and dispatch the work groups
   * @param pass - current compute pass encoder
   */
  render(e) {
    this.ready && (this.setPipeline(e), this._useCustomRenderCallback !== void 0 ? this._useCustomRenderCallback(e) : (this.bindGroups.forEach((t) => {
      e.setBindGroup(t.index, t.bindGroup);
    }), e.dispatchWorkgroups(this.dispatchSize[0], this.dispatchSize[1], this.dispatchSize[2])));
  }
  /* RESULT BUFFER */
  /**
   * Copy all writable binding buffers that need it
   * @param commandEncoder - current command encoder
   */
  copyBufferToResult(e) {
    this.bindGroups.forEach((t) => {
      t.bufferBindings.forEach((s) => {
        s.shouldCopyResult && s.resultBuffer.mapState === "unmapped" && e.copyBufferToBuffer(s.buffer, 0, s.resultBuffer, 0, s.resultBuffer.size);
      });
    });
  }
  /**
   * Get the {@link core/bindings/WritableBufferBinding.WritableBufferBinding#resultBuffer | result GPU buffer} content by {@link core/bindings/WritableBufferBinding.WritableBufferBinding | binding} and {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} names
   * @param parameters - parameters used to get the result
   * @param parameters.bindingName - {@link core/bindings/WritableBufferBinding.WritableBufferBinding#name | binding name} from which to get the result
   * @param parameters.bufferElementName - optional {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} (i.e. struct member) name if the result needs to be restrained to only one element
   * @async
   * @returns - the mapped content of the {@link GPUBuffer} as a {@link Float32Array}
   */
  async getComputeResult({
    bindingName: e = "",
    bufferElementName: t = ""
  }) {
    const s = this.getBufferBindingByName(e);
    if (s && "resultBuffer" in s && s.resultBuffer.mapState === "unmapped") {
      const r = await this.getBufferResult(s.resultBuffer);
      return t ? s.extractBufferElementDataFromBufferResult({ result: r, bufferElementName: t }) : r;
    } else
      return new Float32Array(0);
  }
}
let Et = 0;
var te;
class St {
  /**
   * ComputePass constructor
   * @param renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object
   * @param parameters - {@link ComputePassParams | parameters} used to create our {@link ComputePass}
   */
  constructor(e, t = {}) {
    k(this, te, void 0);
    var x;
    z(this, te, !0), this._onReadyCallback = () => {
    }, this._onBeforeRenderCallback = () => {
    }, this._onRenderCallback = () => {
    }, this._onAfterRenderCallback = () => {
    }, this._onAfterResizeCallback = () => {
    };
    const s = "ComputePass";
    e = e && e.renderer || e, U(e, t.label ? `${t.label} ${s}` : s), t.label = t.label ?? "ComputePass " + ((x = e.computePasses) == null ? void 0 : x.length), this.renderer = e, this.type = s, this.uuid = Y(), Object.defineProperty(this, "index", { value: Et++ });
    const {
      label: r,
      shaders: i,
      renderOrder: n,
      uniforms: o,
      storages: a,
      bindGroups: h,
      samplers: u,
      textures: c,
      renderTextures: l,
      autoRender: p,
      useAsyncPipeline: m,
      texturesOptions: g,
      dispatchSize: y
    } = t;
    this.options = {
      label: r,
      shaders: i,
      ...p !== void 0 && { autoRender: p },
      ...n !== void 0 && { renderOrder: n },
      ...m !== void 0 && { useAsyncPipeline: m },
      ...y !== void 0 && { dispatchSize: y },
      texturesOptions: g
      // TODO default
    }, this.renderOrder = n ?? 0, p !== void 0 && z(this, te, p), this.userData = {}, this.ready = !1, this.setComputeMaterial({
      label: this.options.label,
      shaders: this.options.shaders,
      uniforms: o,
      storages: a,
      bindGroups: h,
      samplers: u,
      textures: c,
      renderTextures: l,
      useAsyncPipeline: m,
      dispatchSize: y
    }), this.addToScene();
  }
  /**
   * Get or set whether the compute pass is ready to render (the material has been successfully compiled)
   * @readonly
   */
  get ready() {
    return this._ready;
  }
  set ready(e) {
    e && this._onReadyCallback && this._onReadyCallback(), this._ready = e;
  }
  /**
   * Add our compute pass to the scene and the renderer
   */
  addToScene() {
    this.renderer.computePasses.push(this), P(this, te) && this.renderer.scene.addComputePass(this);
  }
  /**
   * Remove our compute pass from the scene and the renderer
   */
  removeFromScene() {
    P(this, te) && this.renderer.scene.removeComputePass(this), this.renderer.computePasses = this.renderer.computePasses.filter((e) => e.uuid !== this.uuid);
  }
  /**
   * Create the compute pass material
   * @param computeParameters - {@link ComputeMaterial} parameters
   */
  setComputeMaterial(e) {
    this.material = new Ct(this.renderer, e);
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.
   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to render
   */
  loseContext() {
    this.material.loseContext();
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored
   */
  restoreContext() {
    this.material.restoreContext();
  }
  /* TEXTURES */
  /**
   * Get our {@link ComputeMaterial#textures | ComputeMaterial textures array}
   * @readonly
   */
  get textures() {
    var e;
    return ((e = this.material) == null ? void 0 : e.textures) || [];
  }
  /**
   * Get our {@link ComputeMaterial#renderTextures | ComputeMaterial render textures array}
   * @readonly
   */
  get renderTextures() {
    var e;
    return ((e = this.material) == null ? void 0 : e.renderTextures) || [];
  }
  /**
   * Create a new {@link Texture}
   * @param options - {@link TextureParams | Texture parameters}
   * @returns - newly created {@link Texture}
   */
  createTexture(e) {
    e.name || (e.name = "texture" + this.textures.length), e.label || (e.label = this.options.label + " " + e.name);
    const t = new ue(this.renderer, { ...e, ...this.options.texturesOptions });
    return this.addTexture(t), t;
  }
  /**
   * Add a {@link Texture}
   * @param texture - {@link Texture} to add
   */
  addTexture(e) {
    this.material.addTexture(e);
  }
  /**
   * Create a new {@link RenderTexture}
   * @param  options - {@link RenderTextureParams | RenderTexture parameters}
   * @returns - newly created {@link RenderTexture}
   */
  createRenderTexture(e) {
    e.name || (e.name = "renderTexture" + this.renderTextures.length);
    const t = new ne(this.renderer, e);
    return this.addRenderTexture(t), t;
  }
  /**
   * Add a {@link RenderTexture}
   * @param renderTexture - {@link RenderTexture} to add
   */
  addRenderTexture(e) {
    this.material.addTexture(e);
  }
  /**
   * Get our {@link ComputeMaterial#uniforms | ComputeMaterial uniforms}
   * @readonly
   */
  get uniforms() {
    var e;
    return (e = this.material) == null ? void 0 : e.uniforms;
  }
  /**
   * Get our {@link ComputeMaterial#storages | ComputeMaterial storages}
   * @readonly
   */
  get storages() {
    var e;
    return (e = this.material) == null ? void 0 : e.storages;
  }
  /**
   * Called from the renderer, useful to trigger an after resize callback.
   */
  resize() {
    this._onAfterResizeCallback && this._onAfterResizeCallback();
  }
  /** EVENTS **/
  /**
   * Callback to run when the {@link ComputePass} is ready
   * @param callback - callback to run when {@link ComputePass} is ready
   */
  onReady(e) {
    return e && (this._onReadyCallback = e), this;
  }
  /**
   * Callback to run before the {@link ComputePass} is rendered
   * @param callback - callback to run just before {@link ComputePass} will be rendered
   */
  onBeforeRender(e) {
    return e && (this._onBeforeRenderCallback = e), this;
  }
  /**
   * Callback to run when the {@link ComputePass} is rendered
   * @param callback - callback to run when {@link ComputePass} is rendered
   */
  onRender(e) {
    return e && (this._onRenderCallback = e), this;
  }
  /**
   * Callback to run after the {@link ComputePass} has been rendered
   * @param callback - callback to run just after {@link ComputePass} has been rendered
   */
  onAfterRender(e) {
    return e && (this._onAfterRenderCallback = e), this;
  }
  /**
   * Callback used to run a custom render function instead of the default one.
   * @param callback - Your custom render function where you will have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.
   */
  useCustomRender(e) {
    return this.material.useCustomRender(e), this;
  }
  /**
   * Callback to run after the {@link core/renderers/GPURenderer.GPURenderer | renderer} has been resized
   * @param callback - callback to run just after {@link core/renderers/GPURenderer.GPURenderer | renderer} has been resized
   */
  onAfterResize(e) {
    return e && (this._onAfterResizeCallback = e), this;
  }
  /**
   * Called before rendering the ComputePass
   * Checks if the material is ready and eventually update its struct
   */
  onBeforeRenderPass() {
    this.renderer.ready && (this.material && this.material.ready && !this.ready && (this.ready = !0), this._onBeforeRenderCallback && this._onBeforeRenderCallback(), this.material.onBeforeRender());
  }
  /**
   * Render our {@link ComputeMaterial}
   * @param pass - current compute pass encoder
   */
  onRenderPass(e) {
    this.material.ready && (this._onRenderCallback && this._onRenderCallback(), this.material.render(e));
  }
  /**
   * Called after having rendered the ComputePass
   */
  onAfterRenderPass() {
    this._onAfterRenderCallback && this._onAfterRenderCallback();
  }
  /**
   * Render our compute pass
   * Basically just check if our {@link core/renderers/GPURenderer.GPURenderer | renderer} is ready, and then render our {@link ComputeMaterial}
   * @param pass
   */
  render(e) {
    this.onBeforeRenderPass(), this.renderer.ready && (this.onRenderPass(e), this.onAfterRenderPass());
  }
  /**
   * Copy the result of our read/write GPUBuffer into our result binding array
   * @param commandEncoder - current GPU command encoder
   */
  copyBufferToResult(e) {
    var t;
    (t = this.material) == null || t.copyBufferToResult(e);
  }
  /**
   * Get the {@link core/bindings/WritableBufferBinding.WritableBufferBinding#resultBuffer | result GPU buffer} content by {@link core/bindings/WritableBufferBinding.WritableBufferBinding | binding} and {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} names
   * @param parameters - parameters used to get the result
   * @param parameters.bindingName - {@link core/bindings/WritableBufferBinding.WritableBufferBinding#name | binding name} from which to get the result
   * @param parameters.bufferElementName - optional {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} (i.e. struct member) name if the result needs to be restrained to only one element
   * @async
   * @returns - the mapped content of the {@link GPUBuffer} as a {@link Float32Array}
   */
  async getComputeResult({
    bindingName: e,
    bufferElementName: t
  }) {
    var s;
    return await ((s = this.material) == null ? void 0 : s.getComputeResult({ bindingName: e, bufferElementName: t }));
  }
  /**
   * Remove the ComputePass from the scene and destroy it
   */
  remove() {
    this.removeFromScene(), this.destroy();
  }
  /**
   * Destroy the ComputePass
   */
  destroy() {
    var e;
    (e = this.material) == null || e.destroy();
  }
}
te = new WeakMap();
const I = [new f(), new f(), new f(), new f(), new f(), new f(), new f(), new f()];
class ce {
  /**
   * Box3 constructor
   * @param min - min {@link Vec3 | vector} of the {@link Box3}
   * @param max - max {@link Vec3 | vector} of the {@link Box3}
   */
  constructor(e = new f(1 / 0), t = new f(-1 / 0)) {
    this.min = e, this.max = t;
  }
  /**
   * Set a {@link Box3} from two min and max {@link Vec3 | vectors}
   * @param min - min {@link Vec3 | vector} of the {@link Box3}
   * @param max - max {@link Vec3 | vector} of the {@link Box3}
   */
  set(e = new f(1 / 0), t = new f(-1 / 0)) {
    return this.min.copy(e), this.max.copy(t), this;
  }
  /**
   * Clone this {@link Box3}
   * @returns - cloned {@link Box3}
   */
  clone() {
    return new ce().set(this.min, this.max);
  }
  /**
   * Get the {@link Box3} center
   * @returns - {@link Vec3 | center vector} of the {@link Box3}
   */
  getCenter() {
    return this.max.clone().add(this.min).multiplyScalar(0.5);
  }
  /**
   * Get the {@link Box3} size
   * @returns - {@link Vec3 | size vector} of the {@link Box3}
   */
  getSize() {
    return this.max.clone().sub(this.min);
  }
  /**
   * Apply a {@link Mat4 | matrix} to a {@link Box3}
   * Useful to apply a transformation {@link Mat4 | matrix} to a {@link Box3}
   * @param matrix - {@link Mat4 | matrix} to use
   * @returns - this {@link Box3} after {@link Mat4 | matrix} application
   */
  applyMat4(e = new G()) {
    const t = [];
    this.min.z === this.max.z ? (t[0] = I[0].set(this.min.x, this.min.y, this.min.z).applyMat4(e), t[1] = I[2].set(this.min.x, this.max.y, this.min.z).applyMat4(e), t[2] = I[4].set(this.max.x, this.min.y, this.min.z).applyMat4(e), t[3] = I[6].set(this.max.x, this.max.y, this.min.z).applyMat4(e)) : (t[0] = I[0].set(this.min.x, this.min.y, this.min.z).applyMat4(e), t[1] = I[1].set(this.min.x, this.min.y, this.max.z).applyMat4(e), t[2] = I[2].set(this.min.x, this.max.y, this.min.z).applyMat4(e), t[3] = I[3].set(this.min.x, this.max.y, this.max.z).applyMat4(e), t[4] = I[4].set(this.max.x, this.min.y, this.min.z).applyMat4(e), t[5] = I[5].set(this.max.x, this.min.y, this.max.z).applyMat4(e), t[6] = I[6].set(this.max.x, this.max.y, this.min.z).applyMat4(e), t[7] = I[7].set(this.max.x, this.max.y, this.max.z).applyMat4(e));
    const s = new ce();
    for (let r = 0, i = t.length; r < i; r++)
      s.min.min(t[r]), s.max.max(t[r]);
    return s;
  }
}
const $e = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
class zt {
  /**
   * DOMFrustum constructor
   * @param {DOMFrustumParams} parameters - {@link DOMFrustumParams | parameters} used to create our {@link DOMFrustum}
   */
  constructor({
    boundingBox: e = new ce(),
    modelViewProjectionMatrix: t = new G(),
    containerBoundingRect: s = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      width: 0,
      height: 0,
      x: 0,
      y: 0
    },
    DOMFrustumMargins: r = $e,
    onReEnterView: i = () => {
    },
    onLeaveView: n = () => {
    }
  }) {
    this.boundingBox = e, this.modelViewProjectionMatrix = t, this.containerBoundingRect = s, this.DOMFrustumMargins = { ...$e, ...r }, this.projectedBoundingRect = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      width: 0,
      height: 0,
      x: 0,
      y: 0
    }, this.onReEnterView = i, this.onLeaveView = n, this.isIntersecting = !1, this.shouldUpdate = !1;
  }
  /**
   * Set our {@link containerBoundingRect} (called on resize)
   * @param boundingRect - new bounding rectangle
   */
  setContainerBoundingRect(e) {
    this.containerBoundingRect = e;
  }
  /**
   * Get our DOM frustum bounding rectangle, i.e. our {@link containerBoundingRect} with the {@link DOMFrustumMargins} applied
   * @readonly
   */
  get DOMFrustumBoundingRect() {
    return {
      top: this.projectedBoundingRect.top - this.DOMFrustumMargins.top,
      right: this.projectedBoundingRect.right + this.DOMFrustumMargins.right,
      bottom: this.projectedBoundingRect.bottom + this.DOMFrustumMargins.bottom,
      left: this.projectedBoundingRect.left - this.DOMFrustumMargins.left
    };
  }
  /**
   * Applies all {@link modelViewProjectionMatrix} transformations to our {@link boundingBox} and then check against intersections
   */
  computeProjectedToDocumentCoords() {
    const e = this.boundingBox.applyMat4(this.modelViewProjectionMatrix);
    e.min.x = (e.min.x + 1) * 0.5, e.max.x = (e.max.x + 1) * 0.5, e.min.y = 1 - (e.min.y + 1) * 0.5, e.max.y = 1 - (e.max.y + 1) * 0.5;
    const { width: t, height: s, top: r, left: i } = this.containerBoundingRect;
    this.projectedBoundingRect = {
      left: e.min.x * t + i,
      x: e.min.x * t + i,
      top: e.max.y * s + r,
      y: e.max.y * s + r,
      right: e.max.x * t + i,
      bottom: e.min.y * s + r,
      width: e.max.x * t + i - (e.min.x * t + i),
      height: e.min.y * s + r - (e.max.y * s + r)
    }, this.intersectsContainer();
  }
  /**
   * Check whether our {@link projectedBoundingRect} intersects with our {@link DOMFrustumBoundingRect}
   */
  intersectsContainer() {
    Math.round(this.DOMFrustumBoundingRect.right) <= this.containerBoundingRect.left || Math.round(this.DOMFrustumBoundingRect.left) >= this.containerBoundingRect.left + this.containerBoundingRect.width || Math.round(this.DOMFrustumBoundingRect.bottom) <= this.containerBoundingRect.top || Math.round(this.DOMFrustumBoundingRect.top) >= this.containerBoundingRect.top + this.containerBoundingRect.height ? (this.isIntersecting && this.onLeaveView(), this.isIntersecting = !1) : (this.isIntersecting || this.onReEnterView(), this.isIntersecting = !0);
  }
}
var Pe, nt;
class rt {
  /**
   * Geometry constructor
   * @param parameters - {@link GeometryParams | parameters} used to create our Geometry
   */
  constructor({
    verticesOrder: e = "ccw",
    topology: t = "triangle-list",
    instancesCount: s = 1,
    vertexBuffers: r = []
  } = {}) {
    /**
     * Set the WGSL code snippet that will be appended to the vertex shader.
     * @private
     */
    k(this, Pe);
    this.verticesCount = 0, this.verticesOrder = e, this.topology = t, this.instancesCount = s, this.boundingBox = new ce(), this.type = "Geometry", this.vertexBuffers = [], this.addVertexBuffer({
      name: "attributes"
    }), this.options = {
      verticesOrder: e,
      instancesCount: s,
      vertexBuffers: r,
      topology: t
    }, r.forEach((i) => {
      this.addVertexBuffer({
        stepMode: i.stepMode ?? "vertex",
        name: i.name,
        attributes: i.attributes
      });
    });
  }
  /**
   * Get whether this Geometry is ready to compute, i.e. if its first vertex buffer array has not been created yet
   * @readonly
   */
  get shouldCompute() {
    return this.vertexBuffers.length && !this.vertexBuffers[0].array;
  }
  /**
   * Get whether this geometry is ready to draw, i.e. it has been computed and all its vertex buffers have been created
   * @readonly
   */
  get ready() {
    return !this.shouldCompute && !this.vertexBuffers.find((e) => !e.buffer);
  }
  /**
   * Add a vertex buffer to our Geometry, set its attributes and return it
   * @param parameters - vertex buffer {@link VertexBufferParams | parameters}
   * @returns - newly created {@link VertexBuffer | vertex buffer}
   */
  addVertexBuffer({ stepMode: e = "vertex", name: t, attributes: s = [] } = {}) {
    const r = {
      name: t ?? "attributes" + this.vertexBuffers.length,
      stepMode: e,
      arrayStride: 0,
      bufferLength: 0,
      attributes: [],
      buffer: null
    };
    return s == null || s.forEach((i) => {
      this.setAttribute({
        vertexBuffer: r,
        ...i
      });
    }), this.vertexBuffers.push(r), r;
  }
  /**
   * Get a vertex buffer by name
   * @param name - our vertex buffer name
   * @returns - found {@link VertexBuffer | vertex buffer} or null if not found
   */
  getVertexBufferByName(e = "") {
    return this.vertexBuffers.find((t) => t.name === e);
  }
  /**
   * Set a vertex buffer attribute
   * @param parameters - attributes {@link VertexBufferAttributeParams | parameters}
   */
  setAttribute({
    vertexBuffer: e = this.vertexBuffers[0],
    name: t,
    type: s = "vec3f",
    bufferFormat: r = "float32x3",
    size: i = 3,
    array: n = new Float32Array(this.verticesCount * i),
    verticesStride: o = 1
  }) {
    const a = e.attributes, h = a.length;
    t || (t = "geometryAttribute" + h), t === "position" && (s !== "vec3f" || r !== "float32x3" || i !== 3) && (_(
      `Geometry 'position' attribute must have this exact properties set:
	type: 'vec3f',
	bufferFormat: 'float32x3',
	size: 3`
    ), s = "vec3f", r = "float32x3", i = 3);
    const u = n.length / i;
    t === "position" && (this.verticesCount = u), e.stepMode === "vertex" && this.verticesCount && this.verticesCount !== u * o ? j(
      `Geometry vertex attribute error. Attribute array of size ${i} must be of length: ${this.verticesCount * i}, current given: ${n.length}. (${this.verticesCount} vertices).`
    ) : e.stepMode === "instance" && u !== this.instancesCount && j(
      `Geometry instance attribute error. Attribute array of size ${i} must be of length: ${this.instancesCount * i}, current given: ${n.length}. (${this.instancesCount} instances).`
    );
    const c = {
      name: t,
      type: s,
      bufferFormat: r,
      size: i,
      bufferLength: n.length,
      offset: h ? a.reduce((l, p) => l + p.bufferLength, 0) : 0,
      bufferOffset: h ? a[h - 1].bufferOffset + a[h - 1].size * 4 : 0,
      array: n,
      verticesStride: o
    };
    e.bufferLength += c.bufferLength * o, e.arrayStride += c.size, e.attributes.push(c);
  }
  /**
   * Get an attribute by name
   * @param name - name of the attribute to find
   * @returns - found {@link VertexBufferAttribute | attribute} or null if not found
   */
  getAttributeByName(e) {
    let t;
    return this.vertexBuffers.forEach((s) => {
      t = s.attributes.find((r) => r.name === e);
    }), t;
  }
  /**
   * Compute a Geometry, which means iterate through all vertex buffers and create the attributes array that will be sent as buffers.
   * Also compute the Geometry bounding box.
   */
  computeGeometry() {
    this.shouldCompute && (this.vertexBuffers.forEach((e, t) => {
      if (t === 0) {
        const i = e.attributes.find(
          (n) => n.name === "position"
        );
        i || j("Geometry must have a 'position' attribute"), (i.type !== "vec3f" || i.bufferFormat !== "float32x3" || i.size !== 3) && (_(
          `Geometry 'position' attribute must have this exact properties set:
	type: 'vec3f',
	bufferFormat: 'float32x3',
	size: 3`
        ), i.type = "vec3f", i.bufferFormat = "float32x3", i.size = 3);
      }
      e.array = new Float32Array(e.bufferLength);
      let s = 0, r = 0;
      for (let i = 0; i < e.bufferLength; i += e.arrayStride) {
        for (let n = 0; n < e.attributes.length; n++) {
          const { name: o, size: a, array: h, verticesStride: u } = e.attributes[n];
          for (let c = 0; c < a; c++) {
            const l = h[Math.floor(r / u) * a + c];
            e.array[s] = l, o === "position" && (c % 3 === 0 ? (this.boundingBox.min.x > l && (this.boundingBox.min.x = l), this.boundingBox.max.x < l && (this.boundingBox.max.x = l)) : c % 3 === 1 ? (this.boundingBox.min.y > l && (this.boundingBox.min.y = l), this.boundingBox.max.y < l && (this.boundingBox.max.y = l)) : c % 3 === 2 && (this.boundingBox.min.z > l && (this.boundingBox.min.z = l), this.boundingBox.max.z < l && (this.boundingBox.max.z = l))), s++;
          }
        }
        r++;
      }
    }), _e(this, Pe, nt).call(this));
  }
  /** RENDER **/
  /**
   * Set our render pass geometry vertex buffers
   * @param pass - current render pass
   */
  setGeometryBuffers(e) {
    this.vertexBuffers.forEach((t, s) => {
      e.setVertexBuffer(s, t.buffer);
    });
  }
  /**
   * Draw our geometry
   * @param pass - current render pass
   */
  drawGeometry(e) {
    e.draw(this.verticesCount, this.instancesCount);
  }
  /**
   * Set our vertex buffers then draw the geometry
   * @param pass - current render pass
   */
  render(e) {
    this.ready && (this.setGeometryBuffers(e), this.drawGeometry(e));
  }
  /**
   * Destroy our geometry vertex buffers
   */
  destroy() {
    this.vertexBuffers.forEach((e) => {
      var t;
      (t = e.buffer) == null || t.destroy(), e.buffer = null;
    });
  }
}
Pe = new WeakSet(), nt = function() {
  let e = -1;
  this.wgslStructFragment = `struct Attributes {
	@builtin(vertex_index) vertexIndex : u32,
	@builtin(instance_index) instanceIndex : u32,${this.vertexBuffers.map((t) => t.attributes.map((s) => (e++, `
	@location(${e}) ${s.name}: ${s.type}`))).join(",")}
};`;
};
class Fe extends rt {
  /**
   * IndexedGeometry constructor
   * @param parameters - {@link GeometryParams | parameters} used to create our IndexedGeometry
   */
  constructor({
    verticesOrder: e = "ccw",
    topology: t = "triangle-list",
    instancesCount: s = 1,
    vertexBuffers: r = []
  } = {}) {
    super({ verticesOrder: e, topology: t, instancesCount: s, vertexBuffers: r }), this.type = "IndexedGeometry";
  }
  /**
   * Get whether this geometry is ready to draw, i.e. it has been computed, all its vertex buffers have been created and its index buffer has been created as well
   * @readonly
   */
  get ready() {
    return !this.shouldCompute && !this.vertexBuffers.find((e) => !e.buffer) && this.indexBuffer && !!this.indexBuffer.buffer;
  }
  /**
   * If we have less than 65.536 vertices, we should use a Uin16Array to hold our index buffer values
   * @readonly
   */
  get useUint16IndexArray() {
    return this.verticesCount < 256 * 256;
  }
  /**
   * Set our {@link indexBuffer}
   * @param parameters - {@link IndexedGeometryIndexBufferOptions | parameters} used to create our index buffer
   */
  setIndexBuffer({ bufferFormat: e = "uint32", array: t = new Uint32Array(0) }) {
    this.indexBuffer = {
      array: t,
      bufferFormat: e,
      bufferLength: t.length,
      buffer: null
    };
  }
  /** RENDER **/
  /**
   * First, set our render pass geometry vertex buffers
   * Then, set our render pass geometry index buffer
   * @param pass - current render pass
   */
  setGeometryBuffers(e) {
    super.setGeometryBuffers(e), e.setIndexBuffer(this.indexBuffer.buffer, this.indexBuffer.bufferFormat);
  }
  /**
   * Override the parentMesh draw method to draw indexed geometry
   * @param pass - current render pass
   */
  drawGeometry(e) {
    e.drawIndexed(this.indexBuffer.bufferLength, this.instancesCount);
  }
  /**
   * Destroy our indexed geometry vertex buffers and index buffer
   */
  destroy() {
    var e, t;
    super.destroy(), (t = (e = this.indexBuffer) == null ? void 0 : e.buffer) == null || t.destroy(), this.indexBuffer.buffer = null;
  }
}
class ot extends Fe {
  /**
   * PlaneGeometry constructor
   * @param parameters - {@link PlaneGeometryParams | parameters} used to create our PlaneGeometry
   */
  constructor({
    widthSegments: e = 1,
    heightSegments: t = 1,
    instancesCount: s = 1,
    vertexBuffers: r = [],
    topology: i
  } = {}) {
    super({ verticesOrder: "cw", topology: i, instancesCount: s, vertexBuffers: r }), this.type = "PlaneGeometry", e = Math.floor(e), t = Math.floor(t), this.definition = {
      id: e * t + e,
      width: e,
      height: t,
      count: e * t
    };
    const n = (this.definition.width + 1) * (this.definition.height + 1), o = this.getIndexedVerticesAndUVs(n);
    Object.keys(o).forEach((a) => {
      this.setAttribute(o[a]);
    }), this.setIndexArray();
  }
  /**
   * Set our PlaneGeometry index array
   */
  setIndexArray() {
    const e = this.useUint16IndexArray ? new Uint16Array(this.definition.count * 6) : new Uint32Array(this.definition.count * 6);
    let t = 0;
    for (let s = 0; s < this.definition.height; s++)
      for (let r = 0; r < this.definition.width; r++)
        e[t++] = r + s * (this.definition.width + 1), e[t++] = this.definition.width + r + 1 + s * (this.definition.width + 1), e[t++] = r + 1 + s * (this.definition.width + 1), e[t++] = r + 1 + s * (this.definition.width + 1), e[t++] = this.definition.width + r + 1 + s * (this.definition.width + 1), e[t++] = this.definition.width + r + 2 + s * (this.definition.width + 1);
    this.setIndexBuffer({
      array: e,
      bufferFormat: this.useUint16IndexArray ? "uint16" : "uint32"
    });
  }
  /**
   * Compute the UV and position arrays based on our plane widthSegments and heightSegments values and return the corresponding attributes
   * @param verticesCount - {@link Geometry#verticesCount | number of vertices} of our {@link PlaneGeometry}
   * @returns - our position and uv {@link VertexBufferAttributeParams | attributes}
   */
  getIndexedVerticesAndUVs(e) {
    const t = {
      name: "uv",
      type: "vec2f",
      bufferFormat: "float32x2",
      size: 2,
      array: new Float32Array(e * 2)
    }, s = {
      name: "position",
      type: "vec3f",
      bufferFormat: "float32x3",
      // nb of triangles * 3 vertices per triangle * 3 coordinates per triangle
      size: 3,
      array: new Float32Array(e * 3)
    }, r = {
      name: "normal",
      type: "vec3f",
      bufferFormat: "float32x3",
      // nb of triangles * 3 vertices per triangle * 3 coordinates per triangle
      size: 3,
      array: new Float32Array(e * 3)
    };
    let i = 0, n = 0, o = 0;
    for (let a = 0; a <= this.definition.height; a++)
      for (let h = 0; h <= this.definition.width; h++)
        t.array[o++] = h / this.definition.width, t.array[o++] = 1 - a / this.definition.height, s.array[i++] = h * 2 / this.definition.width - 1, s.array[i++] = a * 2 / this.definition.height - 1, s.array[i++] = 0, r.array[n++] = 0, r.array[n++] = 0, r.array[n++] = 1;
    return { position: s, uv: t, normal: r };
  }
}
class Gt extends it {
  /**
   * RenderMaterial constructor
   * @param renderer - our renderer class object
   * @param parameters - {@link RenderMaterialParams | parameters} used to create our RenderMaterial
   */
  constructor(e, t) {
    e = e && e.renderer || e;
    const s = "RenderMaterial";
    U(e, s), super(e, t), this.type = s, this.renderer = e;
    const { shaders: r, label: i, useAsyncPipeline: n, uniforms: o, storages: a, bindGroups: h, ...u } = t;
    r.vertex.entryPoint || (r.vertex.entryPoint = "main"), r.fragment.entryPoint || (r.fragment.entryPoint = "main"), this.options = {
      ...this.options,
      shaders: r,
      rendering: u
    }, this.pipelineEntry = this.renderer.pipelineManager.createRenderPipeline({
      renderer: this.renderer,
      label: this.options.label + " render pipeline",
      shaders: this.options.shaders,
      useAsync: this.options.useAsyncPipeline,
      ...this.options.rendering
    }), this.attributes = null;
  }
  /**
   * When all bind groups and attributes are created, add them to the {@link RenderPipelineEntry}
   */
  setPipelineEntryProperties() {
    this.pipelineEntry.setPipelineEntryProperties({
      attributes: this.attributes,
      bindGroups: this.bindGroups
    });
  }
  /**
   * Compile the {@link RenderPipelineEntry}
   * @async
   */
  async compilePipelineEntry() {
    await this.pipelineEntry.compilePipelineEntry();
  }
  /**
   * Check if attributes and all bind groups are ready, create them if needed and set {@link RenderPipelineEntry} bind group buffers and compile the pipeline
   * @async
   */
  async compileMaterial() {
    super.compileMaterial(), this.attributes && this.pipelineEntry && this.pipelineEntry.canCompile && (this.setPipelineEntryProperties(), await this.compilePipelineEntry());
  }
  /**
   * Set or reset one of the {@link RenderMaterialRenderingOptions | rendering options}. Should be use with great caution, because if the {@link RenderPipelineEntry#pipeline | render pipeline} has already been compiled, it can cause a pipeline flush.
   * @param renderingOptions - new {@link RenderMaterialRenderingOptions | rendering options} properties to be set
   */
  setRenderingOptions(e = {}) {
    const t = Object.keys(e).filter(
      (s) => e[s] !== this.options.rendering[s]
    );
    this.options.rendering = { ...this.options.rendering, ...e }, this.pipelineEntry && (this.pipelineEntry.options = { ...this.pipelineEntry.options, ...this.options.rendering }, this.pipelineEntry.ready && t.length && (_(
      `${this.options.label}: the change of rendering options is causing this RenderMaterial pipeline to be flushed and recompiled. This should be avoided. Rendering options that caused this: { ${t.map((s) => `"${s}": ${e[s]}`).join(", ")} }`
    ), this.pipelineEntry.flushPipelineEntry(this.bindGroups)));
  }
  /* ATTRIBUTES */
  /**
   * Compute geometry if needed and get all useful geometry properties needed to create attributes buffers
   * @param geometry - the geometry to draw
   */
  setAttributesFromGeometry(e) {
    this.attributes = {
      wgslStructFragment: e.wgslStructFragment,
      vertexBuffers: e.vertexBuffers
    };
  }
  /* BIND GROUPS */
  /**
   * Create the bind groups if they need to be created, but first add Camera bind group if needed
   */
  createBindGroups() {
    const e = this.options.rendering.useProjection ? 1 : 0;
    this.texturesBindGroup.shouldCreateBindGroup && (this.texturesBindGroup.setIndex(this.bindGroups.length + e), this.texturesBindGroup.createBindGroup(), this.bindGroups.push(this.texturesBindGroup)), this.inputsBindGroups.forEach((t) => {
      t.shouldCreateBindGroup && (t.setIndex(this.bindGroups.length + e), t.createBindGroup(), this.bindGroups.push(t));
    });
  }
}
const Ie = (
  /* wgsl */
  `
struct VertexOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
};

@vertex fn main(
  attributes: Attributes,
) -> VertexOutput {
  var vsOutput: VertexOutput;

  vsOutput.position = vec4f(attributes.position, 1.0);
  vsOutput.uv = attributes.uv;
  
  return vsOutput;
}`
), qe = (
  /* wgsl */
  `
@fragment fn main() -> @location(0) vec4f {
  return vec4(0.0, 0.0, 0.0, 1.0);
}`
);
let Ut = 0;
const We = {
  // geometry
  geometry: new rt(),
  // material
  shaders: {},
  autoRender: !0,
  useProjection: !1,
  // rendering
  cullMode: "back",
  depth: !0,
  depthWriteEnabled: !0,
  depthCompare: "less",
  transparent: !1,
  visible: !0,
  renderOrder: 0,
  // textures
  texturesOptions: {}
};
function at(d) {
  var e, t;
  return t = class extends d {
    /**
     * MeshBase constructor
     *
     * @typedef MeshBaseArrayParams
     * @type {array}
     * @property {(Renderer|GPUCurtains)} 0 - our {@link Renderer} class object
     * @property {(string|HTMLElement|null)} 1 - a DOM HTML Element that can be bound to a Mesh
     * @property {MeshBaseParams} 2 - {@link MeshBaseParams | Mesh base parameters}
     *
     * @param {MeshBaseArrayParams} params - our MeshBaseMixin parameters
     */
    constructor(...i) {
      super(
        i[0],
        i[1],
        { ...We, ...i[2] }
      );
      k(this, e, void 0);
      z(this, e, !0), this._onReadyCallback = () => {
      }, this._onBeforeRenderCallback = () => {
      }, this._onRenderCallback = () => {
      }, this._onAfterRenderCallback = () => {
      }, this._onAfterResizeCallback = () => {
      };
      let n = i[0];
      const o = { ...We, ...i[2] };
      this.type = "MeshBase", this.uuid = Y(), Object.defineProperty(this, "index", { value: Ut++ }), n = n && n.renderer || n, U(n, o.label ? o.label + " " + this.type : this.type), this.renderer = n;
      const {
        label: a,
        shaders: h,
        geometry: u,
        visible: c,
        renderOrder: l,
        renderTarget: p,
        texturesOptions: m,
        autoRender: g,
        ...y
      } = o;
      y.sampleCount = y.sampleCount ?? (this.renderer && this.renderer.renderPass) ? this.renderer.renderPass.options.sampleCount : 1, this.options = {
        ...this.options ?? {},
        // merge possible lower options?
        label: a ?? "Mesh " + this.renderer.meshes.length,
        shaders: h,
        texturesOptions: m,
        ...p !== void 0 && { renderTarget: p },
        ...g !== void 0 && { autoRender: g },
        ...y.useAsyncPipeline !== void 0 && { useAsyncPipeline: y.useAsyncPipeline }
      }, this.renderTarget = p ?? null, this.geometry = u, g !== void 0 && z(this, e, g), this.visible = c, this.renderOrder = l, this.ready = !1, this.userData = {}, this.computeGeometry(), this.setMaterial({
        label: this.options.label,
        shaders: this.options.shaders,
        ...y,
        verticesOrder: u.verticesOrder,
        topology: u.topology
      }), this.addToScene();
    }
    /**
     * Get private #autoRender value
     * @readonly
     */
    get autoRender() {
      return P(this, e);
    }
    /**
     * Get/set whether a Mesh is ready or not
     * @readonly
     */
    get ready() {
      return this._ready;
    }
    set ready(i) {
      i && this._onReadyCallback && this._onReadyCallback(), this._ready = i;
    }
    /* SCENE */
    /**
     * Add a Mesh to the renderer and the {@link core/scenes/Scene.Scene | Scene}
     */
    addToScene() {
      var i;
      this.renderer.meshes.push(this), (i = this.material) == null || i.setRenderingOptions({
        sampleCount: this.renderTarget ? this.renderTarget.renderPass.options.sampleCount : this.renderer.renderPass.options.sampleCount
      }), P(this, e) && this.renderer.scene.addMesh(this);
    }
    /**
     * Remove a Mesh from the renderer and the {@link core/scenes/Scene.Scene | Scene}
     */
    removeFromScene() {
      P(this, e) && this.renderer.scene.removeMesh(this), this.renderer.meshes = this.renderer.meshes.filter((i) => i.uuid !== this.uuid);
    }
    /**
     * Set a new {@link Renderer} for this Mesh
     * @param renderer - new {@link Renderer} to set
     */
    setRenderer(i) {
      if (i = i && i.renderer || i, !i || !(i.type === "GPURenderer" || i.type === "GPUCameraRenderer" || i.type === "GPUCurtainsRenderer")) {
        _(
          `${this.options.label}: Cannot set ${i} as a renderer because it is not of a valid Renderer type.`
        );
        return;
      }
      const n = this.renderer;
      this.removeFromScene(), this.renderer = i, this.addToScene(), n.meshes.length || n.onBeforeRenderScene.add(
        (o) => {
          n.forceClear(o);
        },
        { once: !0 }
      );
    }
    /**
     * Assign or remove a {@link RenderTarget} to this Mesh
     * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a RenderTarget as well.
     * @param renderTarget - the RenderTarget to assign or null if we want to remove the current RenderTarget
     */
    setRenderTarget(i) {
      if (i && i.type !== "RenderTarget") {
        _(`${this.options.label ?? this.type}: renderTarget is not a RenderTarget: ${i}`);
        return;
      }
      this.removeFromScene(), this.renderTarget = i, this.addToScene();
    }
    /**
     * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.
     * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to draw the Mesh
     */
    loseContext() {
      this.geometry.vertexBuffers.forEach((i) => {
        i.buffer = null;
      }), "indexBuffer" in this.geometry && (this.geometry.indexBuffer.buffer = null), this.material.loseContext();
    }
    /**
     * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored
     */
    restoreContext() {
      this.material.restoreContext();
    }
    /* SHADERS */
    /**
     * Set default shaders if one or both of them are missing
     */
    setShaders() {
      let { shaders: i } = this.options;
      i ? ((!i.vertex || !i.vertex.code) && (i.vertex = {
        code: Ie,
        entryPoint: "main"
      }), (!i.fragment || !i.fragment.code) && (i.fragment = {
        code: qe,
        entryPoint: "main"
      })) : i = {
        vertex: {
          code: Ie,
          entryPoint: "main"
        },
        fragment: {
          code: qe,
          entryPoint: "main"
        }
      };
    }
    /* GEOMETRY */
    /**
     * Compute the Mesh geometry if needed
     */
    computeGeometry() {
      this.geometry.shouldCompute && this.geometry.computeGeometry();
    }
    /**
     * Create the Mesh Geometry vertex and index buffers if needed
     */
    createGeometryBuffers() {
      this.geometry.ready || (this.geometry.vertexBuffers.forEach((i) => {
        i.buffer || (i.buffer = this.renderer.createBuffer({
          label: this.options.label + " geometry: " + i.name + " buffer",
          size: i.array.byteLength,
          usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST
        }), this.renderer.queueWriteBuffer(i.buffer, 0, i.array));
      }), "indexBuffer" in this.geometry && this.geometry.indexBuffer && !this.geometry.indexBuffer.buffer && (this.geometry.indexBuffer.buffer = this.renderer.createBuffer({
        label: this.options.label + " geometry: index buffer",
        size: this.geometry.indexBuffer.array.byteLength,
        usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST
      }), this.renderer.queueWriteBuffer(this.geometry.indexBuffer.buffer, 0, this.geometry.indexBuffer.array)));
    }
    /**
     * Set our Mesh geometry: create buffers and add attributes to material
     */
    setGeometry() {
      this.geometry && this.renderer.ready && (this.createGeometryBuffers(), this.setMaterialGeometryAttributes());
    }
    /* MATERIAL */
    /**
     * Set a Mesh transparent property, then set its material
     * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}
     */
    setMaterial(i) {
      var n;
      this.transparent = i.transparent, this.setShaders(), this.material = new Gt(this.renderer, i), (n = this.material.options.textures) == null || n.filter((o) => o instanceof ue).forEach((o) => this.onTextureAdded(o));
    }
    /**
     * Set Mesh material attributes
     */
    setMaterialGeometryAttributes() {
      this.material && !this.material.attributes && this.material.setAttributesFromGeometry(this.geometry);
    }
    /* TEXTURES */
    /**
     * Get our {@link RenderMaterial#textures | RenderMaterial textures array}
     * @readonly
     */
    get textures() {
      var i;
      return ((i = this.material) == null ? void 0 : i.textures) || [];
    }
    /**
     * Get our {@link RenderMaterial#renderTextures | RenderMaterial render textures array}
     * @readonly
     */
    get renderTextures() {
      var i;
      return ((i = this.material) == null ? void 0 : i.renderTextures) || [];
    }
    /**
     * Create a new {@link Texture}
     * @param options - {@link TextureParams | Texture parameters}
     * @returns - newly created {@link Texture}
     */
    createTexture(i) {
      i.name || (i.name = "texture" + this.textures.length), i.label || (i.label = this.options.label + " " + i.name);
      const n = new ue(this.renderer, { ...i, ...this.options.texturesOptions });
      return this.addTexture(n), n;
    }
    /**
     * Add a {@link Texture}
     * @param texture - {@link Texture} to add
     */
    addTexture(i) {
      this.material.addTexture(i), this.onTextureAdded(i);
    }
    /**
     * Callback run when a new {@link Texture} has been added
     * @param texture - newly created Texture
     */
    onTextureAdded(i) {
      i.parentMesh = this;
    }
    /**
     * Create a new {@link RenderTexture}
     * @param  options - {@link RenderTextureParams | RenderTexture parameters}
     * @returns - newly created {@link RenderTexture}
     */
    createRenderTexture(i) {
      i.name || (i.name = "renderTexture" + this.renderTextures.length);
      const n = new ne(this.renderer, i);
      return this.addRenderTexture(n), n;
    }
    /**
     * Add a {@link RenderTexture}
     * @param renderTexture - {@link RenderTexture} to add
     */
    addRenderTexture(i) {
      this.material.addTexture(i);
    }
    /* BINDINGS */
    /**
     * Get the current {@link RenderMaterial} uniforms
     * @readonly
     */
    get uniforms() {
      var i;
      return (i = this.material) == null ? void 0 : i.uniforms;
    }
    /**
     * Get the current {@link RenderMaterial} storages
     * @readonly
     */
    get storages() {
      var i;
      return (i = this.material) == null ? void 0 : i.storages;
    }
    /* RESIZE */
    /**
     * Resize the Mesh's render textures only if they're not storage textures
     */
    resizeRenderTextures() {
      var i;
      (i = this.renderTextures) == null || i.filter((n) => n.options.usage !== "storageTexture").forEach((n) => n.resize());
    }
    /**
     * Resize the Mesh's textures
     * @param boundingRect
     */
    resize(i) {
      var n;
      this.resizeRenderTextures(), super.resize && super.resize(i), (n = this.textures) == null || n.forEach((o) => {
        o.resize();
      }), this._onAfterResizeCallback && this._onAfterResizeCallback();
    }
    /* EVENTS */
    /**
     * Assign a callback function to _onReadyCallback
     * @param callback - callback to run when {@link MeshBase} is ready
     * @returns - our Mesh
     */
    onReady(i) {
      return i && (this._onReadyCallback = i), this;
    }
    /**
     * Assign a callback function to _onBeforeRenderCallback
     * @param callback - callback to run just before {@link MeshBase} will be rendered
     * @returns - our Mesh
     */
    onBeforeRender(i) {
      return i && (this._onBeforeRenderCallback = i), this;
    }
    /**
     * Assign a callback function to _onRenderCallback
     * @param callback - callback to run when {@link MeshBase} is rendered
     * @returns - our Mesh
     */
    onRender(i) {
      return i && (this._onRenderCallback = i), this;
    }
    /**
     * Assign a callback function to _onAfterRenderCallback
     * @param callback - callback to run just after {@link MeshBase} has been rendered
     * @returns - our Mesh
     */
    onAfterRender(i) {
      return i && (this._onAfterRenderCallback = i), this;
    }
    /**
     * Assign a callback function to _onBeforeRenderCallback
     * @param callback - callback to run just after {@link MeshBase} has been resized
     * @returns - our Mesh
     */
    onAfterResize(i) {
      return i && (this._onAfterResizeCallback = i), this;
    }
    /* RENDER */
    /**
     * Called before rendering the Mesh
     * Set the geometry if needed (create buffers and add attributes to the {@link RenderMaterial})
     * Then executes {@link RenderMaterial#onBeforeRender}: create its bind groups and pipeline if needed and eventually update its struct
     */
    onBeforeRenderPass() {
      this.renderer.ready && (this.material && this.material.ready && this.geometry && this.geometry.ready && !this.ready && (this.ready = !0), this.setGeometry(), this._onBeforeRenderCallback && this._onBeforeRenderCallback(), this.material.onBeforeRender());
    }
    /**
     * Render our {@link MeshBase} if the {@link RenderMaterial} is ready
     * @param pass - current render pass encoder
     */
    onRenderPass(i) {
      this.material.ready && (this._onRenderCallback && this._onRenderCallback(), this.material.render(i), this.geometry.render(i));
    }
    /**
     * Called after having rendered the Mesh
     */
    onAfterRenderPass() {
      this._onAfterRenderCallback && this._onAfterRenderCallback();
    }
    /**
     * Render our Mesh
     * - Execute {@link onBeforeRenderPass}
     * - Stop here if {@link Renderer} is not ready or Mesh is not {@link visible}
     * - Execute super render call if it exists
     * - {@link onRenderPass | render} our {@link material} and {@link geometry}
     * - Execute {@link onAfterRenderPass}
     * @param pass - current render pass encoder
     */
    render(i) {
      this.onBeforeRenderPass(), !(!this.renderer.ready || !this.visible) && (super.render && super.render(), this.onRenderPass(i), this.onAfterRenderPass());
    }
    /* DESTROY */
    /**
     * Remove the Mesh from the {@link core/scenes/Scene.Scene | Scene} and destroy it
     */
    remove() {
      this.removeFromScene(), this.destroy(), this.renderer.meshes.length || this.renderer.onBeforeRenderScene.add(
        (i) => {
          this.renderer.forceClear(i);
        },
        { once: !0 }
      );
    }
    /**
     * Destroy the Mesh
     */
    destroy() {
      var i, n;
      super.destroy && super.destroy(), (i = this.material) == null || i.destroy(), this.geometry.vertexBuffers.forEach((o) => {
        this.renderer.removeBuffer(
          o.buffer,
          this.options.label + " geometry: " + o.name + " buffer"
        );
      }), "indexBuffer" in this.geometry && this.renderer.removeBuffer(this.geometry.indexBuffer.buffer), (n = this.geometry) == null || n.destroy();
    }
  }, e = new WeakMap(), t;
}
class Ot {
  /**
   * CacheManager constructor
   */
  constructor() {
    this.planeGeometries = [];
  }
  /**
   * Check if a given {@link PlaneGeometry} is already cached based on its {@link PlaneGeometry#definition.id | definition id}
   * @param planeGeometry - {@link PlaneGeometry} to check
   * @returns - {@link PlaneGeometry} found or null if not found
   */
  getPlaneGeometry(e) {
    return this.planeGeometries.find((t) => t.definition.id === e.definition.id);
  }
  /**
   * Check if a given {@link PlaneGeometry} is already cached based on its {@link PlaneGeometry#definition | definition id}
   * @param planeGeometryID - {@link PlaneGeometry#definition.id | PlaneGeometry definition id}
   * @returns - {@link PlaneGeometry} found or null if not found
   */
  getPlaneGeometryByID(e) {
    return this.planeGeometries.find((t) => t.definition.id === e);
  }
  /**
   * Add a {@link PlaneGeometry} to our cache {@link planeGeometries} array
   * @param planeGeometry
   */
  addPlaneGeometry(e) {
    this.planeGeometries.push(e);
  }
  /**
   * Destroy our {@link CacheManager}
   */
  destroy() {
    this.planeGeometries = [];
  }
}
const we = new Ot();
class ht extends at(class {
}) {
  /**
   * FullscreenPlane constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link FullscreenPlane}
   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link FullscreenPlane}
   */
  constructor(e, t = {}) {
    e = e && e.renderer || e, U(e, t.label ? t.label + " FullscreenQuadMesh" : "FullscreenQuadMesh");
    let s = we.getPlaneGeometryByID(2);
    s || (s = new ot({ widthSegments: 1, heightSegments: 1 }), we.addPlaneGeometry(s)), super(e, null, { geometry: s, ...t }), this.size = {
      document: {
        width: this.renderer.boundingRect.width,
        height: this.renderer.boundingRect.height,
        top: this.renderer.boundingRect.top,
        left: this.renderer.boundingRect.left
      }
    }, this.type = "FullscreenQuadMesh";
  }
  /**
   * Resize our {@link FullscreenPlane}
   * @param boundingRect - the new bounding rectangle
   */
  resize(e = null) {
    this.size.document = e ?? this.renderer.boundingRect, super.resize(e);
  }
  /**
   * Take the pointer {@link Vec2 | vector} position relative to the document and returns it relative to our {@link FullscreenPlane}
   * It ranges from -1 to 1 on both axis
   * @param mouseCoords - pointer {@link Vec2 | vector} coordinates
   * @returns - the mapped {@link Vec2 | vector} coordinates in the [-1, 1] range
   */
  mouseToPlaneCoords(e = new O()) {
    return new O(
      (e.x - this.size.document.left) / this.size.document.width * 2 - 1,
      1 - (e.y - this.size.document.top) / this.size.document.height * 2
    );
  }
}
class ut extends Ae {
  /**
   * ProjectedObject3D constructor
   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link ProjectedObject3D}
   */
  constructor(e) {
    super(), e = e && e.renderer || e, ze(e, "ProjectedObject3D"), this.camera = e.camera;
  }
  /**
   * Tell our projection matrix stack to update
   */
  applyPosition() {
    super.applyPosition(), this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Tell our projection matrix stack to update
   */
  applyRotation() {
    super.applyRotation(), this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Tell our projection matrix stack to update
   */
  applyScale() {
    super.applyScale(), this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Tell our projection matrix stack to update
   */
  applyTransformOrigin() {
    super.applyTransformOrigin(), this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Set our transform and projection matrices
   */
  setMatrices() {
    super.setMatrices(), this.matrices = {
      ...this.matrices,
      modelView: {
        matrix: new G(),
        shouldUpdate: !1,
        onUpdate: () => {
          this.modelViewMatrix.multiplyMatrices(this.viewMatrix, this.worldMatrix);
        }
      },
      modelViewProjection: {
        matrix: new G(),
        shouldUpdate: !1,
        onUpdate: () => {
          this.modelViewProjectionMatrix.multiplyMatrices(this.projectionMatrix, this.modelViewMatrix);
        }
      }
    };
  }
  /**
   * Get our {@link modelViewMatrix | model view matrix}
   */
  get modelViewMatrix() {
    return this.matrices.modelView.matrix;
  }
  /**
   * Set our {@link modelViewMatrix | model view matrix}
   * @param value - new {@link modelViewMatrix | model view matrix}
   */
  set modelViewMatrix(e) {
    this.matrices.modelView.matrix = e, this.matrices.modelView.shouldUpdate = !0;
  }
  /**
   * Get our {@link Camera#viewMatrix | camera view matrix}
   * @readonly
   */
  get viewMatrix() {
    return this.camera.viewMatrix;
  }
  /**
   * Get our {@link Camera#projectionMatrix | camera projection matrix}
   * @readonly
   */
  get projectionMatrix() {
    return this.camera.projectionMatrix;
  }
  /**
   * Get our {@link modelViewProjectionMatrix | model view projection matrix}
   */
  get modelViewProjectionMatrix() {
    return this.matrices.modelViewProjection.matrix;
  }
  /**
   * Set our {@link modelViewProjectionMatrix | model view projection matrix}
   * @param value - new {@link modelViewProjectionMatrix | model view projection matrix}s
   */
  set modelViewProjectionMatrix(e) {
    this.matrices.modelViewProjection.matrix = e, this.matrices.modelViewProjection.shouldUpdate = !0;
  }
  /**
   * Set our projection matrices shouldUpdate flags to true (tell them to update)
   */
  shouldUpdateProjectionMatrixStack() {
    this.matrices.modelView.shouldUpdate = !0, this.matrices.modelViewProjection.shouldUpdate = !0;
  }
  /**
   * When the world matrix update, tell our projection matrix to update as well
   */
  shouldUpdateWorldMatrix() {
    super.shouldUpdateWorldMatrix(), this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Tell all our matrices to update
   */
  shouldUpdateMatrixStack() {
    this.shouldUpdateModelMatrix(), this.shouldUpdateProjectionMatrixStack();
  }
}
const Ne = (
  /* wgsl */
  `
struct VertexOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
  @location(1) normal: vec3f,
};

@vertex fn main(
  attributes: Attributes,
) -> VertexOutput {
  var vsOutput: VertexOutput;

  vsOutput.position = getOutputPosition(attributes.position);
  vsOutput.uv = attributes.uv;
  vsOutput.normal = attributes.normal;
  
  return vsOutput;
}`
), Ye = (
  /* wgsl */
  `
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
  @location(1) normal: vec3f,
};

@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {
  // normals
  return vec4(normalize(fsInput.normal) * 0.5 + 0.5, 1.0);
}`
), Xe = {
  // frustum culling and visibility
  frustumCulled: !0,
  DOMFrustumMargins: {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
};
function dt(d) {
  return class extends at(d) {
    /**
     * ProjectedMeshBase constructor
     *
     * @typedef MeshBaseArrayParams
     * @type {array}
     * @property {(CameraRenderer|GPUCurtains)} 0 - our renderer class object
     * @property {(string|HTMLElement|null)} 1 - the DOM HTML Element that can be bound to a Mesh
     * @property {ProjectedMeshParameters} 2 - Projected Mesh parameters
     *
     * @param {MeshBaseArrayParams} params - our MeshBaseMixin parameters
     */
    constructor(...t) {
      super(
        t[0],
        t[1],
        { ...Xe, ...t[2], useProjection: !0 }
      ), this._onReEnterViewCallback = () => {
      }, this._onLeaveViewCallback = () => {
      };
      let s = t[0];
      const r = {
        ...Xe,
        ...t[2],
        useProjection: !0
      };
      this.type = "MeshTransformed", s = s && s.renderer || s, ze(s, r.label ? r.label + " " + this.type : this.type), this.renderer = s;
      const { geometry: i, frustumCulled: n, DOMFrustumMargins: o } = r;
      this.options = {
        ...this.options ?? {},
        // merge possible lower options?
        frustumCulled: n,
        DOMFrustumMargins: o
      }, this.setDOMFrustum(), this.geometry = i, this.shouldUpdateMatrixStack();
    }
    /* SHADERS */
    /**
     * Set default shaders if one or both of them are missing
     */
    setShaders() {
      let { shaders: t } = this.options;
      t ? ((!t.vertex || !t.vertex.code) && (t.vertex = {
        code: Ne,
        entryPoint: "main"
      }), (!t.fragment || !t.fragment.code) && (t.fragment = {
        code: Ye,
        entryPoint: "main"
      })) : t = {
        vertex: {
          code: Ne,
          entryPoint: "main"
        },
        fragment: {
          code: Ye,
          entryPoint: "main"
        }
      };
    }
    /* GEOMETRY */
    /**
     * Set the Mesh frustum culling
     */
    setDOMFrustum() {
      this.domFrustum = new zt({
        boundingBox: this.geometry.boundingBox,
        modelViewProjectionMatrix: this.modelViewProjectionMatrix,
        containerBoundingRect: this.renderer.boundingRect,
        DOMFrustumMargins: this.options.DOMFrustumMargins,
        onReEnterView: () => {
          this._onReEnterViewCallback && this._onReEnterViewCallback();
        },
        onLeaveView: () => {
          this._onLeaveViewCallback && this._onLeaveViewCallback();
        }
      }), this.DOMFrustumMargins = this.domFrustum.DOMFrustumMargins, this.frustumCulled = this.options.frustumCulled, this.domFrustum.shouldUpdate = this.frustumCulled;
    }
    /* MATERIAL */
    /**
     * Set a Mesh matrices uniforms inputs then call {@link MeshBaseClass} super method
     * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}
     */
    setMaterial(t) {
      const s = {
        label: "Matrices",
        struct: {
          model: {
            name: "model",
            type: "mat4x4f",
            value: this.modelMatrix
          },
          world: {
            name: "world",
            type: "mat4x4f",
            value: this.worldMatrix
          },
          modelView: {
            // model view matrix (world matrix multiplied by camera view matrix)
            name: "modelView",
            type: "mat4x4f",
            value: this.modelViewMatrix
          },
          modelViewProjection: {
            name: "modelViewProjection",
            type: "mat4x4f",
            value: this.modelViewProjectionMatrix
          }
        }
      };
      t.uniforms || (t.uniforms = {}), t.uniforms.matrices = s, super.setMaterial(t);
    }
    /* SIZE & TRANSFORMS */
    /**
     * Resize our {@link ProjectedMeshBaseClass}
     * @param boundingRect - the new bounding rectangle
     */
    resize(t) {
      this.domFrustum && this.domFrustum.setContainerBoundingRect(this.renderer.boundingRect), super.resize(t);
    }
    /**
     * Apply scale and resize textures
     */
    applyScale() {
      super.applyScale(), this.textures.forEach((t) => t.resize());
    }
    /**
     * Get our {@link DOMFrustum} projected bounding rectangle
     * @readonly
     */
    get projectedBoundingRect() {
      var t;
      return (t = this.domFrustum) == null ? void 0 : t.projectedBoundingRect;
    }
    /**
     * At least one of the matrix has been updated, update according uniforms and frustum
     */
    onAfterMatrixStackUpdate() {
      this.material && this.material.shouldUpdateInputsBindings("matrices"), this.domFrustum && (this.domFrustum.shouldUpdate = !0);
    }
    /* EVENTS */
    /**
     * Assign a callback function to _onReEnterViewCallback
     * @param callback - callback to run when {@link ProjectedMeshBaseClass} is reentering the view frustum
     * @returns - our Mesh
     */
    onReEnterView(t) {
      return t && (this._onReEnterViewCallback = t), this;
    }
    /**
     * Assign a callback function to _onLeaveViewCallback
     * @param callback - callback to run when {@link ProjectedMeshBaseClass} is leaving the view frustum
     * @returns - our Mesh
     */
    onLeaveView(t) {
      return t && (this._onLeaveViewCallback = t), this;
    }
    /* RENDER */
    /**
     * Called before rendering the Mesh to update matrices and {@link DOMFrustum}.
     * First, we update our matrices to have fresh results. It eventually calls onAfterMatrixStackUpdate() if at least one matrix has been updated.
     * Then we check if we need to update the {@link DOMFrustum} projected bounding rectangle.
     * Finally we call {@link MeshBaseClass#onBeforeRenderPass | Mesh base onBeforeRenderPass} super
     */
    onBeforeRenderPass() {
      this.updateMatrixStack(), this.domFrustum && this.domFrustum.shouldUpdate && this.frustumCulled && (this.domFrustum.computeProjectedToDocumentCoords(), this.domFrustum.shouldUpdate = !1), super.onBeforeRenderPass();
    }
    /**
     * Only render the Mesh if it is in view frustum.
     * Since render() is actually called before onRenderPass(), we are sure to have fresh frustum bounding rectangle values here.
     * @param pass - current render pass
     */
    onRenderPass(t) {
      this.material.ready && (this._onRenderCallback && this._onRenderCallback(), (this.domFrustum && this.domFrustum.isIntersecting || !this.frustumCulled) && (this.material.render(t), this.geometry.render(t)));
    }
  };
}
class Zt extends dt(ut) {
  /**
   * Mesh constructor
   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link Mesh}
   * @param parameters - {@link MeshBaseParams | parameters} use to create this {@link Mesh}
   */
  constructor(e, t) {
    e = e && e.renderer || e, ze(e, t.label ? t.label + " Mesh" : "Mesh"), super(e, null, t), this.type = "Mesh";
  }
}
let At = 0;
class lt {
  /**
   * PipelineEntry constructor
   * @param parameters - {@link PipelineEntryParams | parameters} used to create this {@link PipelineEntry}
   */
  constructor(e) {
    this.type = "PipelineEntry";
    let { renderer: t } = e;
    const { label: s, shaders: r, useAsync: i } = e;
    t = t && t.renderer || t, U(t, s ? s + " " + this.type : this.type), this.renderer = t, Object.defineProperty(this, "index", { value: At++ }), this.layout = null, this.pipeline = null, this.status = {
      compiling: !1,
      compiled: !1,
      error: null
    }, this.options = {
      label: s,
      shaders: r,
      useAsync: i !== void 0 ? i : !0
    };
  }
  /**
   * Get whether the {@link pipeline} is ready, i.e. successfully compiled
   * @readonly
   */
  get ready() {
    return !this.status.compiling && this.status.compiled && !this.status.error;
  }
  /**
   * Get whether the {@link pipeline} is ready to be compiled, i.e. we have not already tried to compile it, and it's not currently compiling neither
   * @readonly
   */
  get canCompile() {
    return !this.status.compiling && !this.status.compiled && !this.status.error;
  }
  /**
   * Set our {@link PipelineEntry#bindGroups | pipeline entry bind groups}
   * @param bindGroups - {@link core/materials/Material.Material#bindGroups | bind groups} to use with this {@link PipelineEntry}
   */
  setPipelineEntryBindGroups(e) {
    this.bindGroups = e;
  }
  /* SHADERS */
  /**
   * Create a {@link GPUShaderModule}
   * @param parameters - Parameters used
   * @param parameters.code - patched WGSL code string
   * @param parameters.type - {@link MaterialShadersType | shader type}
   * @returns - compiled {@link GPUShaderModule} if successful
   */
  createShaderModule({ code: e = "", type: t = "vertex" }) {
    const s = this.renderer.createShaderModule({
      label: this.options.label + ": " + t + "Shader module",
      code: e
    });
    return "getCompilationInfo" in s && !this.renderer.production && s.getCompilationInfo().then((r) => {
      for (const i of r.messages) {
        let n = "";
        switch (i.lineNum && (n += `Line ${i.lineNum}:${i.linePos} - ${e.substring(
          i.offset,
          i.offset + i.length
        )}
`), n += i.message, i.type) {
          case "error":
            console.error(`${this.options.label} compilation error:
${n}`);
            break;
          case "warning":
            console.warn(`${this.options.label} compilation warning:
${n}`);
            break;
          case "info":
            console.log(`${this.options.label} compilation information:
${n}`);
            break;
        }
      }
    }), s;
  }
  /* SETUP */
  /**
   * Create the {@link PipelineEntry} shaders
   */
  createShaders() {
  }
  /**
   * Create the pipeline entry {@link layout}
   */
  createPipelineLayout() {
    this.layout = this.renderer.createPipelineLayout({
      label: this.options.label + " layout",
      bindGroupLayouts: this.bindGroups.map((e) => e.bindGroupLayout)
    });
  }
  /**
   * Create the {@link PipelineEntry} descriptor
   */
  createPipelineDescriptor() {
  }
  /**
   * Flush a {@link PipelineEntry}, i.e. reset its {@link bindGroups | bind groups}, {@link layout} and descriptor and recompile the {@link pipeline}
   * Used when one of the bind group or rendering property has changed
   * @param newBindGroups - new {@link bindGroups | bind groups} in case they have changed
   */
  flushPipelineEntry(e = []) {
    this.status.compiling = !1, this.status.compiled = !1, this.status.error = null, this.setPipelineEntryBindGroups(e), this.compilePipelineEntry();
  }
  /**
   * Set up a {@link pipeline} by creating the shaders, the {@link layout} and the descriptor
   */
  compilePipelineEntry() {
    this.status.compiling = !0, this.createShaders(), this.createPipelineLayout(), this.createPipelineDescriptor();
  }
}
const Ft = (
  /* wgsl */
  `
fn getOutputPosition(position: vec3f) -> vec4f {
  return matrices.modelViewProjection * vec4f(position, 1.0);
}`
), He = (
  /* wgsl */
  `
fn getUVCover(uv: vec2f, textureMatrix: mat4x4f) -> vec2f {
  return (textureMatrix * vec4f(uv, 0.0, 1.0)).xy;
}`
), kt = (
  /* wgsl */
  `
fn getVertex2DToUVCoords(vertex: vec2f) -> vec2f {
  return vec2(
    vertex.x * 0.5 + 0.5,
    0.5 - vertex.y * 0.5
  );
}

fn getVertex3DToUVCoords(vertex: vec3f) -> vec2f {
  return vec2(
    vertex.x * 0.5 + 0.5,
    0.5 - vertex.y * 0.5
  );
}
`
), K = {
  /** WGSL code chunks added to the vertex shader */
  vertex: {
    /** Applies given texture matrix to given uv coordinates */
    get_uv_cover: He
  },
  /** WGSL code chunks added to the fragment shader */
  fragment: {
    /** Applies given texture matrix to given uv coordinates */
    get_uv_cover: He,
    /** Convert vertex position to uv coordinates */
    get_vertex_to_uv_coords: kt
  }
}, ee = {
  /** WGSL code chunks added to the vertex shader */
  vertex: {
    /** Get output vec4f position vector by applying model view projection matrix to vec3f attribute position vector */
    get_output_position: Ft
  },
  /** WGSL code chunks added to the fragment shader */
  fragment: {}
};
class Ze extends lt {
  /**
   * RenderPipelineEntry constructor
   * @param parameters - {@link RenderPipelineEntryParams | parameters} used to create this {@link RenderPipelineEntry}
   */
  constructor(e) {
    let { renderer: t } = e;
    const { label: s, ...r } = e;
    t = t && t.renderer || t;
    const i = "RenderPipelineEntry";
    U(t, s ? s + " " + i : i), super(e), this.type = i, this.shaders = {
      vertex: {
        head: "",
        code: "",
        module: null
      },
      fragment: {
        head: "",
        code: "",
        module: null
      },
      full: {
        head: "",
        code: "",
        module: null
      }
    }, this.descriptor = null, this.options = {
      ...this.options,
      ...r
    };
  }
  // TODO! need to chose whether we should silently add the camera bind group here
  // or explicitly in the RenderMaterial class createBindGroups() method
  /**
   * Merge our {@link bindGroups | pipeline entry bind groups} with the {@link CameraRenderer#cameraBindGroup | camera bind group} if needed and set them
   * @param bindGroups - {@link core/materials/RenderMaterial.RenderMaterial#bindGroups | bind groups} to use with this {@link RenderPipelineEntry}
   */
  setPipelineEntryBindGroups(e) {
    this.bindGroups = "cameraBindGroup" in this.renderer && this.options.useProjection ? [this.renderer.cameraBindGroup, ...e] : e;
  }
  /**
   * Set {@link RenderPipelineEntry} properties (in this case the {@link bindGroups | bind groups} and {@link attributes})
   * @param parameters - the {@link core/materials/RenderMaterial.RenderMaterial#bindGroups | bind groups} and {@link core/materials/RenderMaterial.RenderMaterial#attributes | attributes} to use
   */
  setPipelineEntryProperties(e) {
    const { attributes: t, bindGroups: s } = e;
    this.attributes = t, this.setPipelineEntryBindGroups(s);
  }
  /* SHADERS */
  /**
   * Patch the shaders by appending all the necessary shader chunks, {@link bindGroups | bind groups}) and {@link attributes} WGSL code fragments to the given {@link PipelineEntryParams#shaders | parameter shader code}
   */
  patchShaders() {
    this.shaders.vertex.head = "", this.shaders.vertex.code = "", this.shaders.fragment.head = "", this.shaders.fragment.code = "", this.shaders.full.head = "", this.shaders.full.code = "";
    for (const t in K.vertex)
      this.shaders.vertex.head = `${K.vertex[t]}
${this.shaders.vertex.head}`, this.shaders.full.head = `${K.vertex[t]}
${this.shaders.full.head}`;
    for (const t in K.fragment)
      this.shaders.fragment.head = `${K.fragment[t]}
${this.shaders.fragment.head}`, this.shaders.full.head.indexOf(K.fragment[t]) === -1 && (this.shaders.full.head = `${K.fragment[t]}
${this.shaders.full.head}`);
    if (this.options.useProjection) {
      for (const t in ee.vertex)
        this.shaders.vertex.head = `${ee.vertex[t]}
${this.shaders.vertex.head}`, this.shaders.full.head = `${ee.vertex[t]}
${this.shaders.full.head}`;
      for (const t in ee.fragment)
        this.shaders.fragment.head = `${ee.fragment[t]}
${this.shaders.fragment.head}`, this.shaders.full.head.indexOf(ee.fragment[t]) === -1 && (this.shaders.full.head = `${ee.fragment[t]}
${this.shaders.full.head}`);
    }
    const e = [];
    this.bindGroups.forEach((t) => {
      let s = 0;
      t.bindings.forEach((r, i) => {
        r.wgslGroupFragment.forEach((n, o) => {
          e.push({
            groupIndex: t.index,
            visibility: r.visibility,
            bindIndex: s,
            wgslStructFragment: r.wgslStructFragment,
            wgslGroupFragment: n,
            newLine: i === t.bindings.length - 1 && o === r.wgslGroupFragment.length - 1
          }), s++;
        });
      });
    }), e.forEach((t) => {
      (t.visibility === GPUShaderStage.VERTEX || t.visibility === (GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE)) && (t.wgslStructFragment && this.shaders.vertex.head.indexOf(t.wgslStructFragment) === -1 && (this.shaders.vertex.head = `
${t.wgslStructFragment}
${this.shaders.vertex.head}`), this.shaders.vertex.head.indexOf(t.wgslGroupFragment) === -1 && (this.shaders.vertex.head = `${this.shaders.vertex.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`, t.newLine && (this.shaders.vertex.head += `
`))), (t.visibility === GPUShaderStage.FRAGMENT || t.visibility === (GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE)) && (t.wgslStructFragment && this.shaders.fragment.head.indexOf(t.wgslStructFragment) === -1 && (this.shaders.fragment.head = `
${t.wgslStructFragment}
${this.shaders.fragment.head}`), this.shaders.fragment.head.indexOf(t.wgslGroupFragment) === -1 && (this.shaders.fragment.head = `${this.shaders.fragment.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`, t.newLine && (this.shaders.fragment.head += `
`))), t.wgslStructFragment && this.shaders.full.head.indexOf(t.wgslStructFragment) === -1 && (this.shaders.full.head = `
${t.wgslStructFragment}
${this.shaders.full.head}`), this.shaders.full.head.indexOf(t.wgslGroupFragment) === -1 && (this.shaders.full.head = `${this.shaders.full.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`, t.newLine && (this.shaders.full.head += `
`));
    }), this.shaders.vertex.head = `${this.attributes.wgslStructFragment}
${this.shaders.vertex.head}`, this.shaders.full.head = `${this.attributes.wgslStructFragment}
${this.shaders.full.head}`, this.shaders.vertex.code = this.shaders.vertex.head + this.options.shaders.vertex.code, this.shaders.fragment.code = this.shaders.fragment.head + this.options.shaders.fragment.code, this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint && this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0 ? this.shaders.full.code = this.shaders.full.head + this.options.shaders.vertex.code : this.shaders.full.code = this.shaders.full.head + this.options.shaders.vertex.code + this.options.shaders.fragment.code;
  }
  /* SETUP */
  /**
   * Create the {@link shaders}: patch them and create the {@link GPUShaderModule}
   */
  createShaders() {
    this.patchShaders();
    const e = this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint && this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0;
    this.shaders.vertex.module = this.createShaderModule({
      code: this.shaders[e ? "full" : "vertex"].code,
      type: "vertex"
    }), this.shaders.fragment.module = this.createShaderModule({
      code: this.shaders[e ? "full" : "fragment"].code,
      type: "fragment"
    });
  }
  /**
   * Create the render pipeline {@link descriptor}
   */
  createPipelineDescriptor() {
    if (!this.shaders.vertex.module || !this.shaders.fragment.module)
      return;
    let e = -1;
    const t = this.options.blend ?? (this.options.transparent && {
      color: {
        srcFactor: "src-alpha",
        dstFactor: "one-minus-src-alpha"
      },
      alpha: {
        srcFactor: "one",
        dstFactor: "one-minus-src-alpha"
      }
    });
    this.descriptor = {
      label: this.options.label,
      layout: this.layout,
      vertex: {
        module: this.shaders.vertex.module,
        entryPoint: this.options.shaders.vertex.entryPoint,
        buffers: this.attributes.vertexBuffers.map((s) => ({
          stepMode: s.stepMode,
          arrayStride: s.arrayStride * 4,
          // 4 bytes each
          attributes: s.attributes.map((r) => (e++, {
            shaderLocation: e,
            offset: r.bufferOffset,
            // previous attribute size * 4
            format: r.bufferFormat
          }))
        }))
      },
      fragment: {
        module: this.shaders.fragment.module,
        entryPoint: this.options.shaders.fragment.entryPoint,
        targets: [
          {
            format: this.options.targetFormat ?? this.renderer.options.preferredFormat,
            ...t && {
              blend: t
            }
          }
        ]
      },
      primitive: {
        topology: this.options.topology,
        frontFace: this.options.verticesOrder,
        cullMode: this.options.cullMode
      },
      ...this.options.depth && {
        depthStencil: {
          depthWriteEnabled: this.options.depthWriteEnabled,
          depthCompare: this.options.depthCompare,
          format: "depth24plus"
        }
      },
      ...this.options.sampleCount > 1 && {
        multisample: {
          count: this.options.sampleCount
        }
      }
    };
  }
  /**
   * Create the render {@link pipeline}
   */
  createRenderPipeline() {
    if (!(!this.shaders.vertex.module || !this.shaders.fragment.module))
      try {
        this.pipeline = this.renderer.createRenderPipeline(this.descriptor);
      } catch (e) {
        this.status.error = e, j(e);
      }
  }
  /**
   * Asynchronously create the render {@link pipeline}
   * @async
   * @returns - void promise result
   */
  async createRenderPipelineAsync() {
    if (!(!this.shaders.vertex.module || !this.shaders.fragment.module))
      try {
        this.pipeline = await this.renderer.createRenderPipelineAsync(this.descriptor), this.status.compiled = !0, this.status.compiling = !1, this.status.error = null;
      } catch (e) {
        this.status.error = e, j(e);
      }
  }
  /**
   * Call {@link PipelineEntry#compilePipelineEntry | PipelineEntry compilePipelineEntry} method, then create our render {@link pipeline}
   * @async
   */
  async compilePipelineEntry() {
    super.compilePipelineEntry(), this.options.useAsync ? await this.createRenderPipelineAsync() : (this.createRenderPipeline(), this.status.compiled = !0, this.status.compiling = !1, this.status.error = null);
  }
}
class Qe extends lt {
  /**
   * ComputePipelineEntry constructor
   * @param parameters - {@link PipelineEntryParams | parameters} used to create this {@link ComputePipelineEntry}
   */
  constructor(e) {
    let { renderer: t } = e;
    const { label: s } = e;
    t = t && t.renderer || t;
    const r = "ComputePipelineEntry";
    U(t, s ? s + " " + r : r), super(e), this.type = r, this.shaders = {
      compute: {
        head: "",
        code: "",
        module: null
      }
    }, this.descriptor = null;
  }
  /**
   * Set {@link ComputePipelineEntry} properties (in this case the {@link bindGroups | bind groups})
   * @param parameters - the {@link core/materials/ComputeMaterial.ComputeMaterial#bindGroups | bind groups} to use
   */
  setPipelineEntryProperties(e) {
    const { bindGroups: t } = e;
    this.setPipelineEntryBindGroups(t);
  }
  /* SHADERS */
  /**
   * Patch the shaders by appending all the {@link bindGroups | bind groups}) WGSL code fragments to the given {@link PipelineEntryParams#shaders | parameter shader code}
   */
  patchShaders() {
    this.shaders.compute.head = "", this.shaders.compute.code = "";
    const e = [];
    this.bindGroups.forEach((t) => {
      let s = 0;
      t.bindings.forEach((r, i) => {
        r.wgslGroupFragment.forEach((n, o) => {
          e.push({
            groupIndex: t.index,
            visibility: r.visibility,
            bindIndex: s,
            wgslStructFragment: r.wgslStructFragment,
            wgslGroupFragment: n,
            newLine: i === t.bindings.length - 1 && o === r.wgslGroupFragment.length - 1
          }), s++;
        });
      });
    }), e.forEach((t) => {
      t.wgslStructFragment && this.shaders.compute.head.indexOf(t.wgslStructFragment) === -1 && (this.shaders.compute.head = `
${t.wgslStructFragment}
${this.shaders.compute.head}`), this.shaders.compute.head.indexOf(t.wgslGroupFragment) === -1 && (this.shaders.compute.head = `${this.shaders.compute.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`), t.newLine && (this.shaders.compute.head += `
`);
    }), this.shaders.compute.code = this.shaders.compute.head + this.options.shaders.compute.code;
  }
  /* SETUP */
  /**
   * Create the {@link shaders}: patch them and create the {@link GPUShaderModule}
   */
  createShaders() {
    this.patchShaders(), this.shaders.compute.module = this.createShaderModule({
      code: this.shaders.compute.code,
      type: "compute"
    });
  }
  /**
   * Create the compute pipeline {@link descriptor}
   */
  createPipelineDescriptor() {
    this.shaders.compute.module && (this.descriptor = {
      label: this.options.label,
      layout: this.layout,
      compute: {
        module: this.shaders.compute.module,
        entryPoint: this.options.shaders.compute.entryPoint
      }
    });
  }
  /**
   * Create the compute {@link pipeline}
   */
  createComputePipeline() {
    if (this.shaders.compute.module)
      try {
        this.pipeline = this.renderer.createComputePipeline(this.descriptor);
      } catch (e) {
        this.status.error = e, j(e);
      }
  }
  /**
   * Asynchronously create the compute {@link pipeline}
   * @async
   * @returns - void promise result
   */
  async createComputePipelineAsync() {
    if (this.shaders.compute.module)
      try {
        this.pipeline = await this.renderer.createComputePipelineAsync(this.descriptor), this.status.compiled = !0, this.status.compiling = !1, this.status.error = null;
      } catch (e) {
        this.status.error = e, j(e);
      }
  }
  /**
   * Call {@link PipelineEntry#compilePipelineEntry | PipelineEntry compilePipelineEntry} method, then create our compute {@link pipeline}
   * @async
   */
  async compilePipelineEntry() {
    super.compilePipelineEntry(), this.options.useAsync ? await this.createComputePipelineAsync() : (this.createComputePipeline(), this.status.compiled = !0, this.status.compiling = !1, this.status.error = null);
  }
}
class _t {
  constructor() {
    this.type = "PipelineManager", this.currentPipelineIndex = null, this.pipelineEntries = [];
  }
  /**
   * Checks if the provided {@link RenderPipelineEntryBaseParams | RenderPipelineEntry parameters} belongs to an already created {@link RenderPipelineEntry}.
   * @param parameters - {@link RenderPipelineEntryBaseParams | RenderPipelineEntry parameters}
   * @returns - the found {@link RenderPipelineEntry}, or null if not found
   */
  isSameRenderPipeline(e) {
    const {
      shaders: t,
      cullMode: s,
      depth: r,
      depthWriteEnabled: i,
      depthCompare: n,
      transparent: o,
      verticesOrder: a,
      topology: h,
      sampleCount: u
    } = e;
    return this.pipelineEntries.filter((c) => c instanceof Ze).find((c) => {
      const { options: l } = c;
      return t.vertex.code.localeCompare(l.shaders.vertex.code) === 0 && t.vertex.entryPoint === l.shaders.vertex.entryPoint && t.fragment.code.localeCompare(l.shaders.fragment.code) === 0 && t.fragment.entryPoint === l.shaders.fragment.entryPoint && s === l.cullMode && r === l.depth && i === l.depthWriteEnabled && n === l.depthCompare && o === l.transparent && u === l.sampleCount && a === l.verticesOrder && h === l.topology;
    });
  }
  /**
   * Check if a {@link RenderPipelineEntry} has already been created with the given {@link RenderPipelineEntryParams | parameters}.
   * Use it if found, else create a new one and add it to the {@link pipelineEntries} array.
   * @param parameters - {@link RenderPipelineEntryParams | RenderPipelineEntry parameters}
   * @returns - {@link RenderPipelineEntry}, either from cache or newly created
   */
  createRenderPipeline(e) {
    const t = this.isSameRenderPipeline(e);
    if (t)
      return t;
    {
      const s = new Ze(e);
      return this.pipelineEntries.push(s), s;
    }
  }
  /**
   * Checks if the provided {@link PipelineEntryParams | parameters} belongs to an already created {@link ComputePipelineEntry}.
   * @param parameters - {@link PipelineEntryParams | PipelineEntry parameters}
   * @returns - the found {@link ComputePipelineEntry}, or null if not found
   */
  isSameComputePipeline(e) {
    const { shaders: t } = e;
    return this.pipelineEntries.filter((s) => s instanceof Qe).find((s) => {
      const { options: r } = s;
      return t.compute.code.localeCompare(r.shaders.compute.code) === 0 && t.compute.entryPoint === r.shaders.compute.entryPoint;
    });
  }
  /**
   * Check if a {@link ComputePipelineEntry} has already been created with the given {@link PipelineEntryParams | parameters}.
   * Use it if found, else create a new one and add it to the {@link pipelineEntries} array.
   * @param parameters - {@link PipelineEntryParams | PipelineEntry parameters}
   * @returns - newly created {@link ComputePipelineEntry}
   */
  createComputePipeline(e) {
    const t = this.isSameComputePipeline(e);
    if (t)
      return t;
    {
      const s = new Qe(e);
      return this.pipelineEntries.push(s), s;
    }
  }
  /**
   * Check if the given {@link AllowedPipelineEntries | PipelineEntry} is already set, if not set it
   * @param pass - current pass encoder
   * @param pipelineEntry - the {@link AllowedPipelineEntries | PipelineEntry} to set
   */
  setCurrentPipeline(e, t) {
    t.index !== this.currentPipelineIndex && (e.setPipeline(t.pipeline), this.currentPipelineIndex = t.index);
  }
  /**
   * Reset the {@link PipelineManager#currentPipelineIndex | current pipeline index} so the next {@link AllowedPipelineEntries | PipelineEntry} will be set for sure
   */
  resetCurrentPipeline() {
    this.currentPipelineIndex = null;
  }
}
class Lt {
  /**
   * ResizeManager constructor
   */
  constructor() {
    this.shouldWatch = !0, this.entries = [], this.resizeObserver = new ResizeObserver((e) => {
      const t = e.map((s) => this.entries.filter((r) => r.element.isSameNode(s.target))).flat().sort((s, r) => r.priority - s.priority);
      t == null || t.forEach((s) => {
        s && s.callback && s.callback();
      });
    });
  }
  /**
   * Set {@link shouldWatch}
   * @param shouldWatch - whether to watch or not
   */
  useObserver(e = !0) {
    this.shouldWatch = e;
  }
  /**
   * Track an {@link HTMLElement} size change and execute a callback function when it happens
   * @param entry - {@link ResizeManagerEntry | entry} to watch
   */
  observe({ element: e, priority: t, callback: s }) {
    if (!e || !this.shouldWatch)
      return;
    this.resizeObserver.observe(e);
    const r = {
      element: e,
      priority: t,
      callback: s
    };
    this.entries.push(r);
  }
  /**
   * Unobserve an {@link HTMLElement} and remove it from our {@link entries} array
   * @param element - {@link HTMLElement} to unobserve
   */
  unobserve(e) {
    this.resizeObserver.unobserve(e), this.entries = this.entries.filter((t) => !t.element.isSameNode(e));
  }
  /**
   * Destroy our {@link ResizeManager}
   */
  destroy() {
    this.resizeObserver.disconnect();
  }
}
const Ce = new Lt();
class ct {
  /**
   * DOMElement constructor
   * @param parameters - {@link DOMElementParams | parameters} used to create our DOMElement
   */
  constructor({
    element: e = document.body,
    priority: t = 1,
    onSizeChanged: s = (i = null) => {
    },
    onPositionChanged: r = (i = null) => {
    }
  } = {}) {
    if (typeof e == "string") {
      if (this.element = document.querySelector(e), !this.element) {
        const i = typeof e == "string" ? `'${e}' selector` : `${e} HTMLElement`;
        j(`DOMElement: corresponding ${i} not found.`);
      }
    } else
      this.element = e;
    this.priority = t, this.isResizing = !1, this.onSizeChanged = s, this.onPositionChanged = r, this.resizeManager = Ce, this.resizeManager.observe({
      element: this.element,
      priority: this.priority,
      callback: () => {
        this.setSize();
      }
    }), this.setSize();
  }
  /**
   * Check whether 2 bounding rectangles are equals
   * @param rect1 - first bounding rectangle
   * @param rect2 - second bounding rectangle
   * @returns - whether the rectangles are equals or not
   */
  compareBoundingRect(e, t) {
    return !["x", "y", "left", "top", "right", "bottom", "width", "height"].some((s) => e[s] !== t[s]);
  }
  /**
   * Get our element bounding rectangle
   */
  get boundingRect() {
    return this._boundingRect;
  }
  /**
   * Set our element bounding rectangle
   * @param boundingRect - new bounding rectangle
   */
  set boundingRect(e) {
    const t = !!this.boundingRect && this.compareBoundingRect(e, this.boundingRect);
    this._boundingRect = {
      top: e.top,
      right: e.right,
      bottom: e.bottom,
      left: e.left,
      width: e.width,
      height: e.height,
      x: e.x,
      y: e.y
    }, t || this.onSizeChanged(this.boundingRect);
  }
  /**
   * Update our element bounding rectangle because the scroll position has changed
   * @param delta - scroll delta values along X and Y axis
   */
  updateScrollPosition(e = { x: 0, y: 0 }) {
    this.isResizing || (this._boundingRect.top += e.y, this._boundingRect.left += e.x, (e.x || e.y) && this.onPositionChanged(this.boundingRect));
  }
  /**
   * Set our element bounding rectangle, either by a value or a getBoundingClientRect call
   * @param boundingRect - new bounding rectangle
   */
  setSize(e = null) {
    this.element && (this.boundingRect = e ?? this.element.getBoundingClientRect(), this.isResizing = !1);
  }
  /**
   * Destroy our DOMElement - remove from resize observer and clear throttle timeout
   */
  destroy() {
    this.resizeManager.unobserve(this.element);
  }
}
const Dt = (
  /* wgsl */
  `
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
};

@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {
  return textureSample(renderTexture, defaultSampler, fsInput.uv);
}`
);
class Vt extends ht {
  /**
   * ShaderPass constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link ShaderPass}
   * @param parameters - {@link ShaderPassParams | parameters} use to create this {@link ShaderPass}
   */
  constructor(e, t = {}) {
    var s;
    e = e && e.renderer || e, U(e, t.label ? t.label + " ShaderPass" : "ShaderPass"), t.transparent = !0, t.label = t.label ?? "ShaderPass " + ((s = e.shaderPasses) == null ? void 0 : s.length), t.shaders || (t.shaders = {}), t.shaders.fragment || (t.shaders.fragment = {
      code: Dt,
      entryPoint: "main"
    }), t.depth = !1, super(e, t), this.type = "ShaderPass", this.createRenderTexture({
      label: t.label ? `${t.label} render texture` : "Shader pass render texture",
      name: "renderTexture",
      fromTexture: this.renderTarget ? this.renderTarget.renderTexture : null
    });
  }
  /**
   * Get our main {@link RenderTexture}, the one that contains our post processed content
   * @readonly
   */
  get renderTexture() {
    return this.renderTextures.find((e) => e.options.name === "renderTexture");
  }
  /**
   * Assign or remove a {@link RenderTarget} to this {@link ShaderPass}
   * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a RenderTarget as well.
   * Also copy or remove the {@link RenderTarget#renderTexture | render target render texture} into the {@link ShaderPass} {@link renderTexture}
   * @param renderTarget - the {@link RenderTarget} to assign or null if we want to remove the current {@link RenderTarget}
   */
  setRenderTarget(e) {
    super.setRenderTarget(e), e ? this.renderTexture.copy(this.renderTarget.renderTexture) : (this.renderTexture.options.fromTexture = null, this.renderTexture.createTexture());
  }
  /**
   * Add the {@link ShaderPass} to the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  addToScene() {
    this.renderer.shaderPasses.push(this), this.autoRender && this.renderer.scene.addShaderPass(this);
  }
  /**
   * Remove the {@link ShaderPass} from the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  removeFromScene() {
    this.renderTarget && this.renderTarget.destroy(), this.autoRender && this.renderer.scene.removeShaderPass(this), this.renderer.shaderPasses = this.renderer.shaderPasses.filter((e) => e.uuid !== this.uuid);
  }
}
class Ee {
  /**
   * RenderPass constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link RenderPass}
   * @param parameters - {@link RenderPassParams | parameters} used to create this {@link RenderPass}
   */
  constructor(e, {
    label: t = "Render Pass",
    sampleCount: s = 4,
    loadOp: r = "clear",
    clearValue: i = [0, 0, 0, 0],
    targetFormat: n,
    depth: o = !0,
    depthTexture: a,
    depthLoadOp: h = "clear",
    depthClearValue: u = 1
  } = {}) {
    e = e && e.renderer || e, U(e, "RenderPass"), this.type = "RenderPass", this.uuid = Y(), this.renderer = e, this.options = {
      label: t,
      sampleCount: s,
      // color
      loadOp: r,
      clearValue: i,
      targetFormat: n ?? this.renderer.options.preferredFormat,
      // depth
      depth: o,
      ...a !== void 0 && { depthTexture: a },
      depthLoadOp: h,
      depthClearValue: u
    }, this.setClearValue(i), this.options.depth && this.createDepthTexture(), this.viewTexture = new ne(this.renderer, {
      label: this.options.label + " view texture",
      name: "viewTexture",
      format: this.options.targetFormat,
      sampleCount: this.options.sampleCount
    }), this.setRenderPassDescriptor();
  }
  /**
   * Set our {@link depthTexture | depth texture}
   */
  createDepthTexture() {
    this.depthTexture = new ne(this.renderer, {
      label: this.options.label + " depth texture",
      name: "depthTexture",
      usage: "depthTexture",
      format: "depth24plus",
      sampleCount: this.options.sampleCount,
      ...this.options.depthTexture && { fromTexture: this.options.depthTexture }
    });
  }
  /**
   * Reset our {@link depthTexture | depth texture}
   */
  resetRenderPassDepth() {
    this.depthTexture.forceResize({
      width: Math.floor(this.renderer.pixelRatioBoundingRect.width),
      height: Math.floor(this.renderer.pixelRatioBoundingRect.height),
      depth: 1
    }), this.descriptor.depthStencilAttachment.view = this.depthTexture.texture.createView({
      label: this.depthTexture.options.label + " view"
    });
  }
  /**
   * Reset our {@link viewTexture | view texture}
   */
  resetRenderPassView() {
    this.viewTexture.forceResize({
      width: Math.floor(this.renderer.pixelRatioBoundingRect.width),
      height: Math.floor(this.renderer.pixelRatioBoundingRect.height),
      depth: 1
    }), this.descriptor.colorAttachments[0].view = this.viewTexture.texture.createView({
      label: this.viewTexture.options.label + " view"
    });
  }
  /**
   * Set our render pass {@link descriptor}
   */
  setRenderPassDescriptor() {
    this.descriptor = {
      label: this.options.label + " descriptor",
      colorAttachments: [
        {
          // view: <- to be filled out when we set our render pass view
          view: this.viewTexture.texture.createView({
            label: this.viewTexture.options.label + " view"
          }),
          // ...(this.options.sampleCount > 1 && {
          //   resolveTarget: this.resolveTexture.texture.createView({
          //     label: this.resolveTexture.options.label + ' view',
          //   }),
          // }),
          // clear values
          clearValue: this.options.clearValue,
          // loadOp: 'clear' specifies to clear the texture to the clear value before drawing
          // The other option is 'load' which means load the existing contents of the texture into the GPU so we can draw over what's already there.
          loadOp: this.options.loadOp,
          // storeOp: 'store' means store the result of what we draw.
          // We could also pass 'discard' which would throw away what we draw.
          // see https://webgpufundamentals.org/webgpu/lessons/webgpu-multisampling.html
          storeOp: "store"
        }
      ],
      ...this.options.depth && {
        depthStencilAttachment: {
          view: this.depthTexture.texture.createView({
            label: this.depthTexture.options.label + " view"
          }),
          depthClearValue: this.options.depthClearValue,
          // the same way loadOp is working, we can specify if we want to clear or load the previous depth buffer result
          depthLoadOp: this.options.depthLoadOp,
          depthStoreOp: "store"
        }
      }
    };
  }
  /**
   * Resize our {@link RenderPass}: reset its {@link RenderTexture}
   */
  resize() {
    this.options.depth && this.resetRenderPassDepth(), this.resetRenderPassView();
  }
  /**
   * Set the {@link descriptor} {@link GPULoadOp | load operation}
   * @param loadOp - new {@link GPULoadOp | load operation} to use
   */
  setLoadOp(e = "clear") {
    this.options.loadOp = e, this.descriptor && this.descriptor.colorAttachments && (this.descriptor.colorAttachments[0].loadOp = e);
  }
  /**
   * Set the {@link descriptor} {@link GPULoadOp | depth load operation}
   * @param depthLoadOp - new {@link GPULoadOp | depth load operation} to use
   */
  setDepthLoadOp(e = "clear") {
    this.options.depthLoadOp = e, this.options.depth && this.descriptor.depthStencilAttachment && (this.descriptor.depthStencilAttachment.depthLoadOp = e);
  }
  /**
   * Set our {@link GPUColor | clear colors value}.<br>
   * Beware that if the {@link renderer} is using {@link core/renderers/GPURenderer.GPURenderer#alphaMode | premultiplied alpha mode}, your R, G and B channels should be premultiplied by your alpha channel.
   * @param clearValue - new {@link GPUColor | clear colors value} to use
   */
  setClearValue(e = [0, 0, 0, 0]) {
    if (this.renderer.alphaMode === "premultiplied") {
      const t = e[3];
      e[0] = Math.min(e[0], t), e[1] = Math.min(e[1], t), e[2] = Math.min(e[2], t);
    } else
      this.options.clearValue = e;
    this.descriptor && this.descriptor.colorAttachments && (this.descriptor.colorAttachments[0].clearValue = e);
  }
  /**
   * Destroy our {@link RenderPass}
   */
  destroy() {
    var e;
    (e = this.viewTexture) == null || e.destroy(), !this.options.depthTexture && this.depthTexture && this.depthTexture.destroy();
  }
}
var se;
class pt {
  /**
   * RenderTarget constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link RenderTarget}
   * @param parameters - {@link RenderTargetParams | parameters} use to create this {@link RenderTarget}
   */
  constructor(e, t) {
    k(this, se, void 0);
    z(this, se, !0), e = e && e.renderer || e, U(e, "RenderTarget"), this.type = "RenderTarget", this.renderer = e, this.uuid = Y();
    const { label: s, targetFormat: r, autoRender: i, ...n } = t;
    this.options = {
      label: s,
      ...n,
      targetFormat: r ?? this.renderer.options.preferredFormat,
      autoRender: i
    }, i !== void 0 && z(this, se, i), this.renderPass = new Ee(this.renderer, {
      label: this.options.label ? `${this.options.label} Render Pass` : "Render Target Render Pass",
      targetFormat: this.options.targetFormat,
      depthTexture: this.renderer.renderPass.depthTexture,
      // reuse renderer depth texture for every pass
      ...n
    }), this.renderTexture = new ne(this.renderer, {
      label: this.options.label ? `${this.options.label} Render Texture` : "Render Target Render Texture",
      name: "renderTexture",
      format: this.options.targetFormat
    }), this.addToScene();
  }
  /**
   * Add the {@link RenderTarget} to the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  addToScene() {
    this.renderer.renderTargets.push(this), P(this, se) && this.renderer.scene.addRenderTarget(this);
  }
  /**
   * Remove the {@link RenderTarget} from the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  removeFromScene() {
    P(this, se) && this.renderer.scene.removeRenderTarget(this), this.renderer.renderTargets = this.renderer.renderTargets.filter((e) => e.uuid !== this.uuid);
  }
  /**
   * Resize our {@link renderPass} and {@link renderTexture}
   * @param boundingRect - new {@link DOMElementBoundingRect | bounding rectangle}
   */
  resize(e) {
    var t, s;
    this.renderPass.options.depthTexture.texture = this.renderer.renderPass.depthTexture.texture, (t = this.renderPass) == null || t.resize(), (s = this.renderTexture) == null || s.resize();
  }
  /**
   * Remove our {@link RenderTarget}. Alias of {@link RenderTarget#destroy}
   */
  remove() {
    this.destroy();
  }
  /**
   * Destroy our {@link RenderTarget}
   */
  destroy() {
    var e, t;
    this.renderer.meshes.forEach((s) => {
      s.renderTarget && s.renderTarget.uuid === this.uuid && s.setRenderTarget(null);
    }), this.renderer.shaderPasses.forEach((s) => {
      s.renderTarget && s.renderTarget.uuid === this.uuid && (s.renderTarget = null, s.setRenderTarget(null));
    }), this.removeFromScene(), (e = this.renderPass) == null || e.destroy(), (t = this.renderTexture) == null || t.destroy();
  }
}
se = new WeakMap();
class jt extends ht {
  /**
   * PingPongPlane constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link PingPongPlane}
   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link PingPongPlane}
   */
  constructor(e, t = {}) {
    var s;
    e = e && e.renderer || e, U(e, t.label ? t.label + " PingPongPlane" : "PingPongPlane"), t.renderTarget = new pt(e, {
      label: t.label ? t.label + " render target" : "Ping Pong render target",
      depth: !1,
      ...t.targetFormat && { targetFormat: t.targetFormat }
    }), t.transparent = !1, t.depth = !1, t.label = t.label ?? "PingPongPlane " + ((s = e.pingPongPlanes) == null ? void 0 : s.length), super(e, t), this.type = "PingPongPlane", this.createRenderTexture({
      label: t.label ? `${t.label} render texture` : "PingPongPlane render texture",
      name: "renderTexture",
      ...t.targetFormat && { format: t.targetFormat }
    });
  }
  /**
   * Get our main {@link RenderTexture}, the one that contains our ping pong content
   * @readonly
   */
  get renderTexture() {
    return this.renderTextures.find((e) => e.options.name === "renderTexture");
  }
  /**
   * Add the {@link PingPongPlane} to the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  addToScene() {
    this.renderer.pingPongPlanes.push(this), this.autoRender && this.renderer.scene.addPingPongPlane(this);
  }
  /**
   * Remove the {@link PingPongPlane} from the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  removeFromScene() {
    this.renderTarget && this.renderTarget.destroy(), this.autoRender && this.renderer.scene.removePingPongPlane(this), this.renderer.pingPongPlanes = this.renderer.pingPongPlanes.filter((e) => e.uuid !== this.uuid);
  }
}
var ie, re;
class $t extends ut {
  /**
   * DOMObject3D constructor
   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link DOMObject3D}
   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link DOMObject3D}
   * @param parameters - {@link DOMObject3DParams | parameters} used to create this {@link DOMObject3D}
   */
  constructor(t, s, r) {
    super(t);
    k(this, ie, void 0);
    k(this, re, void 0);
    z(this, ie, new f()), z(this, re, new f()), t = t && t.renderer || t, Ge(t, "DOM3DObject"), this.renderer = t, this.size = {
      world: {
        width: 0,
        height: 0,
        top: 0,
        left: 0
      },
      document: {
        width: 0,
        height: 0,
        top: 0,
        left: 0
      }
    }, this.watchScroll = r.watchScroll, this.camera = this.renderer.camera, this.setDOMElement(s);
  }
  /**
   * Set the {@link domElement | DOM Element}
   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use
   */
  setDOMElement(t) {
    this.domElement = new ct({
      element: t,
      onSizeChanged: (s) => this.resize(s),
      onPositionChanged: (s) => this.onPositionChanged(s)
    });
  }
  /**
   * Update size and position when the {@link domElement | DOM Element} position changed
   * @param boundingRect - the new bounding rectangle
   */
  onPositionChanged(t) {
    this.watchScroll && (this.size.document = t ?? this.domElement.element.getBoundingClientRect(), this.updateSizeAndPosition());
  }
  /**
   * Reset the {@link domElement | DOMElement}
   * @param element - the new {@link HTMLElement} or string representing an {@link HTMLElement} selector to use
   */
  resetDOMElement(t) {
    this.domElement && this.domElement.destroy(), this.setDOMElement(t);
  }
  /**
   * Update the {@link DOMObject3D} sizes and position
   */
  updateSizeAndPosition() {
    this.setWorldSizes(), this.applyPosition(), this.shouldUpdateModelMatrix();
  }
  /**
   * Update the {@link DOMObject3D} sizes, position and projection
   */
  shouldUpdateMatrixStack() {
    this.updateSizeAndPosition(), super.shouldUpdateMatrixStack();
  }
  /**
   * Resize the {@link DOMObject3D}
   * @param boundingRect - new {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   */
  resize(t) {
    var s;
    !t && (!this.domElement || (s = this.domElement) != null && s.isResizing) || (this.size.document = t ?? this.domElement.element.getBoundingClientRect(), this.shouldUpdateMatrixStack());
  }
  /* BOUNDING BOXES GETTERS */
  /**
   * Get the {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   * @readonly
   */
  get boundingRect() {
    return this.domElement.boundingRect;
  }
  /* TRANSFOMS */
  /**
   * Set our transforms properties and {@link Vec3#onChange | onChange vector} callbacks
   */
  setTransforms() {
    super.setTransforms(), this.transforms.origin.model.set(0.5, 0.5, 0), this.transforms.origin.world = new f(), this.transforms.position.document = new f(), this.documentPosition.onChange(() => this.applyPosition()), this.transformOrigin.onChange(() => this.setWorldTransformOrigin());
  }
  /**
   * Get the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}
   */
  get documentPosition() {
    return this.transforms.position.document;
  }
  /**
   * Set the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}
   * @param value - additional translation relative to the document to apply
   */
  set documentPosition(t) {
    this.transforms.position.document = t, this.applyPosition();
  }
  /**
   * Get the {@link domElement | DOM element} scale in world space
   * @readonly
   */
  get DOMObjectWorldScale() {
    return P(this, re).clone();
  }
  /**
   * Get the {@link DOMObject3D} scale in world space (accounting for {@link scale})
   * @readonly
   */
  get worldScale() {
    return this.DOMObjectWorldScale.multiply(this.scale);
  }
  /**
   * Get the {@link DOMObject3D} position in world space
   * @readonly
   */
  get worldPosition() {
    return P(this, ie).clone();
  }
  /**
   * Get the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}
   */
  get transformOrigin() {
    return this.transforms.origin.model;
  }
  /**
   * Set the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}
   * @param value - new transform origin
   */
  set transformOrigin(t) {
    this.transforms.origin.model = t, this.setWorldTransformOrigin();
  }
  /**
   * Get the {@link DOMObject3D} transform origin in world space
   */
  get worldTransformOrigin() {
    return this.transforms.origin.world;
  }
  /**
   * Set the {@link DOMObject3D} transform origin in world space
   * @param value - new world space transform origin
   */
  set worldTransformOrigin(t) {
    this.transforms.origin.world = t;
  }
  /**
   * Set the {@link DOMObject3D} world position using its world position and document translation converted to world space
   */
  applyPosition() {
    this.applyDocumentPosition(), super.applyPosition();
  }
  /**
   * Compute the {@link DOMObject3D} world position using its world position and document translation converted to world space
   */
  applyDocumentPosition() {
    let t = new f(0, 0, 0);
    this.documentPosition.equals(t) || (t = this.documentToWorldSpace(this.documentPosition)), P(this, ie).set(
      this.position.x + this.size.world.left + t.x,
      this.position.y + this.size.world.top + t.y,
      this.position.z + this.documentPosition.z / this.camera.CSSPerspective
    );
  }
  /**
   * Apply the transform origin and set the {@link DOMObject3D} world transform origin
   */
  applyTransformOrigin() {
    this.size && (this.setWorldTransformOrigin(), super.applyTransformOrigin());
  }
  /* MATRICES */
  /**
   * Update the {@link modelMatrix | model matrix} accounting the {@link DOMObject3D} world position and {@link DOMObject3D} world scale
   */
  updateModelMatrix() {
    this.modelMatrix.composeFromOrigin(
      P(this, ie),
      this.quaternion,
      this.scale,
      this.worldTransformOrigin
    ), this.modelMatrix.scale(P(this, re)), this.shouldUpdateWorldMatrix();
  }
  /**
   * Convert a document position {@link Vec3 | vector} to a world position {@link Vec3 | vector}
   * @param vector - document position {@link Vec3 | vector} converted to world space
   */
  documentToWorldSpace(t = new f()) {
    return new f(
      t.x * this.renderer.pixelRatio / this.renderer.boundingRect.width * this.camera.screenRatio.width,
      -(t.y * this.renderer.pixelRatio / this.renderer.boundingRect.height) * this.camera.screenRatio.height,
      t.z
    );
  }
  /**
   * Set the {@link DOMObject3D#size.world | world size} and set the {@link DOMObject3D} world transform origin
   */
  setWorldSizes() {
    const t = this.renderer.boundingRect, s = {
      x: this.size.document.width / 2 + this.size.document.left,
      y: this.size.document.height / 2 + this.size.document.top
    }, r = {
      x: t.width / 2 + t.left,
      y: t.height / 2 + t.top
    };
    this.size.world = {
      width: this.size.document.width / t.width * this.camera.screenRatio.width / 2,
      height: this.size.document.height / t.height * this.camera.screenRatio.height / 2,
      top: (r.y - s.y) / t.height * this.camera.screenRatio.height,
      left: (s.x - r.x) / t.width * this.camera.screenRatio.width
    }, P(this, re).set(this.size.world.width, this.size.world.height, 1), this.setWorldTransformOrigin();
  }
  /**
   * Set the {@link DOMObject3D} world transform origin and tell the matrices to update
   */
  setWorldTransformOrigin() {
    this.transforms.origin.world = new f(
      (this.transformOrigin.x * 2 - 1) * // between -1 and 1
      this.size.world.width,
      -(this.transformOrigin.y * 2 - 1) * // between -1 and 1
      this.size.world.height,
      this.transformOrigin.z
    ), this.shouldUpdateModelMatrix(), this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Update the {@link domElement | DOM Element} scroll position
   * @param delta - last {@link utils/ScrollManager.ScrollManager.delta | scroll delta values}
   */
  updateScrollPosition(t = { x: 0, y: 0 }) {
    (t.x || t.y) && this.domElement.updateScrollPosition(t);
  }
  /**
   * Destroy our {@link DOMObject3D}
   */
  destroy() {
    var t;
    (t = this.domElement) == null || t.destroy();
  }
}
ie = new WeakMap(), re = new WeakMap();
const Je = {
  autoloadSources: !0,
  watchScroll: !0
};
class ft extends dt($t) {
  /**
   * DOMMesh constructor
   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link DOMMesh}
   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link DOMMesh}
   * @param parameters - {@link DOMMeshParams | parameters} used to create this {@link DOMMesh}
   */
  constructor(e, t, s) {
    super(e, t, { ...Je, ...s }), this._onLoadingCallback = (i) => {
    }, s = { ...Je, ...s }, e = e && e.renderer || e, Ge(e, s.label ? s.label + " DOMMesh" : "DOMMesh"), this.type = "DOMMesh";
    const { autoloadSources: r } = s;
    this.autoloadSources = r, this.sourcesReady = !1, this.setInitSources();
  }
  /**
   * Get/set whether our {@link material} and {@link geometry} are ready
   * @readonly
   */
  get ready() {
    return this._ready;
  }
  set ready(e) {
    this._ready = e, this.DOMMeshReady && this._onReadyCallback && this._onReadyCallback();
  }
  /**
   * Get/set whether all the initial {@link DOMMesh} sources have been successfully loaded
   * @readonly
   */
  get sourcesReady() {
    return this._sourcesReady;
  }
  set sourcesReady(e) {
    this._sourcesReady = e, this.DOMMeshReady && this._onReadyCallback && this._onReadyCallback();
  }
  /**
   * Get whether our {@link DOMMesh} is ready. A {@link DOMMesh} is ready when its {@link sourcesReady | sources are ready} and its {@link material} and {@link geometry} are ready.
   * @readonly
   */
  get DOMMeshReady() {
    return this.ready && this.sourcesReady;
  }
  /**
   * Add a {@link DOMMesh} to the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  addToScene() {
    super.addToScene(), this.renderer.domMeshes.push(this);
  }
  /**
   * Remove a {@link DOMMesh} from the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  removeFromScene() {
    super.removeFromScene(), this.renderer.domMeshes = this.renderer.domMeshes.filter(
      (e) => e.uuid !== this.uuid
    );
  }
  /**
   * Load initial {@link DOMMesh} sources if needed and create associated {@link Texture}
   */
  setInitSources() {
    let e = 0, t = 0;
    if (this.autoloadSources) {
      const s = this.domElement.element.querySelectorAll("img"), r = this.domElement.element.querySelectorAll("video"), i = this.domElement.element.querySelectorAll("canvas");
      e = s.length + r.length + i.length;
      const n = (o) => {
        t++, this._onLoadingCallback && this._onLoadingCallback(o), t === e && (this.sourcesReady = !0);
      };
      e || (this.sourcesReady = !0), s.length && s.forEach((o) => {
        const a = this.createTexture({
          name: o.getAttribute("data-texture-name") ?? "texture" + this.textures.length
        });
        a.onSourceUploaded(() => n(a)).loadImage(o.src);
      }), r.length && r.forEach((o) => {
        const a = this.createTexture({
          name: o.getAttribute("data-texture-name") ?? "texture" + this.textures.length
        });
        a.onSourceUploaded(() => n(a)).loadVideo(o);
      }), i.length && i.forEach((o) => {
        const a = this.createTexture({
          name: o.getAttribute("data-texture-name") ?? "texture" + this.textures.length
        });
        a.onSourceUploaded(() => n(a)).loadCanvas(o);
      });
    } else
      this.sourcesReady = !0;
  }
  /**
   * Reset/change the {@link domElement | DOM Element}
   * @param element - new {@link HTMLElement} or string representing an {@link HTMLElement} selector to use
   */
  resetDOMElement(e) {
    e ? super.resetDOMElement(e) : !e && !this.renderer.production && _(
      `${this.options.label}: You are trying to reset a ${this.type} with a HTML element that does not exist. The old HTML element will be kept instead.`
    );
  }
  /**
   * Get our {@link DOMMesh#domElement | DOM Element} {@link core/DOM/DOMElement.DOMElement#boundingRect | bounding rectangle} accounting for current {@link core/renderers/GPURenderer.GPURenderer#pixelRatio | renderer pixel ratio}
   */
  get pixelRatioBoundingRect() {
    const e = window.devicePixelRatio ?? 1, t = this.renderer.pixelRatio / e;
    return Object.keys(this.domElement.boundingRect).reduce(
      (s, r) => ({ ...s, [r]: this.domElement.boundingRect[r] * t }),
      {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }
    );
  }
  /**
   * Create a new {@link RenderTexture}
   * @param  options - {@link RenderTextureParams | RenderTexture parameters}
   * @returns - newly created {@link RenderTexture}
   */
  createRenderTexture(e) {
    return e = {
      ...e,
      size: { width: this.pixelRatioBoundingRect.width, height: this.pixelRatioBoundingRect.height }
    }, super.createRenderTexture(e);
  }
  /**
   * Resize the Mesh's render textures only if they're not storage textures
   */
  resizeRenderTextures() {
    var e;
    (e = this.renderTextures) == null || e.filter((t) => t.options.usage === "texture").forEach(
      (t) => t.resize({ width: this.pixelRatioBoundingRect.width, height: this.pixelRatioBoundingRect.height })
    );
  }
  /* EVENTS */
  /**
   * Called each time one of the initial sources associated {@link Texture#texture | GPU texture} has been uploaded to the GPU
   * @param callback - callback to call each time a {@link Texture#texture | GPU texture} has been uploaded to the GPU
   * @returns - our {@link DOMMesh}
   */
  onLoading(e) {
    return e && (this._onLoadingCallback = e), this;
  }
}
const It = {
  label: "Plane",
  // geometry
  instancesCount: 1,
  vertexBuffers: []
};
class mt extends ft {
  /**
   * Plane constructor
   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link Plane}
   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link Plane}
   * @param parameters - {@link PlaneParams | parameters} used to create this {@link Plane}
   */
  constructor(e, t, s = {}) {
    e = e && e.renderer || e, Ge(e, s.label ? s.label + " Plane" : "Plane");
    const r = { ...It, ...s };
    let { geometry: i, widthSegments: n, heightSegments: o, ...a } = r;
    const { instancesCount: h, vertexBuffers: u, ...c } = a;
    if (!i || i.type !== "PlaneGeometry") {
      n = n ?? 1, o = o ?? 1;
      const l = n * o + n;
      u.length || (i = we.getPlaneGeometryByID(l)), i ? i.instancesCount = h : (i = new ot({ widthSegments: n, heightSegments: o, instancesCount: h, vertexBuffers: u }), we.addPlaneGeometry(i));
    }
    super(e, t, { geometry: i, ...c }), this.type = "Plane";
  }
  /**
   * Take the pointer {@link Vec2 | vector} position relative to the document and returns it relative to our {@link Plane}
   * It ranges from -1 to 1 on both axis
   * @param mouseCoords - pointer {@link Vec2 | vector} coordinates
   * @returns - raycasted {@link Vec2 | vector} coordinates relative to the {@link Plane}
   */
  mouseToPlaneCoords(e = new O()) {
    const t = {
      x: 2 * (e.x / this.renderer.pixelRatioBoundingRect.width) - 1,
      y: 2 * (1 - e.y / this.renderer.pixelRatioBoundingRect.height) - 1
    }, s = this.camera.position.clone(), r = new f(t.x, t.y, -0.5);
    r.unproject(this.camera), r.sub(s).normalize();
    const i = new f(0, 0, 1);
    i.applyQuat(this.quaternion).normalize();
    const n = new f(0, 0, 0), o = i.dot(r);
    if (Math.abs(o) >= 1e-4) {
      const a = this.modelMatrix.getInverse().premultiply(this.camera.viewMatrix), h = this.worldTransformOrigin.clone().add(this.worldPosition), u = new f(
        this.worldPosition.x - h.x,
        this.worldPosition.y - h.y,
        this.worldPosition.z - h.z
      );
      u.applyQuat(this.quaternion), h.add(u);
      const c = i.dot(h.clone().sub(s)) / o;
      n.copy(s.add(r.multiplyScalar(c))), n.applyMat4(a);
    } else
      n.set(1 / 0, 1 / 0, 1 / 0);
    return new O(n.x, n.y);
  }
}
class qt {
  /**
   * Scene constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Scene}
   */
  constructor({ renderer: e }) {
    e = e && e.renderer || e, U(e, "Scene"), this.renderer = e, this.computePassEntries = [], this.renderPassEntries = {
      /** Array of {@link RenderPassEntry} that will handle {@link PingPongPlane}. Each {@link PingPongPlane} will be added as a distinct {@link RenderPassEntry} here */
      pingPong: [],
      /** Array of {@link RenderPassEntry} that will render to a specific {@link RenderTarget}. Each {@link RenderTarget} will be added as a distinct {@link RenderPassEntry} here */
      renderTarget: [],
      /** Array of {@link RenderPassEntry} that will render directly to the screen. Our first entry will contain all the Meshes that do not have any {@link RenderTarget} assigned. Following entries will be created for every global {@link ShaderPass} */
      screen: [
        // add our basic scene entry
        {
          renderPass: this.renderer.renderPass,
          renderTexture: null,
          onBeforeRenderPass: null,
          onAfterRenderPass: null,
          element: null,
          // explicitly set to null
          stack: {
            unProjected: {
              opaque: [],
              transparent: []
            },
            projected: {
              opaque: [],
              transparent: []
            }
          }
        }
      ]
    };
  }
  /**
   * Get the number of meshes a {@link RenderPassEntry | render pass entry} should draw.
   * @param renderPassEntry - The {@link RenderPassEntry | render pass entry} to test
   */
  getRenderPassEntryLength(e) {
    return e ? e.element ? 1 : e.stack.unProjected.opaque.length + e.stack.unProjected.transparent.length + e.stack.projected.opaque.length + e.stack.projected.transparent.length : 0;
  }
  /**
   * Add a {@link ComputePass} to our scene {@link computePassEntries} array
   * @param computePass - {@link ComputePass} to add
   */
  addComputePass(e) {
    this.computePassEntries.push(e), this.computePassEntries.sort((t, s) => t.renderOrder !== s.renderOrder ? t.renderOrder - s.renderOrder : t.index - s.index);
  }
  /**
   * Remove a {@link ComputePass} from our scene {@link computePassEntries} array
   * @param computePass - {@link ComputePass} to remove
   */
  removeComputePass(e) {
    this.computePassEntries = this.computePassEntries.filter((t) => t.uuid !== e.uuid);
  }
  /**
   * Add a {@link RenderTarget} to our scene {@link renderPassEntries} renderTarget array.
   * Every Meshes later added to this {@link RenderTarget} will be rendered to the {@link RenderTarget#renderTexture | RenderTarget RenderTexture} using the {@link RenderTarget#renderPass.descriptor | RenderTarget RenderPass descriptor}
   * @param renderTarget - {@link RenderTarget} to add
   */
  addRenderTarget(e) {
    this.renderPassEntries.renderTarget.find((t) => t.renderPass.uuid === e.renderPass.uuid) || this.renderPassEntries.renderTarget.push({
      renderPass: e.renderPass,
      renderTexture: e.renderTexture,
      onBeforeRenderPass: null,
      onAfterRenderPass: null,
      element: null,
      // explicitly set to null
      stack: {
        unProjected: {
          opaque: [],
          transparent: []
        },
        projected: {
          opaque: [],
          transparent: []
        }
      }
    });
  }
  /**
   * Remove a {@link RenderTarget} from our scene {@link renderPassEntries} renderTarget array.
   * @param renderTarget - {@link RenderTarget} to add
   */
  removeRenderTarget(e) {
    this.renderPassEntries.renderTarget = this.renderPassEntries.renderTarget.filter(
      (t) => t.renderPass.uuid !== e.renderPass.uuid
    );
  }
  /**
   * Get the correct {@link renderPassEntries | render pass entry} (either {@link renderPassEntries} renderTarget or {@link renderPassEntries} screen) {@link Stack} onto which this Mesh should be added, depending on whether it's projected or not
   * @param mesh - Mesh to check
   * @returns - the corresponding render pass entry {@link Stack}
   */
  getMeshProjectionStack(e) {
    const t = e.renderTarget ? this.renderPassEntries.renderTarget.find(
      (r) => r.renderPass.uuid === e.renderTarget.renderPass.uuid
    ) : this.renderPassEntries.screen[0], { stack: s } = t;
    return e.material.options.rendering.useProjection ? s.projected : s.unProjected;
  }
  /**
   * Add a Mesh to the correct {@link renderPassEntries | render pass entry} {@link Stack} array.
   * Meshes are then ordered by their {@link core/meshes/mixins/MeshBaseMixin.MeshBaseClass#index | indexes (order of creation]}, position along the Z axis in case they are transparent and then {@link core/meshes/mixins/MeshBaseMixin.MeshBaseClass#renderOrder | renderOrder}
   * @param mesh - Mesh to add
   */
  addMesh(e) {
    const t = this.getMeshProjectionStack(e), s = e.transparent ? [...t.transparent] : [...t.opaque];
    let r = -1;
    for (let i = s.length - 1; i >= 0; i--)
      if (s[i].material.pipelineEntry.index === e.material.pipelineEntry.index) {
        r = i + 1;
        break;
      }
    r = Math.max(0, r), s.splice(r, 0, e), s.sort((i, n) => i.index - n.index), (e instanceof ft || e instanceof mt) && e.transparent && s.sort(
      (i, n) => n.documentPosition.z - i.documentPosition.z
    ), s.sort((i, n) => i.renderOrder - n.renderOrder), e.transparent ? t.transparent = s : t.opaque = s;
  }
  /**
   * Remove a Mesh from our {@link Scene}
   * @param mesh - Mesh to remove
   */
  removeMesh(e) {
    const t = this.getMeshProjectionStack(e);
    e.transparent ? t.transparent = t.transparent.filter((s) => s.uuid !== e.uuid) : t.opaque = t.opaque.filter((s) => s.uuid !== e.uuid);
  }
  /**
   * Add a {@link ShaderPass} to our scene {@link renderPassEntries} screen array.
   * Before rendering the {@link ShaderPass}, we will copy the correct input texture into its {@link ShaderPass#renderTexture | renderTexture}
   * This also handles the {@link renderPassEntries} screen array entries order: We will first draw selective passes, then our main screen pass and finally global post processing passes.
   * @see {@link https://codesandbox.io/p/sandbox/webgpu-render-to-2-textures-without-texture-copy-c4sx4s?file=%2Fsrc%2Findex.js%3A10%2C4 | minimal code example}
   * @param shaderPass - {@link ShaderPass} to add
   */
  addShaderPass(e) {
    const t = e.renderTarget ? null : (i, n) => {
      e.renderTexture && i.copyTextureToTexture(
        {
          texture: n
        },
        {
          texture: e.renderTexture.texture
        },
        [e.renderTexture.size.width, e.renderTexture.size.height]
      ), this.renderer.postProcessingPass.setLoadOp("clear");
    }, s = e.renderTarget ? (i, n) => {
      e.renderTarget && e.renderTarget.renderTexture && i.copyTextureToTexture(
        {
          texture: n
        },
        {
          texture: e.renderTarget.renderTexture.texture
        },
        [e.renderTarget.renderTexture.size.width, e.renderTarget.renderTexture.size.height]
      );
    } : null, r = {
      renderPass: this.renderer.postProcessingPass,
      // render directly to screen
      renderTexture: null,
      onBeforeRenderPass: t,
      onAfterRenderPass: s,
      element: e,
      stack: null
      // explicitly set to null
    };
    this.renderPassEntries.screen.push(r), this.renderPassEntries.screen.sort((i, n) => {
      const o = i.element && !i.element.renderTarget, a = i.element ? i.element.renderOrder : 0, h = i.element ? i.element.index : 0, u = n.element && !n.element.renderTarget, c = n.element ? n.element.renderOrder : 0, l = n.element ? n.element.index : 0;
      return o && !u ? 1 : !o && u ? -1 : a !== c ? a - c : h - l;
    });
  }
  /**
   * Remove a {@link ShaderPass} from our scene {@link renderPassEntries} screen array
   * @param shaderPass - {@link ShaderPass} to remove
   */
  removeShaderPass(e) {
    this.renderPassEntries.screen = this.renderPassEntries.screen.filter(
      (t) => !t.element || t.element.uuid !== e.uuid
    );
  }
  /**
   * Add a {@link PingPongPlane} to our scene {@link renderPassEntries} pingPong array.
   * After rendering the {@link PingPongPlane}, we will copy the context current texture into its {@link PingPongPlane#renderTexture | renderTexture} so we'll be able to use it as an input for the next pass
   * @see {@link https://codesandbox.io/p/sandbox/webgpu-render-ping-pong-to-texture-use-in-quad-gwjx9p | minimal code example}
   * @param pingPongPlane
   */
  addPingPongPlane(e) {
    this.renderPassEntries.pingPong.push({
      renderPass: e.renderTarget.renderPass,
      renderTexture: e.renderTarget.renderTexture,
      onBeforeRenderPass: null,
      onAfterRenderPass: (t, s) => {
        t.copyTextureToTexture(
          {
            texture: s
          },
          {
            texture: e.renderTexture.texture
          },
          [e.renderTexture.size.width, e.renderTexture.size.height]
        );
      },
      element: e,
      stack: null
      // explicitly set to null
    }), this.renderPassEntries.pingPong.sort((t, s) => t.element.renderOrder - s.element.renderOrder);
  }
  /**
   * Remove a {@link PingPongPlane} from our scene {@link renderPassEntries} pingPong array.
   * @param pingPongPlane - {@link PingPongPlane} to remove
   */
  removePingPongPlane(e) {
    this.renderPassEntries.pingPong = this.renderPassEntries.pingPong.filter(
      (t) => t.element.uuid !== e.uuid
    );
  }
  /**
   * Get any rendered object or {@link RenderTarget} {@link RenderPassEntry}. Useful to override a {@link RenderPassEntry#onBeforeRenderPass | RenderPassEntry onBeforeRenderPass} or {@link RenderPassEntry#onAfterRenderPass | RenderPassEntry onAfterRenderPass} default behavior.
   * @param object - The object from which we want to get the parentMesh {@link RenderPassEntry}
   * @returns - the {@link RenderPassEntry} if found
   */
  getObjectRenderPassEntry(e) {
    if (e instanceof pt)
      return this.renderPassEntries.renderTarget.find((t) => t.renderPass.uuid === e.renderPass.uuid);
    if (e instanceof jt)
      return this.renderPassEntries.pingPong.find((t) => t.element.uuid === e.uuid);
    if (e instanceof Vt)
      return this.renderPassEntries.screen.find((t) => {
        var s;
        return ((s = t.element) == null ? void 0 : s.uuid) === e.uuid;
      });
    {
      const t = e.renderTarget ? "renderTarget" : "screen";
      return this.renderPassEntries[t].find((s) => [
        ...s.stack.unProjected.opaque,
        ...s.stack.unProjected.transparent,
        ...s.stack.projected.opaque,
        ...s.stack.projected.transparent
      ].some((r) => r.uuid === e.uuid));
    }
  }
  /**
   * Here we render a {@link RenderPassEntry}:
   * - Set its {@link RenderPass#descriptor | renderPass descriptor} view or resolveTarget and get it at as swap chain texture
   * - Execute {@link RenderPassEntry#onBeforeRenderPass | onBeforeRenderPass} callback if specified
   * - Begin the {@link GPURenderPassEncoder | GPU render pass encoder} using our {@link RenderPass#descriptor | renderPass descriptor}
   * - Render the single element if specified or the render pass entry {@link Stack}: draw unprojected opaque / transparent meshes first, then set the {@link CameraRenderer#cameraBindGroup | camera bind group} and draw projected opaque / transparent meshes
   * - End the {@link GPURenderPassEncoder | GPU render pass encoder}
   * - Execute {@link RenderPassEntry#onAfterRenderPass | onAfterRenderPass} callback if specified
   * - Reset {@link core/pipelines/PipelineManager.PipelineManager#currentPipelineIndex | pipeline manager current pipeline}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   * @param renderPassEntry - {@link RenderPassEntry} to render
   */
  renderSinglePassEntry(e, t) {
    var i;
    const s = this.renderer.setRenderPassCurrentTexture(
      t.renderPass,
      (i = t.renderTexture) == null ? void 0 : i.texture
    );
    t.onBeforeRenderPass && t.onBeforeRenderPass(e, s);
    const r = e.beginRenderPass(t.renderPass.descriptor);
    t.element ? t.element.render(r) : t.stack && (t.stack.unProjected.opaque.forEach((n) => n.render(r)), t.stack.unProjected.transparent.forEach((n) => n.render(r)), (t.stack.projected.opaque.length || t.stack.projected.transparent.length) && (this.renderer.cameraBindGroup && r.setBindGroup(
      this.renderer.cameraBindGroup.index,
      this.renderer.cameraBindGroup.bindGroup
    ), t.stack.projected.opaque.forEach((n) => n.render(r)), t.stack.projected.transparent.forEach((n) => n.render(r)))), r.end(), t.onAfterRenderPass && t.onAfterRenderPass(e, s), this.renderer.pipelineManager.resetCurrentPipeline();
  }
  /**
   * Render our {@link Scene}
   * - Render {@link computePassEntries} first
   * - Then our {@link renderPassEntries}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   */
  render(e) {
    this.computePassEntries.forEach((t) => {
      const s = e.beginComputePass();
      t.render(s), s.end(), t.copyBufferToResult(e), this.renderer.pipelineManager.resetCurrentPipeline();
    });
    for (const t in this.renderPassEntries) {
      let s = 0;
      this.renderPassEntries[t].forEach((r, i) => {
        this.getRenderPassEntryLength(r) && (r.renderPass.setLoadOp(
          t === "screen" && s !== 0 ? "load" : "clear"
        ), s++, this.renderSinglePassEntry(e, r));
      });
    }
  }
}
var he;
class ge {
  /**
   * TaskQueueManager constructor
   */
  constructor() {
    k(this, he, void 0);
    z(this, he, 0), this.queue = [];
  }
  /**
   * Add a {@link TaskQueueItem | task queue item} to the queue
   * @param callback - callback to add to the {@link TaskQueueItem | task queue item}
   * @param parameters - {@link TaskQueueItemParams | parameters} of the {@link TaskQueueItem | task queue item} to add
   * @returns - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item}, useful to later remove the task if needed
   */
  add(e = (r) => {
  }, { order: t = this.queue.length, once: s = !1 } = {}) {
    const r = {
      callback: e,
      order: t,
      once: s,
      id: P(this, he)
    };
    return ke(this, he)._++, this.queue.push(r), this.queue.sort((i, n) => i.order - n.order), r.id;
  }
  /**
   * Remove a {@link TaskQueueItem | task queue item} from the queue
   * @param taskId - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item} to remove
   */
  remove(e = 0) {
    this.queue = this.queue.filter((t) => t.id !== e);
  }
  /**
   * Execute the {@link TasksQueueManager#queue | tasks queue array}
   */
  execute(e) {
    this.queue.forEach((t) => {
      t.callback(e), t.once && this.remove(t.id);
    });
  }
}
he = new WeakMap();
class xt {
  /**
   * GPURenderer constructor
   * @param parameters - {@link GPURendererParams | parameters} used to create this {@link GPURenderer}
   */
  constructor({
    deviceManager: e,
    container: t,
    pixelRatio: s = 1,
    preferredFormat: r,
    alphaMode: i = "premultiplied",
    multisampled: n = !0,
    renderPass: o
  }) {
    var h;
    this._onBeforeRenderCallback = (u) => {
    }, this._onAfterRenderCallback = (u) => {
    }, this._onAfterResizeCallback = () => {
    }, this.type = "GPURenderer", this.uuid = Y(), this.deviceManager = e, this.deviceManager.addRenderer(this), o = { depth: !0, sampleCount: 4, clearValue: [0, 0, 0, 0], ...o }, r = r ?? ((h = this.deviceManager.gpu) == null ? void 0 : h.getPreferredCanvasFormat()), this.options = {
      deviceManager: e,
      container: t,
      pixelRatio: s,
      preferredFormat: r,
      alphaMode: i,
      multisampled: n,
      renderPass: o
    }, this.pixelRatio = s ?? window.devicePixelRatio ?? 1, this.alphaMode = i, this.setTasksQueues(), this.setRendererObjects();
    const a = t instanceof HTMLCanvasElement;
    this.canvas = a ? t : document.createElement("canvas"), this.domElement = new ct({
      element: t,
      priority: 5,
      // renderer callback need to be called first
      onSizeChanged: (u) => this.resize(u)
    }), a || this.domElement.element.appendChild(this.canvas), this.deviceManager.device && this.setContext();
  }
  /**
   * Set {@link canvas} size
   * @param boundingRect - new {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   */
  setSize(e) {
    const t = window.devicePixelRatio ?? 1, s = this.pixelRatio / t;
    this.canvas.style.width = Math.floor(e.width) + "px", this.canvas.style.height = Math.floor(e.height) + "px";
    const r = {
      width: Math.floor(e.width * s),
      height: Math.floor(e.height * s)
    };
    this.canvas.width = this.device ? Math.min(r.width, this.device.limits.maxTextureDimension2D) : r.width, this.canvas.height = this.device ? Math.min(r.height, this.device.limits.maxTextureDimension2D) : r.height;
  }
  /**
   * Resize our {@link GPURenderer}
   * @param boundingRect - new {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   */
  resize(e = null) {
    !this.domElement && !e || (e || (e = this.domElement.element.getBoundingClientRect()), this.setSize(e), this.onResize(), this._onAfterResizeCallback && this._onAfterResizeCallback());
  }
  /**
   * Resize all tracked objects
   */
  onResize() {
    var e, t;
    (e = this.renderPass) == null || e.resize(), (t = this.postProcessingPass) == null || t.resize(), this.renderTargets.forEach((s) => s.resize(this.pixelRatioBoundingRect)), this.renderTextures.forEach((s) => s.resize()), this.computePasses.forEach((s) => s.resize()), this.pingPongPlanes.forEach((s) => s.resize(this.boundingRect)), this.shaderPasses.forEach((s) => s.resize(this.boundingRect)), this.meshes.forEach((s) => {
      "domElement" in s ? this.onBeforeCommandEncoderCreation.add(
        () => {
          s.domElement.isResizing || s.domElement.setSize();
        },
        { once: !0 }
      ) : s.resize(this.boundingRect);
    });
  }
  /**
   * Get our {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   */
  get boundingRect() {
    var e;
    if (this.domElement.boundingRect)
      return this.domElement.boundingRect;
    {
      const t = (e = this.domElement.element) == null ? void 0 : e.getBoundingClientRect();
      return {
        top: t.top,
        right: t.right,
        bottom: t.bottom,
        left: t.left,
        width: t.width,
        height: t.height,
        x: t.x,
        y: t.y
      };
    }
  }
  /**
   * Get our {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle} accounting for current {@link pixelRatio | pixel ratio}
   */
  get pixelRatioBoundingRect() {
    const e = window.devicePixelRatio ?? 1, t = this.pixelRatio / e;
    return Object.keys(this.boundingRect).reduce(
      (s, r) => ({ ...s, [r]: this.boundingRect[r] * t }),
      {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }
    );
  }
  /* USEFUL DEVICE MANAGER OBJECTS */
  /**
   * Get our {@link GPUDeviceManager#device | device}
   * @readonly
   */
  get device() {
    return this.deviceManager.device;
  }
  /**
   * Get whether our {@link GPUDeviceManager} is ready (i.e. its {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device} are set) its {@link context} is set and its size is set
   * @readonly
   */
  get ready() {
    return this.deviceManager.ready && !!this.context && !!this.canvas.style.width;
  }
  /**
   * Get our {@link GPUDeviceManager#production | GPUDeviceManager production flag}
   * @readonly
   */
  get production() {
    return this.deviceManager.production;
  }
  /**
   * Get all the created {@link GPUDeviceManager#samplers | samplers}
   * @readonly
   */
  get samplers() {
    return this.deviceManager.samplers;
  }
  /**
   * Get all the created {@link GPUDeviceManager#buffers | GPU buffers}
   * @readonly
   */
  get buffers() {
    return this.deviceManager.buffers;
  }
  /**
   * Get the {@link GPUDeviceManager#pipelineManager | pipeline manager}
   * @readonly
   */
  get pipelineManager() {
    return this.deviceManager.pipelineManager;
  }
  /**
   * Get all the rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes) created by the {@link GPUDeviceManager}
   * @readonly
   */
  get deviceRenderedObjects() {
    return this.deviceManager.deviceRenderedObjects;
  }
  /**
   * Configure our {@link context} with the given options
   */
  configureContext() {
    this.context.configure({
      device: this.device,
      format: this.options.preferredFormat,
      alphaMode: this.alphaMode,
      // needed so we can copy textures for post processing usage
      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST
      //viewFormats: []
    });
  }
  /**
   * Set our {@link context} if possible and set {@link renderPass | main render pass} and {@link scene}
   */
  setContext() {
    this.context = this.canvas.getContext("webgpu"), this.device && (this.configureContext(), this.setMainRenderPasses(), this.setScene());
  }
  /**
   * Called when the {@link GPUDeviceManager#device | device} is lost.
   * Force all our scene objects to lose context.
   */
  loseContext() {
    this.renderedObjects.forEach((e) => e.loseContext());
  }
  /**
   * Called when the {@link GPUDeviceManager#device | device} should be restored.
   * Configure the context again, resize the {@link RenderTarget | render targets} and {@link RenderTexture | render textures}, restore our {@link renderedObjects | rendered objects} context.
   * @async
   */
  restoreContext() {
    var e, t;
    this.configureContext(), this.renderTextures.forEach((s) => {
      s.forceResize({
        width: Math.floor(this.pixelRatioBoundingRect.width),
        height: Math.floor(this.pixelRatioBoundingRect.height),
        depth: 1
      });
    }), (e = this.renderPass) == null || e.resize(), (t = this.postProcessingPass) == null || t.resize(), this.renderTargets.forEach((s) => s.resize(this.pixelRatioBoundingRect)), this.renderedObjects.forEach((s) => s.restoreContext());
  }
  /* PIPELINES, SCENE & MAIN RENDER PASS */
  /**
   * Set our {@link renderPass | main render pass} that will be used to render the result of our draw commands back to the screen
   */
  setMainRenderPasses() {
    this.renderPass = new Ee(this, {
      label: "Main render pass",
      targetFormat: this.options.preferredFormat,
      ...this.options.renderPass
    }), this.postProcessingPass = new Ee(this, {
      label: "Post processing render pass",
      targetFormat: this.options.preferredFormat,
      depth: !1,
      sampleCount: this.options.renderPass.sampleCount
      // TODO?
    });
  }
  /**
   * Set our {@link scene}
   */
  setScene() {
    this.scene = new qt({ renderer: this });
  }
  /* BUFFERS & BINDINGS */
  /**
   * Create a {@link GPUBuffer}
   * @param bufferDescriptor - {@link GPUBufferDescriptor | GPU buffer descriptor}
   * @returns - newly created {@link GPUBuffer}
   */
  createBuffer(e) {
    var s;
    const t = (s = this.device) == null ? void 0 : s.createBuffer(e);
    return this.deviceManager.addBuffer(t), t;
  }
  /**
   * Remove a {@link GPUBuffer} from our {@link GPUDeviceManager#buffers | GPU buffers array}
   * @param buffer - {@link GPUBuffer} to remove
   * @param [originalLabel] - original {@link GPUBuffer} label in case the buffer has been swapped and its label has changed
   */
  removeBuffer(e, t) {
    this.deviceManager.removeBuffer(e, t);
  }
  /**
   * Write to a {@link GPUBuffer}
   * @param buffer - {@link GPUBuffer} to write to
   * @param bufferOffset - {@link GPUSize64 | buffer offset}
   * @param data - {@link BufferSource | data} to write
   */
  queueWriteBuffer(e, t, s) {
    var r;
    (r = this.device) == null || r.queue.writeBuffer(e, t, s);
  }
  /**
   * Copy a source {@link GPUBuffer} into a destination {@link GPUBuffer}
   * @param parameters - parameters used to realize the copy
   * @param parameters.srcBuffer - source {@link GPUBuffer}
   * @param [parameters.dstBuffer] - destination {@link GPUBuffer}. Will create a new one if none provided.
   * @param [parameters.commandEncoder] - {@link GPUCommandEncoder} to use for the copy. Will create a new one and submit the command buffer if none provided.
   * @returns - destination {@link GPUBuffer} after copy
   */
  copyBufferToBuffer({
    srcBuffer: e,
    dstBuffer: t,
    commandEncoder: s
  }) {
    var i, n;
    if (!e)
      return _(`${this.type}: cannot copy to buffer because the source buffer has not been provided`), null;
    if (t || (t = this.createBuffer({
      label: this.type + ": destination copy buffer from: " + e.label,
      size: e.size,
      usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
    })), e.mapState !== "unmapped") {
      _(`${this.type}: Cannot copy from ${e} because it is currently mapped`);
      return;
    }
    if (t.mapState !== "unmapped") {
      _(`${this.type}: Cannot copy from ${t} because it is currently mapped`);
      return;
    }
    const r = !!s;
    if (r || (s = (i = this.device) == null ? void 0 : i.createCommandEncoder({ label: "Copy buffer command encoder" })), s.copyBufferToBuffer(e, 0, t, 0, t.size), !r) {
      const o = s.finish();
      (n = this.device) == null || n.queue.submit([o]);
    }
    return t;
  }
  /* BIND GROUPS & LAYOUTS */
  /**
   * Get all created {@link AllowedBindGroups | bind group} tracked by our {@link GPUDeviceManager}
   * @readonly
   */
  get bindGroups() {
    return this.deviceManager.bindGroups;
  }
  /**
   * Add a {@link AllowedBindGroups | bind group} to our {@link GPUDeviceManager#bindGroups | bind groups array}
   * @param bindGroup - {@link AllowedBindGroups | bind group} to add
   */
  addBindGroup(e) {
    this.deviceManager.addBindGroup(e);
  }
  /**
   * Remove a {@link AllowedBindGroups | bind group} from our {@link GPUDeviceManager#bindGroups | bind groups array}
   * @param bindGroup - {@link AllowedBindGroups | bind group} to remove
   */
  removeBindGroup(e) {
    this.deviceManager.removeBindGroup(e);
  }
  /**
   * Create a {@link GPUBindGroupLayout}
   * @param bindGroupLayoutDescriptor - {@link GPUBindGroupLayoutDescriptor | GPU bind group layout descriptor}
   * @returns - newly created {@link GPUBindGroupLayout}
   */
  createBindGroupLayout(e) {
    var t;
    return (t = this.device) == null ? void 0 : t.createBindGroupLayout(e);
  }
  /**
   * Create a {@link GPUBindGroup}
   * @param bindGroupDescriptor - {@link GPUBindGroupDescriptor | GPU bind group descriptor}
   * @returns - newly created {@link GPUBindGroup}
   */
  createBindGroup(e) {
    var t;
    return (t = this.device) == null ? void 0 : t.createBindGroup(e);
  }
  /* SHADERS & PIPELINES */
  /**
   * Create a {@link GPUShaderModule}
   * @param shaderModuleDescriptor - {@link shaderModuleDescriptor | shader module descriptor}
   * @returns - newly created {@link GPUShaderModule}
   */
  createShaderModule(e) {
    var t;
    return (t = this.device) == null ? void 0 : t.createShaderModule(e);
  }
  /**
   * Create a {@link GPUPipelineLayout}
   * @param pipelineLayoutDescriptor - {@link GPUPipelineLayoutDescriptor | GPU pipeline layout descriptor}
   * @returns - newly created {@link GPUPipelineLayout}
   */
  createPipelineLayout(e) {
    var t;
    return (t = this.device) == null ? void 0 : t.createPipelineLayout(e);
  }
  /**
   * Create a {@link GPURenderPipeline}
   * @param pipelineDescriptor - {@link GPURenderPipelineDescriptor | GPU render pipeline descriptor}
   * @returns - newly created {@link GPURenderPipeline}
   */
  createRenderPipeline(e) {
    var t;
    return (t = this.device) == null ? void 0 : t.createRenderPipeline(e);
  }
  /**
   * Asynchronously create a {@link GPURenderPipeline}
   * @async
   * @param pipelineDescriptor - {@link GPURenderPipelineDescriptor | GPU render pipeline descriptor}
   * @returns - newly created {@link GPURenderPipeline}
   */
  async createRenderPipelineAsync(e) {
    var t;
    return await ((t = this.device) == null ? void 0 : t.createRenderPipelineAsync(e));
  }
  /**
   * Create a {@link GPUComputePipeline}
   * @param pipelineDescriptor - {@link GPUComputePipelineDescriptor | GPU compute pipeline descriptor}
   * @returns - newly created {@link GPUComputePipeline}
   */
  createComputePipeline(e) {
    var t;
    return (t = this.device) == null ? void 0 : t.createComputePipeline(e);
  }
  /**
   * Asynchronously create a {@link GPUComputePipeline}
   * @async
   * @param pipelineDescriptor - {@link GPUComputePipelineDescriptor | GPU compute pipeline descriptor}
   * @returns - newly created {@link GPUComputePipeline}
   */
  async createComputePipelineAsync(e) {
    var t;
    return await ((t = this.device) == null ? void 0 : t.createComputePipelineAsync(e));
  }
  /* TEXTURES */
  /**
   * Get all created {@link Texture} tracked by our {@link GPUDeviceManager}
   * @readonly
   */
  get textures() {
    return this.deviceManager.textures;
  }
  /**
   * Add a {@link Texture} to our {@link GPUDeviceManager#textures | textures array}
   * @param texture - {@link Texture} to add
   */
  addTexture(e) {
    this.deviceManager.addTexture(e);
  }
  /**
   * Remove a {@link Texture} from our {@link GPUDeviceManager#textures | textures array}
   * @param texture - {@link Texture} to remove
   */
  removeTexture(e) {
    this.deviceManager.removeTexture(e);
  }
  /**
   * Add a {@link RenderTexture} to our {@link renderTextures} array
   * @param texture - {@link RenderTexture} to add
   */
  addRenderTexture(e) {
    this.renderTextures.push(e);
  }
  /**
   * Remove a {@link RenderTexture} from our {@link renderTextures} array
   * @param texture - {@link RenderTexture} to remove
   */
  removeRenderTexture(e) {
    this.renderTextures = this.renderTextures.filter((t) => t.uuid !== e.uuid);
  }
  /**
   * Create a {@link GPUTexture}
   * @param textureDescriptor - {@link GPUTextureDescriptor | GPU texture descriptor}
   * @returns - newly created {@link GPUTexture}
   */
  createTexture(e) {
    var t;
    return (t = this.device) == null ? void 0 : t.createTexture(e);
  }
  /**
   * Upload a {@link Texture#texture | texture} to the GPU
   * @param texture - {@link Texture} class object with the {@link Texture#texture | texture} to upload
   */
  uploadTexture(e) {
    this.deviceManager.uploadTexture(e);
  }
  /**
   * Import a {@link GPUExternalTexture}
   * @param video - {@link HTMLVideoElement} source
   * @returns - {@link GPUExternalTexture}
   */
  importExternalTexture(e) {
    var t;
    return (t = this.device) == null ? void 0 : t.importExternalTexture({ source: e });
  }
  /**
   * Check if a {@link Sampler} has already been created with the same {@link Sampler#options | parameters}.
   * Use it if found, else create a new one and add it to the {@link GPUDeviceManager#samplers | samplers array}.
   * @param sampler - {@link Sampler} to create
   * @returns - the {@link GPUSampler}
   */
  createSampler(e) {
    var s;
    const t = this.samplers.find((r) => JSON.stringify(r.options) === JSON.stringify(e.options) && r.sampler);
    if (t)
      return t.sampler;
    {
      const { type: r, ...i } = e.options, n = (s = this.device) == null ? void 0 : s.createSampler({
        label: e.label,
        ...i
      });
      return this.deviceManager.addSampler(e), n;
    }
  }
  /**
   * Remove a {@link Sampler} from our {@link GPUDeviceManager#samplers | samplers array}
   * @param sampler - {@link Sampler} to remove
   */
  removeSampler(e) {
    this.deviceManager.removeSampler(e);
  }
  /* OBJECTS & TASKS */
  /**
   * Set different tasks queue managers to execute callbacks at different phases of our render call:
   * - {@link onBeforeCommandEncoderCreation}: callbacks executed before the creation of the command encoder
   * - {@link onBeforeRenderScene}: callbacks executed after the creation of the command encoder and before rendering the {@link Scene}
   * - {@link onAfterRenderScene}: callbacks executed after the creation of the command encoder and after rendering the {@link Scene}
   * - {@link onAfterCommandEncoderSubmission}: callbacks executed after the submission of the command encoder
   */
  setTasksQueues() {
    this.onBeforeCommandEncoderCreation = new ge(), this.onBeforeRenderScene = new ge(), this.onAfterRenderScene = new ge(), this.onAfterCommandEncoderSubmission = new ge();
  }
  /**
   * Set all objects arrays that we'll keep track of
   */
  setRendererObjects() {
    this.computePasses = [], this.pingPongPlanes = [], this.shaderPasses = [], this.renderTargets = [], this.meshes = [], this.renderTextures = [];
  }
  /**
   * Get all this {@link GPURenderer} rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes)
   * @readonly
   */
  get renderedObjects() {
    return [...this.computePasses, ...this.meshes, ...this.shaderPasses, ...this.pingPongPlanes];
  }
  /**
   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link ComputePass | compute passes}) using a given {@link AllowedBindGroups | bind group}.
   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.
   * @param bindGroup - {@link AllowedBindGroups | bind group} to check
   */
  getObjectsByBindGroup(e) {
    return this.deviceRenderedObjects.filter((t) => [
      ...t.material.bindGroups,
      ...t.material.inputsBindGroups,
      ...t.material.clonedBindGroups
    ].some((s) => s.uuid === e.uuid));
  }
  /**
   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link ComputePass | compute passes}) using a given {@link Texture} or {@link RenderTexture}.
   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.
   * @param texture - {@link Texture} or {@link RenderTexture} to check
   */
  getObjectsByTexture(e) {
    return this.deviceRenderedObjects.filter((t) => [...t.material.textures, ...t.material.renderTextures].some((s) => s.uuid === e.uuid));
  }
  /* EVENTS */
  /**
   * Assign a callback function to _onBeforeRenderCallback
   * @param callback - callback to run just before the {@link render} method will be executed
   * @returns - our {@link GPURenderer}
   */
  onBeforeRender(e) {
    return e && (this._onBeforeRenderCallback = e), this;
  }
  /**
   * Assign a callback function to _onAfterRenderCallback
   * @param callback - callback to run just after the {@link render} method has been executed
   * @returns - our {@link GPURenderer}
   */
  onAfterRender(e) {
    return e && (this._onAfterRenderCallback = e), this;
  }
  /**
   * Assign a callback function to _onAfterResizeCallback
   * @param callback - callback to run just after the {@link GPURenderer} has been resized
   * @returns - our {@link GPURenderer}
   */
  onAfterResize(e) {
    return e && (this._onAfterResizeCallback = e), this;
  }
  /* RENDER */
  /**
   * Set the current {@link RenderPass#descriptor | render pass descriptor} texture {@link GPURenderPassColorAttachment#view | view} and {@link GPURenderPassColorAttachment#resolveTarget | resolveTarget} (depending on whether we're using multisampling)
   * @param renderPass - current {@link RenderPass}
   * @param renderTexture - {@link GPUTexture} to use, or the {@link context} {@link GPUTexture | current texture} if null
   * @returns - the {@link GPUTexture | current render texture}
   */
  setRenderPassCurrentTexture(e, t = null) {
    return t || (t = this.context.getCurrentTexture(), t.label = `${this.type} context current texture`), e.options.sampleCount > 1 ? (e.descriptor.colorAttachments[0].view = e.viewTexture.texture.createView({
      label: e.viewTexture.options.label + " view"
    }), e.descriptor.colorAttachments[0].resolveTarget = t.createView({
      label: t.label + " resolve target view"
    })) : e.descriptor.colorAttachments[0].view = t.createView({
      label: t.label + " view"
    }), t;
  }
  /**
   * Render a single {@link ComputePass}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   * @param computePass - {@link ComputePass}
   */
  renderSingleComputePass(e, t) {
    const s = e.beginComputePass();
    t.render(s), s.end(), t.copyBufferToResult(e);
  }
  /**
   * Render a single {@link RenderedMesh | Mesh}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   * @param mesh - {@link RenderedMesh | Mesh} to render
   */
  renderSingleMesh(e, t) {
    const s = e.beginRenderPass(this.renderPass.descriptor);
    t.render(s), s.end();
  }
  /**
   * Render an array of objects (either {@link RenderedMesh | Meshes} or {@link ComputePass}) once. This method won't call any of the renderer render hooks like {@link onBeforeRender}, {@link onAfterRender}
   * @param objects - Array of {@link RenderedMesh | Meshes} or {@link ComputePass} to render
   */
  renderOnce(e) {
    var r, i;
    const t = (r = this.device) == null ? void 0 : r.createCommandEncoder({
      label: "Renderer once command encoder"
    });
    this.pipelineManager.resetCurrentPipeline(), e.forEach((n) => {
      n instanceof St ? this.renderSingleComputePass(t, n) : this.renderSingleMesh(t, n);
    });
    const s = t.finish();
    (i = this.device) == null || i.queue.submit([s]), this.pipelineManager.resetCurrentPipeline();
  }
  /**
   * Force to clear a {@link GPURenderer} content to its {@link RenderPass#options.clearValue | clear value} by rendering and empty pass.
   * @param commandEncoder
   */
  forceClear(e) {
    var r, i;
    const t = !!e;
    if (t || (e = (r = this.device) == null ? void 0 : r.createCommandEncoder({ label: "Force clear command encoder" })), this.setRenderPassCurrentTexture(this.renderPass), e.beginRenderPass(this.renderPass.descriptor).end(), !t) {
      const n = e.finish();
      (i = this.device) == null || i.queue.submit([n]);
    }
  }
  /**
   * Called by the {@link GPUDeviceManager#render | GPUDeviceManager render method} before the {@link GPUCommandEncoder} has been created
   */
  onBeforeCommandEncoder() {
    this.ready && this.onBeforeCommandEncoderCreation.execute();
  }
  /**
   * Called by the {@link GPUDeviceManager#render | GPUDeviceManager render method} after the {@link GPUCommandEncoder} has been created.
   */
  onAfterCommandEncoder() {
    this.ready && this.onAfterCommandEncoderSubmission.execute();
  }
  /**
   * Called at each draw call to render our scene and its content
   * @param commandEncoder - current {@link GPUCommandEncoder}
   */
  render(e) {
    var t;
    this.ready && (this._onBeforeRenderCallback && this._onBeforeRenderCallback(e), this.onBeforeRenderScene.execute(e), (t = this.scene) == null || t.render(e), this._onAfterRenderCallback && this._onAfterRenderCallback(e), this.onAfterRenderScene.execute(e));
  }
  /**
   * Destroy our {@link GPURenderer} and everything that needs to be destroyed as well
   */
  destroy() {
    var e, t, s, r;
    (e = this.domElement) == null || e.destroy(), (t = this.renderPass) == null || t.destroy(), (s = this.postProcessingPass) == null || s.destroy(), this.renderTargets.forEach((i) => i.destroy()), this.renderedObjects.forEach((i) => i.remove()), this.renderTextures.forEach((i) => i.destroy()), (r = this.context) == null || r.unconfigure();
  }
}
class yt extends xt {
  /**
   * GPUCameraRenderer constructor
   * @param parameters - {@link GPUCameraRendererParams | parameters} used to create this {@link GPUCameraRenderer}
   */
  constructor({
    deviceManager: e,
    container: t,
    pixelRatio: s = 1,
    preferredFormat: r,
    alphaMode: i = "premultiplied",
    multisampled: n = !0,
    renderPass: o,
    camera: a = {}
  }) {
    super({
      deviceManager: e,
      container: t,
      pixelRatio: s,
      preferredFormat: r,
      alphaMode: i,
      multisampled: n,
      renderPass: o
    }), this.type = "GPUCameraRenderer", a = { fov: 50, near: 0.01, far: 50, ...a }, this.options = {
      ...this.options,
      camera: a
    }, this.setCamera(a), this.ready && !this.cameraBufferBinding && this.setCameraBufferBinding();
  }
  /**
   * {@link GPURenderer#setContext | Set the renderer context} then create the camera bindings
   */
  setContext() {
    super.setContext(), this.ready && this.camera && !this.cameraBufferBinding && this.setCameraBufferBinding();
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} is lost.
   * Reset all our samplers, force all our scene objects and camera bind group to lose context.
   */
  loseContext() {
    super.loseContext(), this.cameraBindGroup.loseContext();
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} should be restored.
   * Configure the context again, resize the {@link core/renderPasses/RenderTarget.RenderTarget | render targets} and {@link core/textures/RenderTexture.RenderTexture | render textures}, restore our {@link renderedObjects | rendered objects} context, re-write our {@link cameraBufferBinding | camera buffer binding}.
   * @async
   */
  async restoreContext() {
    return this.cameraBufferBinding.shouldUpdate = !0, super.restoreContext();
  }
  /**
   * Set the {@link camera}
   * @param cameraParameters - {@link CameraBasePerspectiveOptions | parameters} used to create the {@link camera}
   */
  setCamera(e) {
    const t = this.boundingRect ? this.boundingRect.width : 1, s = this.boundingRect ? this.boundingRect.height : 1;
    this.camera = new Bt({
      fov: e.fov,
      near: e.near,
      far: e.far,
      width: t,
      height: s,
      pixelRatio: this.pixelRatio,
      onMatricesChanged: () => {
        this.onCameraMatricesChanged();
      }
    });
  }
  /**
   * Update the {@link ProjectedMesh | projected meshes} sizes and positions when the {@link camera} {@link Camera#position | position} changes
   */
  onCameraMatricesChanged() {
    this.updateCameraBindings(), this.meshes.forEach((e) => {
      "modelViewMatrix" in e && e.shouldUpdateMatrixStack();
    });
  }
  /**
   * Set the {@link cameraBufferBinding | camera buffer binding} and {@link cameraBindGroup | camera bind group}
   */
  setCameraBufferBinding() {
    this.cameraBufferBinding = new le({
      label: "Camera",
      name: "camera",
      visibility: "vertex",
      struct: {
        model: {
          // camera model matrix
          name: "model",
          type: "mat4x4f",
          value: this.camera.modelMatrix,
          onBeforeUpdate: () => {
            this.cameraBufferBinding.inputs.model.value = this.camera.modelMatrix;
          }
        },
        view: {
          // camera view matrix
          name: "view",
          type: "mat4x4f",
          value: this.camera.viewMatrix,
          onBeforeUpdate: () => {
            this.cameraBufferBinding.inputs.view.value = this.camera.viewMatrix;
          }
        },
        projection: {
          // camera projection matrix
          name: "projection",
          type: "mat4x4f",
          value: this.camera.projectionMatrix,
          onBeforeUpdate: () => {
            this.cameraBufferBinding.inputs.projection.value = this.camera.projectionMatrix;
          }
        }
      }
    }), this.cameraBindGroup = new Oe(this, {
      label: "Camera Uniform bind group",
      bindings: [this.cameraBufferBinding]
    });
  }
  /**
   * Create the {@link cameraBindGroup | camera bind group} buffers
   */
  setCameraBindGroup() {
    this.cameraBindGroup && this.cameraBindGroup.shouldCreateBindGroup && (this.cameraBindGroup.setIndex(0), this.cameraBindGroup.createBindGroup());
  }
  /**
   * Tell our {@link cameraBufferBinding | camera buffer binding} that we should update its struct
   */
  updateCameraBindings() {
    var e, t, s;
    (e = this.cameraBufferBinding) == null || e.shouldUpdateBinding("model"), (t = this.cameraBufferBinding) == null || t.shouldUpdateBinding("view"), (s = this.cameraBufferBinding) == null || s.shouldUpdateBinding("projection");
  }
  /**
   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link core/computePasses/ComputePass.ComputePass | compute passes}) using a given {@link AllowedBindGroups | bind group}, including {@link cameraBindGroup | camera bind group}.
   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.
   * @param bindGroup - {@link AllowedBindGroups | bind group} to check
   */
  getObjectsByBindGroup(e) {
    return this.deviceRenderedObjects.filter((t) => [
      ...t.material.bindGroups,
      ...t.material.inputsBindGroups,
      ...t.material.clonedBindGroups,
      this.cameraBindGroup
    ].some((s) => s.uuid === e.uuid));
  }
  /**
   * Set our {@link camera} perspective matrix new parameters (fov, near plane and far plane)
   * @param parameters - {@link CameraBasePerspectiveOptions | parameters} to use for the perspective
   */
  setPerspective({ fov: e, near: t, far: s } = {}) {
    var r;
    (r = this.camera) == null || r.setPerspective({
      fov: e,
      near: t,
      far: s,
      width: this.boundingRect.width,
      height: this.boundingRect.height,
      pixelRatio: this.pixelRatio
    });
  }
  /**
   * Set our {@link camera} {@link Camera#position | position}
   * @param position - new {@link Camera#position | position}
   */
  setCameraPosition(e = new f(0, 0, 1)) {
    this.camera.position.copy(e);
  }
  /**
   * Call our {@link GPURenderer#onResize | GPURenderer onResize method} and resize our {@link camera} as well
   */
  onResize() {
    super.onResize(), this.setPerspective(), this.updateCameraBindings();
  }
  /* RENDER */
  /**
   * Update the camera model matrix, check if the {@link cameraBindGroup | camera bind group} should be created, create it if needed and then update it
   */
  updateCamera() {
    var e, t;
    (e = this.camera) == null || e.updateMatrixStack(), this.setCameraBindGroup(), (t = this.cameraBindGroup) == null || t.update();
  }
  /**
   * Render a single {@link RenderedMesh | mesh} (binds the {@link cameraBindGroup | camera bind group} if needed)
   * @param commandEncoder - current {@link GPUCommandEncoder}
   * @param mesh - {@link RenderedMesh | mesh} to render
   */
  renderSingleMesh(e, t) {
    const s = e.beginRenderPass(this.renderPass.descriptor);
    t.material.options.rendering.useProjection && s.setBindGroup(this.cameraBindGroup.index, this.cameraBindGroup.bindGroup), t.render(s), s.end();
  }
  /**
   * {@link updateCamera | Update the camera} and then call our {@link GPURenderer#render | GPURenderer render method}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   */
  render(e) {
    this.ready && (this.updateCamera(), super.render(e));
  }
  /**
   * Destroy our {@link GPUCameraRenderer}
   */
  destroy() {
    var e;
    (e = this.cameraBindGroup) == null || e.destroy(), super.destroy();
  }
}
class Wt {
  /**
   * GPUDeviceManager constructor
   * @param parameters - {@link GPUDeviceManagerParams | parameters} used to create this {@link GPUDeviceManager}
   */
  constructor({
    label: e,
    production: t = !1,
    onError: s = () => {
    },
    onDeviceLost: r = (i) => {
    }
  }) {
    this.index = 0, this.label = e ?? "GPUDeviceManager instance", this.production = t, this.ready = !1, this.onError = s, this.onDeviceLost = r, this.gpu = navigator.gpu, this.setPipelineManager(), this.setDeviceObjects();
  }
  /**
   * Set our {@link adapter} and {@link device} if possible
   */
  async setAdapterAndDevice() {
    await this.setAdapter(), await this.setDevice();
  }
  /**
   * Set up our {@link adapter} and {@link device} and all the already created {@link renderers} contexts
   */
  async init() {
    await this.setAdapterAndDevice(), this.device && this.renderers.forEach((e) => {
      e.context || e.setContext();
    });
  }
  /**
   * Set our {@link adapter} if possible.
   * The adapter represents a specific GPU. Some devices have multiple GPUs.
   * @async
   */
  async setAdapter() {
    var e, t;
    this.gpu || (this.onError(), j("GPURenderer: WebGPU is not supported on your browser/OS. No 'gpu' object in 'navigator'."));
    try {
      this.adapter = await ((e = this.gpu) == null ? void 0 : e.requestAdapter()), (t = this.adapter) == null || t.requestAdapterInfo().then((s) => {
        this.adapterInfos = s;
      });
    } catch {
      this.onError(), j("GPUDeviceManager: WebGPU is not supported on your browser/OS. 'requestAdapter' failed.");
    }
  }
  /**
   * Set our {@link device}
   * @async
   */
  async setDevice() {
    var e, t;
    try {
      this.device = await ((e = this.adapter) == null ? void 0 : e.requestDevice({
        label: this.label + " " + this.index
      })), this.device && (this.ready = !0, this.index++);
    } catch (s) {
      this.onError(), j(`${this.label}: WebGPU is not supported on your browser/OS. 'requestDevice' failed: ${s}`);
    }
    (t = this.device) == null || t.lost.then((s) => {
      _(`${this.label}: WebGPU device was lost: ${s.message}`), this.loseDevice(), s.reason !== "destroyed" && this.onDeviceLost(s);
    });
  }
  /**
   * Set our {@link pipelineManager | pipeline manager}
   */
  setPipelineManager() {
    this.pipelineManager = new _t();
  }
  /**
   * Called when the {@link device} is lost.
   * Reset all our renderers
   */
  loseDevice() {
    this.ready = !1, this.samplers.forEach((e) => e.sampler = null), this.renderers.forEach((e) => e.loseContext()), this.buffers = [];
  }
  /**
   * Called when the {@link device} should be restored.
   * Restore all our renderers
   */
  async restoreDevice() {
    await this.setAdapterAndDevice(), this.device && (this.samplers.forEach((e) => {
      const { type: t, ...s } = e.options;
      e.sampler = this.device.createSampler({
        label: e.label,
        ...s
      });
    }), this.renderers.forEach((e) => e.restoreContext()));
  }
  /**
   * Set all objects arrays that we'll keep track of
   */
  setDeviceObjects() {
    this.renderers = [], this.bindGroups = [], this.buffers = [], this.samplers = [], this.textures = [], this.texturesQueue = [];
  }
  /**
   * Add a {@link Renderer} to our {@link renderers} array
   * @param renderer - {@link Renderer} to add
   */
  addRenderer(e) {
    this.renderers.push(e);
  }
  /**
   * Remove a {@link Renderer} from our {@link renderers} array
   * @param renderer - {@link Renderer} to remove
   */
  removeRenderer(e) {
    this.renderers = this.renderers.filter((t) => t.uuid !== e.uuid);
  }
  /**
   * Get all the rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes) created by this {@link GPUDeviceManager}
   * @readonly
   */
  get deviceRenderedObjects() {
    return this.renderers.map((e) => e.renderedObjects).flat();
  }
  /**
   * Add a {@link AllowedBindGroups | bind group} to our {@link bindGroups | bind groups array}
   * @param bindGroup - {@link AllowedBindGroups | bind group} to add
   */
  addBindGroup(e) {
    this.bindGroups.find((t) => t.uuid === e.uuid) || this.bindGroups.push(e);
  }
  /**
   * Remove a {@link AllowedBindGroups | bind group} from our {@link bindGroups | bind groups array}
   * @param bindGroup - {@link AllowedBindGroups | bind group} to remove
   */
  removeBindGroup(e) {
    this.bindGroups = this.bindGroups.filter((t) => t.uuid !== e.uuid);
  }
  /**
   * Add a {@link GPUBuffer} to our our {@link buffers} array
   * @param buffer - {@link GPUBuffer} to add
   */
  addBuffer(e) {
    this.buffers.push(e);
  }
  /**
   * Remove a {@link GPUBuffer} from our {@link buffers} array
   * @param buffer - {@link GPUBuffer} to remove
   * @param [originalLabel] - original {@link GPUBuffer} label in case the buffer has been swapped and its label has changed
   */
  removeBuffer(e, t) {
    e && (this.buffers = this.buffers.filter((s) => !(s.label === (t ?? e.label) && s.size === e.size)));
  }
  /**
   * Add a {@link Sampler} to our {@link samplers} array
   * @param sampler - {@link Sampler} to add
   */
  addSampler(e) {
    this.samplers.push(e);
  }
  /**
   * Remove a {@link Sampler} from our {@link samplers} array
   * @param sampler - {@link Sampler} to remove
   */
  removeSampler(e) {
    this.samplers = this.samplers.filter((t) => t.uuid !== e.uuid);
  }
  /**
   * Add a {@link Texture} to our {@link textures} array
   * @param texture - {@link Texture} to add
   */
  addTexture(e) {
    this.textures.push(e);
  }
  /**
   * Upload a {@link Texture#texture | texture} to the GPU
   * @param texture - {@link Texture} class object with the {@link Texture#texture | texture} to upload
   */
  uploadTexture(e) {
    var t, s;
    if (e.source)
      try {
        (t = this.device) == null || t.queue.copyExternalImageToTexture(
          {
            source: e.source,
            flipY: e.options.flipY
          },
          { texture: e.texture, premultipliedAlpha: e.options.premultipliedAlpha },
          { width: e.size.width, height: e.size.height }
        ), e.texture.mipLevelCount > 1 && gt(this.device, e.texture), this.texturesQueue.push(e);
      } catch ({ message: r }) {
        j(`GPUDeviceManager: could not upload texture: ${e.options.name} because: ${r}`);
      }
    else
      (s = this.device) == null || s.queue.writeTexture(
        { texture: e.texture },
        new Uint8Array(e.options.placeholderColor),
        { bytesPerRow: e.size.width * 4 },
        { width: e.size.width, height: e.size.height }
      );
  }
  /**
   * Remove a {@link Texture} from our {@link textures} array
   * @param texture - {@link Texture} to remove
   */
  removeTexture(e) {
    this.textures = this.textures.filter((t) => t.uuid !== e.uuid);
  }
  /**
   * Render everything:
   * - call all our {@link renderers} {@link core/renderers/GPURenderer.GPURenderer#onBeforeCommandEncoder | onBeforeCommandEncoder} callbacks
   * - create a {@link GPUCommandEncoder}
   * - render all our {@link renderers}
   * - submit our {@link GPUCommandBuffer}
   * - upload {@link Texture#texture | textures} that do not have a parentMesh
   * - empty our {@link texturesQueue} array
   * - call all our {@link renderers} {@link core/renderers/GPURenderer.GPURenderer#onAfterCommandEncoder | onAfterCommandEncoder} callbacks
   */
  render() {
    var s, r;
    if (!this.ready)
      return;
    this.renderers.forEach((i) => i.onBeforeCommandEncoder());
    const e = (s = this.device) == null ? void 0 : s.createCommandEncoder({ label: this.label + " command encoder" });
    this.renderers.forEach((i) => i.render(e));
    const t = e.finish();
    (r = this.device) == null || r.queue.submit([t]), this.textures.filter((i) => !i.parentMesh && i.sourceLoaded && !i.sourceUploaded).forEach((i) => this.uploadTexture(i)), this.texturesQueue.forEach((i) => {
      i.sourceUploaded = !0;
    }), this.texturesQueue = [], this.renderers.forEach((i) => i.onAfterCommandEncoder());
  }
  /**
   * Destroy the {@link GPUDeviceManager} and its {@link renderers}
   */
  destroy() {
    var e;
    (e = this.device) == null || e.destroy(), this.device = null, this.renderers.forEach((t) => t.destroy()), this.bindGroups.forEach((t) => t.destroy()), this.buffers.forEach((t) => t == null ? void 0 : t.destroy()), this.textures.forEach((t) => t.destroy()), this.setDeviceObjects();
  }
}
class Ke extends yt {
  /**
   * GPUCurtainsRenderer constructor
   * @param parameters - {@link GPUCameraRendererParams | parameters} used to create this {@link GPUCurtainsRenderer}
   */
  constructor({
    deviceManager: e,
    container: t,
    pixelRatio: s = 1,
    preferredFormat: r,
    alphaMode: i = "premultiplied",
    multisampled: n = !0,
    renderPass: o,
    camera: a
  }) {
    super({
      deviceManager: e,
      container: t,
      pixelRatio: s,
      preferredFormat: r,
      alphaMode: i,
      renderPass: o,
      multisampled: n,
      camera: a
    }), this.type = "GPUCurtainsRenderer";
  }
  /**
   * Add the {@link GPUCurtainsRenderer#domMeshes | domMeshes} to our tracked elements
   */
  setRendererObjects() {
    super.setRendererObjects(), this.domMeshes = [];
  }
}
class Nt {
  /**
   * ScrollManager constructor
   * @param parameters - {@link ScrollManagerParams | parameters} used to create this {@link ScrollManager}
   */
  constructor({
    scroll: e = { x: 0, y: 0 },
    delta: t = { x: 0, y: 0 },
    shouldWatch: s = !0,
    onScroll: r = (i = { x: 0, y: 0 }) => {
    }
  } = {}) {
    this.scroll = e, this.delta = t, this.shouldWatch = s, this.onScroll = r, this.shouldWatch && window.addEventListener("scroll", this.setScroll.bind(this), { passive: !0 });
  }
  /**
   * Called by the scroll event listener
   */
  setScroll() {
    this.updateScrollValues({ x: window.pageXOffset, y: window.pageYOffset });
  }
  /**
   * Updates the scroll manager X and Y scroll values as well as last X and Y deltas
   * Internally called by the scroll event listener
   * Could be called externally as well if the user wants to handle the scroll by himself
   * @param parameters - {@link core/DOM/DOMElement.DOMPosition | scroll values}
   */
  updateScrollValues({ x: e, y: t }) {
    const s = this.scroll;
    this.scroll = { x: e, y: t }, this.delta = {
      x: s.x - this.scroll.x,
      y: s.y - this.scroll.y
    }, this.onScroll && this.onScroll(this.delta);
  }
  /**
   * Destroy our scroll manager (just remove our event listner if it had been added previously)
   */
  destroy() {
    this.shouldWatch && window.removeEventListener("scroll", this.setScroll.bind(this), { passive: !0 });
  }
}
class Qt {
  /**
   * GPUCurtains constructor
   * @param parameters - {@link GPUCurtainsParams | parameters} used to create this {@link GPUCurtains}
   */
  constructor({
    container: e,
    pixelRatio: t = window.devicePixelRatio ?? 1,
    preferredFormat: s,
    alphaMode: r = "premultiplied",
    production: i = !1,
    multisampled: n = !0,
    renderPass: o,
    camera: a,
    autoRender: h = !0,
    autoResize: u = !0,
    watchScroll: c = !0
  }) {
    this._onRenderCallback = () => {
    }, this._onScrollCallback = () => {
    }, this._onErrorCallback = () => {
    }, this._onContextLostCallback = () => {
    }, this.type = "CurtainsGPU", this.options = {
      container: e,
      pixelRatio: t,
      camera: a,
      production: i,
      preferredFormat: s,
      alphaMode: r,
      multisampled: n,
      renderPass: o,
      autoRender: h,
      autoResize: u,
      watchScroll: c
    }, this.setDeviceManager(), e && this.setContainer(e);
  }
  /**
   * Set the {@link container}
   * @param container - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use
   */
  setContainer(e) {
    if (e)
      if (typeof e == "string")
        if (e = document.querySelector(e), e)
          this.options.container = e;
        else {
          const t = document.createElement("div");
          t.setAttribute("id", "curtains-gpu-canvas"), document.body.appendChild(t), this.options.container = t;
        }
      else
        e instanceof Element && (this.options.container = e);
    else {
      const t = document.createElement("div");
      t.setAttribute("id", "curtains-gpu-canvas"), document.body.appendChild(t), this.options.container = t;
    }
    this.container = this.options.container, this.setCurtains();
  }
  /**
   * Set the default {@link GPUCurtainsRenderer | renderer}
   */
  setMainRenderer() {
    this.createCurtainsRenderer({
      deviceManager: this.deviceManager,
      // TODO ...this.options?
      container: this.options.container,
      pixelRatio: this.options.pixelRatio,
      preferredFormat: this.options.preferredFormat,
      alphaMode: this.options.alphaMode,
      multisampled: this.options.multisampled,
      renderPass: this.options.renderPass,
      camera: this.options.camera
    });
  }
  /**
   * Patch the options with default values before creating a {@link Renderer}
   * @param parameters - parameters to patch
   */
  patchRendererOptions(e) {
    return e.pixelRatio === void 0 && (e.pixelRatio = this.options.pixelRatio), e;
  }
  /**
   * Create a new {@link GPURenderer} instance
   * @param parameters - {@link GPURendererParams | parameters} to use
   */
  createRenderer(e) {
    return e = this.patchRendererOptions(e), new xt({ ...e, deviceManager: this.deviceManager });
  }
  /**
   * Create a new {@link GPUCameraRenderer} instance
   * @param parameters - {@link GPUCameraRendererParams | parameters} to use
   */
  createCameraRenderer(e) {
    return e = this.patchRendererOptions(e), new yt({ ...e, deviceManager: this.deviceManager });
  }
  /**
   * Create a new {@link GPUCurtainsRenderer} instance
   * @param parameters - {@link GPUCameraRendererParams | parameters} to use
   */
  createCurtainsRenderer(e) {
    return e = this.patchRendererOptions(e), new Ke({ ...e, deviceManager: this.deviceManager });
  }
  /**
   * Set our {@link GPUDeviceManager}
   */
  setDeviceManager() {
    this.deviceManager = new Wt({
      label: "GPUCurtains default device",
      production: this.options.production,
      onError: () => setTimeout(() => {
        this._onErrorCallback && this._onErrorCallback();
      }, 0),
      onDeviceLost: (e) => this._onContextLostCallback && this._onContextLostCallback(e)
    });
  }
  /**
   * Get all created {@link Renderer}
   * @readonly
   */
  get renderers() {
    return this.deviceManager.renderers;
  }
  /**
   * Get the default {@link GPUCurtainsRenderer} created
   * @readonly
   */
  get renderer() {
    return this.renderers[0];
  }
  /**
   * Set the {@link GPUDeviceManager} {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device} if possible, then set all created {@link Renderer} contexts
   */
  async setDevice() {
    await this.deviceManager.init();
  }
  /**
   * Restore the {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device}
   * @async
   */
  async restoreContext() {
    await this.deviceManager.restoreDevice();
  }
  /**
   * Set the various event listeners, set the {@link GPUCurtainsRenderer} and start rendering if needed
   */
  setCurtains() {
    this.initEvents(), this.setMainRenderer(), this.options.autoRender && this.animate();
  }
  /* RENDERER TRACKED OBJECTS */
  /**
   * Get all the created {@link PingPongPlane}
   * @readonly
   */
  get pingPongPlanes() {
    var e;
    return (e = this.renderers) == null ? void 0 : e.map((t) => t.pingPongPlanes).flat();
  }
  /**
   * Get all the created {@link ShaderPass}
   * @readonly
   */
  get shaderPasses() {
    var e;
    return (e = this.renderers) == null ? void 0 : e.map((t) => t.shaderPasses).flat();
  }
  /**
   * Get all the created {@link ProjectedMesh | projected meshes}
   * @readonly
   */
  get meshes() {
    var e;
    return (e = this.renderers) == null ? void 0 : e.map((t) => t.meshes).flat();
  }
  /**
   * Get all the created {@link DOMMesh | DOM Meshes} (including {@link Plane | planes})
   * @readonly
   */
  get domMeshes() {
    var e;
    return (e = this.renderers) == null ? void 0 : e.filter((t) => t instanceof Ke).map((t) => t.domMeshes).flat();
  }
  /**
   * Get all the created {@link Plane | planes}
   * @readonly
   */
  get planes() {
    return this.domMeshes.filter((e) => e instanceof mt);
  }
  /**
   * Get all the created {@link ComputePass | compute passes}
   * @readonly
   */
  get computePasses() {
    var e;
    return (e = this.renderers) == null ? void 0 : e.map((t) => t.computePasses).flat();
  }
  /**
   * Get the {@link GPUCurtainsRenderer#camera | default GPUCurtainsRenderer camera}
   * @readonly
   */
  get camera() {
    var e;
    return (e = this.renderer) == null ? void 0 : e.camera;
  }
  /**
   * Set the {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer camera} perspective
   * @param parameters - {@link CameraBasePerspectiveOptions | parameters} to use for the perspective
   */
  setPerspective({ fov: e = 50, near: t = 0.01, far: s = 50 } = {}) {
    var r;
    (r = this.renderer) == null || r.setPerspective({ fov: e, near: t, far: s });
  }
  /**
   * Set the default {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer camera} {@link Camera#position | position}
   * @param position - new {@link Camera#position | position}
   */
  setCameraPosition(e = new f(0, 0, 1)) {
    var t;
    (t = this.renderer) == null || t.setCameraPosition(e);
  }
  /**
   * Get our {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer bounding rectangle}
   */
  get boundingRect() {
    var e;
    return (e = this.renderer) == null ? void 0 : e.boundingRect;
  }
  /* SCROLL */
  /**
   * Set the {@link scrollManager}
   */
  initScroll() {
    this.scrollManager = new Nt({
      // init values
      scroll: {
        x: window.pageXOffset,
        y: window.pageYOffset
      },
      delta: {
        x: 0,
        y: 0
      },
      shouldWatch: this.options.watchScroll,
      onScroll: (e) => this.updateScroll(e)
    });
  }
  /**
   * Update all {@link DOMMesh#updateScrollPosition | DOMMesh scroll positions}
   * @param delta - last {@link ScrollManager#delta | scroll delta values}
   */
  updateScroll(e = { x: 0, y: 0 }) {
    this.domMeshes.forEach((t) => {
      t.domElement && t.updateScrollPosition(e);
    }), this._onScrollCallback && this._onScrollCallback();
  }
  /**
   * Update our {@link ScrollManager#scroll | scrollManager scroll values}. Called each time the scroll has changed if {@link GPUCurtains#options.watchScroll | watchScroll option} is set to true. Could be called externally as well.
   * @param scroll - new {@link DOMPosition | scroll values}
   */
  updateScrollValues(e = { x: 0, y: 0 }) {
    this.scrollManager.updateScrollValues(e);
  }
  /**
   * Get our {@link ScrollManager#delta | scrollManager delta values}
   * @readonly
   */
  get scrollDelta() {
    return this.scrollManager.delta;
  }
  /**
   * Get our {@link ScrollManager#scroll | scrollManager scroll values}
   * @readonly
   */
  get scrollValues() {
    return this.scrollManager.scroll;
  }
  /* EVENT LISTENERS */
  /**
   * Set the resize and scroll event listeners
   */
  initEvents() {
    Ce.useObserver(this.options.autoResize), this.initScroll();
  }
  /* EVENTS */
  /**
   * Called at each render frame
   * @param callback - callback to run at each render
   * @returns - our {@link GPUCurtains}
   */
  onRender(e) {
    return e && (this._onRenderCallback = e), this;
  }
  /**
   * Called each time the {@link ScrollManager#scroll | scrollManager scroll values} changed
   * @param callback - callback to run each time the {@link ScrollManager#scroll | scrollManager scroll values} changed
   * @returns - our {@link GPUCurtains}
   */
  onScroll(e) {
    return e && (this._onScrollCallback = e), this;
  }
  /**
   * Called if there's been an error while trying to create the {@link GPUDeviceManager#device | device}
   * @param callback - callback to run if there's been an error while trying to create the {@link GPUDeviceManager#device | device}
   * @returns - our {@link GPUCurtains}
   */
  onError(e) {
    return e && (this._onErrorCallback = e), this;
  }
  /**
   * Called whenever the {@link GPUDeviceManager#device | device} is lost
   * @param callback - callback to run whenever the {@link GPUDeviceManager#device | device} is lost
   * @returns - our {@link GPUCurtains}
   */
  onContextLost(e) {
    return e && (this._onContextLostCallback = e), this;
  }
  /**
   * Create a requestAnimationFrame loop and run it
   */
  animate() {
    this.render(), this.animationFrameID = window.requestAnimationFrame(this.animate.bind(this));
  }
  /**
   * Render our {@link GPUDeviceManager}
   */
  render() {
    this._onRenderCallback && this._onRenderCallback(), this.deviceManager.render();
  }
  /**
   * Destroy our {@link GPUCurtains} and {@link GPUDeviceManager}
   */
  destroy() {
    var e;
    this.animationFrameID && window.cancelAnimationFrame(this.animationFrameID), this.deviceManager.destroy(), (e = this.scrollManager) == null || e.destroy(), Ce.destroy();
  }
}
class Jt extends Fe {
  constructor({
    widthSegments: e = 1,
    heightSegments: t = 1,
    depthSegments: s = 1,
    instancesCount: r = 1,
    vertexBuffers: i = [],
    topology: n
  } = {}) {
    super({ verticesOrder: "ccw", topology: n, instancesCount: r, vertexBuffers: i }), this.type = "BoxGeometry", e = Math.floor(e), t = Math.floor(t), s = Math.floor(s);
    const o = [], a = [], h = [], u = [];
    let c = 0;
    const l = (p, m, g, y, x, R, B, w, v, M) => {
      const b = R / v, C = B / M, T = R / 2, A = B / 2, q = w / 2, D = v + 1, X = M + 1;
      let W = 0;
      const E = new f();
      for (let S = 0; S < X; S++) {
        const F = S * C - A;
        for (let L = 0; L < D; L++) {
          const $ = L * b - T;
          E[p] = $ * y, E[m] = F * x, E[g] = q, o.push(E.x, E.y, E.z), E[p] = 0, E[m] = 0, E[g] = w > 0 ? 1 : -1, h.push(E.x, E.y, E.z), a.push(L / v), a.push(S / M), W += 1;
        }
      }
      for (let S = 0; S < M; S++)
        for (let F = 0; F < v; F++) {
          const L = c + F + D * S, $ = c + F + D * (S + 1), H = c + (F + 1) + D * (S + 1), J = c + (F + 1) + D * S;
          u.push(L, $, J), u.push($, H, J), c += W;
        }
    };
    l("z", "y", "x", -1, -1, 2, 2, 2, s, t), l("z", "y", "x", 1, -1, 2, 2, -2, s, t), l("x", "z", "y", 1, 1, 2, 2, 2, e, s), l("x", "z", "y", 1, -1, 2, 2, -2, e, s), l("x", "y", "z", 1, -1, 2, 2, 2, e, t), l("x", "y", "z", -1, -1, 2, 2, -2, e, t), this.setAttribute({
      name: "position",
      type: "vec3f",
      bufferFormat: "float32x3",
      size: 3,
      array: new Float32Array(o)
    }), this.setAttribute({
      name: "uv",
      type: "vec2f",
      bufferFormat: "float32x2",
      size: 2,
      array: new Float32Array(a)
    }), this.setAttribute({
      name: "normal",
      type: "vec3f",
      bufferFormat: "float32x3",
      size: 3,
      array: new Float32Array(h)
    }), this.setIndexBuffer({
      array: this.useUint16IndexArray ? new Uint16Array(u) : new Uint32Array(u),
      bufferFormat: this.useUint16IndexArray ? "uint16" : "uint32"
    });
  }
}
class Kt extends Fe {
  constructor({
    widthSegments: e = 32,
    heightSegments: t = 16,
    phiStart: s = 0,
    phiLength: r = Math.PI * 2,
    thetaStart: i = 0,
    thetaLength: n = Math.PI,
    instancesCount: o = 1,
    vertexBuffers: a = [],
    topology: h
  } = {}) {
    super({ verticesOrder: "ccw", topology: h, instancesCount: o, vertexBuffers: a }), this.type = "SphereGeometry", e = Math.max(3, Math.floor(e)), t = Math.max(2, Math.floor(t));
    const u = 1, c = Math.min(i + n, Math.PI);
    let l = 0;
    const p = [], m = new f(), g = new f(), y = [], x = [], R = [], B = [];
    for (let w = 0; w <= t; w++) {
      const v = [], M = w / t;
      let b = 0;
      w === 0 && i === 0 ? b = 0.5 / e : w === t && c === Math.PI && (b = -0.5 / e);
      for (let C = 0; C <= e; C++) {
        const T = C / e;
        m.x = -u * Math.cos(s + T * r) * Math.sin(i + M * n), m.y = u * Math.cos(i + M * n), m.z = u * Math.sin(s + T * r) * Math.sin(i + M * n), x.push(m.x, m.y, m.z), g.copy(m).normalize(), R.push(g.x, g.y, g.z), B.push(T + b, M), v.push(l++);
      }
      p.push(v);
    }
    for (let w = 0; w < t; w++)
      for (let v = 0; v < e; v++) {
        const M = p[w][v + 1], b = p[w][v], C = p[w + 1][v], T = p[w + 1][v + 1];
        (w !== 0 || i > 0) && y.push(M, b, T), (w !== t - 1 || c < Math.PI) && y.push(b, C, T);
      }
    this.setAttribute({
      name: "position",
      type: "vec3f",
      bufferFormat: "float32x3",
      size: 3,
      array: new Float32Array(x)
    }), this.setAttribute({
      name: "uv",
      type: "vec2f",
      bufferFormat: "float32x2",
      size: 2,
      array: new Float32Array(B)
    }), this.setAttribute({
      name: "normal",
      type: "vec3f",
      bufferFormat: "float32x3",
      size: 3,
      array: new Float32Array(R)
    }), this.setIndexBuffer({
      array: this.useUint16IndexArray ? new Uint16Array(y) : new Uint32Array(y),
      bufferFormat: this.useUint16IndexArray ? "uint16" : "uint32"
    });
  }
}
export {
  Oe as BindGroup,
  Ue as Binding,
  ce as Box3,
  Jt as BoxGeometry,
  le as BufferBinding,
  Bt as Camera,
  Ct as ComputeMaterial,
  St as ComputePass,
  Qe as ComputePipelineEntry,
  ct as DOMElement,
  zt as DOMFrustum,
  ft as DOMMesh,
  $t as DOMObject3D,
  ht as FullscreenPlane,
  yt as GPUCameraRenderer,
  Qt as GPUCurtains,
  Ke as GPUCurtainsRenderer,
  Wt as GPUDeviceManager,
  xt as GPURenderer,
  rt as Geometry,
  Fe as IndexedGeometry,
  G as Mat4,
  it as Material,
  Zt as Mesh,
  Ae as Object3D,
  jt as PingPongPlane,
  lt as PipelineEntry,
  _t as PipelineManager,
  mt as Plane,
  ot as PlaneGeometry,
  ut as ProjectedObject3D,
  N as Quat,
  Gt as RenderMaterial,
  Ee as RenderPass,
  Ze as RenderPipelineEntry,
  pt as RenderTarget,
  ne as RenderTexture,
  Tt as Sampler,
  Rt as SamplerBinding,
  qt as Scene,
  Vt as ShaderPass,
  Kt as SphereGeometry,
  ue as Texture,
  Ve as TextureBindGroup,
  st as TextureBinding,
  O as Vec2,
  f as Vec3,
  Le as WritableBufferBinding
};
