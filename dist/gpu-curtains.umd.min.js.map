{"version":3,"file":"gpu-curtains.umd.min.js","sources":["../src/utils/utils.ts","../src/core/renderers/utils.ts","../src/utils/webgpu-constants.ts","../src/core/bindings/utils.ts","../src/core/bindings/Binding.ts","../src/math/Vec2.ts","../src/math/Quat.ts","../src/math/Vec3.ts","../src/core/bindings/bufferElements/BufferElement.ts","../src/core/bindings/bufferElements/BufferArrayElement.ts","../src/core/bindings/bufferElements/BufferInterleavedArrayElement.ts","../src/core/buffers/utils.ts","../src/core/buffers/Buffer.ts","../src/core/bindings/BufferBinding.ts","../src/core/bindings/WritableBufferBinding.ts","../src/core/bindGroups/BindGroup.ts","../src/core/bindings/TextureBinding.ts","../src/math/Mat4.ts","../src/core/objects3D/Object3D.ts","../src/core/textures/utils.ts","../src/core/textures/DOMTexture.ts","../src/core/bindGroups/TextureBindGroup.ts","../src/core/bindings/SamplerBinding.ts","../src/core/camera/Camera.ts","../src/core/samplers/Sampler.ts","../src/core/textures/Texture.ts","../src/core/materials/Material.ts","../src/core/materials/ComputeMaterial.ts","../src/core/computePasses/ComputePass.ts","../src/math/Box3.ts","../src/core/DOM/DOMFrustum.ts","../src/core/geometries/Geometry.ts","../src/core/geometries/IndexedGeometry.ts","../src/core/geometries/PlaneGeometry.ts","../src/core/lights/Light.ts","../src/core/lights/AmbientLight.ts","../src/core/renderPasses/RenderPass.ts","../src/core/renderPasses/RenderTarget.ts","../src/core/pipelines/PipelineEntry.ts","../src/core/shaders/chunks/helpers/get_output_position.wgsl.js","../src/core/shaders/chunks/helpers/get_normals.wgsl.js","../src/core/shaders/chunks/helpers/get_uv_cover.wgsl.js","../src/core/shaders/chunks/helpers/get_vertex_to_uv_coords.wgsl.js","../src/core/shaders/ShaderChunks.ts","../src/core/pipelines/RenderPipelineEntry.ts","../src/core/materials/utils.ts","../src/core/shaders/chunks/default/default_projected_vs.wgsl.js","../src/core/shaders/chunks/default/default_vs.wgsl.js","../src/core/shaders/chunks/default/default_fs.wgsl.js","../src/core/materials/RenderMaterial.ts","../src/core/shaders/chunks/vertex/get_vertex_output.ts","../src/core/shaders/chunks/shading/shadows.ts","../src/core/shadows/Shadow.ts","../src/core/shadows/DirectionalShadow.ts","../src/core/lights/DirectionalLight.ts","../src/core/shadows/PointShadow.ts","../src/core/lights/PointLight.ts","../src/core/meshes/mixins/MeshBaseMixin.ts","../src/utils/CacheManager.ts","../src/core/meshes/FullscreenPlane.ts","../src/math/Mat3.ts","../src/core/objects3D/ProjectedObject3D.ts","../src/core/shaders/chunks/default/default_normal_fs.wgsl.js","../src/core/meshes/mixins/ProjectedMeshBaseMixin.ts","../src/core/meshes/Mesh.ts","../src/core/pipelines/ComputePipelineEntry.ts","../src/core/pipelines/PipelineManager.ts","../src/utils/ResizeManager.ts","../src/core/DOM/DOMElement.ts","../src/core/scenes/Scene.ts","../src/utils/TasksQueueManager.ts","../src/core/renderers/GPURenderer.ts","../src/core/renderers/GPUCameraRenderer.ts","../src/core/renderers/GPUDeviceManager.ts","../src/extras/buffers/IndirectBuffer.ts","../src/core/renderPasses/RenderBundle.ts","../src/core/shaders/chunks/default/default_pass_fs.wgsl.js","../src/core/renderPasses/ShaderPass.ts","../src/core/shaders/chunks/helpers/common.wgsl.js","../src/core/shaders/chunks/helpers/lights/light_utils.wgsl.js","../src/core/shaders/chunks/shading/tone-mapping-utils.ts","../src/core/shaders/chunks/helpers/lights/RE_indirect_diffuse.wgsl.js","../src/core/shaders/chunks/helpers/constants.wgsl.js","../src/core/shaders/chunks/shading/lambert-shading.ts","../src/core/shaders/chunks/shading/phong-shading.ts","../src/core/shaders/chunks/helpers/lights/RE_indirect_specular.wgsl.js","../src/core/shaders/chunks/shading/pbr-shading.ts","../src/core/shaders/chunks/shading/ibl-shading.ts","../src/curtains/objects3D/DOMObject3D.ts","../src/curtains/meshes/DOMMesh.ts","../src/curtains/meshes/Plane.ts","../src/curtains/renderers/GPUCurtainsRenderer.ts","../src/utils/ScrollManager.ts","../src/curtains/GPUCurtains.ts","../src/extras/controls/OrbitControls.ts","../src/extras/loaders/HDRLoader.ts","../src/core/shaders/compute/compute-brdf-lut.wgsl.js","../src/core/shaders/compute/compute-specular-cubemap-from-hdr.wgsl.js","../src/core/shaders/compute/compute-diffuse-from-specular-cubemap.wgsl.js","../src/extras/environment-map/EnvironmentMap.ts","../src/extras/geometries/BoxGeometry.ts","../src/extras/geometries/SphereGeometry.ts","../src/extras/meshes/PingPongPlane.ts","../src/extras/raycaster/Raycaster.ts","../src/extras/animations/KeyframesAnimation.ts","../src/extras/animations/TargetsAnimationsManager.ts","../src/extras/gltf/GLTFScenesManager.ts","../src/extras/gltf/utils.ts","../src/extras/loaders/GLTFLoader.ts"],"sourcesContent":["/**\r\n * Generate a unique universal id\r\n * @returns - unique universal id generated\r\n */\r\nexport const generateUUID = (): string => {\r\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\r\n    const r = (Math.random() * 16) | 0,\r\n      v = c === 'x' ? r : (r & 0x3) | 0x8\r\n    return v.toString(16).toUpperCase()\r\n  })\r\n}\r\n\r\n/**\r\n * Turns a string into a camel case string\r\n * @param string - string to transform\r\n * @returns - camel case string created\r\n */\r\nexport const toCamelCase = (string: string): string => {\r\n  return string\r\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (ltr, idx) => (idx === 0 ? ltr.toLowerCase() : ltr.toUpperCase()))\r\n    .replace(/\\s+/g, '')\r\n}\r\n\r\n/**\r\n * Turns a string into a kebab case string\r\n * @param string - string to transform\r\n * @returns - kebab case string created\r\n */\r\nexport const toKebabCase = (string: string): string => {\r\n  const camelCase = toCamelCase(string)\r\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1)\r\n}\r\n\r\nlet warningThrown = 0\r\n\r\n/**\r\n * Throw a console warning with the passed arguments\r\n * @param warning - warning to be thrown\r\n */\r\nexport const throwWarning = (warning: string) => {\r\n  if (warningThrown > 100) {\r\n    return\r\n  } else if (warningThrown === 100) {\r\n    console.warn('GPUCurtains: too many warnings thrown, stop logging.')\r\n  } else {\r\n    console.warn(warning)\r\n  }\r\n\r\n  warningThrown++\r\n}\r\n\r\n/**\r\n * Throw a javascript error with the passed arguments\r\n * @param error - error to be thrown\r\n */\r\nexport const throwError = (error: string) => {\r\n  throw new Error(error)\r\n}\r\n","import { throwError } from '../../utils/utils'\nimport { GPURenderer, ProjectedMesh } from './GPURenderer'\nimport { GPUCameraRenderer } from './GPUCameraRenderer'\nimport { GPUCurtainsRenderer } from '../../curtains/renderers/GPUCurtainsRenderer'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/**\n * A Renderer could be either a {@link GPURenderer}, a {@link GPUCameraRenderer} or a {@link GPUCurtainsRenderer}\n * @type {Renderer}\n */\nexport type Renderer = GPUCurtainsRenderer | GPUCameraRenderer | GPURenderer\n/**\n * A CameraRenderer could be either a {@link GPUCameraRenderer} or a {@link GPUCurtainsRenderer}\n * @type {CameraRenderer}\n */\nexport type CameraRenderer = GPUCurtainsRenderer | GPUCameraRenderer\n\n/**\n * Format a renderer error based on given renderer, renderer type and object type\n * @param renderer - renderer that failed the test\n * @param rendererType - expected renderer type\n * @param type - object type\n */\nconst formatRendererError = (renderer: Renderer, rendererType = 'GPURenderer', type: string | null): void => {\n  const error = type\n    ? `Unable to create ${type} because the ${rendererType} is not defined: ${renderer}`\n    : `The ${rendererType} is not defined: ${renderer}`\n  throwError(error)\n}\n\n/**\n * Check if the given renderer is a {@link Renderer}\n * @param renderer - renderer to test\n * @param type - object type used to format the error if needed\n * @returns - the {@link Renderer} if correctly set\n */\nexport const isRenderer = (renderer: GPUCurtains | Renderer | undefined, type: string | null): Renderer => {\n  renderer = ((renderer && (renderer as GPUCurtains).renderer) || renderer) as Renderer\n\n  const isRenderer =\n    renderer &&\n    (renderer.type === 'GPURenderer' ||\n      renderer.type === 'GPUCameraRenderer' ||\n      renderer.type === 'GPUCurtainsRenderer')\n\n  if (!isRenderer) {\n    formatRendererError(renderer, 'GPURenderer', type)\n  }\n\n  return renderer\n}\n\n/**\n * Check if the given renderer is a {@link CameraRenderer}\n * @param renderer - renderer to test\n * @param type - object type used to format the error if needed\n * @returns - the {@link CameraRenderer} if correctly set\n */\nexport const isCameraRenderer = (\n  renderer: GPUCurtains | CameraRenderer | undefined,\n  type: string | null\n): CameraRenderer => {\n  renderer = ((renderer && (renderer as GPUCurtains).renderer) || renderer) as CameraRenderer\n\n  const isCameraRenderer =\n    renderer && (renderer.type === 'GPUCameraRenderer' || renderer.type === 'GPUCurtainsRenderer')\n\n  if (!isCameraRenderer) {\n    formatRendererError(renderer, 'GPUCameraRenderer', type)\n  }\n\n  return renderer\n}\n\n/**\n * Check if the given renderer is a {@link GPUCurtainsRenderer}\n * @param renderer - renderer to test\n * @param type - object type used to format the error if needed\n * @returns - the {@link GPUCurtainsRenderer} if correctly set\n */\nexport const isCurtainsRenderer = (\n  renderer: GPUCurtains | GPUCurtainsRenderer | undefined,\n  type: string | null\n): GPUCurtainsRenderer => {\n  renderer = ((renderer && (renderer as GPUCurtains).renderer) || renderer) as GPUCurtainsRenderer\n\n  const isCurtainsRenderer = renderer && renderer.type === 'GPUCurtainsRenderer'\n\n  if (!isCurtainsRenderer) {\n    formatRendererError(renderer, 'GPUCurtainsRenderer', type)\n  }\n\n  return renderer\n}\n\n/**\n * Check if a given object is a {@link ProjectedMesh | projected mesh}.\n * @param object - Object to test.\n * @returns - Given object as a {@link ProjectedMesh | projected mesh} if the test is successful, `false` otherwise.\n */\nexport const isProjectedMesh = (object: object): false | ProjectedMesh => {\n  return object.constructor.name === 'Mesh' ||\n    object.constructor.name === 'DOMMesh' ||\n    object.constructor.name === 'Plane'\n    ? (object as ProjectedMesh)\n    : false\n}\n\n/**\n * Helper to generate mips on the GPU\n * Taken from https://webgpufundamentals.org/webgpu/lessons/webgpu-importing-textures.html\n */\nexport const generateMips = (() => {\n  let sampler\n  let module\n  const pipelineByFormat = {}\n\n  return function generateMips(device: GPUDevice, texture: GPUTexture) {\n    if (!module) {\n      module = device.createShaderModule({\n        label: 'textured quad shaders for mip level generation',\n        code: `\n            struct VSOutput {\n              @builtin(position) position: vec4f,\n              @location(0) texcoord: vec2f,\n            };\n\n            @vertex fn vs(\n              @builtin(vertex_index) vertexIndex : u32\n            ) -> VSOutput {\n              let pos = array(\n\n                vec2f( 0.0,  0.0),  // center\n                vec2f( 1.0,  0.0),  // right, center\n                vec2f( 0.0,  1.0),  // center, top\n\n                // 2st triangle\n                vec2f( 0.0,  1.0),  // center, top\n                vec2f( 1.0,  0.0),  // right, center\n                vec2f( 1.0,  1.0),  // right, top\n              );\n\n              var vsOutput: VSOutput;\n              let xy = pos[vertexIndex];\n              vsOutput.position = vec4f(xy * 2.0 - 1.0, 0.0, 1.0);\n              vsOutput.texcoord = vec2f(xy.x, 1.0 - xy.y);\n              return vsOutput;\n            }\n\n            @group(0) @binding(0) var ourSampler: sampler;\n            @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n            @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n              return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n            }\n          `,\n      })\n\n      sampler = device.createSampler({\n        minFilter: 'linear',\n        magFilter: 'linear',\n      })\n    }\n\n    if (!pipelineByFormat[texture.format]) {\n      pipelineByFormat[texture.format] = device.createRenderPipeline({\n        label: 'Mip level generator pipeline',\n        layout: 'auto',\n        vertex: {\n          module,\n        },\n        fragment: {\n          module,\n          targets: [{ format: texture.format }],\n        },\n      })\n    }\n    const pipeline = pipelineByFormat[texture.format]\n\n    const encoder = device.createCommandEncoder({\n      label: 'Mip gen encoder',\n    })\n\n    let width = texture.width\n    let height = texture.height\n    let baseMipLevel = 0\n    while (width > 1 || height > 1) {\n      width = Math.max(1, (width / 2) | 0)\n      height = Math.max(1, (height / 2) | 0)\n\n      for (let layer = 0; layer < texture.depthOrArrayLayers; ++layer) {\n        const bindGroup = device.createBindGroup({\n          layout: pipeline.getBindGroupLayout(0),\n          entries: [\n            { binding: 0, resource: sampler },\n            {\n              binding: 1,\n              resource: texture.createView({\n                dimension: '2d',\n                baseMipLevel,\n                mipLevelCount: 1,\n                baseArrayLayer: layer,\n                arrayLayerCount: 1,\n              }),\n            },\n          ],\n        })\n\n        const renderPassDescriptor = {\n          label: 'Mip generation render pass',\n          colorAttachments: [\n            {\n              view: texture.createView({\n                dimension: '2d',\n                baseMipLevel: baseMipLevel + 1,\n                mipLevelCount: 1,\n                baseArrayLayer: layer,\n                arrayLayerCount: 1,\n              }),\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        }\n\n        const pass = encoder.beginRenderPass(renderPassDescriptor as GPURenderPassDescriptor)\n        pass.setPipeline(pipeline)\n        pass.setBindGroup(0, bindGroup)\n        pass.draw(6) // call our vertex shader 6 times\n        pass.end()\n      }\n      ++baseMipLevel\n    }\n\n    const commandBuffer = encoder.finish()\n    device.queue.submit([commandBuffer])\n  }\n})()\n","/**\r\n * GPUShaderStage constants with fallbacks.\r\n */\r\nexport const WebGPUShaderStageConstants: Record<string, number> =\r\n  typeof GPUShaderStage !== 'undefined'\r\n    ? GPUShaderStage\r\n    : {\r\n        VERTEX: 1,\r\n        FRAGMENT: 2,\r\n        COMPUTE: 4,\r\n      }\r\n\r\n/**\r\n * GPUBufferUsage constants with fallbacks.\r\n */\r\nexport const WebGPUBufferUsageConstants: Record<string, number> =\r\n  typeof GPUBufferUsage !== 'undefined'\r\n    ? GPUBufferUsage\r\n    : {\r\n        MAP_READ: 1,\r\n        MAP_WRITE: 2,\r\n        COPY_SRC: 4,\r\n        COPY_DST: 8,\r\n        INDEX: 16,\r\n        VERTEX: 32,\r\n        UNIFORM: 64,\r\n        STORAGE: 128,\r\n        INDIRECT: 256,\r\n        QUERY_RESOLVE: 512,\r\n      }\r\n\r\n/**\r\n * GPUTextureUsage constants with fallbacks.\r\n */\r\nexport const WebGPUTextureUsageConstants: Record<string, number> =\r\n  typeof GPUTextureUsage !== 'undefined'\r\n    ? GPUTextureUsage\r\n    : {\r\n        COPY_SRC: 1,\r\n        COPY_DST: 2,\r\n        TEXTURE_BINDING: 4,\r\n        STORAGE_BINDING: 8,\r\n        RENDER_ATTACHMENT: 16,\r\n      }\r\n","import { WebGPUShaderStageConstants } from '../../utils/webgpu-constants'\r\nimport { BufferBinding } from './BufferBinding'\r\nimport { TextureBinding } from './TextureBinding'\r\nimport { MaterialShadersType } from '../../types/Materials'\r\n\r\n/**\r\n * Map {@link MaterialShadersType | shaders types names} with actual {@link GPUDevice.createBindGroupLayout().visibility | GPUShaderStageFlags}.\r\n */\r\nconst bindingVisibilities: Map<MaterialShadersType, GPUShaderStageFlags> = new Map([\r\n  ['vertex', WebGPUShaderStageConstants.VERTEX],\r\n  ['fragment', WebGPUShaderStageConstants.FRAGMENT],\r\n  ['compute', WebGPUShaderStageConstants.COMPUTE],\r\n])\r\n\r\n/**\r\n * Get the corresponding {@link GPUDevice.createBindGroupLayout().visibility | GPUShaderStageFlags} based on an array of {@link MaterialShadersType | shaders types names}.\r\n * @param visibilities - array of {@link MaterialShadersType | shaders types names}.\r\n * @returns - corresponding {@link GPUDevice.createBindGroupLayout().visibility | GPUShaderStageFlags}.\r\n */\r\nexport const getBindingVisibility = (visibilities: MaterialShadersType[] = []): GPUShaderStageFlags => {\r\n  return visibilities.reduce((acc, v) => {\r\n    return acc | bindingVisibilities.get(v)\r\n  }, 0)\r\n}\r\n\r\n/** Defines a typed array */\r\nexport type TypedArray =\r\n  | Int8Array\r\n  | Uint8Array\r\n  | Uint8ClampedArray\r\n  | Int16Array\r\n  | Uint16Array\r\n  | Int32Array\r\n  | Uint32Array\r\n  | Float32Array\r\n  | Float64Array\r\n\r\n/** Defines a typed array constructor */\r\nexport type TypedArrayConstructor =\r\n  | Int8ArrayConstructor\r\n  | Uint8ArrayConstructor\r\n  | Int16ArrayConstructor\r\n  | Uint16ArrayConstructor\r\n  | Int32ArrayConstructor\r\n  | Uint32ArrayConstructor\r\n  | Float32ArrayConstructor\r\n  | Float64ArrayConstructor\r\n\r\n/** Defines the possible base WGSL variable types */\r\nexport type WGSLBaseVariableType = string // TODO 'mat4x4f', 'mat3x3f', 'vec3f', 'vec2f', 'f32' etc\r\n/** Defines the possible WGSL variable types */\r\nexport type WGSLVariableType = string // TODO 'mat4x4f', 'mat3x3f', 'vec3f', 'vec2f', 'f32', 'atomic<u32>' etc\r\n\r\n/**\r\n * Defines a {@link BufferLayout} object used to pad our {@link GPUBuffer} arrays\r\n */\r\nexport type BufferLayout = {\r\n  /** Number of elements hold by this variable type */\r\n  numElements: number\r\n  /** Required alignment by this variable type */\r\n  align: number\r\n  /** Size in bytes of this variable type */\r\n  size: number\r\n  /** Variable type */\r\n  type: WGSLVariableType\r\n  /** Typed array constructor required by this variable type */\r\n  View: TypedArrayConstructor\r\n  /** Pad values required by this variable type */\r\n  pad?: number[]\r\n}\r\n\r\n/** Object containing all buffer layouts */\r\nconst bufferLayouts: Record<string, BufferLayout> = {\r\n  i32: { numElements: 1, align: 4, size: 4, type: 'i32', View: Int32Array },\r\n  u32: { numElements: 1, align: 4, size: 4, type: 'u32', View: Uint32Array },\r\n  f32: { numElements: 1, align: 4, size: 4, type: 'f32', View: Float32Array },\r\n  f16: { numElements: 1, align: 2, size: 2, type: 'u16', View: Uint16Array },\r\n\r\n  vec2f: { numElements: 2, align: 8, size: 8, type: 'f32', View: Float32Array },\r\n  vec2i: { numElements: 2, align: 8, size: 8, type: 'i32', View: Int32Array },\r\n  vec2u: { numElements: 2, align: 8, size: 8, type: 'u32', View: Uint32Array },\r\n  vec2h: { numElements: 2, align: 4, size: 4, type: 'u16', View: Uint16Array },\r\n  vec3i: { numElements: 3, align: 16, size: 12, type: 'i32', View: Int32Array },\r\n  vec3u: { numElements: 3, align: 16, size: 12, type: 'u32', View: Uint32Array },\r\n  vec3f: { numElements: 3, align: 16, size: 12, type: 'f32', View: Float32Array },\r\n  vec3h: { numElements: 3, align: 8, size: 6, type: 'u16', View: Uint16Array },\r\n  vec4i: { numElements: 4, align: 16, size: 16, type: 'i32', View: Int32Array },\r\n  vec4u: { numElements: 4, align: 16, size: 16, type: 'u32', View: Uint32Array },\r\n  vec4f: { numElements: 4, align: 16, size: 16, type: 'f32', View: Float32Array },\r\n  vec4h: { numElements: 4, align: 8, size: 8, type: 'u16', View: Uint16Array },\r\n\r\n  // AlignOf(vecR)\tSizeOf(array<vecR, C>)\r\n  mat2x2f: { numElements: 4, align: 8, size: 16, type: 'f32', View: Float32Array },\r\n  mat2x2h: { numElements: 4, align: 4, size: 8, type: 'u16', View: Uint16Array },\r\n  mat3x2f: { numElements: 6, align: 8, size: 24, type: 'f32', View: Float32Array },\r\n  mat3x2h: { numElements: 6, align: 4, size: 12, type: 'u16', View: Uint16Array },\r\n  mat4x2f: { numElements: 8, align: 8, size: 32, type: 'f32', View: Float32Array },\r\n  mat4x2h: { numElements: 8, align: 4, size: 16, type: 'u16', View: Uint16Array },\r\n  mat2x3f: { numElements: 8, align: 16, size: 32, pad: [3, 1], type: 'f32', View: Float32Array },\r\n  mat2x3h: { numElements: 8, align: 8, size: 16, pad: [3, 1], type: 'u16', View: Uint16Array },\r\n  mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\r\n  mat3x3h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\r\n  mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: 'f32', View: Float32Array },\r\n  mat4x3h: { numElements: 16, align: 8, size: 32, pad: [3, 1], type: 'u16', View: Uint16Array },\r\n  mat2x4f: { numElements: 8, align: 16, size: 32, type: 'f32', View: Float32Array },\r\n  mat2x4h: { numElements: 8, align: 8, size: 16, type: 'u16', View: Uint16Array },\r\n  mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\r\n  mat3x4h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\r\n  mat4x4f: { numElements: 16, align: 16, size: 64, type: 'f32', View: Float32Array },\r\n  mat4x4h: { numElements: 16, align: 8, size: 32, type: 'u16', View: Uint16Array },\r\n}\r\n\r\n// from https://github.com/greggman/webgpu-utils/blob/main/src/buffer-views.ts\r\n/**\r\n * Get the correct {@link BufferLayout | buffer layout} for given {@link WGSLVariableType | variable type}\r\n * @param bufferType - [{@link WGSLVariableType | variable type} to use\r\n * @returns - the ={@link BufferLayout | buffer layout}\r\n */\r\nexport const getBufferLayout = (bufferType: WGSLVariableType): BufferLayout => {\r\n  return bufferLayouts[bufferType]\r\n}\r\n\r\n/**\r\n * Get the correct WGSL variable declaration code fragment based on the given {@link BufferBinding}\r\n * @param binding - {@link BufferBinding} to use\r\n * @returns - WGSL variable declaration code fragment\r\n */\r\nexport const getBindingWGSLVarType = (binding: BufferBinding): string => {\r\n  return (() => {\r\n    switch (binding.bindingType) {\r\n      case 'storage':\r\n        return `var<${binding.bindingType}, ${binding.options.access}>`\r\n      case 'uniform':\r\n      default:\r\n        return 'var<uniform>'\r\n    }\r\n  })()\r\n}\r\n\r\n/**\r\n * Get the correct WGSL variable declaration code fragment based on the given {@link TextureBinding}\r\n * @param binding - {@link TextureBinding} to use\r\n * @returns - WGSL variable declaration code fragment\r\n */\r\nexport const getTextureBindingWGSLVarType = (binding: TextureBinding): string => {\r\n  if (binding.bindingType === 'externalTexture') {\r\n    return `var ${binding.name}: texture_external;`\r\n  }\r\n\r\n  return binding.bindingType === 'storage'\r\n    ? `var ${binding.name}: texture_storage_${binding.options.viewDimension.replace('-', '_')}<${\r\n        binding.options.format\r\n      }, ${binding.options.access}>;`\r\n    : binding.bindingType === 'depth'\r\n    ? `var ${binding.name}: texture_depth${\r\n        binding.options.multisampled ? '_multisampled' : ''\r\n      }_${binding.options.viewDimension.replace('-', '_')};`\r\n    : `var ${binding.name}: texture${\r\n        binding.options.multisampled ? '_multisampled' : ''\r\n      }_${binding.options.viewDimension.replace('-', '_')}<f32>;`\r\n}\r\n\r\n/**\r\n * Get the correct {@link GPUBindGroupLayout | bind group layout} resource type based on the given {@link core/bindings/Binding.BindingType | binding type}\r\n * @param binding - {@link BufferBinding | buffer binding} to use\r\n * @returns - {@link GPUBindGroupLayout | bind group layout} resource type\r\n */\r\nexport const getBindGroupLayoutBindingType = (binding: BufferBinding): GPUBufferBindingType => {\r\n  if (binding.bindingType === 'storage' && binding.options.access === 'read_write') {\r\n    return 'storage'\r\n  } else if (binding.bindingType === 'storage') {\r\n    return 'read-only-storage'\r\n  } else {\r\n    return 'uniform'\r\n  }\r\n}\r\n\r\n/**\r\n * Get the correct {@link GPUBindGroupLayout} resource type based on the given {@link core/bindings/Binding.BindingType | texture binding type}\r\n * @param binding - {@link TextureBinding | texture binding} to use\r\n * @returns - {@link GPUBindGroupLayout} resource type\r\n */\r\nexport const getBindGroupLayoutTextureBindingType = (\r\n  binding: TextureBinding\r\n): GPUTextureBindingLayout | GPUExternalTextureBindingLayout | GPUStorageTextureBindingLayout | null => {\r\n  return (() => {\r\n    switch (binding.bindingType) {\r\n      case 'externalTexture':\r\n        return { externalTexture: {} }\r\n      case 'storage':\r\n        return {\r\n          storageTexture: {\r\n            format: binding.options.format,\r\n            viewDimension: binding.options.viewDimension,\r\n          } as GPUStorageTextureBindingLayout,\r\n        }\r\n      case 'texture':\r\n        return {\r\n          texture: {\r\n            multisampled: binding.options.multisampled,\r\n            viewDimension: binding.options.viewDimension,\r\n            sampleType: binding.options.multisampled ? 'unfilterable-float' : 'float',\r\n          } as GPUTextureBindingLayout,\r\n        }\r\n      case 'depth':\r\n        return {\r\n          texture: {\r\n            multisampled: binding.options.multisampled,\r\n            viewDimension: binding.options.viewDimension,\r\n            sampleType: 'depth',\r\n          } as GPUTextureBindingLayout,\r\n        }\r\n      default:\r\n        return null\r\n    }\r\n  })()\r\n}\r\n\r\n/**\r\n * Get the correct {@link TextureBinding | texture binding} cache key.\r\n * @param binding - {@link TextureBinding | texture binding} to use\r\n * @returns - binding cache key\r\n */\r\nexport const getBindGroupLayoutTextureBindingCacheKey = (binding: TextureBinding): string => {\r\n  return (() => {\r\n    switch (binding.bindingType) {\r\n      case 'externalTexture':\r\n        return `externalTexture,${binding.visibility},`\r\n      case 'storage':\r\n        return `storageTexture,${binding.options.format},${binding.options.viewDimension},${binding.visibility},`\r\n      case 'texture':\r\n        return `texture,${binding.options.multisampled},${binding.options.viewDimension},${\r\n          binding.options.multisampled ? 'unfilterable-float' : 'float'\r\n        },${binding.visibility},`\r\n      case 'depth':\r\n        return `depthTexture,${binding.options.format},${binding.options.viewDimension},${binding.visibility},`\r\n      default:\r\n        return `${binding.visibility},`\r\n    }\r\n  })()\r\n}\r\n","import { toCamelCase } from '../../utils/utils'\r\nimport { MaterialShadersType } from '../../types/Materials'\r\nimport { TextureBinding } from './TextureBinding'\r\nimport { SamplerBinding } from './SamplerBinding'\r\nimport { getBindingVisibility } from './utils'\r\n\r\n/** Defines all kind of buffer binding types */\r\nexport type BufferBindingType = 'uniform' | 'storage'\r\n/** Defines all kind of texture binding types */\r\nexport type TextureBindingType = 'texture' | 'storage' | 'depth'\r\n/** Defines all kind of DOM texture binding types */\r\nexport type DOMTextureBindingType = 'externalTexture' | TextureBindingType\r\n/** Defines all kind of sampler binding types */\r\nexport type SamplerBindingType = 'sampler'\r\n/** Defines all kind of binding types  */\r\nexport type BindingType = BufferBindingType | DOMTextureBindingType | SamplerBindingType\r\n\r\n// see https://www.w3.org/TR/WGSL/#memory-access-mode\r\n/** Defines buffer binding memory access types (read only or read/write) */\r\nexport type BufferBindingMemoryAccessType = 'read' | 'read_write'\r\n/** Defines texture binding memory access types (read only, write only or read/write) */\r\nexport type BindingMemoryAccessType = BufferBindingMemoryAccessType | 'write'\r\n\r\n/**\r\n * Defines all kind of {@link Binding} that are related to textures or samplers\r\n */\r\nexport type TextureSamplerBindings = TextureBinding | SamplerBinding\r\n\r\n/**\r\n * An object defining all possible {@link Binding} class instancing parameters\r\n */\r\nexport interface BindingParams {\r\n  /** {@link Binding} label */\r\n  label?: string\r\n  /** {@link Binding} name/key */\r\n  name?: string\r\n  /** {@link BindingType | binding type} to use with this {@link Binding} */\r\n  bindingType?: BindingType\r\n  /** {@link Binding} variables shaders visibility as an array of {@link MaterialShadersType | shaders types names} */\r\n  visibility?: MaterialShadersType[]\r\n}\r\n\r\n/**\r\n * Used as a shell to build actual bindings upon, like {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}, {@link core/bindings/WritableBufferBinding.WritableBufferBinding | WritableBufferBinding}, {@link TextureBinding} and {@link SamplerBinding}.\r\n *\r\n * Ultimately the goal of a {@link Binding} element is to provide correct resources for {@link GPUDevice.createBindGroupLayout().descriptor.entries | GPUBindGroupLayoutEntry} and {@link GPUDevice.createBindGroup().descriptor.entries | GPUBindGroupEntry}\r\n *\r\n * ## WGSL\r\n *\r\n * Each {@link Binding} creates its own WGSL code snippet variable declaration, using structured types or not.\r\n */\r\nexport class Binding {\r\n  /** The label of the {@link Binding} */\r\n  label: string\r\n  /** The name/key of the {@link Binding} */\r\n  name: string\r\n  /** The binding type of the {@link Binding} */\r\n  bindingType: BindingType\r\n  /** The visibility of the {@link Binding} in the shaders */\r\n  visibility: GPUShaderStageFlags\r\n  /** Options used to create this {@link Binding} */\r\n  options: BindingParams\r\n\r\n  /** Flag indicating whether we should recreate the parentMesh {@link core/bindGroups/BindGroup.BindGroup#bindGroup | bind group}, usually when a resource has changed */\r\n  shouldResetBindGroup: boolean\r\n  /** Flag indicating whether we should recreate the parentMesh {@link core/bindGroups/BindGroup.BindGroup#bindGroupLayout | GPU bind group layout}, usually when a resource layout has changed */\r\n  shouldResetBindGroupLayout: boolean\r\n\r\n  /** A cache key allowing to get / set bindings from the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#bufferBindings | device manager map cache}. Used for {@link core/bindings/BufferBinding.BufferBinding | BufferBinding} only at the moment. */\r\n  cacheKey: string\r\n\r\n  /**\r\n   * Binding constructor\r\n   * @param parameters - {@link BindingParams | parameters} used to create our {@link Binding}\r\n   */\r\n  constructor({\r\n    label = 'Uniform',\r\n    name = 'uniform',\r\n    bindingType = 'uniform',\r\n    visibility = ['vertex', 'fragment', 'compute'],\r\n  }: BindingParams) {\r\n    this.label = label\r\n    this.name = toCamelCase(name)\r\n    this.bindingType = bindingType\r\n\r\n    this.visibility = getBindingVisibility(visibility)\r\n\r\n    this.options = {\r\n      label,\r\n      name,\r\n      bindingType,\r\n      visibility,\r\n    }\r\n\r\n    this.shouldResetBindGroup = false\r\n    this.shouldResetBindGroupLayout = false\r\n\r\n    this.cacheKey = `${bindingType},${this.visibility},`\r\n  }\r\n}\r\n","/**\r\n * Really basic 2D vector class used for vector calculations\r\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Vector2.js\r\n * @see http://glmatrix.net/docs/vec2.js.html\r\n */\r\nexport class Vec2 {\r\n  /** The type of the {@link Vec2} */\r\n  type: string\r\n  /** X component of our {@link Vec2} */\r\n  private _x: number\r\n  /** Y component of our {@link Vec2} */\r\n  private _y: number\r\n\r\n  /** function assigned to the {@link onChange} callback */\r\n  _onChangeCallback?(): void\r\n\r\n  /**\r\n   * Vec2 constructor\r\n   * @param x - X component of our {@link Vec2}\r\n   * @param y - Y component of our {@link Vec2}\r\n   */\r\n  constructor(x = 0, y = x) {\r\n    this.type = 'Vec2'\r\n\r\n    this._x = x\r\n    this._y = y\r\n  }\r\n\r\n  /**\r\n   * Get the X component of the {@link Vec2}\r\n   */\r\n  get x(): number {\r\n    return this._x\r\n  }\r\n\r\n  /**\r\n   * Set the X component of the {@link Vec2}\r\n   * Can trigger {@link onChange} callback\r\n   * @param value - X component to set\r\n   */\r\n  set x(value: number) {\r\n    const changed = value !== this._x\r\n    this._x = value\r\n    changed && this._onChangeCallback && this._onChangeCallback()\r\n  }\r\n\r\n  /**\r\n   * Get the Y component of the {@link Vec2}\r\n   */\r\n  get y(): number {\r\n    return this._y\r\n  }\r\n\r\n  /**\r\n   * Set the Y component of the {@link Vec2}\r\n   * Can trigger {@link onChange} callback\r\n   * @param value - Y component to set\r\n   */\r\n  set y(value: number) {\r\n    const changed = value !== this._y\r\n    this._y = value\r\n    changed && this._onChangeCallback && this._onChangeCallback()\r\n  }\r\n\r\n  /**\r\n   * Called when at least one component of the {@link Vec2} has changed\r\n   * @param callback - callback to run when at least one component of the {@link Vec2} has changed\r\n   * @returns - our {@link Vec2}\r\n   */\r\n  onChange(callback: () => void): Vec2 {\r\n    if (callback) {\r\n      this._onChangeCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Vec2} from values\r\n   * @param x - new X component to set\r\n   * @param y - new Y component to set\r\n   * @returns - this {@link Vec2} after being set\r\n   */\r\n  set(x = 0, y = x): Vec2 {\r\n    this.x = x\r\n    this.y = y\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Add a {@link Vec2} to this {@link Vec2}\r\n   * @param vector - {@link Vec2} to add\r\n   * @returns - this {@link Vec2} after addition\r\n   */\r\n  add(vector: Vec2 = new Vec2()): Vec2 {\r\n    this.x += vector.x\r\n    this.y += vector.y\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Add a scalar to all the components of this {@link Vec2}\r\n   * @param value - number to add\r\n   * @returns - this {@link Vec2} after addition\r\n   */\r\n  addScalar(value = 0): Vec2 {\r\n    this.x += value\r\n    this.y += value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Subtract a {@link Vec2} from this {@link Vec2}\r\n   * @param vector - {@link Vec2} to subtract\r\n   * @returns - this {@link Vec2} after subtraction\r\n   */\r\n  sub(vector: Vec2 = new Vec2()): Vec2 {\r\n    this.x -= vector.x\r\n    this.y -= vector.y\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Subtract a scalar to all the components of this {@link Vec2}\r\n   * @param value - number to subtract\r\n   * @returns - this {@link Vec2} after subtraction\r\n   */\r\n  subScalar(value = 0): Vec2 {\r\n    this.x -= value\r\n    this.y -= value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Multiply a {@link Vec2} with this {@link Vec2}\r\n   * @param vector - {@link Vec2} to multiply with\r\n   * @returns - this {@link Vec2} after multiplication\r\n   */\r\n  multiply(vector: Vec2 = new Vec2(1)): Vec2 {\r\n    this.x *= vector.x\r\n    this.y *= vector.y\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Multiply all components of this {@link Vec2} with a scalar\r\n   * @param value - number to multiply with\r\n   * @returns - this {@link Vec2} after multiplication\r\n   */\r\n  multiplyScalar(value = 1): Vec2 {\r\n    this.x *= value\r\n    this.y *= value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Divide a {@link Vec2} with this {@link Vec2}\r\n   * @param vector - {@link Vec2} to divide with\r\n   * @returns - this {@link Vec2} after division\r\n   */\r\n  divide(vector: Vec2 = new Vec2(1)): Vec2 {\r\n    this.x /= vector.x\r\n    this.y /= vector.y\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Divide all components of this {@link Vec2} with a scalar\r\n   * @param value - number to divide with\r\n   * @returns - this {@link Vec2} after division\r\n   */\r\n  divideScalar(value = 1): Vec2 {\r\n    this.x /= value\r\n    this.y /= value\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Copy a {@link Vec2} into this {@link Vec2}\r\n   * @param vector - {@link Vec2} to copy\r\n   * @returns - this {@link Vec2} after copy\r\n   */\r\n  copy(vector: Vec2 = new Vec2()): Vec2 {\r\n    this.x = vector.x\r\n    this.y = vector.y\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Clone this {@link Vec2}\r\n   * @returns - cloned {@link Vec2}\r\n   */\r\n  clone(): Vec2 {\r\n    return new Vec2(this.x, this.y)\r\n  }\r\n\r\n  /**\r\n   * Apply max values to this {@link Vec2} components\r\n   * @param vector - {@link Vec2} representing max values\r\n   * @returns - {@link Vec2} with max values applied\r\n   */\r\n  max(vector: Vec2 = new Vec2()): Vec2 {\r\n    this.x = Math.max(this.x, vector.x)\r\n    this.y = Math.max(this.y, vector.y)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Apply min values to this {@link Vec2} components\r\n   * @param vector - {@link Vec2} representing min values\r\n   * @returns - {@link Vec2} with min values applied\r\n   */\r\n  min(vector: Vec2 = new Vec2()): Vec2 {\r\n    this.x = Math.min(this.x, vector.x)\r\n    this.y = Math.min(this.y, vector.y)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Clamp this {@link Vec2} components by min and max {@link Vec2} vectors\r\n   * @param min - minimum {@link Vec2} components to compare with\r\n   * @param max - maximum {@link Vec2} components to compare with\r\n   * @returns - clamped {@link Vec2}\r\n   */\r\n  clamp(min: Vec2 = new Vec2(), max: Vec2 = new Vec2()): Vec2 {\r\n    this.x = Math.max(min.x, Math.min(max.x, this.x))\r\n    this.y = Math.max(min.y, Math.min(max.y, this.y))\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Check if 2 {@link Vec2} are equal\r\n   * @param vector - {@link Vec2} to compare\r\n   * @returns - whether the {@link Vec2} are equals or not\r\n   */\r\n  equals(vector: Vec2 = new Vec2()): boolean {\r\n    return this.x === vector.x && this.y === vector.y\r\n  }\r\n\r\n  /**\r\n   * Get the square length of this {@link Vec2}\r\n   * @returns - square length of this {@link Vec2}\r\n   */\r\n  lengthSq(): number {\r\n    return this.x * this.x + this.y * this.y\r\n  }\r\n\r\n  /**\r\n   * Get the length of this {@link Vec2}\r\n   * @returns - length of this {@link Vec2}\r\n   */\r\n  length(): number {\r\n    return Math.sqrt(this.lengthSq())\r\n  }\r\n\r\n  /**\r\n   * Normalize this {@link Vec2}\r\n   * @returns - normalized {@link Vec2}\r\n   */\r\n  normalize(): Vec2 {\r\n    // normalize\r\n    let len = this.x * this.x + this.y * this.y\r\n    if (len > 0) {\r\n      len = 1 / Math.sqrt(len)\r\n    }\r\n    this.x *= len\r\n    this.y *= len\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Calculate the dot product of 2 {@link Vec2}\r\n   * @param vector - {@link Vec2} to use for dot product\r\n   * @returns - dot product of the 2 {@link Vec2}\r\n   */\r\n  dot(vector: Vec2 = new Vec2()): number {\r\n    return this.x * vector.x + this.y * vector.y\r\n  }\r\n\r\n  /**\r\n   * Calculate the linear interpolation of this {@link Vec2} by given {@link Vec2} and alpha, where alpha is the percent distance along the line\r\n   * @param vector - {@link Vec2} to interpolate towards\r\n   * @param [alpha=1] - interpolation factor in the [0, 1] interval\r\n   * @returns - this {@link Vec2} after linear interpolation\r\n   */\r\n  lerp(vector: Vec2 = new Vec2(), alpha = 1): Vec2 {\r\n    this.x += (vector.x - this.x) * alpha\r\n    this.y += (vector.y - this.y) * alpha\r\n\r\n    return this\r\n  }\r\n}\r\n","import { Vec3 } from './Vec3'\nimport { Mat4 } from './Mat4'\n\n/** Defines all possible rotations axis orders */\nexport type AxisOrder = 'XYZ' | 'XZY' | 'YXZ' | 'YZX' | 'ZXY' | 'ZYX'\n\n/**\n * Really basic quaternion class used for 3D rotation calculations\n * @see https://github.com/mrdoosb/three.js/blob/dev/src/math/Quaternion.js\n */\nexport class Quat {\n  /** The type of the {@link Quat} */\n  type: string\n  /** Our quaternion array */\n  elements: Float32Array\n  /** Rotation axis order */\n  axisOrder: AxisOrder\n\n  /**\n   * Quat constructor\n   * @param [elements] - initial array to use\n   * @param [axisOrder='XYZ'] - axis order to use\n   */\n  constructor(elements: Float32Array = new Float32Array([0, 0, 0, 1]), axisOrder: AxisOrder = 'XYZ') {\n    this.type = 'Quat'\n    this.elements = elements\n    // rotation axis order\n    this.axisOrder = axisOrder\n  }\n\n  /**\n   * Sets the {@link Quat} values from an array\n   * @param array - an array of at least 4 elements\n   * @returns - this {@link Quat} after being set\n   */\n  setFromArray(array: Float32Array | number[] = new Float32Array([0, 0, 0, 1])): Quat {\n    this.elements[0] = array[0]\n    this.elements[1] = array[1]\n    this.elements[2] = array[2]\n    this.elements[3] = array[3]\n\n    return this\n  }\n\n  /**\n   * Sets the {@link Quat} axis order\n   * @param axisOrder - axis order to use\n   * @returns - this {@link Quat} after axis order has been set\n   */\n  setAxisOrder(axisOrder: AxisOrder | string = 'XYZ'): Quat {\n    // force uppercase for strict equality tests\n    axisOrder = axisOrder.toUpperCase()\n\n    switch (axisOrder) {\n      case 'XYZ':\n      case 'YXZ':\n      case 'ZXY':\n      case 'ZYX':\n      case 'YZX':\n      case 'XZY':\n        this.axisOrder = axisOrder\n        break\n      default:\n        // apply a default axis order\n        this.axisOrder = 'XYZ'\n    }\n\n    return this\n  }\n\n  /**\n   * Copy a {@link Quat} into this {@link Quat}\n   * @param quaternion - {@link Quat} to copy\n   * @returns - this {@link Quat} after copy\n   */\n  copy(quaternion: Quat = new Quat()): Quat {\n    this.elements.set(quaternion.elements)\n    this.axisOrder = quaternion.axisOrder\n\n    return this\n  }\n\n  /**\n   * Clone a {@link Quat}\n   * @returns - cloned {@link Quat}\n   */\n  clone(): Quat {\n    return new Quat().copy(this)\n  }\n\n  /**\n   * Check if 2 {@link Quat} are equal\n   * @param quaternion - {@link Quat} to check against\n   * @returns - whether the {@link Quat} are equal or not\n   */\n  equals(quaternion: Quat = new Quat()): boolean {\n    return (\n      this.elements[0] === quaternion.elements[0] &&\n      this.elements[1] === quaternion.elements[1] &&\n      this.elements[2] === quaternion.elements[2] &&\n      this.elements[3] === quaternion.elements[3] &&\n      this.axisOrder === quaternion.axisOrder\n    )\n  }\n\n  /**\n   * Sets a rotation {@link Quat} using Euler angles {@link Vec3 | vector} and its axis order\n   * @param vector - rotation {@link Vec3 | vector} to set our {@link Quat} from\n   * @returns - {@link Quat} after having applied the rotation\n   */\n  setFromVec3(vector: Vec3): Quat {\n    const ax = vector.x * 0.5\n    const ay = vector.y * 0.5\n    const az = vector.z * 0.5\n\n    const cosx = Math.cos(ax)\n    const cosy = Math.cos(ay)\n    const cosz = Math.cos(az)\n    const sinx = Math.sin(ax)\n    const siny = Math.sin(ay)\n    const sinz = Math.sin(az)\n\n    // XYZ order\n    if (this.axisOrder === 'XYZ') {\n      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz\n    } else if (this.axisOrder === 'YXZ') {\n      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz\n    } else if (this.axisOrder === 'ZXY') {\n      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz\n    } else if (this.axisOrder === 'ZYX') {\n      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz\n    } else if (this.axisOrder === 'YZX') {\n      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz\n    } else if (this.axisOrder === 'XZY') {\n      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz\n    }\n\n    return this\n  }\n\n  /**\n   * Set a {@link Quat} from a rotation axis {@link Vec3 | vector} and an angle\n   * @param axis - normalized {@link Vec3 | vector} around which to rotate\n   * @param angle - angle (in radians) to rotate\n   * @returns - {@link Quat} after having applied the rotation\n   */\n  setFromAxisAngle(axis: Vec3, angle = 0): Quat {\n    // https://github.com/mrdoob/three.js/blob/dev/src/math/Quaternion.js#L275\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    // assumes axis is normalized\n\n    const halfAngle = angle / 2,\n      s = Math.sin(halfAngle)\n\n    this.elements[0] = axis.x * s\n    this.elements[1] = axis.y * s\n    this.elements[2] = axis.z * s\n    this.elements[3] = Math.cos(halfAngle)\n\n    return this\n  }\n\n  /**\n   * Set a {@link Quat} from a rotation {@link Mat4 | matrix}\n   * @param matrix - rotation {@link Mat4 | matrix} to use\n   * @returns - {@link Quat} after having applied the rotation\n   */\n  setFromRotationMatrix(matrix: Mat4): Quat {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const te = matrix.elements,\n      m11 = te[0],\n      m12 = te[4],\n      m13 = te[8],\n      m21 = te[1],\n      m22 = te[5],\n      m23 = te[9],\n      m31 = te[2],\n      m32 = te[6],\n      m33 = te[10],\n      trace = m11 + m22 + m33\n\n    if (trace > 0) {\n      const s = 0.5 / Math.sqrt(trace + 1.0)\n\n      this.elements[3] = 0.25 / s\n      this.elements[0] = (m32 - m23) * s\n      this.elements[1] = (m13 - m31) * s\n      this.elements[2] = (m21 - m12) * s\n    } else if (m11 > m22 && m11 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33)\n\n      this.elements[3] = (m32 - m23) / s\n      this.elements[0] = 0.25 * s\n      this.elements[1] = (m12 + m21) / s\n      this.elements[2] = (m13 + m31) / s\n    } else if (m22 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33)\n\n      this.elements[3] = (m13 - m31) / s\n      this.elements[0] = (m12 + m21) / s\n      this.elements[1] = 0.25 * s\n      this.elements[2] = (m23 + m32) / s\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22)\n\n      this.elements[3] = (m21 - m12) / s\n      this.elements[0] = (m13 + m31) / s\n      this.elements[1] = (m23 + m32) / s\n      this.elements[2] = 0.25 * s\n    }\n\n    return this\n  }\n\n  /**\n   * Get the square length of this {@link Quat}.\n   * @returns - square length of this {@link Quat}.\n   */\n  lengthSq() {\n    return (\n      this.elements[0] * this.elements[0] +\n      this.elements[1] * this.elements[1] +\n      this.elements[2] * this.elements[2] +\n      this.elements[3] * this.elements[3]\n    )\n  }\n\n  /**\n   * Get the length of this {@link Quat}.\n   * @returns - length of this {@link Quat}.\n   */\n  length() {\n    return Math.sqrt(this.lengthSq())\n  }\n\n  /**\n   * Normalize this {@link Quat}.\n   * @returns - normalized {@link Quat}.\n   */\n  normalize() {\n    let l = this.length()\n\n    if (l === 0) {\n      this.elements[0] = 0\n      this.elements[1] = 0\n      this.elements[2] = 0\n      this.elements[3] = 1\n    } else {\n      l = 1 / l\n\n      this.elements[0] = this.elements[0] * l\n      this.elements[1] = this.elements[1] * l\n      this.elements[2] = this.elements[2] * l\n      this.elements[3] = this.elements[3] * l\n    }\n\n    return this\n  }\n\n  /**\n   * Calculate the spherical linear interpolation of this {@link Quat} by given {@link Quat} and alpha, where alpha is the percent distance.\n   * @param quat - {@link Quat} to interpolate towards.\n   * @param alpha - spherical interpolation factor in the [0, 1] interval.\n   * @returns - this {@link Quat} after spherical linear interpolation.\n   */\n  slerp(quat = new Quat(), alpha = 0) {\n    if (alpha === 0) return this\n    if (alpha === 1) return this.copy(quat)\n\n    const x = this.elements[0],\n      y = this.elements[1],\n      z = this.elements[2],\n      w = this.elements[3]\n\n    // http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/\n\n    let cosHalfTheta = w * quat.elements[3] + x * quat.elements[0] + y * quat.elements[1] + z * quat.elements[2]\n\n    if (cosHalfTheta < 0) {\n      this.elements[3] = -quat.elements[3]\n      this.elements[0] = -quat.elements[0]\n      this.elements[1] = -quat.elements[1]\n      this.elements[2] = -quat.elements[2]\n\n      cosHalfTheta = -cosHalfTheta\n    } else {\n      this.copy(quat)\n    }\n\n    if (cosHalfTheta >= 1.0) {\n      this.elements[3] = w\n      this.elements[0] = x\n      this.elements[1] = y\n      this.elements[2] = z\n\n      return this\n    }\n\n    const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta\n\n    if (sqrSinHalfTheta <= Number.EPSILON) {\n      const s = 1 - alpha\n      this.elements[3] = s * w + alpha * this.elements[3]\n      this.elements[0] = s * x + alpha * this.elements[0]\n      this.elements[1] = s * y + alpha * this.elements[1]\n      this.elements[2] = s * z + alpha * this.elements[2]\n\n      this.normalize()\n\n      return this\n    }\n\n    const sinHalfTheta = Math.sqrt(sqrSinHalfTheta)\n    const halfTheta = Math.atan2(sinHalfTheta, cosHalfTheta)\n    const ratioA = Math.sin((1 - alpha) * halfTheta) / sinHalfTheta,\n      ratioB = Math.sin(alpha * halfTheta) / sinHalfTheta\n\n    this.elements[3] = w * ratioA + this.elements[3] * ratioB\n    this.elements[0] = x * ratioA + this.elements[0] * ratioB\n    this.elements[1] = y * ratioA + this.elements[1] * ratioB\n    this.elements[2] = z * ratioA + this.elements[2] * ratioB\n\n    return this\n  }\n}\n","import { Mat4 } from './Mat4'\nimport { Quat } from './Quat'\nimport { Camera } from '../core/camera/Camera'\n\n/**\n * Really basic 3D vector class used for vector calculations\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Vector3.js\n * @see http://glmatrix.net/docs/vec3.js.html\n */\nexport class Vec3 {\n  /** The type of the {@link Vec3} */\n  type: string\n  /** X component of our {@link Vec3} */\n  private _x: number\n  /** Y component of our {@link Vec3} */\n  private _y: number\n  /** Z component of our {@link Vec3} */\n  private _z: number\n\n  /** function assigned to the {@link onChange} callback */\n  _onChangeCallback?(): void\n\n  /**\n   * Vec3 constructor\n   * @param x - X component of our {@link Vec3}\n   * @param y - Y component of our {@link Vec3}\n   * @param z - Z component of our {@link Vec3}\n   */\n  constructor(x = 0, y = x, z = x) {\n    this.type = 'Vec3'\n\n    this._x = x\n    this._y = y\n    this._z = z\n  }\n\n  /**\n   * Get the X component of the {@link Vec3}\n   */\n  get x(): number {\n    return this._x\n  }\n\n  /**\n   * Set the X component of the {@link Vec3}\n   * Can trigger {@link onChange} callback\n   * @param value - X component to set\n   */\n  set x(value: number) {\n    const changed = value !== this._x\n    this._x = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Get the Y component of the {@link Vec3}\n   */\n  get y(): number {\n    return this._y\n  }\n\n  /**\n   * Set the Y component of the {@link Vec3}\n   * Can trigger {@link onChange} callback\n   * @param value - Y component to set\n   */\n  set y(value: number) {\n    const changed = value !== this._y\n    this._y = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Get the Z component of the {@link Vec3}\n   */\n  get z(): number {\n    return this._z\n  }\n\n  /**\n   * Set the Z component of the {@link Vec3}\n   * Can trigger {@link onChange} callback\n   * @param value - Z component to set\n   */\n  set z(value: number) {\n    const changed = value !== this._z\n    this._z = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Called when at least one component of the {@link Vec3} has changed\n   * @param callback - callback to run when at least one component of the {@link Vec3} has changed\n   * @returns - our {@link Vec3}\n   */\n  onChange(callback: () => void): Vec3 {\n    if (callback) {\n      this._onChangeCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Set the {@link Vec3} from values\n   * @param x - new X component to set\n   * @param y - new Y component to set\n   * @param z - new Z component to set\n   * @returns - this {@link Vec3} after being set\n   */\n  set(x = 0, y = x, z = x): Vec3 {\n    this.x = x\n    this.y = y\n    this.z = z\n\n    return this\n  }\n\n  /**\n   * Add a {@link Vec3} to this {@link Vec3}\n   * @param vector - {@link Vec3} to add\n   * @returns - this {@link Vec3} after addition\n   */\n  add(vector: Vec3 = new Vec3()): Vec3 {\n    this.x += vector.x\n    this.y += vector.y\n    this.z += vector.z\n\n    return this\n  }\n\n  /**\n   * Add a scalar to all the components of this {@link Vec3}\n   * @param value - number to add\n   * @returns - this {@link Vec3} after addition\n   */\n  addScalar(value = 0): Vec3 {\n    this.x += value\n    this.y += value\n    this.z += value\n\n    return this\n  }\n\n  /**\n   * Subtract a {@link Vec3} from this {@link Vec3}\n   * @param vector - {@link Vec3} to subtract\n   * @returns - this {@link Vec3} after subtraction\n   */\n  sub(vector: Vec3 = new Vec3()): Vec3 {\n    this.x -= vector.x\n    this.y -= vector.y\n    this.z -= vector.z\n\n    return this\n  }\n\n  /**\n   * Subtract a scalar to all the components of this {@link Vec3}\n   * @param value - number to subtract\n   * @returns - this {@link Vec3} after subtraction\n   */\n  subScalar(value = 0): Vec3 {\n    this.x -= value\n    this.y -= value\n    this.z -= value\n\n    return this\n  }\n\n  /**\n   * Multiply a {@link Vec3} with this {@link Vec3}\n   * @param vector - {@link Vec3} to multiply with\n   * @returns - this {@link Vec3} after multiplication\n   */\n  multiply(vector: Vec3 = new Vec3(1)): Vec3 {\n    this.x *= vector.x\n    this.y *= vector.y\n    this.z *= vector.z\n\n    return this\n  }\n\n  /**\n   * Multiply all components of this {@link Vec3} with a scalar\n   * @param value - number to multiply with\n   * @returns - this {@link Vec3} after multiplication\n   */\n  multiplyScalar(value = 1): Vec3 {\n    this.x *= value\n    this.y *= value\n    this.z *= value\n\n    return this\n  }\n\n  /**\n   * Divide a {@link Vec3} with this {@link Vec3}\n   * @param vector - {@link Vec3} to divide with\n   * @returns - this {@link Vec3} after division\n   */\n  divide(vector: Vec3 = new Vec3(1)): Vec3 {\n    this.x /= vector.x\n    this.y /= vector.y\n    this.z /= vector.z\n\n    return this\n  }\n\n  /**\n   * Divide all components of this {@link Vec3} with a scalar\n   * @param value - number to divide with\n   * @returns - this {@link Vec3} after division\n   */\n  divideScalar(value = 1): Vec3 {\n    this.x /= value\n    this.y /= value\n    this.z /= value\n\n    return this\n  }\n\n  /**\n   * Copy a {@link Vec3} into this {@link Vec3}\n   * @param vector - {@link Vec3} to copy\n   * @returns - this {@link Vec3} after copy\n   */\n  copy(vector: Vec3 = new Vec3()): Vec3 {\n    this.x = vector.x\n    this.y = vector.y\n    this.z = vector.z\n\n    return this\n  }\n\n  /**\n   * Clone this {@link Vec3}\n   * @returns - cloned {@link Vec3}\n   */\n  clone(): Vec3 {\n    return new Vec3(this.x, this.y, this.z)\n  }\n\n  /**\n   * Apply max values to this {@link Vec3} components\n   * @param vector - {@link Vec3} representing max values\n   * @returns - {@link Vec3} with max values applied\n   */\n  max(vector: Vec3 = new Vec3()): Vec3 {\n    this.x = Math.max(this.x, vector.x)\n    this.y = Math.max(this.y, vector.y)\n    this.z = Math.max(this.z, vector.z)\n\n    return this\n  }\n\n  /**\n   * Apply min values to this {@link Vec3} components\n   * @param vector - {@link Vec3} representing min values\n   * @returns - {@link Vec3} with min values applied\n   */\n  min(vector: Vec3 = new Vec3()): Vec3 {\n    this.x = Math.min(this.x, vector.x)\n    this.y = Math.min(this.y, vector.y)\n    this.z = Math.min(this.z, vector.z)\n\n    return this\n  }\n\n  /**\n   * Clamp this {@link Vec3} components by min and max {@link Vec3} vectors\n   * @param min - minimum {@link Vec3} components to compare with\n   * @param max - maximum {@link Vec3} components to compare with\n   * @returns - clamped {@link Vec3}\n   */\n  clamp(min: Vec3 = new Vec3(), max: Vec3 = new Vec3()): Vec3 {\n    this.x = Math.max(min.x, Math.min(max.x, this.x))\n    this.y = Math.max(min.y, Math.min(max.y, this.y))\n    this.z = Math.max(min.z, Math.min(max.z, this.z))\n\n    return this\n  }\n\n  /**\n   * Check if 2 {@link Vec3} are equal\n   * @param vector - {@link Vec3} to compare\n   * @returns - whether the {@link Vec3} are equals or not\n   */\n  equals(vector: Vec3 = new Vec3()): boolean {\n    return this.x === vector.x && this.y === vector.y && this.z === vector.z\n  }\n\n  /**\n   * Get the square length of this {@link Vec3}\n   * @returns - square length of this {@link Vec3}\n   */\n  lengthSq(): number {\n    return this.x * this.x + this.y * this.y + this.z * this.z\n  }\n\n  /**\n   * Get the length of this {@link Vec3}\n   * @returns - length of this {@link Vec3}\n   */\n  length(): number {\n    return Math.sqrt(this.lengthSq())\n  }\n\n  /**\n   * Get the euclidian distance between this {@link Vec3} and another {@link Vec3}\n   * @param vector - {@link Vec3} to use for distance calculation\n   * @returns - euclidian distance\n   */\n  distance(vector: Vec3 = new Vec3()): number {\n    return Math.hypot(vector.x - this.x, vector.y - this.y, vector.z - this.z)\n  }\n\n  /**\n   * Normalize this {@link Vec3}\n   * @returns - normalized {@link Vec3}\n   */\n  normalize(): Vec3 {\n    // normalize\n    let len = this.lengthSq()\n    if (len > 0) {\n      len = 1 / Math.sqrt(len)\n    }\n    this.x *= len\n    this.y *= len\n    this.z *= len\n\n    return this\n  }\n\n  /**\n   * Calculate the dot product of 2 {@link Vec3}\n   * @param vector - {@link Vec3} to use for dot product\n   * @returns - dot product of the 2 {@link Vec3}\n   */\n  dot(vector: Vec3 = new Vec3()): number {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z\n  }\n\n  /**\n   * Get the cross product of this {@link Vec3} with another {@link Vec3}\n   * @param vector - {@link Vec3} to use for cross product\n   * @returns - this {@link Vec3} after cross product\n   */\n  cross(vector: Vec3 = new Vec3()): Vec3 {\n    return this.crossVectors(this, vector)\n  }\n\n  /**\n   * Set this {@link Vec3} as the result of the cross product of two {@link Vec3}\n   * @param a - first {@link Vec3} to use for cross product\n   * @param b - second {@link Vec3} to use for cross product\n   * @returns - this {@link Vec3} after cross product\n   */\n  crossVectors(a: Vec3 = new Vec3(), b: Vec3 = new Vec3()): Vec3 {\n    const ax = a.x,\n      ay = a.y,\n      az = a.z\n    const bx = b.x,\n      by = b.y,\n      bz = b.z\n\n    this.x = ay * bz - az * by\n    this.y = az * bx - ax * bz\n    this.z = ax * by - ay * bx\n\n    return this\n  }\n\n  /**\n   * Calculate the linear interpolation of this {@link Vec3} by given {@link Vec3} and alpha, where alpha is the percent distance along the line\n   * @param vector - {@link Vec3} to interpolate towards\n   * @param alpha - interpolation factor in the [0, 1] interval\n   * @returns - this {@link Vec3} after linear interpolation\n   */\n  lerp(vector: Vec3 = new Vec3(), alpha = 1): Vec3 {\n    this.x += (vector.x - this.x) * alpha\n    this.y += (vector.y - this.y) * alpha\n    this.z += (vector.z - this.z) * alpha\n\n    return this\n  }\n\n  /**\n   * Apply a {@link Mat4 | matrix} to a {@link Vec3}\n   * Useful to convert a position {@link Vec3} from plane local world to webgl space using projection view matrix for example\n   * Source code from: http://glmatrix.net/docs/vec3.js.html\n   * @param matrix - {@link Mat4 | matrix} to use\n   * @returns - this {@link Vec3} after {@link Mat4 | matrix} application\n   */\n  applyMat4(matrix: Mat4): Vec3 {\n    const x = this._x,\n      y = this._y,\n      z = this._z\n    const mArray = matrix.elements\n\n    let w = mArray[3] * x + mArray[7] * y + mArray[11] * z + mArray[15]\n    w = w || 1\n\n    this.x = (mArray[0] * x + mArray[4] * y + mArray[8] * z + mArray[12]) / w\n    this.y = (mArray[1] * x + mArray[5] * y + mArray[9] * z + mArray[13]) / w\n    this.z = (mArray[2] * x + mArray[6] * y + mArray[10] * z + mArray[14]) / w\n\n    return this\n  }\n\n  /**\n   * Set this {@link Vec3} to the translation component of a {@link Mat4 | matrix}.\n   * @param matrix - {@link Mat4 | matrix} to use\n   * @returns - this {@link Vec3} after {@link Mat4 | matrix} application.\n   */\n  setFromMatrixPosition(matrix: Mat4) {\n    const e = matrix.elements\n\n    this.x = e[12]\n    this.y = e[13]\n    this.z = e[14]\n\n    return this\n  }\n\n  /**\n   * Apply a {@link Quat | quaternion} (rotation in 3D space) to this {@link Vec3}\n   * @param quaternion - {@link Quat | quaternion} to use\n   * @returns - this {@link Vec3} with the transformation applied\n   */\n  applyQuat(quaternion: Quat = new Quat()): Vec3 {\n    const x = this.x,\n      y = this.y,\n      z = this.z\n\n    const qx = quaternion.elements[0],\n      qy = quaternion.elements[1],\n      qz = quaternion.elements[2],\n      qw = quaternion.elements[3]\n\n    // t = 2 * cross( q.xyz, v );\n    const tx = 2 * (qy * z - qz * y)\n    const ty = 2 * (qz * x - qx * z)\n    const tz = 2 * (qx * y - qy * x)\n\n    // v + q.w * t + cross( q.xyz, t );\n    this.x = x + qw * tx + qy * tz - qz * ty\n    this.y = y + qw * ty + qz * tx - qx * tz\n    this.z = z + qw * tz + qx * ty - qy * tx\n\n    return this\n  }\n\n  /**\n   * Rotate a {@link Vec3} around and axis by a given angle\n   * @param axis - normalized {@link Vec3} around which to rotate\n   * @param angle - angle (in radians) to rotate\n   * @param quaternion - optional {@link Quat | quaternion} to use for rotation computations\n   * @returns - this {@link Vec3} with the rotation applied\n   */\n  applyAxisAngle(axis = new Vec3(), angle = 0, quaternion = new Quat()): Vec3 {\n    // https://github.com/mrdoob/three.js/blob/master/src/math/Vector3.js#L212\n    return this.applyQuat(quaternion.setFromAxisAngle(axis, angle))\n  }\n\n  /**\n   * Transforms the direction of this vector by a {@link Mat4} (the upper left 3 x 3 subset) and then normalizes the result.\n   * @param matrix - {@link Mat4} to use for transformation.\n   * @returns - this {@link Vec3} with the transformation applied.\n   */\n  transformDirection(matrix: Mat4): Vec3 {\n    // input: Mat4 affine matrix\n    // vector interpreted as a direction\n\n    const x = this.x,\n      y = this.y,\n      z = this.z\n    const e = matrix.elements\n\n    this.x = e[0] * x + e[4] * y + e[8] * z\n    this.y = e[1] * x + e[5] * y + e[9] * z\n    this.z = e[2] * x + e[6] * y + e[10] * z\n\n    return this.normalize()\n  }\n\n  /**\n   * Project a 3D coordinate {@link Vec3} to a 2D coordinate {@link Vec3}\n   * @param camera - {@link Camera} to use for projection\n   * @returns - projected {@link Vec3}\n   */\n  project(camera: Camera): Vec3 {\n    this.applyMat4(camera.viewMatrix).applyMat4(camera.projectionMatrix)\n    return this\n  }\n\n  /**\n   * Unproject a 2D coordinate {@link Vec3} to 3D coordinate {@link Vec3}\n   * @param camera - {@link Camera} to use for projection\n   * @returns - unprojected {@link Vec3}\n   */\n  unproject(camera: Camera): Vec3 {\n    this.applyMat4(camera.projectionMatrix.getInverse()).applyMat4(camera.modelMatrix)\n    return this\n  }\n}\n","import { BufferLayout, getBufferLayout, TypedArray, WGSLBaseVariableType, WGSLVariableType } from '../utils'\nimport { Vec2 } from '../../../math/Vec2'\nimport { Vec3 } from '../../../math/Vec3'\nimport { Quat } from '../../../math/Quat'\nimport { Mat4 } from '../../../math/Mat4'\nimport { throwWarning } from '../../../utils/utils'\nimport { Mat3 } from '../../../math/Mat3'\nimport { InputValue } from '../../../types/BindGroups'\n\n/** Number of slots per row */\nexport const slotsPerRow = 4\n/** Number of bytes per slot */\nexport const bytesPerSlot = 4\n/** Number of bytes per row */\nexport const bytesPerRow = slotsPerRow * bytesPerSlot\n\n/**\n * Defines a position in our array buffer with a row index and a byte index\n */\nexport interface BufferElementAlignmentPosition {\n  /** row index of that position */\n  row: number\n  /** byte index of that position */\n  byte: number\n}\n\n/**\n * Defines our {@link BufferElement} alignment:\n * Keep track of an entry start and end row and bytes indexes (16 bytes per row)\n */\nexport interface BufferElementAlignment {\n  /** The row and byte indexes at which this {@link BufferElement} starts */\n  start: BufferElementAlignmentPosition\n  /** The row and byte indexes at which this {@link BufferElement} ends */\n  end: BufferElementAlignmentPosition\n}\n\n/**\n * Parameters used to create a {@link BufferElement}\n */\nexport interface BufferElementParams {\n  /** The name of the {@link BufferElement} */\n  name: string\n  /** The key of the {@link BufferElement} */\n  key: string\n  /** The WGSL variable type of the {@link BufferElement} */\n  type: WGSLVariableType\n}\n\n/**\n * Used to handle each {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array} view and data layout alignment.\n * Compute the exact alignment offsets needed to fill an {@link ArrayBuffer} that will be sent to a {@link GPUBuffer}, based on an input type and value.\n * Also update the view array at the correct offset.\n *\n * So all our struct need to be packed into our arrayBuffer using a precise layout.\n * They will be stored in rows, each row made of 4 slots and each slots made of 4 bytes. Depending on the binding element type, its row and slot may vary and we may have to insert empty padded values.\n * All in all it looks like that:<br>\n * <pre>\n *          slot 0    slot 1    slot 2    slot 3\n * row 0 | _ _ _ _ | _ _ _ _ | _ _ _ _ | _ _ _ _ |\n * row 1 | _ _ _ _ | _ _ _ _ | _ _ _ _ | _ _ _ _ |\n * row 2 | _ _ _ _ | _ _ _ _ | _ _ _ _ | _ _ _ _ |\n * </pre>\n * see https://webgpufundamentals.org/webgpu/lessons/resources/wgsl-offset-computer.html\n */\nexport class BufferElement {\n  /** The name of the {@link BufferElement} */\n  name: string\n  /** The WGSL variable type of the {@link BufferElement} (stripped of `array`). */\n  type: WGSLVariableType\n  /** The WGSL base variable type of the {@link BufferElement} (stripped of `array` and `atomic`). */\n  baseType: WGSLBaseVariableType\n  /** The key of the {@link BufferElement} */\n  key: string\n\n  /** {@link BufferLayout} used to fill the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array} at the right offsets */\n  bufferLayout: BufferLayout\n\n  /**\n   * Object defining exactly at which place a binding should be inserted into the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\n   */\n  alignment: BufferElementAlignment\n\n  /** Array containing the {@link BufferElement} values */\n  view?: TypedArray\n\n  /** Function assigned to set the {@link view} values */\n  setValue: (value: InputValue) => void | null\n\n  /**\n   * BufferElement constructor\n   * @param parameters - {@link BufferElementParams | parameters} used to create our {@link BufferElement}\n   */\n  constructor({ name, key, type = 'f32' }: BufferElementParams) {\n    this.name = name\n    this.key = key\n    this.type = type\n\n    this.baseType = BufferElement.getBaseType(this.type)\n\n    this.bufferLayout = getBufferLayout(this.baseType)\n\n    // set init alignment\n    this.alignment = {\n      start: {\n        row: 0,\n        byte: 0,\n      },\n      end: {\n        row: 0,\n        byte: 0,\n      },\n    }\n\n    this.setValue = null\n  }\n\n  /**\n   * Get the {@link BufferElement} {@link WGSLVariableType | WGSL type}.\n   * @param type - Original type passed.\n   * @returns - The {@link BufferElement} {@link WGSLVariableType | WGSL type}.\n   */\n  static getType(type: string): WGSLVariableType {\n    return type.replace('array', '').replace('<', '').replace('>', '')\n  }\n\n  /**\n   * Get the {@link BufferElement} {@link WGSLBaseVariableType | WGSL base type}.\n   * @param type - Original type passed.\n   * @returns - The {@link BufferElement} {@link WGSLBaseVariableType | WGSL base type}.\n   */\n  static getBaseType(type: string): WGSLBaseVariableType {\n    return BufferElement.getType(\n      type.replace('atomic', '').replace('array', '').replaceAll('<', '').replaceAll('>', '')\n    )\n  }\n\n  /**\n   * Get the total number of rows used by this {@link BufferElement}\n   * @readonly\n   */\n  get rowCount(): number {\n    return this.alignment.end.row - this.alignment.start.row + 1\n  }\n\n  /**\n   * Get the total number of bytes used by this {@link BufferElement} based on {@link BufferElementAlignment | alignment} start and end offsets\n   * @readonly\n   */\n  get byteCount(): number {\n    return Math.abs(this.endOffset - this.startOffset) + 1\n  }\n\n  /**\n   * Get the total number of bytes used by this {@link BufferElement}, including final padding\n   * @readonly\n   */\n  get paddedByteCount(): number {\n    return (this.alignment.end.row + 1) * bytesPerRow\n  }\n\n  /**\n   * Get the offset (i.e. byte index) at which our {@link BufferElement} starts\n   * @readonly\n   */\n  get startOffset(): number {\n    return this.getByteCountAtPosition(this.alignment.start)\n  }\n\n  /**\n   * Get the array offset (i.e. array index) at which our {@link BufferElement} starts\n   * @readonly\n   */\n  get startOffsetToIndex(): number {\n    return this.startOffset / bytesPerSlot\n  }\n\n  /**\n   * Get the offset (i.e. byte index) at which our {@link BufferElement} ends\n   * @readonly\n   */\n  get endOffset(): number {\n    return this.getByteCountAtPosition(this.alignment.end)\n  }\n\n  /**\n   * Get the array offset (i.e. array index) at which our {@link BufferElement} ends\n   * @readonly\n   */\n  get endOffsetToIndex(): number {\n    return Math.floor(this.endOffset / bytesPerSlot)\n  }\n\n  /**\n   * Get the position at given offset (i.e. byte index)\n   * @param offset - byte index to use\n   */\n  getPositionAtOffset(offset = 0): BufferElementAlignmentPosition {\n    return {\n      row: Math.floor(offset / bytesPerRow),\n      byte: offset % bytesPerRow,\n    }\n  }\n\n  /**\n   * Get the number of bytes at a given {@link BufferElementAlignmentPosition | position}\n   * @param position - {@link BufferElementAlignmentPosition | position} from which to count\n   * @returns - byte count at the given {@link BufferElementAlignmentPosition | position}\n   */\n  getByteCountAtPosition(position: BufferElementAlignmentPosition = { row: 0, byte: 0 }): number {\n    return position.row * bytesPerRow + position.byte\n  }\n\n  /**\n   * Check that a {@link BufferElementAlignmentPosition#byte | byte position} does not overflow its max value (16)\n   * @param position - {@link BufferElementAlignmentPosition | position}\n   * @returns - updated {@link BufferElementAlignmentPosition | position}\n   */\n  applyOverflowToPosition(\n    position: BufferElementAlignmentPosition = { row: 0, byte: 0 }\n  ): BufferElementAlignmentPosition {\n    if (position.byte > bytesPerRow - 1) {\n      const overflow = position.byte % bytesPerRow\n      position.row += Math.floor(position.byte / bytesPerRow)\n      position.byte = overflow\n    }\n\n    return position\n  }\n\n  /**\n   * Get the number of bytes between two {@link BufferElementAlignmentPosition | positions}\n   * @param p1 - first {@link BufferElementAlignmentPosition | position}\n   * @param p2 - second {@link BufferElementAlignmentPosition | position}\n   * @returns - number of bytes\n   */\n  getByteCountBetweenPositions(\n    p1: BufferElementAlignmentPosition = { row: 0, byte: 0 },\n    p2: BufferElementAlignmentPosition = { row: 0, byte: 0 }\n  ): number {\n    return Math.abs(this.getByteCountAtPosition(p2) - this.getByteCountAtPosition(p1))\n  }\n\n  /**\n   * Compute the right alignment (i.e. start and end rows and bytes) given the size and align properties and the next available {@link BufferElementAlignmentPosition | position}\n   * @param nextPositionAvailable - next {@link BufferElementAlignmentPosition | position} at which we should insert this element\n   * @returns - computed {@link BufferElementAlignment | alignment}\n   */\n  getElementAlignment(\n    nextPositionAvailable: BufferElementAlignmentPosition = { row: 0, byte: 0 }\n  ): BufferElementAlignment {\n    const alignment = {\n      start: nextPositionAvailable,\n      end: nextPositionAvailable,\n    }\n\n    const { size, align } = this.bufferLayout\n\n    // check the alignment, i.e. even if there's enough space for our binding\n    // we might have to pad the slot because some types need a specific alignment\n    if (nextPositionAvailable.byte % align !== 0) {\n      nextPositionAvailable.byte += nextPositionAvailable.byte % align\n    }\n\n    if (size <= bytesPerRow && nextPositionAvailable.byte + size > bytesPerRow) {\n      // in the case of a binding that could fit on one row\n      // but we don't have space on the current row for this binding element\n      // go to next row\n      nextPositionAvailable.row += 1\n      nextPositionAvailable.byte = 0\n    } else if (size > bytesPerRow && (nextPositionAvailable.byte > bytesPerRow || nextPositionAvailable.byte > 0)) {\n      // there's also the case where the binding size is too big\n      // and we have already padded it above\n      // or we've just started a new row\n      // but the binding size is too big to fit in one row\n      // just go to next row as well\n      nextPositionAvailable.row += 1\n      nextPositionAvailable.byte = 0\n    }\n\n    alignment.end = {\n      row: nextPositionAvailable.row + Math.ceil(size / bytesPerRow) - 1,\n      byte: nextPositionAvailable.byte + (size % bytesPerRow === 0 ? bytesPerRow - 1 : (size % bytesPerRow) - 1), // end of row ? then it ends on slot (bytesPerRow - 1)\n    }\n\n    // now final check, if end slot has overflown\n    alignment.end = this.applyOverflowToPosition(alignment.end)\n\n    return alignment\n  }\n\n  /**\n   * Set the {@link BufferElementAlignment | alignment} from a {@link BufferElementAlignmentPosition | position}\n   * @param position - {@link BufferElementAlignmentPosition | position} at which to start inserting the values in the {@link !core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\n   */\n  setAlignmentFromPosition(position: BufferElementAlignmentPosition = { row: 0, byte: 0 }) {\n    this.alignment = this.getElementAlignment(position)\n  }\n\n  /**\n   * Set the {@link BufferElementAlignment | alignment} from an offset (byte count)\n   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\n   */\n  setAlignment(startOffset = 0) {\n    this.setAlignmentFromPosition(this.getPositionAtOffset(startOffset))\n  }\n\n  /**\n   * Set the {@link view}\n   * @param arrayBuffer - the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\n   * @param arrayView - the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view}\n   */\n  setView(arrayBuffer: ArrayBuffer, arrayView: DataView) {\n    this.view = new this.bufferLayout.View(\n      arrayBuffer,\n      this.startOffset,\n      this.byteCount / this.bufferLayout.View.BYTES_PER_ELEMENT\n    )\n  }\n\n  /**\n   * Set the {@link view} value from a float or an int\n   * @param value - float or int to use\n   */\n  setValueFromNumber(value: number) {\n    this.view[0] = value as number\n  }\n\n  /**\n   * Set the {@link view} value from a {@link Vec2} or an array\n   * @param value - {@link Vec2} or array to use\n   */\n  setValueFromVec2(value: Vec2 | number[]) {\n    this.view[0] = (value as Vec2).x ?? value[0] ?? 0\n    this.view[1] = (value as Vec2).y ?? value[1] ?? 0\n  }\n\n  /**\n   * Set the {@link view} value from a {@link Vec3} or an array\n   * @param value - {@link Vec3} or array to use\n   */\n  setValueFromVec3(value: Vec3 | number[]) {\n    this.view[0] = (value as Vec3).x ?? value[0] ?? 0\n    this.view[1] = (value as Vec3).y ?? value[1] ?? 0\n    this.view[2] = (value as Vec3).z ?? value[2] ?? 0\n  }\n\n  /**\n   * Set the {@link view} value from a {@link Mat4} or {@link Quat}\n   * @param value - {@link Mat4} or {@link Quat} to use\n   */\n  setValueFromMat4OrQuat(value: Mat4 | Quat) {\n    this.view.set(value.elements)\n  }\n\n  /**\n   * Set the {@link view} value from a {@link Mat3}\n   * @param value - {@link Mat3} to use\n   */\n  setValueFromMat3(value: Mat3) {\n    // mat3x3f are padded!\n    this.setValueFromArrayWithPad(value.elements)\n  }\n\n  /**\n   * Set the {@link view} value from an array\n   * @param value - array to use\n   */\n  setValueFromArray(value: number[] | TypedArray) {\n    this.view.set(value as number[] | TypedArray)\n  }\n\n  /**\n   * Set the {@link view} value from an array with pad applied\n   * @param value - array to use\n   */\n  setValueFromArrayWithPad(value: number[] | TypedArray) {\n    for (\n      let i = 0, offset = 0;\n      i < this.view.length;\n      i += this.bufferLayout.pad[0] + this.bufferLayout.pad[1], offset++\n    ) {\n      for (let j = 0; j < this.bufferLayout.pad[0]; j++) {\n        this.view[i + j] = value[i + j - offset]\n      }\n    }\n  }\n\n  /**\n   * Update the {@link view} based on the new value\n   * @param value - new value to use\n   */\n  update(value: InputValue) {\n    if (!this.setValue) {\n      this.setValue = ((value) => {\n        if (typeof value === 'number') {\n          return this.setValueFromNumber\n        } else if (this.type === 'vec2f') {\n          return this.setValueFromVec2\n        } else if (this.type === 'vec3f') {\n          return this.setValueFromVec3\n        } else if (this.type === 'mat3x3f') {\n          return (value as Mat3).elements ? this.setValueFromMat3 : this.setValueFromArrayWithPad\n        } else if ((value as Quat | Mat4).elements) {\n          return this.setValueFromMat4OrQuat\n        } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\n          if (!this.bufferLayout.pad) {\n            return this.setValueFromArray\n          } else {\n            return this.setValueFromArrayWithPad\n          }\n        } else {\n          throwWarning(`${this.constructor.name}: value passed to ${this.name} cannot be used: ${value}`)\n        }\n      })(value)\n    }\n\n    this.setValue(value)\n  }\n\n  /**\n   * Extract the data corresponding to this specific {@link BufferElement} from a {@link Float32Array} holding the {@link GPUBuffer} data of the parentMesh {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}\n   * @param result - {@link Float32Array} holding {@link GPUBuffer} data\n   * @returns - extracted data from the {@link Float32Array}\n   */\n  extractDataFromBufferResult(result: Float32Array) {\n    return result.slice(this.startOffsetToIndex, this.endOffsetToIndex)\n  }\n}\n","import { BufferElement, BufferElementParams, bytesPerSlot } from './BufferElement'\r\nimport { TypedArray } from '../utils'\r\n\r\n/**\r\n * Parameters used to create a {@link BufferArrayElement}\r\n */\r\nexport interface BufferArrayElementParams extends BufferElementParams {\r\n  /** Initial length of the input {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array} */\r\n  arrayLength: number\r\n}\r\n\r\n/**\r\n * Used to handle specific array {@link core/bindings/BufferBinding.BufferBinding | BufferBinding} types\r\n */\r\nexport class BufferArrayElement extends BufferElement {\r\n  /** Initial length of the input {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array} */\r\n  arrayLength: number\r\n  /** Total number of elements (i.e. {@link arrayLength} divided by {@link core/bindings/utils.BufferLayout | buffer layout} number of elements */\r\n  numElements: number\r\n  /** Number of bytes in the {@link ArrayBuffer} between two elements {@link startOffset} */\r\n  arrayStride: number\r\n\r\n  /**\r\n   * BufferArrayElement constructor\r\n   * @param parameters - {@link BufferArrayElementParams | parameters} used to create our {@link BufferArrayElement}\r\n   */\r\n  constructor({ name, key, type = 'f32', arrayLength = 1 }: BufferArrayElementParams) {\r\n    super({ name, key, type })\r\n\r\n    this.arrayLength = arrayLength\r\n    this.numElements = Math.ceil(this.arrayLength / this.bufferLayout.numElements)\r\n  }\r\n\r\n  /**\r\n   * Get the array stride between two elements of the array, in indices\r\n   * @readonly\r\n   */\r\n  get arrayStrideToIndex(): number {\r\n    return this.arrayStride / bytesPerSlot\r\n  }\r\n\r\n  /**\r\n   * Set the {@link core/bindings/bufferElements/BufferElement.BufferElementAlignment | alignment}\r\n   * To compute how arrays are packed, we get the second item alignment as well and use it to calculate the arrayStride between two array elements. Using the arrayStride and the total number of elements, we can easily get the end alignment position.\r\n   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array buffer}\r\n   */\r\n  setAlignment(startOffset = 0) {\r\n    super.setAlignment(startOffset)\r\n\r\n    // repeat for a second element to know how things are laid out\r\n    const nextAlignment = this.getElementAlignment(this.getPositionAtOffset(this.endOffset + 1))\r\n    this.arrayStride = this.getByteCountBetweenPositions(this.alignment.end, nextAlignment.end)\r\n\r\n    this.alignment.end = this.getPositionAtOffset(this.endOffset + this.arrayStride * (this.numElements - 1))\r\n  }\r\n\r\n  /**\r\n   * Set the strided {@link view} value from an array\r\n   * @param value - array to use\r\n   */\r\n  setValueFromArray(value: number[] | TypedArray) {\r\n    let valueIndex = 0\r\n\r\n    const viewLength = this.byteCount / this.bufferLayout.View.BYTES_PER_ELEMENT\r\n    // arrayStride is our view length divided by the number of elements in our array\r\n    const stride = Math.ceil(viewLength / this.numElements)\r\n\r\n    for (let i = 0; i < this.numElements; i++) {\r\n      for (let j = 0; j < this.bufferLayout.numElements; j++) {\r\n        this.view[j + i * stride] = value[valueIndex]\r\n\r\n        valueIndex++\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { BufferArrayElement, BufferArrayElementParams } from './BufferArrayElement'\r\nimport { InputValue } from '../../../types/BindGroups'\r\nimport { DataViewSetFunction } from '../BufferBinding'\r\n\r\n/**\r\n * Used to compute alignment when dealing with arrays of Struct\r\n */\r\nexport class BufferInterleavedArrayElement extends BufferArrayElement {\r\n  /** Corresponding {@link DataView} set function based on {@link view} type */\r\n  viewSetFunction: DataViewSetFunction\r\n\r\n  /**\r\n   * BufferInterleavedArrayElement constructor\r\n   * @param parameters - {@link BufferArrayElementParams | parameters} used to create our {@link BufferInterleavedArrayElement}\r\n   */\r\n  constructor({ name, key, type = 'f32', arrayLength = 1 }: BufferArrayElementParams) {\r\n    super({ name, key, type, arrayLength })\r\n\r\n    this.arrayStride = 1\r\n\r\n    this.arrayLength = arrayLength\r\n    this.numElements = Math.ceil(this.arrayLength / this.bufferLayout.numElements)\r\n  }\r\n\r\n  /**\r\n   * Get the total number of slots used by this {@link BufferInterleavedArrayElement} based on buffer layout size and total number of elements\r\n   * @readonly\r\n   */\r\n  get byteCount(): number {\r\n    return this.bufferLayout.size * this.numElements\r\n  }\r\n\r\n  /**\r\n   * Set the {@link core/bindings/bufferElements/BufferElement.BufferElementAlignment | alignment}\r\n   * To compute how arrays are packed, we need to compute the arrayStride between two elements beforehand and pass it here. Using the arrayStride and the total number of elements, we can easily get the end alignment position.\r\n   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\r\n   * @param stride - Stride in the {@link ArrayBuffer} between two elements of the array\r\n   */\r\n  setAlignment(startOffset = 0, stride = 0) {\r\n    this.alignment = this.getElementAlignment(this.getPositionAtOffset(startOffset))\r\n\r\n    this.arrayStride = stride\r\n\r\n    this.alignment.end = this.getPositionAtOffset(this.endOffset + stride * (this.numElements - 1))\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view} and {@link viewSetFunction}\r\n   * @param arrayBuffer - the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\r\n   * @param arrayView - the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view}\r\n   */\r\n  setView(arrayBuffer: ArrayBuffer, arrayView: DataView) {\r\n    // our view will be a simple typed array, not linked to the array buffer\r\n    this.view = new this.bufferLayout.View(this.bufferLayout.numElements * this.numElements)\r\n\r\n    // but our viewSetFunction is linked to the array view\r\n    this.viewSetFunction = ((arrayView) => {\r\n      switch (this.bufferLayout.View) {\r\n        case Int32Array:\r\n          return arrayView.setInt32.bind(arrayView) as DataView['setInt32']\r\n        case Uint16Array:\r\n          return arrayView.setUint16.bind(arrayView) as DataView['setUint16']\r\n        case Uint32Array:\r\n          return arrayView.setUint32.bind(arrayView) as DataView['setUint32']\r\n        case Float32Array:\r\n        default:\r\n          return arrayView.setFloat32.bind(arrayView) as DataView['setFloat32']\r\n      }\r\n    })(arrayView)\r\n  }\r\n\r\n  /**\r\n   * Update the {@link view} based on the new value, and then update the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view} using sub arrays\r\n   * @param value - new value to use\r\n   */\r\n  update(value: InputValue) {\r\n    super.update(value)\r\n\r\n    // now use our viewSetFunction to fill the array view with interleaved alignment\r\n    for (let i = 0; i < this.numElements; i++) {\r\n      const subarray = this.view.subarray(\r\n        i * this.bufferLayout.numElements,\r\n        i * this.bufferLayout.numElements + this.bufferLayout.numElements\r\n      )\r\n\r\n      const startByteOffset = this.startOffset + i * this.arrayStride\r\n\r\n      // view set function need to be called for each subarray entry, so loop over subarray entries\r\n      subarray.forEach((value, index) => {\r\n        this.viewSetFunction(startByteOffset + index * this.bufferLayout.View.BYTES_PER_ELEMENT, value, true)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract the data corresponding to this specific {@link BufferInterleavedArrayElement} from a {@link Float32Array} holding the {@link GPUBuffer} data of the parentMesh {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}\r\n   * @param result - {@link Float32Array} holding {@link GPUBuffer} data\r\n   */\r\n  extractDataFromBufferResult(result: Float32Array) {\r\n    const interleavedResult = new Float32Array(this.arrayLength)\r\n    for (let i = 0; i < this.numElements; i++) {\r\n      const resultOffset = this.startOffsetToIndex + i * this.arrayStrideToIndex\r\n\r\n      for (let j = 0; j < this.bufferLayout.numElements; j++) {\r\n        interleavedResult[i * this.bufferLayout.numElements + j] = result[resultOffset + j]\r\n      }\r\n    }\r\n    return interleavedResult\r\n  }\r\n}\r\n","// buffers bitwise flags\r\nimport { WebGPUBufferUsageConstants } from '../../utils/webgpu-constants'\r\nimport { BufferBindingType } from '../bindings/Binding'\r\n\r\n/**  Defines all kinds of allowed buffer usages as camel case strings. */\r\nexport type BufferUsageKeys =\r\n  | 'copySrc'\r\n  | 'copyDst'\r\n  | 'index'\r\n  | 'indirect'\r\n  | 'mapRead'\r\n  | 'mapWrite'\r\n  | 'queryResolve'\r\n  | 'vertex'\r\n  | BufferBindingType\r\n\r\n/**\r\n * Map {@link BufferUsageKeys | buffer usage names} with actual {@link !GPUBuffer.usage | GPUBufferUsageFlags}.\r\n */\r\nconst bufferUsages: Map<BufferUsageKeys, GPUBufferUsageFlags> = new Map([\r\n  ['copySrc', WebGPUBufferUsageConstants.COPY_SRC],\r\n  ['copyDst', WebGPUBufferUsageConstants.COPY_DST],\r\n  ['index', WebGPUBufferUsageConstants.INDEX],\r\n  ['indirect', WebGPUBufferUsageConstants.INDIRECT],\r\n  ['mapRead', WebGPUBufferUsageConstants.MAP_READ],\r\n  ['mapWrite', WebGPUBufferUsageConstants.MAP_WRITE],\r\n  ['queryResolve', WebGPUBufferUsageConstants.QUERY_RESOLVE],\r\n  ['storage', WebGPUBufferUsageConstants.STORAGE],\r\n  ['uniform', WebGPUBufferUsageConstants.UNIFORM],\r\n  ['vertex', WebGPUBufferUsageConstants.VERTEX],\r\n])\r\n\r\n/**\r\n * Get the corresponding {@link !GPUBuffer.usage | GPUBufferUsageFlags} based on an array of {@link BufferUsageKeys | buffer usage names}.\r\n * @param usages - array of {@link BufferUsageKeys | buffer usage names}.\r\n * @returns - corresponding {@link !GPUBuffer.usage | GPUBufferUsageFlags}.\r\n */\r\nexport const getBufferUsages = (usages: BufferUsageKeys[] = []): GPUBufferUsageFlags => {\r\n  return usages.reduce((acc, v) => {\r\n    return acc | bufferUsages.get(v)\r\n  }, 0)\r\n}\r\n","import { generateUUID } from '../../utils/utils'\r\nimport { BufferUsageKeys, getBufferUsages } from './utils'\r\n\r\n/**\r\n * Parameters used to create a {@link Buffer}.\r\n */\r\nexport interface BufferParams extends Partial<Omit<GPUBufferDescriptor, 'usage'>> {\r\n  /** Allowed usages for the {@link Buffer#GPUBuffer | GPU buffer} as an array of {@link BufferUsageKeys | buffer usages names} */\r\n  usage?: BufferUsageKeys[]\r\n}\r\n\r\n/**\r\n * Used as a wrapper around {@link GPUBuffer}.\r\n *\r\n * Useful to keep tracks of all the {@link GPUBuffer} created thanks to the {@link uuid} property.\r\n */\r\nexport class Buffer {\r\n  /** The type of the {@link Buffer} */\r\n  type: string\r\n  /** The universal unique id of the {@link Buffer} */\r\n  uuid: string\r\n  /** Options used to create this {@link Buffer}, also used as {@link GPUDevice.createBuffer().descriptor | GPUBufferDescriptor} */\r\n  options: GPUBufferDescriptor\r\n\r\n  /** The actual {@link GPUBuffer} after having been created. */\r\n  GPUBuffer: null | GPUBuffer\r\n\r\n  /** A Set to store this {@link Buffer} consumers (usually {@link core/geometries/Geometry.Geometry#uuid | Geometry uuid} or {@link core/bindGroups/BindGroup.BindGroup#uuid | BindGroup uuid}) */\r\n  consumers: Set<string>\r\n\r\n  /**\r\n   * Buffer constructors\r\n   * @param parameters - {@link BufferParams | parameters} used to create our Buffer\r\n   */\r\n  constructor(\r\n    {\r\n      label = 'Buffer',\r\n      size = 0,\r\n      usage = ['copySrc', 'copyDst'],\r\n      mappedAtCreation = false,\r\n    }: BufferParams = {} as BufferParams\r\n  ) {\r\n    this.type = 'Buffer'\r\n\r\n    this.reset()\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    this.consumers = new Set()\r\n\r\n    this.options = {\r\n      label,\r\n      size,\r\n      usage: getBufferUsages(usage),\r\n      mappedAtCreation,\r\n    }\r\n  }\r\n\r\n  /** Reset the {@link GPUBuffer} value to `null`. */\r\n  reset() {\r\n    this.GPUBuffer = null\r\n  }\r\n\r\n  /** Allow to dynamically set the size of the {@link GPUBuffer}. */\r\n  set size(value: number) {\r\n    this.options.size = value\r\n  }\r\n\r\n  /**\r\n   * Create a {@link GPUBuffer} based on the descriptor stored in the {@link Buffer.options | Buffer options}.\r\n   * @param renderer - {@link core/renderers/GPURenderer.GPURenderer | renderer} used to create the {@link GPUBuffer}.\r\n   * @param options - optional way to update the {@link Buffer.options | Buffer options} previously set before creating the {@link GPUBuffer}.\r\n   */\r\n  createBuffer(renderer, options: BufferParams = {}) {\r\n    const { usage, ...staticOptions } = options\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      ...staticOptions,\r\n      ...(usage !== undefined && { usage: getBufferUsages(usage) }),\r\n    }\r\n\r\n    this.setBuffer(renderer.createBuffer(this))\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Buffer.GPUBuffer | GPUBuffer}. This allows to use a {@link Buffer} with a {@link Buffer.GPUBuffer | GPUBuffer} created separately.\r\n   * @param GPUBuffer - GPU buffer to use.\r\n   */\r\n  setBuffer(GPUBuffer: GPUBuffer) {\r\n    this.GPUBuffer = GPUBuffer\r\n  }\r\n\r\n  /**\r\n   * Copy an {@link Buffer#GPUBuffer | Buffer GPUBuffer} and its {@link options} into this {@link Buffer}.\r\n   * @param buffer - {@link Buffer} to use for the copy.\r\n   * @param destroyPreviousBuffer - whether to destroy the previous {@link Buffer} before the copy.\r\n   */\r\n  copy(buffer: Buffer, destroyPreviousBuffer: boolean = false) {\r\n    if (destroyPreviousBuffer) {\r\n      this.destroy()\r\n    }\r\n\r\n    this.options = buffer.options\r\n    this.GPUBuffer = buffer.GPUBuffer\r\n    this.consumers = new Set([...this.consumers, ...buffer.consumers])\r\n  }\r\n\r\n  /**\r\n   * Map the {@link GPUBuffer} and put a copy of the data into a {@link Float32Array}.\r\n   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data.\r\n   */\r\n  async mapBufferAsync() {\r\n    if (!this.GPUBuffer || this.GPUBuffer.mapState !== 'unmapped') return new Float32Array(0)\r\n\r\n    await this.GPUBuffer.mapAsync(GPUMapMode.READ)\r\n    const result = new Float32Array(this.GPUBuffer.getMappedRange().slice(0))\r\n    this.GPUBuffer.unmap()\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Destroy the {@link GPUBuffer} and {@link reset} its value.\r\n   */\r\n  destroy() {\r\n    this.GPUBuffer?.destroy()\r\n    this.reset()\r\n    this.consumers.clear()\r\n  }\r\n}\r\n","import { Binding, BindingParams, BufferBindingMemoryAccessType, BufferBindingType } from './Binding'\nimport {\n  getBindGroupLayoutBindingType,\n  getBindingWGSLVarType,\n  getBufferLayout,\n  TypedArray,\n  TypedArrayConstructor,\n} from './utils'\nimport { throwWarning, toCamelCase, toKebabCase } from '../../utils/utils'\nimport { Vec2 } from '../../math/Vec2'\nimport { Vec3 } from '../../math/Vec3'\nimport { Input, InputBase, InputValue } from '../../types/BindGroups'\nimport { BufferElement, bytesPerRow } from './bufferElements/BufferElement'\nimport { BufferArrayElement } from './bufferElements/BufferArrayElement'\nimport { BufferInterleavedArrayElement } from './bufferElements/BufferInterleavedArrayElement'\nimport { Buffer, BufferParams } from '../buffers/Buffer'\nimport { WritableBufferBinding, WritableBufferBindingParams } from './WritableBufferBinding'\nimport { Mat3 } from '../../math/Mat3'\nimport { Mat4 } from '../../math/Mat4'\nimport { Quat } from '../../math/Quat'\n\n/**\n * Defines a {@link BufferBinding} input object that can set a value and run a callback function when this happens\n */\nexport interface BufferBindingInput extends InputBase {\n  /** Original {@link InputValue | input value} */\n  _value: InputValue\n\n  /** Get the {@link InputValue | input value} */\n  get value(): InputValue\n\n  /** Set the {@link InputValue | input value} */\n  set value(value: InputValue)\n\n  /** Whether the {@link InputValue | input value} has changed and we should update the {@link BufferBinding#arrayBuffer | buffer binding array} */\n  shouldUpdate: boolean\n\n  /** {@link BufferBindingInput} name */\n  name: string\n}\n\n/**\n * Base parameters used to create a {@link BufferBinding}\n */\nexport interface BufferBindingBaseParams {\n  /** Whether this {@link BufferBinding} should use structured WGSL variables */\n  useStruct?: boolean\n  /** {@link BufferBinding} memory access types (read only or read/write) */\n  access?: BufferBindingMemoryAccessType\n  /** Object containing one or multiple {@link Input | inputs} describing the structure of the {@link BufferBinding} */\n  struct?: Record<string, Input>\n  /** Allowed usages for the {@link BufferBinding#buffer} as an array of {@link core/buffers/utils.BufferUsageKeys | buffer usages names} */\n  usage?: BufferParams['usage']\n}\n\n/** Define a {@link BufferBinding} children binding entry parameters. Used to build complex WGSL `Struct` containing `Struct` children. */\nexport interface BufferBindingChildrenBinding {\n  /** The {@link BufferBinding} to use. */\n  binding: BufferBinding\n  /** The number of times to use this {@link binding}. If it is greater than `1`, the {@link binding} will be cloned with new arrays to use for values. */\n  count?: number\n  /** Whether to force this `Struct` element to be defined as an array, even if {@link count} is lower or equal to `1`. Useful when a `Struct` element absolutely needs to be iterable. */\n  forceArray?: boolean\n}\n\n/**\n * Parameters used to create a {@link BufferBinding}\n */\nexport interface BufferBindingParams extends BindingParams, BufferBindingBaseParams {\n  /** The binding type of the {@link BufferBinding} */\n  bindingType?: BufferBindingType\n\n  /** Optional array of {@link BufferBindingChildrenBinding} to add to this {@link BufferBinding} to create complex `Struct` objects containing `Struct` {@link BufferBinding} children. */\n  childrenBindings?: BufferBindingChildrenBinding[]\n\n  /** The minimum {@link GPUDevice} buffer offset alignment. */\n  minOffset?: number\n  /** Optional offset of the {@link BufferBinding} in the {@link BufferBinding#parent | parent BufferBinding} (as an index - not in bytes). */\n  offset?: number\n\n  /** The optional parent {@link BufferBinding} that will actually handle the {@link GPUBuffer}. */\n  parent?: BufferBinding\n\n  /** Optional already existing {@link Buffer} to use instead of creating a new one. Allow to reuse an already created {@link Buffer} but with different read or visibility values, or with a different WGSL struct. */\n  buffer?: Buffer\n}\n\n/** All allowed {@link BufferElement | buffer elements} */\nexport type AllowedBufferElement = BufferElement | BufferArrayElement | BufferInterleavedArrayElement\n\n/** Possible data view set function to use with a {@link DataView} based on the data type. */\nexport type DataViewSetFunction =\n  | DataView['setInt32']\n  | DataView['setUint16']\n  | DataView['setUint32']\n  | DataView['setFloat32']\n\n/**\n * Used to format {@link BufferBindingParams#struct | uniforms or storages struct inputs} and create a single typed array that will hold all those inputs values. The array needs to be correctly padded depending on every value type, so it can be safely used as a GPUBuffer input.\n *\n * It will also create WGSL Structs and variables according to the {@link BufferBinding} inputs parameters.\n *\n * The WGSL structs and variables declaration may vary based on the input types, especially if there's one or more arrays involved (i.e. `array<f32>`, `array<vec3f>` etc.).\n *\n * It is possible to create complex WGSL structs with children structs by using the {@link BufferBindingParams#childrenBindings | childrenBindings} parameter.\n *\n * There's a helper tool to help you understand and debug your {@link BufferBinding} WGSL declaration: [BufferBinding WGSL generation helper](https://martinlaxenaire.github.io/gpu-curtains/examples/buffer-binding-wgsl-helper/)\n *\n * A {@link BufferBinding} can also have a {@link parent | parent BufferBinding}, in which case it won't create a GPUBuffer but use its parent GPUBuffer at the right offset. Useful to create a unique {@link BufferBinding} with a single GPUBuffer to handle multiple {@link BufferBinding} and update them with a single `writeBuffer` call.\n *\n * @example\n * ```javascript\n * // create a GPU buffer binding\n * const bufferBinding = new BufferBinding({\n *   name: 'params', // name of the WGSL object\n *   bindingType: 'uniform', // should be 'storage' for large arrays\n *   struct: {\n *     opacity: {\n *       type: 'f32',\n *       value: 1,\n *     },\n *     mousePosition: {\n *       type: 'vec2f',\n *       value: new Vec2(),\n *     },\n *   },\n * })\n * ```\n */\nexport class BufferBinding extends Binding {\n  /** The binding type of the {@link BufferBinding} */\n  bindingType: BufferBindingType\n  /** Flag to indicate whether this {@link BufferBinding} {@link bufferElements | buffer elements} should be packed in a single structured object or if each one of them should be a separate binding. */\n  useStruct: boolean\n  /** All the {@link BufferBinding} data inputs */\n  inputs: Record<string, BufferBindingInput>\n\n  /** Array of children {@link BufferBinding} used as struct children. */\n  childrenBindings: BufferBinding[]\n\n  /** Flag to indicate whether one of the {@link inputs} value has changed and we need to update the GPUBuffer linked to the {@link arrayBuffer} array */\n  shouldUpdate: boolean\n\n  /** An array describing how each corresponding {@link inputs} should be inserted into our {@link arrayView} array */\n  bufferElements: AllowedBufferElement[]\n\n  /** Total size of our {@link arrayBuffer} array in bytes */\n  arrayBufferSize: number\n  /** Array buffer that will be sent to the {@link GPUBuffer} */\n  arrayBuffer: ArrayBuffer\n  /** Data view of our {@link arrayBuffer | array buffer} */\n  arrayView: DataView\n\n  /** @ignore */\n  #parent: BufferBinding | null\n\n  /** {@link DataView} inside the {@link arrayBuffer | parent arrayBuffer} if set. */\n  parentView: DataView | null\n\n  /** Array of {@link AllowedBufferElement | bufferElements} and according {@link DataViewSetFunction | view set functions} to use if the {@link parent} is set. */\n  parentViewSetBufferEls: Array<{\n    /** Corresponding {@link AllowedBufferElement | bufferElement}. */\n    bufferElement: AllowedBufferElement\n    /** Corresponding {@link DataViewSetFunction | view set function}. */\n    viewSetFunction: DataViewSetFunction\n  }> | null\n\n  /** The {@link Buffer} holding the {@link GPUBuffer}  */\n  buffer: Buffer\n\n  /** A string to append to our shaders code describing the WGSL structure representing this {@link BufferBinding} */\n  wgslStructFragment: string\n  /** An array of strings to append to our shaders code declaring all the WGSL variables representing this {@link BufferBinding} */\n  wgslGroupFragment: string[]\n  /** Options used to create this {@link BufferBinding} */\n  options: BufferBindingParams\n\n  /**\n   * BufferBinding constructor\n   * @param parameters - {@link BufferBindingParams | parameters} used to create our BufferBindings\n   */\n  constructor({\n    label = 'Uniform',\n    name = 'uniform',\n    bindingType,\n    visibility,\n    useStruct = true,\n    access = 'read',\n    usage = [],\n    struct = {},\n    childrenBindings = [],\n    buffer = null,\n    parent = null,\n    minOffset = 256,\n    offset = 0,\n  }: BufferBindingParams) {\n    bindingType = bindingType ?? 'uniform'\n\n    super({ label, name, bindingType, visibility })\n\n    this.options = {\n      ...this.options,\n      useStruct,\n      access,\n      usage,\n      struct,\n      childrenBindings,\n      buffer,\n      parent,\n      minOffset,\n      offset,\n    }\n\n    this.cacheKey += `${useStruct},${access},`\n\n    this.arrayBufferSize = 0\n\n    this.shouldUpdate = false\n    this.useStruct = useStruct\n\n    this.bufferElements = []\n    this.inputs = {}\n\n    this.buffer = this.options.buffer ?? new Buffer()\n\n    if (Object.keys(struct).length) {\n      this.setBindings(struct)\n      this.setInputsAlignment()\n    }\n\n    this.setChildrenBindings(childrenBindings)\n\n    if (Object.keys(struct).length || this.childrenBindings.length) {\n      this.setBufferAttributes()\n      this.setWGSLFragment()\n    }\n\n    // parent\n    this.parent = parent\n  }\n\n  /**\n   * Clone a {@link BufferBindingParams#struct | struct object} width new default values.\n   * @param struct - New cloned struct object.\n   */\n  static cloneStruct(struct: Record<string, Input>): Record<string, Input> {\n    return Object.keys(struct).reduce((acc, bindingKey) => {\n      const binding = struct[bindingKey]\n\n      let value: InputValue\n\n      if (Array.isArray(binding.value) || ArrayBuffer.isView(binding.value)) {\n        value = new (<ArrayConstructor | TypedArrayConstructor>binding.value.constructor)(binding.value.length)\n      } else if (typeof binding.value === 'number') {\n        value = 0\n      } else {\n        value = new (<typeof Vec2 | typeof Vec3 | typeof Mat3 | typeof Mat4 | typeof Quat>binding.value.constructor)()\n      }\n\n      return {\n        ...acc,\n        [bindingKey]: {\n          type: binding.type,\n          value,\n        },\n      }\n    }, {})\n  }\n\n  /**\n   * Get the {@link BufferBinding} parent if any.\n   * @readonly\n   * @returns - The {@link BufferBinding} parent if any.\n   */\n  get parent(): BufferBinding {\n    return this.#parent\n  }\n\n  /**\n   * Set the new {@link BufferBinding} parent.\n   * @param value - New {@link BufferBinding} parent to set if any.\n   */\n  set parent(value: BufferBinding | null) {\n    if (!!value) {\n      this.parentView = new DataView(value.arrayBuffer, this.offset, this.getMinOffsetSize(this.arrayBufferSize))\n\n      // get all buffer elements recursively\n      const getAllBufferElements = (binding) => {\n        const getBufferElements = (binding) => {\n          return binding.bufferElements\n        }\n\n        return [\n          ...getBufferElements(binding),\n          binding.childrenBindings.map((child) => getAllBufferElements(child)).flat(),\n        ].flat()\n      }\n\n      const bufferElements = getAllBufferElements(this)\n\n      this.parentViewSetBufferEls = bufferElements.map((bufferElement) => {\n        switch (bufferElement.bufferLayout.View) {\n          case Int32Array:\n            return {\n              bufferElement,\n              viewSetFunction: this.parentView.setInt32.bind(this.parentView) as DataView['setInt32'],\n            }\n          case Uint16Array:\n            return {\n              bufferElement,\n              viewSetFunction: this.parentView.setUint16.bind(this.parentView) as DataView['setUint16'],\n            }\n          case Uint32Array:\n            return {\n              bufferElement,\n              viewSetFunction: this.parentView.setUint32.bind(this.parentView) as DataView['setUint32'],\n            }\n          case Float32Array:\n          default:\n            return {\n              bufferElement,\n              viewSetFunction: this.parentView.setFloat32.bind(this.parentView) as DataView['setFloat32'],\n            }\n        }\n      })\n\n      if (!this.parent && this.buffer.GPUBuffer && !this.options.buffer) {\n        // if it has a GPU Buffer but no parent yet, destroy the buffer\n        this.buffer.destroy()\n      }\n    } else {\n      this.parentView = null\n      this.parentViewSetBufferEls = null\n    }\n\n    this.#parent = value\n  }\n\n  /**\n   * Round the given size value to the nearest minimum {@link GPUDevice} buffer offset alignment.\n   * @param value - Size to round.\n   */\n  getMinOffsetSize(value: number): number {\n    return Math.ceil(value / this.options.minOffset) * this.options.minOffset\n  }\n\n  /**\n   * Get this {@link BufferBinding} offset in bytes inside the {@link arrayBuffer | parent arrayBuffer}.\n   * @readonly\n   * @returns - The offset in bytes inside the {@link arrayBuffer | parent arrayBuffer}\n   */\n  get offset(): number {\n    return this.getMinOffsetSize(this.options.offset * this.getMinOffsetSize(this.arrayBufferSize))\n  }\n\n  /**\n   * Get {@link GPUDevice.createBindGroupLayout().descriptor.entries.resource | GPUBindGroupLayout entry resource}.\n   * @readonly\n   */\n  get resourceLayout(): {\n    /** {@link GPUBindGroupLayout | bind group layout} resource */\n    buffer: GPUBufferBindingLayout\n    /** Offset in bytes in the {@link parent} buffer if set. */\n    offset?: number\n    /** Size in bytes in the {@link parent} buffer if set. */\n    size?: number\n  } {\n    return {\n      buffer: {\n        type: getBindGroupLayoutBindingType(this),\n      },\n      ...(this.parent && { offset: this.offset, size: this.arrayBufferSize }),\n    }\n  }\n\n  /**\n   * Get the resource cache key\n   * @readonly\n   */\n  get resourceLayoutCacheKey(): string {\n    return `buffer,${getBindGroupLayoutBindingType(this)},${this.visibility},`\n  }\n\n  /**\n   * Get {@link GPUDevice.createBindGroup().descriptor.entries.resource | GPUBindGroup entry resource}.\n   * @readonly\n   */\n  get resource(): {\n    /** {@link GPUBindGroup | bind group} resource */\n    buffer: GPUBuffer | null\n    /** Offset in bytes in the {@link parent} buffer if set. */\n    offset?: number\n    /** Size in bytes in the {@link parent} buffer if set. */\n    size?: number\n  } {\n    return {\n      buffer: this.parent ? this.parent.buffer.GPUBuffer : this.buffer.GPUBuffer,\n      ...(this.parent && { offset: this.offset, size: this.arrayBufferSize }),\n    }\n  }\n\n  /**\n   * Clone this {@link BufferBinding} into a new one. Allows to skip buffer layout alignment computations.\n   * @param params - params to use for cloning\n   */\n  clone(params = {} as BufferBindingParams | WritableBufferBindingParams): BufferBinding | WritableBufferBinding {\n    let { struct, childrenBindings, parent, ...defaultParams } = params\n\n    // patch default params with this buffer bindings options\n    const { label, name, bindingType, visibility, useStruct, access, usage } = this.options\n    defaultParams = { ...{ label, name, bindingType, visibility, useStruct, access, usage }, ...defaultParams }\n\n    // create an empty shell\n    const bufferBindingCopy = new (<typeof BufferBinding | typeof WritableBufferBinding>this.constructor)(defaultParams)\n\n    // create the reactive structs\n    struct = struct || BufferBinding.cloneStruct(this.options.struct)\n    bufferBindingCopy.options.struct = struct\n    bufferBindingCopy.setBindings(struct)\n\n    // set the array buffer, view and buffer sizes\n    bufferBindingCopy.arrayBufferSize = this.arrayBufferSize\n\n    bufferBindingCopy.arrayBuffer = new ArrayBuffer(bufferBindingCopy.arrayBufferSize)\n    bufferBindingCopy.arrayView = new DataView(\n      bufferBindingCopy.arrayBuffer,\n      0,\n      bufferBindingCopy.arrayBuffer.byteLength\n    )\n\n    if (!bufferBindingCopy.options.buffer) {\n      bufferBindingCopy.buffer.size = bufferBindingCopy.arrayBuffer.byteLength\n    }\n\n    // now set the buffer elements alignment from this buffer binding\n    this.bufferElements.forEach((bufferElement: BufferArrayElement) => {\n      const newBufferElement = new (<typeof BufferArrayElement>bufferElement.constructor)({\n        name: bufferElement.name,\n        key: bufferElement.key,\n        type: bufferElement.type,\n        ...(bufferElement.arrayLength && {\n          arrayLength: bufferElement.arrayLength,\n        }),\n      })\n\n      newBufferElement.alignment = JSON.parse(JSON.stringify(bufferElement.alignment))\n      if (bufferElement.arrayStride) {\n        newBufferElement.arrayStride = bufferElement.arrayStride\n      }\n\n      newBufferElement.setView(bufferBindingCopy.arrayBuffer, bufferBindingCopy.arrayView)\n      bufferBindingCopy.bufferElements.push(newBufferElement)\n    })\n\n    // children bindings\n    if (this.options.childrenBindings) {\n      bufferBindingCopy.options.childrenBindings = this.options.childrenBindings\n\n      // cache key\n      bufferBindingCopy.options.childrenBindings.forEach((child) => {\n        const count = child.count ? Math.max(1, child.count) : 1\n        bufferBindingCopy.cacheKey += `child(count:${count}):${child.binding.cacheKey}`\n      })\n\n      // clone children bindings structs\n      bufferBindingCopy.options.childrenBindings.forEach((child) => {\n        bufferBindingCopy.childrenBindings = [\n          ...bufferBindingCopy.childrenBindings,\n          Array.from(Array(Math.max(1, child.count || 1)).keys()).map((i) => {\n            return child.binding.clone({\n              ...child.binding.options,\n              // clone struct with new arrays\n              struct: BufferBinding.cloneStruct(child.binding.options.struct),\n            })\n          }),\n        ].flat()\n      })\n\n      // set children bindings alignments and data views\n      bufferBindingCopy.childrenBindings.forEach((binding, index) => {\n        let offset = this.arrayView.byteLength\n\n        for (let i = 0; i < index; i++) {\n          offset += this.childrenBindings[i].arrayBuffer.byteLength\n        }\n\n        binding.bufferElements.forEach((bufferElement, i) => {\n          bufferElement.alignment.start.row = this.childrenBindings[index].bufferElements[i].alignment.start.row\n          bufferElement.alignment.end.row = this.childrenBindings[index].bufferElements[i].alignment.end.row\n        })\n\n        binding.arrayView = new DataView(bufferBindingCopy.arrayBuffer, offset, binding.arrayBuffer.byteLength)\n\n        for (const bufferElement of binding.bufferElements) {\n          bufferElement.setView(bufferBindingCopy.arrayBuffer, binding.arrayView)\n        }\n      })\n    }\n\n    // create WGSL fragment\n    bufferBindingCopy.setWGSLFragment()\n\n    if (parent) {\n      bufferBindingCopy.parent = parent\n    }\n\n    // update\n    bufferBindingCopy.shouldUpdate = bufferBindingCopy.arrayBufferSize > 0\n\n    return bufferBindingCopy\n  }\n\n  /**\n   * Format bindings struct and set our {@link inputs}\n   * @param bindings - bindings inputs\n   */\n  setBindings(bindings: Record<string, Input>) {\n    for (const bindingKey of Object.keys(bindings)) {\n      const binding = {} as BufferBindingInput\n\n      for (const key in bindings[bindingKey]) {\n        if (key !== 'value') {\n          binding[key] = bindings[bindingKey][key]\n        }\n      }\n\n      // binding name is the key\n      binding.name = bindingKey\n\n      // define a \"value\" getter/setter so we can now when to update the buffer binding\n      Object.defineProperty(binding, 'value', {\n        get() {\n          return binding._value\n        },\n        set(v) {\n          binding._value = v\n          binding.shouldUpdate = true\n        },\n      })\n\n      binding.value = bindings[bindingKey].value\n\n      if (binding.value instanceof Vec2 || binding.value instanceof Vec3) {\n        // add binding update to _onChangeCallback\n        const _onChangeCallback = binding.value._onChangeCallback\n\n        binding.value._onChangeCallback = () => {\n          if (_onChangeCallback) {\n            _onChangeCallback()\n          }\n\n          binding.shouldUpdate = true\n        }\n      }\n\n      this.inputs[bindingKey] = binding\n\n      this.cacheKey += `${bindingKey},${bindings[bindingKey].type},`\n    }\n  }\n\n  /**\n   * Set this {@link BufferBinding} optional {@link BufferBinding.childrenBindings | childrenBindings}.\n   * @param childrenBindings - Array of {@link BufferBindingChildrenBinding} to use as {@link BufferBinding.childrenBindings | childrenBindings}.\n   */\n  setChildrenBindings(childrenBindings: BufferBindingChildrenBinding[]) {\n    this.childrenBindings = []\n\n    if (childrenBindings && childrenBindings.length) {\n      const childrenArray = []\n      childrenBindings\n        .sort((a, b) => {\n          // put the children bindings array in the end\n          const countA = a.count ? Math.max(a.count) : a.forceArray ? 1 : 0\n          const countB = b.count ? Math.max(b.count) : b.forceArray ? 1 : 0\n          return countA - countB\n        })\n        .forEach((child) => {\n          if ((child.count && child.count > 1) || child.forceArray) {\n            childrenArray.push(child.binding)\n          }\n        })\n\n      if (childrenArray.length > 1) {\n        // remove first array element because we are going to keep it\n        childrenArray.shift()\n\n        throwWarning(\n          `BufferBinding: \"${\n            this.label\n          }\" contains multiple children bindings arrays. These children bindings cannot be added to the BufferBinding: \"${childrenArray\n            .map((child) => child.label)\n            .join(', ')}\"`\n        )\n\n        childrenArray.forEach((removedChildBinding) => {\n          childrenBindings = childrenBindings.filter((child) => child.binding.name !== removedChildBinding.name)\n        })\n      }\n\n      // update options\n      this.options.childrenBindings = childrenBindings\n\n      childrenBindings.forEach((child) => {\n        const count = child.count ? Math.max(1, child.count) : 1\n\n        this.cacheKey += `child(count:${count}):${child.binding.cacheKey}`\n\n        // clone them with fresh arrays\n        this.childrenBindings = [\n          ...this.childrenBindings,\n          Array.from(Array(count).keys()).map((i) => {\n            return child.binding.clone({\n              ...child.binding.options,\n              // clone struct with new arrays\n              struct: BufferBinding.cloneStruct(child.binding.options.struct),\n            })\n          }),\n        ].flat()\n      })\n    }\n  }\n\n  /**\n   * Set the buffer alignments from {@link inputs}.\n   */\n  setInputsAlignment() {\n    // early on, check if there's at least one array binding\n    // If there's one and only one, put it at the end of the binding elements array, treat it as a single entry of the type, but loop on it by array.length / size to fill the alignment\n    // If there's more than one, create buffer interleaved elements.\n\n    // if length === 0, OK\n    // if length === 1, put it at the end of our struct\n    // if length > 1, create a buffer interleaved elements\n    let orderedBindings = Object.keys(this.inputs)\n\n    const arrayBindings = orderedBindings.filter((bindingKey) => {\n      return this.inputs[bindingKey].type.includes('array')\n    })\n\n    // put the array struct at the end\n    if (arrayBindings.length) {\n      orderedBindings.sort((bindingKeyA, bindingKeyB) => {\n        // 0 if it's an array, -1 else\n        const isBindingAArray = Math.min(0, this.inputs[bindingKeyA].type.indexOf('array'))\n        const isBindingBArray = Math.min(0, this.inputs[bindingKeyB].type.indexOf('array'))\n\n        return isBindingAArray - isBindingBArray\n      })\n\n      if (arrayBindings.length > 1) {\n        // remove interleaved arrays from the ordered struct key array\n        orderedBindings = orderedBindings.filter((bindingKey) => !arrayBindings.includes(bindingKey))\n      }\n    }\n\n    // handle buffer (non interleaved) elements\n    for (const bindingKey of orderedBindings) {\n      const binding = this.inputs[bindingKey]\n\n      const bufferElementOptions = {\n        name: toCamelCase(binding.name ?? bindingKey),\n        key: bindingKey,\n        type: binding.type,\n      }\n\n      const isArray =\n        binding.type.includes('array') && (Array.isArray(binding.value) || ArrayBuffer.isView(binding.value))\n\n      this.bufferElements.push(\n        isArray\n          ? new BufferArrayElement({\n              ...bufferElementOptions,\n              arrayLength: (binding.value as number[]).length,\n            })\n          : new BufferElement(bufferElementOptions)\n      )\n    }\n\n    // set their alignments\n    this.bufferElements.forEach((bufferElement, index) => {\n      const startOffset = index === 0 ? 0 : this.bufferElements[index - 1].endOffset + 1\n\n      bufferElement.setAlignment(startOffset)\n    })\n\n    // now create our interleaved buffer elements\n    if (arrayBindings.length > 1) {\n      // first get the sizes of the arrays\n      const arraySizes = arrayBindings.map((bindingKey) => {\n        const binding = this.inputs[bindingKey]\n\n        const bufferLayout = getBufferLayout(BufferElement.getBaseType(binding.type))\n\n        return Math.ceil((binding.value as number[] | TypedArray).length / bufferLayout.numElements)\n      })\n\n      // are they all of the same size?\n      const equalSize = arraySizes.every((size, i, array) => size === array[0])\n\n      if (equalSize) {\n        // this will hold our interleaved buffer elements\n        const interleavedBufferElements = arrayBindings.map((bindingKey) => {\n          const binding = this.inputs[bindingKey]\n          return new BufferInterleavedArrayElement({\n            name: toCamelCase(binding.name ?? bindingKey),\n            key: bindingKey,\n            type: binding.type,\n            arrayLength: (binding.value as number[]).length,\n          })\n        })\n\n        // now create temp buffer elements that we'll use to fill the interleaved buffer elements alignments\n        const tempBufferElements = arrayBindings.map((bindingKey) => {\n          const binding = this.inputs[bindingKey]\n          return new BufferElement({\n            name: toCamelCase(binding.name ?? bindingKey),\n            key: bindingKey,\n            type: BufferElement.getType(binding.type),\n          })\n        })\n\n        // set temp buffer alignments as if it was regular buffer elements\n        tempBufferElements.forEach((bufferElement, index) => {\n          if (index === 0) {\n            if (this.bufferElements.length) {\n              // if we already have buffer elements\n              // get last one end row, and start at the next row\n              bufferElement.setAlignmentFromPosition({\n                row: this.bufferElements[this.bufferElements.length - 1].alignment.end.row + 1,\n                byte: 0,\n              })\n            } else {\n              bufferElement.setAlignment(0)\n            }\n          } else {\n            bufferElement.setAlignment(tempBufferElements[index - 1].endOffset + 1)\n          }\n        })\n\n        // now use last temp buffer end offset as our interleaved arrayStride\n        const totalStride =\n          tempBufferElements[tempBufferElements.length - 1].endOffset + 1 - tempBufferElements[0].startOffset\n\n        // finally, set interleaved buffer elements alignment\n        interleavedBufferElements.forEach((bufferElement, index) => {\n          bufferElement.setAlignment(\n            tempBufferElements[index].startOffset,\n            Math.ceil(totalStride / bytesPerRow) * bytesPerRow\n          )\n        })\n\n        // add to our buffer elements array\n        this.bufferElements = [...this.bufferElements, ...interleavedBufferElements]\n      } else {\n        throwWarning(\n          `BufferBinding: \"${\n            this.label\n          }\" contains multiple array inputs that should use an interleaved array, but their sizes do not match. These inputs cannot be added to the BufferBinding: \"${arrayBindings.join(\n            ', '\n          )}\"`\n        )\n      }\n    }\n  }\n\n  /**\n   * Set our buffer attributes:\n   * Takes all the {@link inputs} and adds them to the {@link bufferElements} array with the correct start and end offsets (padded), then fill our {@link arrayBuffer} typed array accordingly.\n   */\n  setBufferAttributes() {\n    const bufferElementsArrayBufferSize = this.bufferElements.length\n      ? this.bufferElements[this.bufferElements.length - 1].paddedByteCount\n      : 0\n\n    this.arrayBufferSize = bufferElementsArrayBufferSize\n\n    this.childrenBindings.forEach((binding) => {\n      this.arrayBufferSize += binding.arrayBufferSize\n    })\n\n    this.arrayBuffer = new ArrayBuffer(this.arrayBufferSize)\n    this.arrayView = new DataView(this.arrayBuffer, 0, bufferElementsArrayBufferSize)\n\n    this.childrenBindings.forEach((binding, index) => {\n      let offset = bufferElementsArrayBufferSize\n\n      for (let i = 0; i < index; i++) {\n        offset += this.childrenBindings[i].arrayBuffer.byteLength\n      }\n\n      const bufferElLastRow = this.bufferElements.length\n        ? this.bufferElements[this.bufferElements.length - 1].alignment.end.row + 1\n        : 0\n\n      const bindingLastRow =\n        index > 0\n          ? this.childrenBindings[index - 1].bufferElements.length\n            ? this.childrenBindings[index - 1].bufferElements[\n                this.childrenBindings[index - 1].bufferElements.length - 1\n              ].alignment.end.row + 1\n            : 0\n          : 0\n\n      binding.bufferElements.forEach((bufferElement) => {\n        const rowOffset = index === 0 ? bufferElLastRow + bindingLastRow : bindingLastRow\n        bufferElement.alignment.start.row += rowOffset\n        bufferElement.alignment.end.row += rowOffset\n      })\n\n      binding.arrayView = new DataView(this.arrayBuffer, offset, binding.arrayBuffer.byteLength)\n\n      for (const bufferElement of binding.bufferElements) {\n        bufferElement.setView(this.arrayBuffer, binding.arrayView)\n      }\n    })\n\n    if (!this.options.buffer) {\n      this.buffer.size = this.arrayBuffer.byteLength\n    }\n\n    for (const bufferElement of this.bufferElements) {\n      bufferElement.setView(this.arrayBuffer, this.arrayView)\n    }\n\n    this.shouldUpdate = this.arrayBufferSize > 0\n  }\n\n  /**\n   * Set the WGSL code snippet to append to the shaders code. It consists of variable (and Struct structures if needed) declarations.\n   */\n  setWGSLFragment() {\n    if (!this.bufferElements.length && !this.childrenBindings.length) return\n\n    const kebabCaseLabel = toKebabCase(this.label)\n\n    if (this.useStruct) {\n      const structs = {}\n\n      structs[kebabCaseLabel] = {}\n\n      const bufferElements = this.bufferElements.filter(\n        (bufferElement) => !(bufferElement instanceof BufferInterleavedArrayElement)\n      )\n      const interleavedBufferElements = this.bufferElements.filter(\n        (bufferElement) => bufferElement instanceof BufferInterleavedArrayElement\n      ) as BufferInterleavedArrayElement[]\n\n      if (interleavedBufferElements.length) {\n        const arrayLength = this.bindingType === 'uniform' ? `, ${interleavedBufferElements[0].numElements}` : ''\n\n        if (bufferElements.length) {\n          structs[`${kebabCaseLabel}Element`] = {}\n\n          interleavedBufferElements.forEach((binding) => {\n            structs[`${kebabCaseLabel}Element`][binding.name] = BufferElement.getType(binding.type)\n          })\n\n          bufferElements.forEach((binding) => {\n            structs[kebabCaseLabel][binding.name] = binding.type\n          })\n\n          const interleavedBufferName = this.bufferElements.find((bufferElement) => bufferElement.name === 'elements')\n            ? `${this.name}Elements`\n            : 'elements'\n\n          structs[kebabCaseLabel][interleavedBufferName] = `array<${kebabCaseLabel}Element${arrayLength}>`\n\n          const varType = getBindingWGSLVarType(this)\n          this.wgslGroupFragment = [`${varType} ${this.name}: ${kebabCaseLabel};`]\n        } else {\n          this.bufferElements.forEach((binding) => {\n            structs[kebabCaseLabel][binding.name] = BufferElement.getType(binding.type)\n          })\n\n          const varType = getBindingWGSLVarType(this)\n          this.wgslGroupFragment = [`${varType} ${this.name}: array<${kebabCaseLabel}${arrayLength}>;`]\n        }\n      } else {\n        bufferElements.forEach((binding) => {\n          const bindingType =\n            this.bindingType === 'uniform' && 'numElements' in binding\n              ? `array<${BufferElement.getType(binding.type)}, ${binding.numElements}>`\n              : binding.type\n\n          structs[kebabCaseLabel][binding.name] = bindingType\n        })\n\n        const varType = getBindingWGSLVarType(this)\n        this.wgslGroupFragment = [`${varType} ${this.name}: ${kebabCaseLabel};`]\n      }\n\n      if (this.childrenBindings.length) {\n        this.options.childrenBindings.forEach((child) => {\n          structs[kebabCaseLabel][child.binding.name] =\n            (child.count && child.count > 1) || child.forceArray\n              ? `array<${toKebabCase(child.binding.label)}>`\n              : toKebabCase(child.binding.label)\n        })\n      }\n\n      const additionalBindings = this.childrenBindings.length\n        ? this.options.childrenBindings.map((child) => child.binding.wgslStructFragment).join('\\n\\n') + '\\n\\n'\n        : ''\n\n      this.wgslStructFragment =\n        additionalBindings +\n        Object.keys(structs)\n          .reverse()\n          .map((struct) => {\n            return `struct ${struct} {\\n\\t${Object.keys(structs[struct])\n              .map((binding) => `${binding}: ${structs[struct][binding]}`)\n              .join(',\\n\\t')}\\n};`\n          })\n          .join('\\n\\n')\n    } else {\n      this.wgslStructFragment = ''\n      this.wgslGroupFragment = this.bufferElements.map((binding) => {\n        const varType = getBindingWGSLVarType(this)\n        return `${varType} ${binding.name}: ${binding.type};`\n      })\n    }\n  }\n\n  /**\n   * Set a {@link BufferBinding#shouldUpdate | binding shouldUpdate} flag to `true` to update our {@link arrayBuffer} array during next render.\n   * @param bindingName - the binding name/key to update\n   */\n  shouldUpdateBinding(bindingName = '') {\n    if (this.inputs[bindingName]) {\n      this.inputs[bindingName].shouldUpdate = true\n    }\n  }\n\n  /**\n   * Executed at the beginning of a Material render call.\n   * If any of the {@link inputs} has changed, run its `onBeforeUpdate` callback then updates our {@link arrayBuffer} array.\n   * Also sets the {@link shouldUpdate} property to true so the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} knows it will need to update the {@link GPUBuffer}.\n   */\n  update() {\n    // if we're using an external buffer, bail\n    // because we don't want to update it\n    if (this.options.buffer) {\n      this.shouldUpdate = false\n      return\n    }\n\n    const inputs = Object.values(this.inputs)\n\n    for (const binding of inputs) {\n      const bufferElement = this.bufferElements.find((bufferEl) => bufferEl.key === binding.name)\n\n      if (binding.shouldUpdate && bufferElement) {\n        binding.onBeforeUpdate && binding.onBeforeUpdate()\n        // we're going to directly update the arrayBuffer from the buffer element update method\n        bufferElement.update(binding.value)\n\n        this.shouldUpdate = true\n        binding.shouldUpdate = false\n      }\n    }\n\n    this.childrenBindings.forEach((binding) => {\n      binding.update()\n      if (binding.shouldUpdate) {\n        this.shouldUpdate = true\n      }\n\n      binding.shouldUpdate = false\n    })\n\n    if (this.shouldUpdate && this.parent && this.parentViewSetBufferEls) {\n      let index = 0\n\n      this.parentViewSetBufferEls.forEach((viewSetBuffer, i) => {\n        const { bufferElement, viewSetFunction } = viewSetBuffer\n        bufferElement.view.forEach((value) => {\n          viewSetFunction(index * bufferElement.view.BYTES_PER_ELEMENT, value, true)\n          index++\n        })\n      })\n\n      this.parent.shouldUpdate = true\n\n      // reset the should update flag\n      // this binding GPU buffer is not going to be used anyway\n      this.shouldUpdate = false\n    }\n  }\n\n  /**\n   * Extract the data corresponding to a specific {@link BufferElement} from a {@link Float32Array} holding the {@link BufferBinding#buffer | GPU buffer} data of this {@link BufferBinding}\n   * @param parameters - parameters used to extract the data\n   * @param parameters.result - {@link Float32Array} holding {@link GPUBuffer} data\n   * @param parameters.bufferElementName - name of the {@link BufferElement} to use to extract the data\n   * @returns - extracted data from the {@link Float32Array}\n   */\n  extractBufferElementDataFromBufferResult({\n    result,\n    bufferElementName,\n  }: {\n    result: Float32Array\n    bufferElementName: BufferElement['name']\n  }): Float32Array {\n    const bufferElement = this.bufferElements.find((bufferElement) => bufferElement.name === bufferElementName)\n    if (bufferElement) {\n      return bufferElement.extractDataFromBufferResult(result)\n    } else {\n      return result\n    }\n  }\n}\n","import { BufferBinding, BufferBindingParams } from './BufferBinding'\r\nimport { Buffer } from '../buffers/Buffer'\r\n\r\n/**\r\n * Parameters used to create a {@link WritableBufferBinding}\r\n */\r\nexport interface WritableBufferBindingParams extends BufferBindingParams {\r\n  /** Whether whe should automatically copy the {@link WritableBufferBinding#buffer | GPU buffer} content into our {@link WritableBufferBinding#resultBuffer | result GPU buffer} */\r\n  shouldCopyResult?: boolean\r\n}\r\n\r\n/**\r\n * Used to create a {@link BufferBinding} that can hold read/write storage bindings along with a {@link WritableBufferBinding#resultBuffer | result GPU buffer} that can be used to get data back from the GPU.\r\n *\r\n * Note that it is automatically created by the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} when a {@link types/BindGroups.BindGroupInputs#storages | storages input} has its {@link BufferBindingParams#access | access} property set to `\"read_write\"`.\r\n */\r\nexport class WritableBufferBinding extends BufferBinding {\r\n  /** Flag indicating whether whe should automatically copy the {@link buffer | GPU buffer} content into our {@link resultBuffer | result GPU buffer} */\r\n  shouldCopyResult: boolean\r\n  /** The result GPUBuffer */\r\n  resultBuffer: Buffer\r\n  /** Options used to create this {@link WritableBufferBinding} */\r\n  options: WritableBufferBindingParams\r\n\r\n  /**\r\n   * WritableBufferBinding constructor\r\n   * @param parameters - {@link WritableBufferBindingParams | parameters} used to create our {@link WritableBufferBinding}\r\n   */\r\n  constructor({\r\n    label = 'Work',\r\n    name = 'work',\r\n    bindingType,\r\n    visibility,\r\n    useStruct = true,\r\n    access = 'read_write',\r\n    usage = [],\r\n    struct = {},\r\n    childrenBindings = [],\r\n    buffer = null,\r\n    parent = null,\r\n    minOffset = 256,\r\n    offset = 0,\r\n    shouldCopyResult = false,\r\n  }: WritableBufferBindingParams) {\r\n    bindingType = 'storage'\r\n    visibility = ['compute']\r\n\r\n    super({\r\n      label,\r\n      name,\r\n      bindingType,\r\n      visibility,\r\n      useStruct,\r\n      access,\r\n      usage,\r\n      struct,\r\n      childrenBindings,\r\n      buffer,\r\n      parent,\r\n      minOffset,\r\n      offset,\r\n    })\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      shouldCopyResult,\r\n    }\r\n\r\n    this.shouldCopyResult = shouldCopyResult\r\n    this.cacheKey += `${shouldCopyResult},`\r\n\r\n    // can be used as our buffer copy destination\r\n    this.resultBuffer = new Buffer()\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { generateUUID, toKebabCase } from '../../utils/utils'\r\nimport { WritableBufferBinding, WritableBufferBindingParams } from '../bindings/WritableBufferBinding'\r\nimport { BufferBinding } from '../bindings/BufferBinding'\r\nimport {\r\n  AllowedBindGroups,\r\n  BindGroupBindingElement,\r\n  BindGroupBufferBindingElement,\r\n  BindGroupEntries,\r\n  BindGroupParams,\r\n  ReadOnlyInputBindings,\r\n} from '../../types/BindGroups'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { TextureBindGroupParams } from './TextureBindGroup'\r\nimport { BufferBindingType } from '../bindings/Binding'\r\nimport { BufferUsageKeys } from '../buffers/utils'\r\n\r\n/**\r\n * Used to handle all inputs data sent to the GPU.<br>\r\n * In WebGPU, data (buffers, textures or samplers, called bindings) are organised by bind groups, containing those bindings.\r\n *\r\n * ## Bindings\r\n *\r\n * A {@link BindGroup} is responsible for creating each {@link BufferBinding} {@link GPUBuffer} and then the {@link GPUBindGroup} and {@link GPUBindGroupLayout} that are used to create {@link GPUComputePipeline} or {@link GPURenderPipeline}.<br>\r\n * Those are generally automatically created by the {@link core/materials/Material.Material | Material} using this {@link BindGroup}. If you need to manually create them, you will have to call its {@link BindGroup#createBindGroup | `createBindGroup()` method}\r\n *\r\n * ### Samplers and textures\r\n *\r\n * A {@link BindGroup} is best suited to handle {@link GPUBuffer} only bindings. If you need to handle {@link GPUSampler}, a {@link GPUTexture} or a {@link GPUExternalTexture}, you should use a {@link core/bindGroups/TextureBindGroup.TextureBindGroup | TextureBindGroup} instead.\r\n *\r\n * ### Updating a GPUBindGroup or GPUBindGroupLayout\r\n *\r\n * Each time one of the {@link GPUDevice.createBindGroup().resource | binding resource} changes, its {@link BindGroup#bindGroup | bindGroup} will be recreated (usually, when a {@link GPUTexture} is uploaded).<br>\r\n * Each time one of the {@link GPUDevice.createBindGroupLayout().resource_layout_objects | binding resource layout} changes, its {@link BindGroup#bindGroupLayout | bindGroupLayout} and {@link BindGroup#bindGroup | bindGroup} will be recreated, and the {@link GPUComputePipeline} or {@link GPURenderPipeline} will be recreated as well.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * const bindGroup = new BindGroup(gpuCurtains, {\r\n *   label: 'My bind group',\r\n *   uniforms: {\r\n *     params: {\r\n *       visibility: ['fragment'],\r\n *       struct: {\r\n *         opacity: {\r\n *           value: 'f32',\r\n *           value: 1,\r\n *         },\r\n *         mousePosition: {\r\n *           value: 'vec2f',\r\n *           value: new Vec2(),\r\n *         },\r\n *       },\r\n *     },\r\n *   },\r\n * })\r\n *\r\n * // create the GPU buffer, bindGroupLayout and bindGroup\r\n * bindGroup.createBindGroup()\r\n * ```\r\n */\r\nexport class BindGroup {\r\n  /** The type of the {@link BindGroup} */\r\n  type: string\r\n  /** The universal unique id of the {@link BindGroup} */\r\n  uuid: string\r\n  /** The {@link Renderer} used */\r\n  renderer: Renderer\r\n  /** Options used to create this {@link BindGroup} */\r\n  options: TextureBindGroupParams\r\n  /** Index of this {@link BindGroup}, used to link struct in the shaders */\r\n  index: number\r\n\r\n  /** List of {@link BindGroupBindingElement | bindings} (buffers, texture, etc.) handled by this {@link BindGroup} */\r\n  bindings: BindGroupBindingElement[]\r\n\r\n  /** Our {@link BindGroup} {@link BindGroupEntries | entries} objects */\r\n  entries: BindGroupEntries\r\n\r\n  /** Our {@link BindGroup}{@link GPUBindGroupLayout} */\r\n  bindGroupLayout: null | GPUBindGroupLayout\r\n  /** Our {@link BindGroup} {@link GPUBindGroup} */\r\n  bindGroup: null | GPUBindGroup\r\n\r\n  /** A cache key allowing to get / set {@link GPUBindGroupLayout} from the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#bindGroupLayouts | device manager map cache}. */\r\n  layoutCacheKey: string\r\n  /** A cache key allowing the {@link core/pipelines/PipelineManager.PipelineManager | PipelineManager} to compare {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry | RenderPipelineEntry} bind groups content. */\r\n  pipelineCacheKey: string\r\n\r\n  /** Flag indicating whether we need to flush and recreate the pipeline using this {@link BindGroup} */\r\n  needsPipelineFlush: boolean\r\n\r\n  /** A Set to store this {@link BindGroup} consumers ({@link core/materials/Material.Material#uuid | Material uuid})  */\r\n  consumers: Set<string>\r\n\r\n  /**\r\n   * BindGroup constructor\r\n   * @param renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object\r\n   * @param parameters - {@link BindGroupParams | parameters} used to create our {@link BindGroup}\r\n   */\r\n  constructor(\r\n    renderer: Renderer | GPUCurtains,\r\n    { label = 'BindGroup', index = 0, bindings = [], uniforms, storages }: BindGroupParams = {}\r\n  ) {\r\n    this.type = 'BindGroup'\r\n\r\n    renderer = isRenderer(renderer, this.type)\r\n\r\n    this.renderer = renderer\r\n    this.options = {\r\n      label,\r\n      index,\r\n      bindings,\r\n      ...(uniforms && { uniforms }),\r\n      ...(storages && { storages }),\r\n    }\r\n\r\n    this.index = index\r\n    this.uuid = generateUUID()\r\n\r\n    this.bindings = []\r\n    bindings.length && this.addBindings(bindings)\r\n    if (this.options.uniforms || this.options.storages) this.setInputBindings()\r\n\r\n    this.layoutCacheKey = ''\r\n    this.pipelineCacheKey = ''\r\n    this.resetEntries()\r\n\r\n    this.bindGroupLayout = null\r\n    this.bindGroup = null\r\n\r\n    // if we ever update our bind group layout\r\n    // we will have to recreate the whole pipeline again\r\n    this.needsPipelineFlush = false\r\n\r\n    this.consumers = new Set()\r\n\r\n    // add the bind group to the buffers consumers\r\n    for (const binding of this.bufferBindings) {\r\n      if ('buffer' in binding) {\r\n        if (binding.parent) {\r\n          binding.parent.buffer.consumers.add(this.uuid)\r\n        } else {\r\n          binding.buffer.consumers.add(this.uuid)\r\n        }\r\n      }\r\n\r\n      if ('resultBuffer' in binding) {\r\n        binding.resultBuffer.consumers.add(this.uuid)\r\n      }\r\n    }\r\n\r\n    this.renderer.addBindGroup(this)\r\n  }\r\n\r\n  /**\r\n   * Sets our {@link BindGroup#index | bind group index}\r\n   * @param index - {@link BindGroup#index | bind group index} to set\r\n   */\r\n  setIndex(index: number) {\r\n    this.index = index\r\n  }\r\n\r\n  /**\r\n   * Adds an array of already created {@link bindings} (buffers, texture, etc.) to the {@link bindings} array\r\n   * @param bindings - {@link bindings} to add\r\n   */\r\n  addBindings(bindings: BindGroupBindingElement[] = []) {\r\n    bindings.forEach((binding) => {\r\n      if ('buffer' in binding) {\r\n        if (binding.parent) {\r\n          this.renderer.deviceManager.bufferBindings.set(binding.parent.cacheKey, binding.parent)\r\n          binding.parent.buffer.consumers.add(this.uuid)\r\n        } else {\r\n          this.renderer.deviceManager.bufferBindings.set(binding.cacheKey, binding)\r\n          binding.buffer.consumers.add(this.uuid)\r\n        }\r\n      }\r\n    })\r\n\r\n    this.bindings = [...this.bindings, ...bindings]\r\n  }\r\n\r\n  /**\r\n   * Adds an already created {@link bindings} (buffers, texture, etc.) to the {@link bindings} array\r\n   * @param binding - binding to add\r\n   */\r\n  addBinding(binding: BindGroupBindingElement) {\r\n    this.bindings.push(binding)\r\n  }\r\n\r\n  /**\r\n   * Destroy a {@link BufferBinding} buffers.\r\n   * @param binding - {@link BufferBinding} from which to destroy the buffers.\r\n   */\r\n  destroyBufferBinding(binding: BindGroupBufferBindingElement) {\r\n    if ('buffer' in binding) {\r\n      this.renderer.removeBuffer(binding.buffer)\r\n\r\n      binding.buffer.consumers.delete(this.uuid)\r\n      if (!binding.buffer.consumers.size) {\r\n        binding.buffer.destroy()\r\n      }\r\n\r\n      if (binding.parent) {\r\n        binding.parent.buffer.consumers.delete(this.uuid)\r\n\r\n        if (!binding.parent.buffer.consumers.size) {\r\n          this.renderer.removeBuffer(binding.parent.buffer)\r\n          binding.parent.buffer.destroy()\r\n        }\r\n      }\r\n    }\r\n\r\n    if ('resultBuffer' in binding) {\r\n      this.renderer.removeBuffer(binding.resultBuffer)\r\n\r\n      binding.resultBuffer.consumers.delete(this.uuid)\r\n      if (!binding.resultBuffer.consumers.size) {\r\n        binding.resultBuffer.destroy()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Creates Bindings based on a list of inputs\r\n   * @param bindingType - {@link core/bindings/Binding.Binding#bindingType | binding type}\r\n   * @param inputs - {@link ReadOnlyInputBindings | inputs (uniform or storage)} that will be used to create the binding\r\n   * @returns - a {@link bindings} array\r\n   */\r\n  createInputBindings(\r\n    bindingType: BufferBindingType = 'uniform',\r\n    inputs: ReadOnlyInputBindings = {}\r\n  ): BindGroupBindingElement[] {\r\n    let bindings = [\r\n      ...Object.keys(inputs).map((inputKey) => {\r\n        const binding = inputs[inputKey] as WritableBufferBindingParams\r\n\r\n        // bail if no struct\r\n        if (!binding.struct) return\r\n\r\n        const bindingParams: WritableBufferBindingParams = {\r\n          label: toKebabCase(binding.label || inputKey),\r\n          name: inputKey,\r\n          bindingType,\r\n          visibility: binding.access === 'read_write' ? ['compute'] : binding.visibility,\r\n          useStruct: true, // by default\r\n          access: binding.access ?? 'read', // read by default\r\n          ...(binding.usage && { usage: binding.usage }),\r\n          struct: binding.struct,\r\n          ...(binding.shouldCopyResult !== undefined && { shouldCopyResult: binding.shouldCopyResult }),\r\n        }\r\n\r\n        if (binding.useStruct !== false) {\r\n          let key = `${bindingType},${\r\n            binding.visibility === undefined ? 'all' : binding.access === 'read_write' ? 'compute' : binding.visibility\r\n          },true,${binding.access ?? 'read'},`\r\n\r\n          Object.keys(binding.struct).forEach((bindingKey) => {\r\n            key += `${bindingKey},${binding.struct[bindingKey].type},`\r\n          })\r\n\r\n          if (binding.shouldCopyResult !== undefined) {\r\n            key += `${binding.shouldCopyResult},`\r\n          }\r\n\r\n          const cachedBinding = this.renderer.deviceManager.bufferBindings.get(key)\r\n\r\n          if (cachedBinding) {\r\n            return cachedBinding.clone(bindingParams)\r\n          }\r\n        }\r\n\r\n        const BufferBindingConstructor = bindingParams.access === 'read_write' ? WritableBufferBinding : BufferBinding\r\n\r\n        return binding.useStruct !== false\r\n          ? new BufferBindingConstructor(bindingParams)\r\n          : Object.keys(binding.struct).map((bindingKey) => {\r\n              bindingParams.label = toKebabCase(binding.label ? binding.label + bindingKey : inputKey + bindingKey)\r\n              bindingParams.name = inputKey + bindingKey\r\n              bindingParams.useStruct = false\r\n              bindingParams.struct = { [bindingKey]: binding.struct[bindingKey] }\r\n\r\n              return new BufferBindingConstructor(bindingParams)\r\n            })\r\n      }),\r\n    ].flat()\r\n\r\n    // filter to leave only valid bindings\r\n    bindings = bindings.filter(Boolean)\r\n\r\n    bindings.forEach((binding) => {\r\n      this.renderer.deviceManager.bufferBindings.set(binding.cacheKey, binding)\r\n    })\r\n\r\n    return bindings\r\n  }\r\n\r\n  /**\r\n   * Create and adds {@link bindings} based on inputs provided upon creation\r\n   */\r\n  setInputBindings() {\r\n    this.addBindings([\r\n      ...this.createInputBindings('uniform', this.options.uniforms),\r\n      ...this.createInputBindings('storage', this.options.storages),\r\n    ])\r\n  }\r\n\r\n  /**\r\n   * Get whether the GPU bind group is ready to be created\r\n   * It can be created if it has {@link bindings} and has not been created yet\r\n   * @readonly\r\n   */\r\n  get shouldCreateBindGroup(): boolean {\r\n    return !this.bindGroup && !!this.bindings.length\r\n  }\r\n\r\n  /**\r\n   * Reset our {@link BindGroup} {@link entries}\r\n   */\r\n  resetEntries() {\r\n    this.entries = {\r\n      bindGroupLayout: [],\r\n      bindGroup: [],\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the GPU buffers, {@link bindings}, {@link entries}, {@link bindGroupLayout} and {@link bindGroup}\r\n   */\r\n  createBindGroup() {\r\n    this.fillEntries()\r\n    this.setBindGroupLayout()\r\n    this.setBindGroup()\r\n  }\r\n\r\n  /**\r\n   * Reset the {@link BindGroup#entries.bindGroup | bindGroup entries}, recreates them and then recreate the {@link BindGroup#bindGroup | GPU bind group}\r\n   */\r\n  resetBindGroup() {\r\n    this.entries.bindGroup = []\r\n    this.pipelineCacheKey = ''\r\n\r\n    for (const binding of this.bindings) {\r\n      this.addBindGroupEntry(binding)\r\n    }\r\n\r\n    this.setBindGroup()\r\n  }\r\n\r\n  /**\r\n   * Add a {@link BindGroup#entries.bindGroup | bindGroup entry}\r\n   * @param binding - {@link BindGroupBindingElement | binding} to add\r\n   */\r\n  addBindGroupEntry(binding: BindGroupBindingElement) {\r\n    this.entries.bindGroup.push({\r\n      binding: this.entries.bindGroup.length,\r\n      resource: binding.resource,\r\n    })\r\n\r\n    this.pipelineCacheKey += binding.cacheKey\r\n  }\r\n\r\n  /**\r\n   * Reset the {@link BindGroup#entries.bindGroupLayout | bindGroupLayout entries}, recreates them and then recreate the {@link BindGroup#bindGroupLayout | GPU bind group layout}\r\n   */\r\n  resetBindGroupLayout() {\r\n    this.entries.bindGroupLayout = []\r\n    this.layoutCacheKey = ''\r\n\r\n    for (const binding of this.bindings) {\r\n      this.addBindGroupLayoutEntry(binding)\r\n    }\r\n\r\n    this.setBindGroupLayout()\r\n  }\r\n\r\n  /**\r\n   * Add a {@link BindGroup#entries.bindGroupLayout | bindGroupLayout entry}\r\n   * @param binding - {@link BindGroupBindingElement | binding} to add\r\n   */\r\n  addBindGroupLayoutEntry(binding: BindGroupBindingElement) {\r\n    this.entries.bindGroupLayout.push({\r\n      binding: this.entries.bindGroupLayout.length,\r\n      ...binding.resourceLayout,\r\n      visibility: binding.visibility,\r\n    })\r\n\r\n    this.layoutCacheKey += binding.resourceLayoutCacheKey\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration\r\n   */\r\n  loseContext() {\r\n    this.resetEntries()\r\n\r\n    for (const binding of this.bufferBindings) {\r\n      binding.buffer.reset()\r\n\r\n      if (binding.parent) {\r\n        binding.parent.buffer.reset()\r\n      }\r\n\r\n      if ('resultBuffer' in binding) {\r\n        binding.resultBuffer.reset()\r\n      }\r\n    }\r\n\r\n    this.bindGroup = null\r\n    this.bindGroupLayout = null\r\n    this.needsPipelineFlush = true\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored to update our bindings.\r\n   */\r\n  restoreContext() {\r\n    if (this.shouldCreateBindGroup) {\r\n      this.createBindGroup()\r\n    }\r\n\r\n    // finally re-write all our buffers\r\n    for (const bufferBinding of this.bufferBindings) {\r\n      bufferBinding.shouldUpdate = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all {@link BindGroup#bindings | bind group bindings} that handle a {@link GPUBuffer}\r\n   */\r\n  get bufferBindings(): BindGroupBufferBindingElement[] {\r\n    return this.bindings.filter(\r\n      (binding) => binding instanceof BufferBinding || binding instanceof WritableBufferBinding\r\n    ) as BindGroupBufferBindingElement[]\r\n  }\r\n\r\n  /**\r\n   * Creates binding GPUBuffer with correct params.\r\n   * @param binding - The binding element.\r\n   * @param optionalLabel - Optional label to use for the {@link GPUBuffer}.\r\n   */\r\n  createBindingBuffer(binding: BindGroupBufferBindingElement, optionalLabel = null) {\r\n    // [Kangz](https://github.com/Kangz) said:\r\n    // \"In general though COPY_SRC/DST is free (at least in Dawn / Chrome because we add it all the time for our own purpose).\"\r\n    binding.buffer.createBuffer(this.renderer, {\r\n      label: optionalLabel || this.options.label + ': ' + binding.bindingType + ' buffer from: ' + binding.label,\r\n      usage: [...(['copySrc', 'copyDst', binding.bindingType] as BufferUsageKeys[]), ...binding.options.usage],\r\n    })\r\n\r\n    if ('resultBuffer' in binding) {\r\n      binding.resultBuffer.createBuffer(this.renderer, {\r\n        label: this.options.label + ': Result buffer from: ' + binding.label,\r\n        size: binding.arrayBuffer.byteLength,\r\n        usage: ['copyDst', 'mapRead'],\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fill in our entries bindGroupLayout and bindGroup arrays with the correct binding resources.\r\n   * For buffer struct, create a GPUBuffer first if needed\r\n   */\r\n  fillEntries() {\r\n    for (const binding of this.bindings) {\r\n      // if no visibility specified, just set it to the maximum default capabilities\r\n      if (!binding.visibility) {\r\n        binding.visibility = GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE\r\n      }\r\n\r\n      // if it's a buffer binding, create the GPUBuffer\r\n      if ('buffer' in binding) {\r\n        // do not create if it has a parent but create parent instead\r\n        if (binding.parent && !binding.parent.buffer.GPUBuffer) {\r\n          this.createBindingBuffer(binding.parent, binding.parent.options.label)\r\n        } else if (!binding.buffer.GPUBuffer && !binding.parent) {\r\n          this.createBindingBuffer(binding)\r\n        }\r\n      }\r\n\r\n      // now that everything is ready, fill our entries\r\n      this.addBindGroupLayoutEntry(binding)\r\n      this.addBindGroupEntry(binding)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a bind group binding by name/key\r\n   * @param bindingName - the binding name or key\r\n   * @returns - the found binding, or null if not found\r\n   */\r\n  getBindingByName(bindingName = ''): BindGroupBindingElement | null {\r\n    return this.bindings.find((binding) => binding.name === bindingName)\r\n  }\r\n\r\n  /**\r\n   * Create a GPUBindGroupLayout and set our {@link bindGroupLayout}\r\n   */\r\n  setBindGroupLayout() {\r\n    const bindGroupLayout = this.renderer.deviceManager.bindGroupLayouts.get(this.layoutCacheKey)\r\n\r\n    if (bindGroupLayout) {\r\n      this.bindGroupLayout = bindGroupLayout\r\n    } else {\r\n      this.bindGroupLayout = this.renderer.createBindGroupLayout({\r\n        label: this.options.label + ' layout',\r\n        entries: this.entries.bindGroupLayout,\r\n      })\r\n\r\n      this.renderer.deviceManager.bindGroupLayouts.set(this.layoutCacheKey, this.bindGroupLayout)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a GPUBindGroup and set our {@link bindGroup}\r\n   */\r\n  setBindGroup() {\r\n    this.bindGroup = this.renderer.createBindGroup({\r\n      label: this.options.label,\r\n      layout: this.bindGroupLayout,\r\n      entries: this.entries.bindGroup,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Check whether we should update (write) our {@link GPUBuffer} or not.\r\n   */\r\n  updateBufferBindings() {\r\n    this.bindings.forEach((binding, index) => {\r\n      if ('buffer' in binding) {\r\n        // update binding elements\r\n        binding.update()\r\n\r\n        // now write to the GPUBuffer if needed\r\n        if (binding.shouldUpdate && binding.buffer.GPUBuffer) {\r\n          // bufferOffset is always equals to 0 in our case\r\n          if (!binding.useStruct && binding.bufferElements.length > 1) {\r\n            // we're in a non struct buffer binding with multiple entries\r\n            // that should not happen but that way we're covered\r\n            this.renderer.queueWriteBuffer(binding.buffer.GPUBuffer, 0, binding.bufferElements[index].view)\r\n          } else {\r\n            this.renderer.queueWriteBuffer(binding.buffer.GPUBuffer, 0, binding.arrayBuffer)\r\n          }\r\n\r\n          // reset update flag\r\n          binding.shouldUpdate = false\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Update the {@link BindGroup}, which means update its {@link BindGroup#bufferBindings | buffer bindings} and {@link BindGroup#resetBindGroup | reset it} if needed.\r\n   * Called at each render from the parentMesh {@link core/materials/Material.Material | material}\r\n   */\r\n  update() {\r\n    this.updateBufferBindings()\r\n\r\n    const needBindGroupReset = this.bindings.some((binding) => binding.shouldResetBindGroup)\r\n    const needBindGroupLayoutReset = this.bindings.some((binding) => binding.shouldResetBindGroupLayout)\r\n\r\n    // since other bind groups might be using that binding\r\n    // wait for the end of the render loop to reset the bindings flags\r\n    if (needBindGroupReset || needBindGroupLayoutReset) {\r\n      this.renderer.onAfterCommandEncoderSubmission.add(\r\n        () => {\r\n          for (const binding of this.bindings) {\r\n            binding.shouldResetBindGroup = false\r\n            binding.shouldResetBindGroupLayout = false\r\n          }\r\n        },\r\n        { once: true }\r\n      )\r\n    }\r\n\r\n    if (needBindGroupLayoutReset) {\r\n      this.resetBindGroupLayout()\r\n      // bind group layout has changed, we have to recreate the pipeline\r\n      this.needsPipelineFlush = true\r\n    }\r\n\r\n    if (needBindGroupReset) {\r\n      this.resetBindGroup()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clones a {@link BindGroup} from a list of {@link BindGroup.bindings | bindings}.\r\n   * Useful to create a new bind group with already created buffers, but swapped.\r\n   * @param parameters - parameters to use for cloning.\r\n   * @param parameters.bindings - our input {@link BindGroup.bindings | bindings}.\r\n   * @param [parameters.keepLayout=false] - whether we should keep original {@link bindGroupLayout} or not.\r\n   * @returns - the cloned {@link BindGroup}.\r\n   */\r\n  clone({\r\n    bindings = [],\r\n    keepLayout = false,\r\n  }: {\r\n    bindings?: BindGroupBindingElement[]\r\n    keepLayout?: boolean\r\n  } = {}): AllowedBindGroups {\r\n    const params = { ...this.options }\r\n    params.label += ' (copy)'\r\n\r\n    const bindGroupCopy = new (this.constructor as typeof BindGroup)(this.renderer, {\r\n      label: params.label,\r\n    })\r\n\r\n    bindGroupCopy.setIndex(this.index)\r\n    bindGroupCopy.options = params\r\n\r\n    const bindingsRef = bindings.length ? bindings : this.bindings\r\n\r\n    for (const binding of bindingsRef) {\r\n      bindGroupCopy.addBinding(binding)\r\n\r\n      // if it's a buffer binding without a GPUBuffer, create it now\r\n      if ('buffer' in binding) {\r\n        // do not create if it has a parent but create parent instead\r\n        if (binding.parent && !binding.parent.buffer.GPUBuffer) {\r\n          this.createBindingBuffer(binding.parent, binding.parent.options.label)\r\n          binding.parent.buffer.consumers.add(bindGroupCopy.uuid)\r\n        } else if (!binding.buffer.GPUBuffer && !binding.parent) {\r\n          this.createBindingBuffer(binding)\r\n        }\r\n\r\n        if ('resultBuffer' in binding) {\r\n          binding.resultBuffer.consumers.add(bindGroupCopy.uuid)\r\n        }\r\n      }\r\n\r\n      // if we should create a new bind group layout, fill it\r\n      if (!keepLayout) {\r\n        bindGroupCopy.addBindGroupLayoutEntry(binding)\r\n      }\r\n\r\n      bindGroupCopy.addBindGroupEntry(binding)\r\n    }\r\n\r\n    // if we should copy the given bind group layout\r\n    if (keepLayout) {\r\n      bindGroupCopy.entries.bindGroupLayout = [...this.entries.bindGroupLayout]\r\n      bindGroupCopy.layoutCacheKey = this.layoutCacheKey\r\n    }\r\n\r\n    bindGroupCopy.setBindGroupLayout()\r\n    bindGroupCopy.setBindGroup()\r\n\r\n    return bindGroupCopy\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link BindGroup}\r\n   * Most important is to destroy the GPUBuffers to free the memory\r\n   */\r\n  destroy() {\r\n    this.renderer.removeBindGroup(this)\r\n\r\n    for (const binding of this.bufferBindings) {\r\n      this.destroyBufferBinding(binding)\r\n    }\r\n\r\n    this.bindings = []\r\n    this.bindGroupLayout = null\r\n    this.bindGroup = null\r\n    this.resetEntries()\r\n  }\r\n}\r\n","import { Binding, BindingMemoryAccessType, BindingParams, DOMTextureBindingType } from './Binding'\r\nimport {\r\n  getBindGroupLayoutTextureBindingCacheKey,\r\n  getBindGroupLayoutTextureBindingType,\r\n  getTextureBindingWGSLVarType,\r\n} from './utils'\r\n\r\n/** Defines a {@link TextureBinding} {@link TextureBinding#resource | resource} */\r\nexport type TextureBindingResource = GPUTexture | GPUExternalTexture | null\r\n\r\n/**\r\n * An object defining all possible {@link TextureBinding} class instancing parameters\r\n */\r\nexport interface TextureBindingParams extends BindingParams {\r\n  /** The binding type of the {@link TextureBinding} */\r\n  bindingType?: DOMTextureBindingType\r\n  /** {@link TextureBinding} {@link TextureBinding#resource | resource} */\r\n  texture: TextureBindingResource\r\n  /** The {@link GPUTexture | texture} format to use */\r\n  format?: GPUTextureFormat\r\n  /** The storage {@link GPUTexture | texture} binding memory access types (read only, write only or read/write) */\r\n  access?: BindingMemoryAccessType\r\n  /** The {@link GPUTexture | texture} view dimension to use */\r\n  viewDimension?: GPUTextureViewDimension\r\n  /** Whethe the {@link GPUTexture | texture} is a multisampled texture. Mainly used internally by depth textures if needed. */\r\n  multisampled?: boolean\r\n}\r\n\r\n/**\r\n * Used to handle {@link GPUTexture} and {@link GPUExternalTexture} bindings.\r\n *\r\n * Provide both {@link TextureBinding#resourceLayout | resourceLayout} and {@link TextureBinding#resource | resource} to the {@link GPUBindGroupLayout} and {@link GPUBindGroup}.<br>\r\n * Also create the appropriate WGSL code snippet to add to the shaders.\r\n */\r\nexport class TextureBinding extends Binding {\r\n  /** The binding type of the {@link TextureBinding} */\r\n  bindingType: DOMTextureBindingType\r\n  /** Our {@link TextureBinding} resource, i.e. a {@link GPUTexture} or {@link GPUExternalTexture} */\r\n  texture: TextureBindingResource\r\n  /** An array of strings to append to our shaders code declaring all the WGSL variables representing this {@link TextureBinding} */\r\n  wgslGroupFragment: string[]\r\n  /** Options used to create this {@link TextureBinding} */\r\n  options: TextureBindingParams\r\n\r\n  /**\r\n   * TextureBinding constructor\r\n   * @param parameters - {@link TextureBindingParams | parameters} used to create our {@link TextureBinding}\r\n   */\r\n  constructor({\r\n    label = 'Texture',\r\n    name = 'texture',\r\n    bindingType,\r\n    visibility,\r\n    texture,\r\n    format = 'rgba8unorm',\r\n    access = 'write',\r\n    viewDimension = '2d',\r\n    multisampled = false,\r\n  }: TextureBindingParams) {\r\n    bindingType = bindingType ?? 'texture'\r\n\r\n    if (bindingType === 'storage') {\r\n      visibility = ['compute']\r\n    }\r\n\r\n    super({ label, name, bindingType, visibility })\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      texture,\r\n      format,\r\n      access,\r\n      viewDimension,\r\n      multisampled,\r\n    }\r\n\r\n    this.cacheKey += `${format},${access},${viewDimension},${multisampled},`\r\n\r\n    this.resource = texture // should be a texture or an external texture\r\n\r\n    this.setWGSLFragment()\r\n  }\r\n\r\n  /**\r\n   * Get bind group layout entry resource, either for {@link GPUDevice.createBindGroupLayout().texture | GPUBindGroupLayout entry texture resource}, {@link GPUDevice.createBindGroupLayout().storageTexture | GPUBindGroupLayout entry storageTexture resource} or {@link GPUDevice.createBindGroupLayout().externalTexture | GPUBindGroupLayout entry externalTexture resource}.\r\n   * @readonly\r\n   */\r\n  get resourceLayout():\r\n    | GPUTextureBindingLayout\r\n    | GPUExternalTextureBindingLayout\r\n    | GPUStorageTextureBindingLayout\r\n    | null {\r\n    return getBindGroupLayoutTextureBindingType(this)\r\n  }\r\n\r\n  /**\r\n   * Get the resource cache key\r\n   * @readonly\r\n   */\r\n  get resourceLayoutCacheKey(): string {\r\n    return getBindGroupLayoutTextureBindingCacheKey(this)\r\n  }\r\n\r\n  /**\r\n   * Get the {@link GPUDevice.createBindGroup().entries.resource | GPUBindGroup entry resource}.\r\n   */\r\n  get resource(): GPUExternalTexture | GPUTextureView | null {\r\n    return this.texture instanceof GPUTexture\r\n      ? this.texture.createView({ label: this.options.label + ' view', dimension: this.options.viewDimension })\r\n      : this.texture instanceof GPUExternalTexture\r\n      ? this.texture\r\n      : null\r\n  }\r\n\r\n  /**\r\n   * Set the {@link GPUDevice.createBindGroup().entries.resource | GPUBindGroup entry resource}.\r\n   * @param value - new bind group resource\r\n   */\r\n  set resource(value: TextureBindingResource) {\r\n    // resource changed, update bind group!\r\n    if (value || this.texture) this.shouldResetBindGroup = true\r\n    this.texture = value\r\n  }\r\n\r\n  /**\r\n   * Set or update our {@link Binding#bindingType | bindingType} and our WGSL code snippet\r\n   * @param bindingType - the new {@link Binding#bindingType | binding type}\r\n   */\r\n  setBindingType(bindingType: DOMTextureBindingType) {\r\n    if (bindingType !== this.bindingType) {\r\n      // binding type has changed!\r\n      if (bindingType) this.shouldResetBindGroupLayout = true\r\n\r\n      this.bindingType = bindingType\r\n      this.cacheKey = `${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`\r\n      this.setWGSLFragment()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set or update our texture {@link TextureBindingParams#format | format}. Note that if the texture is a `storage` {@link bindingType} and the `format` value is different from the previous one, the associated {@link core/bindGroups/BindGroup.BindGroup#bindGroupLayout | GPU bind group layout} will be recreated.\r\n   * @param format - new texture {@link TextureBindingParams#format | format} value to use\r\n   */\r\n  setFormat(format: GPUTextureFormat) {\r\n    const isNewFormat = format !== this.options.format\r\n    this.options.format = format\r\n\r\n    if (isNewFormat && this.bindingType === 'storage') {\r\n      this.setWGSLFragment()\r\n      this.shouldResetBindGroupLayout = true\r\n      this.cacheKey = `${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set or update our texture {@link TextureBindingParams#multisampled | multisampled}. Note that if the texture is not a `storage` {@link bindingType} and the `multisampled` value is different from the previous one, the associated {@link core/bindGroups/BindGroup.BindGroup#bindGroupLayout | GPU bind group layout} will be recreated.\r\n   * @param multisampled - new texture {@link TextureBindingParams#multisampled | multisampled} value to use\r\n   */\r\n  setMultisampled(multisampled: boolean) {\r\n    const isNewMultisampled = multisampled !== this.options.multisampled\r\n    this.options.multisampled = multisampled\r\n\r\n    if (isNewMultisampled && this.bindingType !== 'storage') {\r\n      this.setWGSLFragment()\r\n      this.shouldResetBindGroupLayout = true\r\n      this.cacheKey = `${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the correct WGSL code snippet.\r\n   */\r\n  setWGSLFragment() {\r\n    this.wgslGroupFragment = [`${getTextureBindingWGSLVarType(this)}`]\r\n  }\r\n}\r\n","import { Vec3 } from './Vec3'\nimport { Quat } from './Quat'\n\nconst xAxis = new Vec3()\nconst yAxis = new Vec3()\nconst zAxis = new Vec3()\n\n/** Defines the base parameters to create an orthographic projection {@link Mat4} */\nexport interface OrthographicProjectionParams {\n  /** Left side of the projection near clipping plane viewport. Default to `-5`. */\n  left?: number\n  /** Right side of the projection near clipping plane viewport. Default to `5`. */\n  right?: number\n  /** Bottom side of the projection near clipping plane viewport. Default to `-5`. */\n  bottom?: number\n  /** Top side of the projection near clipping plane viewport. Default to `5`. */\n  top?: number\n  /** Projection near plane. Default to `0.1`. */\n  near?: number\n  /** Projection far plane. Default to `50`. */\n  far?: number\n}\n\n/** Defines the base parameters to create a perspective projection {@link Mat4} */\nexport interface PerspectiveProjectionParams {\n  /** Perspective field of view (in radians). Default to `90`. */\n  fov?: number\n  /** Perspective aspect ratio (width / height). Default to `1`. */\n  aspect?: number\n  /** Projection near plane. Default to `0.1`. */\n  near?: number\n  /** Projection far plane. Default to `150`. */\n  far?: number\n}\n\n/**\n * Basic 4x4 matrix class used for matrix calculations.\n *\n * Note that like three.js, the constructor and {@link set} method take arguments in row-major order, while internally they are stored in the {@link elements} array in column-major order.\n *\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js\n * @see http://glmatrix.net/docs/mat4.js.html\n */\nexport class Mat4 {\n  /** The type of the {@link Mat4} */\n  type: string\n  /** Our matrix array */\n  elements: Float32Array\n\n  // prettier-ignore\n  /**\n   * Mat4 constructor\n   * @param elements - initial array to use, default to identity matrix\n   */\n  constructor(elements: Float32Array = new Float32Array([\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1\n  ])) {\n    this.type = 'Mat4'\n    this.elements = elements\n  }\n\n  /***\n   * Sets the matrix from 16 numbers\n   *\n   * @param n11 - number\n   * @param n12 - number\n   * @param n13 - number\n   * @param n14 - number\n   * @param n21 - number\n   * @param n22 - number\n   * @param n23 - number\n   * @param n24 - number\n   * @param n31 - number\n   * @param n32 - number\n   * @param n33 - number\n   * @param n34 - number\n   * @param n41 - number\n   * @param n42 - number\n   * @param n43 - number\n   * @param n44 - number\n   *\n   * @returns - this {@link Mat4} after being set\n   */\n  set(\n    n11: number,\n    n12: number,\n    n13: number,\n    n14: number,\n    n21: number,\n    n22: number,\n    n23: number,\n    n24: number,\n    n31: number,\n    n32: number,\n    n33: number,\n    n34: number,\n    n41: number,\n    n42: number,\n    n43: number,\n    n44: number\n  ): Mat4 {\n    const te = this.elements\n\n    te[0] = n11\n    te[1] = n12\n    te[2] = n13\n    te[3] = n14\n    te[4] = n21\n    te[5] = n22\n    te[6] = n23\n    te[7] = n24\n    te[8] = n31\n    te[9] = n32\n    te[10] = n33\n    te[11] = n34\n    te[12] = n41\n    te[13] = n42\n    te[14] = n43\n    te[15] = n44\n\n    return this\n  }\n\n  /**\n   * Sets the {@link Mat4} to an identity matrix\n   * @returns - this {@link Mat4} after being set\n   */\n  identity(): Mat4 {\n    // prettier-ignore\n    this.set(\n      1, 0, 0, 0,\n      0, 1, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1\n    )\n\n    return this\n  }\n\n  /**\n   * Sets the {@link Mat4} values from an array\n   * @param array - array to use\n   * @param offset - offset in the array to use\n   * @returns - this {@link Mat4} after being set\n   */\n  // prettier-ignore\n  setFromArray(array: Float32Array | number[] = new Float32Array([\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1\n  ]), offset = 0): Mat4 {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] = array[i + offset]\n    }\n\n    return this\n  }\n\n  /**\n   * Copy another {@link Mat4}\n   * @param matrix - matrix to copy\n   * @returns - this {@link Mat4} after being set\n   */\n  copy(matrix: Mat4 = new Mat4()): Mat4 {\n    const array = matrix.elements\n    this.elements[0] = array[0]\n    this.elements[1] = array[1]\n    this.elements[2] = array[2]\n    this.elements[3] = array[3]\n    this.elements[4] = array[4]\n    this.elements[5] = array[5]\n    this.elements[6] = array[6]\n    this.elements[7] = array[7]\n    this.elements[8] = array[8]\n    this.elements[9] = array[9]\n    this.elements[10] = array[10]\n    this.elements[11] = array[11]\n    this.elements[12] = array[12]\n    this.elements[13] = array[13]\n    this.elements[14] = array[14]\n    this.elements[15] = array[15]\n\n    return this\n  }\n\n  /**\n   * Clone a {@link Mat4}\n   * @returns - cloned {@link Mat4}\n   */\n  clone(): Mat4 {\n    return new Mat4().copy(this)\n  }\n\n  /**\n   * Multiply this {@link Mat4} with another {@link Mat4}\n   * @param matrix - {@link Mat4} to multiply with\n   * @returns - this {@link Mat4} after multiplication\n   */\n  multiply(matrix: Mat4 = new Mat4()): Mat4 {\n    return this.multiplyMatrices(this, matrix)\n  }\n\n  /**\n   * Multiply another {@link Mat4} with this {@link Mat4}\n   * @param matrix - {@link Mat4} to multiply with\n   * @returns - this {@link Mat4} after multiplication\n   */\n  premultiply(matrix: Mat4 = new Mat4()): Mat4 {\n    return this.multiplyMatrices(matrix, this)\n  }\n\n  /**\n   * Multiply two {@link Mat4}\n   * @param a - first {@link Mat4}\n   * @param b - second {@link Mat4}\n   * @returns - {@link Mat4} resulting from the multiplication\n   */\n  multiplyMatrices(a: Mat4 = new Mat4(), b: Mat4 = new Mat4()): Mat4 {\n    const ae = a.elements\n    const be = b.elements\n    const te = this.elements\n\n    const a11 = ae[0],\n      a12 = ae[4],\n      a13 = ae[8],\n      a14 = ae[12]\n    const a21 = ae[1],\n      a22 = ae[5],\n      a23 = ae[9],\n      a24 = ae[13]\n    const a31 = ae[2],\n      a32 = ae[6],\n      a33 = ae[10],\n      a34 = ae[14]\n    const a41 = ae[3],\n      a42 = ae[7],\n      a43 = ae[11],\n      a44 = ae[15]\n\n    const b11 = be[0],\n      b12 = be[4],\n      b13 = be[8],\n      b14 = be[12]\n    const b21 = be[1],\n      b22 = be[5],\n      b23 = be[9],\n      b24 = be[13]\n    const b31 = be[2],\n      b32 = be[6],\n      b33 = be[10],\n      b34 = be[14]\n    const b41 = be[3],\n      b42 = be[7],\n      b43 = be[11],\n      b44 = be[15]\n\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41\n    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42\n    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43\n    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44\n\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41\n    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42\n    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43\n    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44\n\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41\n    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42\n    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43\n    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44\n\n    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41\n    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42\n    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43\n    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44\n\n    return this\n  }\n\n  /**\n   * {@link premultiply} this {@link Mat4} by a translate matrix (i.e. translateMatrix = new Mat4().translate(vector))\n   * @param vector - translation {@link Vec3 | vector} to use\n   * @returns - this {@link Mat4} after the premultiply translate operation\n   */\n  premultiplyTranslate(vector: Vec3 = new Vec3()): Mat4 {\n    // premultiply by a translateMatrix, ie translateMatrix = new Mat4().translate(vector)\n    // where translateMatrix[0] = 1, translateMatrix[5] = 1, scaleMatrix[10] = 1, translateMatrix[15] = 1 from identity\n    // and translateMatrix[12] = vector.x, translateMatrix[13] = vector.y, translateMatrix[14] = vector.z from translation\n    // equivalent (but faster) to this.multiply(translateMatrix, this)\n\n    // from identity matrix\n    const a11 = 1\n    const a22 = 1\n    const a33 = 1\n    const a44 = 1\n\n    // from translation\n    const a14 = vector.x\n    const a24 = vector.y\n    const a34 = vector.z\n\n    const be = this.elements\n    const te = this.elements\n\n    const b11 = be[0],\n      b12 = be[4],\n      b13 = be[8],\n      b14 = be[12]\n    const b21 = be[1],\n      b22 = be[5],\n      b23 = be[9],\n      b24 = be[13]\n    const b31 = be[2],\n      b32 = be[6],\n      b33 = be[10],\n      b34 = be[14]\n    const b41 = be[3],\n      b42 = be[7],\n      b43 = be[11],\n      b44 = be[15]\n\n    te[0] = a11 * b11 + a14 * b41\n    te[4] = a11 * b12 + a14 * b42\n    te[8] = a11 * b13 + a14 * b43\n    te[12] = a11 * b14 + a14 * b44\n\n    te[1] = a22 * b21 + a24 * b41\n    te[5] = a22 * b22 + a24 * b42\n    te[9] = a22 * b23 + a24 * b43\n    te[13] = a22 * b24 + a24 * b44\n\n    te[2] = a33 * b31 + a34 * b41\n    te[6] = a33 * b32 + a34 * b42\n    te[10] = a33 * b33 + a34 * b43\n    te[14] = a33 * b34 + a34 * b44\n\n    te[3] = a44 * b41\n    te[7] = a44 * b42\n    te[11] = a44 * b43\n    te[15] = a44 * b44\n\n    return this\n  }\n\n  /**\n   * {@link premultiply} this {@link Mat4} by a scale matrix (i.e. translateMatrix = new Mat4().scale(vector))\n   * @param vector - scale {@link Vec3 | vector} to use\n   * @returns - this {@link Mat4} after the premultiply scale operation\n   */\n  premultiplyScale(vector: Vec3 = new Vec3()): Mat4 {\n    // premultiply by a scaleMatrix, ie scaleMatrix = new Mat4().scale(vector)\n    // where scaleMatrix[0] = vector.x, scaleMatrix[5] = vector.y, scaleMatrix[10] = vector.z, scaleMatrix[15] = 1\n    // equivalent (but faster) to this.multiply(scaleMatrix, this)\n\n    const be = this.elements\n    const te = this.elements\n\n    const a11 = vector.x\n    const a22 = vector.y\n    const a33 = vector.z\n    const a44 = 1\n\n    const b11 = be[0],\n      b12 = be[4],\n      b13 = be[8],\n      b14 = be[12]\n    const b21 = be[1],\n      b22 = be[5],\n      b23 = be[9],\n      b24 = be[13]\n    const b31 = be[2],\n      b32 = be[6],\n      b33 = be[10],\n      b34 = be[14]\n    const b41 = be[3],\n      b42 = be[7],\n      b43 = be[11],\n      b44 = be[15]\n\n    te[0] = a11 * b11\n    te[4] = a11 * b12\n    te[8] = a11 * b13\n    te[12] = a11 * b14\n\n    te[1] = a22 * b21\n    te[5] = a22 * b22\n    te[9] = a22 * b23\n    te[13] = a22 * b24\n\n    te[2] = a33 * b31\n    te[6] = a33 * b32\n    te[10] = a33 * b33\n    te[14] = a33 * b34\n\n    te[3] = a44 * b41\n    te[7] = a44 * b42\n    te[11] = a44 * b43\n    te[15] = a44 * b44\n\n    return this\n  }\n\n  /**\n   * Get the {@link Mat4} inverse\n   * @returns - the inverted {@link Mat4}\n   */\n  invert() {\n    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    const te = this.elements,\n      n11 = te[0],\n      n21 = te[1],\n      n31 = te[2],\n      n41 = te[3],\n      n12 = te[4],\n      n22 = te[5],\n      n32 = te[6],\n      n42 = te[7],\n      n13 = te[8],\n      n23 = te[9],\n      n33 = te[10],\n      n43 = te[11],\n      n14 = te[12],\n      n24 = te[13],\n      n34 = te[14],\n      n44 = te[15],\n      t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n      t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n      t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n      t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34\n\n    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14\n\n    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n\n    const detInv = 1 / det\n\n    te[0] = t11 * detInv\n    te[1] =\n      (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) *\n      detInv\n    te[2] =\n      (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) *\n      detInv\n    te[3] =\n      (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) *\n      detInv\n\n    te[4] = t12 * detInv\n    te[5] =\n      (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) *\n      detInv\n    te[6] =\n      (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) *\n      detInv\n    te[7] =\n      (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) *\n      detInv\n\n    te[8] = t13 * detInv\n    te[9] =\n      (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) *\n      detInv\n    te[10] =\n      (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) *\n      detInv\n    te[11] =\n      (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) *\n      detInv\n\n    te[12] = t14 * detInv\n    te[13] =\n      (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) *\n      detInv\n    te[14] =\n      (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) *\n      detInv\n    te[15] =\n      (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) *\n      detInv\n\n    return this\n  }\n\n  /**\n   * Clone and invert the {@link Mat4}\n   * @returns - inverted cloned {@link Mat4}\n   */\n  getInverse(): Mat4 {\n    return this.clone().invert()\n  }\n\n  /**\n   * Transpose this {@link Mat4}\n   * @returns - the transposed {@link Mat4}\n   */\n  transpose(): Mat4 {\n    let t\n    const te = this.elements\n\n    t = te[1]\n    te[1] = te[4]\n    te[4] = t\n\n    t = te[2]\n    te[2] = te[8]\n    te[8] = t\n\n    t = te[3]\n    te[3] = te[12]\n    te[12] = t\n\n    t = te[6]\n    te[6] = te[9]\n    te[9] = t\n\n    t = te[7]\n    te[7] = te[13]\n    te[13] = t\n\n    t = te[11]\n    te[11] = te[14]\n    te[14] = t\n\n    return this\n  }\n\n  /**\n   * Translate a {@link Mat4}\n   * @param vector - translation {@link Vec3 | vector} to use\n   * @returns - translated {@link Mat4}\n   */\n  translate(vector: Vec3 = new Vec3()): Mat4 {\n    const a = this.elements\n\n    a[12] = a[0] * vector.x + a[4] * vector.y + a[8] * vector.z + a[12]\n    a[13] = a[1] * vector.x + a[5] * vector.y + a[9] * vector.z + a[13]\n    a[14] = a[2] * vector.x + a[6] * vector.y + a[10] * vector.z + a[14]\n    a[15] = a[3] * vector.x + a[7] * vector.y + a[11] * vector.z + a[15]\n\n    return this\n  }\n\n  /**\n   * Get the translation {@link Vec3} component of a {@link Mat4}\n   * @param position - {@link Vec3} to set\n   * @returns - translation {@link Vec3} component of this {@link Mat4}\n   */\n  getTranslation(position = new Vec3()): Vec3 {\n    return position.set(this.elements[12], this.elements[13], this.elements[14])\n  }\n\n  /**\n   * Scale a {@link Mat4}\n   * @param vector - scale {@link Vec3 | vector} to use\n   * @returns - scaled {@link Mat4}\n   */\n  scale(vector: Vec3 = new Vec3()): Mat4 {\n    const a = this.elements\n\n    a[0] *= vector.x\n    a[1] *= vector.x\n    a[2] *= vector.x\n    a[3] *= vector.x\n    a[4] *= vector.y\n    a[5] *= vector.y\n    a[6] *= vector.y\n    a[7] *= vector.y\n    a[8] *= vector.z\n    a[9] *= vector.z\n    a[10] *= vector.z\n    a[11] *= vector.z\n\n    return this\n  }\n\n  /**\n   * Rotate a {@link Mat4} from a {@link Quat | quaternion}\n   * @param quaternion - {@link Quat | quaternion} to use\n   * @returns - rotated {@link Mat4}\n   */\n  rotateFromQuaternion(quaternion: Quat = new Quat()): Mat4 {\n    const te = this.elements\n\n    const x = quaternion.elements[0],\n      y = quaternion.elements[1],\n      z = quaternion.elements[2],\n      w = quaternion.elements[3]\n\n    const x2 = x + x,\n      y2 = y + y,\n      z2 = z + z\n    const xx = x * x2,\n      xy = x * y2,\n      xz = x * z2\n    const yy = y * y2,\n      yz = y * z2,\n      zz = z * z2\n    const wx = w * x2,\n      wy = w * y2,\n      wz = w * z2\n\n    te[0] = 1 - (yy + zz)\n    te[4] = xy - wz\n    te[8] = xz + wy\n\n    te[1] = xy + wz\n    te[5] = 1 - (xx + zz)\n    te[9] = yz - wx\n\n    te[2] = xz - wy\n    te[6] = yz + wx\n    te[10] = 1 - (xx + yy)\n\n    return this\n  }\n\n  /**\n   * Get the maximum scale of the {@link Mat4} on all axes\n   * @returns - maximum scale of the {@link Mat4}\n   */\n  getMaxScaleOnAxis(): number {\n    const te = this.elements\n\n    const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2]\n    const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6]\n    const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10]\n\n    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq))\n  }\n\n  /**\n   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale\n   * Equivalent for applying translation, rotation and scale matrices but much faster\n   * Source code from: http://glmatrix.net/docs/mat4.js.html\n   *\n   * @param translation - translation {@link Vec3 | vector} to use\n   * @param quaternion - {@link Quat | quaternion} to use\n   * @param scale - translation {@link Vec3 | vector} to use\n   * @returns - transformed {@link Mat4}\n   */\n  compose(translation: Vec3 = new Vec3(), quaternion: Quat = new Quat(), scale: Vec3 = new Vec3(1)): Mat4 {\n    const matrix = this.elements\n\n    // Quaternion math\n    const x = quaternion.elements[0],\n      y = quaternion.elements[1],\n      z = quaternion.elements[2],\n      w = quaternion.elements[3]\n\n    const x2 = x + x\n    const y2 = y + y\n    const z2 = z + z\n    const xx = x * x2\n    const xy = x * y2\n    const xz = x * z2\n    const yy = y * y2\n    const yz = y * z2\n    const zz = z * z2\n    const wx = w * x2\n    const wy = w * y2\n    const wz = w * z2\n    const sx = scale.x\n    const sy = scale.y\n    const sz = scale.z\n\n    matrix[0] = (1 - (yy + zz)) * sx\n    matrix[1] = (xy + wz) * sx\n    matrix[2] = (xz - wy) * sx\n    matrix[3] = 0\n    matrix[4] = (xy - wz) * sy\n    matrix[5] = (1 - (xx + zz)) * sy\n    matrix[6] = (yz + wx) * sy\n    matrix[7] = 0\n    matrix[8] = (xz + wy) * sz\n    matrix[9] = (yz - wx) * sz\n    matrix[10] = (1 - (xx + yy)) * sz\n    matrix[11] = 0\n    matrix[12] = translation.x\n    matrix[13] = translation.y\n    matrix[14] = translation.z\n    matrix[15] = 1\n\n    return this\n  }\n\n  /**\n   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale, rotating and scaling around the given {@link Vec3 | origin vector}\n   * Equivalent for applying translation, rotation and scale matrices but much faster\n   * Source code from: http://glmatrix.net/docs/mat4.js.html\n   *\n   * @param translation - translation {@link Vec3 | vector} to use\n   * @param quaternion - {@link Quat | quaternion} to use\n   * @param scale - translation {@link Vec3 | vector} to use\n   * @param origin - origin {@link Vec3 | vector} around which to scale and rotate\n   * @returns - transformed {@link Mat4}\n   */\n  composeFromOrigin(\n    translation: Vec3 = new Vec3(),\n    quaternion: Quat = new Quat(),\n    scale: Vec3 = new Vec3(1),\n    origin: Vec3 = new Vec3()\n  ): Mat4 {\n    const matrix = this.elements\n\n    // Quaternion math\n    const x = quaternion.elements[0],\n      y = quaternion.elements[1],\n      z = quaternion.elements[2],\n      w = quaternion.elements[3]\n\n    const x2 = x + x\n    const y2 = y + y\n    const z2 = z + z\n\n    const xx = x * x2\n    const xy = x * y2\n    const xz = x * z2\n    const yy = y * y2\n    const yz = y * z2\n    const zz = z * z2\n\n    const wx = w * x2\n    const wy = w * y2\n    const wz = w * z2\n\n    const sx = scale.x\n    const sy = scale.y\n    const sz = scale.z\n\n    const ox = origin.x\n    const oy = origin.y\n    const oz = origin.z\n\n    const out0 = (1 - (yy + zz)) * sx\n    const out1 = (xy + wz) * sx\n    const out2 = (xz - wy) * sx\n    const out4 = (xy - wz) * sy\n    const out5 = (1 - (xx + zz)) * sy\n    const out6 = (yz + wx) * sy\n    const out8 = (xz + wy) * sz\n    const out9 = (yz - wx) * sz\n    const out10 = (1 - (xx + yy)) * sz\n\n    matrix[0] = out0\n    matrix[1] = out1\n    matrix[2] = out2\n    matrix[3] = 0\n    matrix[4] = out4\n    matrix[5] = out5\n    matrix[6] = out6\n    matrix[7] = 0\n    matrix[8] = out8\n    matrix[9] = out9\n    matrix[10] = out10\n    matrix[11] = 0\n    matrix[12] = translation.x + ox - (out0 * ox + out4 * oy + out8 * oz)\n    matrix[13] = translation.y + oy - (out1 * ox + out5 * oy + out9 * oz)\n    matrix[14] = translation.z + oz - (out2 * ox + out6 * oy + out10 * oz)\n    matrix[15] = 1\n\n    return this\n  }\n\n  /**\n   * Set this {@link Mat4} as a rotation matrix based on an eye, target and up {@link Vec3 | vectors}\n   * @param eye - {@link Vec3 | position vector} of the object that should be rotated\n   * @param target - {@link Vec3 | target vector} to look at\n   * @param up - up {@link Vec3 | vector}\n   * @returns - rotated {@link Mat4}\n   */\n  lookAt(eye: Vec3 = new Vec3(), target: Vec3 = new Vec3(), up: Vec3 = new Vec3(0, 1, 0)): Mat4 {\n    const te = this.elements\n\n    zAxis.copy(eye).sub(target)\n\n    if (zAxis.lengthSq() === 0) {\n      // eye and target are in the same position\n      zAxis.z = 1\n    }\n\n    zAxis.normalize()\n    xAxis.crossVectors(up, zAxis)\n\n    if (xAxis.lengthSq() === 0) {\n      // up and z are parallel\n      if (Math.abs(up.z) === 1) {\n        zAxis.x += 0.0001\n      } else {\n        zAxis.z += 0.0001\n      }\n\n      zAxis.normalize()\n      xAxis.crossVectors(up, zAxis)\n    }\n\n    xAxis.normalize()\n    yAxis.crossVectors(zAxis, xAxis)\n\n    te[0] = xAxis.x\n    te[1] = xAxis.y\n    te[2] = xAxis.z\n    te[3] = 0\n    te[4] = yAxis.x\n    te[5] = yAxis.y\n    te[6] = yAxis.z\n    te[7] = 0\n    te[8] = zAxis.x\n    te[9] = zAxis.y\n    te[10] = zAxis.z\n    te[11] = 0\n    te[12] = eye.x\n    te[13] = eye.y\n    te[14] = eye.z\n    te[15] = 1\n\n    return this\n  }\n\n  /**\n   * Compute a view {@link Mat4} matrix.\n   *\n   * This is a view matrix which transforms all other objects\n   * to be in the space of the view defined by the parameters.\n   *\n   * Equivalent to `matrix.lookAt(eye, target, up).invert()` but faster.\n   *\n   * @param eye - the position of the object.\n   * @param target - the position meant to be aimed at.\n   * @param up - a vector pointing up.\n   * @returns - the view {@link Mat4} matrix.\n   */\n  makeView(eye: Vec3 = new Vec3(), target: Vec3 = new Vec3(), up: Vec3 = new Vec3(0, 1, 0)): Mat4 {\n    const te = this.elements\n\n    zAxis.copy(eye).sub(target).normalize()\n    xAxis.crossVectors(up, zAxis).normalize()\n    yAxis.crossVectors(zAxis, xAxis).normalize()\n\n    te[0] = xAxis.x\n    te[1] = yAxis.x\n    te[2] = zAxis.x\n    te[3] = 0\n    te[4] = xAxis.y\n    te[5] = yAxis.y\n    te[6] = zAxis.y\n    te[7] = 0\n    te[8] = xAxis.z\n    te[9] = yAxis.z\n    te[10] = zAxis.z\n    te[11] = 0\n\n    te[12] = -(xAxis.x * eye.x + xAxis.y * eye.y + xAxis.z * eye.z)\n    te[13] = -(yAxis.x * eye.x + yAxis.y * eye.y + yAxis.z * eye.z)\n    te[14] = -(zAxis.x * eye.x + zAxis.y * eye.y + zAxis.z * eye.z)\n    te[15] = 1\n\n    return this\n  }\n\n  /**\n   * Create an orthographic {@link Mat4} matrix based on the parameters. Transforms from\n   *  * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n   *  * and 0 to +1 in z.\n   *\n   * @param parameters - {@link OrthographicProjectionParams | parameters} used to create the camera orthographic matrix.\n   * @returns - the camera orthographic {@link Mat4} matrix.\n   */\n  makeOrthographic({\n    left = -5,\n    right = 5,\n    bottom = -5,\n    top = 5,\n    near = 0.1,\n    far = 50,\n  }: OrthographicProjectionParams): Mat4 {\n    const te = this.elements\n\n    te[0] = 2 / (right - left)\n    te[1] = 0\n    te[2] = 0\n    te[3] = 0\n\n    te[4] = 0\n    te[5] = 2 / (top - bottom)\n    te[6] = 0\n    te[7] = 0\n\n    te[8] = 0\n    te[9] = 0\n    te[10] = 1 / (near - far)\n    te[11] = 0\n\n    te[12] = (right + left) / (left - right)\n    te[13] = (top + bottom) / (bottom - top)\n    te[14] = near / (near - far)\n    te[15] = 1\n\n    return this\n  }\n\n  /**\n   * Create a perspective {@link Mat4} matrix based on the parameters.\n   *\n   * Note, The matrix generated sends the viewing frustum to the unit box.\n   * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n   * from -1 to 1 in the z dimension, as three.js and more generally WebGL handles it.\n   *\n   * @param parameters - {@link PerspectiveProjectionParams | parameters} used to create the camera perspective matrix.\n   * @returns - the camera perspective {@link Mat4} matrix.\n   */\n  makePerspective({ fov = 90, aspect = 1, near = 0.1, far = 150 }: PerspectiveProjectionParams): Mat4 {\n    const top = near * Math.tan((Math.PI / 180) * 0.5 * fov)\n    const height = 2 * top\n    const width = aspect * height\n    const left = -0.5 * width\n\n    const right = left + width\n    const bottom = top - height\n\n    const x = (2 * near) / (right - left)\n    const y = (2 * near) / (top - bottom)\n\n    const a = (right + left) / (right - left)\n    const b = (top + bottom) / (top - bottom)\n\n    // this should handle depth from 0 to 1\n    // and correct near / far clipping planes\n    // see https://github.com/mrdoob/three.js/blob/master/src/math/Matrix4.js#L777\n    const c = -far / (far - near)\n    const d = (-far * near) / (far - near)\n\n    // prettier-ignore\n    this.set(\n      x, 0, 0, 0,\n      0, y, 0, 0,\n      a, b, c, -1,\n      0, 0, d, 0\n    )\n\n    return this\n  }\n}\n","import { Vec3 } from '../../math/Vec3'\nimport { Quat } from '../../math/Quat'\nimport { Mat4 } from '../../math/Mat4'\nimport { KeyframesAnimation } from '../../extras/animations/KeyframesAnimation'\n\nlet objectIndex = 0\nconst tempMatrix = new Mat4()\n\n/** Defines all kind of possible {@link Object3D} matrix types */\nexport type Object3DMatricesType = 'model' | 'world'\n\n/**\n * Defines an {@link Object3D} matrix object\n */\nexport interface Object3DTransformMatrix {\n  /** The {@link Mat4 | matrix} used */\n  matrix: Mat4\n  /** Whether we should update the {@link Mat4 | matrix} */\n  shouldUpdate: boolean\n  /** Function to update our {@link Mat4 | matrix} */\n  onUpdate: () => void\n}\n\n/** Defines all possible {@link Object3DTransformMatrix | matrix object} used by our {@link Object3D} */\nexport type Object3DMatrices = Record<Object3DMatricesType, Object3DTransformMatrix>\n\n/**\n * Defines all necessary {@link Vec3 | vectors}/{@link Quat | quaternions} to compute a 3D {@link Mat4 | model matrix}\n */\nexport interface Object3DTransforms {\n  /** Transformation origin object */\n  origin: {\n    /** Transformation origin {@link Vec3 | vector} relative to the {@link Object3D} */\n    model: Vec3\n  }\n  /** Model {@link Quat | quaternion} defining its rotation in 3D space */\n  quaternion: Quat\n  /** Model rotation {@link Vec3 | vector} used to compute its {@link Quat | quaternion} */\n  rotation: Vec3\n  /** Position object */\n  position: {\n    /** Position {@link Vec3 | vector} relative to the 3D world */\n    world: Vec3\n  }\n  /** Model 3D scale {@link Vec3 | vector} */\n  scale: Vec3\n}\n\n/**\n * Used to create an object with transformation properties such as position, scale, rotation and transform origin {@link Vec3 | vectors} and a {@link Quat | quaternion} in order to compute the {@link Object3D#modelMatrix | model matrix} and {@link Object3D#worldMatrix | world matrix}.\n *\n * If an {@link Object3D} does not have any {@link Object3D#parent | parent}, then its {@link Object3D#modelMatrix | model matrix} and {@link Object3D#worldMatrix | world matrix} are the same.\n *\n * The transformations {@link Vec3 | vectors} are reactive to changes, which mean that updating one of their components will automatically update the {@link Object3D#modelMatrix | model matrix} and {@link Object3D#worldMatrix | world matrix}.\n */\nexport class Object3D {\n  /** {@link Object3DTransforms | Transformation object} of the {@link Object3D} */\n  transforms: Object3DTransforms\n  /** {@link Object3DMatrices | Matrices object} of the {@link Object3D} */\n  matrices: Object3DMatrices\n\n  /** Parent {@link Object3D} in the scene graph, used to compute the {@link worldMatrix | world matrix} */\n  private _parent: null | Object3D\n  /** Children {@link Object3D} in the scene graph, used to compute their own {@link worldMatrix | world matrix} */\n  children: Object3D[]\n\n  /** Index (order of creation) of this {@link Object3D}. Used in the {@link parent} / {@link children} relation. */\n  object3DIndex: number\n\n  /** Whether at least one of this {@link Object3D} matrix needs an update. */\n  matricesNeedUpdate: boolean\n\n  /**\n   * Object3D constructor\n   */\n  constructor() {\n    this._parent = null\n    this.children = []\n\n    this.matricesNeedUpdate = false\n\n    Object.defineProperty(this as Object3D, 'object3DIndex', { value: objectIndex++ })\n\n    this.setMatrices()\n    this.setTransforms()\n  }\n\n  /* PARENT */\n\n  /**\n   * Get the parent of this {@link Object3D} if any\n   */\n  get parent(): Object3D | null {\n    return this._parent\n  }\n\n  /**\n   * Set the parent of this {@link Object3D}\n   * @param value - new parent to set, could be an {@link Object3D} or null\n   */\n  set parent(value: Object3D | null) {\n    if (this._parent && value && this._parent.object3DIndex === value.object3DIndex) {\n      return\n    }\n\n    if (this._parent) {\n      // if we already have a parent, remove it first\n      this._parent.children = this._parent.children.filter((child) => child.object3DIndex !== this.object3DIndex)\n    }\n\n    if (value) {\n      this.shouldUpdateWorldMatrix()\n    }\n\n    this._parent = value\n    this._parent?.children.push(this)\n  }\n\n  /* TRANSFORMS */\n\n  /**\n   * Set our transforms properties and {@link Vec3#onChange | vectors onChange} callbacks\n   */\n  setTransforms() {\n    this.transforms = {\n      origin: {\n        model: new Vec3(),\n      },\n      quaternion: new Quat(),\n      rotation: new Vec3(),\n      position: {\n        world: new Vec3(),\n      },\n      scale: new Vec3(1),\n    }\n\n    this.rotation.onChange(() => this.applyRotation())\n    this.position.onChange(() => this.applyPosition())\n    this.scale.onChange(() => this.applyScale())\n    this.transformOrigin.onChange(() => this.applyTransformOrigin())\n  }\n\n  /**\n   * Get our rotation {@link Vec3 | vector}\n   */\n  get rotation(): Vec3 {\n    return this.transforms.rotation\n  }\n\n  /**\n   * Set our rotation {@link Vec3 | vector}\n   * @param value - new rotation {@link Vec3 | vector}\n   */\n  set rotation(value: Vec3) {\n    this.transforms.rotation = value\n    this.applyRotation()\n  }\n\n  /**\n   * Get our {@link Quat | quaternion}\n   */\n  get quaternion(): Quat {\n    return this.transforms.quaternion\n  }\n\n  /**\n   * Set our {@link Quat | quaternion}\n   * @param value - new {@link Quat | quaternion}\n   */\n  set quaternion(value: Quat) {\n    this.transforms.quaternion = value\n  }\n\n  /**\n   * Get our position {@link Vec3 | vector}\n   */\n  get position(): Vec3 {\n    return this.transforms.position.world\n  }\n\n  /**\n   * Set our position {@link Vec3 | vector}\n   * @param value - new position {@link Vec3 | vector}\n   */\n  set position(value: Vec3) {\n    this.transforms.position.world = value\n  }\n\n  /**\n   * Get our scale {@link Vec3 | vector}\n   */\n  get scale(): Vec3 {\n    return this.transforms.scale\n  }\n\n  /**\n   * Set our scale {@link Vec3 | vector}\n   * @param value - new scale {@link Vec3 | vector}\n   */\n  set scale(value: Vec3) {\n    // force scale to 1 on Z axis\n    this.transforms.scale = value\n    this.applyScale()\n  }\n\n  /**\n   * Get our transform origin {@link Vec3 | vector}\n   */\n  get transformOrigin(): Vec3 {\n    return this.transforms.origin.model\n  }\n\n  /**\n   * Set our transform origin {@link Vec3 | vector}\n   * @param value - new transform origin {@link Vec3 | vector}\n   */\n  set transformOrigin(value: Vec3) {\n    this.transforms.origin.model = value\n  }\n\n  /**\n   * Apply our rotation and tell our {@link modelMatrix | model matrix} to update\n   */\n  applyRotation() {\n    this.quaternion.setFromVec3(this.rotation)\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Tell our {@link modelMatrix | model matrix} to update\n   */\n  applyPosition() {\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Tell our {@link modelMatrix | model matrix} to update\n   */\n  applyScale() {\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Tell our {@link modelMatrix | model matrix} to update\n   */\n  applyTransformOrigin() {\n    this.shouldUpdateModelMatrix()\n  }\n\n  /* MATRICES */\n\n  /**\n   * Set our {@link modelMatrix | model matrix} and {@link worldMatrix | world matrix}\n   */\n  setMatrices() {\n    this.matrices = {\n      model: {\n        matrix: new Mat4(),\n        shouldUpdate: true,\n        onUpdate: () => this.updateModelMatrix(),\n      },\n      world: {\n        matrix: new Mat4(),\n        shouldUpdate: true,\n        onUpdate: () => this.updateWorldMatrix(),\n      },\n    }\n  }\n\n  /**\n   * Get our {@link Mat4 | model matrix}\n   */\n  get modelMatrix(): Mat4 {\n    return this.matrices.model.matrix\n  }\n\n  /**\n   * Set our {@link Mat4 | model matrix}\n   * @param value - new {@link Mat4 | model matrix}\n   */\n  set modelMatrix(value: Mat4) {\n    this.matrices.model.matrix = value\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Set our {@link modelMatrix | model matrix} shouldUpdate flag to true (tell it to update)\n   */\n  shouldUpdateModelMatrix() {\n    this.matrices.model.shouldUpdate = true\n    this.shouldUpdateWorldMatrix()\n  }\n\n  /**\n   * Get our {@link Mat4 | world matrix}\n   */\n  get worldMatrix(): Mat4 {\n    return this.matrices.world.matrix\n  }\n\n  /**\n   * Set our {@link Mat4 | world matrix}\n   * @param value - new {@link Mat4 | world matrix}\n   */\n  set worldMatrix(value: Mat4) {\n    this.matrices.world.matrix = value\n    this.shouldUpdateWorldMatrix()\n  }\n\n  /**\n   * Set our {@link worldMatrix | world matrix} shouldUpdate flag to true (tell it to update)\n   */\n  shouldUpdateWorldMatrix() {\n    this.matrices.world.shouldUpdate = true\n  }\n\n  /**\n   * Rotate this {@link Object3D} so it looks at the {@link Vec3 | target}\n   * @param target - {@link Vec3 | target} to look at\n   * @param position - {@link Vec3 | postion} from which to look at\n   */\n  lookAt(target: Vec3 = new Vec3(), position = this.position, up = new Vec3(0, 1, 0)) {\n    const rotationMatrix = tempMatrix.lookAt(target, position, up)\n    this.quaternion.setFromRotationMatrix(rotationMatrix)\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Update our {@link modelMatrix | model matrix}\n   */\n  updateModelMatrix() {\n    // compose our model transformation matrix from custom origin\n    this.modelMatrix = this.modelMatrix.composeFromOrigin(\n      this.position,\n      this.quaternion,\n      this.scale,\n      this.transformOrigin\n    )\n\n    // tell our world matrix to update\n    this.shouldUpdateWorldMatrix()\n  }\n\n  /**\n   * Update our {@link worldMatrix | model matrix}\n   */\n  updateWorldMatrix() {\n    if (!this.parent) {\n      this.worldMatrix.copy(this.modelMatrix)\n    } else {\n      this.worldMatrix.multiplyMatrices(this.parent.worldMatrix, this.modelMatrix)\n    }\n\n    // update the children world matrix as well\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].shouldUpdateWorldMatrix()\n    }\n  }\n\n  /**\n   * Check whether at least one of the matrix should be updated\n   */\n  shouldUpdateMatrices() {\n    this.matricesNeedUpdate = !!Object.values(this.matrices).find((matrix) => matrix.shouldUpdate)\n  }\n\n  /**\n   * Check at each render whether we should update our matrices, and update them if needed\n   */\n  updateMatrixStack() {\n    this.shouldUpdateMatrices()\n\n    if (this.matricesNeedUpdate) {\n      for (const matrixName in this.matrices) {\n        if (this.matrices[matrixName].shouldUpdate) {\n          this.matrices[matrixName].onUpdate()\n          this.matrices[matrixName].shouldUpdate = false\n        }\n      }\n    }\n\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      this.children[i].updateMatrixStack()\n    }\n  }\n\n  /**\n   * Destroy this {@link Object3D}. Removes its parent and set its children free.\n   */\n  destroy() {\n    for (let i = 0, l = this.children.length; i < l; i++) {\n      if (this.children[i]) this.children[i].parent = null\n    }\n\n    this.parent = null\n  }\n}\n","// texture bitwise flags\r\nimport { WebGPUTextureUsageConstants } from '../../utils/webgpu-constants'\r\nimport { TextureBindingType } from '../bindings/Binding'\r\n\r\n/**  Defines all kinds of allowed texture usages as camel case strings. */\r\nexport type TextureUsageKeys = 'copySrc' | 'copyDst' | 'renderAttachment' | 'storageBinding' | 'textureBinding'\r\n\r\n/**\r\n * Map {@link TextureUsageKeys | texture usage names} with actual {@link GPUDevice.createTexture().descriptor.usage | GPUTextureUsageFlags}.\r\n */\r\nconst textureUsages: Map<TextureUsageKeys, GPUTextureUsageFlags> = new Map([\r\n  ['copySrc', WebGPUTextureUsageConstants.COPY_SRC],\r\n  ['copyDst', WebGPUTextureUsageConstants.COPY_DST],\r\n  ['renderAttachment', WebGPUTextureUsageConstants.RENDER_ATTACHMENT],\r\n  ['storageBinding', WebGPUTextureUsageConstants.STORAGE_BINDING],\r\n  ['textureBinding', WebGPUTextureUsageConstants.TEXTURE_BINDING],\r\n])\r\n\r\n/**\r\n * Get the corresponding {@link GPUDevice.createTexture().descriptor.usage | GPUTextureUsageFlags} based on an array of {@link TextureUsageKeys | texture usage names}.\r\n * @param usages - array of {@link TextureUsageKeys | texture usage names}.\r\n * @returns - corresponding {@link GPUDevice.createTexture().descriptor.usage | GPUTextureUsageFlags}.\r\n */\r\nexport const getTextureUsages = (usages: TextureUsageKeys[] = []): GPUTextureUsageFlags => {\r\n  return usages.reduce((acc, v) => {\r\n    return acc | textureUsages.get(v)\r\n  }, 0)\r\n}\r\n\r\n/**\r\n * Get the corresponding {@link GPUDevice.createTexture().descriptor.usage | GPUTextureUsageFlags} based on an array of {@link TextureUsageKeys | texture usage names} if specified. If not, will try to fall back to a usage based on the {@link TextureBindingType | texture type}.\r\n * @param usages - array of {@link TextureUsageKeys | texture usage names}.\r\n * @param textureType - the {@link TextureBindingType | texture type}.\r\n * @returns - corresponding {@link GPUDevice.createTexture().descriptor.usage | GPUTextureUsageFlags}.\r\n */\r\nexport const getDefaultTextureUsage = (usages: TextureUsageKeys[] = [], textureType: TextureBindingType) => {\r\n  if (usages.length) {\r\n    return getTextureUsages(usages)\r\n  }\r\n\r\n  return textureType !== 'storage'\r\n    ? GPUTextureUsage.TEXTURE_BINDING |\r\n        GPUTextureUsage.COPY_SRC |\r\n        GPUTextureUsage.COPY_DST |\r\n        GPUTextureUsage.RENDER_ATTACHMENT\r\n    : GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST\r\n}\r\n\r\n/**\r\n * Get the number of mip levels create based on {@link types/Textures.TextureSize | size}\r\n * @param sizes - Array containing our texture width, height and depth\r\n * @returns - number of mip levels\r\n */\r\nexport const getNumMipLevels = (...sizes: number[]): number => {\r\n  const maxSize = Math.max(...sizes)\r\n  return (1 + Math.log2(maxSize)) | 0\r\n}\r\n","import { Vec3 } from '../../math/Vec3'\r\nimport { isRenderer, Renderer } from '../renderers/utils'\r\nimport { TextureBinding } from '../bindings/TextureBinding'\r\nimport { BufferBinding } from '../bindings/BufferBinding'\r\nimport { Object3D } from '../objects3D/Object3D'\r\nimport { Mat4 } from '../../math/Mat4'\r\nimport { generateUUID, throwWarning } from '../../utils/utils'\r\nimport { BindGroupBindingElement } from '../../types/BindGroups'\r\nimport { DOMTextureOptions, DOMTextureParams, DOMTextureParent, TextureSize, TextureSource } from '../../types/Textures'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { DOMProjectedMesh } from '../renderers/GPURenderer'\r\nimport { getNumMipLevels } from './utils'\r\n\r\n/** @const - default {@link DOMTexture} parameters */\r\nconst defaultDOMTextureParams: DOMTextureParams = {\r\n  name: 'texture',\r\n  generateMips: false,\r\n  flipY: false,\r\n  format: 'rgba8unorm',\r\n  premultipliedAlpha: false,\r\n  placeholderColor: [0, 0, 0, 255], // default to black\r\n  useExternalTextures: true,\r\n  fromTexture: null,\r\n  viewDimension: '2d',\r\n  visibility: ['fragment'],\r\n  cache: true,\r\n}\r\n\r\n/**\r\n * Used to create {@link GPUTexture} or {@link GPUExternalTexture}, specially made to handle different kinds of DOM elements {@link TextureSource | sources}, like {@link HTMLImageElement}, {@link HTMLVideoElement} or {@link HTMLCanvasElement}.\r\n *\r\n * Handles the various sources loading and uploading, GPU textures creation,{@link BufferBinding | texture model matrix binding} and {@link TextureBinding | GPU texture binding}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a DOM texture\r\n * const imageTexture = new DOMTexture(gpuCurtains, {\r\n *   label: 'My image texture',\r\n *   name: 'imageTexture',\r\n * })\r\n *\r\n * // load an image\r\n * await imageTexture.loadImage(document.querySelector('img'))\r\n * ```\r\n */\r\nexport class DOMTexture extends Object3D {\r\n  /** The type of the {@link DOMTexture} */\r\n  type: string\r\n  /** The universal unique id of this {@link DOMTexture} */\r\n  readonly uuid: string\r\n  /** {@link Renderer} used by this {@link DOMTexture} */\r\n  renderer: Renderer\r\n\r\n  /** The {@link GPUTexture} used if any */\r\n  texture: null | GPUTexture\r\n  /** The {@link GPUExternalTexture} used if any */\r\n  externalTexture: null | GPUExternalTexture\r\n\r\n  /** The {@link DOMTexture} {@link TextureSource | source} to use */\r\n  source: TextureSource\r\n  /** The {@link GPUTexture}, matching the {@link TextureSource | source} {@link core/DOM/DOMElement.RectSize | size} (with 1 for depth) */\r\n  size: TextureSize\r\n\r\n  /** Options used to create this {@link DOMTexture} */\r\n  options: DOMTextureOptions\r\n\r\n  /** A {@link BufferBinding | buffer binding} that will hold the texture model matrix */\r\n  textureMatrix: BufferBinding\r\n  /** The bindings used by this {@link DOMTexture}, i.e. its {@link textureMatrix} and its {@link TextureBinding | GPU texture binding} */\r\n  bindings: BindGroupBindingElement[]\r\n\r\n  /** {@link DOMTexture} parentMesh if any */\r\n  private _parentMesh: DOMTextureParent\r\n\r\n  /** Whether the source has been loaded */\r\n  private _sourceLoaded: boolean\r\n  /** Whether the source has been uploaded to the GPU, handled by the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#texturesQueue | GPUDeviceManager texturesQueue array} */\r\n  private _sourceUploaded: boolean\r\n  /** Whether the texture should be uploaded to the GPU */\r\n  shouldUpdate: boolean\r\n\r\n  /** {@link HTMLVideoElement.requestVideoFrameCallback | requestVideoFrameCallback} returned id if used */\r\n  videoFrameCallbackId: null | number\r\n\r\n  /** Private {@link Vec3 | vector} used for {@link#modelMatrix} calculations, based on {@link parentMesh} {@link core/DOM/DOMElement.RectSize | size} */\r\n  #parentRatio: Vec3 = new Vec3(1)\r\n  /** Private {@link Vec3 | vector} used for {@link modelMatrix} calculations, based on {@link size | source size} */\r\n  #sourceRatio: Vec3 = new Vec3(1)\r\n  /** Private {@link Vec3 | vector} used for {@link modelMatrix} calculations, based on #parentRatio and #sourceRatio */\r\n  #coverScale: Vec3 = new Vec3(1)\r\n  /** Private rotation {@link Mat4 | matrix} based on texture {@link quaternion} */\r\n  #rotationMatrix: Mat4 = new Mat4()\r\n\r\n  // callbacks / events\r\n  /** function assigned to the {@link onSourceLoaded} callback */\r\n  _onSourceLoadedCallback = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onSourceUploaded} callback */\r\n  _onSourceUploadedCallback = () => {\r\n    /* allow empty callback */\r\n  }\r\n\r\n  /**\r\n   * DOMTexture constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link DOMTexture}\r\n   * @param parameters - {@link DOMTextureParams | parameters} used to create this {@link DOMTexture}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters = defaultDOMTextureParams) {\r\n    super()\r\n\r\n    this.type = 'Texture'\r\n\r\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' ' + this.type : this.type)\r\n\r\n    this.renderer = renderer\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    const defaultOptions = {\r\n      ...defaultDOMTextureParams,\r\n      source: parameters.fromTexture ? parameters.fromTexture.options.source : null,\r\n      sourceType: parameters.fromTexture ? parameters.fromTexture.options.sourceType : null,\r\n    }\r\n\r\n    this.options = { ...defaultOptions, ...parameters }\r\n    // force merge of texture object\r\n    //this.options.texture = { ...defaultOptions.texture, ...parameters.texture }\r\n\r\n    this.options.label = this.options.label ?? this.options.name\r\n\r\n    this.texture = null\r\n    this.externalTexture = null\r\n    this.source = null\r\n\r\n    // sizes\r\n    this.size = {\r\n      width: 1,\r\n      height: 1,\r\n      depth: 1,\r\n    }\r\n\r\n    // we will always declare a texture matrix\r\n    this.textureMatrix = new BufferBinding({\r\n      label: this.options.label + ': model matrix',\r\n      name: this.options.name + 'Matrix',\r\n      useStruct: false,\r\n      struct: {\r\n        [this.options.name + 'Matrix']: {\r\n          type: 'mat4x4f',\r\n          value: this.modelMatrix,\r\n        },\r\n      },\r\n    })\r\n\r\n    this.renderer.deviceManager.bufferBindings.set(this.textureMatrix.cacheKey, this.textureMatrix)\r\n\r\n    this.setBindings()\r\n\r\n    this._parentMesh = null\r\n\r\n    this.sourceLoaded = false\r\n    this.sourceUploaded = false\r\n    this.shouldUpdate = false\r\n\r\n    this.renderer.addDOMTexture(this)\r\n    this.createTexture()\r\n  }\r\n\r\n  /**\r\n   * Set our {@link bindings}\r\n   */\r\n  setBindings() {\r\n    this.bindings = [\r\n      new TextureBinding({\r\n        label: this.options.label + ': texture',\r\n        name: this.options.name,\r\n        bindingType: this.options.sourceType === 'externalVideo' ? 'externalTexture' : 'texture',\r\n        visibility: this.options.visibility,\r\n        texture: this.options.sourceType === 'externalVideo' ? this.externalTexture : this.texture,\r\n        viewDimension: this.options.viewDimension,\r\n      }),\r\n      this.textureMatrix,\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Get our {@link TextureBinding | GPU texture binding}\r\n   * @readonly\r\n   */\r\n  get textureBinding(): TextureBinding {\r\n    return this.bindings[0] as TextureBinding\r\n  }\r\n\r\n  /**\r\n   * Get our texture {@link parentMesh}\r\n   */\r\n  get parentMesh(): DOMTextureParent {\r\n    return this._parentMesh\r\n  }\r\n\r\n  /**\r\n   * Set our texture {@link parentMesh}\r\n   * @param value - texture {@link parentMesh} to set (i.e. any kind of {@link core/renderers/GPURenderer.RenderedMesh | Mesh}\r\n   */\r\n  set parentMesh(value: DOMTextureParent) {\r\n    this._parentMesh = value\r\n    this.resize()\r\n  }\r\n\r\n  /**\r\n   * Get whether our {@link source} has been loaded\r\n   */\r\n  get sourceLoaded(): boolean {\r\n    return this._sourceLoaded\r\n  }\r\n\r\n  /**\r\n   * Set whether our {@link source} has been loaded\r\n   * @param value - boolean flag indicating if the {@link source} has been loaded\r\n   */\r\n  set sourceLoaded(value: boolean) {\r\n    if (value && !this.sourceLoaded) {\r\n      this._onSourceLoadedCallback && this._onSourceLoadedCallback()\r\n    }\r\n    this._sourceLoaded = value\r\n  }\r\n\r\n  /**\r\n   * Get whether our {@link source} has been uploaded\r\n   */\r\n  get sourceUploaded(): boolean {\r\n    return this._sourceUploaded\r\n  }\r\n\r\n  /**\r\n   * Set whether our {@link source} has been uploaded\r\n   * @param value - boolean flag indicating if the {@link source} has been uploaded\r\n   */\r\n  set sourceUploaded(value: boolean) {\r\n    if (value && !this.sourceUploaded) {\r\n      this._onSourceUploadedCallback && this._onSourceUploadedCallback()\r\n    }\r\n    this._sourceUploaded = value\r\n  }\r\n\r\n  /**\r\n   * Set our texture {@link transforms} object\r\n   */\r\n  setTransforms() {\r\n    super.setTransforms()\r\n\r\n    this.transforms.quaternion.setAxisOrder('ZXY')\r\n\r\n    // reset our model transform origin to reflect CSS transform origins\r\n    this.transforms.origin.model.set(0.5, 0.5, 0)\r\n  }\r\n\r\n  /* TEXTURE MATRIX */\r\n\r\n  /**\r\n   * Update the {@link modelMatrix}\r\n   */\r\n  updateModelMatrix() {\r\n    if (!this.parentMesh) return\r\n\r\n    const parentScale = (this.parentMesh as DOMProjectedMesh).scale\r\n      ? (this.parentMesh as DOMProjectedMesh).scale\r\n      : new Vec3(1, 1, 1)\r\n\r\n    const parentWidth = (this.parentMesh as DOMProjectedMesh).boundingRect\r\n      ? (this.parentMesh as DOMProjectedMesh).boundingRect.width * parentScale.x\r\n      : this.size.width\r\n    const parentHeight = (this.parentMesh as DOMProjectedMesh).boundingRect\r\n      ? (this.parentMesh as DOMProjectedMesh).boundingRect.height * parentScale.y\r\n      : this.size.height\r\n\r\n    const parentRatio = parentWidth / parentHeight\r\n    const sourceRatio = this.size.width / this.size.height\r\n\r\n    // handle the texture rotation\r\n    // huge props to [@grgrdvrt](https://github.com/grgrdvrt) for this solution!\r\n    if (parentWidth > parentHeight) {\r\n      this.#parentRatio.set(parentRatio, 1, 1)\r\n      this.#sourceRatio.set(1 / sourceRatio, 1, 1)\r\n    } else {\r\n      this.#parentRatio.set(1, 1 / parentRatio, 1)\r\n      this.#sourceRatio.set(1, sourceRatio, 1)\r\n    }\r\n\r\n    // cover ratio is a bit tricky!\r\n    const coverRatio =\r\n      parentRatio > sourceRatio !== parentWidth > parentHeight\r\n        ? 1\r\n        : parentWidth > parentHeight\r\n        ? this.#parentRatio.x * this.#sourceRatio.x\r\n        : this.#sourceRatio.y * this.#parentRatio.y\r\n\r\n    this.#coverScale.set(1 / (coverRatio * this.scale.x), 1 / (coverRatio * this.scale.y), 1)\r\n\r\n    this.#rotationMatrix.rotateFromQuaternion(this.quaternion)\r\n\r\n    // here we could create a matrix for each translations / scales and do:\r\n    // this.modelMatrix\r\n    //   .identity()\r\n    //   .premultiply(negativeOriginMatrix)\r\n    //   .premultiply(coverScaleMatrix)\r\n    //   .premultiply(parentRatioMatrix)\r\n    //   .premultiply(rotationMatrix)\r\n    //   .premultiply(textureRatioMatrix)\r\n    //   .premultiply(originMatrix)\r\n    //   .translate(this.position)\r\n\r\n    // but this is faster!\r\n    this.modelMatrix\r\n      .identity()\r\n      .premultiplyTranslate(this.transformOrigin.clone().multiplyScalar(-1))\r\n      .premultiplyScale(this.#coverScale)\r\n      .premultiplyScale(this.#parentRatio)\r\n      .premultiply(this.#rotationMatrix)\r\n      .premultiplyScale(this.#sourceRatio)\r\n      .premultiplyTranslate(this.transformOrigin)\r\n      .translate(this.position)\r\n  }\r\n\r\n  /**\r\n   * If our {@link modelMatrix} has been updated, tell the {@link textureMatrix | texture matrix binding} to update as well\r\n   */\r\n  updateMatrixStack() {\r\n    super.updateMatrixStack()\r\n\r\n    if (this.matricesNeedUpdate) {\r\n      this.textureMatrix.shouldUpdateBinding(this.options.name + 'Matrix')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link DOMTexture}\r\n   */\r\n  resize() {\r\n    // this should only happen with canvas textures\r\n    if (\r\n      this.source &&\r\n      this.source instanceof HTMLCanvasElement &&\r\n      (this.source.width !== this.size.width || this.source.height !== this.size.height)\r\n    ) {\r\n      // since the source size has changed, we have to recreate a new texture\r\n      this.setSourceSize()\r\n      this.createTexture()\r\n    }\r\n\r\n    // tell our model matrix to update\r\n    this.shouldUpdateModelMatrix()\r\n  }\r\n\r\n  /**\r\n   * Tell the {@link Renderer} to upload or texture\r\n   */\r\n  uploadTexture() {\r\n    this.renderer.uploadTexture(this)\r\n    this.shouldUpdate = false\r\n  }\r\n\r\n  /**\r\n   * Import a {@link GPUExternalTexture} from the {@link Renderer}, update the  {@link textureBinding} and its {@link core/bindGroups/TextureBindGroup.TextureBindGroup | bind group}\r\n   */\r\n  uploadVideoTexture() {\r\n    this.externalTexture = this.renderer.importExternalTexture(this.source as HTMLVideoElement)\r\n    this.textureBinding.resource = this.externalTexture\r\n    this.textureBinding.setBindingType('externalTexture')\r\n    this.shouldUpdate = false\r\n    this.sourceUploaded = true\r\n  }\r\n\r\n  /**\r\n   * Copy a {@link DOMTexture}\r\n   * @param texture - {@link DOMTexture} to copy\r\n   */\r\n  copy(texture: DOMTexture) {\r\n    if (this.options.sourceType === 'externalVideo' && texture.options.sourceType !== 'externalVideo') {\r\n      throwWarning(`${this.options.label}: cannot copy a GPUTexture to a GPUExternalTexture`)\r\n      return\r\n    } else if (this.options.sourceType !== 'externalVideo' && texture.options.sourceType === 'externalVideo') {\r\n      throwWarning(`${this.options.label}: cannot copy a GPUExternalTexture to a GPUTexture`)\r\n      return\r\n    }\r\n\r\n    this.options.fromTexture = texture\r\n\r\n    // now copy all desired texture options except source\r\n    // const { source, ...optionsToCopy } = texture.options\r\n    // this.options = { ...this.options, ...optionsToCopy }\r\n\r\n    this.options.sourceType = texture.options.sourceType\r\n\r\n    // TODO better way to do that?\r\n    this.options.generateMips = texture.options.generateMips\r\n    this.options.flipY = texture.options.flipY\r\n    this.options.format = texture.options.format\r\n    this.options.premultipliedAlpha = texture.options.premultipliedAlpha\r\n    this.options.placeholderColor = texture.options.placeholderColor\r\n    this.options.useExternalTextures = texture.options.useExternalTextures\r\n\r\n    this.sourceLoaded = texture.sourceLoaded\r\n    this.sourceUploaded = texture.sourceUploaded\r\n\r\n    // TODO external texture?\r\n    if (texture.texture) {\r\n      if (texture.sourceLoaded) {\r\n        this.size = texture.size\r\n        this.source = texture.source\r\n\r\n        this.resize()\r\n      }\r\n\r\n      if (texture.sourceUploaded) {\r\n        // texture to copy is ready, update our texture and binding\r\n        this.texture = texture.texture\r\n        this.textureBinding.resource = this.texture\r\n      } else {\r\n        this.createTexture()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the {@link texture | GPU texture}\r\n   */\r\n  createTexture() {\r\n    const options = {\r\n      label: this.options.label,\r\n      format: this.options.format,\r\n      size: [this.size.width, this.size.height, this.size.depth], // [1, 1] if no source\r\n      dimensions: this.options.viewDimension === '1d' ? '1d' : this.options.viewDimension === '3d' ? '3d' : '2d',\r\n      //sampleCount: this.source ? this.renderer.sampleCount : 1,\r\n      usage: !!this.source\r\n        ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT\r\n        : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\r\n    } as GPUTextureDescriptor\r\n\r\n    if (this.options.sourceType !== 'externalVideo') {\r\n      options.mipLevelCount = this.options.generateMips ? getNumMipLevels(this.size.width, this.size.height) : 1\r\n\r\n      this.texture?.destroy()\r\n\r\n      this.texture = this.renderer.createTexture(options)\r\n\r\n      // update texture binding\r\n      this.textureBinding.resource = this.texture\r\n    }\r\n\r\n    this.shouldUpdate = true\r\n  }\r\n\r\n  /* SOURCES */\r\n\r\n  /**\r\n   * Set the {@link size} based on the {@link source}\r\n   */\r\n  setSourceSize() {\r\n    this.size = {\r\n      width:\r\n        (this.source as HTMLImageElement).naturalWidth ||\r\n        (this.source as HTMLCanvasElement).width ||\r\n        (this.source as HTMLVideoElement).videoWidth,\r\n      height:\r\n        (this.source as HTMLImageElement).naturalHeight ||\r\n        (this.source as HTMLCanvasElement).height ||\r\n        (this.source as HTMLVideoElement).videoHeight,\r\n      depth: 1,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load an {@link HTMLImageElement} from a URL and create an {@link ImageBitmap} to use as a {@link source}\r\n   * @param url - URL of the image to load\r\n   * @returns - the newly created {@link ImageBitmap}\r\n   */\r\n  async loadImageBitmap(url: string): Promise<ImageBitmap> {\r\n    const res = await fetch(url)\r\n    const blob = await res.blob()\r\n    return await createImageBitmap(blob, { colorSpaceConversion: 'none' })\r\n  }\r\n\r\n  /**\r\n   * Load and create an {@link ImageBitmap} from a URL or {@link HTMLImageElement}, use it as a {@link DOMTexture.source | source} and create the {@link GPUTexture}\r\n   * @param source - the image URL or {@link HTMLImageElement} to load\r\n   * @returns - the newly created {@link ImageBitmap}\r\n   */\r\n  async loadImage(source: string | HTMLImageElement): Promise<void> {\r\n    const url = typeof source === 'string' ? source : source.getAttribute('src')\r\n\r\n    this.options.source = url\r\n    this.options.sourceType = 'image'\r\n\r\n    const cachedTexture = this.renderer.domTextures.find((t) => t.options.source === url)\r\n    if (cachedTexture && cachedTexture.texture && cachedTexture.sourceUploaded) {\r\n      this.copy(cachedTexture)\r\n      return\r\n    }\r\n\r\n    this.sourceLoaded = false\r\n    this.sourceUploaded = false\r\n\r\n    this.source = await this.loadImageBitmap(this.options.source)\r\n\r\n    this.setSourceSize()\r\n    this.resize()\r\n\r\n    this.sourceLoaded = true\r\n    this.createTexture()\r\n  }\r\n\r\n  // weirldy enough, we don't have to do anything in that callback\r\n  // because the <video> is not visible in the viewport, the video playback is throttled\r\n  // and the rendering is janky\r\n  // using requestVideoFrameCallback helps preventing this but is unsupported in Firefox at the moment\r\n  // WebCodecs may be the way to go when time comes!\r\n  // https://developer.chrome.com/blog/new-in-webgpu-113/#use-webcodecs-videoframe-source-in-importexternaltexture\r\n  /**\r\n   * Set our {@link shouldUpdate} flag to true at each new video frame\r\n   */\r\n  onVideoFrameCallback() {\r\n    if (this.videoFrameCallbackId) {\r\n      this.shouldUpdate = true\r\n      ;(this.source as HTMLVideoElement).requestVideoFrameCallback(this.onVideoFrameCallback.bind(this))\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback to run when a {@link HTMLVideoElement} has loaded (when it has enough data to play).\r\n   * Set the {@link HTMLVideoElement} as a {@link source} and create the {@link GPUTexture} or {@link GPUExternalTexture}\r\n   * @param video - the newly loaded {@link HTMLVideoElement}\r\n   */\r\n  onVideoLoaded(video: HTMLVideoElement) {\r\n    if (!this.sourceLoaded) {\r\n      this.source = video\r\n\r\n      this.setSourceSize()\r\n      this.resize()\r\n\r\n      if (this.options.useExternalTextures) {\r\n        this.options.sourceType = 'externalVideo'\r\n\r\n        // texture binding will be set when uploading external texture\r\n        // meanwhile, destroy previous texture\r\n        this.texture?.destroy()\r\n      } else {\r\n        this.options.sourceType = 'video'\r\n        this.createTexture()\r\n      }\r\n\r\n      if ('requestVideoFrameCallback' in HTMLVideoElement.prototype) {\r\n        this.videoFrameCallbackId = (this.source as HTMLVideoElement).requestVideoFrameCallback(\r\n          this.onVideoFrameCallback.bind(this)\r\n        )\r\n      }\r\n\r\n      this.sourceLoaded = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get whether the {@link source} is a video\r\n   * @readonly\r\n   */\r\n  get isVideoSource(): boolean {\r\n    return this.source && (this.options.sourceType === 'video' || this.options.sourceType === 'externalVideo')\r\n  }\r\n\r\n  /**\r\n   * Load a video from a URL or {@link HTMLVideoElement} and register {@link onVideoLoaded} callback\r\n   * @param source - the video URL or {@link HTMLVideoElement} to load\r\n   */\r\n  loadVideo(source: string | HTMLVideoElement) {\r\n    let video\r\n\r\n    if (typeof source === 'string') {\r\n      video = document.createElement('video')\r\n      video.src = source\r\n    } else {\r\n      video = source\r\n    }\r\n\r\n    video.preload = 'auto'\r\n    video.muted = true\r\n    video.loop = true\r\n    video.crossOrigin = 'anonymous'\r\n    video.setAttribute('playsinline', '')\r\n\r\n    this.options.source = video.src\r\n    this.sourceLoaded = false\r\n    this.sourceUploaded = false\r\n\r\n    // If the video is in the cache of the browser,\r\n    // the 'canplaythrough' event might have been triggered\r\n    // before we registered the event handler.\r\n    if (video.readyState >= video.HAVE_ENOUGH_DATA) {\r\n      this.onVideoLoaded(video)\r\n    } else {\r\n      video.addEventListener('canplaythrough', this.onVideoLoaded.bind(this, video), {\r\n        once: true,\r\n      })\r\n    }\r\n\r\n    // if duration is not available, should mean our video has not started loading\r\n    if (isNaN(video.duration)) {\r\n      video.load()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load a {@link HTMLCanvasElement}, use it as a {@link DOMTexture.source | source} and create the {@link GPUTexture}\r\n   * @param source - the {@link HTMLCanvasElement} to use\r\n   */\r\n  loadCanvas(source: HTMLCanvasElement) {\r\n    this.options.source = source\r\n    this.options.sourceType = 'canvas'\r\n    this.sourceLoaded = false\r\n    this.sourceUploaded = false\r\n\r\n    this.source = source\r\n\r\n    this.setSourceSize()\r\n    this.resize()\r\n\r\n    this.sourceLoaded = true\r\n    this.createTexture()\r\n  }\r\n\r\n  /* EVENTS */\r\n\r\n  /**\r\n   * Callback to run when the {@link source} has been loaded\r\n   * @param callback - callback to run when the {@link source} has been loaded\r\n   * @returns - our {@link DOMTexture}\r\n   */\r\n  onSourceLoaded(callback: () => void): DOMTexture {\r\n    if (callback) {\r\n      this._onSourceLoadedCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Callback to run when the {@link source} has been uploaded\r\n   * @param callback - callback to run when the {@link source} been uploaded\r\n   * @returns - our {@link DOMTexture}\r\n   */\r\n  onSourceUploaded(callback: () => void): DOMTexture {\r\n    if (callback) {\r\n      this._onSourceUploadedCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /* RENDER */\r\n\r\n  /**\r\n   * Render a {@link DOMTexture}:\r\n   * - Update its {@link modelMatrix} and {@link bindings} if needed\r\n   * - Upload the texture if it needs to be done\r\n   */\r\n  render() {\r\n    // update our model matrix if needed\r\n    this.updateMatrixStack()\r\n\r\n    // update uniforms values\r\n    this.textureMatrix.update()\r\n\r\n    // since external texture are destroyed as soon as JavaScript returns to the browser\r\n    // we need to update it at every tick, even if it hasn't changed\r\n    // to ensure we're not sending a stale / destroyed texture\r\n    // anyway, external texture are cached so it is fined to call importExternalTexture at each tick\r\n    if (this.options.sourceType === 'externalVideo') {\r\n      this.shouldUpdate = true\r\n    }\r\n\r\n    // if no videoFrameCallback check if the video is actually really playing\r\n    if (\r\n      this.isVideoSource &&\r\n      !this.videoFrameCallbackId &&\r\n      (this.source as HTMLVideoElement).readyState >= (this.source as HTMLVideoElement).HAVE_CURRENT_DATA &&\r\n      !(this.source as HTMLVideoElement).paused\r\n    ) {\r\n      this.shouldUpdate = true\r\n    }\r\n\r\n    if (this.shouldUpdate && this.options.sourceType && this.options.sourceType !== 'externalVideo') {\r\n      this.uploadTexture()\r\n    }\r\n  }\r\n\r\n  /* DESTROY */\r\n\r\n  /**\r\n   * Destroy the {@link DOMTexture}\r\n   */\r\n  destroy() {\r\n    if (this.videoFrameCallbackId) {\r\n      ;(this.source as HTMLVideoElement).cancelVideoFrameCallback(this.videoFrameCallbackId)\r\n    }\r\n\r\n    if (this.isVideoSource) {\r\n      ;(this.source as HTMLVideoElement).removeEventListener(\r\n        'canplaythrough',\r\n        this.onVideoLoaded.bind(this, this.source),\r\n        {\r\n          once: true,\r\n        } as AddEventListenerOptions & EventListenerOptions\r\n      )\r\n    }\r\n\r\n    this.renderer.removeDOMTexture(this)\r\n\r\n    this.texture?.destroy()\r\n    this.texture = null\r\n  }\r\n}\r\n","import { BindGroup } from './BindGroup'\r\nimport { isRenderer, Renderer } from '../renderers/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { DOMTexture } from '../textures/DOMTexture'\r\nimport { Sampler } from '../samplers/Sampler'\r\nimport { BindGroupParams } from '../../types/BindGroups'\r\nimport { MaterialTexture } from '../../types/Materials'\r\n\r\n/**\r\n * An object defining all possible {@link TextureBindGroup} class instancing parameters\r\n */\r\nexport interface TextureBindGroupParams extends BindGroupParams {\r\n  /** array of {@link MaterialTexture | textures} to add to a {@link TextureBindGroup} */\r\n  textures?: MaterialTexture[]\r\n  /** array of {@link Sampler} to add to a {@link TextureBindGroup} */\r\n  samplers?: Sampler[]\r\n}\r\n\r\n/**\r\n * Used to regroup all {@link types/BindGroups.BindGroupBindingElement | bindings} related to textures (texture, texture matrices buffers and samplers) into one single specific {@link BindGroup}.\r\n *\r\n * Also responsible for uploading video textures if needed.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a texture\r\n * const texture = new Texture(gpuCurtains, {\r\n *   label: 'Input texture',\r\n *   name: 'inputTexture',\r\n * })\r\n *\r\n * // create a texture bind group using that texture\r\n * const textureBindGroup = new TextureBindGroup(gpuCurtains, {\r\n *   label: 'My texture bind group',\r\n *   textures: [texture],\r\n *   uniforms: {\r\n *     params: {\r\n *       struct: {\r\n *         opacity: {\r\n *           type: 'f32',\r\n *           value: 1,\r\n *         },\r\n *         mousePosition: {\r\n *           type: 'vec2f',\r\n *           value: new Vec2(),\r\n *         },\r\n *       },\r\n *     },\r\n *   },\r\n * })\r\n *\r\n * // create the GPU buffer, bindGroupLayout and bindGroup\r\n * textureBindGroup.createBindGroup()\r\n * ```\r\n */\r\nexport class TextureBindGroup extends BindGroup {\r\n  /**\r\n   * TextureBindGroup constructor\r\n   * @param  renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object\r\n   * @param parameters - {@link TextureBindGroupParams | parameters} used to create our {@link TextureBindGroup}\r\n   */\r\n  constructor(\r\n    renderer: Renderer | GPUCurtains,\r\n    { label, index = 0, bindings = [], uniforms, storages, textures = [], samplers = [] }: TextureBindGroupParams = {}\r\n  ) {\r\n    const type = 'TextureBindGroup'\r\n\r\n    renderer = isRenderer(renderer, type)\r\n\r\n    super(renderer, { label, index, bindings, uniforms, storages })\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      // will be filled after\r\n      textures: [],\r\n      samplers: [],\r\n    }\r\n\r\n    // add initial textures if any\r\n    if (textures.length) {\r\n      for (const texture of textures) {\r\n        this.addTexture(texture)\r\n      }\r\n    }\r\n\r\n    // add initial samplers if any\r\n    if (samplers.length) {\r\n      for (const sampler of samplers) {\r\n        this.addSampler(sampler)\r\n      }\r\n    }\r\n\r\n    this.type = type\r\n  }\r\n\r\n  /**\r\n   * Adds a texture to the textures array and the struct\r\n   * @param texture - texture to add\r\n   */\r\n  addTexture(texture: MaterialTexture) {\r\n    this.textures.push(texture)\r\n    this.addBindings([...texture.bindings])\r\n  }\r\n\r\n  /**\r\n   * Get the current textures array\r\n   * @readonly\r\n   */\r\n  get textures(): MaterialTexture[] {\r\n    return this.options.textures\r\n  }\r\n\r\n  /**\r\n   * Adds a sampler to the samplers array and the struct\r\n   * @param sampler\r\n   */\r\n  addSampler(sampler: Sampler) {\r\n    this.samplers.push(sampler)\r\n    this.addBindings([sampler.binding])\r\n  }\r\n\r\n  /**\r\n   * Get the current samplers array\r\n   * @readonly\r\n   */\r\n  get samplers(): Sampler[] {\r\n    return this.options.samplers\r\n  }\r\n\r\n  /**\r\n   * Get whether the GPU bind group is ready to be created\r\n   * It can be created if it has {@link BindGroup#bindings} and has not been created yet and all GPU textures and samplers are created\r\n   * @readonly\r\n   */\r\n  get shouldCreateBindGroup(): boolean {\r\n    return (\r\n      !this.bindGroup &&\r\n      !!this.bindings.length &&\r\n      !this.textures.find((texture) => !(texture.texture || (texture as DOMTexture).externalTexture)) &&\r\n      !this.samplers.find((sampler) => !sampler.sampler)\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Update the {@link TextureBindGroup#textures | bind group textures}:\r\n   * - Check if they need to copy their source texture\r\n   * - Upload video texture if needed\r\n   */\r\n  updateTextures() {\r\n    for (const texture of this.textures) {\r\n      // copy textures that need it on first init, but only when original texture is ready\r\n      if (texture instanceof DOMTexture) {\r\n        if (texture.options.fromTexture && texture.options.fromTexture.sourceUploaded && !texture.sourceUploaded) {\r\n          texture.copy(texture.options.fromTexture)\r\n        }\r\n\r\n        if (texture.shouldUpdate && texture.options.sourceType && texture.options.sourceType === 'externalVideo') {\r\n          texture.uploadVideoTexture()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the {@link TextureBindGroup}, which means update its {@link TextureBindGroup#textures | textures}, then update its {@link TextureBindGroup#bufferBindings | buffer bindings} and finally {@link TextureBindGroup#resetBindGroup | reset it} if needed\r\n   */\r\n  update() {\r\n    this.updateTextures()\r\n    super.update()\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link TextureBindGroup}\r\n   */\r\n  destroy() {\r\n    super.destroy()\r\n    this.options.textures = []\r\n    this.options.samplers = []\r\n  }\r\n}\r\n","import { Binding, BindingParams, SamplerBindingType } from './Binding'\r\n\r\n/** Defines a {@link SamplerBinding} {@link SamplerBinding#resource | resource} */\r\nexport type SamplerBindingResource = GPUSampler | null\r\n\r\n/**\r\n * An object defining all possible {@link SamplerBinding} class instancing parameters\r\n */\r\nexport interface SamplerBindingParams extends BindingParams {\r\n  /** The binding type of the {@link SamplerBinding} */\r\n  bindingType?: SamplerBindingType\r\n  /** {@link SamplerBinding} {@link GPUBindGroup | GPU bind group} resource */\r\n  sampler: SamplerBindingResource\r\n  /** The bind group layout binding {@link GPUSamplerBindingLayout#type | type} of this {@link GPUSampler | GPU sampler} */\r\n  type: GPUSamplerBindingType\r\n}\r\n\r\n/**\r\n * Used to handle GPUSampler bindings.\r\n *\r\n * Provide both {@link SamplerBinding#resourceLayout | resourceLayout} and {@link SamplerBinding#resource | resource} to the {@link GPUBindGroupLayout} and {@link GPUBindGroup}.<br>\r\n * Also create the appropriate WGSL code snippet to add to the shaders.\r\n */\r\nexport class SamplerBinding extends Binding {\r\n  /** The binding type of the {@link SamplerBinding} */\r\n  bindingType: SamplerBindingType\r\n  /** Our {@link SamplerBinding} resource, i.e. a {@link GPUSampler} */\r\n  sampler: SamplerBindingResource\r\n  /** An array of strings to append to our shaders code declaring all the WGSL variables representing this {@link SamplerBinding} */\r\n  wgslGroupFragment: string[]\r\n  /** Options used to create this {@link SamplerBinding} */\r\n  options: SamplerBindingParams\r\n\r\n  /**\r\n   * SamplerBinding constructor\r\n   * @param parameters - {@link SamplerBindingParams | parameters} used to create our SamplerBindings\r\n   */\r\n  constructor({\r\n    label = 'Sampler',\r\n    name = 'sampler',\r\n    bindingType,\r\n    visibility,\r\n    sampler,\r\n    type = 'filtering',\r\n  }: SamplerBindingParams) {\r\n    bindingType = bindingType ?? 'sampler'\r\n\r\n    super({ label, name, bindingType, visibility })\r\n\r\n    this.cacheKey += `${type},`\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      sampler,\r\n      type,\r\n    }\r\n\r\n    this.resource = sampler // should be a sampler\r\n\r\n    this.setWGSLFragment()\r\n  }\r\n\r\n  /**\r\n   * Get {@link GPUDevice.createBindGroupLayout().sampler | GPUBindGroupLayout entry resource}.\r\n   * @readonly\r\n   */\r\n  get resourceLayout(): {\r\n    /** {@link GPUBindGroupLayout | bind group layout} resource */\r\n    sampler: GPUSamplerBindingLayout\r\n  } {\r\n    return {\r\n      sampler: {\r\n        type: this.options.type, // TODO set shouldResetBindGroupLayout to true if it changes afterwards\r\n      },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the resource cache key\r\n   * @readonly\r\n   */\r\n  get resourceLayoutCacheKey(): string {\r\n    return `sampler,${this.options.type},${this.visibility},`\r\n  }\r\n\r\n  /**\r\n   * Get the {@link GPUDevice.createBindGroup().entries.resource | GPUBindGroup entry resource}.\r\n   */\r\n  get resource(): SamplerBindingResource {\r\n    return this.sampler\r\n  }\r\n\r\n  /**\r\n   * Set the {@link GPUDevice.createBindGroup().entries.resource | GPUBindGroup entry resource}.\r\n   * @param value - new bind group resource\r\n   */\r\n  set resource(value: SamplerBindingResource) {\r\n    // resource changed, update bind group!\r\n    if (value && this.sampler) this.shouldResetBindGroup = true\r\n    this.sampler = value\r\n  }\r\n\r\n  /**\r\n   * Set the correct WGSL code snippet.\r\n   */\r\n  setWGSLFragment() {\r\n    this.wgslGroupFragment = [\r\n      `var ${this.name}: ${this.options.type === 'comparison' ? `${this.bindingType}_comparison` : this.bindingType};`,\r\n    ]\r\n  }\r\n}\r\n","import { Mat4 } from '../../math/Mat4'\nimport { Object3D, Object3DMatricesType, Object3DTransformMatrix } from '../objects3D/Object3D'\nimport { RectSize } from '../DOM/DOMElement'\nimport { Vec3 } from '../../math/Vec3'\nimport { generateUUID } from '../../utils/utils'\n\n/**\n * Defines Camera basic perspective options\n */\nexport interface CameraBasePerspectiveOptions {\n  /** {@link Camera} perspective field of view. Should be greater than 0 and lower than 180 */\n  fov?: number\n  /** {@link Camera} near plane, the closest point where a mesh vertex is drawn */\n  near?: number\n  /** {@link Camera} far plane, the farthest point where a mesh vertex is drawn */\n  far?: number\n}\n\n/**\n * Defines all Camera perspective options\n */\nexport interface CameraPerspectiveOptions extends CameraBasePerspectiveOptions {\n  /** {@link Camera} frustum width */\n  width?: number\n  /** {@link Camera} frustum height */\n  height?: number\n  /** {@link Camera} pixel ratio */\n  pixelRatio?: number\n}\n\n/**\n * An object defining all possible {@link Camera} class instancing parameters\n */\nexport interface CameraParams extends CameraPerspectiveOptions {\n  /** callback to execute when one of the {@link Camera#matrices | camera matrices} changed */\n  onMatricesChanged?: () => void\n}\n\n/** Defines all kind of possible {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D} matrix types */\nexport type CameraObject3DMatricesType = Object3DMatricesType | 'projection' | 'view' | 'viewProjection'\n/** Defines all possible {@link Object3DTransformMatrix | matrix object} used by our {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D} */\nexport type CameraObject3DMatrices = Record<CameraObject3DMatricesType, Object3DTransformMatrix>\n\n/**\n * Used to create a perspective {@link Camera} and its projection, model and view matrices.\n *\n * {@link curtains/renderers/GPUCurtainsRenderer.GPUCurtainsRenderer | GPUCurtainsRenderer} and {@link core/renderers/GPUCameraRenderer.GPUCameraRenderer | GPUCameraRenderer} automatically create their own {@link Camera} under the hood, so it is unlikely you'd have to create one by yourself.\n *\n * {@link Camera} default perspective settings are:\n * - {@link Camera#fov | field of view}: 50\n * - {@link Camera#near | near plane}: 0.01\n * - {@link Camera#far | far plane}: 150\n *\n * Also note that the {@link Camera} default {@link Camera#position | position} is set at `(0, 0, 10)` so the object created with a default size do not appear too big nor too small.\n */\nexport class Camera extends Object3D {\n  /** The universal unique id of the {@link Camera} */\n  uuid: string\n  /** {@link CameraObject3DMatrices | Matrices object} of the {@link Camera} */\n  matrices: CameraObject3DMatrices\n\n  /** @ignore */\n  #fov: number\n  /** @ignore */\n  #near: number\n  /** @ignore */\n  #far: number\n\n  /** {@link Vec3 | Up vector} used for {@link lookAt} calculations. */\n  up: Vec3\n\n  /** The {@link Camera} frustum width and height */\n  size: RectSize\n  /** @ignore */\n  #pixelRatio: number\n\n  /** Callback to execute when one of the camera {@link matrices} changed */\n  onMatricesChanged?: () => void\n\n  /** A number representing what CSS perspective value (in pixel) should be used to obtain the same perspective effect as this {@link Camera} */\n  CSSPerspective: number\n  /** An object containing the visible width / height at a given z-depth from our camera parameters */\n  visibleSize: RectSize\n\n  /**\n   * Camera constructor\n   * @param parameters - {@link CameraParams | parameters} used to create our {@link Camera}\n   */\n  constructor(\n    {\n      fov = 50,\n      near = 0.1,\n      far = 150,\n      width = 1,\n      height = 1,\n      pixelRatio = 1,\n      onMatricesChanged = () => {\n        /* allow empty callback */\n      },\n    } = {} as CameraParams\n  ) {\n    // Object3D\n    super()\n\n    this.uuid = generateUUID()\n\n    // camera can't be at position (0, 0, 0), it needs some recoil\n    // arbitrarily set to 10 so objects of default size (1, 1, 1) don't appear too big\n    this.position.set(0, 0, 10)\n    this.up = new Vec3(0, 1, 0)\n\n    // callback to run if any of the matrices changed\n    this.onMatricesChanged = onMatricesChanged\n\n    // create size object, will be set right after\n    this.size = {\n      width: 1,\n      height: 1,\n    }\n\n    this.setPerspective({ fov, near, far, width, height, pixelRatio })\n  }\n\n  /**\n   * Set our transform and projection matrices\n   */\n  setMatrices() {\n    super.setMatrices()\n\n    this.matrices = {\n      ...this.matrices,\n      view: {\n        matrix: new Mat4(),\n        shouldUpdate: true,\n        onUpdate: () => {\n          this.viewMatrix.copy(this.worldMatrix).invert()\n        },\n      },\n      projection: {\n        matrix: new Mat4(),\n        shouldUpdate: true,\n        onUpdate: () => this.updateProjectionMatrix(),\n      },\n      viewProjection: {\n        matrix: new Mat4(),\n        shouldUpdate: true,\n        onUpdate: () => this.viewProjectionMatrix.multiplyMatrices(this.projectionMatrix, this.viewMatrix),\n      },\n    }\n  }\n\n  /**\n   * Get our view matrix\n   * @readonly\n   */\n  get viewMatrix(): Mat4 {\n    return this.matrices.view.matrix\n  }\n\n  set viewMatrix(value: Mat4) {\n    this.matrices.view.matrix = value\n    this.shouldUpdateViewMatrices()\n  }\n\n  /**\n   * Get our projection matrix\n   * @readonly\n   */\n  get projectionMatrix(): Mat4 {\n    return this.matrices.projection.matrix\n  }\n\n  set projectionMatrix(value: Mat4) {\n    this.matrices.projection.matrix = value\n    this.shouldUpdateProjectionMatrices()\n  }\n\n  /**\n   * Get our view projection matrix\n   * @readonly\n   */\n  get viewProjectionMatrix(): Mat4 {\n    return this.matrices.viewProjection.matrix\n  }\n\n  /**\n   * Set our view dependent matrices shouldUpdate flag to true (tell it to update)\n   */\n  shouldUpdateViewMatrices() {\n    this.matrices.view.shouldUpdate = true\n    this.matrices.viewProjection.shouldUpdate = true\n  }\n\n  /**\n   * Set our projection dependent matrices shouldUpdate flag to true (tell it to update)\n   */\n  shouldUpdateProjectionMatrices() {\n    this.matrices.projection.shouldUpdate = true\n    this.matrices.viewProjection.shouldUpdate = true\n  }\n\n  /**\n   * Update our model matrix and tell our view matrix to update as well\n   */\n  updateModelMatrix() {\n    super.updateModelMatrix()\n    this.setVisibleSize()\n    this.shouldUpdateViewMatrices()\n  }\n\n  /**\n   * Update our world matrix and tell our view matrix to update as well\n   */\n  updateWorldMatrix() {\n    super.updateWorldMatrix()\n    this.shouldUpdateViewMatrices()\n  }\n\n  /**\n   * Callback to run when the camera {@link modelMatrix | model matrix} has been updated\n   */\n  updateMatrixStack() {\n    super.updateMatrixStack()\n\n    if (this.matricesNeedUpdate) {\n      this.onMatricesChanged()\n    }\n  }\n\n  /**\n   * Get the {@link Camera} {@link Camera.fov | field of view}\n   */\n  get fov(): number {\n    return this.#fov\n  }\n\n  /**\n   * Set the {@link Camera} {@link Camera.fov | field of view}. Update the {@link projectionMatrix} only if the field of view actually changed\n   * @param fov - new field of view\n   */\n  set fov(fov: number) {\n    // clamp between 1 and 179\n    fov = Math.max(1, Math.min(fov ?? this.fov, 179))\n\n    if (fov !== this.fov) {\n      this.#fov = fov\n      this.shouldUpdateProjectionMatrices()\n    }\n\n    this.setVisibleSize()\n    this.setCSSPerspective()\n  }\n\n  /**\n   * Get the {@link Camera} {@link Camera.near | near} plane value.\n   */\n  get near(): number {\n    return this.#near\n  }\n\n  /**\n   * Set the {@link Camera} {@link Camera.near | near} plane value. Update the {@link projectionMatrix} only if the near plane actually changed\n   * @param near - new near plane value\n   */\n  set near(near: number) {\n    near = Math.max(near ?? this.near, 1e-4)\n\n    if (near !== this.near) {\n      this.#near = near\n      this.shouldUpdateProjectionMatrices()\n    }\n  }\n\n  /**\n   * Get the {@link Camera} {@link Camera.far | far} plane value.\n   */\n  get far(): number {\n    return this.#far\n  }\n\n  /**\n   * Set the {@link Camera} {@link Camera.far | far} plane value. Update {@link projectionMatrix} only if the far plane actually changed\n   * @param far - new far plane value\n   */\n  set far(far: number) {\n    far = Math.max(far ?? this.far, this.near + 1)\n\n    if (far !== this.far) {\n      this.#far = far\n      this.shouldUpdateProjectionMatrices()\n    }\n  }\n\n  /**\n   * Get the {@link Camera} {@link Camera.pixelRatio | pixelRatio} value.\n   */\n  get pixelRatio() {\n    return this.#pixelRatio\n  }\n\n  /**\n   * Set the {@link Camera} {@link Camera.pixelRatio | pixelRatio} value. Update the {@link CSSPerspective} only if the pixel ratio actually changed\n   * @param pixelRatio - new pixel ratio value\n   */\n  set pixelRatio(pixelRatio: number) {\n    this.#pixelRatio = pixelRatio ?? this.pixelRatio\n    this.setCSSPerspective()\n  }\n\n  /**\n   * Set the {@link Camera} {@link RectSize.width | width} and {@link RectSize.height | height}. Update the {@link projectionMatrix} only if the width or height actually changed\n   * @param size - width and height values to use\n   */\n  setSize({ width, height }: RectSize) {\n    if (width !== this.size.width || height !== this.size.height) {\n      this.shouldUpdateProjectionMatrices()\n    }\n\n    this.size.width = width\n    this.size.height = height\n\n    this.setVisibleSize()\n    this.setCSSPerspective()\n  }\n\n  /**\n   * Sets the {@link Camera} perspective. Update the {@link projectionMatrix} if needed.\n   * @param parameters - {@link CameraPerspectiveOptions | parameters} to use for the perspective\n   */\n  setPerspective({\n    fov = this.fov,\n    near = this.near,\n    far = this.far,\n    width = this.size.width,\n    height = this.size.height,\n    pixelRatio = this.pixelRatio,\n  }: CameraPerspectiveOptions = {}) {\n    this.setSize({ width, height })\n    this.pixelRatio = pixelRatio\n    this.fov = fov\n    this.near = near\n    this.far = far\n  }\n\n  /**\n   * Sets a {@link CSSPerspective} property based on {@link size}, {@link pixelRatio} and {@link fov}.<br>\n   * Used to translate planes along the Z axis using pixel units as CSS would do.<br>\n   * {@link https://stackoverflow.com/questions/22421439/convert-field-of-view-value-to-css3d-perspective-value | See reference}\n   */\n  setCSSPerspective() {\n    this.CSSPerspective =\n      Math.pow(\n        Math.pow(this.size.width / (2 * this.pixelRatio), 2) + Math.pow(this.size.height / (2 * this.pixelRatio), 2),\n        0.5\n      ) / Math.tan((this.fov * 0.5 * Math.PI) / 180)\n  }\n\n  /**\n   * Get visible width / height at a given z-depth from our {@link Camera} parameters.<br>\n   * {@link https://discourse.threejs.org/t/functions-to-calculate-the-visible-width-height-at-a-given-z-depth-from-a-perspective-camera/269 | See reference}\n   * @param depth - depth to use for calculations\n   * @returns - visible width and height at given depth\n   */\n  getVisibleSizeAtDepth(depth = 0): RectSize {\n    // compensate for cameras not positioned at z=0\n    const cameraOffset = this.position.z\n    if (depth < cameraOffset) {\n      depth -= cameraOffset\n    } else {\n      depth += cameraOffset\n    }\n\n    // vertical fov in radians\n    const vFOV = (this.fov * Math.PI) / 180\n\n    // Math.abs to ensure the result is always positive\n    const height = 2 * Math.tan(vFOV / 2) * Math.abs(depth)\n\n    return {\n      width: (height * this.size.width) / this.size.height,\n      height,\n    }\n  }\n\n  /**\n   * Sets visible width / height at a depth of 0.\n   */\n  setVisibleSize() {\n    this.visibleSize = this.getVisibleSizeAtDepth()\n  }\n\n  /**\n   * Rotate this {@link Camera} so it looks at the {@link Vec3 | target}\n   * @param target - {@link Vec3 | target} to look at\n   * @param position - {@link Vec3 | postion} from which to look at\n   */\n  lookAt(target: Vec3 = new Vec3(), position = this.position) {\n    // since we know it's a camera, inverse position and target\n    super.lookAt(position, target, this.up)\n  }\n\n  /**\n   * Updates the {@link Camera} {@link projectionMatrix}\n   */\n  updateProjectionMatrix() {\n    this.projectionMatrix.makePerspective({\n      fov: this.fov,\n      aspect: this.size.width / this.size.height,\n      near: this.near,\n      far: this.far,\n    })\n  }\n\n  /**\n   * Get the current {@link Camera} frustum planes in the [left, right, top, bottom, near, far] order, based on its {@link projectionMatrix} and {@link viewMatrix}.\n   * @returns - Frustum planes as an array of 6 faces in the [left, right, top, bottom, near, far] order, made of {@link Float32Array} of length 4.\n   * @readonly\n   */\n  get frustumPlanes(): Array<Float32Array> {\n    const tempCamMat4 = new Mat4()\n    const tempCamVec3 = new Vec3()\n\n    tempCamMat4.copy(this.projectionMatrix).multiply(this.viewMatrix)\n    const { elements } = tempCamMat4\n\n    const frustumPlanes = [\n      new Float32Array(4),\n      new Float32Array(4),\n      new Float32Array(4),\n      new Float32Array(4),\n      new Float32Array(4),\n      new Float32Array(4),\n    ]\n\n    // Left clipping plane\n    tempCamVec3.set(elements[3] + elements[0], elements[7] + elements[4], elements[11] + elements[8])\n    let l = tempCamVec3.length()\n    frustumPlanes[0][0] = tempCamVec3.x / l\n    frustumPlanes[0][1] = tempCamVec3.y / l\n    frustumPlanes[0][2] = tempCamVec3.z / l\n    frustumPlanes[0][3] = (elements[15] + elements[12]) / l\n\n    // Right clipping plane\n    tempCamVec3.set(elements[3] - elements[0], elements[7] - elements[4], elements[11] - elements[8])\n    l = tempCamVec3.length()\n    frustumPlanes[1][0] = tempCamVec3.x / l\n    frustumPlanes[1][1] = tempCamVec3.y / l\n    frustumPlanes[1][2] = tempCamVec3.z / l\n    frustumPlanes[1][3] = (elements[15] - elements[12]) / l\n\n    // Top clipping plane\n    tempCamVec3.set(elements[3] - elements[1], elements[7] - elements[5], elements[11] - elements[9])\n    l = tempCamVec3.length()\n    frustumPlanes[2][0] = tempCamVec3.x / l\n    frustumPlanes[2][1] = tempCamVec3.y / l\n    frustumPlanes[2][2] = tempCamVec3.z / l\n    frustumPlanes[2][3] = (elements[15] - elements[13]) / l\n\n    // Bottom clipping plane\n    tempCamVec3.set(elements[3] + elements[1], elements[7] + elements[5], elements[11] + elements[9])\n    l = tempCamVec3.length()\n    frustumPlanes[3][0] = tempCamVec3.x / l\n    frustumPlanes[3][1] = tempCamVec3.y / l\n    frustumPlanes[3][2] = tempCamVec3.z / l\n    frustumPlanes[3][3] = (elements[15] + elements[13]) / l\n\n    // Near clipping plane\n    tempCamVec3.set(elements[2], elements[6], elements[10])\n    l = tempCamVec3.length()\n    frustumPlanes[4][0] = tempCamVec3.x / l\n    frustumPlanes[4][1] = tempCamVec3.y / l\n    frustumPlanes[4][2] = tempCamVec3.z / l\n    frustumPlanes[4][3] = elements[14] / l\n\n    // Far clipping plane\n    tempCamVec3.set(elements[3] - elements[2], elements[7] - elements[6], elements[11] - elements[10])\n    l = tempCamVec3.length()\n    frustumPlanes[5][0] = tempCamVec3.x / l\n    frustumPlanes[5][1] = tempCamVec3.y / l\n    frustumPlanes[5][2] = tempCamVec3.z / l\n    frustumPlanes[5][3] = (elements[15] - elements[14]) / l\n\n    return frustumPlanes\n  }\n}\n","import { isRenderer, Renderer } from '../renderers/utils'\nimport { SamplerBinding } from '../bindings/SamplerBinding'\nimport { generateUUID, throwWarning } from '../../utils/utils'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/** Options used to create a {@link Sampler} */\nexport interface SamplerOptions extends Partial<GPUSamplerDescriptor>, GPUSamplerBindingLayout {}\n\n/**\n * Parameters used to create a {@link Sampler}\n */\nexport interface SamplerParams extends SamplerOptions {\n  /** Name of the {@link Sampler} to use in the {@link SamplerBinding | binding} */\n  name: string\n}\n\n/**\n * Used to create a {@link GPUSampler} and its associated {@link SamplerBinding}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * const mirrorSampler = new Sampler(gpuCurtains, {\n *   label: 'Mirror sampler',\n *   name: 'mirrorSampler',\n *   addressModeU: 'mirror-repeat',\n *   addressModeV: 'mirror-repeat',\n * })\n * ```\n */\nexport class Sampler {\n  /** The type of the {@link Sampler} */\n  type: string\n  /** The universal unique id of this {@link Sampler} */\n  readonly uuid: string\n  /** {@link Renderer} used by this {@link Sampler} */\n  renderer: Renderer\n  /** The label of the {@link Sampler}, used to create the {@link GPUSampler} for debugging purpose */\n  label: string\n  /** Name of the {@link Sampler} to use in the {@link SamplerBinding | binding} */\n  name: string\n  /** Options used to create this {@link Sampler} */\n  options: SamplerOptions\n\n  /** {@link GPUSampler} */\n  sampler: GPUSampler\n  /** {@link SamplerBinding | binding} to pass to a {@link core/bindGroups/TextureBindGroup.TextureBindGroup | bind group} */\n  binding: SamplerBinding\n\n  /**\n   * Sampler constructor\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Sampler}.\n   * @param parameters - {@link SamplerParams | parameters} used to create this {@link Sampler}.\n   */\n  constructor(\n    renderer: GPUCurtains | Renderer,\n    {\n      label = 'Sampler',\n      name,\n      addressModeU = 'repeat',\n      addressModeV = 'repeat',\n      magFilter = 'linear',\n      minFilter = 'linear',\n      mipmapFilter = 'linear',\n      maxAnisotropy = 1,\n      type = 'filtering',\n      compare = null,\n    } = {} as SamplerParams\n  ) {\n    this.type = 'Sampler'\n    this.uuid = generateUUID()\n\n    renderer = isRenderer(renderer, label ? label + ' ' + this.type : this.type)\n\n    this.renderer = renderer\n\n    this.label = label\n\n    if (!name && !this.renderer.production) {\n      name = 'sampler' + this.renderer.samplers.length\n      throwWarning(\n        `Sampler: you are trying to create a sampler without the mandatory name parameter. A default name will be used instead: ${name}`\n      )\n    }\n\n    this.name = name\n\n    this.options = {\n      addressModeU,\n      addressModeV,\n      magFilter,\n      minFilter,\n      mipmapFilter,\n      maxAnisotropy,\n      type,\n      ...(compare !== null && { compare }),\n    } as SamplerOptions\n\n    this.createSampler()\n    this.createBinding()\n  }\n\n  /**\n   * Set the {@link GPUSampler}.\n   */\n  createSampler() {\n    this.sampler = this.renderer.createSampler(this)\n  }\n\n  /**\n   * Set the {@link SamplerBinding | binding}.\n   */\n  createBinding() {\n    this.binding = new SamplerBinding({\n      label: this.label,\n      name: this.name,\n      bindingType: 'sampler',\n      sampler: this.sampler,\n      type: this.options.type,\n    })\n  }\n}\n","import { generateMips, isRenderer, Renderer } from '../renderers/utils'\r\nimport { TextureBinding } from '../bindings/TextureBinding'\r\nimport { BindGroupBindingElement } from '../../types/BindGroups'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { BindingMemoryAccessType, BindingParams, TextureBindingType } from '../bindings/Binding'\r\nimport { generateUUID } from '../../utils/utils'\r\nimport { DOMTexture } from './DOMTexture'\r\nimport { ExternalTextureParamsBase, TextureSize } from '../../types/Textures'\r\nimport { getDefaultTextureUsage, getNumMipLevels, TextureUsageKeys } from './utils'\r\n\r\n/**\r\n * Base parameters used to create a {@link Texture}\r\n */\r\nexport interface TextureBaseParams extends ExternalTextureParamsBase {\r\n  /** The label of the {@link Texture}, used to create various GPU objects for debugging purpose */\r\n  label?: string\r\n  /** Name of the {@link Texture} to use in the {@link TextureBinding | texture binding} */\r\n  name?: string\r\n\r\n  /** Optional fixed size of the {@link Texture#texture | texture}. If set, the {@link Texture} will never be resized and always keep that size. */\r\n  fixedSize?: TextureSize\r\n\r\n  /** Force the texture size to be set to the given ratio of the {@link core/renderers/GPURenderer.GPURenderer#canvas | renderer canvas} size or {@link fixedSize}. Used mainly to shrink render target texture definition. */\r\n  qualityRatio?: number\r\n\r\n  /** Whether to use this {@link Texture} as a regular, storage or depth texture */\r\n  type?: TextureBindingType\r\n  /** Optional format of the {@link Texture#texture | texture}, mainly used for storage textures */\r\n  format?: GPUTextureFormat\r\n  /** Optional texture binding memory access type, mainly used for storage textures */\r\n  access?: BindingMemoryAccessType\r\n  /** Optional {@link Texture#texture | texture} view dimension to use */\r\n  viewDimension?: GPUTextureViewDimension\r\n  /** Sample count of the {@link Texture#texture | texture}, used for multisampling */\r\n  sampleCount?: GPUSize32\r\n  /** The {@link Texture} shaders visibility sent to the {@link Texture#textureBinding | texture binding} */\r\n  visibility?: BindingParams['visibility']\r\n  /** Allowed usages for the {@link Texture#texture | GPU texture} as an array of {@link TextureUsageKeys | texture usages names} */\r\n  usage?: TextureUsageKeys[]\r\n\r\n  /** Whether any {@link core/materials/Material.Material | Material} using this {@link Texture} should automatically destroy it upon destruction. Default to `true`. */\r\n  autoDestroy?: boolean\r\n}\r\n\r\n/**\r\n * Parameters used to create a {@link Texture}\r\n */\r\nexport interface TextureParams extends TextureBaseParams {\r\n  /** Optional texture to use as a copy source input. Could be a {@link Texture} or {@link DOMTexture} */\r\n  fromTexture?: Texture | DOMTexture | null\r\n}\r\n\r\n/** @const - default {@link Texture} parameters */\r\nconst defaultTextureParams: TextureParams = {\r\n  label: 'Texture',\r\n  name: 'renderTexture', // default to 'renderTexture' for render target usage\r\n  type: 'texture',\r\n  access: 'write',\r\n  fromTexture: null,\r\n  viewDimension: '2d',\r\n  sampleCount: 1,\r\n  qualityRatio: 1,\r\n  // copy external texture options\r\n  generateMips: false,\r\n  flipY: false,\r\n  premultipliedAlpha: false,\r\n  autoDestroy: true,\r\n}\r\n\r\n/**\r\n * This is the main class used to create and handle {@link GPUTexture | textures} that can be used with {@link core/computePasses/ComputePass.ComputePass | ComputePass} and/or {@link core/meshes/Mesh.Mesh | Mesh}. Also used as copy source/destination for {@link core/renderPasses/RenderPass.RenderPass | RenderPass} and {@link core/renderPasses/RenderTarget.RenderTarget | RenderTarget}.\r\n *\r\n * Basically useful for any kind of textures: for external sources (however in some cases, {@link core/textures/DOMTexture.DOMTexture | DOMTexture} might be preferred), depth, storages or to copy anything outputted to the screen at one point or another.\r\n *\r\n * Will create a {@link GPUTexture} and its associated {@link TextureBinding}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a texture\r\n * const texture = new Texture(gpuCurtains, {\r\n *   label: 'My texture',\r\n *   name: 'myTexture',\r\n * })\r\n * ```\r\n */\r\nexport class Texture {\r\n  /** {@link Renderer | renderer} used by this {@link Texture} */\r\n  renderer: Renderer\r\n  /** The type of the {@link Texture} */\r\n  type: string\r\n  /** The universal unique id of this {@link Texture} */\r\n  readonly uuid: string\r\n\r\n  /** The {@link GPUTexture} used */\r\n  texture: GPUTexture\r\n\r\n  /** Size of the {@link Texture#texture | texture} source, usually our {@link Renderer#canvas | renderer canvas} size */\r\n  size: TextureSize\r\n\r\n  /** Options used to create this {@link Texture} */\r\n  options: TextureParams\r\n\r\n  /** Array of {@link core/bindings/Binding.Binding | bindings} that will actually only hold one {@link TextureBinding | texture binding} */\r\n  bindings: BindGroupBindingElement[]\r\n\r\n  /** Whether this texture should be automatically resized when the {@link Renderer renderer} size changes. Default to true. */\r\n  #autoResize = true\r\n\r\n  /**\r\n   * Texture constructor\r\n   * @param renderer - {@link Renderer | renderer} object or {@link GPUCurtains} class object used to create this {@link Texture}\r\n   * @param parameters - {@link TextureParams | parameters} used to create this {@link Texture}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters = defaultTextureParams) {\r\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' Texture' : 'Texture')\r\n\r\n    this.type = 'Texture'\r\n\r\n    this.renderer = renderer\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    this.options = { ...defaultTextureParams, ...parameters }\r\n\r\n    if (\r\n      this.options.format === 'rgba32float' &&\r\n      !(this.renderer.deviceManager.adapter as GPUAdapter).features.has('float32-filterable')\r\n    ) {\r\n      this.options.format = 'rgba16float'\r\n    }\r\n\r\n    if (parameters.fromTexture) {\r\n      this.options.format = parameters.fromTexture.texture.format\r\n      this.options.sampleCount = parameters.fromTexture.texture.sampleCount\r\n      this.options.viewDimension = parameters.fromTexture.options.viewDimension\r\n    }\r\n\r\n    if (!this.options.format) {\r\n      this.options.format = this.renderer.options.context.format\r\n    }\r\n\r\n    // sizes\r\n    this.size = this.options.fixedSize\r\n      ? {\r\n          width: this.options.fixedSize.width * this.options.qualityRatio,\r\n          height: this.options.fixedSize.height * this.options.qualityRatio,\r\n          depth: this.options.fixedSize.depth ?? this.options.viewDimension.indexOf('cube') !== -1 ? 6 : 1,\r\n        }\r\n      : {\r\n          width: Math.floor(this.renderer.canvas.width * this.options.qualityRatio),\r\n          height: Math.floor(this.renderer.canvas.height * this.options.qualityRatio),\r\n          depth: this.options.viewDimension.indexOf('cube') !== -1 ? 6 : 1,\r\n        }\r\n\r\n    if (this.options.fixedSize) {\r\n      this.#autoResize = false\r\n    }\r\n\r\n    // struct\r\n    this.setBindings()\r\n\r\n    // texture\r\n    this.renderer.addTexture(this)\r\n    this.createTexture()\r\n  }\r\n\r\n  /**\r\n   * Copy another {@link Texture} into this {@link Texture}\r\n   * @param texture - {@link Texture} to copy\r\n   */\r\n  copy(texture: Texture | DOMTexture) {\r\n    this.options.fromTexture = texture\r\n    this.createTexture()\r\n  }\r\n\r\n  /**\r\n   * Copy a {@link GPUTexture} directly into this {@link Texture}. Mainly used for depth textures.\r\n   * @param texture - {@link GPUTexture} to copy\r\n   */\r\n  copyGPUTexture(texture: GPUTexture) {\r\n    this.size = {\r\n      width: texture.width,\r\n      height: texture.height,\r\n      depth: texture.depthOrArrayLayers,\r\n    }\r\n\r\n    this.options.format = texture.format\r\n    this.options.sampleCount = texture.sampleCount\r\n\r\n    this.texture = texture\r\n\r\n    this.textureBinding.setFormat(this.options.format)\r\n    this.textureBinding.setMultisampled(this.options.sampleCount > 1)\r\n\r\n    this.textureBinding.resource = this.texture\r\n  }\r\n\r\n  /**\r\n   * Create the {@link GPUTexture | texture} (or copy it from source) and update the {@link TextureBinding#resource | binding resource}\r\n   */\r\n  createTexture() {\r\n    if (!this.size.width || !this.size.height) return\r\n\r\n    if (this.options.fromTexture) {\r\n      // copy the GPU texture\r\n      this.copyGPUTexture(this.options.fromTexture.texture)\r\n      return\r\n    }\r\n\r\n    this.texture?.destroy()\r\n\r\n    this.texture = this.renderer.createTexture({\r\n      label: this.options.label,\r\n      format: this.options.format,\r\n      size: [this.size.width, this.size.height, this.size.depth ?? 1],\r\n      dimensions: this.options.viewDimension,\r\n      sampleCount: this.options.sampleCount,\r\n      mipLevelCount: this.options.generateMips\r\n        ? getNumMipLevels(this.size.width, this.size.height, this.size.depth ?? 1)\r\n        : 1,\r\n      usage: getDefaultTextureUsage(this.options.usage, this.options.type),\r\n    } as GPUTextureDescriptor)\r\n\r\n    // update texture binding\r\n    this.textureBinding.resource = this.texture\r\n  }\r\n\r\n  /**\r\n   * Upload a source to the GPU and use it for our {@link texture}.\r\n   * @param parameters - parameters used to upload the source.\r\n   * @param parameters.source - source to use for our {@link texture}.\r\n   * @param parameters.width - source width.\r\n   * @param parameters.height - source height.\r\n   * @param parameters.depth - source depth.\r\n   * @param parameters.origin - {@link GPUQueue.copyExternalImageToTexture().destination.origin | GPUOrigin3D} of the source copy.\r\n   */\r\n  uploadSource({\r\n    source,\r\n    width = this.size.width,\r\n    height = this.size.height,\r\n    depth = this.size.depth,\r\n    origin = [0, 0, 0],\r\n    colorSpace = 'srgb',\r\n  }: {\r\n    source: GPUImageCopyExternalImageSource\r\n    width?: number\r\n    height?: number\r\n    depth?: number\r\n    origin?: GPUOrigin3D\r\n    colorSpace?: PredefinedColorSpace\r\n  }) {\r\n    this.renderer.device.queue.copyExternalImageToTexture(\r\n      { source: source, flipY: this.options.flipY },\r\n      { texture: this.texture, premultipliedAlpha: this.options.premultipliedAlpha, origin, colorSpace },\r\n      [width, height, depth]\r\n    )\r\n\r\n    if (this.texture.mipLevelCount > 1) {\r\n      generateMips(this.renderer.device, this.texture)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Use data as the {@link texture} source and upload it to the GPU.\r\n   * @param parameters - parameters used to upload the source.\r\n   * @param parameters.width - data source width.\r\n   * @param parameters.height - data source height.\r\n   * @param parameters.depth - data source depth.\r\n   * @param parameters.origin - {@link GPUQueue.copyExternalImageToTexture().destination.origin | GPUOrigin3D} of the data source copy.\r\n   * @param parameters.data - {@link Float32Array} data to use as source.\r\n   */\r\n  uploadData({\r\n    width = this.size.width,\r\n    height = this.size.height,\r\n    depth = this.size.depth,\r\n    origin = [0, 0, 0],\r\n    data = new Float32Array(width * height * 4),\r\n  }: {\r\n    width?: number\r\n    height?: number\r\n    depth?: number\r\n    origin?: GPUOrigin3D\r\n    data?: Float32Array\r\n  }) {\r\n    this.renderer.device.queue.writeTexture(\r\n      { texture: this.texture, origin },\r\n      data,\r\n      { bytesPerRow: width * data.BYTES_PER_ELEMENT * 4, rowsPerImage: height },\r\n      [width, height, depth]\r\n    )\r\n\r\n    if (this.texture.mipLevelCount > 1) {\r\n      generateMips(this.renderer.device, this.texture)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set our {@link Texture#bindings | bindings}\r\n   */\r\n  setBindings() {\r\n    this.bindings = [\r\n      new TextureBinding({\r\n        label: this.options.label + ': ' + this.options.name + ' texture',\r\n        name: this.options.name,\r\n        bindingType: this.options.type,\r\n        visibility: this.options.visibility,\r\n        texture: this.texture,\r\n        format: this.options.format,\r\n        viewDimension: this.options.viewDimension,\r\n        multisampled: this.options.sampleCount > 1,\r\n      }),\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Get our {@link TextureBinding | texture binding}\r\n   * @readonly\r\n   */\r\n  get textureBinding(): TextureBinding {\r\n    return this.bindings[0] as TextureBinding\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link Texture}, which means recreate it/copy it again and tell the {@link core/bindGroups/TextureBindGroup.TextureBindGroup | texture bind group} to update\r\n   * @param size - the optional new {@link TextureSize | size} to set\r\n   */\r\n  resize(size: TextureSize | null = null) {\r\n    if (!this.#autoResize) return\r\n\r\n    if (!size) {\r\n      size = {\r\n        width: Math.floor(this.renderer.canvas.width * this.options.qualityRatio),\r\n        height: Math.floor(this.renderer.canvas.height * this.options.qualityRatio),\r\n        depth: 1,\r\n      }\r\n    }\r\n\r\n    // no real resize, bail!\r\n    if (size.width === this.size.width && size.height === this.size.height && size.depth === this.size.depth) {\r\n      return\r\n    }\r\n\r\n    this.size = size\r\n    this.createTexture()\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link Texture}\r\n   */\r\n  destroy() {\r\n    this.renderer.removeTexture(this)\r\n\r\n    // destroy the GPU texture only if it's not a copy of another texture\r\n    if (!this.options.fromTexture) {\r\n      this.texture?.destroy()\r\n    }\r\n\r\n    this.texture = null\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { BindGroup } from '../bindGroups/BindGroup'\r\nimport { TextureBindGroup } from '../bindGroups/TextureBindGroup'\r\nimport { Sampler } from '../samplers/Sampler'\r\nimport { AllowedPipelineEntries, GPUPassTypes } from '../pipelines/PipelineManager'\r\nimport { BufferBinding, BufferBindingInput } from '../bindings/BufferBinding'\r\nimport { AllowedBindGroups, BindGroupBindingElement, BindGroupBufferBindingElement } from '../../types/BindGroups'\r\nimport { DOMTexture } from '../textures/DOMTexture'\r\nimport { FullShadersType, MaterialOptions, MaterialParams, ShaderOptions } from '../../types/Materials'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { Texture } from '../textures/Texture'\r\nimport { Binding } from '../bindings/Binding'\r\nimport { generateUUID } from '../../utils/utils'\r\nimport { BufferElement } from '../bindings/bufferElements/BufferElement'\r\nimport { Buffer } from '../buffers/Buffer'\r\n\r\n/**\r\n * Used as a base to create a {@link Material}.<br>\r\n * The purpose of {@link Material} is to create and update the {@link BindGroup | bind groups} and their bindings (GPU buffers, textures and samplers), create a {@link core/pipelines/PipelineEntry.PipelineEntry | PipelineEntry} and use them to {@link Material#render | render}.\r\n *\r\n * ## Bind groups\r\n *\r\n * A {@link Material} automatically creates a {@link TextureBindGroup}, but it is actually added to the active {@link Material#bindGroups | bind groups array} only if necessary, which means if your shaders use a {@link GPUSampler}, a {@link GPUTexture} or a {@link GPUExternalTexture}.\r\n *\r\n * Another {@link BindGroup} will be created if you pass any {@link MaterialParams#uniforms | uniforms} or {@link MaterialParams#storages | storages} parameters.\r\n *\r\n * Finally, you can also pass already created {@link BindGroup} to a {@link Material} via the {@link MaterialParams#bindGroups | bindGroups} parameter.\r\n *\r\n * ----\r\n *\r\n * Note that this class is not intended to be used as is, but as a base for {@link core/materials/ComputeMaterial.ComputeMaterial | ComputeMaterial} and {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial} classes.\r\n */\r\nexport class Material {\r\n  /** The type of the {@link Material} */\r\n  type: string\r\n  /** The universal unique id of the {@link Material} */\r\n  uuid: string\r\n  /** The {@link Renderer} used */\r\n  renderer: Renderer\r\n  /** Options used to create this {@link Material} */\r\n  options: MaterialOptions\r\n\r\n  /** Pipeline entry used by this {@link Material} */\r\n  pipelineEntry: AllowedPipelineEntries\r\n\r\n  /**\r\n   * Array of {@link BindGroup | bind groups} used by this {@link Material}\r\n   * This array respects a specific order:\r\n   * 1. The {@link texturesBindGroup | textures bind groups}\r\n   * 2. The {@link BindGroup | bind group} created using {@link types/BindGroups.BindGroupInputs#uniforms | uniforms} and {@link types/BindGroups.BindGroupInputs#storages | storages} parameters if any\r\n   * 3. Additional {@link MaterialParams#bindGroups | bind groups} parameters if any\r\n   */\r\n  bindGroups: AllowedBindGroups[]\r\n  /** Array of {@link TextureBindGroup | texture bind groups} used by this {@link Material} */\r\n  texturesBindGroups: TextureBindGroup[]\r\n  /** Array of {@link BindGroup | bind groups} created using the {@link types/BindGroups.BindGroupInputs#uniforms | uniforms} and {@link types/BindGroups.BindGroupInputs#storages | storages} parameters when instancing this {@link Material} */\r\n  inputsBindGroups: BindGroup[]\r\n  /** Array of {@link BindGroup | cloned bind groups} created by this {@link Material} */\r\n  clonedBindGroups: AllowedBindGroups[]\r\n\r\n  /** Object containing all uniforms inputs handled by this {@link Material} */\r\n  uniforms: Record<string, Record<string, BufferBindingInput>>\r\n  /** Object containing all read only or read/write storages inputs handled by this {@link Material} */\r\n  storages: Record<string, Record<string, BufferBindingInput>>\r\n\r\n  /** Map of {@link Binding | bindings} created using the {@link types/BindGroups.BindGroupInputs#uniforms | uniforms} and {@link types/BindGroups.BindGroupInputs#storages | storages} parameters when instancing this {@link Material} */\r\n  inputsBindings: Map<string, BindGroupBindingElement>\r\n\r\n  /** Array of {@link DOMTexture} handled by this {@link Material} */\r\n  domTextures: DOMTexture[]\r\n  /** Array of {@link Texture} handled by this {@link Material} */\r\n  textures: Texture[]\r\n  /** Array of {@link Sampler} handled by this {@link Material} */\r\n  samplers: Sampler[]\r\n\r\n  /**\r\n   * Material constructor\r\n   * @param renderer - our renderer class object\r\n   * @param parameters - {@link types/Materials.MaterialParams | parameters} used to create our Material\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters: MaterialParams) {\r\n    this.type = 'Material'\r\n\r\n    renderer = isRenderer(renderer, this.type)\r\n\r\n    this.renderer = renderer\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    const {\r\n      shaders,\r\n      label,\r\n      useAsyncPipeline,\r\n      uniforms,\r\n      storages,\r\n      bindings,\r\n      bindGroups,\r\n      samplers,\r\n      textures,\r\n      domTextures,\r\n    } = parameters\r\n\r\n    this.options = {\r\n      shaders,\r\n      label: label || this.constructor.name,\r\n      useAsyncPipeline: useAsyncPipeline === undefined ? true : useAsyncPipeline,\r\n      ...(uniforms !== undefined && { uniforms }),\r\n      ...(storages !== undefined && { storages }),\r\n      ...(bindings !== undefined && { bindings }),\r\n      ...(bindGroups !== undefined && { bindGroups }),\r\n      ...(samplers !== undefined && { samplers }),\r\n      ...(textures !== undefined && { textures }),\r\n      ...(domTextures !== undefined && { domTextures }),\r\n    }\r\n\r\n    this.bindGroups = []\r\n    this.texturesBindGroups = []\r\n    this.clonedBindGroups = []\r\n\r\n    this.setBindGroups()\r\n\r\n    this.setTextures()\r\n    this.setSamplers()\r\n  }\r\n\r\n  /**\r\n   * Set or reset this {@link Material} {@link Material.renderer | renderer}.\r\n   * @param renderer - New {@link Renderer} or {@link GPUCurtains} instance to use.\r\n   */\r\n  setRenderer(renderer: Renderer | GPUCurtains) {\r\n    renderer = isRenderer(renderer, this.type)\r\n    this.renderer = renderer\r\n  }\r\n\r\n  /**\r\n   * Check if all bind groups are ready, and create them if needed\r\n   */\r\n  compileMaterial() {\r\n    const texturesBindGroupLength = this.texturesBindGroup.bindings.length ? 1 : 0\r\n    const bindGroupsReady = this.bindGroups.length >= this.inputsBindGroups.length + texturesBindGroupLength\r\n\r\n    if (!bindGroupsReady) {\r\n      this.createBindGroups()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get whether the renderer is ready, our pipeline entry and pipeline have been created and successfully compiled\r\n   * @readonly\r\n   */\r\n  get ready(): boolean {\r\n    return !!(this.renderer.ready && this.pipelineEntry && this.pipelineEntry.pipeline && this.pipelineEntry.ready)\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Material} pipeline buffers cache key based on its {@link BindGroup} cache keys.\r\n   * @returns - Current cache key.\r\n   * @readonly\r\n   */\r\n  get cacheKey(): string {\r\n    let cacheKey = ''\r\n    this.bindGroups.forEach((bindGroup) => {\r\n      bindGroup.bindings.forEach((binding) => {\r\n        cacheKey += binding.name + ','\r\n      })\r\n      cacheKey += bindGroup.pipelineCacheKey\r\n    })\r\n\r\n    return cacheKey\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.\r\n   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to render\r\n   */\r\n  loseContext() {\r\n    // start with the textures\r\n    for (const texture of this.domTextures) {\r\n      texture.texture = null\r\n      texture.sourceUploaded = false\r\n    }\r\n\r\n    for (const texture of this.textures) {\r\n      texture.texture = null\r\n    }\r\n\r\n    // then bind groups and struct\r\n    ;[...this.bindGroups, ...this.clonedBindGroups, ...this.inputsBindGroups].forEach((bindGroup) =>\r\n      bindGroup.loseContext()\r\n    )\r\n\r\n    // reset pipeline as well\r\n    this.pipelineEntry.pipeline = null\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored to recreate our samplers, textures and bind groups.\r\n   */\r\n  restoreContext() {\r\n    // start with the samplers and textures\r\n    for (const sampler of this.samplers) {\r\n      // the samplers have all been recreated by the renderer, just update the reference\r\n      sampler.createSampler()\r\n      sampler.binding.resource = sampler.sampler\r\n    }\r\n\r\n    // recreate the textures and resize them\r\n    for (const texture of this.domTextures) {\r\n      texture.createTexture()\r\n      texture.resize()\r\n    }\r\n\r\n    for (const texture of this.textures) {\r\n      texture.resize(texture.size)\r\n    }\r\n\r\n    // now the bind groups\r\n    ;[...this.bindGroups, ...this.clonedBindGroups, ...this.inputsBindGroups].forEach((bindGroup) => {\r\n      bindGroup.restoreContext()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get the complete code of a given shader including all the WGSL fragment code snippets added by the pipeline\r\n   * @param [shaderType=\"full\"] - shader to get the code from\r\n   * @returns - The corresponding shader code\r\n   */\r\n  getShaderCode(shaderType: FullShadersType = 'full'): string {\r\n    if (!this.pipelineEntry) return ''\r\n\r\n    shaderType = (() => {\r\n      switch (shaderType) {\r\n        case 'vertex':\r\n        case 'fragment':\r\n        case 'compute':\r\n        case 'full':\r\n          return shaderType\r\n        default:\r\n          return 'full'\r\n      }\r\n    })()\r\n\r\n    return this.pipelineEntry.shaders[shaderType].code\r\n  }\r\n\r\n  /**\r\n   * Get the added code of a given shader, i.e. all the WGSL fragment code snippets added by the pipeline\r\n   * @param [shaderType=\"vertex\"] - shader to get the code from\r\n   * @returns - The corresponding shader code\r\n   */\r\n  getAddedShaderCode(shaderType: FullShadersType = 'vertex'): string {\r\n    if (!this.pipelineEntry) return ''\r\n\r\n    shaderType = (() => {\r\n      switch (shaderType) {\r\n        case 'vertex':\r\n        case 'fragment':\r\n        case 'compute':\r\n          return shaderType\r\n        default:\r\n          return 'vertex'\r\n      }\r\n    })()\r\n\r\n    return this.pipelineEntry.shaders[shaderType].head\r\n  }\r\n\r\n  /* BIND GROUPS */\r\n\r\n  /**\r\n   * Prepare and set our bind groups based on inputs and bindGroups Material parameters\r\n   */\r\n  setBindGroups() {\r\n    this.uniforms = {}\r\n    this.storages = {}\r\n\r\n    this.inputsBindGroups = []\r\n    this.inputsBindings = new Map()\r\n\r\n    if (this.options.uniforms || this.options.storages || this.options.bindings) {\r\n      const inputsBindGroup = new BindGroup(this.renderer, {\r\n        label: this.options.label + ': Bindings bind group',\r\n        uniforms: this.options.uniforms,\r\n        storages: this.options.storages,\r\n        bindings: this.options.bindings,\r\n      })\r\n\r\n      this.processBindGroupBindings(inputsBindGroup)\r\n      this.inputsBindGroups.push(inputsBindGroup)\r\n      inputsBindGroup.consumers.add(this.uuid)\r\n    }\r\n\r\n    this.options.bindGroups?.forEach((bindGroup) => {\r\n      this.processBindGroupBindings(bindGroup)\r\n      this.inputsBindGroups.push(bindGroup)\r\n      bindGroup.consumers.add(this.uuid)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get the main {@link TextureBindGroup | texture bind group} created by this {@link Material} to manage all textures related struct\r\n   * @readonly\r\n   */\r\n  get texturesBindGroup(): TextureBindGroup {\r\n    return this.texturesBindGroups[0]\r\n  }\r\n\r\n  /**\r\n   * Process all {@link BindGroup} struct and add them to the corresponding objects based on their binding types. Also store them in a inputsBindings array to facilitate further access to struct.\r\n   * @param bindGroup - The {@link BindGroup} to process\r\n   */\r\n  processBindGroupBindings(bindGroup: BindGroup) {\r\n    for (const inputBinding of bindGroup.bindings) {\r\n      if (inputBinding.bindingType === 'uniform')\r\n        this.uniforms = {\r\n          ...this.uniforms,\r\n          [inputBinding.name]: (inputBinding as BindGroupBufferBindingElement).inputs,\r\n        }\r\n      if (inputBinding.bindingType === 'storage')\r\n        this.storages = {\r\n          ...this.storages,\r\n          [inputBinding.name]: (inputBinding as BindGroupBufferBindingElement).inputs,\r\n        }\r\n\r\n      this.inputsBindings.set(inputBinding.name, inputBinding)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the bind groups if they need to be created\r\n   */\r\n  createBindGroups() {\r\n    // textures first\r\n    if (this.texturesBindGroup.shouldCreateBindGroup) {\r\n      this.texturesBindGroup.setIndex(this.bindGroups.length)\r\n      this.texturesBindGroup.createBindGroup()\r\n\r\n      this.bindGroups.push(this.texturesBindGroup)\r\n    }\r\n\r\n    // then uniforms/storages inputs\r\n    for (const bindGroup of this.inputsBindGroups) {\r\n      if (bindGroup.shouldCreateBindGroup) {\r\n        bindGroup.setIndex(this.bindGroups.length)\r\n        bindGroup.createBindGroup()\r\n\r\n        this.bindGroups.push(bindGroup)\r\n      }\r\n    }\r\n\r\n    // finally, bindGroups inputs\r\n    this.options.bindGroups?.forEach((bindGroup) => {\r\n      // it has been created but not been added yet? add it!\r\n      if (!bindGroup.shouldCreateBindGroup && !this.bindGroups.find((bG) => bG.uuid === bindGroup.uuid)) {\r\n        bindGroup.setIndex(this.bindGroups.length)\r\n        this.bindGroups.push(bindGroup)\r\n      }\r\n\r\n      // add it to our textures bind groups as well if needed\r\n      if (bindGroup instanceof TextureBindGroup && !this.texturesBindGroups.find((bG) => bG.uuid === bindGroup.uuid)) {\r\n        this.texturesBindGroups.push(bindGroup)\r\n\r\n        // also add the textures?\r\n        for (const texture of bindGroup.textures) {\r\n          if (texture instanceof DOMTexture && !this.domTextures.find((t) => t.uuid === texture.uuid)) {\r\n            this.domTextures.push(texture)\r\n          } else if (texture instanceof Texture && !this.textures.find((t) => t.uuid === texture.uuid)) {\r\n            this.textures.push(texture)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Clones a {@link BindGroup} from a list of buffers\r\n   * Useful to create a new bind group with already created buffers, but swapped\r\n   * @param parameters - parameters used to clone the {@link BindGroup | bind group}\r\n   * @param parameters.bindGroup - the BindGroup to clone\r\n   * @param parameters.bindings - our input binding buffers\r\n   * @param parameters.keepLayout - whether we should keep original bind group layout or not\r\n   * @returns - the cloned BindGroup\r\n   */\r\n  cloneBindGroup({\r\n    bindGroup,\r\n    bindings = [],\r\n    keepLayout = true,\r\n  }: {\r\n    bindGroup?: AllowedBindGroups\r\n    bindings?: BindGroupBindingElement[]\r\n    keepLayout?: boolean\r\n  }): AllowedBindGroups | null {\r\n    if (!bindGroup) return null\r\n\r\n    const clone = bindGroup.clone({ bindings, keepLayout })\r\n    this.clonedBindGroups.push(clone)\r\n\r\n    return clone\r\n  }\r\n\r\n  /**\r\n   * Get a corresponding {@link BindGroup} or {@link TextureBindGroup} from one of its binding name/key\r\n   * @param bindingName - the binding name/key to look for\r\n   * @returns - bind group found or null if not found\r\n   */\r\n  getBindGroupByBindingName(bindingName: BufferBinding['name'] = ''): AllowedBindGroups | null {\r\n    return (this.ready ? this.bindGroups : this.inputsBindGroups).find((bindGroup) => {\r\n      return bindGroup.bindings.find((binding) => binding.name === bindingName)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Destroy a bind group, only if it is not used by another object\r\n   * @param bindGroup - bind group to eventually destroy\r\n   */\r\n  destroyBindGroup(bindGroup: AllowedBindGroups) {\r\n    // remove this material as a consumer of the bind group\r\n    bindGroup.consumers.delete(this.uuid)\r\n\r\n    // if the bind group does not have another consumer\r\n    // destroy it\r\n    if (!bindGroup.consumers.size) {\r\n      bindGroup.destroy()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all bind groups\r\n   */\r\n  destroyBindGroups() {\r\n    this.bindGroups.forEach((bindGroup) => this.destroyBindGroup(bindGroup))\r\n    this.clonedBindGroups.forEach((bindGroup) => this.destroyBindGroup(bindGroup))\r\n    this.texturesBindGroups.forEach((bindGroup) => this.destroyBindGroup(bindGroup))\r\n    this.texturesBindGroups = []\r\n    this.inputsBindGroups = []\r\n    this.bindGroups = []\r\n    this.clonedBindGroups = []\r\n  }\r\n\r\n  /**\r\n   * Update all bind groups.\r\n   */\r\n  updateBindGroups() {\r\n    // now update all bind groups in use and check if they need to flush the pipeline\r\n    for (const bindGroup of this.bindGroups) {\r\n      this.updateBindGroup(bindGroup)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * {@link BindGroup#update | Update a bind group}:\r\n   * - Update the textures if it's a {@link texturesBindGroups | textures bind group}.\r\n   * - Update its {@link BindGroup#bufferBindings | buffer bindings}.\r\n   * - Check if it eventually needs a {@link BindGroup#resetBindGroup | reset}.\r\n   * - Check if we need to flush the pipeline.\r\n   * @param bindGroup - {@link BindGroup} to update.\r\n   */\r\n  updateBindGroup(bindGroup: BindGroup) {\r\n    bindGroup.update()\r\n\r\n    // if a bind group needs to flush the pipeline\r\n    // usually happens if one of the struct bindingType has changed,\r\n    // which means the shader should be re-patched and recreated\r\n    if (bindGroup.needsPipelineFlush && this.pipelineEntry.ready) {\r\n      this.pipelineEntry.flushPipelineEntry(this.bindGroups)\r\n      bindGroup.needsPipelineFlush = false\r\n    }\r\n  }\r\n\r\n  /* INPUTS */\r\n\r\n  /**\r\n   * Look for a {@link BindGroupBindingElement | binding} by name in all {@link inputsBindings | input bindings}\r\n   * @param bindingName - the binding name or key\r\n   * @returns - the found binding, or null if not found\r\n   */\r\n  getBindingByName(bindingName: Binding['name'] = ''): BindGroupBindingElement | undefined {\r\n    return this.inputsBindings.get(bindingName)\r\n  }\r\n\r\n  /**\r\n   * Look for a {@link BindGroupBufferBindingElement | buffer binding} by name in all {@link inputsBindings | input bindings}\r\n   * @param bindingName - the binding name or key\r\n   * @returns - the found binding, or null if not found\r\n   */\r\n  getBufferBindingByName(bindingName: Binding['name'] = ''): BindGroupBufferBindingElement | undefined {\r\n    const bufferBinding = this.getBindingByName(bindingName)\r\n    return bufferBinding && 'buffer' in bufferBinding ? bufferBinding : undefined\r\n  }\r\n\r\n  /**\r\n   * Force setting a given {@link BufferBindingInput | buffer binding} shouldUpdate flag to `true` to update it at next render\r\n   * @param bufferBindingName - the buffer binding name\r\n   * @param bindingName - the binding name\r\n   */\r\n  shouldUpdateInputsBindings(bufferBindingName?: BufferBinding['name'], bindingName?: BufferBindingInput['name']) {\r\n    if (!bufferBindingName) return\r\n\r\n    const bufferBinding = this.getBindingByName(bufferBindingName)\r\n    if (bufferBinding) {\r\n      if (!bindingName) {\r\n        Object.keys((bufferBinding as BindGroupBufferBindingElement).inputs).forEach((bindingKey) =>\r\n          (bufferBinding as BindGroupBufferBindingElement).shouldUpdateBinding(bindingKey)\r\n        )\r\n      } else {\r\n        ;(bufferBinding as BindGroupBufferBindingElement).shouldUpdateBinding(bindingName)\r\n      }\r\n    }\r\n  }\r\n\r\n  /* SAMPLERS & TEXTURES */\r\n\r\n  /**\r\n   * Prepare our textures array and set the {@link TextureBindGroup}\r\n   */\r\n  setTextures() {\r\n    this.domTextures = []\r\n    this.textures = []\r\n    this.texturesBindGroups.push(\r\n      new TextureBindGroup(this.renderer, {\r\n        label: this.options.label + ': Textures bind group',\r\n      })\r\n    )\r\n\r\n    this.texturesBindGroup.consumers.add(this.uuid)\r\n\r\n    this.options.domTextures?.forEach((texture) => {\r\n      this.addTexture(texture)\r\n    })\r\n\r\n    this.options.textures?.forEach((texture) => {\r\n      this.addTexture(texture)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Add a texture to our array, and add it to the textures bind group only if used in the shaders (avoid binding useless data)\r\n   * @param texture - texture to add\r\n   */\r\n  addTexture(texture: DOMTexture | Texture) {\r\n    if (texture instanceof DOMTexture) {\r\n      this.domTextures.push(texture)\r\n    } else if (texture instanceof Texture) {\r\n      this.textures.push(texture)\r\n    }\r\n\r\n    // is it used in our shaders?\r\n    if (\r\n      (this.options.shaders.vertex && this.options.shaders.vertex.code.indexOf(texture.options.name) !== -1) ||\r\n      (this.options.shaders.fragment &&\r\n        (this.options.shaders.fragment as ShaderOptions).code.indexOf(texture.options.name) !== -1) ||\r\n      (this.options.shaders.compute && this.options.shaders.compute.code.indexOf(texture.options.name) !== -1)\r\n    ) {\r\n      this.texturesBindGroup.addTexture(texture)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy a {@link DOMTexture} or {@link Texture}, only if it is not used by another object or cached.\r\n   * @param texture - {@link DOMTexture} or {@link Texture} to eventually destroy\r\n   */\r\n  destroyTexture(texture: DOMTexture | Texture) {\r\n    // do not destroy a texture that must stay in cache\r\n    if ((texture as DOMTexture).options.cache) return\r\n    if (!(texture as Texture).options.autoDestroy) return\r\n\r\n    // check if this texture is used by another object before actually destroying it\r\n    const objectsUsingTexture = this.renderer.getObjectsByTexture(texture)\r\n\r\n    const shouldDestroy =\r\n      !objectsUsingTexture || !objectsUsingTexture.some((object) => object.material.uuid !== this.uuid)\r\n\r\n    if (shouldDestroy) {\r\n      texture.destroy()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all the Material textures\r\n   */\r\n  destroyTextures() {\r\n    this.domTextures?.forEach((texture) => this.destroyTexture(texture))\r\n    this.textures?.forEach((texture) => this.destroyTexture(texture))\r\n    this.domTextures = []\r\n    this.textures = []\r\n  }\r\n\r\n  /**\r\n   * Prepare our samplers array and always add a default sampler if not already passed as parameter\r\n   */\r\n  setSamplers() {\r\n    this.samplers = []\r\n\r\n    this.options.samplers?.forEach((sampler) => {\r\n      this.addSampler(sampler)\r\n    })\r\n\r\n    // create our default sampler if needed\r\n    const hasDefaultSampler = this.samplers.find((sampler) => sampler.name === 'defaultSampler')\r\n    if (!hasDefaultSampler) {\r\n      const sampler = new Sampler(this.renderer, { label: 'Default sampler', name: 'defaultSampler' })\r\n      this.addSampler(sampler)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a sampler to our array, and add it to the textures bind group only if used in the shaders (avoid binding useless data)\r\n   * @param sampler - sampler to add\r\n   */\r\n  addSampler(sampler: Sampler) {\r\n    this.samplers.push(sampler)\r\n\r\n    // is it used in our shaders?\r\n    if (\r\n      (this.options.shaders.vertex && this.options.shaders.vertex.code.indexOf(sampler.name) !== -1) ||\r\n      (this.options.shaders.fragment &&\r\n        (this.options.shaders.fragment as ShaderOptions).code.indexOf(sampler.name) !== -1) ||\r\n      (this.options.shaders.compute && this.options.shaders.compute.code.indexOf(sampler.name) !== -1)\r\n    ) {\r\n      this.texturesBindGroup.addSampler(sampler)\r\n    }\r\n  }\r\n\r\n  /* BUFFER RESULTS */\r\n\r\n  /**\r\n   * Map a {@link Buffer#GPUBuffer | Buffer's GPU buffer} and put a copy of the data into a {@link Float32Array}\r\n   * @param buffer - {@link Buffer} to use for mapping\r\n   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data\r\n   */\r\n  async getBufferResult(buffer: Buffer): Promise<Float32Array> {\r\n    return await buffer.mapBufferAsync()\r\n  }\r\n\r\n  /**\r\n   * Map the content of a {@link BufferBinding} {@link Buffer#GPUBuffer | GPU buffer} and put a copy of the data into a {@link Float32Array}\r\n   * @param bindingName - The name of the {@link inputsBindings | input bindings} from which to map the {@link Buffer#GPUBuffer | GPU buffer}\r\n   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data\r\n   */\r\n  async getBufferBindingResultByBindingName(bindingName: Binding['name'] = ''): Promise<Float32Array> {\r\n    const binding = this.getBufferBindingByName(bindingName)\r\n    if (binding && 'buffer' in binding) {\r\n      const dstBuffer = this.renderer.copyBufferToBuffer({\r\n        srcBuffer: binding.buffer,\r\n      })\r\n\r\n      return await this.getBufferResult(dstBuffer)\r\n    } else {\r\n      return new Float32Array(0)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map the content of a specific {@link BufferElement | buffer element} belonging to a {@link BufferBinding} {@link Buffer#GPUBuffer | GPU buffer} and put a copy of the data into a {@link Float32Array}\r\n   * @param parameters - parameters used to get the result\r\n   * @param parameters.bindingName - The name of the {@link inputsBindings | input bindings} from which to map the {@link Buffer#GPUBuffer | GPU buffer}\r\n   * @param parameters.bufferElementName - The name of the {@link BufferElement | buffer element} from which to extract the data afterwards\r\n   * @returns - {@link Float32Array} holding {@link GPUBuffer} data\r\n   */\r\n  async getBufferElementResultByNames({\r\n    bindingName,\r\n    bufferElementName,\r\n  }: {\r\n    bindingName: Binding['name']\r\n    bufferElementName: BufferElement['name']\r\n  }): Promise<Float32Array> {\r\n    const result = await this.getBufferBindingResultByBindingName(bindingName)\r\n\r\n    if (!bufferElementName || result.length) {\r\n      return result\r\n    } else {\r\n      const binding = this.getBufferBindingByName(bindingName)\r\n      if (binding) {\r\n        return binding.extractBufferElementDataFromBufferResult({ result, bufferElementName })\r\n      } else {\r\n        return result\r\n      }\r\n    }\r\n  }\r\n\r\n  /* RENDER */\r\n\r\n  /**\r\n   * Called before rendering the Material.\r\n   * First, check if we need to create our bind groups or pipeline\r\n   * Then render the {@link domTextures}\r\n   * Finally updates all the {@link bindGroups | bind groups}\r\n   */\r\n  onBeforeRender() {\r\n    // set our material if needed\r\n    this.compileMaterial()\r\n\r\n    // first what needs to be done for all textures\r\n    for (const texture of this.domTextures) {\r\n      texture.render()\r\n    }\r\n\r\n    // update bind groups\r\n    this.updateBindGroups()\r\n  }\r\n\r\n  /**\r\n   * Set the current pipeline\r\n   * @param pass - current pass encoder\r\n   */\r\n  setPipeline(pass: GPUPassTypes) {\r\n    this.renderer.pipelineManager.setCurrentPipeline(pass, this.pipelineEntry)\r\n  }\r\n\r\n  /**\r\n   * Use the {@link Renderer#pipelineManager | renderer pipelineManager} to only set the bind groups that are not already set.\r\n   * @param pass - current pass encoder\r\n   */\r\n  setActiveBindGroups(pass: GPUPassTypes) {\r\n    this.renderer.pipelineManager.setActiveBindGroups(pass, this.bindGroups)\r\n  }\r\n\r\n  /**\r\n   * Render the material if it is ready:\r\n   * Set the current pipeline and set the bind groups\r\n   * @param pass - current pass encoder\r\n   */\r\n  render(pass: GPUPassTypes) {\r\n    // renderer or pipeline are not ready yet\r\n    // not really needed since meshes/compute passes do already check it beforehand\r\n    // mostly here as a safeguard\r\n    if (!this.ready) return\r\n\r\n    // set current pipeline\r\n    this.setPipeline(pass)\r\n\r\n    // only set the bind groups that need to be set\r\n    this.setActiveBindGroups(pass)\r\n  }\r\n\r\n  /**\r\n   * Destroy the Material\r\n   */\r\n  destroy() {\r\n    // destroy all buffers created with createBuffer\r\n    this.destroyBindGroups()\r\n    this.destroyTextures()\r\n  }\r\n}\r\n","import { Material } from './Material'\r\nimport { ComputeMaterialOptions, ComputeMaterialParams, FullShadersType } from '../../types/Materials'\r\nimport { isRenderer, Renderer } from '../renderers/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { ComputePipelineEntry } from '../pipelines/ComputePipelineEntry'\r\nimport { WritableBufferBinding } from '../bindings/WritableBufferBinding'\r\n\r\n/**\r\n * Create a {@link Material} specifically built to run computations on the GPU. Internally used by {@link core/computePasses/ComputePass.ComputePass | ComputePass}.\r\n *\r\n * ## Compute pipeline\r\n *\r\n * A {@link ComputeMaterial} automatically creates a {@link ComputePipelineEntry}. Once all the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} have been created, they are sent with the compute shader code to the {@link ComputePipelineEntry}, which is in turns responsible for creating the {@link GPUComputePipeline}.\r\n *\r\n * After the {@link GPUComputePipeline} has been successfully compiled, the {@link ComputeMaterial} is considered to be ready and it can start running the compute shader computations.\r\n *\r\n */\r\nexport class ComputeMaterial extends Material {\r\n  /** {@link ComputePipelineEntry | Compute pipeline entry} used by this {@link ComputeMaterial} */\r\n  pipelineEntry: ComputePipelineEntry\r\n  /** Options used to create this {@link ComputeMaterial} */\r\n  options: ComputeMaterialOptions\r\n\r\n  /** Default work group dispatch size to use with this {@link ComputeMaterial} */\r\n  dispatchSize?: number | number[]\r\n\r\n  /** function assigned to the {@link useCustomRender} callback */\r\n  _useCustomRenderCallback: (pass: GPUComputePassEncoder) => void\r\n\r\n  /**\r\n   * ComputeMaterial constructor\r\n   * @param renderer - our {@link Renderer} class object\r\n   * @param parameters - {@link ComputeMaterialParams | parameters} used to create our {@link ComputeMaterial}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters: ComputeMaterialParams) {\r\n    const type = 'ComputeMaterial'\r\n\r\n    renderer = isRenderer(renderer, type)\r\n\r\n    super(renderer, parameters)\r\n\r\n    this.type = type\r\n    this.renderer = renderer\r\n\r\n    let { shaders, dispatchSize } = parameters\r\n\r\n    if (!shaders || !shaders.compute) {\r\n      shaders = {\r\n        compute: {\r\n          code: '',\r\n          entryPoint: 'main',\r\n        },\r\n      }\r\n    }\r\n\r\n    if (!shaders.compute.code) {\r\n      shaders.compute.code = '@compute @workgroup_size(1) fn main(){}'\r\n    }\r\n\r\n    if (!shaders.compute.entryPoint) {\r\n      shaders.compute.entryPoint = 'main'\r\n    }\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      shaders,\r\n      ...(parameters.dispatchSize !== undefined && { dispatchSize: parameters.dispatchSize }),\r\n    }\r\n\r\n    // set default dispatch size\r\n    if (!dispatchSize) {\r\n      dispatchSize = 1\r\n    }\r\n\r\n    if (Array.isArray(dispatchSize)) {\r\n      dispatchSize[0] = Math.ceil(dispatchSize[0] ?? 1)\r\n      dispatchSize[1] = Math.ceil(dispatchSize[1] ?? 1)\r\n      dispatchSize[2] = Math.ceil(dispatchSize[2] ?? 1)\r\n    } else if (!isNaN(dispatchSize)) {\r\n      dispatchSize = [Math.ceil(dispatchSize), 1, 1]\r\n    }\r\n\r\n    this.dispatchSize = dispatchSize\r\n  }\r\n\r\n  /**\r\n   * Set (or reset) the current {@link pipelineEntry}. Use the {@link Renderer#pipelineManager | renderer pipelineManager} to check whether we can get an already created {@link ComputePipelineEntry} from cache or if we should create a new one.\r\n   */\r\n  setPipelineEntry() {\r\n    this.pipelineEntry = this.renderer.pipelineManager.createComputePipeline(this)\r\n  }\r\n\r\n  /**\r\n   * Compile the {@link ComputePipelineEntry}\r\n   */\r\n  async compilePipelineEntry(): Promise<void> {\r\n    await this.pipelineEntry.compilePipelineEntry()\r\n  }\r\n\r\n  /**\r\n   * Check if all bind groups are ready, create them if needed, set {@link ComputePipelineEntry} bind group buffers and compile the pipeline\r\n   */\r\n  async compileMaterial(): Promise<void> {\r\n    if (this.ready) return\r\n\r\n    super.compileMaterial()\r\n\r\n    if (!this.pipelineEntry) {\r\n      this.setPipelineEntry()\r\n    }\r\n\r\n    if (this.pipelineEntry && this.pipelineEntry.canCompile) {\r\n      await this.compilePipelineEntry()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the complete code of a given shader including all the WGSL fragment code snippets added by the pipeline\r\n   * @param [shaderType=\"compute\"] - shader to get the code from\r\n   * @returns - The corresponding shader code\r\n   */\r\n  getShaderCode(shaderType: FullShadersType = 'compute'): string {\r\n    return super.getShaderCode(shaderType)\r\n  }\r\n\r\n  /**\r\n   * Get the added code of a given shader, i.e. all the WGSL fragment code snippets added by the pipeline\r\n   * @param [shaderType=\"compute\"] - shader to get the code from\r\n   * @returns - The corresponding shader code\r\n   */\r\n  getAddedShaderCode(shaderType: FullShadersType = 'compute'): string {\r\n    return super.getAddedShaderCode(shaderType)\r\n  }\r\n\r\n  /* RENDER */\r\n\r\n  /**\r\n   * If a custom render function has been defined instead of the default one, register the callback\r\n   * @param callback - callback to run instead of the default render behaviour, which is to set the {@link bindGroups | bind groups} and dispatch the work groups based on the {@link dispatchSize | default dispatch size}. This is where you will have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.\r\n   */\r\n  useCustomRender(callback: (pass: GPUComputePassEncoder) => void) {\r\n    if (callback) {\r\n      this._useCustomRenderCallback = callback\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the material if it is ready:\r\n   * Set the current pipeline, set the bind groups and dispatch the work groups\r\n   * @param pass - current compute pass encoder\r\n   */\r\n  render(pass: GPUComputePassEncoder) {\r\n    // renderer or pipeline are not ready yet\r\n    // not really needed since compute passes do already check it beforehand\r\n    // mostly here as a safeguard\r\n    if (!this.ready) return\r\n\r\n    // set current pipeline\r\n    this.setPipeline(pass)\r\n\r\n    // if we declared a custom render function, call it\r\n    if (this._useCustomRenderCallback !== undefined) {\r\n      this._useCustomRenderCallback(pass)\r\n    } else {\r\n      // else just set our bind groups and dispatch\r\n      for (const bindGroup of this.bindGroups) {\r\n        pass.setBindGroup(bindGroup.index, bindGroup.bindGroup)\r\n      }\r\n      //this.renderer.pipelineManager.setActiveBindGroups(pass, this.bindGroups)\r\n\r\n      pass.dispatchWorkgroups(this.dispatchSize[0], this.dispatchSize[1], this.dispatchSize[2])\r\n    }\r\n  }\r\n\r\n  /* RESULT BUFFER */\r\n\r\n  /**\r\n   * Copy all writable binding buffers that need it\r\n   * @param commandEncoder - current command encoder\r\n   */\r\n  copyBufferToResult(commandEncoder: GPUCommandEncoder) {\r\n    for (const bindGroup of this.bindGroups) {\r\n      bindGroup.bufferBindings.forEach((binding: WritableBufferBinding) => {\r\n        if (binding.shouldCopyResult) {\r\n          this.renderer.copyBufferToBuffer({\r\n            srcBuffer: binding.buffer,\r\n            dstBuffer: binding.resultBuffer,\r\n            commandEncoder,\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the {@link core/bindings/WritableBufferBinding.WritableBufferBinding#resultBuffer | result GPU buffer} content by {@link core/bindings/WritableBufferBinding.WritableBufferBinding | binding} and {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} names\r\n   * @param parameters - parameters used to get the result\r\n   * @param parameters.bindingName - {@link core/bindings/WritableBufferBinding.WritableBufferBinding#name | binding name} from which to get the result\r\n   * @param parameters.bufferElementName - optional {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} (i.e. struct member) name if the result needs to be restrained to only one element\r\n   * @returns - the mapped content of the {@link GPUBuffer} as a {@link Float32Array}\r\n   */\r\n  async getComputeResult({\r\n    bindingName = '',\r\n    bufferElementName = '',\r\n  }: {\r\n    bindingName?: string\r\n    bufferElementName?: string\r\n  }): Promise<Float32Array> {\r\n    const binding = this.getBufferBindingByName(bindingName)\r\n\r\n    if (binding && 'resultBuffer' in binding) {\r\n      const result = await this.getBufferResult(binding.resultBuffer)\r\n\r\n      if (bufferElementName && result.length) {\r\n        return binding.extractBufferElementDataFromBufferResult({ result, bufferElementName })\r\n      } else {\r\n        return result\r\n      }\r\n    } else {\r\n      return new Float32Array(0)\r\n    }\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { generateUUID, throwWarning } from '../../utils/utils'\r\nimport { ComputeMaterial } from '../materials/ComputeMaterial'\r\nimport { ComputeMaterialParams, MaterialParams, MaterialShaders } from '../../types/Materials'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { Texture, TextureParams } from '../textures/Texture'\r\nimport { DOMTexture } from '../textures/DOMTexture'\r\nimport { ExternalTextureParams, DOMTextureParams } from '../../types/Textures'\r\n\r\n/** Defines {@link ComputePass} options */\r\nexport interface ComputePassOptions {\r\n  /** The label of the {@link ComputePass} */\r\n  label: string\r\n  /** Controls the order in which this {@link ComputePass} should be rendered by our {@link core/scenes/Scene.Scene | Scene} */\r\n  renderOrder?: number\r\n  /** Whether the {@link ComputePass} should be added to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\r\n  autoRender?: boolean\r\n  /** Compute shader passed to the {@link ComputePass} following the {@link types/Materials.ShaderOptions | shader object} notation */\r\n  shaders: MaterialShaders\r\n  /** whether the {@link core/pipelines/ComputePipelineEntry.ComputePipelineEntry#pipeline | compute pipeline} should be compiled asynchronously */\r\n  useAsyncPipeline?: boolean\r\n  /** Parameters used by this {@link ComputePass} to create a {@link DOMTexture} */\r\n  texturesOptions?: ExternalTextureParams\r\n  /** Default {@link ComputeMaterial} work group dispatch size to use with this {@link ComputePass} */\r\n  dispatchSize?: number | number[]\r\n}\r\n\r\n/**\r\n * An object defining all possible {@link ComputePass} class instancing parameters\r\n */\r\nexport interface ComputePassParams extends Partial<ComputePassOptions>, MaterialParams {}\r\n\r\nlet computePassIndex = 0\r\n\r\n/**\r\n * Used to create a {@link ComputePass}, i.e. run computations on the GPU.<br>\r\n * A {@link ComputePass} is basically a wrapper around a {@link ComputeMaterial} that handles most of the process.\r\n *\r\n * The default render behaviour of a {@link ComputePass} is to set its {@link core/bindGroups/BindGroup.BindGroup | bind groups} and then dispatch the workgroups based on the provided {@link ComputeMaterial#dispatchSize | dispatchSize}.<br>\r\n * However, most of the time you'd want a slightly more complex behaviour. The {@link ComputePass#useCustomRender | `useCustomRender` hook} lets you define a totally custom behaviour, but you'll have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // let's assume we are going to compute the positions of 100.000 particles\r\n * const nbParticles = 100_000\r\n *\r\n * const computePass = new ComputePass(gpuCurtains, {\r\n *   label: 'My compute pass',\r\n *   shaders: {\r\n *     compute: {\r\n *       code: computeShaderCode, // assume it is a valid WGSL compute shader\r\n *     },\r\n *   },\r\n *   dispatchSize: Math.ceil(nbParticles / 64),\r\n *   storages: {\r\n *     particles: {\r\n *       access: 'read_write',\r\n *       struct: {\r\n *         position: {\r\n *           type: 'array<vec4f>',\r\n *           value: new Float32Array(nbParticles * 4),\r\n *         },\r\n *       },\r\n *     },\r\n *   },\r\n * })\r\n * ```\r\n */\r\nexport class ComputePass {\r\n  /** The type of the {@link ComputePass} */\r\n  type: string\r\n  /** The universal unique id of the {@link ComputePass} */\r\n  uuid: string\r\n  /** The index of the {@link ComputePass}, incremented each time a new one is instanced */\r\n  index: number\r\n  /** The {@link Renderer} used */\r\n  renderer: Renderer\r\n  /** Controls the order in which this {@link ComputePass} should be rendered by our {@link core/scenes/Scene.Scene | Scene} */\r\n  renderOrder: number\r\n\r\n  /** Options used to create this {@link ComputePass} */\r\n  options: ComputePassOptions\r\n\r\n  /** {@link ComputeMaterial} used by this {@link ComputePass} */\r\n  material: ComputeMaterial\r\n\r\n  /** Flag indicating whether this {@link ComputePass} is ready to be rendered */\r\n  _ready: boolean\r\n\r\n  /** Empty object to store any additional data or custom properties into your {@link ComputePass} */\r\n  userData: Record<string, unknown>\r\n\r\n  /**\r\n   * Whether this {@link ComputePass} should be added to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically\r\n   * @private\r\n   */\r\n  #autoRender = true\r\n\r\n  // callbacks / events\r\n  /** function assigned to the {@link onReady} callback */\r\n  _onReadyCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onBeforeRender} callback */\r\n  _onBeforeRenderCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onRender} callback */\r\n  _onRenderCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onAfterRender} callback */\r\n  _onAfterRenderCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onAfterResize} callback */\r\n  _onAfterResizeCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n\r\n  /**\r\n   * ComputePass constructor\r\n   * @param renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object\r\n   * @param parameters - {@link ComputePassParams | parameters} used to create our {@link ComputePass}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters: ComputePassParams = {}) {\r\n    const type = 'ComputePass'\r\n\r\n    renderer = isRenderer(renderer, parameters.label ? `${parameters.label} ${type}` : type)\r\n\r\n    parameters.label = parameters.label ?? 'ComputePass ' + renderer.computePasses?.length\r\n\r\n    this.renderer = renderer\r\n    this.type = type\r\n    this.uuid = generateUUID()\r\n    Object.defineProperty(this as ComputePass, 'index', { value: computePassIndex++ })\r\n\r\n    const {\r\n      label,\r\n      shaders,\r\n      renderOrder,\r\n      uniforms,\r\n      storages,\r\n      bindings,\r\n      bindGroups,\r\n      samplers,\r\n      domTextures,\r\n      textures,\r\n      autoRender,\r\n      useAsyncPipeline,\r\n      texturesOptions,\r\n      dispatchSize,\r\n    } = parameters\r\n\r\n    this.options = {\r\n      label,\r\n      shaders,\r\n      ...(autoRender !== undefined && { autoRender }),\r\n      ...(renderOrder !== undefined && { renderOrder }),\r\n      ...(dispatchSize !== undefined && { dispatchSize }),\r\n      useAsyncPipeline: useAsyncPipeline === undefined ? true : useAsyncPipeline,\r\n      texturesOptions, // TODO default\r\n    }\r\n\r\n    this.renderOrder = renderOrder ?? 0\r\n\r\n    if (autoRender !== undefined) {\r\n      this.#autoRender = autoRender\r\n    }\r\n\r\n    this.userData = {}\r\n\r\n    this.ready = false\r\n\r\n    this.setMaterial({\r\n      label: this.options.label,\r\n      shaders: this.options.shaders,\r\n      uniforms,\r\n      storages,\r\n      bindings,\r\n      bindGroups,\r\n      samplers,\r\n      textures,\r\n      domTextures,\r\n      useAsyncPipeline,\r\n      dispatchSize,\r\n    })\r\n\r\n    this.addToScene(true)\r\n  }\r\n\r\n  /**\r\n   * Get or set whether the compute pass is ready to render (the material has been successfully compiled)\r\n   * @readonly\r\n   */\r\n  get ready(): boolean {\r\n    return this._ready\r\n  }\r\n\r\n  set ready(value: boolean) {\r\n    if (value) {\r\n      this._onReadyCallback && this._onReadyCallback()\r\n    }\r\n    this._ready = value\r\n  }\r\n\r\n  /**\r\n   * Add our {@link ComputePass} to the scene and optionally to the renderer.\r\n   * @param addToRenderer - whether to add this {@link ComputePass} to the {@link Renderer#computePasses | Renderer computePasses array}\r\n   */\r\n  addToScene(addToRenderer = false) {\r\n    if (addToRenderer) {\r\n      this.renderer.computePasses.push(this)\r\n    }\r\n\r\n    if (this.#autoRender) {\r\n      this.renderer.scene.addComputePass(this)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove our {@link ComputePass} from the scene and optionally from the renderer as well.\r\n   * @param removeFromRenderer - whether to remove this {@link ComputePass} from the {@link Renderer#computePasses | Renderer computePasses array}.\r\n   */\r\n  removeFromScene(removeFromRenderer = false) {\r\n    if (this.#autoRender) {\r\n      this.renderer.scene.removeComputePass(this)\r\n    }\r\n\r\n    if (removeFromRenderer) {\r\n      this.renderer.computePasses = this.renderer.computePasses.filter((computePass) => computePass.uuid !== this.uuid)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a new {@link Renderer} for this {@link ComputePass}.\r\n   * @param renderer - new {@link Renderer} to set.\r\n   */\r\n  setRenderer(renderer: Renderer | GPUCurtains) {\r\n    // we could pass our curtains object OR our curtains renderer object\r\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\r\n\r\n    if (\r\n      !renderer ||\r\n      !(\r\n        renderer.type === 'GPURenderer' ||\r\n        renderer.type === 'GPUCameraRenderer' ||\r\n        renderer.type === 'GPUCurtainsRenderer'\r\n      )\r\n    ) {\r\n      throwWarning(\r\n        `${this.options.label}: Cannot set ${renderer} as a renderer because it is not of a valid Renderer type.`\r\n      )\r\n      return\r\n    }\r\n\r\n    this.material?.setRenderer(renderer)\r\n\r\n    this.removeFromScene(true)\r\n    this.renderer = renderer\r\n    this.addToScene(true)\r\n  }\r\n\r\n  /**\r\n   * Create the compute pass material\r\n   * @param computeParameters - {@link ComputeMaterial} parameters\r\n   */\r\n  setMaterial(computeParameters: ComputeMaterialParams) {\r\n    this.useMaterial(new ComputeMaterial(this.renderer, computeParameters))\r\n  }\r\n\r\n  /**\r\n   * Set or update the {@link ComputePass} {@link ComputeMaterial}\r\n   * @param material - new {@link ComputeMaterial} to use\r\n   */\r\n  useMaterial(material: ComputeMaterial) {\r\n    this.material = material\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.\r\n   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to render\r\n   */\r\n  loseContext() {\r\n    this.material.loseContext()\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored\r\n   */\r\n  restoreContext() {\r\n    this.material.restoreContext()\r\n  }\r\n\r\n  /* TEXTURES */\r\n\r\n  /**\r\n   * Get our {@link ComputeMaterial#domTextures | ComputeMaterial domTextures array}\r\n   * @readonly\r\n   */\r\n  get domTextures(): DOMTexture[] {\r\n    return this.material?.domTextures || []\r\n  }\r\n\r\n  /**\r\n   * Get our {@link ComputeMaterial#textures | ComputeMaterial textures array}\r\n   * @readonly\r\n   */\r\n  get textures(): Texture[] {\r\n    return this.material?.textures || []\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link DOMTexture}\r\n   * @param options - {@link DOMTextureParams | DOMTexture parameters}\r\n   * @returns - newly created {@link DOMTexture}\r\n   */\r\n  createDOMTexture(options: DOMTextureParams): DOMTexture {\r\n    if (!options.name) {\r\n      options.name = 'texture' + (this.textures.length + this.domTextures.length)\r\n    }\r\n\r\n    if (!options.label) {\r\n      options.label = this.options.label + ' ' + options.name\r\n    }\r\n\r\n    const domTexture = new DOMTexture(this.renderer, { ...options, ...this.options.texturesOptions })\r\n\r\n    this.addTexture(domTexture)\r\n\r\n    return domTexture\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link Texture}\r\n   * @param  options - {@link TextureParams | Texture parameters}\r\n   * @returns - newly created {@link Texture}\r\n   */\r\n  createTexture(options: TextureParams): Texture {\r\n    if (!options.name) {\r\n      options.name = 'texture' + (this.textures.length + this.domTextures.length)\r\n    }\r\n\r\n    const texture = new Texture(this.renderer, options)\r\n\r\n    this.addTexture(texture)\r\n\r\n    return texture\r\n  }\r\n\r\n  /**\r\n   * Add a {@link Texture} or {@link DOMTexture}\r\n   * @param texture - {@link Texture} to add\r\n   */\r\n  addTexture(texture: Texture | DOMTexture) {\r\n    this.material.addTexture(texture)\r\n  }\r\n\r\n  /**\r\n   * Get our {@link ComputeMaterial#uniforms | ComputeMaterial uniforms}\r\n   * @readonly\r\n   */\r\n  get uniforms(): ComputeMaterial['uniforms'] {\r\n    return this.material?.uniforms\r\n  }\r\n\r\n  /**\r\n   * Get our {@link ComputeMaterial#storages | ComputeMaterial storages}\r\n   * @readonly\r\n   */\r\n  get storages(): ComputeMaterial['storages'] {\r\n    return this.material?.storages\r\n  }\r\n\r\n  /**\r\n   * Called from the renderer, useful to trigger an after resize callback.\r\n   */\r\n  resize() {\r\n    this._onAfterResizeCallback && this._onAfterResizeCallback()\r\n  }\r\n\r\n  /** EVENTS **/\r\n\r\n  /**\r\n   * Callback to run when the {@link ComputePass} is ready\r\n   * @param callback - callback to run when {@link ComputePass} is ready\r\n   */\r\n  onReady(callback: () => void): ComputePass {\r\n    if (callback) {\r\n      this._onReadyCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Callback to run before the {@link ComputePass} is rendered\r\n   * @param callback - callback to run just before {@link ComputePass} will be rendered\r\n   */\r\n  onBeforeRender(callback: () => void): ComputePass {\r\n    if (callback) {\r\n      this._onBeforeRenderCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Callback to run when the {@link ComputePass} is rendered\r\n   * @param callback - callback to run when {@link ComputePass} is rendered\r\n   */\r\n  onRender(callback: () => void): ComputePass {\r\n    if (callback) {\r\n      this._onRenderCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Callback to run after the {@link ComputePass} has been rendered\r\n   * @param callback - callback to run just after {@link ComputePass} has been rendered\r\n   */\r\n  onAfterRender(callback: () => void): ComputePass {\r\n    if (callback) {\r\n      this._onAfterRenderCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Callback used to run a custom render function instead of the default one.\r\n   * @param callback - Your custom render function where you will have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.\r\n   */\r\n  useCustomRender(callback: (pass: GPUComputePassEncoder) => void): ComputePass {\r\n    this.material.useCustomRender(callback)\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Callback to run after the {@link core/renderers/GPURenderer.GPURenderer | renderer} has been resized\r\n   * @param callback - callback to run just after {@link core/renderers/GPURenderer.GPURenderer | renderer} has been resized\r\n   */\r\n  onAfterResize(callback: () => void): ComputePass {\r\n    if (callback) {\r\n      this._onAfterResizeCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Called before rendering the ComputePass\r\n   * Checks if the material is ready and eventually update its struct\r\n   */\r\n  onBeforeRenderPass() {\r\n    if (!this.renderer.ready) return\r\n\r\n    this._onBeforeRenderCallback && this._onBeforeRenderCallback()\r\n\r\n    this.material.onBeforeRender()\r\n\r\n    if (this.material && this.material.ready && !this.ready) {\r\n      this.ready = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render our {@link ComputeMaterial}\r\n   * @param pass - current compute pass encoder\r\n   */\r\n  onRenderPass(pass: GPUComputePassEncoder) {\r\n    if (!this.material.ready) return\r\n\r\n    this._onRenderCallback && this._onRenderCallback()\r\n\r\n    this.material.render(pass)\r\n  }\r\n\r\n  /**\r\n   * Called after having rendered the ComputePass\r\n   */\r\n  onAfterRenderPass() {\r\n    this._onAfterRenderCallback && this._onAfterRenderCallback()\r\n  }\r\n\r\n  /**\r\n   * Render our compute pass\r\n   * Basically just check if our {@link core/renderers/GPURenderer.GPURenderer | renderer} is ready, and then render our {@link ComputeMaterial}\r\n   * @param pass\r\n   */\r\n  render(pass: GPUComputePassEncoder) {\r\n    this.onBeforeRenderPass()\r\n\r\n    // no point to render if the WebGPU device is not ready\r\n    if (!this.renderer.ready) return\r\n\r\n    !this.renderer.production && pass.pushDebugGroup(this.options.label)\r\n\r\n    this.onRenderPass(pass)\r\n\r\n    !this.renderer.production && pass.popDebugGroup()\r\n\r\n    this.onAfterRenderPass()\r\n  }\r\n\r\n  /**\r\n   * Copy the result of our read/write GPUBuffer into our result binding array\r\n   * @param commandEncoder - current GPU command encoder\r\n   */\r\n  copyBufferToResult(commandEncoder: GPUCommandEncoder) {\r\n    this.material?.copyBufferToResult(commandEncoder)\r\n  }\r\n\r\n  /**\r\n   * Get the {@link core/bindings/WritableBufferBinding.WritableBufferBinding#resultBuffer | result GPU buffer} content by {@link core/bindings/WritableBufferBinding.WritableBufferBinding | binding} and {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} names\r\n   * @param parameters - parameters used to get the result\r\n   * @param parameters.bindingName - {@link core/bindings/WritableBufferBinding.WritableBufferBinding#name | binding name} from which to get the result\r\n   * @param parameters.bufferElementName - optional {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} (i.e. struct member) name if the result needs to be restrained to only one element\r\n   * @returns - the mapped content of the {@link GPUBuffer} as a {@link Float32Array}\r\n   */\r\n  async getComputeResult({\r\n    bindingName,\r\n    bufferElementName,\r\n  }: {\r\n    bindingName?: string\r\n    bufferElementName?: string\r\n  }): Promise<Float32Array> {\r\n    return await this.material?.getComputeResult({ bindingName, bufferElementName })\r\n  }\r\n\r\n  /**\r\n   * Remove the ComputePass from the scene and destroy it\r\n   */\r\n  remove() {\r\n    this.removeFromScene(true)\r\n    this.destroy()\r\n  }\r\n\r\n  /**\r\n   * Destroy the ComputePass\r\n   */\r\n  destroy() {\r\n    this.material?.destroy()\r\n  }\r\n}\r\n","import { Vec3 } from './Vec3'\r\nimport { Mat4 } from './Mat4'\r\n\r\n// declare our corners once should be enough\r\nconst points: Vec3[] = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()]\r\n\r\n/**\r\n * Used to handle bounding boxes in 3D space.\r\n * Basically made of two min and max {@link Vec3 | vectors} that represents the edges of the 3D bounding box.\r\n */\r\nexport class Box3 {\r\n  /** Min {@link Vec3 | vector} of the {@link Box3} */\r\n  min: Vec3\r\n  /** Max {@link Vec3 | vector} of the {@link Box3} */\r\n  max: Vec3\r\n\r\n  /**\r\n   * Box3 constructor\r\n   * @param min - min {@link Vec3 | vector} of the {@link Box3}\r\n   * @param max - max {@link Vec3 | vector} of the {@link Box3}\r\n   */\r\n  constructor(min: Vec3 = new Vec3(Infinity), max: Vec3 = new Vec3(-Infinity)) {\r\n    this.min = min\r\n    this.max = max\r\n  }\r\n\r\n  /**\r\n   * Set a {@link Box3} from two min and max {@link Vec3 | vectors}\r\n   * @param min - min {@link Vec3 | vector} of the {@link Box3}\r\n   * @param max - max {@link Vec3 | vector} of the {@link Box3}\r\n   */\r\n  set(min: Vec3 = new Vec3(Infinity), max: Vec3 = new Vec3(-Infinity)): Box3 {\r\n    this.min.copy(min)\r\n    this.max.copy(max)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Check whether the {@link Box3} min and max values have actually been set\r\n   */\r\n  isEmpty() {\r\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z\r\n  }\r\n\r\n  /**\r\n   * Copy a {@link Box3} into this {@link Box3}.\r\n   * @param box - {@link Box3} to copy\r\n   */\r\n  copy(box: Box3): Box3 {\r\n    this.set(box.min.clone(), box.max.clone())\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Clone this {@link Box3}\r\n   * @returns - cloned {@link Box3}\r\n   */\r\n  clone(): Box3 {\r\n    return new Box3().copy(this)\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Box3} center\r\n   * @readonly\r\n   * @returns - {@link Vec3 | center vector} of the {@link Box3}\r\n   */\r\n  get center(): Vec3 {\r\n    return this.max.clone().add(this.min).multiplyScalar(0.5)\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Box3} size\r\n   * @readonly\r\n   * @returns - {@link Vec3 | size vector} of the {@link Box3}\r\n   */\r\n  get size(): Vec3 {\r\n    return this.max.clone().sub(this.min)\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Box3} radius\r\n   * @readonly\r\n   * @returns - radius of the {@link Box3}\r\n   */\r\n  get radius(): number {\r\n    return this.max.distance(this.min) * 0.5\r\n  }\r\n\r\n  /**\r\n   * Apply a {@link Mat4 | matrix} to a {@link Box3}\r\n   * Useful to apply a transformation {@link Mat4 | matrix} to a {@link Box3}\r\n   * @param matrix - {@link Mat4 | matrix} to use\r\n   * @param transformedBox - {@link Box3 | transformed Box3} to set\r\n   * @returns - the {@link Box3 | transformed Box3} after {@link Mat4 | matrix} application\r\n   */\r\n  applyMat4(matrix: Mat4 = new Mat4(), transformedBox = new Box3()): Box3 {\r\n    if (this.isEmpty()) return this\r\n\r\n    const corners: Vec3[] = []\r\n\r\n    // remember we're essentially dealing with plane geometries\r\n    // so if min Z and max Z are equals, it's actually a plane geometry\r\n    // just apply the matrix to its four corners\r\n    if (this.min.z === this.max.z) {\r\n      corners[0] = points[0].set(this.min.x, this.min.y, this.min.z).applyMat4(matrix)\r\n      corners[1] = points[2].set(this.min.x, this.max.y, this.min.z).applyMat4(matrix)\r\n      corners[2] = points[4].set(this.max.x, this.min.y, this.min.z).applyMat4(matrix)\r\n      corners[3] = points[6].set(this.max.x, this.max.y, this.min.z).applyMat4(matrix)\r\n    } else {\r\n      corners[0] = points[0].set(this.min.x, this.min.y, this.min.z).applyMat4(matrix)\r\n      corners[1] = points[1].set(this.min.x, this.min.y, this.max.z).applyMat4(matrix)\r\n      corners[2] = points[2].set(this.min.x, this.max.y, this.min.z).applyMat4(matrix)\r\n      corners[3] = points[3].set(this.min.x, this.max.y, this.max.z).applyMat4(matrix)\r\n      corners[4] = points[4].set(this.max.x, this.min.y, this.min.z).applyMat4(matrix)\r\n      corners[5] = points[5].set(this.max.x, this.min.y, this.max.z).applyMat4(matrix)\r\n      corners[6] = points[6].set(this.max.x, this.max.y, this.min.z).applyMat4(matrix)\r\n      corners[7] = points[7].set(this.max.x, this.max.y, this.max.z).applyMat4(matrix)\r\n    }\r\n\r\n    for (let i = 0, cornersCount = corners.length; i < cornersCount; i++) {\r\n      transformedBox.min.min(corners[i])\r\n      transformedBox.max.max(corners[i])\r\n    }\r\n\r\n    return transformedBox\r\n  }\r\n}\r\n","import { Box3 } from '../../math/Box3'\r\nimport { Mat4 } from '../../math/Mat4'\r\nimport { DOMElementBoundingRect, RectBBox, RectCoords } from './DOMElement'\r\nimport { Vec3 } from '../../math/Vec3'\r\n\r\n/**\r\n * An object defining all possible {@link DOMFrustum} class instancing parameters\r\n */\r\nexport interface DOMFrustumParams {\r\n  /** our 3D Object bounding box, i.e. size in world space before any transform. Usually defined by a {@link core/geometries/Geometry.Geometry | Geometry} */\r\n  boundingBox?: Box3\r\n  /** {@link core/objects3D/ProjectedObject3D.ProjectedObject3D#modelViewProjectionMatrix | model view projection matrix} to use for frustum calculations */\r\n  modelViewProjectionMatrix?: Mat4\r\n  /** the {@link DOMElementBoundingRect | bounding rectangle} to check against */\r\n  containerBoundingRect?: DOMElementBoundingRect\r\n  /** additional margins to add to {@link containerBoundingRect} */\r\n  DOMFrustumMargins?: RectCoords\r\n  /** callback to run when the {@link DOMFrustum#projectedBoundingRect | projectedBoundingRect} reenters the view frustum */\r\n  onReEnterView?: () => void\r\n  /** callback to run when the {@link DOMFrustum#projectedBoundingRect | projectedBoundingRect} leaves the view frustum */\r\n  onLeaveView?: () => void\r\n}\r\n\r\n/** @constant {RectCoords} - default {@link DOMFrustum#DOMFrustumMargins | DOMFrustumMargins} */\r\nconst defaultDOMFrustumMargins: RectCoords = {\r\n  top: 0,\r\n  right: 0,\r\n  bottom: 0,\r\n  left: 0,\r\n}\r\n\r\n/**\r\n * Used to check if a {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D} is currently contained inside a DOM bounding rectangle.\r\n *\r\n * Uses a {@link core/objects3D/ProjectedObject3D.ProjectedObject3D#modelViewProjectionMatrix | model view projection matrix} that contains both useful {@link core/objects3D/ProjectedObject3D.ProjectedObject3D#transforms | Object3D transforms} and {@link core/camera/Camera.Camera | Camera} projection information.\r\n * The DOM bounding rectangle to check against usually is the {@link core/renderers/GPURenderer.GPURenderer | renderer}'s {@link core/DOM/DOMElement.DOMElement | DOMElement} bounding rectangle, unless frustum margins are specified.\r\n */\r\nexport class DOMFrustum {\r\n  /** Our 3D Object bounding box, i.e. size in world space before any transform. Usually defined by a {@link core/geometries/Geometry.Geometry | Geometry} */\r\n  boundingBox: Box3\r\n\r\n  /** Oriented bounding {@link Box3} in clip space. */\r\n  clipSpaceOBB: Box3\r\n\r\n  /** A model view projection matrix defining transformations, usually from a {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D}, to use for frustum calculations */\r\n  modelViewProjectionMatrix: Mat4\r\n\r\n  /** The DOM bounding rectangle to check against, usually the renderer DOM Element bounding rectangle */\r\n  containerBoundingRect: DOMElementBoundingRect\r\n  /** Additional margins to add to {@link containerBoundingRect} */\r\n  DOMFrustumMargins: RectCoords\r\n  /** Computed {@link RectBBox | rectangle} in clip space/normalized device coordinates. */\r\n  clipSpaceBoundingRect: RectBBox\r\n  /** A DOM Element bounding rectangle representing the result of our {@link boundingBox} with the {@link modelViewProjectionMatrix} applied */\r\n  projectedBoundingRect: DOMElementBoundingRect\r\n\r\n  /** Callback to run when the {@link projectedBoundingRect} reenters the view frustum */\r\n  onReEnterView: () => void\r\n  /** Callback to run when the {@link projectedBoundingRect} leaves the view frustum */\r\n  onLeaveView: () => void\r\n\r\n  /** Flag to indicate whether the given {@link projectedBoundingRect} is intersecting our view frustum */\r\n  isIntersecting: boolean\r\n\r\n  /**\r\n   * DOMFrustum constructor\r\n   * @param {DOMFrustumParams} parameters - {@link DOMFrustumParams | parameters} used to create our {@link DOMFrustum}\r\n   */\r\n  constructor({\r\n    boundingBox = new Box3(),\r\n    modelViewProjectionMatrix = new Mat4(),\r\n    containerBoundingRect = {\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      width: 0,\r\n      height: 0,\r\n      x: 0,\r\n      y: 0,\r\n    },\r\n    DOMFrustumMargins = defaultDOMFrustumMargins,\r\n    onReEnterView = () => {\r\n      /* allow empty callbacks */\r\n    },\r\n    onLeaveView = () => {\r\n      /* allow empty callbacks */\r\n    },\r\n  }: DOMFrustumParams) {\r\n    this.boundingBox = boundingBox\r\n    this.clipSpaceOBB = new Box3()\r\n    this.modelViewProjectionMatrix = modelViewProjectionMatrix\r\n    this.containerBoundingRect = containerBoundingRect\r\n    this.DOMFrustumMargins = { ...defaultDOMFrustumMargins, ...DOMFrustumMargins }\r\n\r\n    this.clipSpaceBoundingRect = {\r\n      top: 0,\r\n      left: 0,\r\n      width: 0,\r\n      height: 0,\r\n    }\r\n\r\n    this.projectedBoundingRect = {\r\n      top: 0,\r\n      right: 0,\r\n      bottom: 0,\r\n      left: 0,\r\n      width: 0,\r\n      height: 0,\r\n      x: 0,\r\n      y: 0,\r\n    }\r\n\r\n    this.onReEnterView = onReEnterView\r\n    this.onLeaveView = onLeaveView\r\n\r\n    this.isIntersecting = false\r\n  }\r\n\r\n  /**\r\n   * Set our {@link containerBoundingRect} (called on resize)\r\n   * @param boundingRect - new bounding rectangle\r\n   */\r\n  setContainerBoundingRect(boundingRect: DOMElementBoundingRect) {\r\n    this.containerBoundingRect = boundingRect\r\n  }\r\n\r\n  /**\r\n   * Get our DOM frustum bounding rectangle, i.e. our {@link containerBoundingRect} with the {@link DOMFrustumMargins} applied\r\n   * @readonly\r\n   */\r\n  get DOMFrustumBoundingRect(): RectCoords {\r\n    return {\r\n      top: this.projectedBoundingRect.top - this.DOMFrustumMargins.top,\r\n      right: this.projectedBoundingRect.right + this.DOMFrustumMargins.right,\r\n      bottom: this.projectedBoundingRect.bottom + this.DOMFrustumMargins.bottom,\r\n      left: this.projectedBoundingRect.left - this.DOMFrustumMargins.left,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compute the oriented bounding box in clip space.\r\n   */\r\n  computeClipSpaceOBB() {\r\n    // reset\r\n    this.clipSpaceOBB.set()\r\n    this.boundingBox.applyMat4(this.modelViewProjectionMatrix, this.clipSpaceOBB)\r\n  }\r\n\r\n  /**\r\n   * Applies all {@link modelViewProjectionMatrix} transformations to our {@link boundingBox}, i.e. apply OBB to document coordinates and set {@link projectedBoundingRect}.\r\n   */\r\n  setDocumentCoordsFromClipSpaceOBB() {\r\n    this.computeClipSpaceOBB()\r\n\r\n    this.clipSpaceBoundingRect = {\r\n      top: this.clipSpaceOBB.max.y,\r\n      left: this.clipSpaceOBB.min.x,\r\n      width: this.clipSpaceOBB.max.x - this.clipSpaceOBB.min.x,\r\n      height: this.clipSpaceOBB.max.y - this.clipSpaceOBB.min.y,\r\n    }\r\n\r\n    // normalize [-1, 1] coords to [0, 1]\r\n    const minX = (this.clipSpaceOBB.min.x + 1) * 0.5\r\n    const maxX = (this.clipSpaceOBB.max.x + 1) * 0.5\r\n\r\n    const minY = 1 - (this.clipSpaceOBB.min.y + 1) * 0.5\r\n    const maxY = 1 - (this.clipSpaceOBB.max.y + 1) * 0.5\r\n\r\n    const { width, height, top, left } = this.containerBoundingRect\r\n\r\n    this.projectedBoundingRect = {\r\n      left: minX * width + left,\r\n      x: minX * width + left,\r\n      top: maxY * height + top,\r\n      y: maxY * height + top,\r\n      right: maxX * width + left,\r\n      bottom: minY * height + top,\r\n      width: maxX * width + left - (minX * width + left),\r\n      height: minY * height + top - (maxY * height + top),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Apply the bounding sphere in clip space to document coordinates and set {@link projectedBoundingRect}.\r\n   * @param boundingSphere - bounding sphere in clip space.\r\n   */\r\n  setDocumentCoordsFromClipSpaceSphere(\r\n    boundingSphere: { center: Vec3; radius: number } = { center: new Vec3(), radius: 0 }\r\n  ) {\r\n    this.clipSpaceBoundingRect = {\r\n      top: boundingSphere.center.y + boundingSphere.radius,\r\n      left: boundingSphere.center.x - boundingSphere.radius,\r\n      width: boundingSphere.radius * 2,\r\n      height: boundingSphere.radius * 2,\r\n    }\r\n\r\n    // normalize [-1, 1] coords to [0, 1]\r\n    const centerX = (boundingSphere.center.x + 1) * 0.5\r\n    const centerY = 1 - (boundingSphere.center.y + 1) * 0.5\r\n\r\n    const { width, height, top, left } = this.containerBoundingRect\r\n\r\n    this.projectedBoundingRect.width = boundingSphere.radius * height\r\n    this.projectedBoundingRect.height = boundingSphere.radius * height\r\n\r\n    this.projectedBoundingRect.left = centerX * width + left - this.projectedBoundingRect.width * 0.5\r\n    this.projectedBoundingRect.x = this.projectedBoundingRect.left\r\n    this.projectedBoundingRect.top = centerY * height + top - this.projectedBoundingRect.height * 0.5\r\n    this.projectedBoundingRect.y = this.projectedBoundingRect.top\r\n\r\n    this.projectedBoundingRect.right = this.projectedBoundingRect.left + this.projectedBoundingRect.width\r\n    this.projectedBoundingRect.bottom = this.projectedBoundingRect.top + this.projectedBoundingRect.height\r\n  }\r\n\r\n  /**\r\n   * Check whether our {@link projectedBoundingRect} intersects with our {@link DOMFrustumBoundingRect}.\r\n   */\r\n  intersectsContainer() {\r\n    if (\r\n      Math.round(this.DOMFrustumBoundingRect.right) <= this.containerBoundingRect.left ||\r\n      Math.round(this.DOMFrustumBoundingRect.left) >=\r\n        this.containerBoundingRect.left + this.containerBoundingRect.width ||\r\n      Math.round(this.DOMFrustumBoundingRect.bottom) <= this.containerBoundingRect.top ||\r\n      Math.round(this.DOMFrustumBoundingRect.top) >= this.containerBoundingRect.top + this.containerBoundingRect.height\r\n    ) {\r\n      if (this.isIntersecting) {\r\n        this.onLeaveView()\r\n      }\r\n\r\n      this.isIntersecting = false\r\n    } else {\r\n      if (!this.isIntersecting) {\r\n        this.onReEnterView()\r\n      }\r\n\r\n      this.isIntersecting = true\r\n    }\r\n  }\r\n}\r\n","import { Box3 } from '../../math/Box3'\nimport { generateUUID, throwError, throwWarning } from '../../utils/utils'\nimport {\n  GeometryBuffer,\n  GeometryOptions,\n  GeometryParams,\n  VertexBuffer,\n  VertexBufferAttribute,\n  VertexBufferAttributeParams,\n  VertexBufferParams,\n  IndirectDrawParams,\n} from '../../types/Geometries'\nimport { Buffer } from '../buffers/Buffer'\nimport { Renderer } from '../renderers/utils'\nimport { TypedArrayConstructor } from '../bindings/utils'\nimport { GPURenderPassTypes } from '../pipelines/PipelineManager'\n\n/**\n * Used to create a {@link Geometry} from given parameters like instances count or geometry attributes (vertices, uvs, normals).<br>\n * Holds all attributes arrays, bounding box and create as WGSL code snippet for the vertex shader input attributes.\n *\n * During the {@link Geometry#render | render}, the {@link Geometry} is responsible for setting the {@link Geometry#vertexBuffers | vertexBuffers} and drawing the vertices.\n *\n * @example\n * ```javascript\n * const vertices = new Float32Array([\n *   // first triangle\n *    1,  1,  0,\n *    1, -1,  0,\n *   -1, -1,  0,\n *\n *   // second triangle\n *    1,  1,  0,\n *   -1, -1,  0,\n *   -1,  1,  0\n * ])\n *\n * // create a quad geometry made of 2 triangles\n * const geometry = new Geometry()\n *\n * geometry.setAttribute({\n *   name: 'position',\n *   type: 'vec3f',\n *   bufferFormat: 'float32x3',\n *   size: 3,\n *   bufferLength: vertices.length,\n *   array: vertices,\n * })\n * ```\n */\nexport class Geometry {\n  /** Number of vertices defined by this geometry */\n  verticesCount: number\n  /** Vertices order to be drawn by the {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry | render pipeline} */\n  verticesOrder: GPUFrontFace\n  /** {@link https://www.w3.org/TR/webgpu/#enumdef-gpuprimitivetopology | Topology} to use with this {@link Geometry}, i.e. whether to draw triangles or points */\n  topology: GPUPrimitiveTopology\n  /** Number of instances of this geometry to draw */\n  instancesCount: number\n  /** Array of {@link VertexBuffer | vertex buffers} to use with this geometry */\n  vertexBuffers: VertexBuffer[]\n  /** Options used to create this geometry */\n  options: GeometryOptions\n  /** The type of the geometry */\n  type: string\n  /** The universal unique id of the geometry */\n  uuid: string\n\n  /** Allow to draw this {@link Geometry} with an {@link extras/buffers/IndirectBuffer.IndirectBuffer | IndirectBuffer} if set. */\n  indirectDraw: IndirectDrawParams | null\n\n  /** The bounding box of the geometry, i.e. two {@link math/Vec3.Vec3 | Vec3} defining the min and max positions to wrap this geometry in a cube */\n  boundingBox: Box3\n\n  /** A string to append to our shaders code describing the WGSL structure representing this geometry attributes */\n  wgslStructFragment: string\n\n  /** A string representing the {@link vertexBuffers} layout, used for pipelines caching */\n  layoutCacheKey: string\n\n  /** A Set to store this {@link Geometry} consumers (Mesh uuid) */\n  consumers: Set<string>\n\n  /** Whether this geometry is ready to be drawn, i.e. it has been computed and all its vertex buffers have been created */\n  ready: boolean\n\n  /**\n   * Geometry constructor\n   * @param parameters - {@link GeometryParams | parameters} used to create our Geometry\n   */\n  constructor({\n    verticesOrder = 'ccw',\n    topology = 'triangle-list',\n    instancesCount = 1,\n    vertexBuffers = [],\n    mapBuffersAtCreation = true,\n  }: GeometryParams = {}) {\n    this.verticesCount = 0\n    this.verticesOrder = verticesOrder\n    this.topology = topology\n    this.instancesCount = instancesCount\n\n    this.ready = false\n\n    this.boundingBox = new Box3()\n\n    this.type = 'Geometry'\n    this.uuid = generateUUID()\n\n    this.indirectDraw = null\n\n    this.vertexBuffers = []\n\n    this.consumers = new Set()\n\n    this.options = {\n      verticesOrder,\n      topology,\n      instancesCount,\n      vertexBuffers,\n      mapBuffersAtCreation,\n    }\n\n    // create a default 'attributes' vertex buffer if it has not been passed as parameter\n    // should contain our vertex position / uv data at least\n    const attributesBuffer = vertexBuffers.find((vertexBuffer) => vertexBuffer.name === 'attributes')\n    if (!vertexBuffers.length || !attributesBuffer) {\n      this.addVertexBuffer({\n        name: 'attributes',\n      })\n    } else if (attributesBuffer) {\n      // always put attributes vertex buffer first\n      vertexBuffers.sort((a, b) => {\n        const aIndex = a.name !== 'attributes' ? Infinity : -1\n        const bIndex = b.name !== 'attributes' ? Infinity : -1\n\n        return aIndex - bIndex\n      })\n    }\n\n    for (const vertexBuffer of vertexBuffers) {\n      this.addVertexBuffer({\n        stepMode: vertexBuffer.stepMode ?? 'vertex',\n        name: vertexBuffer.name,\n        attributes: vertexBuffer.attributes,\n        ...(vertexBuffer.array && { array: vertexBuffer.array }),\n        ...(vertexBuffer.buffer && { buffer: vertexBuffer.buffer }),\n        ...(vertexBuffer.bufferOffset && { bufferOffset: vertexBuffer.bufferOffset }),\n        ...(vertexBuffer.bufferSize && { bufferSize: vertexBuffer.bufferSize }),\n      })\n    }\n\n    // TODO or use a param instead?\n    // remember if attributesBuffer already has an array, the geometry won't be computed\n    if (attributesBuffer) {\n      this.setWGSLFragment()\n    }\n  }\n\n  /**\n   * Reset all the {@link vertexBuffers | vertex buffers} when the device is lost\n   */\n  loseContext() {\n    this.ready = false\n\n    for (const vertexBuffer of this.vertexBuffers) {\n      vertexBuffer.buffer.destroy()\n    }\n  }\n\n  /**\n   * Restore the {@link Geometry} buffers on context restoration\n   * @param renderer - The {@link Renderer} used to recreate the buffers\n   */\n  restoreContext(renderer: Renderer) {\n    // do not try to recreate buffers of a geometry that has already been restored\n    if (this.ready) return\n\n    for (const vertexBuffer of this.vertexBuffers) {\n      // do not try to restore a buffer created elsewhere initially (a compute pass for example)\n      if (!vertexBuffer.buffer.GPUBuffer && vertexBuffer.buffer.consumers.size === 0) {\n        vertexBuffer.buffer.createBuffer(renderer)\n\n        this.uploadBuffer(renderer, vertexBuffer)\n      }\n\n      vertexBuffer.buffer.consumers.add(this.uuid)\n    }\n\n    this.ready = true\n  }\n\n  /**\n   * Add a vertex buffer to our Geometry, set its attributes and return it\n   * @param parameters - vertex buffer {@link VertexBufferParams | parameters}\n   * @returns - newly created {@link VertexBuffer | vertex buffer}\n   */\n  addVertexBuffer({\n    stepMode = 'vertex',\n    name,\n    attributes = [],\n    buffer = null,\n    array = null,\n    bufferOffset = 0,\n    bufferSize = null,\n  }: VertexBufferParams = {}): VertexBuffer {\n    buffer = buffer || new Buffer()\n\n    const vertexBuffer = {\n      name: name ?? 'attributes' + this.vertexBuffers.length,\n      stepMode,\n      arrayStride: 0,\n      bufferLength: 0,\n      attributes: [],\n      buffer,\n      array,\n      bufferOffset,\n      bufferSize,\n    }\n\n    // set attributes right away if possible\n    attributes?.forEach((attribute) => {\n      this.setAttribute({\n        vertexBuffer,\n        ...attribute,\n      } as VertexBufferAttributeParams)\n    })\n\n    this.vertexBuffers.push(vertexBuffer)\n\n    return vertexBuffer\n  }\n\n  /**\n   * Get a vertex buffer by name\n   * @param name - our vertex buffer name\n   * @returns - found {@link VertexBuffer | vertex buffer} or null if not found\n   */\n  getVertexBufferByName(name = ''): VertexBuffer | null {\n    return this.vertexBuffers.find((vertexBuffer) => vertexBuffer.name === name)\n  }\n\n  /**\n   * Set a vertex buffer attribute\n   * @param parameters - attributes {@link VertexBufferAttributeParams | parameters}\n   */\n  setAttribute({\n    vertexBuffer = this.vertexBuffers[0],\n    name,\n    type = 'vec3f',\n    bufferFormat = 'float32x3',\n    size = 3,\n    array = new Float32Array(this.verticesCount * size),\n    verticesStride = 1,\n  }: VertexBufferAttributeParams) {\n    const attributes = vertexBuffer.attributes\n    const attributesLength = attributes.length\n\n    if (!name) name = 'geometryAttribute' + attributesLength\n\n    if (name === 'position' && (type !== 'vec3f' || bufferFormat !== 'float32x3' || size !== 3)) {\n      throwWarning(\n        `Geometry 'position' attribute must have this exact properties set:\\n\\ttype: 'vec3f',\\n\\tbufferFormat: 'float32x3',\\n\\tsize: 3`\n      )\n      type = 'vec3f'\n      bufferFormat = 'float32x3'\n      size = 3\n    }\n\n    let arrayLength = array.length\n    const attributeCount = arrayLength / size\n\n    if (name === 'position') {\n      this.verticesCount = attributeCount\n    }\n\n    if (\n      vertexBuffer.stepMode === 'vertex' &&\n      this.verticesCount &&\n      this.verticesCount !== attributeCount * verticesStride\n    ) {\n      throwError(\n        `Geometry vertex attribute error. Attribute array of size ${size} must be of length: ${\n          this.verticesCount * size\n        }, current given: ${array.length}. (${this.verticesCount} vertices).`\n      )\n    } else if (vertexBuffer.stepMode === 'instance' && attributeCount !== this.instancesCount) {\n      if (vertexBuffer.buffer) {\n        arrayLength = this.instancesCount * size\n      } else {\n        throwError(\n          `Geometry instance attribute error. Attribute array of size ${size} must be of length: ${\n            this.instancesCount * size\n          }, current given: ${array.length}. (${this.instancesCount} instances).`\n        )\n      }\n    }\n\n    // TODO we could force the use of a bufferOffset to 0\n    // and use an offset inside the setVertexBuffer call instead\n    // it might be needed in some edge cases with glTF geometries\n    // see https://toji.dev/webgpu-gltf-case-study/#handling-large-attribute-offsets\n    const attribute = {\n      name,\n      type,\n      bufferFormat,\n      size,\n      bufferLength: arrayLength,\n      offset: attributesLength\n        ? attributes.reduce((accumulator: number, currentValue) => {\n            return accumulator + currentValue.bufferLength\n          }, 0)\n        : 0,\n      bufferOffset: attributesLength\n        ? attributes[attributesLength - 1].bufferOffset + attributes[attributesLength - 1].size * 4\n        : 0,\n      array,\n      verticesStride: verticesStride,\n    }\n\n    vertexBuffer.bufferLength += attribute.bufferLength * verticesStride\n    vertexBuffer.arrayStride += attribute.size\n    vertexBuffer.attributes.push(attribute)\n  }\n\n  /**\n   * Get whether this Geometry is ready to compute, i.e. if its first vertex buffer array has not been created yet\n   * @readonly\n   */\n  get shouldCompute(): boolean {\n    return this.vertexBuffers.length && !this.vertexBuffers[0].array\n  }\n\n  /**\n   * Get an attribute by name\n   * @param name - name of the attribute to find\n   * @returns - found {@link VertexBufferAttribute | attribute} or null if not found\n   */\n  getAttributeByName(name: string): VertexBufferAttribute | null {\n    let attribute\n\n    for (const vertexBuffer of this.vertexBuffers) {\n      attribute = vertexBuffer.attributes.find((attribute) => attribute.name === name)\n      if (attribute) break // Exit once we find the matching attribute\n    }\n\n    return attribute\n  }\n\n  /**\n   * Compute a Geometry, which means iterate through all vertex buffers and create the attributes array that will be sent as buffers.\n   * Also compute the Geometry bounding box.\n   */\n  computeGeometry() {\n    if (this.ready) return\n\n    this.vertexBuffers.forEach((vertexBuffer, index) => {\n      if (index === 0) {\n        const hasPositionAttribute = vertexBuffer.attributes.find(\n          (attribute) => attribute.name === 'position'\n        ) as VertexBufferAttribute | null\n\n        if (!hasPositionAttribute) {\n          throwError(`Geometry must have a 'position' attribute`)\n        }\n\n        if (\n          hasPositionAttribute.type !== 'vec3f' ||\n          hasPositionAttribute.bufferFormat !== 'float32x3' ||\n          hasPositionAttribute.size !== 3\n        ) {\n          throwWarning(\n            `Geometry 'position' attribute must have this exact properties set:\\n\\ttype: 'vec3f',\\n\\tbufferFormat: 'float32x3',\\n\\tsize: 3`\n          )\n          hasPositionAttribute.type = 'vec3f'\n          hasPositionAttribute.bufferFormat = 'float32x3'\n          hasPositionAttribute.size = 3\n        }\n      }\n\n      vertexBuffer.array = new Float32Array(vertexBuffer.bufferLength)\n\n      let currentIndex = 0\n      let attributeIndex = 0\n      for (let i = 0; i < vertexBuffer.bufferLength; i += vertexBuffer.arrayStride) {\n        for (let j = 0; j < vertexBuffer.attributes.length; j++) {\n          const { name, size, array, verticesStride } = vertexBuffer.attributes[j]\n\n          for (let s = 0; s < size; s++) {\n            const attributeValue = array[Math.floor(attributeIndex / verticesStride) * size + s]\n            vertexBuffer.array[currentIndex] = attributeValue ?? 0\n\n            // compute bounding box\n            if (name === 'position') {\n              if (s % 3 === 0) {\n                // x\n                if (this.boundingBox.min.x > attributeValue) this.boundingBox.min.x = attributeValue\n                if (this.boundingBox.max.x < attributeValue) this.boundingBox.max.x = attributeValue\n              } else if (s % 3 === 1) {\n                // y\n                if (this.boundingBox.min.y > attributeValue) this.boundingBox.min.y = attributeValue\n                if (this.boundingBox.max.y < attributeValue) this.boundingBox.max.y = attributeValue\n              } else if (s % 3 === 2) {\n                // z\n                if (this.boundingBox.min.z > attributeValue) this.boundingBox.min.z = attributeValue\n                if (this.boundingBox.max.z < attributeValue) this.boundingBox.max.z = attributeValue\n              }\n            }\n\n            currentIndex++\n          }\n        }\n\n        attributeIndex++\n      }\n    })\n\n    if (!this.wgslStructFragment) {\n      this.setWGSLFragment()\n    }\n  }\n\n  /**\n   * Set the WGSL code snippet that will be appended to the vertex shader.\n   */\n  setWGSLFragment() {\n    let locationIndex = -1\n    this.wgslStructFragment = `struct Attributes {\\n\\t@builtin(vertex_index) vertexIndex : u32,\\n\\t@builtin(instance_index) instanceIndex : u32,${this.vertexBuffers\n      .map((vertexBuffer) => {\n        return vertexBuffer.attributes.map((attribute) => {\n          locationIndex++\n          return `\\n\\t@location(${locationIndex}) ${attribute.name}: ${attribute.type}`\n        })\n      })\n      .join(',')}\\n};`\n\n    // TODO use for pipeline caching\n    this.layoutCacheKey =\n      this.vertexBuffers\n        .map((vertexBuffer) => {\n          return (\n            vertexBuffer.name +\n            ',' +\n            vertexBuffer.attributes.map((attribute) => {\n              return `${attribute.name},${attribute.size}`\n            })\n          )\n        })\n        .join(',') + ','\n  }\n\n  /**\n   * Create the {@link Geometry} {@link vertexBuffers | vertex buffers}.\n   * @param parameters - parameters used to create the vertex buffers.\n   * @param parameters.renderer - {@link Renderer} used to create the vertex buffers.\n   * @param parameters.label - label to use for the vertex buffers.\n   */\n  createBuffers({ renderer, label = this.type }: { renderer: Renderer; label?: string }) {\n    if (this.ready) return\n\n    for (const vertexBuffer of this.vertexBuffers) {\n      if (!vertexBuffer.bufferSize) {\n        vertexBuffer.bufferSize =\n          vertexBuffer.array.length * (vertexBuffer.array.constructor as TypedArrayConstructor).BYTES_PER_ELEMENT\n      }\n\n      if (!vertexBuffer.buffer.GPUBuffer && !vertexBuffer.buffer.consumers.size) {\n        vertexBuffer.buffer.createBuffer(renderer, {\n          label: label + ': ' + vertexBuffer.name + ' buffer',\n          size: vertexBuffer.bufferSize,\n          usage: this.options.mapBuffersAtCreation ? ['vertex'] : ['copyDst', 'vertex'],\n          mappedAtCreation: this.options.mapBuffersAtCreation,\n        })\n\n        this.uploadBuffer(renderer, vertexBuffer)\n      }\n\n      vertexBuffer.buffer.consumers.add(this.uuid)\n    }\n\n    this.ready = true\n  }\n\n  /**\n   * Upload a {@link GeometryBuffer} to the GPU.\n   * @param renderer - {@link Renderer} used to upload the buffer.\n   * @param buffer - {@link GeometryBuffer} holding a {@link Buffer} and a typed array to upload.\n   */\n  uploadBuffer(renderer: Renderer, buffer: GeometryBuffer) {\n    if (this.options.mapBuffersAtCreation) {\n      new (buffer.array.constructor as TypedArrayConstructor)(buffer.buffer.GPUBuffer.getMappedRange()).set(\n        buffer.array\n      )\n\n      buffer.buffer.GPUBuffer.unmap()\n    } else {\n      renderer.queueWriteBuffer(buffer.buffer.GPUBuffer, 0, buffer.array)\n    }\n  }\n\n  /**\n   * Set the {@link indirectDraw} parameters to draw this {@link Geometry} with an {@link extras/buffers/IndirectBuffer.IndirectBuffer | IndirectBuffer}.\n   * @param parameters -  {@link IndirectDrawParams | indirect draw parameters} to use for this {@link Geometry}.\n   */\n  useIndirectBuffer({ buffer, offset = 0 }: IndirectDrawParams) {\n    this.indirectDraw = {\n      buffer,\n      offset,\n    }\n  }\n\n  /** RENDER **/\n\n  /**\n   * Set our render pass geometry vertex buffers\n   * @param pass - current render pass\n   */\n  setGeometryBuffers(pass: GPURenderPassTypes) {\n    this.vertexBuffers.forEach((vertexBuffer, index) => {\n      pass.setVertexBuffer(index, vertexBuffer.buffer.GPUBuffer, vertexBuffer.bufferOffset, vertexBuffer.bufferSize)\n    })\n  }\n\n  /**\n   * Draw our geometry. Can use indirect drawing if {@link indirectDraw} is set up.\n   * @param pass - current render pass.\n   */\n  drawGeometry(pass: GPURenderPassTypes) {\n    if (this.indirectDraw && this.indirectDraw.buffer && this.indirectDraw.buffer.GPUBuffer) {\n      pass.drawIndirect(this.indirectDraw.buffer.GPUBuffer, this.indirectDraw.offset)\n    } else {\n      pass.draw(this.verticesCount, this.instancesCount)\n    }\n  }\n\n  /**\n   * Set our vertex buffers then draw the geometry.\n   * @param pass - current render pass.\n   */\n  render(pass: GPURenderPassTypes) {\n    if (!this.ready) return\n\n    this.setGeometryBuffers(pass)\n    this.drawGeometry(pass)\n  }\n\n  /**\n   * Destroy our geometry vertex buffers.\n   * @param renderer - current {@link Renderer}, in case we want to remove the {@link VertexBuffer#buffer | buffers} from the cache.\n   */\n  destroy(renderer: null | Renderer = null) {\n    this.ready = false\n\n    for (const vertexBuffer of this.vertexBuffers) {\n      vertexBuffer.buffer.consumers.delete(this.uuid)\n      if (!vertexBuffer.buffer.consumers.size) {\n        vertexBuffer.buffer.destroy()\n      }\n\n      vertexBuffer.array = null\n\n      if (renderer) renderer.removeBuffer(vertexBuffer.buffer)\n    }\n  }\n}\n","import { Geometry } from './Geometry'\r\nimport { GeometryBuffer, GeometryParams } from '../../types/Geometries'\r\nimport { Buffer } from '../buffers/Buffer'\r\nimport { Renderer } from '../renderers/utils'\r\nimport { TypedArrayConstructor } from '../bindings/utils'\r\nimport { GPURenderPassTypes } from '../pipelines/PipelineManager'\r\n\r\n/**\r\n * Defines the available options to create an {@link IndexedGeometry#indexBuffer | index buffer}\r\n */\r\nexport interface IndexedGeometryIndexBufferOptions extends Partial<GeometryBuffer> {\r\n  /** index buffer format */\r\n  bufferFormat?: GPUIndexFormat\r\n  /** index buffer array */\r\n  array?: Uint16Array | Uint32Array\r\n}\r\n\r\n/**\r\n * Defines an {@link IndexedGeometry#indexBuffer | index buffer}\r\n */\r\nexport interface IndexBuffer extends GeometryBuffer {\r\n  /** index buffer format */\r\n  bufferFormat: GPUIndexFormat\r\n  /** index buffer array */\r\n  array: Uint16Array | Uint32Array\r\n  /** index buffer length */\r\n  bufferLength: number\r\n}\r\n\r\n/**\r\n * Used to create an {@link IndexedGeometry} which holds an index array to use as an index buffer.\r\n *\r\n * The index array represents the order in which the attributes should be processed. This allows to create smaller vertex, uv and normal arrays.\r\n *\r\n * During the {@link IndexedGeometry#render | render}, the {@link IndexedGeometry} is responsible for setting the {@link IndexedGeometry#vertexBuffers | vertexBuffers} and drawing the indexed vertices.\r\n *\r\n * @example\r\n * ```javascript\r\n * const vertices = new Float32Array([\r\n *   -1, -1,  0,\r\n *    1, -1,  0,\r\n *   -1,  1,  0,\r\n *    1,  1,  0\r\n * ])\r\n *\r\n * // vertices index (order in which they should be drawn)\r\n * const indexArray = new Uint16Array([0, 2, 1, 1, 2, 3])\r\n *\r\n * // create an indexed quad geometry made of 4 vertices\r\n * const indexedGeometry = new IndexedGeometry()\r\n *\r\n * indexedGeometry.setAttribute({\r\n *   name: 'position',\r\n *   type: 'vec3f',\r\n *   bufferFormat: 'float32x3',\r\n *   size: 3,\r\n *   bufferLength: vertices.length,\r\n *   array: vertices,\r\n * })\r\n *\r\n * indexedGeometry.setIndexBuffer({\r\n *   array: indexArray,\r\n *   bufferFormat: 'uint16',\r\n * })\r\n * ```\r\n */\r\nexport class IndexedGeometry extends Geometry {\r\n  /** Object containing our index buffer format & length, array and GPUBuffer */\r\n  indexBuffer: IndexBuffer\r\n\r\n  /**\r\n   * IndexedGeometry constructor\r\n   * @param parameters - {@link GeometryParams | parameters} used to create our IndexedGeometry\r\n   */\r\n  constructor({\r\n    verticesOrder = 'ccw',\r\n    topology = 'triangle-list',\r\n    instancesCount = 1,\r\n    vertexBuffers = [],\r\n    mapBuffersAtCreation = true,\r\n  }: GeometryParams = {}) {\r\n    super({ verticesOrder, topology, instancesCount, vertexBuffers, mapBuffersAtCreation })\r\n\r\n    this.type = 'IndexedGeometry'\r\n  }\r\n\r\n  /**\r\n   * Reset all the {@link vertexBuffers | vertex buffers} and {@link indexBuffer | index buffer} when the device is lost\r\n   */\r\n  loseContext() {\r\n    super.loseContext()\r\n\r\n    if (this.indexBuffer) {\r\n      this.indexBuffer.buffer.destroy()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore the {@link IndexedGeometry} buffers on context restoration\r\n   * @param renderer - The {@link Renderer} used to recreate the buffers\r\n   */\r\n  restoreContext(renderer: Renderer) {\r\n    if (this.ready) return\r\n\r\n    if (!this.indexBuffer.buffer.GPUBuffer) {\r\n      this.indexBuffer.buffer.createBuffer(renderer)\r\n\r\n      this.uploadBuffer(renderer, this.indexBuffer)\r\n\r\n      this.indexBuffer.buffer.consumers.add(this.uuid)\r\n    }\r\n\r\n    super.restoreContext(renderer)\r\n  }\r\n\r\n  /**\r\n   * If we have less than 65.536 vertices, we should use a Uin16Array to hold our index buffer values\r\n   * @readonly\r\n   */\r\n  get useUint16IndexArray(): boolean {\r\n    return this.verticesCount < 256 * 256\r\n  }\r\n\r\n  /**\r\n   * Set our {@link indexBuffer}\r\n   * @param parameters - {@link IndexedGeometryIndexBufferOptions | parameters} used to create our index buffer\r\n   */\r\n  setIndexBuffer({\r\n    bufferFormat = 'uint32',\r\n    array = new Uint32Array(0),\r\n    buffer = new Buffer(),\r\n    bufferOffset = 0,\r\n    bufferSize = null,\r\n  }: IndexedGeometryIndexBufferOptions) {\r\n    this.indexBuffer = {\r\n      array,\r\n      bufferFormat,\r\n      bufferLength: array.length,\r\n      buffer,\r\n      bufferOffset,\r\n      bufferSize:\r\n        bufferSize !== null\r\n          ? bufferSize\r\n          : array.length * (array.constructor as TypedArrayConstructor).BYTES_PER_ELEMENT,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the {@link Geometry} {@link vertexBuffers | vertex buffers} and {@link indexBuffer | index buffer}.\r\n   * @param parameters - parameters used to create the vertex buffers.\r\n   * @param parameters.renderer - {@link Renderer} used to create the vertex buffers.\r\n   * @param parameters.label - label to use for the vertex buffers.\r\n   */\r\n  createBuffers({ renderer, label = this.type }: { renderer: Renderer; label?: string }) {\r\n    if (!this.indexBuffer.buffer.GPUBuffer) {\r\n      this.indexBuffer.buffer.createBuffer(renderer, {\r\n        label: label + ': index buffer',\r\n        size: this.indexBuffer.array.byteLength,\r\n        usage: this.options.mapBuffersAtCreation ? ['index'] : ['copyDst', 'index'],\r\n        mappedAtCreation: this.options.mapBuffersAtCreation,\r\n      })\r\n\r\n      this.uploadBuffer(renderer, this.indexBuffer)\r\n    }\r\n\r\n    this.indexBuffer.buffer.consumers.add(this.uuid)\r\n\r\n    super.createBuffers({ renderer, label })\r\n  }\r\n\r\n  /** RENDER **/\r\n\r\n  /**\r\n   * First, set our render pass geometry vertex buffers\r\n   * Then, set our render pass geometry index buffer\r\n   * @param pass - current render pass\r\n   */\r\n  setGeometryBuffers(pass: GPURenderPassTypes) {\r\n    super.setGeometryBuffers(pass)\r\n\r\n    pass.setIndexBuffer(\r\n      this.indexBuffer.buffer.GPUBuffer,\r\n      this.indexBuffer.bufferFormat,\r\n      this.indexBuffer.bufferOffset,\r\n      this.indexBuffer.bufferSize\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Draw our indexed geometry. Can use indirect drawing if {@link indirectDraw} is set up.\r\n   * @param pass - current render pass.\r\n   */\r\n  drawGeometry(pass: GPURenderPassTypes) {\r\n    if (this.indirectDraw && this.indirectDraw.buffer && this.indirectDraw.buffer.GPUBuffer) {\r\n      pass.drawIndexedIndirect(this.indirectDraw.buffer.GPUBuffer, this.indirectDraw.offset)\r\n    } else {\r\n      pass.drawIndexed(this.indexBuffer.bufferLength, this.instancesCount)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy our indexed geometry vertex buffers and index buffer.\r\n   * @param renderer - current {@link Renderer}, in case we want to remove the {@link IndexBuffer#buffer | buffer} from the cache.\r\n   */\r\n  destroy(renderer: null | Renderer = null) {\r\n    super.destroy(renderer)\r\n\r\n    if (this.indexBuffer) {\r\n      this.indexBuffer.buffer.consumers.delete(this.uuid)\r\n      this.indexBuffer.buffer.destroy()\r\n      if (renderer) renderer.removeBuffer(this.indexBuffer.buffer)\r\n    }\r\n  }\r\n}\r\n","import { IndexedGeometry } from './IndexedGeometry'\r\nimport { Geometry } from './Geometry'\r\nimport { GeometryBaseParams, VertexBufferAttributeParams } from '../../types/Geometries'\r\n\r\n/**\r\n * Parameters used to create a {@link PlaneGeometry}\r\n */\r\nexport interface PlaneGeometryParams extends GeometryBaseParams {\r\n  /** Number of segments along the X axis */\r\n  widthSegments?: number\r\n  /** Number of segments along the Y axis */\r\n  heightSegments?: number\r\n}\r\n\r\n/**\r\n * Used to create an indexed plane geometry based on the number of segments along the X and Y axis.\r\n *\r\n * This is how it will look for a 3x2 quad. Indexing will take care of drawing the right vertices in the right order.\r\n *\r\n * <pre>\r\n *  3---2---1---0\r\n *  |  /|  /|  /|\r\n *  |/  |/  |/  |\r\n *  7---6---5---4\r\n *  |  /|  /|  /|\r\n *  |/  |/  |/  |\r\n *  11--10--9---8\r\n * </pre>\r\n *\r\n * @example\r\n * ```javascript\r\n * const planeGeometry = new PlaneGeometry()\r\n * ```\r\n */\r\nexport class PlaneGeometry extends IndexedGeometry {\r\n  /**\r\n   * Defines our {@link PlaneGeometry} definition based on the provided {@link PlaneGeometryParams | parameters}\r\n   */\r\n  definition: {\r\n    /** unique id based on width and height segments, used to get {@link PlaneGeometry} from cache */\r\n    id: number\r\n    /** number of segments along the X axis */\r\n    width: number\r\n    /** number of segments along the Y axis */\r\n    height: number\r\n    /** total number of segments */\r\n    count: number\r\n  }\r\n\r\n  /**\r\n   * PlaneGeometry constructor\r\n   * @param parameters - {@link PlaneGeometryParams | parameters} used to create our PlaneGeometry\r\n   */\r\n  constructor({\r\n    widthSegments = 1,\r\n    heightSegments = 1,\r\n    instancesCount = 1,\r\n    vertexBuffers = [],\r\n    topology,\r\n  }: PlaneGeometryParams = {}) {\r\n    super({ verticesOrder: 'ccw', topology, instancesCount, vertexBuffers, mapBuffersAtCreation: true })\r\n\r\n    this.type = 'PlaneGeometry'\r\n\r\n    widthSegments = Math.floor(widthSegments)\r\n    heightSegments = Math.floor(heightSegments)\r\n\r\n    // unique plane geometry id based on width and height\r\n    // used to get a geometry from cache\r\n    this.definition = {\r\n      id: widthSegments * heightSegments + widthSegments,\r\n      width: widthSegments,\r\n      height: heightSegments,\r\n      count: widthSegments * heightSegments,\r\n    }\r\n\r\n    const verticesCount = (this.definition.width + 1) * (this.definition.height + 1)\r\n    const attributes = this.getIndexedVerticesAndUVs(verticesCount)\r\n\r\n    for (const attribute of Object.values(attributes)) {\r\n      this.setAttribute(attribute as VertexBufferAttributeParams)\r\n    }\r\n\r\n    this.setIndexArray()\r\n  }\r\n\r\n  /**\r\n   * Set our PlaneGeometry index array\r\n   */\r\n  setIndexArray() {\r\n    const indexArray = this.useUint16IndexArray\r\n      ? new Uint16Array(this.definition.count * 6)\r\n      : new Uint32Array(this.definition.count * 6)\r\n\r\n    let index = 0\r\n\r\n    for (let y = 0; y < this.definition.height; y++) {\r\n      for (let x = 0; x < this.definition.width; x++) {\r\n        indexArray[index++] = x + y * (this.definition.width + 1)\r\n        indexArray[index++] = this.definition.width + x + 1 + y * (this.definition.width + 1)\r\n        indexArray[index++] = x + 1 + y * (this.definition.width + 1)\r\n\r\n        indexArray[index++] = x + 1 + y * (this.definition.width + 1)\r\n        indexArray[index++] = this.definition.width + x + 1 + y * (this.definition.width + 1)\r\n        indexArray[index++] = this.definition.width + x + 2 + y * (this.definition.width + 1)\r\n      }\r\n    }\r\n\r\n    this.setIndexBuffer({\r\n      array: indexArray,\r\n      bufferFormat: this.useUint16IndexArray ? 'uint16' : 'uint32',\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Compute the UV and position arrays based on our plane widthSegments and heightSegments values and return the corresponding attributes\r\n   * @param verticesCount - {@link Geometry#verticesCount | number of vertices} of our {@link PlaneGeometry}\r\n   * @returns - our position and uv {@link VertexBufferAttributeParams | attributes}\r\n   */\r\n  getIndexedVerticesAndUVs(verticesCount: Geometry['verticesCount']): Record<string, VertexBufferAttributeParams> {\r\n    // geometry vertices and UVs\r\n    const uv = {\r\n      name: 'uv',\r\n      type: 'vec2f',\r\n      bufferFormat: 'float32x2',\r\n      size: 2,\r\n      array: new Float32Array(verticesCount * 2),\r\n    }\r\n\r\n    const position = {\r\n      name: 'position',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      // nb of triangles * 3 vertices per triangle * 3 coordinates per triangle\r\n      size: 3,\r\n      array: new Float32Array(verticesCount * 3),\r\n    }\r\n\r\n    const normal = {\r\n      name: 'normal',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      // nb of triangles * 3 vertices per triangle * 3 coordinates per triangle\r\n      size: 3,\r\n      array: new Float32Array(verticesCount * 3),\r\n    }\r\n\r\n    let positionOffset = 0\r\n    let normalOffset = 0\r\n    let uvOffset = 0\r\n\r\n    // this is how it will look for a 3x2 quad\r\n    // indexing will take care of drawing the right vertices at the right time\r\n    // remember we're using counter clockwise ordering\r\n    // 3---2---1---0\r\n    // | //| //| //|\r\n    // |// |// |// |\r\n    // 7---6---5---4\r\n    // | //| //| //|\r\n    // |// |// |// |\r\n    // 11--10--9---8\r\n\r\n    for (let y = 0; y <= this.definition.height; y++) {\r\n      for (let x = 0; x <= this.definition.width; x++) {\r\n        // uv\r\n        uv.array[uvOffset++] = 1 - x / this.definition.width\r\n        uv.array[uvOffset++] = 1 - y / this.definition.height\r\n\r\n        // vertex position\r\n        position.array[positionOffset++] = 1 - (x * 2) / this.definition.width\r\n        position.array[positionOffset++] = (y * 2) / this.definition.height - 1\r\n        position.array[positionOffset++] = 0\r\n\r\n        // normals are simple\r\n        normal.array[normalOffset++] = 0\r\n        normal.array[normalOffset++] = 0\r\n        normal.array[normalOffset++] = 1\r\n      }\r\n    }\r\n\r\n    return { position, uv, normal } as Record<string, VertexBufferAttributeParams>\r\n  }\r\n}\r\n","import { Vec3 } from '../../math/Vec3'\r\nimport { CameraRenderer, isCameraRenderer } from '../renderers/utils'\r\nimport { BufferBinding } from '../bindings/BufferBinding'\r\nimport { Object3D } from '../objects3D/Object3D'\r\nimport { generateUUID } from '../../utils/utils'\r\nimport { DirectionalLight } from './DirectionalLight'\r\nimport { PointLight } from './PointLight'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\n\r\n/** Defines all types of lights. */\r\nexport type LightsType = 'ambientLights' | 'directionalLights' | 'pointLights'\r\n/** Defines all types of shadow casting lights. */\r\nexport type ShadowCastingLights = DirectionalLight | PointLight\r\n\r\n/**\r\n * Base parameters used to create a {@link Light}.\r\n */\r\nexport interface LightBaseParams {\r\n  /** The {@link Light} color. Default to `Vec3(1)`. */\r\n  color?: Vec3\r\n  /** The {@link Light} intensity. Default to `1`. */\r\n  intensity?: number\r\n}\r\n\r\n/**\r\n * Parameters used to create a {@link Light}.\r\n */\r\nexport interface LightParams extends LightBaseParams {\r\n  /** Index of this {@link Light}, i.e. the number of time a {@link Light} of this type has been created. */\r\n  type?: string | LightsType\r\n}\r\n\r\n/**\r\n * Used as a base class to create a light.\r\n */\r\nexport class Light extends Object3D {\r\n  /** {@link LightsType | Type of the light}. */\r\n  type: string | LightsType\r\n  /** The universal unique id of this {@link Light} */\r\n  readonly uuid: string\r\n  /** Index of this {@link Light}, i.e. the number of time a {@link Light} of this type has been created. */\r\n  index: number\r\n  /** {@link CameraRenderer} used by this {@link Light} */\r\n  renderer: CameraRenderer\r\n\r\n  /** Options used to create this {@link Light}. */\r\n  options: LightBaseParams\r\n\r\n  /** Current {@link Vec3 | color} of this {@link Light}. */\r\n  color: Vec3\r\n  /** @ignore */\r\n  #intensity: number\r\n  /**\r\n   * A {@link Vec3} holding the {@link Light} {@link color} multiplied by its {@link intensity}.\r\n   * @private\r\n   */\r\n  #intensityColor: Vec3\r\n\r\n  /** {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding} that holds all the bindings to send to the shaders. */\r\n  rendererBinding: BufferBinding | null\r\n\r\n  /**\r\n   * Light constructor\r\n   * @param renderer - {@link CameraRenderer} used to create this {@link Light}.\r\n   * @param parameters - {@link LightParams | parameters} used to create this {@link Light}.\r\n   */\r\n  constructor(\r\n    renderer: CameraRenderer | GPUCurtains,\r\n    { color = new Vec3(1), intensity = 1, type = 'lights' } = {} as LightParams\r\n  ) {\r\n    super()\r\n\r\n    this.type = type\r\n\r\n    this.setRenderer(renderer)\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    this.options = {\r\n      color,\r\n      intensity,\r\n    }\r\n\r\n    this.color = color\r\n    this.#intensityColor = this.color.clone()\r\n    this.color.onChange(() =>\r\n      this.onPropertyChanged('color', this.#intensityColor.copy(this.color).multiplyScalar(this.intensity))\r\n    )\r\n\r\n    this.intensity = intensity\r\n  }\r\n\r\n  /**\r\n   * Set or reset this light {@link CameraRenderer}.\r\n   * @param renderer - New {@link CameraRenderer} or {@link GPUCurtains} instance to use.\r\n   */\r\n  setRenderer(renderer: CameraRenderer | GPUCurtains) {\r\n    const hasRenderer = !!this.renderer\r\n\r\n    // if there's already a renderer, remove light\r\n    if (this.renderer) {\r\n      this.renderer.removeLight(this)\r\n    }\r\n\r\n    // set new renderer\r\n    renderer = isCameraRenderer(renderer, this.constructor.name)\r\n    this.renderer = renderer\r\n\r\n    this.index = this.renderer.lights.filter((light) => light.type === this.type).length\r\n\r\n    // check for overflow\r\n    if (this.index + 1 > this.renderer.lightsBindingParams[this.type].max) {\r\n      this.onMaxLightOverflow(this.type as LightsType)\r\n    }\r\n\r\n    // add light back\r\n    this.renderer.addLight(this)\r\n\r\n    // reset binding\r\n    this.setRendererBinding()\r\n\r\n    if (hasRenderer) {\r\n      this.reset()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set or reset this {@link Light} {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\r\n   */\r\n  setRendererBinding() {\r\n    if (this.renderer.bindings[this.type]) {\r\n      this.rendererBinding = this.renderer.bindings[this.type]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resend all properties to the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}. Called when the maximum number of corresponding {@link Light} has been overflowed.\r\n   */\r\n  reset() {\r\n    this.setRendererBinding()\r\n    this.onPropertyChanged('color', this.#intensityColor.copy(this.color).multiplyScalar(this.intensity))\r\n  }\r\n\r\n  /**\r\n   * Get this {@link Light} intensity.\r\n   * @returns - The {@link Light} intensity.\r\n   */\r\n  get intensity(): number {\r\n    return this.#intensity\r\n  }\r\n\r\n  /**\r\n   * Set this {@link Light} intensity and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\r\n   * @param value - The new {@link Light} intensity.\r\n   */\r\n  set intensity(value: number) {\r\n    this.#intensity = value\r\n    this.onPropertyChanged('color', this.#intensityColor.copy(this.color).multiplyScalar(this.intensity))\r\n  }\r\n\r\n  /**\r\n   * Update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding} input value and tell the {@link CameraRenderer#cameraLightsBindGroup | renderer camera, lights and shadows} bind group to update.\r\n   * @param propertyKey - name of the property to update.\r\n   * @param value - new value of the property.\r\n   */\r\n  onPropertyChanged(propertyKey: string, value: Vec3 | number) {\r\n    if (this.rendererBinding && this.rendererBinding.inputs[propertyKey]) {\r\n      if (value instanceof Vec3) {\r\n        this.rendererBinding.inputs[propertyKey].value[this.index * 3] = value.x\r\n        this.rendererBinding.inputs[propertyKey].value[this.index * 3 + 1] = value.y\r\n        this.rendererBinding.inputs[propertyKey].value[this.index * 3 + 2] = value.z\r\n      } else {\r\n        this.rendererBinding.inputs[propertyKey].value[this.index] = value\r\n      }\r\n\r\n      this.rendererBinding.inputs[propertyKey].shouldUpdate = true\r\n      this.renderer.shouldUpdateCameraLightsBindGroup()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tell the {@link renderer} that the maximum number for this {@link type} of light has been overflown.\r\n   * @param lightsType - {@link type} of light.\r\n   */\r\n  onMaxLightOverflow(lightsType: LightsType) {\r\n    this.renderer.onMaxLightOverflow(lightsType)\r\n\r\n    if (this.rendererBinding) {\r\n      this.rendererBinding = this.renderer.bindings[lightsType]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove this {@link Light} from the {@link renderer} and destroy it.\r\n   */\r\n  remove() {\r\n    this.renderer.removeLight(this)\r\n    this.destroy()\r\n  }\r\n\r\n  /**\r\n   * Destroy this {@link Light}.\r\n   */\r\n  destroy() {\r\n    super.destroy()\r\n  }\r\n}\r\n","import { Light, LightBaseParams, LightsType } from './Light'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { CameraRenderer } from '../renderers/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\n\r\n/**\r\n * Create an ambient light that equally illuminates all objects in the scene.\r\n *\r\n * This light cannot cast shadows.\r\n *\r\n * @example\r\n * ```javascript\r\n * // assuming 'renderer' is a valid Camera renderer\r\n * const ambientLight = new AmbientLight(renderer, {\r\n *   color: new Vec3(1),\r\n *   intensity: 0.1,\r\n * })\r\n * ```\r\n */\r\nexport class AmbientLight extends Light {\r\n  /**\r\n   * AmbientLight constructor\r\n   * @param renderer - {@link CameraRenderer} used to create this {@link AmbientLight}.\r\n   * @param parameters - {@link LightBaseParams | parameters} used to create this {@link AmbientLight}.\r\n   */\r\n  constructor(\r\n    renderer: CameraRenderer | GPUCurtains,\r\n    { color = new Vec3(1), intensity = 0.1 } = {} as LightBaseParams\r\n  ) {\r\n    const type = 'ambientLights'\r\n    super(renderer, { color, intensity, type })\r\n  }\r\n\r\n  // explicitly disable all kinds of transformations\r\n\r\n  /** @ignore */\r\n  applyRotation() {}\r\n\r\n  /** @ignore */\r\n  applyPosition() {}\r\n\r\n  /** @ignore */\r\n  applyScale() {}\r\n\r\n  /** @ignore */\r\n  applyTransformOrigin() {}\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { generateUUID } from '../../utils/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { Texture } from '../textures/Texture'\r\n\r\n/** Define the parameters of a color attachment */\r\nexport interface ColorAttachmentParams {\r\n  /** The {@link GPUCommandEncoder.beginRenderPass().loadOp | load operation} to perform while drawing this {@link RenderPass} */\r\n  loadOp?: GPULoadOp\r\n  /** The {@link GPUCommandEncoder.beginRenderPass().storeOp | store operation} to perform while drawing this {@link RenderPass} */\r\n  storeOp?: GPUStoreOp\r\n  /** The {@link GPUCommandEncoder.beginRenderPass().clearValue | color values} to clear to before drawing this {@link RenderPass} */\r\n  clearValue?: GPUColor\r\n  /** Optional format of the color attachment texture */\r\n  targetFormat: GPUTextureFormat\r\n}\r\n\r\n/**\r\n * Parameters used to create this {@link RenderPass}\r\n */\r\nexport interface RenderPassParams {\r\n  /** The label of the {@link RenderPass}, sent to various GPU objects for debugging purpose */\r\n  label?: string\r\n\r\n  /** Whether the {@link RenderPass | view and depth textures} should use multisampling or not */\r\n  sampleCount?: GPUSize32\r\n\r\n  /** Force all the {@link RenderPass} textures size to be set to the given ratio of the {@link core/renderers/GPURenderer.GPURenderer#canvas | renderer canvas} size. Used mainly to lower the rendered definition. */\r\n  qualityRatio?: number\r\n\r\n  /** Whether this {@link RenderPass} should handle a view texture */\r\n  useColorAttachments?: boolean\r\n\r\n  /** Whether the main (first {@link colorAttachments}) view texture should use the content of the swap chain and render to it each frame */\r\n  renderToSwapChain?: boolean\r\n\r\n  /** Array of one or multiple (Multiple Render Targets) color attachments parameters. */\r\n  colorAttachments?: ColorAttachmentParams[]\r\n\r\n  /** Whether this {@link RenderPass} should handle a depth texture */\r\n  useDepth?: boolean\r\n  /** Whether this {@link RenderPass} should use an already created depth texture */\r\n  depthTexture?: Texture\r\n  /** The {@link GPUCommandEncoder.beginRenderPass().loadOp | depth load operation} to perform while drawing this {@link RenderPass} */\r\n  depthLoadOp?: GPULoadOp\r\n  /** The {@link GPUCommandEncoder.beginRenderPass().storeOp | depth store operation} to perform while drawing this {@link RenderPass} */\r\n  depthStoreOp?: GPUStoreOp\r\n  /** The depth clear value to clear to before drawing this {@link RenderPass} */\r\n  depthClearValue?: number\r\n  /** Optional format of the depth texture */\r\n  depthFormat?: GPUTextureFormat\r\n}\r\n\r\n/**\r\n * Used by {@link core/renderPasses/RenderTarget.RenderTarget | RenderTarget} and the {@link Renderer} to render to one or multiple {@link RenderPass#viewTextures | view textures} (and optionally a {@link RenderPass#depthTexture | depth texture}), using a specific {@link GPUCommandEncoder.beginRenderPass().descriptor | GPURenderPassDescriptor}.\r\n */\r\nexport class RenderPass {\r\n  /** {@link Renderer} used by this {@link RenderPass} */\r\n  renderer: Renderer\r\n  /** The type of the {@link RenderPass} */\r\n  type: string\r\n  /** The universal unique id of this {@link RenderPass} */\r\n  readonly uuid: string\r\n\r\n  /** Options used to create this {@link RenderPass} */\r\n  options: RenderPassParams\r\n\r\n  /** Depth {@link Texture} to use with this {@link RenderPass} if it should handle depth */\r\n  depthTexture: Texture | undefined\r\n\r\n  /** Array of {@link Texture} used for this {@link RenderPass} color attachments view textures */\r\n  viewTextures: Texture[]\r\n\r\n  /** Array of {@link Texture} used for this {@link RenderPass} color attachments resolve textures */\r\n  resolveTargets: Array<null | Texture>\r\n\r\n  /** The {@link RenderPass} {@link GPUCommandEncoder.beginRenderPass().descriptor | GPURenderPassDescriptor}. */\r\n  descriptor: GPURenderPassDescriptor\r\n\r\n  /**\r\n   * RenderPass constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link RenderPass}\r\n   * @param parameters - {@link RenderPassParams | parameters} used to create this {@link RenderPass}\r\n   */\r\n  constructor(\r\n    renderer: Renderer | GPUCurtains,\r\n    {\r\n      label = 'Render Pass',\r\n      sampleCount = 4,\r\n      qualityRatio = 1,\r\n      // color\r\n      useColorAttachments = true,\r\n      renderToSwapChain = true,\r\n      colorAttachments = [],\r\n      // depth\r\n      useDepth = true,\r\n      depthTexture = null,\r\n      depthLoadOp = 'clear' as GPULoadOp,\r\n      depthStoreOp = 'store' as GPUStoreOp,\r\n      depthClearValue = 1,\r\n      depthFormat = 'depth24plus' as GPUTextureFormat,\r\n    } = {} as RenderPassParams\r\n  ) {\r\n    renderer = isRenderer(renderer, 'RenderPass')\r\n\r\n    this.type = 'RenderPass'\r\n    this.uuid = generateUUID()\r\n\r\n    this.renderer = renderer\r\n\r\n    if (useColorAttachments) {\r\n      const defaultColorAttachment = {\r\n        loadOp: 'clear' as GPULoadOp,\r\n        storeOp: 'store' as GPUStoreOp,\r\n        clearValue: [0, 0, 0, 0] as GPUColor,\r\n        targetFormat: this.renderer.options.context.format,\r\n      }\r\n\r\n      if (!colorAttachments.length) {\r\n        colorAttachments = [defaultColorAttachment]\r\n      } else {\r\n        colorAttachments = colorAttachments.map((colorAttachment) => {\r\n          return { ...defaultColorAttachment, ...colorAttachment }\r\n        })\r\n      }\r\n    }\r\n\r\n    this.options = {\r\n      label,\r\n      sampleCount,\r\n      qualityRatio,\r\n      // color\r\n      useColorAttachments,\r\n      renderToSwapChain,\r\n      colorAttachments,\r\n      // depth\r\n      useDepth,\r\n      ...(depthTexture !== undefined && { depthTexture }),\r\n      depthLoadOp,\r\n      depthStoreOp,\r\n      depthClearValue,\r\n      depthFormat,\r\n    }\r\n\r\n    // if needed, create a depth texture before our descriptor\r\n    if (this.options.useDepth) {\r\n      this.createDepthTexture()\r\n    }\r\n\r\n    // if needed, create a view texture before our descriptor\r\n    this.viewTextures = []\r\n    this.resolveTargets = []\r\n    if (this.options.useColorAttachments && (!this.options.renderToSwapChain || this.options.sampleCount > 1)) {\r\n      this.createViewTextures()\r\n      this.createResolveTargets()\r\n    }\r\n\r\n    this.setRenderPassDescriptor()\r\n  }\r\n\r\n  /**\r\n   * Create and set our {@link depthTexture | depth texture}\r\n   */\r\n  createDepthTexture() {\r\n    if (this.options.depthTexture) {\r\n      this.depthTexture = this.options.depthTexture\r\n      // adjust depth format as well\r\n      this.options.depthFormat = this.options.depthTexture.options.format\r\n    } else {\r\n      this.depthTexture = new Texture(this.renderer, {\r\n        label: this.options.label + ' depth texture',\r\n        name: 'depthTexture',\r\n        format: this.options.depthFormat,\r\n        sampleCount: this.options.sampleCount,\r\n        qualityRatio: this.options.qualityRatio,\r\n        type: 'depth',\r\n        usage: ['renderAttachment', 'textureBinding'],\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create and set our {@link viewTextures | view textures}\r\n   */\r\n  createViewTextures() {\r\n    this.options.colorAttachments.forEach((colorAttachment, index) => {\r\n      this.viewTextures.push(\r\n        new Texture(this.renderer, {\r\n          label: `${this.options.label} colorAttachment[${index}] view texture`,\r\n          name: `colorAttachment${index}ViewTexture`,\r\n          format: colorAttachment.targetFormat,\r\n          sampleCount: this.options.sampleCount,\r\n          qualityRatio: this.options.qualityRatio,\r\n          type: 'texture',\r\n          usage: ['copySrc', 'copyDst', 'renderAttachment', 'textureBinding'],\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create and set our {@link resolveTargets | resolve targets} in case the {@link viewTextures} are multisampled.\r\n   *\r\n   * Note that if this {@link RenderPass} should {@link RenderPassParams#renderToSwapChain | render to the swap chain}, the first resolve target will be set to `null` as the current swap chain texture will be used anyway in the render loop (see {@link updateView}).\r\n   */\r\n  createResolveTargets() {\r\n    if (this.options.sampleCount > 1) {\r\n      this.options.colorAttachments.forEach((colorAttachment, index) => {\r\n        this.resolveTargets.push(\r\n          this.options.renderToSwapChain && index === 0\r\n            ? null\r\n            : new Texture(this.renderer, {\r\n                label: `${this.options.label} resolve target[${index}] texture`,\r\n                name: `resolveTarget${index}Texture`,\r\n                format: colorAttachment.targetFormat,\r\n                sampleCount: 1,\r\n                qualityRatio: this.options.qualityRatio,\r\n                type: 'texture',\r\n              })\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the textures outputted by this {@link RenderPass}, which means the {@link viewTextures} if not multisampled, or their {@link resolveTargets} else (beware that the first resolve target might be `null` if this {@link RenderPass} should {@link RenderPassParams#renderToSwapChain | render to the swap chain}).\r\n   *\r\n   * @readonly\r\n   */\r\n  get outputTextures(): Texture[] {\r\n    return this.options.sampleCount > 1 ? this.resolveTargets : this.viewTextures\r\n  }\r\n\r\n  /**\r\n   * Set our render pass {@link descriptor}\r\n   */\r\n  setRenderPassDescriptor(depthTextureView = null) {\r\n    this.descriptor = {\r\n      label: this.options.label + ' descriptor',\r\n      colorAttachments: this.options.colorAttachments.map((colorAttachment, index) => {\r\n        return {\r\n          // view\r\n          view: this.viewTextures[index]?.texture.createView({\r\n            label: this.viewTextures[index]?.texture.label + ' view',\r\n          }),\r\n          ...(this.resolveTargets.length && {\r\n            resolveTarget: this.resolveTargets[index]?.texture.createView({\r\n              label: this.resolveTargets[index]?.texture.label + ' view',\r\n            }),\r\n          }),\r\n          // clear values\r\n          clearValue: colorAttachment.clearValue,\r\n          // loadOp: 'clear' specifies to clear the texture to the clear value before drawing\r\n          // The other option is 'load' which means load the existing contents of the texture into the GPU so we can draw over what's already there.\r\n          loadOp: colorAttachment.loadOp,\r\n          // storeOp: 'store' means store the result of what we draw.\r\n          // We could also pass 'discard' which would throw away what we draw.\r\n          // see https://webgpufundamentals.org/webgpu/lessons/webgpu-multisampling.html\r\n          storeOp: colorAttachment.storeOp,\r\n        }\r\n      }),\r\n\r\n      ...(this.options.useDepth && {\r\n        depthStencilAttachment: {\r\n          view:\r\n            depthTextureView ||\r\n            this.depthTexture.texture.createView({\r\n              label: this.depthTexture.texture.label + ' view',\r\n            }),\r\n          depthClearValue: this.options.depthClearValue,\r\n          // the same way loadOp is working, we can specify if we want to clear or load the previous depth buffer result\r\n          depthLoadOp: this.options.depthLoadOp,\r\n          depthStoreOp: this.options.depthStoreOp,\r\n        },\r\n      }),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link RenderPass}: reset its {@link Texture}\r\n   */\r\n  resize() {\r\n    // reassign textures\r\n    if (this.options.useDepth) {\r\n      this.descriptor.depthStencilAttachment.view = this.depthTexture.texture.createView({\r\n        label: this.depthTexture.options.label + ' view',\r\n      })\r\n    }\r\n\r\n    this.viewTextures.forEach((viewTexture, index) => {\r\n      this.descriptor.colorAttachments[index].view = viewTexture.texture.createView({\r\n        label: viewTexture.options.label + ' view',\r\n      })\r\n    })\r\n\r\n    this.resolveTargets.forEach((resolveTarget, index) => {\r\n      if (resolveTarget) {\r\n        this.descriptor.colorAttachments[index].resolveTarget = resolveTarget.texture.createView({\r\n          label: resolveTarget.options.label + ' view',\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set the {@link descriptor} {@link GPUCommandEncoder.beginRenderPass().loadOp | load operation}\r\n   * @param loadOp - new {@link GPUCommandEncoder.beginRenderPass().loadOp | load operation} to use\r\n   * @param colorAttachmentIndex - index of the color attachment for which to use this load operation\r\n   */\r\n  setLoadOp(loadOp: GPULoadOp = 'clear', colorAttachmentIndex = 0) {\r\n    if (this.options.useColorAttachments) {\r\n      if (this.options.colorAttachments[colorAttachmentIndex]) {\r\n        this.options.colorAttachments[colorAttachmentIndex].loadOp = loadOp\r\n      }\r\n\r\n      if (this.descriptor) {\r\n        if (this.descriptor.colorAttachments && this.descriptor.colorAttachments[colorAttachmentIndex]) {\r\n          this.descriptor.colorAttachments[colorAttachmentIndex].loadOp = loadOp\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the {@link descriptor} {@link GPUCommandEncoder.beginRenderPass().loadOp | depth load operation}\r\n   * @param depthLoadOp - new {@link GPUCommandEncoder.beginRenderPass().loadOp | depth load operation} to use\r\n   */\r\n  setDepthLoadOp(depthLoadOp: GPULoadOp = 'clear') {\r\n    this.options.depthLoadOp = depthLoadOp\r\n    if (this.options.useDepth && this.descriptor.depthStencilAttachment) {\r\n      this.descriptor.depthStencilAttachment.depthLoadOp = depthLoadOp\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set our {@link GPUCommandEncoder.beginRenderPass().clearValue | clear colors value}.<br>\r\n   * Beware that if the {@link renderer} is using {@link core/renderers/GPURenderer.GPURendererContextOptions#alphaMode | premultiplied alpha mode}, your R, G and B channels should be premultiplied by your alpha channel.\r\n   * @param clearValue - new {@link GPUCommandEncoder.beginRenderPass().clearValue | clear colors value} to use\r\n   * @param colorAttachmentIndex - index of the color attachment for which to use this clear value\r\n   */\r\n  setClearValue(clearValue: GPUColor = [0, 0, 0, 0], colorAttachmentIndex = 0) {\r\n    if (this.options.useColorAttachments) {\r\n      if (this.renderer.options.context.alphaMode === 'premultiplied') {\r\n        const alpha = clearValue[3]\r\n        clearValue[0] = Math.min(clearValue[0], alpha)\r\n        clearValue[1] = Math.min(clearValue[1], alpha)\r\n        clearValue[2] = Math.min(clearValue[2], alpha)\r\n      }\r\n\r\n      if (this.options.colorAttachments[colorAttachmentIndex]) {\r\n        this.options.colorAttachments[colorAttachmentIndex].clearValue = clearValue\r\n      }\r\n\r\n      if (this.descriptor) {\r\n        if (this.descriptor.colorAttachments && this.descriptor.colorAttachments[colorAttachmentIndex]) {\r\n          this.descriptor.colorAttachments[colorAttachmentIndex].clearValue = clearValue\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the current {@link descriptor} texture {@link GPUCommandEncoder.beginRenderPass().view | view} and {@link GPUCommandEncoder.beginRenderPass().resolveTarget | resolveTarget} (depending on whether we're using multisampling)\r\n   * @param renderTexture - {@link GPUTexture} to use, or the {@link core/renderers/GPURenderer.GPURenderer#context | context} {@link GPUTexture | current texture} if null.\r\n   * @returns - the {@link GPUTexture | texture} to render to.\r\n   */\r\n  updateView(renderTexture: GPUTexture | null = null): GPUTexture | null {\r\n    if (!this.options.colorAttachments.length || !this.options.renderToSwapChain) {\r\n      return renderTexture\r\n    }\r\n\r\n    if (!renderTexture) {\r\n      renderTexture = this.renderer.context.getCurrentTexture()\r\n      renderTexture.label = `${this.renderer.type} context current texture`\r\n    }\r\n\r\n    if (this.options.sampleCount > 1) {\r\n      this.descriptor.colorAttachments[0].view = this.viewTextures[0].texture.createView({\r\n        label: this.viewTextures[0].options.label + ' view',\r\n      })\r\n      this.descriptor.colorAttachments[0].resolveTarget = renderTexture.createView({\r\n        label: renderTexture.label + ' resolve target view',\r\n      })\r\n    } else {\r\n      this.descriptor.colorAttachments[0].view = renderTexture.createView({\r\n        label: renderTexture.label + ' view',\r\n      })\r\n    }\r\n\r\n    return renderTexture\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link RenderPass}\r\n   */\r\n  destroy() {\r\n    this.viewTextures.forEach((viewTexture) => viewTexture.destroy())\r\n    this.resolveTargets.forEach((resolveTarget) => resolveTarget?.destroy())\r\n\r\n    if (!this.options.depthTexture && this.depthTexture) {\r\n      this.depthTexture.destroy()\r\n    }\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { RenderPass, RenderPassParams } from './RenderPass'\r\nimport { Texture } from '../textures/Texture'\r\nimport { generateUUID } from '../../utils/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\n\r\n/**\r\n * Parameters used to create a {@link RenderTarget}\r\n */\r\nexport interface RenderTargetParams extends RenderPassParams {\r\n  /** Whether we should add this {@link RenderTarget} to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\r\n  autoRender?: boolean\r\n}\r\n\r\n/**\r\n * Used to draw to {@link RenderPass#viewTextures | RenderPass view textures} (and eventually {@link RenderPass#depthTexture | depth texture}) instead of directly to screen.\r\n *\r\n * The meshes assigned to a {@link RenderTarget} will be drawn before the other objects in the {@link core/scenes/Scene.Scene | Scene} rendering loop.\r\n *\r\n * Can also be assigned as ShaderPass {@link core/renderPasses/ShaderPass.ShaderPass#inputTarget | input} or {@link core/renderPasses/ShaderPass.ShaderPass#outputTarget | output} targets.\r\n *\r\n * If the {@link RenderPass} created handle color attachments, then a {@link RenderTarget#renderTexture | Texture} will be created to update and/or resolve the content of the current view. This {@link RenderTarget#renderTexture | Texture} could therefore usually be used to access the current content of this {@link RenderTarget}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * const outputTarget = new RenderTarget(gpuCurtains, {\r\n *   label: 'My render target',\r\n * })\r\n * ```\r\n */\r\nexport class RenderTarget {\r\n  /** {@link Renderer} used by this {@link RenderTarget} */\r\n  renderer: Renderer\r\n  /** The type of the {@link RenderTarget} */\r\n  type: string\r\n  /** The universal unique id of this {@link RenderTarget} */\r\n  readonly uuid: string\r\n\r\n  /** Options used to create this {@link RenderTarget} */\r\n  options: RenderTargetParams\r\n\r\n  /** {@link RenderPass} used by this {@link RenderTarget} */\r\n  renderPass: RenderPass\r\n  /** {@link Texture} that will be resolved by the {@link renderPass} when {@link RenderPass#updateView | setting the current texture} */\r\n  renderTexture?: Texture\r\n\r\n  /** Whether we should add this {@link RenderTarget} to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\r\n  #autoRender = true\r\n\r\n  /**\r\n   * RenderTarget constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link RenderTarget}\r\n   * @param parameters - {@link RenderTargetParams | parameters} use to create this {@link RenderTarget}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters = {} as RenderTargetParams) {\r\n    renderer = isRenderer(renderer, 'RenderTarget')\r\n\r\n    this.type = 'RenderTarget'\r\n    this.renderer = renderer\r\n    this.uuid = generateUUID()\r\n\r\n    const { label, colorAttachments, depthTexture, autoRender, ...renderPassParams } = parameters\r\n\r\n    // use depth texture from params\r\n    // OR renderer render pass depth texture if sample counts match\r\n    const depthTextureToUse = !!depthTexture\r\n      ? depthTexture\r\n      : this.renderer.renderPass.options.sampleCount === (parameters.sampleCount ?? 4)\r\n      ? this.renderer.renderPass.depthTexture\r\n      : null\r\n\r\n    this.options = {\r\n      label,\r\n      ...renderPassParams,\r\n      ...(depthTextureToUse && { depthTexture: depthTextureToUse }),\r\n      ...(colorAttachments && { colorAttachments }),\r\n      autoRender: autoRender === undefined ? true : autoRender,\r\n    } as RenderTargetParams\r\n\r\n    if (autoRender !== undefined) {\r\n      this.#autoRender = autoRender\r\n    }\r\n\r\n    this.renderPass = new RenderPass(this.renderer, {\r\n      label: this.options.label ? `${this.options.label} Render Pass` : 'Render Target Render Pass',\r\n      ...(colorAttachments && { colorAttachments }),\r\n      depthTexture: this.options.depthTexture,\r\n      ...renderPassParams,\r\n    })\r\n\r\n    if (renderPassParams.useColorAttachments !== false) {\r\n      // this is the texture that will be resolved when setting the current render pass texture\r\n      this.renderTexture = new Texture(this.renderer, {\r\n        label: this.options.label ? `${this.options.label} Render Texture` : 'Render Target render texture',\r\n        name: 'renderTexture',\r\n        format:\r\n          colorAttachments && colorAttachments.length && colorAttachments[0].targetFormat\r\n            ? colorAttachments[0].targetFormat\r\n            : this.renderer.options.context.format,\r\n        ...(this.options.qualityRatio !== undefined && { qualityRatio: this.options.qualityRatio }),\r\n        usage: ['copySrc', 'renderAttachment', 'textureBinding'],\r\n      })\r\n    }\r\n\r\n    this.addToScene()\r\n  }\r\n\r\n  /**\r\n   * Get the textures outputted by the {@link renderPass} if any, which means its {@link RenderPass.viewTextures | viewTextures} if not multisampled, or the {@link RenderPass.resolveTargets | resolveTargets} else.\r\n   *\r\n   * Since some {@link RenderPass} might not have any view textures (or in case the first resolve target is `null`), the first element can be the {@link RenderTarget.renderTexture | RenderTarget renderTexture} itself.\r\n   *\r\n   * @readonly\r\n   */\r\n  get outputTextures(): Texture[] {\r\n    return !this.renderPass.outputTextures.length\r\n      ? !this.renderTexture\r\n        ? []\r\n        : [this.renderTexture]\r\n      : this.renderPass.outputTextures.map((texture, index) => {\r\n          return index === 0 && this.renderPass.options.renderToSwapChain ? this.renderTexture : texture\r\n        })\r\n  }\r\n\r\n  /**\r\n   * Add the {@link RenderTarget} to the renderer and the {@link core/scenes/Scene.Scene | Scene}\r\n   */\r\n  addToScene() {\r\n    this.renderer.renderTargets.push(this)\r\n\r\n    if (this.#autoRender) {\r\n      this.renderer.scene.addRenderTarget(this)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the {@link RenderTarget} from the renderer and the {@link core/scenes/Scene.Scene | Scene}\r\n   */\r\n  removeFromScene() {\r\n    if (this.#autoRender) {\r\n      this.renderer.scene.removeRenderTarget(this)\r\n    }\r\n\r\n    this.renderer.renderTargets = this.renderer.renderTargets.filter((renderTarget) => renderTarget.uuid !== this.uuid)\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link renderPass}\r\n   */\r\n  resize() {\r\n    // reset the newly created depth texture\r\n    if (this.options.depthTexture) {\r\n      this.renderPass.options.depthTexture.texture = this.options.depthTexture.texture\r\n    }\r\n\r\n    this.renderPass?.resize()\r\n  }\r\n\r\n  /**\r\n   * Remove our {@link RenderTarget}. Alias of {@link RenderTarget#destroy}\r\n   */\r\n  remove() {\r\n    this.destroy()\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link RenderTarget}\r\n   */\r\n  destroy() {\r\n    // release mesh struct\r\n    this.renderer.meshes.forEach((mesh) => {\r\n      if (mesh.outputTarget && mesh.outputTarget.uuid === this.uuid) {\r\n        mesh.setOutputTarget(null)\r\n      }\r\n    })\r\n\r\n    // release shader passes struct\r\n    this.renderer.shaderPasses.forEach((shaderPass) => {\r\n      if (shaderPass.outputTarget && shaderPass.outputTarget.uuid === this.uuid) {\r\n        // force render target to null before removing / re-adding to scene\r\n        shaderPass.outputTarget = null\r\n        shaderPass.setOutputTarget(null)\r\n      }\r\n    })\r\n\r\n    // remove from scene and renderer array\r\n    this.removeFromScene()\r\n\r\n    this.renderPass?.destroy()\r\n    this.renderTexture?.destroy()\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { PipelineEntryOptions, PipelineEntryParams, PipelineEntryStatus } from '../../types/PipelineEntries'\r\nimport { AllowedBindGroups } from '../../types/BindGroups'\r\nimport { MaterialShadersType } from '../../types/Materials'\r\n\r\nlet pipelineId = 0\r\n\r\n/**\r\n * Used as a base class to create a pipeline entry.<br>\r\n * {@link PipelineEntry} roles are:\r\n * - Patch the given {@link core/materials/Material.Material | Material} shaders code and create the corresponding {@link GPUShaderModule}.\r\n * - Create a {@link GPUPipelineLayout | pipeline layout} with the given {@link core/materials/Material.Material#bindGroups | bind groups}\r\n * - Create a GPU pipeline\r\n */\r\nexport class PipelineEntry {\r\n  /** The type of the {@link PipelineEntry} */\r\n  type: string\r\n  /** The {@link Renderer} used to create this {@link PipelineEntry} */\r\n  renderer: Renderer\r\n  /** Index of this {@link PipelineEntry}, i.e. creation order */\r\n  readonly index: number\r\n  /** {@link GPUPipelineLayout | Pipeline layout} created based on the given {@link bindGroups | bind groups} */\r\n  layout: GPUPipelineLayout | null\r\n  /** The GPU pipeline */\r\n  pipeline: GPURenderPipeline | GPUComputePipeline | null\r\n  /** The pipeline {@link PipelineEntryStatus | compilation status} */\r\n  status: PipelineEntryStatus\r\n  /** Options used to create this {@link PipelineEntry} */\r\n  options: PipelineEntryOptions\r\n\r\n  /** {@link core/materials/Material.Material#bindGroups | bind groups} used to patch the shaders and create the {@link PipelineEntry#layout | pipeline layout} */\r\n  bindGroups: AllowedBindGroups[]\r\n\r\n  /**\r\n   * PipelineEntry constructor\r\n   * @param parameters - {@link PipelineEntryParams | parameters} used to create this {@link PipelineEntry}\r\n   */\r\n  constructor(parameters: PipelineEntryParams) {\r\n    this.type = 'PipelineEntry'\r\n\r\n    let { renderer } = parameters\r\n    const { label, shaders, useAsync, bindGroups, cacheKey } = parameters\r\n\r\n    renderer = isRenderer(renderer, label ? label + ' ' + this.type : this.type)\r\n\r\n    this.renderer = renderer\r\n\r\n    Object.defineProperty(this as PipelineEntry, 'index', { value: pipelineId++ })\r\n\r\n    this.layout = null\r\n    this.pipeline = null\r\n\r\n    this.status = {\r\n      compiling: false,\r\n      compiled: false,\r\n      error: null,\r\n    }\r\n\r\n    this.options = {\r\n      label,\r\n      shaders,\r\n      useAsync: useAsync !== undefined ? useAsync : true,\r\n      bindGroups,\r\n      cacheKey,\r\n    }\r\n\r\n    this.bindGroups = bindGroups\r\n  }\r\n\r\n  /**\r\n   * Get whether the {@link pipeline} is ready, i.e. successfully compiled\r\n   * @readonly\r\n   */\r\n  get ready(): boolean {\r\n    return !this.status.compiling && this.status.compiled && !this.status.error\r\n  }\r\n\r\n  /**\r\n   * Get whether the {@link pipeline} is ready to be compiled, i.e. we have not already tried to compile it, and it's not currently compiling neither\r\n   * @readonly\r\n   */\r\n  get canCompile(): boolean {\r\n    return !this.status.compiling && !this.status.compiled && !this.status.error\r\n  }\r\n\r\n  /* SHADERS */\r\n\r\n  /**\r\n   * Create a {@link GPUShaderModule}\r\n   * @param parameters - Parameters used\r\n   * @param parameters.code - patched WGSL code string\r\n   * @param parameters.type - {@link MaterialShadersType | shader type}\r\n   * @returns - compiled {@link GPUShaderModule} if successful\r\n   */\r\n  createShaderModule({ code = '', type = 'vertex' }: { code: string; type: MaterialShadersType }): GPUShaderModule {\r\n    const shaderModule = this.renderer.createShaderModule({\r\n      label: this.options.label + ': ' + type + ' shader module',\r\n      code,\r\n    })\r\n\r\n    if ('getCompilationInfo' in shaderModule && !this.renderer.production) {\r\n      shaderModule.getCompilationInfo().then((compilationInfo) => {\r\n        for (const message of compilationInfo.messages) {\r\n          let formattedMessage = ''\r\n          if (message.lineNum) {\r\n            formattedMessage += `Line ${message.lineNum}:${message.linePos} - ${code.substring(\r\n              message.offset,\r\n              message.offset + message.length\r\n            )}\\n`\r\n          }\r\n          formattedMessage += message.message\r\n\r\n          switch (message.type) {\r\n            case 'error':\r\n              // TODO mesh onError?\r\n              console.error(`${this.options.label} compilation error:\\n${formattedMessage}`)\r\n              break\r\n            case 'warning':\r\n              console.warn(`${this.options.label} compilation warning:\\n${formattedMessage}`)\r\n              break\r\n            case 'info':\r\n              console.log(`${this.options.label} compilation information:\\n${formattedMessage}`)\r\n              break\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    return shaderModule\r\n  }\r\n\r\n  /* SETUP */\r\n\r\n  /**\r\n   * Create the {@link PipelineEntry} shaders\r\n   */\r\n  createShaders() {\r\n    /* will be overriden */\r\n  }\r\n\r\n  /**\r\n   * Create the pipeline entry {@link layout}\r\n   */\r\n  createPipelineLayout() {\r\n    this.layout = this.renderer.createPipelineLayout({\r\n      label: this.options.label + ' layout',\r\n      bindGroupLayouts: this.bindGroups.map((bindGroup) => bindGroup.bindGroupLayout),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create the {@link PipelineEntry} descriptor\r\n   */\r\n  createPipelineDescriptor() {\r\n    /* will be overriden */\r\n  }\r\n\r\n  /**\r\n   * Flush a {@link PipelineEntry}, i.e. reset its {@link bindGroups | bind groups}, {@link layout} and descriptor and recompile the {@link pipeline}\r\n   * Used when one of the bind group or rendering property has changed\r\n   * @param newBindGroups - new {@link bindGroups | bind groups} in case they have changed\r\n   */\r\n  flushPipelineEntry(newBindGroups: AllowedBindGroups[] = []) {\r\n    this.status.compiling = false\r\n    this.status.compiled = false\r\n    this.status.error = null\r\n\r\n    this.bindGroups = newBindGroups\r\n    this.compilePipelineEntry()\r\n  }\r\n\r\n  /**\r\n   * Set up a {@link pipeline} by creating the shaders, the {@link layout} and the descriptor\r\n   */\r\n  compilePipelineEntry() {\r\n    this.status.compiling = true\r\n\r\n    this.createShaders()\r\n    this.createPipelineLayout()\r\n    this.createPipelineDescriptor()\r\n  }\r\n}\r\n","export default /* wgsl */ `\r\nfn getWorldPosition(position: vec3f) -> vec4f {\r\n  return matrices.model * vec4f(position, 1.0);\r\n}\r\n\r\nfn getOutputPosition(position: vec3f) -> vec4f {\r\n  return camera.projection * matrices.modelView * vec4f(position, 1.0);\r\n}`\r\n","export default /* wgsl */ `\r\nfn getWorldNormal(normal: vec3f) -> vec3f {\r\n  return normalize(matrices.normal * normal);\r\n}\r\n\r\nfn getViewNormal(normal: vec3f) -> vec3f {\r\n  return normalize((camera.view * vec4(matrices.normal * normal, 0.0)).xyz);\r\n}`\r\n","export default /* wgsl */ `\r\nfn getUVCover(uv: vec2f, textureMatrix: mat4x4f) -> vec2f {\r\n  return (textureMatrix * vec4f(uv, 0.0, 1.0)).xy;\r\n}`\r\n","export default /* wgsl */ `\r\nfn getVertex2DToUVCoords(vertex: vec2f) -> vec2f {\r\n  return vec2(\r\n    vertex.x * 0.5 + 0.5,\r\n    0.5 - vertex.y * 0.5\r\n  );\r\n}\r\n\r\nfn getVertex3DToUVCoords(vertex: vec3f) -> vec2f {\r\n  return getVertex2DToUVCoords( vec2(vertex.x, vertex.y) );\r\n}\r\n`\r\n","import { RenderMaterialShadersType } from '../../types/Materials'\r\nimport get_output_position from './chunks/helpers/get_output_position.wgsl'\r\nimport get_normals from './chunks/helpers/get_normals.wgsl'\r\nimport get_uv_cover from './chunks/helpers/get_uv_cover.wgsl'\r\nimport get_vertex_to_uv_coords from './chunks/helpers/get_vertex_to_uv_coords.wgsl'\r\n\r\n/** Defines {@link ShaderChunks} object structure */\r\nexport type ShaderChunks = Record<RenderMaterialShadersType, Record<string, string>>\r\n/** Defines {@link ProjectedShaderChunks} object structure */\r\nexport type ProjectedShaderChunks = Record<RenderMaterialShadersType, Record<string, string>>\r\n\r\n/**\r\n * Useful WGSL code chunks added to the vertex and/or fragment shaders\r\n */\r\nexport const ShaderChunks = {\r\n  /** WGSL code chunks added to the vertex shader */\r\n  vertex: {\r\n    /** Applies given texture matrix to given uv coordinates */\r\n    get_uv_cover,\r\n  },\r\n  /** WGSL code chunks added to the fragment shader */\r\n  fragment: {\r\n    /** Applies given texture matrix to given uv coordinates */\r\n    get_uv_cover,\r\n    /** Convert vertex position to uv coordinates */\r\n    get_vertex_to_uv_coords,\r\n  },\r\n} as ShaderChunks\r\n\r\n/**\r\n * Useful WGSL code chunks added to the projected Meshes vertex and/or fragment shaders\r\n */\r\nexport const ProjectedShaderChunks = {\r\n  /** WGSL code chunks added to the vertex shader */\r\n  vertex: {\r\n    /** Get output vec4f position vector by applying model view projection matrix to vec3f attribute position vector */\r\n    get_output_position,\r\n    /** Get vec3f normals in world or view space */\r\n    get_normals,\r\n  },\r\n  /** WGSL code chunks added to the fragment shader */\r\n  fragment: {},\r\n} as ProjectedShaderChunks\r\n","import { PipelineEntry } from './PipelineEntry'\nimport { ProjectedShaderChunks, ShaderChunks } from '../shaders/ShaderChunks'\nimport { isRenderer } from '../renderers/utils'\nimport { throwError } from '../../utils/utils'\nimport {\n  PipelineEntryShaders,\n  RenderPipelineEntryOptions,\n  RenderPipelineEntryParams,\n} from '../../types/PipelineEntries'\nimport { BindGroupBufferBindingElement } from '../../types/BindGroups'\nimport { RenderMaterialAttributes, ShaderOptions } from '../../types/Materials'\n\n/**\n * Used to create a {@link PipelineEntry} specifically designed to handle {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}.\n *\n * ## Shaders patching\n *\n * The {@link RenderPipelineEntry} uses each of its {@link RenderPipelineEntry#bindGroups | bind groups} {@link core/bindings/Binding.Binding | Binding} to patch the given vertex and fragment shaders before creating the {@link GPUShaderModule}.<br>\n * It will prepend every {@link core/bindings/Binding.Binding | Binding} WGSL code snippets (or fragments) with the correct bind group and bindings indices.\n *\n * ## Pipeline compilation\n *\n * The {@link RenderPipelineEntry} will then create a {@link GPURenderPipeline} (asynchronously by default).\n *\n * ## Default attributes and uniforms\n *\n * ### Attributes\n *\n * Attributes are only added to the vertex shaders. They are generated based on the {@link core/geometries/Geometry.Geometry | Geometry} used and may vary in case you're using a geometry with custom attributes. Here are the default ones:\n *\n * ```wgsl\n * struct Attributes {\n *  @builtin(vertex_index) vertexIndex : u32,\n *  @builtin(instance_index) instanceIndex : u32,\n *  @location(0) position: vec3f,\n *  @location(1) uv: vec2f,\n *  @location(2) normal: vec3f\n * };\n *\n * // you can safely access them in your vertex shader\n * // using attributes.position or attributes.uv for example\n * ```\n *\n * ### Uniforms\n *\n * If the Mesh is one of {@link core/meshes/Mesh.Mesh | Mesh}, {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh} or {@link curtains/meshes/Plane.Plane | Plane}, some additional uniforms are added to the shaders.\n *\n * #### Vertex shaders\n *\n * ```wgsl\n * struct Matrices {\n * \tmodel: mat4x4f,\n * \tmodelView: mat4x4f,\n * \tnormal: mat3x3f\n * };\n *\n * struct Camera {\n * \tview: mat4x4f,\n * \tprojection: mat4x4f,\n * \tposition: vec3f\n * };\n *\n * @group(0) @binding(0) var<uniform> camera: Camera;\n *\n * // note that matrices uniform @group index might change depending on use cases\n * @group(1) @binding(0) var<uniform> matrices: Matrices;\n *\n * // you can safely access these uniforms in your vertex shader\n * // using matrices.modelView or camera.projection for example\n * ```\n *\n * #### Fragment shaders\n *\n * ```wgsl\n * struct Matrices {\n * \tmodel: mat4x4f,\n * \tmodelView: mat4x4f,\n * \tnormal: mat3x3f\n * };\n *\n * // note that matrices uniform @group index might change depending on use cases\n * @group(1) @binding(0) var<uniform> matrices: Matrices;\n *\n * // you can safely access these uniforms in your fragment shader\n * // using matrices.model or matrices.modelView for example\n * ```\n *\n * ### Helpers\n *\n * Finally, some helpers functions are added to the shaders as well.\n *\n * #### Vertex and fragment shaders\n *\n * To help you compute scaled UV based on a texture matrix, this function is always added to both vertex and fragment shaders:\n *\n * ```wgsl\n * fn getUVCover(uv: vec2f, textureMatrix: mat4x4f) -> vec2f {\n *   return (textureMatrix * vec4f(uv, 0.0, 1.0)).xy;\n * }\n * ```\n *\n * #### Vertex shaders\n *\n * If the Mesh is one of {@link core/meshes/Mesh.Mesh | Mesh}, {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh} or {@link curtains/meshes/Plane.Plane | Plane}, some functions are added to the vertex shader to help you compute the vertices positions and normals.\n *\n * ##### Position\n *\n * Position helper function:\n *\n * ```wgsl\n * fn getOutputPosition(position: vec3f) -> vec4f {\n *   return camera.projection * matrices.modelView * vec4f(position, 1.0);\n * }\n * ```\n *\n * Note that it is not mandatory to use it. If you want to do these computations yourself, you are free to do it the way you like most. You could for example use this formula instead:\n *\n * ```wgsl\n * var transformed: vec3f = camera.projection * camera.view * matrices.model * vec4f(position, 1.0);\n * ```\n *\n * ##### Normal\n *\n * The normal matrix provided, available as `matrices.normal`, is computed in world space (i.e. it is the inverse transpose of the world matrix). A couple helpers functions are added to help you compute the normals in the right space:\n *\n * ```wgsl\n * fn getWorldNormal(normal: vec3f) -> vec3f {\n *   return normalize(matrices.normal * normal);\n * }\n *\n * fn getViewNormal(normal: vec3f) -> vec3f {\n *   return normalize((camera.view * vec4(matrices.normal * normal, 0.0)).xyz);\n * }\n * ```\n *\n * #### Fragment shaders\n *\n * Last but not least, those couple functions are added to the fragment shaders to help you convert vertex positions to UV coordinates:\n *\n * ```wgsl\n * fn getVertex2DToUVCoords(vertex: vec2f) -> vec2f {\n *   return vec2(\n *     vertex.x * 0.5 + 0.5,\n *     0.5 - vertex.y * 0.5\n *   );\n * }\n *\n * fn getVertex3DToUVCoords(vertex: vec3f) -> vec2f {\n *   return getVertex2DToUVCoords( vec2(vertex.x, vertex.y) );\n * }\n * ```\n */\nexport class RenderPipelineEntry extends PipelineEntry {\n  /** Shaders to use with this {@link RenderPipelineEntry} */\n  shaders: PipelineEntryShaders\n  /** {@link RenderMaterialAttributes | Geometry attributes} sent to the {@link RenderPipelineEntry} */\n  attributes: RenderMaterialAttributes\n  /** {@link GPUDevice.createRenderPipeline().descriptor | GPURenderPipelineDescriptor} based on {@link layout} and {@link shaders} */\n  descriptor: GPURenderPipelineDescriptor | null\n  /** Options used to create this {@link RenderPipelineEntry} */\n  options: RenderPipelineEntryOptions\n\n  /**\n   * RenderPipelineEntry constructor\n   * @param parameters - {@link RenderPipelineEntryParams | parameters} used to create this {@link RenderPipelineEntry}\n   */\n  constructor(parameters: RenderPipelineEntryParams) {\n    // eslint-disable-next-line prefer-const\n    let { renderer, ...pipelineParams } = parameters\n    const { label, attributes, bindGroups, cacheKey, ...renderingOptions } = pipelineParams\n\n    const type = 'RenderPipelineEntry'\n\n    isRenderer(renderer, label ? label + ' ' + type : type)\n\n    super(parameters)\n\n    this.type = type\n\n    this.shaders = {\n      vertex: {\n        head: '',\n        code: '',\n        module: null,\n      },\n      fragment: {\n        head: '',\n        code: '',\n        module: null,\n      },\n      full: {\n        head: '',\n        code: '',\n        module: null,\n      },\n    }\n\n    this.descriptor = null\n\n    this.options = {\n      ...this.options,\n      attributes,\n      ...renderingOptions,\n    }\n\n    this.attributes = attributes\n  }\n\n  /* SHADERS */\n\n  /**\n   * Patch the shaders by appending all the necessary shader chunks, {@link bindGroups | bind groups}) and {@link attributes} WGSL code fragments to the given {@link types/PipelineEntries.PipelineEntryParams#shaders | parameter shader code}\n   */\n  patchShaders() {\n    this.shaders.vertex.head = ''\n    this.shaders.vertex.code = ''\n    this.shaders.fragment.head = ''\n    this.shaders.fragment.code = ''\n    this.shaders.full.head = ''\n    this.shaders.full.code = ''\n\n    // first add chunks\n    for (const chunk in ShaderChunks.vertex) {\n      this.shaders.vertex.head = `${ShaderChunks.vertex[chunk]}\\n${this.shaders.vertex.head}`\n      this.shaders.full.head = `${ShaderChunks.vertex[chunk]}\\n${this.shaders.full.head}`\n    }\n\n    if (this.options.shaders.fragment) {\n      for (const chunk in ShaderChunks.fragment) {\n        this.shaders.fragment.head = `${ShaderChunks.fragment[chunk]}\\n${this.shaders.fragment.head}`\n\n        if (this.shaders.full.head.indexOf(ShaderChunks.fragment[chunk]) === -1) {\n          this.shaders.full.head = `${ShaderChunks.fragment[chunk]}\\n${this.shaders.full.head}`\n        }\n      }\n    }\n\n    if (this.options.rendering.useProjection) {\n      for (const chunk in ProjectedShaderChunks.vertex) {\n        this.shaders.vertex.head = `${ProjectedShaderChunks.vertex[chunk]}\\n${this.shaders.vertex.head}`\n        this.shaders.full.head = `${ProjectedShaderChunks.vertex[chunk]}\\n${this.shaders.full.head}`\n      }\n\n      if (this.options.shaders.fragment) {\n        for (const chunk in ProjectedShaderChunks.fragment) {\n          this.shaders.fragment.head = `${ProjectedShaderChunks.fragment[chunk]}\\n${this.shaders.fragment.head}`\n\n          if (this.shaders.full.head.indexOf(ProjectedShaderChunks.fragment[chunk]) === -1) {\n            this.shaders.full.head = `${ProjectedShaderChunks.fragment[chunk]}\\n${this.shaders.full.head}`\n          }\n        }\n      }\n    }\n\n    const groupsBindings = []\n    for (const bindGroup of this.bindGroups) {\n      let bindIndex = 0\n      bindGroup.bindings.forEach((binding, bindingIndex) => {\n        binding.wgslGroupFragment.forEach((groupFragment, groupFragmentIndex) => {\n          groupsBindings.push({\n            groupIndex: bindGroup.index,\n            visibility: binding.options.visibility,\n            bindIndex,\n            wgslStructFragment: (binding as BindGroupBufferBindingElement).wgslStructFragment,\n            wgslGroupFragment: groupFragment,\n            newLine:\n              bindingIndex === bindGroup.bindings.length - 1 &&\n              groupFragmentIndex === binding.wgslGroupFragment.length - 1,\n          })\n\n          bindIndex++\n        })\n      })\n    }\n\n    for (const groupBinding of groupsBindings) {\n      if (groupBinding.visibility.includes('vertex')) {\n        // do not duplicate structs\n        if (\n          groupBinding.wgslStructFragment &&\n          this.shaders.vertex.head.indexOf(groupBinding.wgslStructFragment) === -1\n        ) {\n          this.shaders.vertex.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.vertex.head}`\n        }\n\n        // do not duplicate struct var as well\n        if (this.shaders.vertex.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n          this.shaders.vertex.head = `${this.shaders.vertex.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n\n          if (groupBinding.newLine) this.shaders.vertex.head += `\\n`\n        }\n      }\n\n      if (this.options.shaders.fragment && groupBinding.visibility.includes('fragment')) {\n        // do not duplicate structs\n        if (\n          groupBinding.wgslStructFragment &&\n          this.shaders.fragment.head.indexOf(groupBinding.wgslStructFragment) === -1\n        ) {\n          this.shaders.fragment.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.fragment.head}`\n        }\n\n        // do not duplicate struct var as well\n        if (this.shaders.fragment.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n          this.shaders.fragment.head = `${this.shaders.fragment.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n\n          if (groupBinding.newLine) this.shaders.fragment.head += `\\n`\n        }\n      }\n\n      if (groupBinding.wgslStructFragment && this.shaders.full.head.indexOf(groupBinding.wgslStructFragment) === -1) {\n        this.shaders.full.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.full.head}`\n      }\n\n      if (this.shaders.full.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n        this.shaders.full.head = `${this.shaders.full.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n\n        if (groupBinding.newLine) this.shaders.full.head += `\\n`\n      }\n    }\n\n    // add attributes to vertex shader only\n    this.shaders.vertex.head = `${this.attributes.wgslStructFragment}\\n${this.shaders.vertex.head}`\n    this.shaders.full.head = `${this.attributes.wgslStructFragment}\\n${this.shaders.full.head}`\n\n    this.shaders.vertex.code = this.shaders.vertex.head + this.options.shaders.vertex.code\n\n    if (typeof this.options.shaders.fragment === 'object')\n      this.shaders.fragment.code = this.shaders.fragment.head + this.options.shaders.fragment.code\n\n    // check if its one shader string with different entry points\n    if (typeof this.options.shaders.fragment === 'object') {\n      if (\n        this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint &&\n        this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0\n      ) {\n        this.shaders.full.code = this.shaders.full.head + this.options.shaders.vertex.code\n      } else {\n        this.shaders.full.code =\n          this.shaders.full.head + this.options.shaders.vertex.code + this.options.shaders.fragment.code\n      }\n    }\n  }\n\n  /* SETUP */\n\n  /**\n   * Get whether the shaders modules have been created\n   * @readonly\n   */\n  get shadersModulesReady(): boolean {\n    return !(!this.shaders.vertex.module || (this.options.shaders.fragment && !this.shaders.fragment.module))\n  }\n\n  /**\n   * Create the {@link shaders}: patch them and create the {@link GPUShaderModule}\n   */\n  createShaders() {\n    this.patchShaders()\n\n    const isSameShader =\n      typeof this.options.shaders.fragment === 'object' &&\n      this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint &&\n      this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0\n\n    this.shaders.vertex.module = this.createShaderModule({\n      code: this.shaders[isSameShader ? 'full' : 'vertex'].code,\n      type: 'vertex',\n    })\n\n    if (this.options.shaders.fragment) {\n      this.shaders.fragment.module = this.createShaderModule({\n        code: this.shaders[isSameShader ? 'full' : 'fragment'].code,\n        type: 'fragment',\n      })\n    }\n  }\n\n  /**\n   * Get default transparency blend state.\n   * @returns - The default transparency blend state.\n   */\n  static getDefaultTransparentBlending(): GPUBlendState {\n    return {\n      color: {\n        srcFactor: 'src-alpha',\n        dstFactor: 'one-minus-src-alpha',\n      },\n      alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n      },\n    }\n  }\n\n  /**\n   * Create the render pipeline {@link descriptor}\n   */\n  createPipelineDescriptor() {\n    if (!this.shadersModulesReady) return\n\n    let vertexLocationIndex = -1\n\n    if (this.options.rendering.targets.length) {\n      // we will assume our renderer alphaMode is set to 'premultiplied'\n      // we either disable blending if mesh if opaque\n      // use a custom blending if set\n      // or use this blend equation if mesh is transparent (see https://limnu.com/webgl-blending-youre-probably-wrong/)\n      if (this.options.rendering.transparent) {\n        this.options.rendering.targets[0].blend = this.options.rendering.targets[0].blend\n          ? this.options.rendering.targets[0].blend\n          : RenderPipelineEntry.getDefaultTransparentBlending()\n      }\n    } else {\n      this.options.rendering.targets = []\n    }\n\n    this.descriptor = {\n      label: this.options.label,\n      layout: this.layout,\n      vertex: {\n        module: this.shaders.vertex.module,\n        entryPoint: this.options.shaders.vertex.entryPoint,\n        buffers: this.attributes.vertexBuffers.map((vertexBuffer) => {\n          return {\n            stepMode: vertexBuffer.stepMode,\n            arrayStride: vertexBuffer.arrayStride * 4, // 4 bytes each\n            attributes: vertexBuffer.attributes.map((attribute) => {\n              vertexLocationIndex++\n              return {\n                shaderLocation: vertexLocationIndex,\n                offset: attribute.bufferOffset, // previous attribute size * 4\n                format: attribute.bufferFormat,\n              }\n            }),\n          }\n        }),\n      },\n      ...(this.options.shaders.fragment && {\n        fragment: {\n          module: this.shaders.fragment.module,\n          entryPoint: (this.options.shaders.fragment as ShaderOptions).entryPoint,\n          targets: this.options.rendering.targets,\n        },\n      }),\n      primitive: {\n        topology: this.options.rendering.topology,\n        frontFace: this.options.rendering.verticesOrder,\n        cullMode: this.options.rendering.cullMode,\n      },\n      ...(this.options.rendering.depth && {\n        depthStencil: {\n          depthWriteEnabled: this.options.rendering.depthWriteEnabled,\n          depthCompare: this.options.rendering.depthCompare,\n          format: this.options.rendering.depthFormat,\n        },\n      }),\n      ...(this.options.rendering.sampleCount > 1 && {\n        multisample: {\n          count: this.options.rendering.sampleCount,\n        },\n      }),\n    } as GPURenderPipelineDescriptor\n  }\n\n  /**\n   * Create the render {@link pipeline}\n   */\n  createRenderPipeline() {\n    if (!this.shadersModulesReady) return\n\n    try {\n      this.pipeline = this.renderer.createRenderPipeline(this.descriptor)\n    } catch (error) {\n      this.status.error = error\n      throwError(error)\n    }\n  }\n\n  /**\n   * Asynchronously create the render {@link pipeline}\n   * @returns - void promise result\n   */\n  async createRenderPipelineAsync(): Promise<void> {\n    if (!this.shadersModulesReady) return\n\n    try {\n      this.pipeline = await this.renderer.createRenderPipelineAsync(this.descriptor)\n      this.status.compiled = true\n      this.status.compiling = false\n      this.status.error = null\n    } catch (error) {\n      this.status.error = error\n      throwError(error)\n    }\n  }\n\n  /**\n   * Call {@link PipelineEntry#compilePipelineEntry | PipelineEntry compilePipelineEntry} method, then create our render {@link pipeline}\n   */\n  async compilePipelineEntry(): Promise<void> {\n    super.compilePipelineEntry()\n\n    if (this.options.useAsync) {\n      await this.createRenderPipelineAsync()\n    } else {\n      this.createRenderPipeline()\n      this.status.compiled = true\n      this.status.compiling = false\n      this.status.error = null\n    }\n  }\n}\n","import { RenderMaterialRenderingOptions } from '../../types/Materials'\r\n\r\n/**\r\n * Compare two sets of {@link RenderMaterialRenderingOptions | rendering options} and returns an array of different options keys if any.\r\n * @param newOptions - rendering new options to compare\r\n * @param baseOptions - rendering options to compare with\r\n * @returns - an array with the options keys that differ, if any.\r\n */\r\nexport const compareRenderingOptions = (\r\n  newOptions: Partial<RenderMaterialRenderingOptions> = {},\r\n  baseOptions: Partial<RenderMaterialRenderingOptions> = {}\r\n): Array<keyof RenderMaterialRenderingOptions> => {\r\n  return Object.keys(newOptions).filter((key) => {\r\n    if (Array.isArray(newOptions[key])) {\r\n      // 'targets' property\r\n      return JSON.stringify(newOptions[key]) !== JSON.stringify(baseOptions[key])\r\n    } else {\r\n      return newOptions[key] !== baseOptions[key]\r\n    }\r\n  }) as Array<keyof RenderMaterialRenderingOptions>\r\n}\r\n","export default /* wgsl */ `\nstruct VSOutput {\n  @builtin(position) position: vec4f,\n  @location(0) uv: vec2f,\n  @location(1) normal: vec3f,\n  @location(2) worldPosition: vec3f,\n  @location(3) viewDirection: vec3f,\n};\n\n@vertex fn main(\n  attributes: Attributes,\n) -> VSOutput {\n  var vsOutput: VSOutput;\n\n  vsOutput.position = getOutputPosition(attributes.position);\n  vsOutput.uv = attributes.uv;\n  vsOutput.normal = getWorldNormal(attributes.normal);\n  let worldPosition: vec4f = getWorldPosition(attributes.position);\n  vsOutput.worldPosition = worldPosition.xyz / worldPosition.w;\n  vsOutput.viewDirection = camera.position - vsOutput.worldPosition;\n  \n  return vsOutput;\n}`\n","export default /* wgsl */ `\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n};\r\n\r\n@vertex fn main(\r\n  attributes: Attributes,\r\n) -> VSOutput {\r\n  var vsOutput: VSOutput;\r\n\r\n  vsOutput.position = vec4f(attributes.position, 1.0);\r\n  vsOutput.uv = attributes.uv;\r\n  \r\n  return vsOutput;\r\n}`\r\n","export default /* wgsl */ `\r\n@fragment fn main() -> @location(0) vec4f {\r\n  return vec4(0.0, 0.0, 0.0, 1.0);\r\n}`\r\n","import { Material } from './Material'\nimport { isRenderer, Renderer, CameraRenderer } from '../renderers/utils'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport {\n  AllowedGeometries,\n  RenderMaterialAttributes,\n  RenderMaterialOptions,\n  RenderMaterialParams,\n  RenderMaterialRenderingOptions,\n  ShaderOptions,\n} from '../../types/Materials'\nimport { RenderPipelineEntry } from '../pipelines/RenderPipelineEntry'\nimport { throwWarning } from '../../utils/utils'\nimport { compareRenderingOptions } from './utils'\nimport default_projected_vsWgsl from '../shaders/chunks/default/default_projected_vs.wgsl'\nimport default_vsWgsl from '../shaders/chunks/default/default_vs.wgsl'\nimport default_fsWgsl from '../shaders/chunks/default/default_fs.wgsl'\n\n/**\n * Create a {@link Material} specifically built to draw the vertices of a {@link core/geometries/Geometry.Geometry | Geometry}. Internally used by all kind of Meshes.\n *\n * ## Render pipeline\n *\n * A {@link RenderMaterial} automatically creates a {@link RenderPipelineEntry}. Once all the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} have been created, they are sent with the shaders code and the {@link RenderMaterialOptions#rendering | rendering options} to the {@link RenderPipelineEntry}, which is in turns responsible for creating the {@link GPURenderPipeline}.\n *\n * After the {@link GPURenderPipeline} has been successfully compiled, the {@link RenderMaterial} is considered to be ready.\n */\nexport class RenderMaterial extends Material {\n  /** {@link RenderPipelineEntry | Render pipeline entry} used by this {@link RenderMaterial} */\n  pipelineEntry: RenderPipelineEntry | null\n  /** Mandatory {@link RenderMaterialAttributes | geometry attributes} to pass to the {@link RenderPipelineEntry | render pipeline entry} */\n  attributes: RenderMaterialAttributes | null\n  /** Options used to create this {@link RenderMaterial} */\n  options: RenderMaterialOptions\n\n  /**\n   * RenderMaterial constructor\n   * @param renderer - our renderer class object\n   * @param parameters - {@link RenderMaterialParams | parameters} used to create our RenderMaterial\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters: RenderMaterialParams) {\n    const type = 'RenderMaterial'\n\n    renderer = isRenderer(renderer, type)\n\n    if (!parameters.shaders) {\n      parameters.shaders = {}\n    }\n\n    if (!parameters.shaders?.vertex) {\n      parameters.shaders.vertex = {\n        code: parameters.useProjection ? default_projected_vsWgsl : default_vsWgsl,\n        entryPoint: 'main',\n      }\n    }\n\n    if (!parameters.shaders.vertex.entryPoint) {\n      parameters.shaders.vertex.entryPoint = 'main'\n    }\n\n    if (parameters.shaders.fragment === undefined) {\n      ;(parameters.shaders.fragment as ShaderOptions) = {\n        entryPoint: 'main',\n        code: default_fsWgsl,\n      }\n    }\n\n    super(renderer, parameters)\n\n    this.type = type\n    this.renderer = renderer\n\n    const { shaders } = parameters\n\n    // rendering options\n    const {\n      useProjection,\n      transparent,\n      depth,\n      depthWriteEnabled,\n      depthCompare,\n      depthFormat,\n      cullMode,\n      sampleCount,\n      verticesOrder,\n      topology,\n    } = parameters\n\n    let { targets } = parameters\n\n    // patch default target format if not set\n    if (targets === undefined) {\n      targets = [\n        {\n          format: this.renderer.options.context.format,\n        },\n      ]\n    }\n    if (targets && targets.length && !targets[0].format) {\n      targets[0].format = this.renderer.options.context.format\n    }\n\n    this.options = {\n      ...this.options,\n      shaders,\n      rendering: {\n        useProjection,\n        transparent,\n        depth,\n        depthWriteEnabled,\n        depthCompare,\n        depthFormat,\n        cullMode,\n        sampleCount,\n        targets,\n        verticesOrder,\n        topology,\n      },\n    } as RenderMaterialOptions\n\n    this.attributes = null\n    // will be set at render if needed\n    this.pipelineEntry = null\n  }\n\n  /**\n   * Set or reset this {@link RenderMaterial} {@link RenderMaterial.renderer | renderer}. Will also update the renderer camera bind group if needed.\n   * @param renderer - New {@link Renderer} or {@link GPUCurtains} instance to use.\n   */\n  setRenderer(renderer: Renderer | GPUCurtains) {\n    // remove old camera bind group\n    if (this.useCameraBindGroup && this.renderer) {\n      ;(this.renderer as CameraRenderer).cameraLightsBindGroup.consumers.delete(this.uuid)\n    }\n\n    super.setRenderer(renderer)\n\n    // update new camera bind group\n    if (this.useCameraBindGroup) {\n      this.bindGroups[0] = (this.renderer as CameraRenderer).cameraLightsBindGroup\n      ;(this.renderer as CameraRenderer).cameraLightsBindGroup.consumers.add(this.uuid)\n    }\n  }\n\n  /**\n   * Set (or reset) the current {@link pipelineEntry}. Use the {@link Renderer#pipelineManager | renderer pipelineManager} to check whether we can get an already created {@link RenderPipelineEntry} from cache or if we should create a new one.\n   */\n  setPipelineEntry() {\n    this.pipelineEntry = this.renderer.pipelineManager.createRenderPipeline(this)\n  }\n\n  /**\n   * Compile the {@link RenderPipelineEntry}\n   */\n  async compilePipelineEntry(): Promise<void> {\n    await this.pipelineEntry.compilePipelineEntry()\n  }\n\n  /**\n   * Check if attributes and all bind groups are ready, create them if needed, set {@link RenderPipelineEntry} bind group buffers and compile the pipeline.\n   */\n  async compileMaterial(): Promise<void> {\n    if (this.ready) return\n\n    super.compileMaterial()\n\n    if (this.attributes && !this.pipelineEntry) {\n      this.setPipelineEntry()\n    }\n\n    if (this.pipelineEntry && this.pipelineEntry.canCompile) {\n      await this.compilePipelineEntry()\n    }\n  }\n\n  /**\n   * Set or reset one of the {@link RenderMaterialRenderingOptions | rendering options}. Should be use with great caution, because if the {@link RenderPipelineEntry#pipeline | render pipeline} has already been compiled, it can cause a pipeline flush.\n   * @param renderingOptions - new {@link RenderMaterialRenderingOptions | rendering options} properties to be set\n   */\n  setRenderingOptions(renderingOptions: Partial<RenderMaterialRenderingOptions> = {}) {\n    // patch original transparent blending if it had been lost\n    if (renderingOptions.transparent && renderingOptions.targets.length && !renderingOptions.targets[0].blend) {\n      renderingOptions.targets[0].blend = RenderPipelineEntry.getDefaultTransparentBlending()\n    }\n\n    const newProperties = compareRenderingOptions(renderingOptions, this.options.rendering)\n\n    const oldRenderingOptions = { ...this.options.rendering }\n\n    // apply new options\n    this.options.rendering = { ...this.options.rendering, ...renderingOptions }\n\n    if (this.pipelineEntry) {\n      if (this.pipelineEntry.ready && newProperties.length) {\n        if (!this.renderer.production) {\n          const oldProps = newProperties.map((key) => {\n            return {\n              [key]: Array.isArray(oldRenderingOptions[key])\n                ? (oldRenderingOptions[key] as []).map((optKey) => optKey)\n                : oldRenderingOptions[key],\n            }\n          })\n\n          const newProps = newProperties.map((key) => {\n            return {\n              [key]: Array.isArray(renderingOptions[key])\n                ? (renderingOptions[key] as []).map((optKey) => optKey)\n                : renderingOptions[key],\n            }\n          })\n\n          throwWarning(\n            `${\n              this.options.label\n            }: the change of rendering options is causing this RenderMaterial pipeline to be recompiled. This should be avoided.\\n\\nOld rendering options: ${JSON.stringify(\n              oldProps.reduce((acc, v) => {\n                return { ...acc, ...v }\n              }, {}),\n              null,\n              4\n            )}\\n\\n--------\\n\\nNew rendering options: ${JSON.stringify(\n              newProps.reduce((acc, v) => {\n                return { ...acc, ...v }\n              }, {}),\n              null,\n              4\n            )}`\n          )\n        }\n\n        // recreate the pipeline entry totally\n        // if we're lucky we might get one from the cache\n        this.setPipelineEntry()\n      } else {\n        this.pipelineEntry.options.rendering = { ...this.pipelineEntry.options.rendering, ...this.options.rendering }\n      }\n    }\n  }\n\n  /* ATTRIBUTES */\n\n  /**\n   * Compute geometry if needed and get all useful geometry properties needed to create attributes buffers\n   * @param geometry - the geometry to draw\n   */\n  setAttributesFromGeometry(geometry: AllowedGeometries) {\n    this.attributes = {\n      wgslStructFragment: geometry.wgslStructFragment,\n      vertexBuffers: geometry.vertexBuffers,\n      layoutCacheKey: geometry.layoutCacheKey,\n    }\n  }\n\n  /**\n   * Get the {@link RenderMaterial} pipeline buffers cache key based on its {@link core/bindGroups/BindGroup.BindGroup | BindGroup} cache keys and eventually {@link attributes} cache keys.\n   * @returns - Current cache key.\n   * @readonly\n   */\n  get cacheKey(): string {\n    let cacheKey = this.attributes?.layoutCacheKey || ''\n    return cacheKey + super.cacheKey\n  }\n\n  /* BIND GROUPS */\n\n  /**\n   * Get whether this {@link RenderMaterial} uses the renderer camera and lights bind group.\n   * @readonly\n   * */\n  get useCameraBindGroup(): boolean {\n    return 'cameraLightsBindGroup' in this.renderer && this.options.rendering.useProjection\n  }\n\n  /**\n   * Create the bind groups if they need to be created, but first add camera and lights bind group if needed.\n   */\n  createBindGroups() {\n    // camera and lights first!\n    if (this.useCameraBindGroup) {\n      this.bindGroups.push((this.renderer as CameraRenderer).cameraLightsBindGroup)\n      ;(this.renderer as CameraRenderer).cameraLightsBindGroup.consumers.add(this.uuid)\n    }\n\n    super.createBindGroups()\n  }\n\n  /**\n   * Update all bind groups, except for the camera and light bind groups if present, as it is already updated by the renderer itself.\n   */\n  updateBindGroups() {\n    const startBindGroupIndex = this.useCameraBindGroup ? 1 : 0\n\n    if (this.useCameraBindGroup && this.bindGroups.length) {\n      if (this.bindGroups[0].needsPipelineFlush && this.pipelineEntry.ready) {\n        this.pipelineEntry.flushPipelineEntry(this.bindGroups)\n      }\n    }\n\n    for (let i = startBindGroupIndex; i < this.bindGroups.length; i++) {\n      this.updateBindGroup(this.bindGroups[i])\n    }\n  }\n}\n","import { BufferBinding } from '../../../bindings/BufferBinding'\nimport { Geometry } from '../../../geometries/Geometry'\nimport { BufferElement } from '../../../bindings/bufferElements/BufferElement'\n\n/** Defines the parameters used to create the vertex shader. */\nexport interface VertexShaderInputParams {\n  /** Array of {@link BufferBinding} used to create the vertex shader. Typical {@link BufferBinding} used are `instances`, and the ones that include `morphTarget` or `skin` in their `name` properties. */\n  bindings?: BufferBinding[]\n  /** {@link Geometry} used to create the vertex shader. Will use the {@link Geometry#vertexBuffers | vertexBuffers} and {@link Geometry#instancesCount | instancesCount} properties. */\n  geometry: Geometry\n}\n\n/**\n * Generate the part of the vertex shader dedicated to compute the output `worldPosition` and `normal` vectors. Account for instancing (using a {@link BufferBinding} with `instances` name if any), morph targets and skinning using the provided {@link Geometry} and {@link BufferBinding} array parameters.\n *\n * Used internally by the various {@link core/shadows/Shadow.Shadow | Shadow} classes and the {@link extras/gltf/GLTFScenesManager | GLTFScenesManager} class.\n *\n * @param parameters - {@link VertexShaderInputParams} used to compute the output `worldPosition` and `normal` vectors.\n * @returns - The part of the vertex shader dedicated to computing the output `worldPosition` and `normal` vectors.\n */\nexport const getVertexPositionNormal = ({ bindings = [], geometry }: VertexShaderInputParams): string => {\n  let output = ''\n\n  output += geometry.vertexBuffers\n    .map((vertexBuffer) =>\n      vertexBuffer.attributes\n        .map((attribute) => {\n          return /* wgsl */ `\n  var ${attribute.name} = attributes.${attribute.name};`\n        })\n        .join('')\n    )\n    .join('\\n')\n\n  const hasInstances = geometry.instancesCount > 1\n\n  const skinJoints = []\n  const skinWeights = []\n  if (geometry.vertexBuffers && geometry.vertexBuffers.length) {\n    geometry.vertexBuffers.forEach((vertexBuffer) => {\n      vertexBuffer.attributes.forEach((attribute) => {\n        if (attribute.name.includes('joints')) {\n          skinJoints.push(attribute)\n        }\n\n        if (attribute.name.includes('weights')) {\n          skinWeights.push(attribute)\n        }\n      })\n    })\n  }\n\n  const skinBindings = bindings.filter((binding) => binding.name.includes('skin'))\n  const morphTargetsBindings = bindings.filter((binding) => binding.name.includes('morphTarget')) as BufferBinding[]\n\n  // morph targets\n  morphTargetsBindings.forEach((binding) => {\n    const morphAttributes = Object.values(binding.inputs).filter((input) => input.name !== 'weight')\n\n    morphAttributes.forEach((input) => {\n      const bindingType = BufferElement.getType(input.type)\n      const attribute = geometry.getAttributeByName(input.name)\n\n      if (attribute) {\n        const attributeType = attribute.type\n\n        // we could have only one attribute that's morphed\n        const attributeBindingVar =\n          morphAttributes.length === 1\n            ? `${binding.name}.${input.name}[attributes.vertexIndex]`\n            : `${binding.name}.elements[attributes.vertexIndex].${input.name}`\n\n        if (bindingType === attributeType) {\n          output += `${input.name} += ${binding.name}.weight * ${attributeBindingVar};\\n\\t`\n        } else {\n          // TODO other cases?!\n          if (bindingType === 'vec3f' && attributeType === 'vec4f') {\n            output += `${input.name} += ${binding.name}.weight * vec4(${attributeBindingVar}, 0.0);\\n\\t`\n          }\n        }\n      }\n    })\n  })\n\n  output += /* wgsl */ `\n  var worldPosition: vec4f = vec4(position, 1.0);\n  `\n\n  // skins\n  const hasSkin = skinJoints.length && skinWeights.length && skinBindings.length\n\n  if (hasSkin) {\n    output += hasInstances\n      ? `\n  var instancesWorldPosition = array<vec4f, ${geometry.instancesCount}>();\n  var instancesNormal = array<vec3f, ${geometry.instancesCount}>();\n      `\n      : ''\n\n    output += `\n  let skinJoints: vec4f = ${skinJoints.map((skinJoint) => skinJoint.name).join(' + ')};`\n\n    output += `\n  var skinWeights: vec4f = ${skinWeights.map((skinWeight) => skinWeight.name).join(' + ')};\n  \n  let skinWeightsSum = dot(skinWeights, vec4(1.0));\n  if(skinWeightsSum > 0.0) {\n    skinWeights = skinWeights / skinWeightsSum;\n  }\n    `\n\n    skinBindings.forEach((binding, bindingIndex) => {\n      output += /* wgsl */ `\n  ${hasInstances ? '// instancing with different skins: joints calculations for skin ' + bindingIndex + '\\n' : ''}\n  // position\n  let skinMatrix_${bindingIndex}: mat4x4f = \n    skinWeights.x * ${binding.name}.joints[u32(skinJoints.x)].jointMatrix +\n    skinWeights.y * ${binding.name}.joints[u32(skinJoints.y)].jointMatrix +\n    skinWeights.z * ${binding.name}.joints[u32(skinJoints.z)].jointMatrix +\n    skinWeights.w * ${binding.name}.joints[u32(skinJoints.w)].jointMatrix;\n      \n  ${\n    hasInstances\n      ? 'instancesWorldPosition[' + bindingIndex + '] = skinMatrix_' + bindingIndex + ' * worldPosition;'\n      : 'worldPosition = skinMatrix_' + bindingIndex + ' * worldPosition;'\n  }\n      \n  // normal\n  let skinNormalMatrix_${bindingIndex}: mat4x4f = \n    skinWeights.x * ${binding.name}.joints[u32(skinJoints.x)].normalMatrix +\n    skinWeights.y * ${binding.name}.joints[u32(skinJoints.y)].normalMatrix +\n    skinWeights.z * ${binding.name}.joints[u32(skinJoints.z)].normalMatrix +\n    skinWeights.w * ${binding.name}.joints[u32(skinJoints.w)].normalMatrix;\n    \n  let skinNormalMatrix_${bindingIndex}_3: mat3x3f = mat3x3f(\n    vec3(skinNormalMatrix_${bindingIndex}[0].xyz),\n    vec3(skinNormalMatrix_${bindingIndex}[1].xyz),\n    vec3(skinNormalMatrix_${bindingIndex}[2].xyz)\n  );\n      \n  ${\n    hasInstances\n      ? 'instancesNormal[' + bindingIndex + '] = skinNormalMatrix_' + bindingIndex + '_3 * normal;'\n      : 'normal = skinNormalMatrix_' + bindingIndex + '_3 * normal;'\n  }\n      `\n    })\n  }\n\n  output += /* wgsl */ `\n  var modelMatrix: mat4x4f;\n  `\n\n  if (hasInstances) {\n    if (hasSkin) {\n      output += /* wgsl */ `\n  worldPosition = instancesWorldPosition[attributes.instanceIndex];\n  normal = instancesNormal[attributes.instanceIndex];\n      `\n    }\n\n    output += /* wgsl */ `\n  modelMatrix = instances.matrices[attributes.instanceIndex].model;\n  worldPosition = modelMatrix * worldPosition;\n  \n  normal = normalize(instances.matrices[attributes.instanceIndex].normal * normal);\n    `\n  } else {\n    output += /* wgsl */ `\n  modelMatrix = matrices.model;\n  worldPosition = modelMatrix * worldPosition;\n  normal = getWorldNormal(normal);\n    `\n  }\n\n  return output\n}\n\n/**\n * Generate the vertex shader computing the output `worldPosition`, `normal` and other various outputted vectors such as `position`, `viewDirection` and eventually `tangent`. Account for instancing (using a {@link BufferBinding} with `instances` name if any), morph targets and skinning using the provided {@link Geometry} and {@link BufferBinding} array parameters.\n *\n * Uses {@link getVertexPositionNormal} first to compute the `worldPosition` and `normal` vectors, then output everything using the `vsOutput` WGSL struct.\n *\n * Used internally by the {@link extras/gltf/GLTFScenesManager | GLTFScenesManager} class.\n *\n * @param parameters - {@link VertexShaderInputParams} used to generate the vertex shader.\n * @returns - The vertex shader code generated.\n */\nexport const getFullVertexOutput = ({ bindings = [], geometry }: VertexShaderInputParams): string => {\n  let output = getVertexPositionNormal({ bindings, geometry })\n\n  output += /* wgsl */ `\n  vsOutput.position = camera.projection * camera.view * worldPosition;\n  vsOutput.normal = normal;\n  vsOutput.worldPosition = worldPosition.xyz / worldPosition.w;\n  vsOutput.viewDirection = camera.position - vsOutput.worldPosition;\n  `\n\n  const tangentAttribute = geometry.getAttributeByName('tangent')\n  if (tangentAttribute) {\n    output += /* wgsl */ `\n  vsOutput.tangent = normalize(modelMatrix * tangent);\n    `\n  }\n\n  // output all attributes except position, normal and tangent\n  // since we've handled them above\n  output += geometry.vertexBuffers\n    .map((vertexBuffer) =>\n      vertexBuffer.attributes\n        .filter((attr) => attr.name !== 'normal' && attr.name !== 'position' && attr.name !== 'tangent')\n        .map((attribute) => {\n          return /* wgsl */ `\n  vsOutput.${attribute.name} = ${attribute.name};`\n        })\n        .join('')\n    )\n    .join('\\n')\n\n  return output\n}\n","import { DirectionalLight } from '../../../lights/DirectionalLight'\nimport { PointLight } from '../../../lights/PointLight'\nimport { CameraRenderer } from '../../../renderers/utils'\nimport { getVertexPositionNormal, VertexShaderInputParams } from '../vertex/get_vertex_output'\n\n// DIRECTIONAL SHADOWS\n\n/**\n * Get default ({@link DirectionalLight}) shadow map pass vertex shader.\n * @param lightIndex - Index of the {@link DirectionalLight} for which to render the depth pass.\n * @param parameters - {@link VertexShaderInputParams} used to compute the output `worldPosition` and `normal` vectors.\n */\nexport const getDefaultShadowDepthVs = (\n  lightIndex = 0,\n  { bindings = [], geometry }: VertexShaderInputParams\n): string => /* wgsl */ `\n@vertex fn main(\n  attributes: Attributes,\n) -> @builtin(position) vec4f {  \n  let directionalShadow: DirectionalShadowsElement = directionalShadows.directionalShadowsElements[${lightIndex}];\n  \n  ${getVertexPositionNormal({ bindings, geometry })}\n  \n  let worldPos = worldPosition.xyz / worldPosition.w;\n  let lightDirection: vec3f = normalize(worldPos - directionalLights.elements[${lightIndex}].direction);\n  let NdotL: f32 = dot(normalize(normal), lightDirection);\n  let sinNdotL = sqrt(1.0 - NdotL * NdotL);\n  let normalBias: f32 = directionalShadow.normalBias * sinNdotL;\n  \n  worldPosition = vec4(worldPos - normal * normalBias, 1.0);\n  \n  return directionalShadow.projectionMatrix * directionalShadow.viewMatrix * worldPosition;\n}`\n\n/** Helper chunk to get the PCF soft shadow generated by a given {@link DirectionalLight}. */\nexport const getPCFShadowContribution: string = /* wgsl */ `\nfn getPCFShadowContribution(index: i32, worldPosition: vec3f, depthTexture: texture_depth_2d) -> f32 {\n  let directionalShadow: DirectionalShadowsElement = directionalShadows.directionalShadowsElements[index];\n  \n  // get shadow coords\n  var shadowCoords: vec3f = vec3((directionalShadow.projectionMatrix * directionalShadow.viewMatrix * vec4(worldPosition, 1.0)).xyz);\n  \n  // Convert XY to (0, 1)\n  // Y is flipped because texture coords are Y-down.\n  shadowCoords = vec3(\n    shadowCoords.xy * vec2(0.5, -0.5) + vec2(0.5),\n    shadowCoords.z\n  );\n  \n  var visibility = 0.0;\n  \n  let inFrustum: bool = shadowCoords.x >= 0.0 && shadowCoords.x <= 1.0 && shadowCoords.y >= 0.0 && shadowCoords.y <= 1.0;\n  let frustumTest: bool = inFrustum && shadowCoords.z <= 1.0;\n  \n  if(frustumTest) {\n    // Percentage-closer filtering. Sample texels in the region\n    // to smooth the result.\n    let size: vec2f = vec2f(textureDimensions(depthTexture).xy);\n  \n    let texelSize: vec2f = 1.0 / size;\n    \n    let sampleCount: i32 = directionalShadow.pcfSamples;\n    let maxSamples: f32 = f32(sampleCount) - 1.0;\n  \n    for (var x = 0; x < sampleCount; x++) {\n      for (var y = 0; y < sampleCount; y++) {\n        let offset = texelSize * vec2(\n          f32(x) - maxSamples * 0.5,\n          f32(y) - maxSamples * 0.5\n        );\n        \n        visibility += textureSampleCompareLevel(\n          depthTexture,\n          depthComparisonSampler,\n          shadowCoords.xy + offset,\n          shadowCoords.z - directionalShadow.bias\n        );\n      }\n    }\n    visibility /= f32(sampleCount * sampleCount);\n    \n    visibility = clamp(visibility, 1.0 - clamp(directionalShadow.intensity, 0.0, 1.0), 1.0);\n  }\n  else {\n    visibility = 1.0;\n  }\n  \n  return visibility;\n}\n`\n\n/**\n * Get the global PCF soft shadows contributions from all the current {@link CameraRenderer} {@link DirectionalLight}.\n * @param renderer - {@link CameraRenderer} used by the {@link DirectionalLight}.\n */\nexport const getPCFDirectionalShadows = (renderer: CameraRenderer): string => {\n  const directionalLights = renderer.shadowCastingLights.filter(\n    (light) => light.type === 'directionalLights'\n  ) as DirectionalLight[]\n\n  const minDirectionalLights = Math.max(renderer.lightsBindingParams.directionalLights.max, 1)\n\n  return /* wgsl */ `\nfn getPCFDirectionalShadows(worldPosition: vec3f) -> array<f32, ${minDirectionalLights}> {\n  var directionalShadowContribution: array<f32, ${minDirectionalLights}>;\n  \n  var lightDirection: vec3f;\n  \n  ${directionalLights\n    .map((light, index) => {\n      return `lightDirection = worldPosition - directionalLights.elements[${index}].direction;\n      \n      ${\n        light.shadow.isActive\n          ? `\n      if(directionalShadows.directionalShadowsElements[${index}].isActive > 0) {\n        directionalShadowContribution[${index}] = getPCFShadowContribution(\n          ${index},\n          worldPosition,\n          shadowDepthTexture${index}\n        );\n      } else {\n        directionalShadowContribution[${index}] = 1.0;\n      }\n          `\n          : `directionalShadowContribution[${index}] = 1.0;`\n      }`\n    })\n    .join('\\n')}\n  \n  return directionalShadowContribution;\n}\n`\n}\n\n// POINT SHADOWS\n\n/**\n * Get {@link PointLight} shadow map pass vertex shader.\n * @param lightIndex - Index of the {@link PointLight} for which to render the depth pass.\n * @param parameters - {@link VertexShaderInputParams} used to compute the output `worldPosition` and `normal` vectors.\n */\nexport const getDefaultPointShadowDepthVs = (\n  lightIndex = 0,\n  { bindings = [], geometry }: VertexShaderInputParams\n) => /* wgsl */ `\nstruct PointShadowVSOutput {\n  @builtin(position) position: vec4f,\n  @location(0) worldPosition: vec3f,\n}\n\n@vertex fn main(\n  attributes: Attributes,\n) -> PointShadowVSOutput {  \n  var pointShadowVSOutput: PointShadowVSOutput;\n  \n  ${getVertexPositionNormal({ bindings, geometry })}\n  \n  let worldPos = worldPosition.xyz / worldPosition.w;\n  \n  let pointShadow: PointShadowsElement = pointShadows.pointShadowsElements[${lightIndex}];\n  \n  let lightDirection: vec3f = normalize(pointLights.elements[${lightIndex}].position - worldPos);\n  let NdotL: f32 = dot(normalize(normal), lightDirection);\n  let sinNdotL = sqrt(1.0 - NdotL * NdotL);\n  let normalBias: f32 = pointShadow.normalBias * sinNdotL;\n  \n  worldPosition = vec4(worldPos - normal * normalBias, 1.0);\n    \n  var shadowPosition: vec4f = pointShadow.projectionMatrix * pointShadow.viewMatrices[pointShadow.face] * worldPosition;\n\n  pointShadowVSOutput.position = shadowPosition;\n  pointShadowVSOutput.worldPosition = worldPos;\n\n  return pointShadowVSOutput;\n}`\n\n/**\n * Get {@link PointLight} shadow map pass fragment shader.\n * @param lightIndex - Index of the {@link PointLight} for which to render the depth pass.\n */\nexport const getDefaultPointShadowDepthFs = (lightIndex = 0): string => /* wgsl */ `\nstruct PointShadowVSOutput {\n  @builtin(position) position: vec4f,\n  @location(0) worldPosition: vec3f,\n}\n\n@fragment fn main(fsInput: PointShadowVSOutput) -> @builtin(frag_depth) f32 {\n  // get distance between fragment and light source\n  var lightDistance: f32 = length(fsInput.worldPosition - pointLights.elements[${lightIndex}].position);\n  \n  let pointShadow: PointShadowsElement = pointShadows.pointShadowsElements[${lightIndex}];\n  \n  // map to [0, 1] range by dividing by far plane - near plane\n  lightDistance = (lightDistance - pointShadow.cameraNear) / (pointShadow.cameraFar - pointShadow.cameraNear);\n  \n  // write this as modified depth\n  return clamp(lightDistance, 0.0, 1.0);\n}`\n\n/** Helper chunk to get the PCF soft shadow generated by a given {@link PointLight}. */\nexport const getPCFPointShadowContribution: string = /* wgsl */ `\nfn getPCFPointShadowContribution(index: i32, shadowPosition: vec4f, depthCubeTexture: texture_depth_cube) -> f32 {\n  let pointShadow: PointShadowsElement = pointShadows.pointShadowsElements[index];\n\n  // Percentage-closer filtering. Sample texels in the region\n  // to smooth the result.\n  var visibility = 0.0;\n  var closestDepth = 0.0;\n  let currentDepth: f32 = shadowPosition.w;\n  let cameraRange: f32 = pointShadow.cameraFar - pointShadow.cameraNear;\n  let normalizedDepth: f32 = (shadowPosition.w - pointShadow.cameraNear) / cameraRange;\n\n  let maxSize: f32 = f32(max(textureDimensions(depthCubeTexture).x, textureDimensions(depthCubeTexture).y));\n\n  let texelSize: vec3f = vec3(1.0 / maxSize);\n  let sampleCount: i32 = pointShadow.pcfSamples;\n  let maxSamples: f32 = f32(sampleCount) - 1.0;\n  \n  for (var x = 0; x < sampleCount; x++) {\n    for (var y = 0; y < sampleCount; y++) {\n      for (var z = 0; z < sampleCount; z++) {\n        let offset = texelSize * vec3(\n          f32(x) - maxSamples * 0.5,\n          f32(y) - maxSamples * 0.5,\n          f32(z) - maxSamples * 0.5\n        );\n\n        closestDepth = textureSampleCompareLevel(\n          depthCubeTexture,\n          depthComparisonSampler,\n          shadowPosition.xyz + offset,\n          normalizedDepth - pointShadow.bias\n        );\n\n        closestDepth *= cameraRange;\n\n        visibility += select(0.0, 1.0, currentDepth <= closestDepth);\n      }\n    }\n  }\n  \n  visibility /= f32(sampleCount * sampleCount * sampleCount);\n  \n  visibility = clamp(visibility, 1.0 - clamp(pointShadow.intensity, 0.0, 1.0), 1.0);\n  \n  return visibility;\n}`\n\n/**\n * Get the global PCF soft shadows contributions from all the current {@link CameraRenderer} {@link PointLight}.\n * @param renderer - {@link CameraRenderer} used by the {@link PointLight}.\n */\nexport const getPCFPointShadows = (renderer: CameraRenderer): string => {\n  const pointLights = renderer.shadowCastingLights.filter((light) => light.type === 'pointLights') as PointLight[]\n\n  const minPointLights = Math.max(renderer.lightsBindingParams.pointLights.max, 1)\n\n  return /* wgsl */ `\nfn getPCFPointShadows(worldPosition: vec3f) -> array<f32, ${minPointLights}> {\n  var pointShadowContribution: array<f32, ${minPointLights}>;\n  \n  var lightDirection: vec3f;\n  var lightDistance: f32;\n  var lightColor: vec3f;\n  \n  ${pointLights\n    .map((light, index) => {\n      return `lightDirection = pointLights.elements[${index}].position - worldPosition;\n      \n      lightDistance = length(lightDirection);\n      lightColor = pointLights.elements[${index}].color * rangeAttenuation(pointLights.elements[${index}].range, lightDistance);\n      \n      ${\n        light.shadow.isActive\n          ? `\n      if(pointShadows.pointShadowsElements[${index}].isActive > 0 && length(lightColor) > 0.0001) {\n        pointShadowContribution[${index}] = getPCFPointShadowContribution(\n          ${index},\n          vec4(lightDirection, length(lightDirection)),\n          pointShadowCubeDepthTexture${index}\n        );\n      } else {\n        pointShadowContribution[${index}] = 1.0;\n      }\n            `\n          : `pointShadowContribution[${index}] = 1.0;`\n      }`\n    })\n    .join('\\n')}\n  \n  return pointShadowContribution;\n}\n`\n}\n\n/** Helper chunk to get the PCF soft shadow generated by all the {@link DirectionalLight} and {@link PointLight}. */\nexport const getPCFShadows: string = /* wgsl */ `\n  let pointShadows = getPCFPointShadows(worldPosition);\n  let directionalShadows = getPCFDirectionalShadows(worldPosition);\n`\n\n/** Helper chunk to apply a given {@link DirectionalLight} shadow to its light contribution. */\nexport const applyDirectionalShadows: string = /* wgsl */ `\n    directLight.color *= directionalShadows[i];\n`\n\n/** Helper chunk to apply a given {@link PointLight} shadow to its light contribution. */\nexport const applyPointShadows: string = /* wgsl */ `\n    directLight.color *= pointShadows[i];\n`\n","import { CameraRenderer, isCameraRenderer } from '../renderers/utils'\nimport { Vec2 } from '../../math/Vec2'\nimport { Mat4 } from '../../math/Mat4'\nimport { Texture } from '../textures/Texture'\nimport { RenderTarget } from '../renderPasses/RenderTarget'\nimport { Sampler } from '../samplers/Sampler'\nimport { ProjectedMesh } from '../renderers/GPURenderer'\nimport { RenderMaterial } from '../materials/RenderMaterial'\nimport { DirectionalLight } from '../lights/DirectionalLight'\nimport { PointLight } from '../lights/PointLight'\nimport { getDefaultShadowDepthVs } from '../shaders/chunks/shading/shadows'\nimport { BufferBinding } from '../bindings/BufferBinding'\nimport { RenderMaterialParams, ShaderOptions } from '../../types/Materials'\nimport { Input } from '../../types/BindGroups'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { Geometry } from '../geometries/Geometry'\nimport { VertexShaderInputParams } from '../shaders/chunks/vertex/get_vertex_output'\n\n/** Defines all types of shadows. */\nexport type ShadowsType = 'directionalShadows' | 'pointShadows'\n\n/** @ignore */\nexport const shadowStruct: Record<string, Input> = {\n  isActive: {\n    type: 'i32',\n    value: 0,\n  },\n  pcfSamples: {\n    type: 'i32',\n    value: 0,\n  },\n  bias: {\n    type: 'f32',\n    value: 0,\n  },\n  normalBias: {\n    type: 'f32',\n    value: 0,\n  },\n  intensity: {\n    type: 'f32',\n    value: 0,\n  },\n}\n\n/**\n * Base parameters used to create a {@link Shadow}.\n */\nexport interface ShadowBaseParams {\n  /** Intensity of the shadow in the [0, 1] range. Default to `1`. */\n  intensity?: number\n  /** Shadow map bias. Default to `0`. */\n  bias?: number\n  /** Shadow map normal bias. Default to `0`. */\n  normalBias?: number\n  /** Number of samples to use for Percentage Closer Filtering calculations in the shader. Increase for smoother shadows, at the cost of performance. Default to `1`. */\n  pcfSamples?: number\n  /** Size of the depth {@link Texture} to use. Default to `Vec2(512)`. */\n  depthTextureSize?: Vec2\n  /** Format of the  depth {@link Texture} to use. Default to `depth24plus`. */\n  depthTextureFormat?: GPUTextureFormat\n  /** Whether the shadow should be automatically rendered each frame or not. Should be set to `false` if the scene is static and be rendered manually instead. Default to `true`. */\n  autoRender?: boolean\n  /** The {@link core/lights/Light.Light | light} that will be used to cast shadows. */\n  light: DirectionalLight | PointLight\n}\n\n/**\n * Used as a base class to create a shadow map.\n *\n * A {@link Shadow} creates a {@link depthTexture | depth Texture} (that can vary based on the light type) and a {@link depthComparisonSampler | depth comparison Sampler}.\n *\n * Each {@link ProjectedMesh | Mesh} added to the {@link Shadow} will be rendered beforehand to the {@link depthTexture} using a {@link depthPassTarget | RenderTarget} and a custom {@link RenderMaterial}.\n */\nexport class Shadow {\n  /** The {@link CameraRenderer} used to create this {@link Shadow}. */\n  renderer: CameraRenderer\n  /** Index of this {@link Shadow} used in the corresponding {@link CameraRenderer} shadow buffer binding. */\n  index: number\n\n  /** The {@link core/lights/Light.Light | light} that will be used to cast shadows. */\n  light: DirectionalLight | PointLight\n\n  /** Options used to create this {@link Shadow}. */\n  options: Omit<ShadowBaseParams, 'autoRender'>\n\n  /** Sample count of the {@link depthTexture}. Only `1` is accepted for now. */\n  sampleCount: number\n\n  /** @ignore */\n  #intensity: number\n  /** @ignore */\n  #bias: number\n  /** @ignore */\n  #normalBias: number\n  /** @ignore */\n  #pcfSamples: number\n  /** Size of the depth {@link Texture} to use. Default to `Vec2(512)`. */\n  depthTextureSize: Vec2\n  /** Format of the  depth {@link Texture} to use. Default to `depth24plus`. */\n  depthTextureFormat: GPUTextureFormat\n\n  /** @ignore */\n  #isActive: boolean\n  /** @ignore */\n  #autoRender: boolean\n\n  /** Depth {@link Texture} used to create the shadow map. */\n  depthTexture: null | Texture\n  /** Depth {@link RenderTarget} onto which the {@link meshes} will be rendered. */\n  depthPassTarget: null | RenderTarget\n  /** Depth comparison {@link Sampler} used to compare depth in the shaders. */\n  depthComparisonSampler: null | Sampler\n\n  /** All the current {@link ProjectedMesh | meshes} rendered to the shadow map. */\n  meshes: Map<ProjectedMesh['uuid'], ProjectedMesh>\n  /**\n   * Original {@link meshes} {@link RenderMaterial | materials}.\n   * @private\n   */\n  #materials: Map<ProjectedMesh['uuid'], RenderMaterial>\n  /**\n   * Corresponding depth {@link meshes} {@link RenderMaterial | materials}.\n   * @private\n   */\n  #depthMaterials: Map<ProjectedMesh['uuid'], RenderMaterial>\n  /** @ignore */\n  #depthPassTaskID: null | number\n\n  /** {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding} that holds all the bindings for this type of shadow to send to the shaders. */\n  rendererBinding: BufferBinding | null\n\n  /**\n   * Shadow constructor\n   * @param renderer - {@link CameraRenderer} used to create this {@link Shadow}.\n   * @param parameters - {@link ShadowBaseParams | parameters} used to create this {@link Shadow}.\n   */\n  constructor(\n    renderer: CameraRenderer | GPUCurtains,\n    {\n      light,\n      intensity = 1,\n      bias = 0,\n      normalBias = 0,\n      pcfSamples = 1,\n      depthTextureSize = new Vec2(512),\n      depthTextureFormat = 'depth24plus' as GPUTextureFormat,\n      autoRender = true,\n    } = {} as ShadowBaseParams\n  ) {\n    this.setRenderer(renderer)\n\n    this.light = light\n\n    this.index = this.light.index\n\n    this.options = {\n      light,\n      intensity,\n      bias,\n      normalBias,\n      pcfSamples,\n      depthTextureSize,\n      depthTextureFormat,\n    }\n\n    // mandatory so we could use textureSampleCompare()\n    // if we'd like to use MSAA, we would have to use an additional pass\n    // to manually resolve the depth texture before using it\n    this.sampleCount = 1\n\n    this.meshes = new Map()\n    this.#materials = new Map()\n    this.#depthMaterials = new Map()\n\n    this.#depthPassTaskID = null\n\n    this.#setParameters({ intensity, bias, normalBias, pcfSamples, depthTextureSize, depthTextureFormat, autoRender })\n\n    this.isActive = false\n  }\n\n  /**\n   * Set or reset this shadow {@link CameraRenderer}.\n   * @param renderer - New {@link CameraRenderer} or {@link GPUCurtains} instance to use.\n   */\n  setRenderer(renderer: CameraRenderer | GPUCurtains) {\n    renderer = isCameraRenderer(renderer, this.constructor.name)\n    this.renderer = renderer\n\n    this.setRendererBinding()\n\n    // update depth materials renderer as well\n    this.#depthMaterials?.forEach((depthMaterial) => {\n      depthMaterial.setRenderer(this.renderer)\n    })\n  }\n\n  /** @ignore */\n  setRendererBinding() {\n    this.rendererBinding = null\n  }\n\n  /**\n   * Set the {@link Shadow} parameters.\n   * @param parameters - parameters to use for this {@link Shadow}.\n   * @private\n   */\n  #setParameters(\n    {\n      intensity = 1,\n      bias = 0,\n      normalBias = 0,\n      pcfSamples = 1,\n      depthTextureSize = new Vec2(512),\n      depthTextureFormat = 'depth24plus',\n      autoRender = true,\n    } = {} as Omit<ShadowBaseParams, 'light'>\n  ) {\n    this.intensity = intensity\n    this.bias = bias\n    this.normalBias = normalBias\n    this.pcfSamples = pcfSamples\n    this.depthTextureSize = depthTextureSize\n    this.depthTextureSize.onChange(() => this.onDepthTextureSizeChanged())\n    this.depthTextureFormat = depthTextureFormat as GPUTextureFormat\n    this.#autoRender = autoRender\n  }\n\n  /**\n   * Set the parameters and start casting shadows by setting the {@link isActive} setter to `true`.<br>\n   * Called internally by the associated {@link core/lights/Light.Light | Light} if any shadow parameters are specified when creating it. Can also be called directly.\n   * @param parameters - parameters to use for this {@link Shadow}.\n   */\n  cast(\n    { intensity, bias, normalBias, pcfSamples, depthTextureSize, depthTextureFormat, autoRender } = {} as Omit<\n      ShadowBaseParams,\n      'light'\n    >\n  ) {\n    this.#setParameters({ intensity, bias, normalBias, pcfSamples, depthTextureSize, depthTextureFormat, autoRender })\n    this.isActive = true\n  }\n\n  /**\n   * Resend all properties to the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}. Called when the maximum number of corresponding {@link core/lights/Light.Light | lights} has been overflowed.\n   */\n  reset() {\n    this.onPropertyChanged('isActive', this.isActive ? 1 : 0)\n    this.onPropertyChanged('intensity', this.intensity)\n    this.onPropertyChanged('bias', this.bias)\n    this.onPropertyChanged('normalBias', this.normalBias)\n    this.onPropertyChanged('pcfSamples', this.pcfSamples)\n  }\n\n  /**\n   * Get whether this {@link Shadow} is actually casting shadows.\n   * @returns - Whether this {@link Shadow} is actually casting shadows.\n   */\n  get isActive(): boolean {\n    return this.#isActive\n  }\n\n  /**\n   * Start or stop casting shadows.\n   * @param value - New active state.\n   */\n  set isActive(value: boolean) {\n    if (!value && this.isActive) {\n      this.destroy()\n    } else if (value && !this.isActive) {\n      this.init()\n    }\n\n    this.#isActive = value\n  }\n\n  /**\n   * Get this {@link Shadow} intensity.\n   * @returns - The {@link Shadow} intensity.\n   */\n  get intensity(): number {\n    return this.#intensity\n  }\n\n  /**\n   * Set this {@link Shadow} intensity and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\n   * @param value - The new {@link Shadow} intensity.\n   */\n  set intensity(value: number) {\n    this.#intensity = value\n    this.onPropertyChanged('intensity', this.intensity)\n  }\n\n  /**\n   * Get this {@link Shadow} bias.\n   * @returns - The {@link Shadow} bias.\n   */\n  get bias(): number {\n    return this.#bias\n  }\n\n  /**\n   * Set this {@link Shadow} bias and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\n   * @param value - The new {@link Shadow} bias.\n   */\n  set bias(value: number) {\n    this.#bias = value\n    this.onPropertyChanged('bias', this.bias)\n  }\n\n  /**\n   * Get this {@link Shadow} normal bias.\n   * @returns - The {@link Shadow} normal bias.\n   */\n  get normalBias(): number {\n    return this.#normalBias\n  }\n\n  /**\n   * Set this {@link Shadow} normal bias and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\n   * @param value - The new {@link Shadow} normal bias.\n   */\n  set normalBias(value: number) {\n    this.#normalBias = value\n    this.onPropertyChanged('normalBias', this.normalBias)\n  }\n\n  /**\n   * Get this {@link Shadow} PCF samples count.\n   * @returns - The {@link Shadow} PCF samples count.\n   */\n  get pcfSamples(): number {\n    return this.#pcfSamples\n  }\n\n  /**\n   * Set this {@link Shadow} PCF samples count and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\n   * @param value - The new {@link Shadow} PCF samples count.\n   */\n  set pcfSamples(value: number) {\n    this.#pcfSamples = Math.max(1, Math.ceil(value))\n    this.onPropertyChanged('pcfSamples', this.pcfSamples)\n  }\n\n  /**\n   * Set the {@link depthComparisonSampler}, {@link depthTexture}, {@link depthPassTarget} and start rendering to the shadow map.\n   */\n  init() {\n    if (!this.depthComparisonSampler) {\n      const samplerExists = this.renderer.samplers.find((sampler) => sampler.name === 'depthComparisonSampler')\n\n      this.depthComparisonSampler =\n        samplerExists ||\n        new Sampler(this.renderer, {\n          label: 'Depth comparison sampler',\n          name: 'depthComparisonSampler',\n          // we do not want to repeat the shadows\n          addressModeU: 'clamp-to-edge',\n          addressModeV: 'clamp-to-edge',\n          compare: 'less',\n          minFilter: 'linear',\n          magFilter: 'linear',\n          type: 'comparison',\n        })\n    }\n\n    this.setDepthTexture()\n\n    if (!this.depthPassTarget) {\n      this.createDepthPassTarget()\n    }\n\n    if (this.#depthPassTaskID === null && this.#autoRender) {\n      this.setDepthPass()\n      // do net set active flag if it's not rendered\n      this.onPropertyChanged('isActive', 1)\n    }\n  }\n\n  /**\n   * Reset the {@link depthTexture} when the {@link depthTextureSize} changes.\n   */\n  onDepthTextureSizeChanged() {\n    this.setDepthTexture()\n  }\n\n  /**\n   * Set or resize the {@link depthTexture} and eventually resize the {@link depthPassTarget} as well.\n   */\n  setDepthTexture() {\n    if (\n      this.depthTexture &&\n      (this.depthTexture.size.width !== this.depthTextureSize.x ||\n        this.depthTexture.size.height !== this.depthTextureSize.y)\n    ) {\n      this.depthTexture.options.fixedSize.width = this.depthTextureSize.x\n      this.depthTexture.options.fixedSize.height = this.depthTextureSize.y\n      this.depthTexture.size.width = this.depthTextureSize.x\n      this.depthTexture.size.height = this.depthTextureSize.y\n      this.depthTexture.createTexture()\n\n      if (this.depthPassTarget) {\n        this.depthPassTarget.resize()\n      }\n    } else if (!this.depthTexture) {\n      this.createDepthTexture()\n    }\n  }\n\n  /**\n   * Create the {@link depthTexture}.\n   */\n  createDepthTexture() {\n    this.depthTexture = new Texture(this.renderer, {\n      label: `${this.constructor.name} (index: ${this.light.index}) depth texture`,\n      name: 'shadowDepthTexture' + this.index,\n      type: 'depth',\n      format: this.depthTextureFormat,\n      sampleCount: this.sampleCount,\n      fixedSize: {\n        width: this.depthTextureSize.x,\n        height: this.depthTextureSize.y,\n      },\n      autoDestroy: false, // do not destroy when removing a mesh\n    })\n  }\n\n  /**\n   * Clear the content of the depth texture. Called whenever the {@link meshes} array is empty after having removed a mesh.\n   */\n  clearDepthTexture() {\n    if (!this.depthTexture || !this.depthTexture.texture) return\n\n    // Create a command encoder\n    const commandEncoder = this.renderer.device.createCommandEncoder()\n    !this.renderer.production &&\n      commandEncoder.pushDebugGroup(`Clear ${this.depthTexture.texture.label} command encoder`)\n\n    // Define the render pass descriptor\n    const renderPassDescriptor: GPURenderPassDescriptor = {\n      colorAttachments: [],\n      depthStencilAttachment: {\n        view: this.depthTexture.texture.createView({\n          label: 'Clear ' + this.depthTexture.texture.label + ' view',\n        }),\n        depthLoadOp: 'clear', // Clear the depth attachment\n        depthClearValue: 1.0, // Clear to the maximum depth (farthest possible depth)\n        depthStoreOp: 'store', // Store the cleared depth\n      },\n    }\n\n    // Begin the render pass\n    const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor)\n    // End the render pass (we don't need to draw anything, just clear)\n    passEncoder.end()\n\n    // Submit the command buffer\n    !this.renderer.production && commandEncoder.popDebugGroup()\n    this.renderer.device.queue.submit([commandEncoder.finish()])\n  }\n\n  /**\n   * Create the {@link depthPassTarget}.\n   */\n  createDepthPassTarget() {\n    this.depthPassTarget = new RenderTarget(this.renderer, {\n      label: 'Depth pass render target for ' + this.constructor.name + ' ' + this.index,\n      useColorAttachments: false,\n      depthTexture: this.depthTexture,\n      sampleCount: this.sampleCount,\n    })\n  }\n\n  /**\n   * Update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding} input value and tell the {@link CameraRenderer#cameraLightsBindGroup | renderer camera, lights and shadows} bind group to update.\n   * @param propertyKey - name of the property to update.\n   * @param value - new value of the property.\n   */\n  onPropertyChanged(propertyKey: string, value: Mat4 | number) {\n    if (this.rendererBinding) {\n      if (value instanceof Mat4) {\n        for (let i = 0; i < value.elements.length; i++) {\n          this.rendererBinding.childrenBindings[this.index].inputs[propertyKey].value[i] = value.elements[i]\n        }\n\n        this.rendererBinding.childrenBindings[this.index].inputs[propertyKey].shouldUpdate = true\n      } else {\n        this.rendererBinding.childrenBindings[this.index].inputs[propertyKey].value = value\n      }\n\n      this.renderer.shouldUpdateCameraLightsBindGroup()\n    }\n  }\n\n  /**\n   * Start the depth pass.\n   */\n  setDepthPass() {\n    // add the depth pass (rendered each tick before our main scene)\n    this.#depthPassTaskID = this.render()\n  }\n\n  /**\n   * Remove the depth pass from its {@link utils/TasksQueueManager.TasksQueueManager | task queue manager}.\n   * @param depthPassTaskID - Task queue manager ID to use for removal.\n   */\n  removeDepthPass(depthPassTaskID) {\n    this.renderer.onBeforeRenderScene.remove(depthPassTaskID)\n  }\n\n  /**\n   * Render the depth pass. This happens before rendering the {@link CameraRenderer#scene | scene}.<br>\n   * - Force all the {@link meshes} to use their depth materials\n   * - Render all the {@link meshes}\n   * - Reset all the {@link meshes} materials to their original one.\n   * @param once - Whether to render it only once or not.\n   */\n  render(once = false): number {\n    return this.renderer.onBeforeRenderScene.add(\n      (commandEncoder) => {\n        if (!this.meshes.size) return\n\n        // assign depth material to meshes\n        this.useDepthMaterials()\n\n        this.renderDepthPass(commandEncoder)\n\n        // reset depth meshes material to use the original\n        // so the scene renders them normally\n        this.useOriginalMaterials()\n\n        // reset renderer current pipeline again\n        this.renderer.pipelineManager.resetCurrentPipeline()\n      },\n      {\n        once,\n        order: this.index,\n      }\n    )\n  }\n\n  /**\n   * Render the shadow map only once. Useful with static scenes if autoRender has been set to `false` to only take one snapshot of the shadow map.\n   */\n  async renderOnce(): Promise<void> {\n    // no point if it's already rendered\n    if (!this.#autoRender) {\n      this.onPropertyChanged('isActive', 1)\n\n      this.useDepthMaterials()\n\n      this.meshes.forEach((mesh) => {\n        mesh.setGeometry()\n      })\n\n      await Promise.all(\n        [...this.#depthMaterials.values()].map(async (depthMaterial) => {\n          await depthMaterial.compileMaterial()\n        })\n      )\n\n      this.render(true)\n    }\n  }\n\n  /**\n   * Render all the {@link meshes} into the {@link depthPassTarget}.\n   * @param commandEncoder - {@link GPUCommandEncoder} to use.\n   */\n  renderDepthPass(commandEncoder: GPUCommandEncoder) {\n    // we might need to update render bundles buffer bindings\n    const renderBundles = new Map()\n\n    this.meshes.forEach((mesh) => {\n      if (mesh.options.renderBundle) {\n        renderBundles.set(mesh.options.renderBundle.uuid, mesh.options.renderBundle)\n      }\n    })\n\n    // we can safely update render bundles bindings if needed\n    renderBundles.forEach((bundle) => {\n      bundle.updateBinding()\n    })\n\n    renderBundles.clear()\n\n    // reset renderer current pipeline\n    this.renderer.pipelineManager.resetCurrentPipeline()\n\n    // begin depth pass\n    const depthPass = commandEncoder.beginRenderPass(this.depthPassTarget.renderPass.descriptor)\n\n    if (!this.renderer.production)\n      depthPass.pushDebugGroup(`${this.constructor.name} (index: ${this.index}): depth pass`)\n\n    // render meshes with their depth material\n    this.meshes.forEach((mesh) => {\n      mesh.render(depthPass)\n    })\n\n    if (!this.renderer.production) depthPass.popDebugGroup()\n\n    depthPass.end()\n  }\n\n  /**\n   * Get the default depth pass vertex shader for this {@link Shadow}.\n   * parameters - {@link VertexShaderInputParams} used to compute the output `worldPosition` and `normal` vectors.\n   * @returns - Depth pass vertex shader.\n   */\n  getDefaultShadowDepthVs({ bindings = [], geometry }: VertexShaderInputParams): ShaderOptions {\n    return {\n      /** Returned code. */\n      code: getDefaultShadowDepthVs(this.index, { bindings, geometry }),\n    }\n  }\n\n  /**\n   * Get the default depth pass fragment shader for this {@link Shadow}.\n   * @returns - A {@link ShaderOptions} if a depth pass fragment shader is needed, `false` otherwise.\n   */\n  getDefaultShadowDepthFs(): false | ShaderOptions {\n    return false // we do not need to output to a fragment shader unless we do late Z writing\n  }\n\n  /**\n   * Patch the given {@link ProjectedMesh | mesh} material parameters to create the depth material.\n   * @param mesh - original {@link ProjectedMesh | mesh} to use.\n   * @param parameters - Optional additional parameters to use for the depth material.\n   * @returns - Patched parameters.\n   */\n  patchShadowCastingMeshParams(mesh: ProjectedMesh, parameters: RenderMaterialParams = {}): RenderMaterialParams {\n    parameters = { ...mesh.material.options.rendering, ...parameters }\n\n    // explicitly set empty output targets\n    // we just want to write to the depth texture\n    parameters.targets = []\n\n    parameters.sampleCount = this.sampleCount\n    parameters.depthFormat = this.depthTextureFormat\n\n    // add matrices\n    const bindings: BufferBinding[] = [mesh.material.getBufferBindingByName('matrices')]\n\n    // eventually add skins and morph targets\n    mesh.material.inputsBindings.forEach((binding) => {\n      if (binding.name.includes('skin') || binding.name.includes('morphTarget')) {\n        bindings.push(binding as BufferBinding)\n      }\n    })\n\n    // eventually add instances as well\n    const instancesBinding = mesh.material.getBufferBindingByName('instances')\n    if (instancesBinding) {\n      bindings.push(instancesBinding)\n    }\n\n    if (parameters.bindings) {\n      parameters.bindings = [...bindings, ...parameters.bindings]\n    } else {\n      parameters.bindings = [...bindings]\n    }\n\n    if (!parameters.shaders) {\n      parameters.shaders = {\n        vertex: this.getDefaultShadowDepthVs({ bindings, geometry: mesh.geometry }),\n        fragment: this.getDefaultShadowDepthFs(),\n      }\n    }\n\n    return parameters\n  }\n\n  /**\n   * Add a {@link ProjectedMesh | mesh} to the shadow map. Internally called by the {@link ProjectedMesh | mesh} if its `castShadows` parameters has been set to `true`, but can also be called externally to selectively cast shadows or to add specific parameters (such as custom depth pass shaders).\n   * - Save the original {@link ProjectedMesh | mesh} material.\n   * - {@link patchShadowCastingMeshParams | Patch} the parameters.\n   * - Create a new depth {@link RenderMaterial} with the patched parameters.\n   * - Add the {@link ProjectedMesh | mesh} to the {@link meshes} Map.\n   * @param mesh - {@link ProjectedMesh | mesh} to add to the shadow map.\n   * @param parameters - Optional {@link RenderMaterialParams | parameters} to use for the depth material.\n   */\n  addShadowCastingMesh(mesh: ProjectedMesh, parameters: RenderMaterialParams = {}) {\n    // already there? bail\n    if (this.meshes.get(mesh.uuid)) return\n\n    mesh.options.castShadows = true\n\n    this.#materials.set(mesh.uuid, mesh.material)\n\n    parameters = this.patchShadowCastingMeshParams(mesh, parameters)\n\n    if (this.#depthMaterials.get(mesh.uuid)) {\n      this.#depthMaterials.get(mesh.uuid).destroy()\n      this.#depthMaterials.delete(mesh.uuid)\n    }\n\n    this.#depthMaterials.set(\n      mesh.uuid,\n      new RenderMaterial(this.renderer, {\n        label: `${this.constructor.name} (index: ${this.index}) ${mesh.options.label} depth render material`,\n        ...parameters,\n      })\n    )\n\n    this.meshes.set(mesh.uuid, mesh)\n  }\n\n  /**\n   * Force all the {@link meshes} to use the depth material.\n   */\n  useDepthMaterials() {\n    this.meshes.forEach((mesh) => {\n      mesh.useMaterial(this.#depthMaterials.get(mesh.uuid))\n    })\n  }\n\n  /**\n   * Force all the {@link meshes} to use their original material.\n   */\n  useOriginalMaterials() {\n    this.meshes.forEach((mesh) => {\n      mesh.useMaterial(this.#materials.get(mesh.uuid))\n    })\n  }\n\n  /**\n   * Remove a {@link ProjectedMesh | mesh} from the shadow map and destroy its depth material.\n   * @param mesh - {@link ProjectedMesh | mesh} to remove.\n   */\n  removeMesh(mesh: ProjectedMesh) {\n    const depthMaterial = this.#depthMaterials.get(mesh.uuid)\n\n    if (depthMaterial) {\n      depthMaterial.destroy()\n      this.#depthMaterials.delete(mesh.uuid)\n    }\n\n    this.meshes.delete(mesh.uuid)\n\n    if (this.meshes.size === 0) {\n      this.clearDepthTexture()\n    }\n  }\n\n  /**\n   * Destroy the {@link Shadow}.\n   */\n  destroy() {\n    this.onPropertyChanged('isActive', 0)\n\n    if (this.#depthPassTaskID !== null) {\n      this.removeDepthPass(this.#depthPassTaskID)\n      this.#depthPassTaskID = null\n    }\n\n    this.meshes.forEach((mesh) => this.removeMesh(mesh))\n    this.#materials = new Map()\n    this.#depthMaterials = new Map()\n    this.meshes = new Map()\n\n    this.depthPassTarget?.destroy()\n    this.depthTexture?.destroy()\n  }\n}\n","import { Shadow, ShadowBaseParams, shadowStruct } from './Shadow'\r\nimport { CameraRenderer } from '../renderers/utils'\r\nimport { Mat4, OrthographicProjectionParams } from '../../math/Mat4'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { Input } from '../../types/BindGroups'\r\nimport { DirectionalLight } from '../lights/DirectionalLight'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\n\r\n/** Defines the orthographic shadow camera. */\r\nexport interface OrthographicShadowCamera extends OrthographicProjectionParams {\r\n  /** @ignore */\r\n  _left: number\r\n  /** @ignore */\r\n  _right: number\r\n  /** @ignore */\r\n  _bottom: number\r\n  /** @ignore */\r\n  _top: number\r\n  /** @ignore */\r\n  _near: number\r\n  /** @ignore */\r\n  _far: number\r\n  /** Orthographic camera projection {@link Mat4}. */\r\n  projectionMatrix: Mat4\r\n  /** Orthographic camera view {@link Mat4}. */\r\n  viewMatrix: Mat4\r\n  /** Up {@link Vec3} used to compute the view {@link Mat4}. */\r\n  up: Vec3\r\n}\r\n\r\n/**\r\n * Base parameters used to create a {@link DirectionalShadow}.\r\n */\r\nexport interface DirectionalShadowParams extends ShadowBaseParams {\r\n  /** {@link DirectionalLight} used to create the {@link DirectionalShadow}. */\r\n  light: DirectionalLight\r\n  /** {@link OrthographicProjectionParams | Orthographic projection parameters} to use. */\r\n  camera?: OrthographicProjectionParams\r\n}\r\n\r\n/** @ignore */\r\nexport const directionalShadowStruct: Record<string, Input> = {\r\n  ...shadowStruct,\r\n  viewMatrix: {\r\n    type: 'mat4x4f',\r\n    value: new Float32Array(16),\r\n  },\r\n  projectionMatrix: {\r\n    type: 'mat4x4f',\r\n    value: new Float32Array(16),\r\n  },\r\n}\r\n\r\n/**\r\n * Create a shadow map from a {@link DirectionalLight} by rendering to a depth texture using a view {@link Mat4} based on the {@link DirectionalLight} position and target and an {@link OrthographicShadowCamera | orthographic shadow camera} {@link Mat4}.\r\n */\r\nexport class DirectionalShadow extends Shadow {\r\n  /** {@link DirectionalLight} associated with this {@link DirectionalShadow}. */\r\n  light: DirectionalLight\r\n\r\n  /** {@link OrthographicShadowCamera | Orthographic shadow camera} to use for shadow calculations. */\r\n  camera: OrthographicShadowCamera\r\n\r\n  /** Options used to create this {@link DirectionalShadow}. */\r\n  options: DirectionalShadowParams\r\n\r\n  /**\r\n   * DirectionalShadow constructor\r\n   * @param renderer - {@link CameraRenderer} used to create this {@link DirectionalShadow}.\r\n   * @param parameters - {@link DirectionalShadowParams | parameters} used to create this {@link DirectionalShadow}.\r\n   */\r\n  constructor(\r\n    renderer: CameraRenderer | GPUCurtains,\r\n    {\r\n      light,\r\n      intensity,\r\n      bias,\r\n      normalBias,\r\n      pcfSamples,\r\n      depthTextureSize,\r\n      depthTextureFormat,\r\n      autoRender,\r\n      camera = {\r\n        left: -10,\r\n        right: 10,\r\n        bottom: -10,\r\n        top: 10,\r\n        near: 0.1,\r\n        far: 50,\r\n      },\r\n    } = {} as DirectionalShadowParams\r\n  ) {\r\n    super(renderer, {\r\n      light,\r\n      intensity,\r\n      bias,\r\n      normalBias,\r\n      pcfSamples,\r\n      depthTextureSize,\r\n      depthTextureFormat,\r\n      autoRender,\r\n    })\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      camera,\r\n    }\r\n\r\n    this.camera = {\r\n      projectionMatrix: new Mat4(),\r\n      viewMatrix: new Mat4(),\r\n      up: new Vec3(0, 1, 0),\r\n      _left: camera.left,\r\n      _right: camera.right,\r\n      _bottom: camera.bottom,\r\n      _top: camera.top,\r\n      _near: camera.near,\r\n      _far: camera.far,\r\n    }\r\n\r\n    // camera props getters and setters\r\n    const _self = this\r\n    const cameraProps = ['left', 'right', 'bottom', 'top', 'near', 'far'] as Array<keyof OrthographicProjectionParams>\r\n\r\n    cameraProps.forEach((prop) => {\r\n      Object.defineProperty(_self.camera, prop, {\r\n        get() {\r\n          return _self.camera['_' + prop]\r\n        },\r\n        set(v) {\r\n          _self.camera['_' + prop] = v\r\n          _self.updateProjectionMatrix()\r\n        },\r\n      })\r\n    })\r\n\r\n    // this.camera.up.onChange(() => {\r\n    //   this.updateProjectionMatrix()\r\n    // })\r\n  }\r\n\r\n  /**\r\n   * Set or reset this {@link DirectionalShadow} {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\r\n   */\r\n  setRendererBinding() {\r\n    this.rendererBinding = this.renderer.bindings.directionalShadows\r\n  }\r\n\r\n  /**\r\n   * Set the parameters and start casting shadows by setting the {@link isActive} setter to `true`.<br>\r\n   * Called internally by the associated {@link DirectionalLight} if any shadow parameters are specified when creating it. Can also be called directly.\r\n   * @param parameters - parameters to use for this {@link DirectionalShadow}.\r\n   */\r\n  cast(\r\n    { intensity, bias, normalBias, pcfSamples, depthTextureSize, depthTextureFormat, autoRender, camera } = {} as Omit<\r\n      DirectionalShadowParams,\r\n      'light'\r\n    >\r\n  ) {\r\n    if (camera) {\r\n      this.camera.left = camera.left ?? -10\r\n      this.camera.right = camera.right ?? 10\r\n      this.camera.bottom = camera.bottom ?? -10\r\n      this.camera.top = camera.right ?? 10\r\n      this.camera.near = camera.near ?? 0.1\r\n      this.camera.far = camera.far ?? 50\r\n    }\r\n\r\n    super.cast({ intensity, bias, normalBias, pcfSamples, depthTextureSize, depthTextureFormat, autoRender })\r\n  }\r\n\r\n  /**\r\n   * Set the {@link depthComparisonSampler}, {@link depthTexture}, {@link depthPassTarget}, compute the {@link DirectionalShadow#camera.projectionMatrix | camera projection matrix} and start rendering to the shadow map.\r\n   */\r\n  init() {\r\n    super.init()\r\n    this.updateProjectionMatrix()\r\n  }\r\n\r\n  /**\r\n   * Resend all properties to the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}. Called when the maximum number of corresponding {@link DirectionalLight} has been overflowed.\r\n   */\r\n  reset() {\r\n    this.setRendererBinding()\r\n    super.reset()\r\n    this.onPropertyChanged('projectionMatrix', this.camera.projectionMatrix)\r\n    this.onPropertyChanged('viewMatrix', this.camera.viewMatrix)\r\n  }\r\n\r\n  /**\r\n   * Update the {@link DirectionalShadow#camera.projectionMatrix | camera orthographic projection matrix} and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\r\n   */\r\n  updateProjectionMatrix() {\r\n    this.camera.projectionMatrix.identity().makeOrthographic({\r\n      left: this.camera.left,\r\n      right: this.camera.right,\r\n      bottom: this.camera.bottom,\r\n      top: this.camera.top,\r\n      near: this.camera.near,\r\n      far: this.camera.far,\r\n    })\r\n\r\n    this.onPropertyChanged('projectionMatrix', this.camera.projectionMatrix)\r\n  }\r\n\r\n  /**\r\n   * Update the {@link DirectionalShadow#camera.viewMatrix | camera view matrix} and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\r\n   * @param position - {@link Vec3} to use as position for the {@link DirectionalShadow#camera.viewMatrix | camera view matrix}, based on the {@link light} position.\r\n   * @param target - {@link Vec3} to use as target for the {@link DirectionalShadow#camera.viewMatrix | camera view matrix}, based on the {@link light} target.\r\n   */\r\n  updateViewMatrix(position = new Vec3(), target = new Vec3()) {\r\n    // avoid direction and up being parallel\r\n    if (position.x === 0 && position.z === 0) {\r\n      this.camera.up.set(0, 0, 1)\r\n    } else {\r\n      this.camera.up.set(0, 1, 0)\r\n    }\r\n\r\n    this.camera.viewMatrix.makeView(position, target, this.camera.up)\r\n    this.onPropertyChanged('viewMatrix', this.camera.viewMatrix)\r\n  }\r\n}\r\n","import { Light, LightBaseParams, LightsType } from './Light'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { DirectionalShadow, DirectionalShadowParams } from '../shadows/DirectionalShadow'\r\nimport { CameraRenderer } from '../renderers/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\n\r\n/**\r\n * Base parameters used to create a {@link DirectionalLight}.\r\n */\r\nexport interface DirectionalLightBaseParams extends LightBaseParams {\r\n  /** The {@link DirectionalLight} {@link Vec3 | position}. Default to `Vec3(1)`. */\r\n  position?: Vec3\r\n  /** The {@link DirectionalLight} {@link Vec3 | target}. Default to `Vec3(0)`. */\r\n  target?: Vec3\r\n  /** The {@link DirectionalLight} shadow parameters used to create a {@link DirectionalShadow}. If not set, the {@link DirectionalShadow} won't be set as active and won't cast any shadows. On the other hand, if anything is passed (even an empty object), the {@link DirectionalShadow} will start casting shadows, so use with caution. Default to `null` (which means the {@link DirectionalLight} will not cast shadows). */\r\n  shadow?: DirectionalShadowParams\r\n}\r\n\r\n/**\r\n * Create a directional light, that is emitted in a single direction without any attenuation. A common use case for this type of light is to simulate the sun.\r\n *\r\n * This light can cast {@link DirectionalShadow}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // assuming 'renderer' is a valid Camera renderer\r\n *\r\n * // this directional light will not cast any shadows\r\n * const directionalLight = new DirectionalLight(renderer, {\r\n *   color: new Vec3(1),\r\n *   intensity: 1,\r\n *   position: new Vec3(5, 2, 3),\r\n * })\r\n *\r\n * // this directional light will cast shadows\r\n * const directionalLightWithShadows = new DirectionalLight(renderer, {\r\n *   color: new Vec3(1),\r\n *   intensity: 1,\r\n *   position: new Vec3(-10, 10, -5),\r\n *   shadow: {\r\n *     intensity: 1\r\n *   },\r\n * })\r\n *\r\n * // this directional light will ALSO cast shadows!\r\n * const anotherDirectionalLightWithShadows = new DirectionalLight(renderer, {\r\n *   color: new Vec3(1),\r\n *   intensity: 2,\r\n *   position: new Vec3(12, 0.5, 5),\r\n *   target: new Vec3(3),\r\n *   shadow: {}, // that's enough to start casting shadows\r\n * })\r\n *\r\n * // this directional light will cast shadows as well...\r\n * const lastDirectionalLightWithShadows = new DirectionalLight(renderer, {\r\n *   color: new Vec3(1),\r\n *   intensity: 1,\r\n *   position: new Vec3(10),\r\n * })\r\n *\r\n * // ... because we're telling it here to start casting shadows\r\n * lastDirectionalLightWithShadows.shadow.cast()\r\n * ```\r\n */\r\nexport class DirectionalLight extends Light {\r\n  /** The {@link DirectionalLight} {@link Vec3 | target}. */\r\n  target: Vec3\r\n  /** @ignore */\r\n  #actualPosition: Vec3\r\n  /**\r\n   * The {@link Vec3 | direction} of the {@link DirectionalLight} is the {@link target} minus the actual {@link position}.\r\n   * @private\r\n   */\r\n  #direction: Vec3\r\n\r\n  /** Options used to create this {@link DirectionalLight}. */\r\n  options: DirectionalLightBaseParams\r\n  /** {@link DirectionalShadow} associated with this {@link DirectionalLight}. */\r\n  shadow: DirectionalShadow\r\n\r\n  /**\r\n   * DirectionalLight constructor\r\n   * @param renderer - {@link CameraRenderer} used to create this {@link DirectionalLight}.\r\n   * @param parameters - {@link DirectionalLightBaseParams | parameters} used to create this {@link DirectionalLight}.\r\n   */\r\n  constructor(\r\n    renderer: CameraRenderer | GPUCurtains,\r\n    {\r\n      color = new Vec3(1),\r\n      intensity = 1,\r\n      position = new Vec3(1),\r\n      target = new Vec3(),\r\n      shadow = null,\r\n    } = {} as DirectionalLightBaseParams\r\n  ) {\r\n    const type = 'directionalLights'\r\n    super(renderer, { color, intensity, type })\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      position,\r\n      target,\r\n      shadow,\r\n    }\r\n\r\n    this.#direction = new Vec3()\r\n    this.#actualPosition = new Vec3()\r\n    this.target = target\r\n    this.target.onChange(() => this.setDirection())\r\n    this.position.copy(position)\r\n\r\n    this.parent = this.renderer.scene\r\n\r\n    this.shadow = new DirectionalShadow(this.renderer, {\r\n      autoRender: false, // will be set by calling cast()\r\n      light: this,\r\n    })\r\n\r\n    if (shadow) {\r\n      this.shadow.cast(shadow)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set or reset this {@link DirectionalLight} {@link CameraRenderer}.\r\n   * @param renderer - New {@link CameraRenderer} or {@link GPUCurtains} instance to use.\r\n   */\r\n  setRenderer(renderer: CameraRenderer | GPUCurtains) {\r\n    this.shadow?.setRenderer(renderer)\r\n\r\n    super.setRenderer(renderer)\r\n  }\r\n\r\n  /**\r\n   * Resend all properties to the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}. Called when the maximum number of {@link DirectionalLight} has been overflowed.\r\n   */\r\n  reset() {\r\n    super.reset()\r\n    this.setDirection()\r\n\r\n    this.shadow?.reset()\r\n  }\r\n\r\n  /**\r\n   * Set the {@link DirectionalLight} direction based on the {@link target} and the {@link worldMatrix} translation and update the {@link DirectionalShadow} view matrix.\r\n   */\r\n  setDirection() {\r\n    this.#direction.copy(this.target).sub(this.worldMatrix.getTranslation(this.#actualPosition))\r\n    this.onPropertyChanged('direction', this.#direction)\r\n\r\n    this.shadow?.updateViewMatrix(this.#actualPosition, this.target)\r\n  }\r\n\r\n  // explicitly disable scale and transform origin transformations\r\n\r\n  /** @ignore */\r\n  applyScale() {}\r\n\r\n  /** @ignore */\r\n  applyTransformOrigin() {}\r\n\r\n  /**\r\n   * If the {@link modelMatrix | model matrix} has been updated, set the new direction from the {@link worldMatrix} translation.\r\n   */\r\n  updateMatrixStack() {\r\n    super.updateMatrixStack()\r\n\r\n    if (this.matricesNeedUpdate) {\r\n      this.setDirection()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tell the {@link renderer} that the maximum number of {@link DirectionalLight} has been overflown.\r\n   * @param lightsType - {@link type} of this light.\r\n   */\r\n  onMaxLightOverflow(lightsType: LightsType) {\r\n    super.onMaxLightOverflow(lightsType)\r\n    this.shadow?.setRendererBinding()\r\n  }\r\n\r\n  /**\r\n   * Destroy this {@link DirectionalLight} and associated {@link DirectionalShadow}.\r\n   */\r\n  destroy() {\r\n    super.destroy()\r\n    this.shadow.destroy()\r\n  }\r\n}\r\n","import { Shadow, ShadowBaseParams, shadowStruct } from './Shadow'\nimport { CameraRenderer } from '../renderers/utils'\nimport { Mat4, PerspectiveProjectionParams } from '../../math/Mat4'\nimport { Vec3 } from '../../math/Vec3'\nimport { Texture } from '../textures/Texture'\nimport { getDefaultPointShadowDepthFs, getDefaultPointShadowDepthVs } from '../shaders/chunks/shading/shadows'\nimport { PointLight } from '../lights/PointLight'\nimport { Input } from '../../types/BindGroups'\nimport { ShaderOptions } from '../../types/Materials'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { Geometry } from '../geometries/Geometry'\nimport { BufferBinding } from '../bindings/BufferBinding'\nimport { VertexShaderInputParams } from '../shaders/chunks/vertex/get_vertex_output'\n\n/** Defines the perspective shadow camera params. */\nexport type PerspectiveShadowCameraParams = Omit<PerspectiveProjectionParams, 'fov' | 'aspect'>\n\n/** Defines the perspective shadow camera. */\nexport interface PerspectiveShadowCamera extends PerspectiveShadowCameraParams {\n  /** @ignore */\n  _near: number\n  /** @ignore */\n  _far: number\n  /** Perspective camera projection {@link Mat4}. */\n  projectionMatrix: Mat4\n  /** Array of 6 view {@link Mat4} corresponding to each faces of a cube. */\n  viewMatrices: Mat4[]\n}\n\n/**\n * Base parameters used to create a {@link PointShadow}.\n */\nexport interface PointShadowParams extends ShadowBaseParams {\n  /** {@link PointLight} used to create the {@link PointShadow}. */\n  light: PointLight\n  /** {@link PerspectiveShadowCameraParams | Perspective projection parameters} to use. */\n  camera?: PerspectiveShadowCameraParams\n}\n\n/** @ignore */\nexport const pointShadowStruct: Record<string, Input> = {\n  face: {\n    type: 'i32',\n    value: 0,\n  },\n  ...shadowStruct,\n  cameraNear: {\n    type: 'f32',\n    value: 0,\n  },\n  cameraFar: {\n    type: 'f32',\n    value: 0,\n  },\n  projectionMatrix: {\n    type: 'mat4x4f',\n    value: new Float32Array(16),\n  },\n  viewMatrices: {\n    type: 'array<mat4x4f>',\n    value: new Float32Array(16 * 6),\n  },\n}\n\n/**\n * Create a shadow map from a {@link PointLight} by rendering to a depth cube texture using an array of view {@link Mat4} based on the {@link PointLight} position and a {@link PerspectiveShadowCamera | perspective shadow camera} {@link Mat4}.\n *\n * This type of shadow is more expensive than {@link core/shadows/DirectionalShadow.DirectionalShadow | DirectionalShadow} since its scene needs to be rendered 6 times to each face of a depth cube texture instead of once.\n */\nexport class PointShadow extends Shadow {\n  /** {@link PointLight} associated with this {@link PointShadow}. */\n  light: PointLight\n\n  /** {@link PerspectiveShadowCamera | Perspective shadow camera} to use for shadow calculations. */\n  camera: PerspectiveShadowCamera\n\n  /** Options used to create this {@link PointShadow}. */\n  options: PointShadowParams\n\n  /** Array of {@link Vec3} representing each cube face up directions to compute the {@link PointShadow#camera.viewMatrices | camera view matrices}. */\n  cubeUps: Vec3[]\n  /** Array of {@link Vec3} representing each cube face directions to compute the {@link PointShadow#camera.viewMatrices | camera view matrices}. */\n  cubeDirections: Vec3[]\n  /**\n   * {@link Vec3} used to calculate the actual current direction based on the {@link PointLight} position.\n   * @private\n   */\n  #tempCubeDirection: Vec3\n\n  /**\n   * PointShadow constructor\n   * @param renderer - {@link CameraRenderer} used to create this {@link PointShadow}.\n   * @param parameters - {@link PointShadowParams | parameters} used to create this {@link PointShadow}.\n   */\n  constructor(\n    renderer: CameraRenderer | GPUCurtains,\n    {\n      light,\n      intensity,\n      bias,\n      normalBias,\n      pcfSamples,\n      depthTextureSize,\n      depthTextureFormat,\n      autoRender,\n      camera = {\n        near: 0.1,\n        far: 150,\n      },\n    } = {} as PointShadowParams\n  ) {\n    super(renderer, {\n      light,\n      intensity,\n      bias,\n      normalBias,\n      pcfSamples,\n      depthTextureSize,\n      depthTextureFormat,\n      autoRender,\n    })\n\n    this.options = {\n      ...this.options,\n      camera,\n    }\n\n    //this.setRendererBinding()\n\n    this.cubeDirections = [\n      new Vec3(-1, 0, 0),\n      new Vec3(1, 0, 0),\n      new Vec3(0, -1, 0),\n      new Vec3(0, 1, 0),\n      new Vec3(0, 0, -1),\n      new Vec3(0, 0, 1),\n    ]\n\n    this.#tempCubeDirection = new Vec3()\n\n    this.cubeUps = [\n      new Vec3(0, -1, 0),\n      new Vec3(0, -1, 0),\n      new Vec3(0, 0, 1),\n      new Vec3(0, 0, -1),\n      new Vec3(0, -1, 0),\n      new Vec3(0, -1, 0),\n    ]\n\n    if (camera.far <= 0) {\n      camera.far = 150\n    }\n\n    this.camera = {\n      projectionMatrix: new Mat4(),\n      viewMatrices: [],\n      _near: camera.near,\n      _far: camera.far,\n    }\n\n    for (let i = 0; i < 6; i++) {\n      this.camera.viewMatrices.push(new Mat4())\n    }\n\n    // camera props getters and setters\n    const _self = this\n    const cameraProps = ['near', 'far'] as Array<keyof PerspectiveShadowCameraParams>\n\n    cameraProps.forEach((prop) => {\n      Object.defineProperty(_self.camera, prop, {\n        get() {\n          return _self.camera['_' + prop]\n        },\n        set(v) {\n          _self.camera['_' + prop] = v\n          _self.updateProjectionMatrix()\n        },\n      })\n    })\n  }\n\n  /**\n   * Set or reset this {@link PointShadow} {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\n   */\n  setRendererBinding() {\n    this.rendererBinding = this.renderer.bindings.pointShadows\n  }\n\n  /**\n   * Set the parameters and start casting shadows by setting the {@link isActive} setter to `true`.<br>\n   * Called internally by the associated {@link PointLight} if any shadow parameters are specified when creating it. Can also be called directly.\n   * @param parameters - parameters to use for this {@link PointShadow}.\n   */\n  cast(\n    { intensity, bias, normalBias, pcfSamples, depthTextureSize, depthTextureFormat, autoRender, camera } = {} as Omit<\n      PointShadowParams,\n      'light'\n    >\n  ) {\n    if (camera) {\n      this.camera.near = camera.near ?? 0.1\n      this.camera.far = camera.far !== undefined ? camera.far : this.light.range > 0 ? this.light.range : 150\n    }\n\n    super.cast({ intensity, bias, normalBias, pcfSamples, depthTextureSize, depthTextureFormat, autoRender })\n  }\n\n  /**\n   * Set the {@link depthComparisonSampler}, {@link depthTexture}, {@link depthPassTarget}, compute the {@link PointShadow#camera.projectionMatrix | camera projection matrix} and start rendering to the shadow map.\n   */\n  init() {\n    super.init()\n    this.updateProjectionMatrix()\n  }\n\n  /**\n   * Resend all properties to the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}. Called when the maximum number of corresponding {@link PointLight} has been overflowed.\n   */\n  reset() {\n    this.setRendererBinding()\n    super.reset()\n    // no need to update view matrices, they are handled by the parent PointLight reset call\n    this.updateProjectionMatrix()\n  }\n\n  /**\n   * Update the {@link PointShadow#camera.projectionMatrix | camera perspective projection matrix} and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\n   */\n  updateProjectionMatrix() {\n    this.camera.projectionMatrix.identity().makePerspective({\n      near: this.camera.near,\n      far: this.camera.far,\n      fov: 90,\n      aspect: 1,\n    })\n\n    this.onPropertyChanged('projectionMatrix', this.camera.projectionMatrix)\n    this.onPropertyChanged('cameraNear', this.camera.near)\n    this.onPropertyChanged('cameraFar', this.camera.far)\n  }\n\n  /**\n   * Update the {@link PointShadow#camera.viewMatrices | camera view matrices} and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\n   * @param position - {@link Vec3} to use as position for the {@link PointShadow#camera.viewMatrices | camera view matrices}, based on the {@link light} position.\n   */\n  updateViewMatrices(position = new Vec3()) {\n    for (let i = 0; i < 6; i++) {\n      this.#tempCubeDirection.copy(this.cubeDirections[i]).add(position)\n      this.camera.viewMatrices[i].makeView(position, this.#tempCubeDirection, this.cubeUps[i])\n\n      for (let j = 0; j < 16; j++) {\n        this.rendererBinding.childrenBindings[this.index].inputs.viewMatrices.value[i * 16 + j] =\n          this.camera.viewMatrices[i].elements[j]\n      }\n    }\n\n    this.rendererBinding.childrenBindings[this.index].inputs.viewMatrices.shouldUpdate = true\n  }\n\n  /**\n   * Set or resize the {@link depthTexture} and eventually resize the {@link depthPassTarget} as well.\n   */\n  setDepthTexture() {\n    if (\n      this.depthTexture &&\n      (this.depthTexture.size.width !== this.depthTextureSize.x ||\n        this.depthTexture.size.height !== this.depthTextureSize.y)\n    ) {\n      const maxSize = Math.max(this.depthTextureSize.x, this.depthTextureSize.y)\n      this.depthTexture.options.fixedSize.width = maxSize\n      this.depthTexture.options.fixedSize.height = maxSize\n      this.depthTexture.size.width = maxSize\n      this.depthTexture.size.height = maxSize\n      this.depthTexture.createTexture()\n\n      if (this.depthPassTarget) {\n        this.depthPassTarget.resize()\n      }\n    } else if (!this.depthTexture) {\n      this.createDepthTexture()\n    }\n  }\n\n  /**\n   * Create the cube {@link depthTexture}.\n   */\n  createDepthTexture() {\n    const maxSize = Math.max(this.depthTextureSize.x, this.depthTextureSize.y)\n    this.depthTexture = new Texture(this.renderer, {\n      label: `${this.constructor.name} (index: ${this.index}) depth texture`,\n      name: 'pointShadowCubeDepthTexture' + this.index,\n      type: 'depth',\n      format: this.depthTextureFormat,\n      viewDimension: 'cube',\n      sampleCount: this.sampleCount,\n      fixedSize: {\n        width: maxSize,\n        height: maxSize,\n      },\n      autoDestroy: false, // do not destroy when removing a mesh\n    })\n  }\n\n  /**\n   * Clear the content of the depth texture. Called whenever the {@link meshes} array is empty after having removed a mesh.\n   */\n  clearDepthTexture() {\n    if (!this.depthTexture || !this.depthTexture.texture) return\n\n    // Create a command encoder\n    const commandEncoder = this.renderer.device.createCommandEncoder()\n    !this.renderer.production &&\n      commandEncoder.pushDebugGroup(`Clear ${this.depthTexture.texture.label} command encoder`)\n\n    for (let i = 0; i < 6; i++) {\n      const view = this.depthTexture.texture.createView({\n        label: 'Clear ' + this.depthTexture.texture.label + ' cube face view',\n        dimension: '2d',\n        arrayLayerCount: 1,\n        baseArrayLayer: i,\n      })\n\n      // Define the render pass descriptor\n      const renderPassDescriptor: GPURenderPassDescriptor = {\n        colorAttachments: [],\n        depthStencilAttachment: {\n          view,\n          depthLoadOp: 'clear', // Clear the depth attachment\n          depthClearValue: 1.0, // Clear to the maximum depth (farthest possible depth)\n          depthStoreOp: 'store', // Store the cleared depth\n        },\n      }\n\n      // Begin the render pass\n      const passEncoder = commandEncoder.beginRenderPass(renderPassDescriptor)\n      // End the render pass (we don't need to draw anything, just clear)\n      passEncoder.end()\n    }\n\n    // Submit the command buffer\n    !this.renderer.production && commandEncoder.popDebugGroup()\n    this.renderer.device.queue.submit([commandEncoder.finish()])\n  }\n\n  /**\n   * Remove the depth pass from its {@link utils/TasksQueueManager.TasksQueueManager | task queue manager}.\n   * @param depthPassTaskID - Task queue manager ID to use for removal.\n   */\n  removeDepthPass(depthPassTaskID) {\n    this.renderer.onBeforeCommandEncoderCreation.remove(depthPassTaskID)\n  }\n\n  /**\n   * Render the depth pass. This happens before creating the {@link CameraRenderer} command encoder.<br>\n   * - Force all the {@link meshes} to use their depth materials\n   * - For each face of the depth cube texture:\n   *   - Create a command encoder.\n   *   - Set the {@link depthPassTarget} descriptor depth texture view to our depth cube texture current face.\n   *   - Update the face index\n   *   - Render all the {@link meshes}\n   *   - Submit the command encoder\n   * - Reset all the {@link meshes} materials to their original one.\n   * @param once - Whether to render it only once or not.\n   */\n  render(once = false): number {\n    // TODO once multi-view is available,\n    // we'll be able to use a single render pass\n    // to render to all 6 faces of the cube depth map\n    // see https://kidrigger.dev/post/vulkan-render-to-cubemap-using-multiview/\n    return this.renderer.onBeforeCommandEncoderCreation.add(\n      () => {\n        if (!this.meshes.size) return\n\n        // since we're not inside the main loop,\n        // we need to be sure the renderer camera & lights bind group has been created\n        this.renderer.setCameraBindGroup()\n\n        // assign depth material to meshes\n        this.useDepthMaterials()\n\n        for (let i = 0; i < 6; i++) {\n          const commandEncoder = this.renderer.device.createCommandEncoder()\n\n          if (!this.renderer.production)\n            commandEncoder.pushDebugGroup(\n              `${this.constructor.name} (index: ${this.index}): depth pass command encoder for face ${i}`\n            )\n\n          this.depthPassTarget.renderPass.setRenderPassDescriptor(\n            this.depthTexture.texture.createView({\n              label: this.depthTexture.texture.label + ' cube face view ' + i,\n              dimension: '2d',\n              arrayLayerCount: 1,\n              baseArrayLayer: i,\n            })\n          )\n\n          // update face index\n          this.rendererBinding.childrenBindings[this.index].inputs.face.value = i\n\n          // again, we're not inside the main loop,\n          // we need to explicitly update the renderer camera & lights bind group\n          this.renderer.shouldUpdateCameraLightsBindGroup()\n          this.renderer.updateCameraLightsBindGroup()\n\n          this.renderDepthPass(commandEncoder)\n\n          if (!this.renderer.production) commandEncoder.popDebugGroup()\n\n          const commandBuffer = commandEncoder.finish()\n          this.renderer.device.queue.submit([commandBuffer])\n        }\n\n        // reset depth meshes material to use the original\n        // so the scene renders them normally\n        this.useOriginalMaterials()\n\n        // reset renderer current pipeline again\n        this.renderer.pipelineManager.resetCurrentPipeline()\n      },\n      {\n        once,\n        order: this.index,\n      }\n    )\n  }\n\n  /**\n   * Get the default depth pass vertex shader for this {@link PointShadow}.\n   * parameters - {@link VertexShaderInputParams} used to compute the output `worldPosition` and `normal` vectors.\n   * @returns - Depth pass vertex shader.\n   */\n  getDefaultShadowDepthVs({ bindings = [], geometry }: VertexShaderInputParams): ShaderOptions {\n    return {\n      /** Returned code. */\n      code: getDefaultPointShadowDepthVs(this.index, { bindings, geometry }),\n    }\n  }\n\n  /**\n   * Get the default depth pass {@link types/Materials.ShaderOptions | fragment shader options} for this {@link PointShadow}.\n   * @returns - A {@link types/Materials.ShaderOptions | ShaderOptions} with the depth pass fragment shader.\n   */\n  getDefaultShadowDepthFs(): ShaderOptions {\n    return {\n      /** Returned code. */\n      code: getDefaultPointShadowDepthFs(this.index),\n    }\n  }\n}\n","import { Light, LightBaseParams, LightsType } from './Light'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { PointShadow, PointShadowParams } from '../shadows/PointShadow'\r\nimport { CameraRenderer } from '../renderers/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\n\r\n/**\r\n * Base parameters used to create a {@link PointLight}.\r\n */\r\nexport interface PointLightBaseParams extends LightBaseParams {\r\n  /** The {@link PointLight} {@link Vec3 | position}. Default to `Vec3(0)`. */\r\n  position?: Vec3\r\n  /** The {@link PointLight} range, used to compute the {@link PointLight} attenuation over distance. Default to `0`. */\r\n  range?: number\r\n  /** The {@link PointLight} shadow parameters used to create a {@link PointShadow}. If not set, the {@link PointShadow} won't be set as active and won't cast any shadows. On the other hand, if anything is passed (even an empty object), the {@link PointShadow} will start casting shadows, so use with caution. Default to `null` (which means the {@link PointLight} will not cast shadows). */\r\n  shadow?: PointShadowParams\r\n}\r\n\r\n/**\r\n * Create a point light, that is emitted from a point to all directions with an attenuation. A common use case for this type of light is to replicate the light emitted from a bare light bulb.\r\n *\r\n * This light can cast {@link PointShadow}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // assuming 'renderer' is a valid Camera renderer\r\n *\r\n * // this point light will not cast any shadows\r\n * const pointLight = new PointLight(renderer, {\r\n *   color: new Vec3(1),\r\n *   intensity: 1,\r\n *   position: new Vec3(5, 2, 3),\r\n * })\r\n *\r\n * // this point light will cast shadows\r\n * const pointLightWithShadows = new PointLight(renderer, {\r\n *   color: new Vec3(1),\r\n *   intensity: 10,\r\n *   range: 3,\r\n *   position: new Vec3(-10, 10, -5),\r\n *   shadow: {\r\n *     intensity: 1\r\n *   },\r\n * })\r\n *\r\n * // this point light will ALSO cast shadows!\r\n * const anotherPointLightWithShadows = new PointLight(renderer, {\r\n *   color: new Vec3(1),\r\n *   intensity: 5,\r\n *   range: 100,\r\n *   position: new Vec3(12, 0.5, 5),\r\n *   shadow: {}, // that's enough to start casting shadows\r\n * })\r\n *\r\n * // this point light will cast shadows as well...\r\n * const lastPointLightWithShadows = new PointLight(renderer, {\r\n *   color: new Vec3(1),\r\n *   intensity: 1,\r\n *   position: new Vec3(10),\r\n * })\r\n *\r\n * // ... because we're telling it here to start casting shadows\r\n * lastPointLightWithShadows.shadow.cast()\r\n * ```\r\n */\r\nexport class PointLight extends Light {\r\n  /** @ignore */\r\n  #range: number\r\n  /** @ignore */\r\n  #actualPosition: Vec3\r\n\r\n  /** Options used to create this {@link PointLight}. */\r\n  options: PointLightBaseParams\r\n\r\n  /** {@link PointShadow} associated with this {@link PointLight}. */\r\n  shadow: PointShadow\r\n\r\n  /**\r\n   * PointLight constructor\r\n   * @param renderer - {@link CameraRenderer | CameraRenderer} used to create this {@link PointLight}.\r\n   * @param parameters - {@link PointLightBaseParams | parameters} used to create this {@link PointLight}.\r\n   */\r\n  constructor(\r\n    renderer: CameraRenderer | GPUCurtains,\r\n    { color = new Vec3(1), intensity = 1, position = new Vec3(), range = 0, shadow = null } = {} as PointLightBaseParams\r\n  ) {\r\n    const type = 'pointLights'\r\n    super(renderer, { color, intensity, type })\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      position,\r\n      range,\r\n      shadow,\r\n    }\r\n\r\n    this.#actualPosition = new Vec3()\r\n    this.position.copy(position)\r\n\r\n    this.range = range\r\n\r\n    this.parent = this.renderer.scene\r\n\r\n    this.shadow = new PointShadow(this.renderer, {\r\n      autoRender: false, // will be set by calling cast()\r\n      light: this,\r\n    })\r\n\r\n    if (shadow) {\r\n      this.shadow.cast(shadow)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set or reset this {@link PointLight} {@link CameraRenderer}.\r\n   * @param renderer - New {@link CameraRenderer} or {@link GPUCurtains} instance to use.\r\n   */\r\n  setRenderer(renderer: CameraRenderer | GPUCurtains) {\r\n    if (this.shadow) {\r\n      this.shadow.setRenderer(renderer)\r\n    }\r\n\r\n    super.setRenderer(renderer)\r\n  }\r\n\r\n  /**\r\n   * Resend all properties to the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}. Called when the maximum number of {@link PointLight} has been overflowed.\r\n   */\r\n  reset() {\r\n    super.reset()\r\n    this.onPropertyChanged('range', this.range)\r\n    this.setPosition()\r\n    this.shadow?.reset()\r\n  }\r\n\r\n  /**\r\n   * Get this {@link PointLight} range.\r\n   * @returns - The {@link PointLight} range.\r\n   */\r\n  get range(): number {\r\n    return this.#range\r\n  }\r\n\r\n  /**\r\n   * Set this {@link PointLight} range and update the {@link CameraRenderer} corresponding {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}.\r\n   * @param value - The new {@link PointLight} range.\r\n   */\r\n  set range(value: number) {\r\n    this.#range = value\r\n    this.onPropertyChanged('range', this.range)\r\n  }\r\n\r\n  /**\r\n   * Set the {@link PointLight} position based on the {@link worldMatrix} translation and update the {@link PointShadow} view matrices.\r\n   */\r\n  setPosition() {\r\n    this.onPropertyChanged('position', this.worldMatrix.getTranslation(this.#actualPosition))\r\n    this.shadow?.updateViewMatrices(this.#actualPosition)\r\n  }\r\n\r\n  // explicitly disable scale and transform origin transformations\r\n\r\n  /** @ignore */\r\n  applyScale() {}\r\n\r\n  /** @ignore */\r\n  applyTransformOrigin() {}\r\n\r\n  /**\r\n   * If the {@link modelMatrix | model matrix} has been updated, set the new position from the {@link worldMatrix} translation.\r\n   */\r\n  updateMatrixStack() {\r\n    super.updateMatrixStack()\r\n\r\n    if (this.matricesNeedUpdate) {\r\n      this.setPosition()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tell the {@link renderer} that the maximum number of {@link PointLight} has been overflown.\r\n   * @param lightsType - {@link type} of this light.\r\n   */\r\n  onMaxLightOverflow(lightsType: LightsType) {\r\n    super.onMaxLightOverflow(lightsType)\r\n    this.shadow?.setRendererBinding()\r\n  }\r\n\r\n  /**\r\n   * Destroy this {@link PointLight} and associated {@link PointShadow}.\r\n   */\r\n  destroy() {\r\n    super.destroy()\r\n    this.shadow.destroy()\r\n  }\r\n}\r\n","import { generateUUID, throwWarning } from '../../../utils/utils'\nimport { isRenderer, Renderer } from '../../renderers/utils'\nimport { RenderMaterial } from '../../materials/RenderMaterial'\nimport { DOMTexture } from '../../textures/DOMTexture'\nimport { Geometry } from '../../geometries/Geometry'\nimport { Texture, TextureParams } from '../../textures/Texture'\nimport { ExternalTextureParams, DOMTextureParams, DOMTextureParent } from '../../../types/Textures'\nimport { RenderTarget } from '../../renderPasses/RenderTarget'\nimport { GPUCurtains } from '../../../curtains/GPUCurtains'\nimport { ProjectedMesh, SceneStackedMesh } from '../../renderers/GPURenderer'\nimport { Material } from '../../materials/Material'\nimport { DOMElementBoundingRect } from '../../DOM/DOMElement'\nimport { AllowedGeometries, RenderMaterialParams, ShaderOptions } from '../../../types/Materials'\nimport { ProjectedMeshBaseClass } from './ProjectedMeshBaseMixin'\nimport default_vsWgsl from '../../shaders/chunks/default/default_vs.wgsl'\nimport default_fsWgsl from '../../shaders/chunks/default/default_fs.wgsl'\nimport { RenderPass } from '../../renderPasses/RenderPass'\nimport { RenderBundle } from '../../renderPasses/RenderBundle'\n\nlet meshIndex = 0\n\n/**\n * Base render params used to create a Mesh.\n */\nexport interface MeshBaseRenderParams extends Omit<RenderMaterialParams, 'targets'> {\n  /** Whether we should add this Mesh to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically. */\n  autoRender?: boolean\n  /** Flag indicating whether to draw this Mesh or not. */\n  visible?: boolean\n  /** Controls the order in which this Mesh should be rendered by our {@link core/scenes/Scene.Scene | Scene}. */\n  renderOrder?: number\n  /** Optional {@link RenderTarget} to render this Mesh to instead of the canvas context. */\n  outputTarget?: RenderTarget\n  /** Parameters used by this Mesh to create a {@link DOMTexture}. */\n  texturesOptions?: ExternalTextureParams\n  /** Optional {@link GPUDevice.createRenderPipeline().targets | targets} properties. */\n  targets?: Partial<GPUColorTargetState>[]\n  /** Optional {@link RenderBundle} into which this Mesh should be added. */\n  renderBundle?: RenderBundle\n}\n\n/**\n * Base parameters used to create a Mesh.\n */\nexport interface MeshBaseParams extends MeshBaseRenderParams {\n  /** Geometry to use */\n  geometry?: AllowedGeometries\n}\n\n/**\n *  Base options used to create this Mesh.\n */\nexport interface MeshBaseOptions extends Omit<MeshBaseRenderParams, 'renderOrder' | 'visible'> {\n  /** The label of this Mesh, sent to various GPU objects for debugging purpose. */\n  label?: MeshBaseParams['label']\n  //targets?: RenderMaterialParams['targets']\n}\n\n/** @const - Default Mesh parameters to merge with user defined parameters. */\nconst defaultMeshBaseParams = {\n  // material\n  autoRender: true,\n  useProjection: false,\n  useAsyncPipeline: true,\n  // rendering\n  cullMode: 'back',\n  depth: true,\n  depthWriteEnabled: true,\n  depthCompare: 'less',\n  depthFormat: 'depth24plus',\n  transparent: false,\n  visible: true,\n  renderOrder: 0,\n  // textures\n  texturesOptions: {},\n  renderBundle: null,\n} as MeshBaseParams\n\n// based on https://stackoverflow.com/a/75673107/13354068\n// we declare first a class, and then the mixin with a return type\n/**\n * This class describes the properties and methods to set up a basic Mesh, implemented in the {@link MeshBaseMixin}:\n * - Set and render the {@link Geometry} and {@link RenderMaterial}\n * - Add helpers to create {@link DOMTexture} and {@link Texture}\n * - Handle resizing, device lost/restoration and destroying the resources\n */\nexport declare class MeshBaseClass {\n  /** The type of the {@link MeshBaseClass} */\n  type: string\n  /** The universal unique id of the {@link MeshBaseClass} */\n  readonly uuid: string\n  /** Index of this {@link MeshBaseClass}, i.e. creation order */\n  readonly index: number\n  /** The {@link Renderer} used */\n  renderer: Renderer\n\n  /** Options used to create this {@link MeshBaseClass} */\n  options: MeshBaseOptions\n\n  /** {@link RenderMaterial} used by this {@link MeshBaseClass} */\n  material: RenderMaterial\n  /** {@link AllowedGeometries | Geometry} used by this {@link MeshBaseClass} */\n  geometry: MeshBaseParams['geometry']\n\n  /** {@link RenderTarget} to render this Mesh to instead of the canvas context, if any. */\n  outputTarget: null | RenderTarget\n\n  /** {@link RenderBundle} used to render this Mesh, if any. */\n  renderBundle: null | RenderBundle\n\n  /** Controls the order in which this {@link MeshBaseClass} should be rendered by our {@link core/scenes/Scene.Scene | Scene} */\n  renderOrder: number\n  /** Whether this {@link MeshBaseClass} should be treated as transparent. Impacts the {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry#pipeline | render pipeline} blend properties */\n  _transparent: boolean\n\n  /** Flag indicating whether to draw this {@link MeshBaseClass} or not */\n  _visible: boolean\n  /** Flag indicating whether this {@link MeshBaseClass} is ready to be drawn */\n  _ready: boolean\n\n  /** Empty object to store any additional data or custom properties into your Mesh. */\n  userData: Record<string, unknown>\n\n  // callbacks\n  /** function assigned to the {@link onReady} callback */\n  _onReadyCallback: () => void\n  /** function assigned to the {@link onBeforeRender} callback */\n  _onBeforeRenderCallback: () => void\n  /** function assigned to the {@link onRender} callback */\n  _onRenderCallback: () => void\n  /** function assigned to the {@link onAfterRender} callback */\n  _onAfterRenderCallback: () => void\n  /** function assigned to the {@link onAfterResize} callback */\n  _onAfterResizeCallback: () => void\n\n  /**\n   * Callback to execute when a Mesh is ready - i.e. its {@link material} and {@link geometry} are ready.\n   * @param callback - callback to run when {@link MeshBaseClass} is ready\n   * @returns - our Mesh\n   */\n  onReady: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\n\n  /**\n   * Callback to execute before updating the {@link core/scenes/Scene.Scene | Scene} matrix stack. This means it is called early and allows to update transformations values before actually setting the Mesh matrices (if any). This also means it won't be called if the Mesh has not been added to the {@link core/scenes/Scene.Scene | Scene}. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\n   * @param callback - callback to run just before updating the {@link core/scenes/Scene.Scene | Scene} matrix stack.\n   * @returns - our Mesh\n   */\n  onBeforeRender: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\n\n  /**\n   * Callback to execute right before actually rendering the Mesh. Useful to update uniforms for example. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\n   * @param callback - callback to run just before rendering the {@link MeshBaseClass}.\n   * @returns - our Mesh\n   */\n  onRender: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\n\n  /**\n   * Callback to execute just after a Mesh has been rendered. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\n   * @param callback - callback to run just after {@link MeshBaseClass} has been rendered\n   * @returns - our Mesh\n   */\n  onAfterRender: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\n\n  /**\n   * Callback to execute just after a Mesh has been resized.\n   * @param callback - callback to run just after {@link MeshBaseClass} has been resized\n   * @returns - our Mesh\n   */\n  onAfterResize: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\n\n  /**\n   * {@link MeshBaseClass} constructor\n   * @param renderer - our {@link Renderer} class object\n   * @param element - a DOM HTML Element that can be bound to a Mesh\n   * @param parameters - {@link MeshBaseParams | Mesh base parameters}\n   */\n  constructor(renderer: Renderer, element: HTMLElement | null, parameters: MeshBaseParams)\n\n  /**\n   * Get private #autoRender value\n   * @readonly\n   */\n  get autoRender(): boolean // allow to read value from child classes\n\n  /**\n   * Get/set whether a Mesh is ready or not\n   * @readonly\n   */\n  get ready(): boolean\n  set ready(value: boolean)\n\n  /**\n   * Add a Mesh to the renderer and the {@link core/scenes/Scene.Scene | Scene}\n   */\n  addToScene(addToRenderer: boolean): void\n\n  /**\n   * Remove a Mesh from the renderer and the {@link core/scenes/Scene.Scene | Scene}\n   */\n  removeFromScene(removeFromRenderer: boolean): void\n\n  /**\n   * Set a new {@link Renderer} for this Mesh\n   * @param renderer - new {@link Renderer} to set\n   */\n  setRenderer(renderer: Renderer | GPUCurtains): void\n\n  /**\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.\n   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to draw the Mesh\n   */\n  loseContext(): void\n\n  /**\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored\n   */\n  restoreContext(): void\n\n  /**\n   * Set default shaders if one or both of them are missing\n   */\n  setShaders(): void\n\n  /**\n   * Set or update the Mesh {@link Geometry}\n   * @param geometry - new {@link Geometry} to use\n   */\n  useGeometry(geometry: Geometry): void\n\n  /**\n   * Compute the Mesh geometry if needed\n   */\n  computeGeometry(): void\n\n  /**\n   * Set our Mesh geometry: create buffers and add attributes to material\n   */\n  setGeometry(): void\n\n  /**\n   * Set or update the {@link RenderMaterial} {@link types/Materials.RenderMaterialRenderingOptions | rendering options} to match the {@link RenderPass#descriptor | RenderPass descriptor} used to draw this Mesh.\n   * @param renderPass - {@link RenderPass | RenderPass} used to draw this Mesh, default to the {@link core/renderers/GPURenderer.GPURenderer#renderPass | renderer renderPass}.\n   */\n  setRenderingOptionsForRenderPass(renderPass: RenderPass): void\n\n  /**\n   * Hook used to clean up parameters before sending them to the material.\n   * @param parameters - parameters to clean before sending them to the {@link RenderMaterial}\n   * @returns - cleaned parameters\n   */\n  cleanupRenderMaterialParameters(parameters: MeshBaseRenderParams): MeshBaseRenderParams\n\n  /**\n   * Set or update the Mesh {@link RenderMaterial}\n   * @param material - new {@link RenderMaterial} to use\n   */\n  useMaterial(material: RenderMaterial): void\n\n  /**\n   * Set a Mesh transparent property, then set its material\n   * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}\n   */\n  setMaterial(meshParameters: RenderMaterialParams): void\n\n  /**\n   * Set Mesh material attributes\n   */\n  setMaterialGeometryAttributes(): void\n\n  /**\n   * Get the transparent property value\n   */\n  get transparent(): boolean | undefined\n\n  /**\n   * Set the transparent property value. Update the {@link RenderMaterial} rendering options and {@link core/scenes/Scene.Scene | Scene} stack if needed.\n   * @param value - new transparency value\n   */\n  set transparent(value: boolean)\n\n  /**\n   * Get the visible property value\n   */\n  get visible(): boolean\n\n  /**\n   * Set the visible property value\n   * @param value - new visibility value\n   */\n  set visible(value: boolean)\n\n  /**\n   * Get our {@link RenderMaterial#domTextures | RenderMaterial domTextures array}\n   * @readonly\n   */\n  get domTextures(): DOMTexture[]\n\n  /**\n   * Get our {@link RenderMaterial#textures | RenderMaterial textures array}\n   * @readonly\n   */\n  get textures(): Texture[]\n\n  /**\n   * Create a new {@link DOMTexture}\n   * @param options - {@link DOMTextureParams | DOMTexture parameters}\n   * @returns - newly created DOMTexture\n   */\n  createDOMTexture(options: DOMTextureParams): DOMTexture\n\n  /**\n   * Add a {@link DOMTexture}\n   * @param domTexture - {@link DOMTexture} to add\n   */\n  addDOMTexture(domTexture: DOMTexture)\n\n  /**\n   * Callback run when a new {@link DOMTexture} has been created\n   * @param domTexture - newly created DOMTexture\n   */\n  onDOMTextureAdded(domTexture: DOMTexture): void\n\n  /**\n   * Create a new {@link Texture}\n   * @param  options - {@link TextureParams | Texture parameters}\n   * @returns - newly created Texture\n   */\n  createTexture(options: TextureParams): Texture\n\n  /**\n   * Add a {@link Texture}\n   * @param texture - {@link Texture} to add\n   */\n  addTexture(texture: Texture)\n\n  /**\n   * Assign or remove a {@link RenderTarget} to this Mesh\n   * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a RenderTarget as well.\n   * @param outputTarget - the RenderTarget to assign or null if we want to remove the current RenderTarget\n   */\n  setOutputTarget(outputTarget: RenderTarget | null): void\n\n  /**\n   * Assign or remove a {@link RenderBundle} to this Mesh.\n   * @param renderBundle - the {@link RenderBundle} to assign or null if we want to remove the current {@link RenderBundle}.\n   * @param updateScene - Whether to remove and then re-add the Mesh from the {@link core/scenes/Scene.Scene | Scene} or not.\n   */\n  setRenderBundle(renderBundle?: RenderBundle | null, updateScene?: boolean): void\n\n  /**\n   * Get the current {@link RenderMaterial} uniforms\n   * @readonly\n   */\n  get uniforms(): Material['uniforms']\n\n  /**\n   * Get the current {@link RenderMaterial} storages\n   * @readonly\n   */\n  get storages(): Material['storages']\n\n  /**\n   * Resize the Mesh's textures\n   * @param boundingRect\n   */\n  resize(boundingRect?: DOMElementBoundingRect): void\n\n  /**\n   * Execute {@link onBeforeRender} callback if needed. Called by the {@link core/scenes/Scene.Scene | Scene} before updating the matrix stack.\n   */\n  onBeforeRenderScene(): void\n\n  /**\n   * Called before rendering the Mesh\n   * Set the geometry if needed (create buffers and add attributes to the {@link RenderMaterial})\n   * Then executes {@link RenderMaterial#onBeforeRender}: create its bind groups and pipeline if needed and eventually update its bindings\n   */\n  onBeforeRenderPass(): void\n\n  /**\n   * Render our {@link MeshBaseClass} if the {@link RenderMaterial} is ready\n   * @param pass - current render pass encoder\n   */\n  onRenderPass(pass: GPURenderPassEncoder): void\n\n  /**\n   * Called after having rendered the Mesh\n   */\n  onAfterRenderPass(): void\n\n  /**\n   * Render our Mesh\n   * - Execute {@link onBeforeRenderPass}\n   * - Stop here if {@link Renderer} is not ready or Mesh is not {@link visible}\n   * - Execute super render call if it exists\n   * - {@link onRenderPass | render} our {@link material} and {@link geometry}\n   * - Execute {@link onAfterRenderPass}\n   * @param pass - current render pass encoder\n   */\n  render(pass: GPURenderPassEncoder): void\n\n  /**\n   * Remove the Mesh from the {@link core/scenes/Scene.Scene | Scene} and destroy it\n   */\n  remove(): void\n\n  /**\n   * Destroy the Mesh\n   */\n  destroy(): void\n}\n\n/**\n * Constructor function, that creates a new instance of the given type.\n * @template T - the base constructor\n * @param args - The arguments passed to the constructor.\n * @returns - An instance of the mixin.\n * @ignore\n */\nexport type MixinConstructor<T = {}> = new (...args: any[]) => T\n\n/**\n * Used to mix the basic Mesh properties and methods defined in {@link MeshBaseClass} (basically, set a {@link Geometry} and a {@link RenderMaterial} and render them, add helpers to create {@link DOMTexture} and {@link Texture}) with a given Base of type {@link core/objects3D/Object3D.Object3D | Object3D}, {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D}, {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D} or an empty class.\n * @param Base - the class to mix onto\n * @returns - the mixed classes, creating a basic Mesh.\n */\nfunction MeshBaseMixin<TBase extends MixinConstructor>(Base: TBase): MixinConstructor<MeshBaseClass> & TBase {\n  /**\n   * MeshBase defines our base properties and methods\n   */\n  return class MeshBase extends Base implements MeshBaseClass {\n    /** The type of the {@link MeshBase} */\n    type: string\n    /** The universal unique id of the {@link MeshBase} */\n    readonly uuid: string\n    /** Index of this {@link MeshBase}, i.e. creation order */\n    readonly index: number\n    /** The {@link Renderer} used */\n    renderer: Renderer\n\n    /** Options used to create this {@link MeshBase} */\n    options: MeshBaseOptions\n\n    /** {@link RenderMaterial} used by this {@link MeshBase} */\n    material: RenderMaterial\n    /** {@link AllowedGeometries | Geometry} used by this {@link MeshBase} */\n    geometry: MeshBaseParams['geometry']\n\n    /** {@link RenderTarget} to render this Mesh to, if any */\n    outputTarget: null | RenderTarget\n\n    /** {@link RenderBundle} used to render this Mesh, if any. */\n    renderBundle: null | RenderBundle\n\n    /** Controls the order in which this {@link MeshBase} should be rendered by our {@link core/scenes/Scene.Scene | Scene} */\n    renderOrder: number\n    /** Whether this {@link MeshBase} should be treated as transparent. Impacts the {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry#pipeline | render pipeline} blend properties */\n    _transparent: boolean\n\n    /** Flag indicating whether to draw this {@link MeshBase} or not */\n    _visible: boolean\n    /** Flag indicating whether this {@link MeshBase} is ready to be drawn */\n    _ready: boolean\n\n    /** Empty object to store any additional data or custom properties into your {@link MeshBase}. */\n    userData: Record<string, unknown>\n\n    /** Whether we should add this {@link MeshBase} to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\n    #autoRender = true\n\n    // callbacks / events\n    /** function assigned to the {@link onReady} callback */\n    _onReadyCallback: () => void = () => {\n      /* allow empty callback */\n    }\n    /** function assigned to the {@link onBeforeRender} callback */\n    _onBeforeRenderCallback: () => void = () => {\n      /* allow empty callback */\n    }\n    /** function assigned to the {@link onRender} callback */\n    _onRenderCallback: () => void = () => {\n      /* allow empty callback */\n    }\n    /** function assigned to the {@link onAfterRender} callback */\n    _onAfterRenderCallback: () => void = () => {\n      /* allow empty callback */\n    }\n    /** function assigned to the {@link onAfterResize} callback */\n    _onAfterResizeCallback: () => void = () => {\n      /* allow empty callback */\n    }\n\n    /**\n     * MeshBase constructor\n     *\n     * @typedef MeshBaseArrayParams\n     * @type {array}\n     * @property {(Renderer|GPUCurtains)} 0 - our {@link Renderer} class object\n     * @property {(string|HTMLElement|null)} 1 - a DOM HTML Element that can be bound to a Mesh\n     * @property {MeshBaseParams} 2 - {@link MeshBaseParams | Mesh base parameters}\n     *\n     * @param {MeshBaseArrayParams} params - our MeshBaseMixin parameters\n     */\n    constructor(...params: any[]) {\n      super(\n        params[0] as Renderer | GPUCurtains,\n        params[1] as HTMLElement | string | null,\n        { ...defaultMeshBaseParams, ...params[2] } as MeshBaseParams\n      )\n\n      let renderer = params[0]\n      const parameters = { ...defaultMeshBaseParams, ...params[2] }\n\n      this.type = 'MeshBase'\n\n      this.uuid = generateUUID()\n      Object.defineProperty(this as MeshBase, 'index', { value: meshIndex++ })\n\n      renderer = isRenderer(renderer, parameters.label ? parameters.label + ' ' + this.type : this.type)\n\n      this.renderer = renderer\n\n      const {\n        label,\n        shaders,\n        geometry,\n        visible,\n        renderOrder,\n        outputTarget,\n        renderBundle,\n        texturesOptions,\n        autoRender,\n        ...meshParameters\n      } = parameters\n\n      this.outputTarget = outputTarget ?? null\n      this.renderBundle = renderBundle ?? null\n\n      // set default sample count\n      meshParameters.sampleCount = !!meshParameters.sampleCount\n        ? meshParameters.sampleCount\n        : this.outputTarget\n        ? this.outputTarget.renderPass.options.sampleCount\n        : this.renderer && this.renderer.renderPass\n        ? this.renderer.renderPass.options.sampleCount\n        : 1\n\n      this.options = {\n        ...(this.options ?? {}), // merge possible lower options?\n        label: label ?? 'Mesh ' + this.renderer.meshes.length,\n        ...(shaders !== undefined ? { shaders } : {}),\n        ...(outputTarget !== undefined && { outputTarget }),\n        ...(renderBundle !== undefined && { renderBundle }),\n        texturesOptions,\n        ...(autoRender !== undefined && { autoRender }),\n        ...meshParameters,\n      }\n\n      if (autoRender !== undefined) {\n        this.#autoRender = autoRender\n      }\n\n      this.visible = visible\n      this.renderOrder = renderOrder\n      this.ready = false\n\n      this.userData = {}\n\n      if (geometry) {\n        this.useGeometry(geometry)\n      }\n\n      this.setMaterial({\n        ...this.cleanupRenderMaterialParameters({ ...this.options }),\n        ...(geometry && { verticesOrder: geometry.verticesOrder, topology: geometry.topology }),\n      } as RenderMaterialParams)\n\n      this.addToScene(true)\n    }\n\n    /**\n     * Get private #autoRender value\n     * @readonly\n     */\n    get autoRender(): boolean {\n      return this.#autoRender\n    }\n\n    /**\n     * Get/set whether a Mesh is ready or not\n     * @readonly\n     */\n    get ready(): boolean {\n      return this._ready\n    }\n\n    set ready(value: boolean) {\n      if (value && !this._ready) {\n        this._onReadyCallback && this._onReadyCallback()\n      }\n      this._ready = value\n    }\n\n    /* SCENE */\n\n    /**\n     * Add a Mesh to the {@link core/scenes/Scene.Scene | Scene} and optionally to the renderer. Can patch the {@link RenderMaterial} render options to match the {@link RenderPass} used to draw this Mesh.\n     * @param addToRenderer - whether to add this Mesh to the {@link Renderer#meshes | Renderer meshes array}\n     */\n    addToScene(addToRenderer = false) {\n      if (addToRenderer) {\n        this.renderer.meshes.push(this as unknown as SceneStackedMesh)\n      }\n\n      this.setRenderingOptionsForRenderPass(this.outputTarget ? this.outputTarget.renderPass : this.renderer.renderPass)\n\n      if (this.#autoRender) {\n        this.renderer.scene.addMesh(this as unknown as SceneStackedMesh)\n      }\n    }\n\n    /**\n     * Remove a Mesh from the {@link core/scenes/Scene.Scene | Scene} and optionally from the renderer as well.\n     * @param removeFromRenderer - whether to remove this Mesh from the {@link Renderer#meshes | Renderer meshes array}\n     */\n    removeFromScene(removeFromRenderer = false) {\n      if (this.#autoRender) {\n        this.renderer.scene.removeMesh(this as unknown as ProjectedMesh)\n      }\n\n      if (removeFromRenderer) {\n        this.renderer.meshes = this.renderer.meshes.filter((m) => m.uuid !== this.uuid)\n      }\n    }\n\n    /**\n     * Set a new {@link Renderer} for this Mesh\n     * @param renderer - new {@link Renderer} to set\n     */\n    setRenderer(renderer: Renderer | GPUCurtains) {\n      // we could pass our curtains object OR our curtains renderer object\n      renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\n\n      if (\n        !renderer ||\n        !(\n          renderer.type === 'GPURenderer' ||\n          renderer.type === 'GPUCameraRenderer' ||\n          renderer.type === 'GPUCurtainsRenderer'\n        )\n      ) {\n        throwWarning(\n          `${this.options.label}: Cannot set ${renderer} as a renderer because it is not of a valid Renderer type.`\n        )\n        return\n      }\n\n      this.material?.setRenderer(renderer)\n\n      const oldRenderer = this.renderer\n      this.removeFromScene(true)\n      this.renderer = renderer\n      this.addToScene(true)\n\n      // if old renderer does not contain any meshes any more\n      // clear it\n      if (!oldRenderer.meshes.length) {\n        oldRenderer.onBeforeRenderScene.add(\n          (commandEncoder) => {\n            oldRenderer.forceClear(commandEncoder)\n          },\n          { once: true }\n        )\n      }\n    }\n\n    /**\n     * Assign or remove a {@link RenderTarget} to this Mesh.\n     * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a {@link RenderTarget} as well.\n     * @param outputTarget - the {@link RenderTarget} to assign or null if we want to remove the current {@link RenderTarget}.\n     */\n    setOutputTarget(outputTarget: RenderTarget | null) {\n      if (outputTarget && outputTarget.type !== 'RenderTarget') {\n        throwWarning(`${this.options.label ?? this.type}: outputTarget is not a RenderTarget: ${outputTarget.type}`)\n        return\n      }\n\n      // ensure the mesh is in the correct scene stack\n      this.removeFromScene()\n      this.outputTarget = outputTarget\n      this.addToScene()\n    }\n\n    /**\n     * Assign or remove a {@link RenderBundle} to this Mesh.\n     * @param renderBundle - the {@link RenderBundle} to assign or null if we want to remove the current {@link RenderBundle}.\n     * @param updateScene - Whether to remove and then re-add the Mesh from the {@link core/scenes/Scene.Scene | Scene} or not.\n     */\n    setRenderBundle(renderBundle: RenderBundle | null, updateScene = true) {\n      // ensure the mesh is in the correct scene stack\n      if (updateScene) {\n        this.removeFromScene()\n        this.renderBundle = renderBundle\n        this.addToScene()\n      } else {\n        this.renderBundle = renderBundle\n      }\n    }\n\n    /**\n     * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.\n     * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to draw the Mesh\n     */\n    loseContext() {\n      // we're obviously not ready anymore\n      this.ready = false\n\n      // first the geometry\n      this.geometry.loseContext()\n\n      // then the material\n      this.material.loseContext()\n    }\n\n    /**\n     * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored\n     */\n    restoreContext() {\n      this.geometry.restoreContext(this.renderer)\n      this.material.restoreContext()\n    }\n\n    /* SHADERS */\n\n    /**\n     * Set default shaders if one or both of them are missing\n     */\n    setShaders() {\n      const { shaders } = this.options\n\n      if (!shaders) {\n        this.options.shaders = {\n          vertex: {\n            code: default_vsWgsl,\n            entryPoint: 'main',\n          },\n          fragment: {\n            code: default_fsWgsl,\n            entryPoint: 'main',\n          },\n        }\n      } else {\n        if (!shaders.vertex || !shaders.vertex.code) {\n          shaders.vertex = {\n            code: default_vsWgsl,\n            entryPoint: 'main',\n          }\n        }\n\n        if (shaders.fragment === undefined || (shaders.fragment && !(shaders.fragment as ShaderOptions).code)) {\n          shaders.fragment = {\n            code: default_fsWgsl,\n            entryPoint: 'main',\n          }\n        }\n      }\n    }\n\n    /* GEOMETRY */\n\n    /**\n     * Set or update the Mesh {@link Geometry}\n     * @param geometry - new {@link Geometry} to use\n     */\n    useGeometry(geometry: Geometry) {\n      if (this.geometry) {\n        // compute right away to compare geometries\n        if (geometry.shouldCompute) {\n          geometry.computeGeometry()\n        }\n\n        if (this.geometry.layoutCacheKey !== geometry.layoutCacheKey) {\n          throwWarning(\n            `${this.options.label} (${this.type}): the current and new geometries do not have the same vertexBuffers layout, causing a probable pipeline recompilation. This should be avoided.\\n\\nCurrent geometry layout:\\n\\n${this.geometry.wgslStructFragment}\\n\\n--------\\n\\nNew geometry layout:\\n\\n${geometry.wgslStructFragment}`\n          )\n\n          this.material.setAttributesFromGeometry(geometry)\n          this.material.setPipelineEntry()\n        }\n\n        this.geometry.consumers.delete(this.uuid)\n      }\n\n      this.geometry = geometry\n      this.geometry.consumers.add(this.uuid)\n\n      this.computeGeometry()\n\n      if (this.material) {\n        const renderingOptions = {\n          ...this.material.options.rendering,\n          ...{ verticesOrder: geometry.verticesOrder, topology: geometry.topology },\n        }\n\n        this.material.setRenderingOptions(renderingOptions)\n      }\n    }\n\n    /**\n     * Compute the Mesh geometry if needed\n     */\n    computeGeometry() {\n      if (this.geometry.shouldCompute) {\n        this.geometry.computeGeometry()\n      }\n    }\n\n    /**\n     * Set our Mesh geometry: create buffers and add attributes to material\n     */\n    setGeometry() {\n      if (this.geometry) {\n        if (!this.geometry.ready) {\n          this.geometry.createBuffers({\n            renderer: this.renderer,\n            label: this.options.label + ' geometry',\n          })\n        }\n\n        this.setMaterialGeometryAttributes()\n      }\n    }\n\n    /* MATERIAL */\n\n    /**\n     * Set or update the {@link RenderMaterial} {@link types/Materials.RenderMaterialRenderingOptions | rendering options} to match the {@link RenderPass#descriptor | RenderPass descriptor} used to draw this Mesh.\n     * @param renderPass - {@link RenderPass | RenderPass} used to draw this Mesh, default to the {@link core/renderers/GPURenderer.GPURenderer#renderPass | renderer renderPass}.\n     */\n    setRenderingOptionsForRenderPass(renderPass: RenderPass) {\n      // a Mesh render material rendering options MUST match the render pass descriptor used to draw it!\n      const renderingOptions = {\n        // transparency (blend)\n        transparent: this.transparent,\n        // sample count\n        sampleCount: renderPass.options.sampleCount,\n        // color attachments\n        ...(renderPass.options.colorAttachments.length && {\n          targets: renderPass.options.colorAttachments.map((colorAttachment, index) => {\n            return {\n              // patch format...\n              format: colorAttachment.targetFormat,\n              // ...but keep original blend values if any\n              ...(this.options.targets?.length &&\n                this.options.targets[index] &&\n                this.options.targets[index].blend && {\n                  blend: this.options.targets[index].blend,\n                }),\n            }\n          }),\n        }),\n        // depth\n        depth: renderPass.options.useDepth,\n        ...(renderPass.options.useDepth && {\n          depthFormat: renderPass.options.depthFormat,\n        }),\n      }\n\n      this.material?.setRenderingOptions(renderingOptions)\n    }\n\n    /**\n     * Hook used to clean up parameters before sending them to the {@link RenderMaterial}.\n     * @param parameters - parameters to clean before sending them to the {@link RenderMaterial}\n     * @returns - cleaned parameters\n     */\n    cleanupRenderMaterialParameters(parameters: MeshBaseRenderParams): MeshBaseRenderParams {\n      // patch and set options, return mesh parameters\n      delete parameters.texturesOptions\n      delete parameters.outputTarget\n      delete parameters.autoRender\n\n      return parameters\n    }\n\n    /**\n     * Set or update the Mesh {@link RenderMaterial}\n     * @param material - new {@link RenderMaterial} to use\n     */\n    useMaterial(material: RenderMaterial) {\n      let currentCacheKey = null\n      let isDepthMaterialSwitch = false\n\n      // if we already have geometry attributes linked to a material\n      // we'll need to check if everything matches\n      // also we need to ensure we're not switching from a depth material\n      if (this.material) {\n        isDepthMaterialSwitch =\n          this.material.options.label.includes('depth render material') ||\n          material.options.label.includes('depth render material')\n\n        if (this.geometry) {\n          currentCacheKey = this.material.cacheKey\n        }\n      }\n\n      this.material = material\n\n      if (this.geometry) {\n        this.material.setAttributesFromGeometry(this.geometry)\n      }\n\n      // update transparent property\n      this.transparent = this.material.options.rendering.transparent\n\n      // add eventual textures passed as parameters\n      this.material.options.domTextures\n        ?.filter((texture) => texture instanceof DOMTexture)\n        .forEach((texture) => this.onDOMTextureAdded(texture))\n\n      // reset pipeline entry if cache keys differ\n      if (currentCacheKey && currentCacheKey !== this.material.cacheKey && !isDepthMaterialSwitch) {\n        this.material.setPipelineEntry()\n      }\n    }\n\n    /**\n     * Patch the shaders if needed, then set the Mesh material\n     * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}\n     */\n    setMaterial(meshParameters: RenderMaterialParams) {\n      this.setShaders()\n      meshParameters.shaders = this.options.shaders\n      meshParameters.label = meshParameters.label + ' material'\n\n      this.useMaterial(new RenderMaterial(this.renderer, meshParameters))\n    }\n\n    /**\n     * Set Mesh material attributes\n     */\n    setMaterialGeometryAttributes() {\n      if (this.material && !this.material.attributes) {\n        this.material.setAttributesFromGeometry(this.geometry)\n      }\n    }\n\n    /**\n     * Get the transparent property value\n     */\n    get transparent(): boolean | undefined {\n      return this._transparent\n    }\n\n    /**\n     * Set the transparent property value. Update the {@link RenderMaterial} rendering options and {@link core/scenes/Scene.Scene | Scene} stack if needed.\n     * @param value\n     */\n    set transparent(value: boolean) {\n      const switchTransparency = this.transparent !== undefined && value !== this.transparent\n\n      if (switchTransparency) {\n        this.removeFromScene()\n      }\n\n      this._transparent = value\n\n      if (switchTransparency) {\n        this.addToScene()\n      }\n    }\n\n    /**\n     * Get the visible property value\n     */\n    get visible(): boolean {\n      return this._visible\n    }\n\n    /**\n     * Set the visible property value\n     * @param value - new visibility value\n     */\n    set visible(value: boolean) {\n      this._visible = value\n    }\n\n    /* TEXTURES */\n\n    /**\n     * Get our {@link RenderMaterial#domTextures | RenderMaterial domTextures array}\n     * @readonly\n     */\n    get domTextures(): DOMTexture[] {\n      return this.material?.domTextures || []\n    }\n\n    /**\n     * Get our {@link RenderMaterial#textures | RenderMaterial textures array}\n     * @readonly\n     */\n    get textures(): Texture[] {\n      return this.material?.textures || []\n    }\n\n    /**\n     * Create a new {@link DOMTexture}\n     * @param options - {@link DOMTextureParams | DOMTexture parameters}\n     * @returns - newly created {@link DOMTexture}\n     */\n    createDOMTexture(options: DOMTextureParams): DOMTexture {\n      if (!options.name) {\n        options.name = 'texture' + (this.textures.length + this.domTextures.length)\n      }\n\n      if (!options.label) {\n        options.label = this.options.label + ' ' + options.name\n      }\n\n      const texturesOptions: DOMTextureParams = { ...options, ...this.options.texturesOptions }\n\n      if (this.renderBundle) {\n        // do not allow external video textures if we have a render bundle\n        texturesOptions.useExternalTextures = false\n      }\n\n      const domTexture = new DOMTexture(this.renderer, texturesOptions)\n\n      this.addDOMTexture(domTexture)\n\n      return domTexture\n    }\n\n    /**\n     * Add a {@link DOMTexture}\n     * @param domTexture - {@link DOMTexture} to add\n     */\n    addDOMTexture(domTexture: DOMTexture) {\n      if (this.renderBundle) {\n        // if we create a new texture, invalidate the render bundle\n        this.renderBundle.ready = false\n      }\n\n      this.material.addTexture(domTexture)\n      this.onDOMTextureAdded(domTexture)\n    }\n\n    /**\n     * Callback run when a new {@link DOMTexture} has been added\n     * @param domTexture - newly created DOMTexture\n     */\n    onDOMTextureAdded(domTexture: DOMTexture) {\n      domTexture.parentMesh = this as unknown as DOMTextureParent\n    }\n\n    /**\n     * Create a new {@link Texture}\n     * @param  options - {@link TextureParams | Texture parameters}\n     * @returns - newly created {@link Texture}\n     */\n    createTexture(options: TextureParams): Texture {\n      if (!options.name) {\n        options.name = 'texture' + (this.textures.length + this.domTextures.length)\n      }\n\n      const texture = new Texture(this.renderer, options)\n\n      this.addTexture(texture)\n\n      return texture\n    }\n\n    /**\n     * Add a {@link Texture}\n     * @param texture - {@link Texture} to add\n     */\n    addTexture(texture: Texture) {\n      if (this.renderBundle) {\n        // if we create a new texture, invalidate the render bundle\n        this.renderBundle.ready = false\n      }\n\n      this.material.addTexture(texture)\n    }\n\n    /* BINDINGS */\n\n    /**\n     * Get the current {@link RenderMaterial} uniforms\n     * @readonly\n     */\n    get uniforms(): Material['uniforms'] {\n      return this.material?.uniforms\n    }\n\n    /**\n     * Get the current {@link RenderMaterial} storages\n     * @readonly\n     */\n    get storages(): Material['storages'] {\n      return this.material?.storages\n    }\n\n    /* RESIZE */\n\n    /**\n     * Resize the Mesh's textures\n     * @param boundingRect\n     */\n    resize(boundingRect?: DOMElementBoundingRect | null) {\n      // @ts-ignore\n      if (super.resize) {\n        // @ts-ignore\n        super.resize(boundingRect)\n      }\n\n      this.textures?.forEach((texture) => {\n        // copy from original textures again if needed\n        if (texture.options.fromTexture) {\n          texture.copy(texture.options.fromTexture)\n        }\n      })\n\n      // resize textures\n      this.domTextures?.forEach((texture) => {\n        texture.resize()\n      })\n\n      this._onAfterResizeCallback && this._onAfterResizeCallback()\n    }\n\n    /* EVENTS */\n\n    /**\n     * Callback to execute when a Mesh is ready - i.e. its {@link material} and {@link geometry} are ready.\n     * @param callback - callback to run when {@link MeshBase} is ready\n     * @returns - our Mesh\n     */\n    onReady(callback: () => void): MeshBase | ProjectedMeshBaseClass {\n      if (callback) {\n        this._onReadyCallback = callback\n      }\n\n      return this\n    }\n\n    /**\n     * Callback to execute before updating the {@link core/scenes/Scene.Scene | Scene} matrix stack. This means it is called early and allows to update transformations values before actually setting the Mesh matrices (if any). This also means it won't be called if the Mesh has not been added to the {@link core/scenes/Scene.Scene | Scene}. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\n     * @param callback - callback to run just before updating the {@link core/scenes/Scene.Scene | Scene} matrix stack.\n     * @returns - our Mesh\n     */\n    onBeforeRender(callback: () => void): MeshBase | ProjectedMeshBaseClass {\n      if (callback) {\n        this._onBeforeRenderCallback = callback\n      }\n\n      return this\n    }\n\n    /**\n     * Callback to execute right before actually rendering the Mesh. Useful to update uniforms for example. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\n     * @param callback - callback to run just before rendering the {@link MeshBase}\n     * @returns - our Mesh\n     */\n    onRender(callback: () => void): MeshBase | ProjectedMeshBaseClass {\n      if (callback) {\n        this._onRenderCallback = callback\n      }\n\n      return this\n    }\n\n    /**\n     * Callback to execute just after a Mesh has been rendered. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\n     * @param callback - callback to run just after {@link MeshBase} has been rendered\n     * @returns - our Mesh\n     */\n    onAfterRender(callback: () => void): MeshBase | ProjectedMeshBaseClass {\n      if (callback) {\n        this._onAfterRenderCallback = callback\n      }\n\n      return this\n    }\n\n    /**\n     * Callback to execute just after a Mesh has been resized.\n     * @param callback - callback to run just after {@link MeshBase} has been resized\n     * @returns - our Mesh\n     */\n    onAfterResize(callback: () => void): MeshBase | ProjectedMeshBaseClass {\n      if (callback) {\n        this._onAfterResizeCallback = callback\n      }\n\n      return this\n    }\n\n    /* RENDER */\n\n    /**\n     * Execute {@link onBeforeRender} callback if needed. Called by the {@link core/scenes/Scene.Scene | Scene} before updating the matrix stack.\n     */\n    onBeforeRenderScene() {\n      if (!this.renderer.ready || !this.ready || !this.visible) return\n\n      this._onBeforeRenderCallback && this._onBeforeRenderCallback()\n    }\n\n    /**\n     * Called before rendering the Mesh\n     * Set the geometry if needed (create buffers and add attributes to the {@link RenderMaterial})\n     * Then executes {@link RenderMaterial#onBeforeRender}: create its bind groups and pipeline if needed and eventually update its bindings\n     */\n    onBeforeRenderPass() {\n      if (!this.renderer.ready) return\n\n      this.setGeometry()\n\n      if (this.visible) {\n        this._onRenderCallback && this._onRenderCallback()\n      }\n\n      this.material.onBeforeRender()\n\n      this.ready = this.material && this.material.ready && this.geometry && this.geometry.ready\n    }\n\n    /**\n     * Render our {@link MeshBase} if the {@link RenderMaterial} is ready\n     * @param pass - current render pass encoder\n     */\n    onRenderPass(pass: GPURenderPassEncoder) {\n      if (!this.ready) return\n\n      // render ou material\n      this.material.render(pass)\n      // then render our geometry\n      this.geometry.render(pass)\n    }\n\n    /**\n     * Called after having rendered the Mesh\n     */\n    onAfterRenderPass() {\n      this._onAfterRenderCallback && this._onAfterRenderCallback()\n    }\n\n    /**\n     * Render our Mesh\n     * - Execute {@link onBeforeRenderPass}\n     * - Stop here if {@link Renderer} is not ready or Mesh is not {@link visible}\n     * - Execute super render call if it exists\n     * - {@link onRenderPass | render} our {@link material} and {@link geometry}\n     * - Execute {@link onAfterRenderPass}\n     * @param pass - current render pass encoder\n     */\n    render(pass: GPURenderPassEncoder) {\n      this.onBeforeRenderPass()\n\n      // no point to render if the WebGPU device is not ready\n      if (!this.renderer.ready || !this.visible) return\n\n      !this.renderer.production && pass.pushDebugGroup(this.options.label)\n\n      this.onRenderPass(pass)\n\n      !this.renderer.production && pass.popDebugGroup()\n\n      this.onAfterRenderPass()\n    }\n\n    /* DESTROY */\n\n    /**\n     * Remove the Mesh from the {@link core/scenes/Scene.Scene | Scene} and destroy it\n     */\n    remove() {\n      this.removeFromScene(true)\n      this.destroy()\n\n      // if the renderer does not contain any meshes any more\n      // clear it\n      if (!this.renderer.meshes.length) {\n        this.renderer.onBeforeRenderScene.add(\n          (commandEncoder) => {\n            this.renderer.forceClear(commandEncoder)\n          },\n          { once: true }\n        )\n      }\n    }\n\n    /**\n     * Destroy the Mesh\n     */\n    destroy() {\n      // @ts-ignore\n      if (super.destroy) {\n        // @ts-ignore\n        super.destroy()\n      }\n\n      this.material?.destroy()\n\n      // destroy geometry and remove buffers from device cache\n      this.geometry.consumers.delete(this.uuid)\n      if (!this.geometry.consumers.size) {\n        this.geometry?.destroy(this.renderer)\n      }\n    }\n  }\n}\n\nexport { MeshBaseMixin }\n","import { PlaneGeometry } from '../core/geometries/PlaneGeometry'\r\n\r\n/**\r\n * Used to cache {@link PlaneGeometry} and avoid as many large array computations as possible.<br>\r\n * Could be improved to handle other caches.\r\n */\r\nexport class CacheManager {\r\n  /** Array of cached {@link PlaneGeometry} */\r\n  planeGeometries: PlaneGeometry[]\r\n\r\n  /**\r\n   * CacheManager constructor\r\n   */\r\n  constructor() {\r\n    this.planeGeometries = []\r\n  }\r\n\r\n  /**\r\n   * Check if a given {@link PlaneGeometry} is already cached based on its {@link PlaneGeometry#definition.id | definition id}\r\n   * @param planeGeometry - {@link PlaneGeometry} to check\r\n   * @returns - {@link PlaneGeometry} found or null if not found\r\n   */\r\n  getPlaneGeometry(planeGeometry: PlaneGeometry): PlaneGeometry | null {\r\n    return this.planeGeometries.find((element) => element.definition.id === planeGeometry.definition.id)\r\n  }\r\n\r\n  /**\r\n   * Check if a given {@link PlaneGeometry} is already cached based on its {@link PlaneGeometry#definition | definition id}\r\n   * @param planeGeometryID - {@link PlaneGeometry#definition.id | PlaneGeometry definition id}\r\n   * @returns - {@link PlaneGeometry} found or null if not found\r\n   */\r\n  getPlaneGeometryByID(planeGeometryID: number): PlaneGeometry | null {\r\n    return this.planeGeometries.find((element) => element.definition.id === planeGeometryID)\r\n  }\r\n\r\n  /**\r\n   * Add a {@link PlaneGeometry} to our cache {@link planeGeometries} array\r\n   * @param planeGeometry\r\n   */\r\n  addPlaneGeometry(planeGeometry: PlaneGeometry) {\r\n    this.planeGeometries.push(planeGeometry)\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link CacheManager}\r\n   */\r\n  destroy() {\r\n    this.planeGeometries = []\r\n  }\r\n}\r\n\r\n/** The {@link CacheManager} instance. */\r\nexport const cacheManager = new CacheManager() as CacheManager\r\n","import { MeshBaseMixin, MeshBaseRenderParams } from './mixins/MeshBaseMixin'\r\nimport { isRenderer, Renderer } from '../renderers/utils'\r\nimport { PlaneGeometry } from '../geometries/PlaneGeometry'\r\nimport { DOMElementBoundingRect, RectBBox } from '../DOM/DOMElement'\r\nimport { Vec2 } from '../../math/Vec2'\r\nimport { cacheManager } from '../../utils/CacheManager'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { BufferBindingParams } from '../bindings/BufferBinding'\r\n\r\n/**\r\n * Create a 1x1 quad (or plane) covering the full viewport, useful for postprocessing or background effects.\r\n *\r\n * It consists of a {@link PlaneGeometry} and {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial} and a few utilities method to help create {@link core/textures/DOMTexture.DOMTexture | DOMTexture} and {@link core/textures/Texture.Texture | Texture}.\r\n *\r\n * ### Default shaders\r\n *\r\n * If one or all shaders are missing, the library will use default ones.\r\n *\r\n * #### Default vertex shader:\r\n *\r\n * ```wgsl\r\n * struct VSOutput {\r\n *   @builtin(position) position: vec4f,\r\n *   @location(0) uv: vec2f,\r\n * };\r\n *\r\n * @vertex fn main(\r\n *   attributes: Attributes,\r\n * ) -> VSOutput {\r\n *   var vsOutput: VSOutput;\r\n *\r\n *   vsOutput.position = vec4f(attributes.position, 1.0);\r\n *   vsOutput.uv = attributes.uv;\r\n *\r\n *   return vsOutput;\r\n * }\r\n * ```\r\n *\r\n * #### Default fragment shader:\r\n *\r\n * ```wgsl\r\n * @fragment fn main() -> @location(0) vec4f {\r\n *   return vec4(0.0, 0.0, 0.0, 1.0);\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a fullscreen plane\r\n * const fullscreenPlane = new FullscreenPlane(gpuCurtains, {\r\n *   label: 'My fullscreen plane',\r\n *   shaders: {\r\n *     fragment: {\r\n *       code: fragmentCode, // assume it is a valid WGSL fragment shader\r\n *     },\r\n *   },\r\n * })\r\n * ```\r\n */\r\nexport class FullscreenPlane extends MeshBaseMixin(class {}) {\r\n  /** The type of the {@link FullscreenPlane} */\r\n  type: string\r\n  /** Object defining the  {@link FullscreenPlane} size */\r\n  size: {\r\n    /** document HTML size */\r\n    document: RectBBox\r\n  }\r\n\r\n  /**\r\n   * FullscreenPlane constructor\r\n   * @param renderer - {@link Renderer} or {@link GPUCurtains} class object used to create this {@link FullscreenPlane}\r\n   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link FullscreenPlane}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters = {} as MeshBaseRenderParams) {\r\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' FullscreenQuadMesh' : 'FullscreenQuadMesh')\r\n\r\n    // can we get a cached geometry?\r\n    let geometry = cacheManager.getPlaneGeometryByID(2) // 1 * 1 + 1\r\n\r\n    if (!geometry) {\r\n      // we need to create a new plane geometry\r\n      geometry = new PlaneGeometry({ widthSegments: 1, heightSegments: 1 })\r\n      cacheManager.addPlaneGeometry(geometry)\r\n    }\r\n\r\n    // no vertex shader? patch uniforms/storages visibility\r\n    if (!parameters.shaders || !parameters.shaders.vertex) {\r\n      ;['uniforms', 'storages'].forEach((bindingType) => {\r\n        Object.values(parameters[bindingType] ?? {}).forEach(\r\n          (binding: BufferBindingParams) => (binding.visibility = ['fragment'])\r\n        )\r\n      })\r\n    }\r\n\r\n    // we don't want to write to the depth buffer for fullscreen quads\r\n    parameters.depthWriteEnabled = false\r\n    if (!parameters.label) {\r\n      parameters.label = 'FullscreenQuadMesh'\r\n    }\r\n\r\n    // @ts-ignore\r\n    super(renderer, null, { geometry, ...parameters })\r\n\r\n    this.size = {\r\n      document: {\r\n        width: this.renderer.boundingRect.width,\r\n        height: this.renderer.boundingRect.height,\r\n        top: this.renderer.boundingRect.top,\r\n        left: this.renderer.boundingRect.left,\r\n      },\r\n    }\r\n\r\n    this.type = 'FullscreenQuadMesh'\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link FullscreenPlane}\r\n   * @param boundingRect - the new bounding rectangle\r\n   */\r\n  resize(boundingRect: DOMElementBoundingRect | null = null) {\r\n    this.size.document = boundingRect ?? this.renderer.boundingRect\r\n\r\n    super.resize(boundingRect)\r\n  }\r\n\r\n  /**\r\n   * Take the pointer {@link Vec2 | vector} position relative to the document and returns it relative to our {@link FullscreenPlane}\r\n   * It ranges from -1 to 1 on both axis\r\n   * @param mouseCoords - pointer {@link Vec2 | vector} coordinates\r\n   * @returns - the mapped {@link Vec2 | vector} coordinates in the [-1, 1] range\r\n   */\r\n  mouseToPlaneCoords(mouseCoords: Vec2 = new Vec2()): Vec2 {\r\n    // mouse position conversion from document to plane space\r\n    return new Vec2(\r\n      ((mouseCoords.x - this.size.document.left) / this.size.document.width) * 2 - 1,\r\n      1 - ((mouseCoords.y - this.size.document.top) / this.size.document.height) * 2\r\n    )\r\n  }\r\n}\r\n","import { Mat4 } from './Mat4'\n\n/**\n * Basic 3x3 matrix class used for matrix calculations.\n *\n * Note that like three.js, the constructor and {@link set} method take arguments in row-major order, while internally they are stored in the {@link elements} array in column-major order.\n *\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix3.js\n * @see http://glmatrix.net/docs/mat3.js.html\n */\nexport class Mat3 {\n  /** The type of the {@link Mat3} */\n  type: string\n  /** Our matrix array */\n  elements: Float32Array\n\n  // prettier-ignore\n  /**\n   * Mat3 constructor\n   * @param elements - initial array to use, default to identity matrix\n   */\n  constructor(elements: Float32Array = new Float32Array([\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1,\n  ])) {\n    this.type = 'Mat3'\n    this.elements = elements\n  }\n\n  /**\n   * Sets the matrix from 9 numbers\n   *\n   * @param n11 - number\n   * @param n12 - number\n   * @param n13 - number\n   * @param n21 - number\n   * @param n22 - number\n   * @param n23 - number\n   * @param n31 - number\n   * @param n32 - number\n   * @param n33 - number\n   * @returns - this {@link Mat3} after being set\n   */\n  set(\n    n11: number,\n    n12: number,\n    n13: number,\n    n21: number,\n    n22: number,\n    n23: number,\n    n31: number,\n    n32: number,\n    n33: number\n  ): Mat3 {\n    const te = this.elements\n\n    te[0] = n11\n    te[1] = n21\n    te[2] = n31\n    te[3] = n12\n    te[4] = n22\n    te[5] = n32\n    te[6] = n13\n    te[7] = n23\n    te[8] = n33\n\n    return this\n  }\n\n  /**\n   * Sets the {@link Mat3} to an identity matrix\n   * @returns - this {@link Mat3} after being set\n   */\n  identity(): Mat3 {\n    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1)\n\n    return this\n  }\n\n  /**\n   * Sets the {@link Mat3} values from an array\n   * @param array - array to use\n   * @returns - this {@link Mat3} after being set\n   */\n  // prettier-ignore\n  setFromArray(array: Float32Array | number[] = new Float32Array([\n    1, 0, 0,\n    0, 1, 0,\n    0, 0, 1,\n  ])): Mat3 {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] = array[i]\n    }\n\n    return this\n  }\n\n  /**\n   * Copy another {@link Mat3}\n   * @param matrix - matrix to copy\n   * @returns - this {@link Mat3} after being set\n   */\n  copy(matrix: Mat3 = new Mat3()): Mat3 {\n    const array = matrix.elements\n    this.elements[0] = array[0]\n    this.elements[1] = array[1]\n    this.elements[2] = array[2]\n    this.elements[3] = array[3]\n    this.elements[4] = array[4]\n    this.elements[5] = array[5]\n    this.elements[6] = array[6]\n    this.elements[7] = array[7]\n    this.elements[8] = array[8]\n\n    return this\n  }\n\n  /**\n   * Clone a {@link Mat3}\n   * @returns - cloned {@link Mat3}\n   */\n  clone(): Mat3 {\n    return new Mat3().copy(this)\n  }\n\n  /**\n   * Set a {@link Mat3} from a {@link Mat4}.\n   * @param matrix - {@link Mat4} to use.\n   * @returns - this {@link Mat3} after being set.\n   */\n  setFromMat4(matrix: Mat4 = new Mat4()) {\n    const me = matrix.elements\n\n    this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10])\n\n    return this\n  }\n\n  /**\n   * Multiply this {@link Mat3} with another {@link Mat3}\n   * @param matrix - {@link Mat3} to multiply with\n   * @returns - this {@link Mat3} after multiplication\n   */\n  multiply(matrix: Mat3 = new Mat3()): Mat3 {\n    return this.multiplyMatrices(this, matrix)\n  }\n\n  /**\n   * Multiply another {@link Mat3} with this {@link Mat3}\n   * @param matrix - {@link Mat3} to multiply with\n   * @returns - this {@link Mat3} after multiplication\n   */\n  premultiply(matrix: Mat3 = new Mat3()): Mat3 {\n    return this.multiplyMatrices(matrix, this)\n  }\n\n  /**\n   * Multiply two {@link Mat3}\n   * @param a - first {@link Mat3}\n   * @param b - second {@link Mat3}\n   * @returns - {@link Mat3} resulting from the multiplication\n   */\n  multiplyMatrices(a: Mat3 = new Mat3(), b: Mat3 = new Mat3()): Mat3 {\n    const ae = a.elements\n    const be = b.elements\n    const te = this.elements\n\n    const a11 = ae[0],\n      a12 = ae[3],\n      a13 = ae[6]\n    const a21 = ae[1],\n      a22 = ae[4],\n      a23 = ae[7]\n    const a31 = ae[2],\n      a32 = ae[5],\n      a33 = ae[8]\n\n    const b11 = be[0],\n      b12 = be[3],\n      b13 = be[6]\n    const b21 = be[1],\n      b22 = be[4],\n      b23 = be[7]\n    const b31 = be[2],\n      b32 = be[5],\n      b33 = be[8]\n\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31\n    te[3] = a11 * b12 + a12 * b22 + a13 * b32\n    te[6] = a11 * b13 + a12 * b23 + a13 * b33\n\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31\n    te[4] = a21 * b12 + a22 * b22 + a23 * b32\n    te[7] = a21 * b13 + a22 * b23 + a23 * b33\n\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31\n    te[5] = a31 * b12 + a32 * b22 + a33 * b32\n    te[8] = a31 * b13 + a32 * b23 + a33 * b33\n\n    return this\n  }\n\n  /**\n   * Invert this {@link Mat3}.\n   * @returns - this {@link Mat3} after being inverted\n   */\n  invert(): Mat3 {\n    const te = this.elements,\n      n11 = te[0],\n      n21 = te[1],\n      n31 = te[2],\n      n12 = te[3],\n      n22 = te[4],\n      n32 = te[5],\n      n13 = te[6],\n      n23 = te[7],\n      n33 = te[8],\n      t11 = n33 * n22 - n32 * n23,\n      t12 = n32 * n13 - n33 * n12,\n      t13 = n23 * n12 - n22 * n13,\n      det = n11 * t11 + n21 * t12 + n31 * t13\n\n    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0)\n\n    const detInv = 1 / det\n\n    te[0] = t11 * detInv\n    te[1] = (n31 * n23 - n33 * n21) * detInv\n    te[2] = (n32 * n21 - n31 * n22) * detInv\n\n    te[3] = t12 * detInv\n    te[4] = (n33 * n11 - n31 * n13) * detInv\n    te[5] = (n31 * n12 - n32 * n11) * detInv\n\n    te[6] = t13 * detInv\n    te[7] = (n21 * n13 - n23 * n11) * detInv\n    te[8] = (n22 * n11 - n21 * n12) * detInv\n\n    return this\n  }\n\n  /**\n   * Transpose this {@link Mat3}.\n   * @returns - this {@link Mat3} after being transposed\n   */\n  transpose(): Mat3 {\n    let tmp\n    const m = this.elements\n\n    tmp = m[1]\n    m[1] = m[3]\n    m[3] = tmp\n    tmp = m[2]\n    m[2] = m[6]\n    m[6] = tmp\n    tmp = m[5]\n    m[5] = m[7]\n    m[7] = tmp\n\n    return this\n  }\n\n  /**\n   * Compute a normal {@link Mat3} matrix from a {@link Mat4} transformation matrix.\n   * @param matrix - {@link Mat4} transformation matrix\n   * @returns - this {@link Mat3} after being inverted and transposed\n   */\n  getNormalMatrix(matrix: Mat4 = new Mat4()): Mat3 {\n    return this.setFromMat4(matrix).invert().transpose()\n  }\n}\n","import { Object3D, Object3DMatricesType, Object3DTransformMatrix } from './Object3D'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { CameraRenderer, isCameraRenderer } from '../renderers/utils'\r\nimport { Mat4 } from '../../math/Mat4'\r\nimport { Camera } from '../camera/Camera'\r\nimport { Mat3 } from '../../math/Mat3'\r\n\r\n/**\r\n * Defines an {@link Object3D} normal matrix object\r\n */\r\nexport interface Object3DNormalMatrix {\r\n  /** The {@link Mat3} matrix used */\r\n  matrix: Mat3\r\n  /** Whether we should update the {@link Mat3} matrix */\r\n  shouldUpdate: boolean\r\n  /** Function to update our {@link Mat3} matrix */\r\n  onUpdate: () => void\r\n}\r\n\r\n/** Defines all kind of possible {@link ProjectedObject3D} matrix types */\r\nexport type ProjectedObject3DMatricesType = Object3DMatricesType | 'modelView' | 'modelViewProjection'\r\n/** Defines the special {@link ProjectedObject3D} normal matrix type */\r\nexport type ProjectedObject3DNormalMatrix = Record<'normal', Object3DNormalMatrix>\r\n\r\n/** Defines all possible {@link Object3DTransformMatrix | matrix object} used by our {@link ProjectedObject3D} */\r\nexport type ProjectedObject3DMatrices =\r\n  | Record<ProjectedObject3DMatricesType, Object3DTransformMatrix> & ProjectedObject3DNormalMatrix\r\n\r\n/**\r\n * Used to apply the {@link Camera#projectionMatrix | projection} and {@link Camera#viewMatrix | view} matrices of a {@link Camera} to an {@link Object3D}, in order to compute {@link ProjectedObject3D#modelViewMatrix | modelView} and {@link ProjectedObject3D#modelViewProjectionMatrix | modelViewProjection} matrices.\r\n */\r\nexport class ProjectedObject3D extends Object3D {\r\n  /** {@link Camera | Camera} object used to compute {@link ProjectedObject3D#modelViewMatrix | model view} and {@link ProjectedObject3D#modelViewProjectionMatrix | model view projection} matrices */\r\n  camera: Camera\r\n\r\n  /** {@link ProjectedObject3DMatrices | Matrices object} of the {@link ProjectedObject3D} */\r\n  matrices: ProjectedObject3DMatrices\r\n\r\n  /**\r\n   * ProjectedObject3D constructor\r\n   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link ProjectedObject3D}\r\n   */\r\n  constructor(renderer: CameraRenderer | GPUCurtains) {\r\n    super()\r\n\r\n    renderer = isCameraRenderer(renderer, 'ProjectedObject3D')\r\n\r\n    this.camera = renderer.camera\r\n  }\r\n\r\n  /**\r\n   * Tell our projection matrix stack to update\r\n   */\r\n  applyPosition() {\r\n    super.applyPosition()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Tell our projection matrix stack to update\r\n   */\r\n  applyRotation() {\r\n    super.applyRotation()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Tell our projection matrix stack to update\r\n   */\r\n  applyScale() {\r\n    super.applyScale()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Tell our projection matrix stack to update\r\n   */\r\n  applyTransformOrigin() {\r\n    super.applyTransformOrigin()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Set our transform and projection matrices\r\n   */\r\n  setMatrices() {\r\n    super.setMatrices()\r\n\r\n    this.matrices = {\r\n      ...this.matrices,\r\n      modelView: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: true,\r\n        onUpdate: () => {\r\n          // our model view matrix is our model matrix multiplied with our camera view matrix\r\n          this.modelViewMatrix.multiplyMatrices(this.viewMatrix, this.worldMatrix)\r\n        },\r\n      },\r\n      modelViewProjection: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: true,\r\n        onUpdate: () => {\r\n          //console.log(this.projectionMatrix.elements)\r\n          // our modelViewProjection matrix, useful for bounding box calculations and frustum culling\r\n          // this is the result of our projection matrix multiplied by our modelView matrix\r\n          this.modelViewProjectionMatrix.multiplyMatrices(this.projectionMatrix, this.modelViewMatrix)\r\n        },\r\n      },\r\n      normal: {\r\n        matrix: new Mat3(),\r\n        shouldUpdate: true,\r\n        onUpdate: () => {\r\n          // or normal matrix is the inverse transpose of the world matrix\r\n          this.normalMatrix.getNormalMatrix(this.worldMatrix)\r\n        },\r\n      },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get our {@link modelViewMatrix | model view matrix}\r\n   */\r\n  get modelViewMatrix(): Mat4 {\r\n    return this.matrices.modelView.matrix\r\n  }\r\n\r\n  /**\r\n   * Set our {@link modelViewMatrix | model view matrix}\r\n   * @param value - new {@link modelViewMatrix | model view matrix}\r\n   */\r\n  set modelViewMatrix(value: Mat4) {\r\n    this.matrices.modelView.matrix = value\r\n    this.matrices.modelView.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Get our {@link Camera#viewMatrix | camera view matrix}\r\n   * @readonly\r\n   */\r\n  get viewMatrix(): Mat4 {\r\n    return this.camera.viewMatrix\r\n  }\r\n\r\n  /**\r\n   * Get our {@link Camera#projectionMatrix | camera projection matrix}\r\n   * @readonly\r\n   */\r\n  get projectionMatrix(): Mat4 {\r\n    return this.camera.projectionMatrix\r\n  }\r\n\r\n  /**\r\n   * Get our {@link modelViewProjectionMatrix | model view projection matrix}\r\n   */\r\n  get modelViewProjectionMatrix(): Mat4 {\r\n    return this.matrices.modelViewProjection.matrix\r\n  }\r\n\r\n  /**\r\n   * Set our {@link modelViewProjectionMatrix | model view projection matrix}\r\n   * @param value - new {@link modelViewProjectionMatrix | model view projection matrix}s\r\n   */\r\n  set modelViewProjectionMatrix(value: Mat4) {\r\n    this.matrices.modelViewProjection.matrix = value\r\n    this.matrices.modelViewProjection.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Get our {@link normalMatrix | normal matrix}\r\n   */\r\n  get normalMatrix(): Mat3 {\r\n    return this.matrices.normal.matrix\r\n  }\r\n\r\n  /**\r\n   * Set our {@link normalMatrix | normal matrix}\r\n   * @param value - new {@link normalMatrix | normal matrix}\r\n   */\r\n  set normalMatrix(value: Mat3) {\r\n    this.matrices.normal.matrix = value\r\n    this.matrices.normal.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Set our projection matrices shouldUpdate flags to true (tell them to update)\r\n   */\r\n  shouldUpdateProjectionMatrixStack() {\r\n    this.matrices.modelView.shouldUpdate = true\r\n    this.matrices.modelViewProjection.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * When the world matrix update, tell our projection matrix to update as well\r\n   */\r\n  shouldUpdateWorldMatrix() {\r\n    super.shouldUpdateWorldMatrix()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n    this.matrices.normal.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Tell all our matrices to update\r\n   */\r\n  shouldUpdateMatrixStack() {\r\n    this.shouldUpdateModelMatrix()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n}\r\n","export default /* wgsl */ `\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n  @location(1) normal: vec3f,\r\n};\r\n\r\n@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {\r\n  // normals\r\n  return vec4(normalize(fsInput.normal) * 0.5 + 0.5, 1.0);\r\n}`\r\n","import { CameraRenderer, isCameraRenderer } from '../../renderers/utils'\r\nimport { DOMFrustum } from '../../DOM/DOMFrustum'\r\nimport {\r\n  MeshBaseClass,\r\n  MeshBaseMixin,\r\n  MeshBaseOptions,\r\n  MeshBaseParams,\r\n  MeshBaseRenderParams,\r\n  MixinConstructor,\r\n} from './MeshBaseMixin'\r\nimport { GPUCurtains } from '../../../curtains/GPUCurtains'\r\nimport { DOMElementBoundingRect, RectCoords } from '../../DOM/DOMElement'\r\nimport { RenderMaterialParams, ShaderOptions } from '../../../types/Materials'\r\nimport { ProjectedObject3D } from '../../objects3D/ProjectedObject3D'\r\nimport default_projected_vsWgsl from '../../shaders/chunks/default/default_projected_vs.wgsl'\r\nimport default_normal_fsWgsl from '../../shaders/chunks/default/default_normal_fs.wgsl'\r\nimport { Vec3 } from '../../../math/Vec3'\r\nimport {\r\n  getPCFDirectionalShadows,\r\n  getPCFPointShadowContribution,\r\n  getPCFPointShadows,\r\n  getPCFShadowContribution,\r\n} from '../../shaders/chunks/shading/shadows'\r\nimport { RenderBundle } from '../../renderPasses/RenderBundle'\r\nimport { BufferBinding, BufferBindingParams } from '../../bindings/BufferBinding'\r\n\r\n/** Define all possible frustum culling checks. */\r\nexport type FrustumCullingCheck = 'OBB' | 'sphere' | false\r\n\r\n/**\r\n * Base parameters used to create a ProjectedMesh\r\n */\r\nexport interface ProjectedMeshBaseParams {\r\n  /** Frustum culling check to use. Accepts `OBB`, `sphere` or a boolean. Default to `OBB`. When set to `true`, `OBB` is used. */\r\n  frustumCulling?: FrustumCullingCheck\r\n  /** Margins (in pixels) to applied to the {@link ProjectedMeshBaseClass#domFrustum | DOM Frustum} to determine if this ProjectedMesh should be frustum culled or not. */\r\n  DOMFrustumMargins?: RectCoords\r\n\r\n  /** Whether the mesh should receive the shadows from shadow casting lights. If set to `true`, the lights shadow map textures and sampler will be added to the material, and some shader chunks helpers will be added. Default to `false`. */\r\n  receiveShadows?: boolean\r\n  /** Whether the mesh should cast shadows from shadow casting lights. If set to `true`, the mesh will be automatically added to all shadow maps. If you want to cast only specific shadows, see {@link core/shadows/Shadow.Shadow#addShadowCastingMesh | shadow's addShadowCastingMesh} method. Default to `false`. */\r\n  castShadows?: boolean\r\n}\r\n\r\n/** Parameters used to create a ProjectedMesh */\r\nexport interface ProjectedMeshParameters extends MeshBaseParams, ProjectedMeshBaseParams {}\r\n\r\n/** Parameters used to create a Projected Render Material */\r\nexport interface ProjectedRenderMaterialParams extends RenderMaterialParams, ProjectedMeshBaseParams {}\r\n\r\n/** @const - Default ProjectedMesh parameters to merge with user defined parameters */\r\nconst defaultProjectedMeshParams: ProjectedMeshBaseParams = {\r\n  // frustum culling and visibility\r\n  frustumCulling: 'OBB',\r\n  DOMFrustumMargins: {\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n  },\r\n  receiveShadows: false,\r\n  castShadows: false,\r\n}\r\n\r\n/** Base options used to create this ProjectedMesh */\r\nexport interface ProjectedMeshBaseOptions extends MeshBaseOptions, ProjectedMeshBaseParams {}\r\n\r\n/**\r\n * This class describes the properties and methods to set up a Projected Mesh (i.e. a basic {@link MeshBaseClass | Mesh} with {@link ProjectedObject3D} transformations matrices and a {@link core/camera/Camera.Camera | Camera} to use for projection), implemented in the {@link ProjectedMeshBaseMixin}:\r\n * - Handle the frustum culling (check if the {@link ProjectedObject3D} currently lies inside the {@link core/camera/Camera.Camera | Camera} frustum)\r\n * - Add callbacks for when the Mesh enters or leaves the {@link core/camera/Camera.Camera | Camera} frustum\r\n */\r\nexport declare class ProjectedMeshBaseClass extends MeshBaseClass {\r\n  /** The {@link CameraRenderer} used */\r\n  renderer: CameraRenderer\r\n  /** The ProjectedMesh {@link DOMFrustum} class object */\r\n  domFrustum: DOMFrustum\r\n  /** Frustum culling check to use. Accepts `OBB`, `sphere` or a boolean. Default to `OBB`. When set to `true`, `OBB` is used. */\r\n  frustumCulling: FrustumCullingCheck\r\n  /** Margins (in pixels) to applied to the {@link ProjectedMeshBaseClass#domFrustum | DOM Frustum} to determine if this ProjectedMesh should be frustum culled or not */\r\n  DOMFrustumMargins: RectCoords\r\n\r\n  /** Options used to create this {@link ProjectedMeshBaseClass} */\r\n  options: ProjectedMeshBaseOptions\r\n\r\n  // callbacks\r\n  /** function assigned to the {@link onReEnterView} callback */\r\n  _onReEnterViewCallback: () => void\r\n  /** function assigned to the {@link onLeaveView} callback */\r\n  _onLeaveViewCallback: () => void\r\n\r\n  /**\r\n   * {@link ProjectedMeshBaseClass} constructor\r\n   * @param renderer - our {@link CameraRenderer} class object\r\n   * @param element - a DOM HTML Element that can be bound to a Mesh\r\n   * @param parameters - {@link ProjectedMeshParameters | Projected Mesh base parameters}\r\n   */\r\n  constructor(renderer: CameraRenderer, element: HTMLElement | null, parameters: ProjectedMeshParameters)\r\n\r\n  /**\r\n   * Set or reset this Mesh {@link CameraRenderer | renderer}.\r\n   * @param renderer - New {@link CameraRenderer} or {@link GPUCurtains} instance to use.\r\n   */\r\n  setRenderer(renderer: CameraRenderer | GPUCurtains): void\r\n\r\n  /**\r\n   * Assign or remove a {@link RenderBundle} to this Mesh.\r\n   * @param renderBundle - the {@link RenderBundle} to assign or null if we want to remove the current {@link RenderBundle}.\r\n   * @param updateScene - Whether to remove and then re-add the Mesh from the {@link core/scenes/Scene.Scene | Scene} or not.\r\n   */\r\n  setRenderBundle(renderBundle?: RenderBundle | null, updateScene?: boolean): void\r\n\r\n  /**\r\n   * Reset the {@link BufferBinding | matrices buffer binding} parent and offset and tell its bind group to update.\r\n   * @param offset - New offset to use in the parent {@link RenderBundle#binding | RenderBundle binding}.\r\n   */\r\n  patchRenderBundleBinding(offset?: number): void\r\n\r\n  /**\r\n   * Set default shaders if one or both of them are missing\r\n   */\r\n  setShaders(): void\r\n\r\n  /**\r\n   * Set a Mesh matrices uniforms inputs then call {@link MeshBaseClass} super method\r\n   * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}\r\n   */\r\n  setMaterial(meshParameters: ProjectedRenderMaterialParams): void\r\n\r\n  /**\r\n   * Get the visible property value\r\n   */\r\n  get visible(): boolean\r\n\r\n  /**\r\n   * Set the visible property value\r\n   * @param value - new visibility value\r\n   */\r\n  set visible(value: boolean)\r\n\r\n  /**\r\n   * Resize our Mesh\r\n   * @param boundingRect - the new bounding rectangle\r\n   */\r\n  resize(boundingRect: DOMElementBoundingRect | null): void\r\n\r\n  /**\r\n   * Apply scale and resize textures\r\n   */\r\n  applyScale(): void\r\n\r\n  /**\r\n   * Get our {@link DOMFrustum} projected bounding rectangle\r\n   * @readonly\r\n   */\r\n  get projectedBoundingRect(): DOMElementBoundingRect\r\n\r\n  /**\r\n   * Callback to execute when a Mesh is reentering the view frustum.\r\n   * @param callback - callback to run when {@link ProjectedMeshBaseClass} is reentering the view frustum\r\n   * @returns - our Mesh\r\n   */\r\n  onReEnterView: (callback: () => void) => ProjectedMeshBaseClass\r\n\r\n  /**\r\n   * Callback to execute when a Mesh is leaving the view frustum.\r\n   * @param callback - callback to run when {@link ProjectedMeshBaseClass} is leaving the view frustum\r\n   * @returns - our Mesh\r\n   */\r\n  onLeaveView: (callback: () => void) => ProjectedMeshBaseClass\r\n\r\n  /**\r\n   * Get the geometry bounding sphere in clip space.\r\n   * @readonly\r\n   */\r\n  get clipSpaceBoundingSphere(): {\r\n    /** Center of the bounding sphere. */\r\n    center: Vec3\r\n    /** Radius of the bounding sphere. */\r\n    radius: number\r\n  }\r\n\r\n  /**\r\n   * Check if the Mesh lies inside the {@link CameraRenderer#camera | camera} view frustum or not.\r\n   */\r\n  checkFrustumCulling(): void\r\n\r\n  /**\r\n   * Tell our matrices bindings to update if needed and call {@link MeshBaseClass#onBeforeRenderPass | Mesh base onBeforeRenderPass} super.\r\n   */\r\n  onBeforeRenderPass(): void\r\n\r\n  /**\r\n   * Only render the Mesh if it is in view frustum.\r\n   * Since render() is actually called before onRenderPass(), we are sure to have fresh frustum bounding rectangle values here.\r\n   * @param pass - current render pass\r\n   */\r\n  onRenderPass(pass: GPURenderPassEncoder): void\r\n}\r\n\r\n/**\r\n * Used to add the properties and methods defined in {@link ProjectedMeshBaseClass} to the {@link MeshBaseClass} and mix it with a given Base of type {@link ProjectedObject3D} or {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D}.\r\n * @param Base - the class to mix onto, should be of {@link ProjectedObject3D} or {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D} type\r\n * @returns - the mixed classes, creating a Projected Mesh.\r\n */\r\nfunction ProjectedMeshBaseMixin<TBase extends MixinConstructor<ProjectedObject3D>>(\r\n  Base: TBase\r\n): MixinConstructor<ProjectedMeshBaseClass> & TBase {\r\n  /**\r\n   * ProjectedMeshBase defines our base properties and methods\r\n   */\r\n  return class ProjectedMeshBase extends MeshBaseMixin(Base) {\r\n    /** The {@link CameraRenderer} used */\r\n    renderer: CameraRenderer\r\n    /** The ProjectedMesh {@link DOMFrustum} class object */\r\n    domFrustum: DOMFrustum\r\n    /** Frustum culling check to use. Accepts `OBB`, `sphere` or a boolean. Default to `OBB`. When set to `true`, `OBB` is used. */\r\n    frustumCulling: FrustumCullingCheck\r\n    /** Margins (in pixels) to applied to the {@link ProjectedMeshBaseClass#domFrustum | DOM Frustum} to determine if this ProjectedMesh should be frustum culled or not */\r\n    DOMFrustumMargins: RectCoords\r\n\r\n    /** Options used to create this {@link ProjectedMeshBaseClass} */\r\n    options: ProjectedMeshBaseOptions\r\n\r\n    // callbacks / events\r\n    /** function assigned to the {@link onReEnterView} callback */\r\n    _onReEnterViewCallback: () => void = () => {\r\n      /* allow empty callback */\r\n    }\r\n    /** function assigned to the {@link onLeaveView} callback */\r\n    _onLeaveViewCallback: () => void = () => {\r\n      /* allow empty callback */\r\n    }\r\n\r\n    /**\r\n     * ProjectedMeshBase constructor\r\n     *\r\n     * @typedef MeshBaseArrayParams\r\n     * @type {array}\r\n     * @property {(CameraRenderer|GPUCurtains)} 0 - our renderer class object\r\n     * @property {(string|HTMLElement|null)} 1 - the DOM HTML Element that can be bound to a Mesh\r\n     * @property {ProjectedMeshParameters} 2 - Projected Mesh parameters\r\n     *\r\n     * @param {MeshBaseArrayParams} params - our MeshBaseMixin parameters\r\n     */\r\n    constructor(...params: any[]) {\r\n      super(\r\n        params[0] as CameraRenderer | GPUCurtains,\r\n        params[1] as HTMLElement | string,\r\n        { ...defaultProjectedMeshParams, ...params[2], ...{ useProjection: true } } as ProjectedMeshParameters\r\n      )\r\n\r\n      let renderer = params[0]\r\n\r\n      // force this mesh to use projection!\r\n      const parameters = {\r\n        ...defaultProjectedMeshParams,\r\n        ...params[2],\r\n        ...{ useProjection: true },\r\n      } as ProjectedMeshParameters\r\n\r\n      this.type = 'MeshTransformed'\r\n\r\n      renderer = isCameraRenderer(renderer, parameters.label ? parameters.label + ' ' + this.type : this.type)\r\n\r\n      this.renderer = renderer\r\n\r\n      const { frustumCulling, DOMFrustumMargins, receiveShadows, castShadows } = parameters\r\n\r\n      this.options = {\r\n        ...(this.options ?? {}), // merge possible lower options?\r\n        frustumCulling,\r\n        DOMFrustumMargins,\r\n        receiveShadows,\r\n        castShadows,\r\n      }\r\n\r\n      if (this.options.castShadows) {\r\n        this.renderer.shadowCastingLights.forEach((light) => {\r\n          if (light.shadow.isActive) {\r\n            light.shadow.addShadowCastingMesh(this)\r\n          }\r\n        })\r\n      }\r\n\r\n      this.setDOMFrustum()\r\n    }\r\n\r\n    /**\r\n     * Set or reset this Mesh {@link renderer}.\r\n     * @param renderer - New {@link CameraRenderer} or {@link GPUCurtains} instance to use.\r\n     */\r\n    setRenderer(renderer: CameraRenderer | GPUCurtains) {\r\n      super.setRenderer(renderer)\r\n\r\n      // force update of new camera\r\n      this.camera = this.renderer.camera\r\n\r\n      if (this.options.castShadows) {\r\n        this.renderer.shadowCastingLights.forEach((light) => {\r\n          if (light.shadow.isActive) {\r\n            light.shadow.addShadowCastingMesh(this)\r\n          }\r\n        })\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Assign or remove a {@link RenderBundle} to this Mesh.\r\n     * @param renderBundle - The {@link RenderBundle} to assign or null if we want to remove the current {@link RenderBundle}.\r\n     * @param updateScene - Whether to remove and then re-add the Mesh from the {@link core/scenes/Scene.Scene | Scene} or not.\r\n     */\r\n    setRenderBundle(renderBundle: RenderBundle | null, updateScene = true) {\r\n      // same render bundle? abort\r\n      if (this.renderBundle && renderBundle && this.renderBundle.uuid === renderBundle.uuid) return\r\n\r\n      const hasRenderBundle = !!this.renderBundle\r\n      const bindGroup = this.material.getBindGroupByBindingName('matrices')\r\n      const matrices = this.material.getBufferBindingByName('matrices') as BufferBinding\r\n\r\n      if (this.renderBundle && !renderBundle && matrices.parent) {\r\n        // if we did have a render bundle, reset the parent and bind group\r\n        matrices.parent = null\r\n        matrices.shouldResetBindGroup = true\r\n        bindGroup.createBindingBuffer(matrices)\r\n      }\r\n\r\n      super.setRenderBundle(renderBundle, updateScene)\r\n\r\n      if (this.renderBundle && this.renderBundle.binding) {\r\n        // if we did not have a render bundle, but now we have one with a buffer\r\n        // destroy current matrices binding\r\n        if (hasRenderBundle) {\r\n          bindGroup.destroyBufferBinding(matrices)\r\n        }\r\n\r\n        matrices.options.offset = this.renderBundle.meshes.size - 1\r\n        matrices.parent = this.renderBundle.binding\r\n\r\n        matrices.shouldResetBindGroup = true\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Reset the {@link BufferBinding | matrices buffer binding} parent and offset and tell its bind group to update.\r\n     * @param offset - New offset to use in the parent {@link RenderBundle#binding | RenderBundle binding}.\r\n     */\r\n    patchRenderBundleBinding(offset = 0) {\r\n      const matrices = this.material.getBufferBindingByName('matrices') as BufferBinding\r\n\r\n      matrices.options.offset = offset\r\n      matrices.parent = this.renderBundle.binding\r\n\r\n      matrices.shouldResetBindGroup = true\r\n    }\r\n\r\n    /* SHADERS */\r\n\r\n    /**\r\n     * Set default shaders if one or both of them are missing.\r\n     * Can also patch the fragment shader if the mesh should receive shadows.\r\n     */\r\n    setShaders() {\r\n      const { shaders } = this.options\r\n\r\n      if (!shaders) {\r\n        this.options.shaders = {\r\n          vertex: {\r\n            code: default_projected_vsWgsl,\r\n            entryPoint: 'main',\r\n          },\r\n          fragment: {\r\n            code: default_normal_fsWgsl,\r\n            entryPoint: 'main',\r\n          },\r\n        }\r\n      } else {\r\n        if (!shaders.vertex || !shaders.vertex.code) {\r\n          shaders.vertex = {\r\n            code: default_projected_vsWgsl,\r\n            entryPoint: 'main',\r\n          }\r\n        }\r\n\r\n        if (shaders.fragment === undefined || (shaders.fragment && !(shaders.fragment as ShaderOptions).code)) {\r\n          shaders.fragment = {\r\n            code: default_normal_fsWgsl,\r\n            entryPoint: 'main',\r\n          }\r\n        }\r\n      }\r\n\r\n      // add shadow receiving chunks to shaders\r\n      // TODO what if we change the mesh renderer?\r\n      if (this.options.receiveShadows) {\r\n        const hasActiveShadows = this.renderer.shadowCastingLights.find((light) => light.shadow.isActive)\r\n\r\n        if (hasActiveShadows && shaders.fragment && typeof shaders.fragment === 'object') {\r\n          shaders.fragment.code =\r\n            getPCFDirectionalShadows(this.renderer) +\r\n            getPCFShadowContribution +\r\n            getPCFPointShadows(this.renderer) +\r\n            getPCFPointShadowContribution +\r\n            shaders.fragment.code\r\n        }\r\n      }\r\n\r\n      return shaders\r\n    }\r\n\r\n    /* GEOMETRY */\r\n\r\n    /**\r\n     * Set or update the Projected Mesh {@link Geometry}\r\n     * @param geometry - new {@link Geometry} to use\r\n     */\r\n    useGeometry(geometry) {\r\n      super.useGeometry(geometry)\r\n\r\n      // update DOM Frustum bounding box\r\n      if (this.domFrustum) {\r\n        this.domFrustum.boundingBox = this.geometry.boundingBox\r\n      }\r\n\r\n      // tell the model and projection matrices to update right away\r\n      this.shouldUpdateMatrixStack()\r\n    }\r\n\r\n    /**\r\n     * Set the Mesh frustum culling\r\n     */\r\n    setDOMFrustum() {\r\n      this.domFrustum = new DOMFrustum({\r\n        boundingBox: this.geometry?.boundingBox,\r\n        modelViewProjectionMatrix: this.modelViewProjectionMatrix,\r\n        containerBoundingRect: this.renderer.boundingRect,\r\n        DOMFrustumMargins: this.options.DOMFrustumMargins,\r\n        onReEnterView: () => {\r\n          this._onReEnterViewCallback && this._onReEnterViewCallback()\r\n        },\r\n        onLeaveView: () => {\r\n          this._onLeaveViewCallback && this._onLeaveViewCallback()\r\n        },\r\n      })\r\n\r\n      this.DOMFrustumMargins = this.domFrustum.DOMFrustumMargins\r\n      this.frustumCulling = this.options.frustumCulling\r\n    }\r\n\r\n    /* MATERIAL */\r\n\r\n    /**\r\n     * Hook used to clean up parameters before sending them to the material.\r\n     * @param parameters - parameters to clean before sending them to the {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}\r\n     * @returns - cleaned parameters\r\n     */\r\n    cleanupRenderMaterialParameters(parameters: ProjectedRenderMaterialParams): MeshBaseRenderParams {\r\n      // patch mesh parameters\r\n      delete parameters.frustumCulling\r\n      delete parameters.DOMFrustumMargins\r\n\r\n      if (this.options.receiveShadows) {\r\n        const depthTextures = []\r\n        let depthSamplers = []\r\n\r\n        this.renderer.shadowCastingLights.forEach((light) => {\r\n          if (light.shadow.isActive) {\r\n            depthTextures.push(light.shadow.depthTexture)\r\n            depthSamplers.push(light.shadow.depthComparisonSampler)\r\n          }\r\n        })\r\n\r\n        // filter duplicate depth comparison samplers\r\n        depthSamplers = depthSamplers.filter(\r\n          (sampler, i, array) => array.findIndex((s) => s.uuid === sampler.uuid) === i\r\n        )\r\n\r\n        if (parameters.textures) {\r\n          parameters.textures = [...parameters.textures, ...depthTextures]\r\n        } else {\r\n          parameters.textures = depthTextures\r\n        }\r\n\r\n        if (parameters.samplers) {\r\n          parameters.samplers = [...parameters.samplers, ...depthSamplers]\r\n        } else {\r\n          parameters.samplers = depthSamplers\r\n        }\r\n      }\r\n\r\n      return super.cleanupRenderMaterialParameters(parameters)\r\n    }\r\n\r\n    /**\r\n     * Set a Mesh matrices uniforms inputs then call {@link MeshBaseClass} super method\r\n     * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}\r\n     */\r\n    setMaterial(meshParameters: RenderMaterialParams) {\r\n      // add matrices uniforms\r\n      // https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\r\n      // https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/introToShaders#built-in-variables\r\n      const matricesUniforms: BufferBindingParams = {\r\n        label: 'Matrices',\r\n        name: 'matrices',\r\n        visibility: ['vertex'],\r\n        minOffset: this.renderer.device.limits.minUniformBufferOffsetAlignment,\r\n        struct: {\r\n          model: {\r\n            type: 'mat4x4f',\r\n            value: this.worldMatrix,\r\n          },\r\n          modelView: {\r\n            // model view matrix (world matrix multiplied by camera view matrix)\r\n            type: 'mat4x4f',\r\n            value: this.modelViewMatrix,\r\n          },\r\n          normal: {\r\n            // normal matrix\r\n            type: 'mat3x3f',\r\n            value: this.normalMatrix,\r\n          },\r\n        },\r\n      }\r\n\r\n      if (this.options.renderBundle && this.options.renderBundle.binding) {\r\n        matricesUniforms.parent = this.options.renderBundle.binding\r\n        matricesUniforms.offset = this.options.renderBundle.meshes.size\r\n      }\r\n\r\n      const meshTransformationBinding = new BufferBinding(matricesUniforms)\r\n\r\n      if (!meshParameters.bindings) meshParameters.bindings = []\r\n      meshParameters.bindings.unshift(meshTransformationBinding)\r\n\r\n      super.setMaterial(meshParameters)\r\n    }\r\n\r\n    /**\r\n     * Get the visible property value\r\n     */\r\n    get visible(): boolean {\r\n      return this._visible\r\n    }\r\n\r\n    /**\r\n     * Set the visible property value\r\n     * @param value - new visibility value\r\n     */\r\n    set visible(value: boolean) {\r\n      this.shouldUpdateMatrixStack()\r\n      this._visible = value\r\n    }\r\n\r\n    /* SIZE & TRANSFORMS */\r\n\r\n    /**\r\n     * Resize our {@link ProjectedMeshBaseClass}\r\n     * @param boundingRect - the new bounding rectangle\r\n     */\r\n    resize(boundingRect?: DOMElementBoundingRect | null) {\r\n      if (this.domFrustum) this.domFrustum.setContainerBoundingRect(this.renderer.boundingRect)\r\n\r\n      super.resize(boundingRect)\r\n    }\r\n\r\n    /**\r\n     * Apply scale and resize textures\r\n     */\r\n    applyScale() {\r\n      super.applyScale()\r\n\r\n      // resize textures on scale change!\r\n      for (const texture of this.domTextures) {\r\n        texture.resize()\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get our {@link DOMFrustum} projected bounding rectangle\r\n     * @readonly\r\n     */\r\n    get projectedBoundingRect(): DOMElementBoundingRect {\r\n      return this.domFrustum?.projectedBoundingRect\r\n    }\r\n\r\n    /* EVENTS */\r\n\r\n    /**\r\n     * Assign a callback function to _onReEnterViewCallback\r\n     * @param callback - callback to run when {@link ProjectedMeshBaseClass} is reentering the view frustum\r\n     * @returns - our Mesh\r\n     */\r\n    onReEnterView(callback: () => void): ProjectedMeshBaseClass {\r\n      if (callback) {\r\n        this._onReEnterViewCallback = callback\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * Assign a callback function to _onLeaveViewCallback\r\n     * @param callback - callback to run when {@link ProjectedMeshBaseClass} is leaving the view frustum\r\n     * @returns - our Mesh\r\n     */\r\n    onLeaveView(callback: () => void): ProjectedMeshBaseClass {\r\n      if (callback) {\r\n        this._onLeaveViewCallback = callback\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    /* RENDER */\r\n\r\n    /**\r\n     * Get the geometry bounding sphere in clip space.\r\n     * @readonly\r\n     */\r\n    get clipSpaceBoundingSphere(): {\r\n      /** Center of the bounding sphere. */\r\n      center: Vec3\r\n      /** Radius of the bounding sphere. */\r\n      radius: number\r\n    } {\r\n      const { center, radius, min, max } = this.geometry.boundingBox\r\n\r\n      // get actual translation and max scale\r\n      const translation = this.worldMatrix.getTranslation()\r\n      const maxWorldRadius = radius * this.worldMatrix.getMaxScaleOnAxis()\r\n\r\n      // get the center on the back face\r\n      const cMin = center.clone().add(translation)\r\n      cMin.z += min.z\r\n\r\n      // get the center on the front face\r\n      const cMax = center.clone().add(translation)\r\n      cMax.z += max.z\r\n\r\n      // get a point on the back face sphere\r\n      // use Y because the projection is dependent of the Y axis\r\n      const sMin = cMin.clone()\r\n      sMin.y += maxWorldRadius\r\n\r\n      // get a point on the front face sphere\r\n      const sMax = cMax.clone()\r\n      sMax.y += maxWorldRadius\r\n\r\n      // apply view projection matrix\r\n      cMin.applyMat4(this.camera.viewProjectionMatrix)\r\n      cMax.applyMat4(this.camera.viewProjectionMatrix)\r\n      sMin.applyMat4(this.camera.viewProjectionMatrix)\r\n      sMax.applyMat4(this.camera.viewProjectionMatrix)\r\n\r\n      // now get the bounding rectangle of the back and front face rectangles\r\n      const rMin = cMin.distance(sMin)\r\n      const rMax = cMax.distance(sMax)\r\n\r\n      const rectMin = {\r\n        xMin: cMin.x - rMin,\r\n        xMax: cMin.x + rMin,\r\n        yMin: cMin.y - rMin,\r\n        yMax: cMin.y + rMin,\r\n      }\r\n\r\n      const rectMax = {\r\n        xMin: cMax.x - rMax,\r\n        xMax: cMax.x + rMax,\r\n        yMin: cMax.y - rMax,\r\n        yMax: cMax.y + rMax,\r\n      }\r\n\r\n      // compute final rectangle\r\n      const rect = {\r\n        xMin: Math.min(rectMin.xMin, rectMax.xMin),\r\n        yMin: Math.min(rectMin.yMin, rectMax.yMin),\r\n        xMax: Math.max(rectMin.xMax, rectMax.xMax),\r\n        yMax: Math.max(rectMin.yMax, rectMax.yMax),\r\n      }\r\n\r\n      // get sphere center\r\n      const sphereCenter = cMax.add(cMin).multiplyScalar(0.5).clone()\r\n      sphereCenter.x = (rect.xMax + rect.xMin) / 2\r\n      sphereCenter.y = (rect.yMax + rect.yMin) / 2\r\n\r\n      // get sphere radius\r\n      const sphereRadius = Math.max(rect.xMax - rect.xMin, rect.yMax - rect.yMin) * 0.5\r\n\r\n      return {\r\n        center: sphereCenter,\r\n        radius: sphereRadius,\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Check if the Mesh lies inside the {@link camera} view frustum or not using the test defined by {@link frustumCulling}.\r\n     */\r\n    checkFrustumCulling() {\r\n      if (this.matricesNeedUpdate) {\r\n        if (this.domFrustum && this.frustumCulling) {\r\n          if (this.frustumCulling === 'sphere') {\r\n            this.domFrustum.setDocumentCoordsFromClipSpaceSphere(this.clipSpaceBoundingSphere)\r\n          } else {\r\n            this.domFrustum.setDocumentCoordsFromClipSpaceOBB()\r\n          }\r\n\r\n          this.domFrustum.intersectsContainer()\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Tell our matrices bindings to update if needed and call {@link MeshBaseClass#onBeforeRenderPass | Mesh base onBeforeRenderPass} super.\r\n     */\r\n    onBeforeRenderPass() {\r\n      if (this.material && this.matricesNeedUpdate) {\r\n        this.material.shouldUpdateInputsBindings('matrices')\r\n      }\r\n\r\n      super.onBeforeRenderPass()\r\n    }\r\n\r\n    /**\r\n     * Render our Mesh if the {@link RenderMaterial} is ready and if it is not frustum culled.\r\n     * @param pass - current render pass\r\n     */\r\n    onRenderPass(pass: GPURenderPassEncoder) {\r\n      if (!this.ready) return\r\n\r\n      this._onRenderCallback && this._onRenderCallback()\r\n\r\n      if ((this.domFrustum && this.domFrustum.isIntersecting) || !this.frustumCulling) {\r\n        // render our material\r\n        this.material.render(pass)\r\n        // then render our geometry\r\n        this.geometry.render(pass)\r\n      }\r\n    }\r\n\r\n    destroy() {\r\n      if (this.options.castShadows) {\r\n        this.renderer.shadowCastingLights.forEach((light) => {\r\n          if (light.shadow.isActive) {\r\n            light.shadow.removeMesh(this)\r\n          }\r\n        })\r\n      }\r\n\r\n      super.destroy()\r\n    }\r\n  }\r\n}\r\n\r\nexport { ProjectedMeshBaseMixin }\r\n","import { CameraRenderer, isCameraRenderer } from '../renderers/utils'\r\nimport { ProjectedObject3D } from '../objects3D/ProjectedObject3D'\r\nimport { ProjectedMeshBaseMixin, ProjectedMeshParameters } from './mixins/ProjectedMeshBaseMixin'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\n\r\n/**\r\n * Create a 3D Mesh.\r\n *\r\n * A 3D Mesh is a basically a {@link ProjectedObject3D} with a {@link core/geometries/Geometry.Geometry | Geometry} and a {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}.\r\n *\r\n * You need to pass at least a valid {@link core/geometries/Geometry.Geometry | Geometry} as parameter.<br>\r\n * If no shaders are provided, it will use the normals colors as default shading.\r\n *\r\n * ## Shaders bindings and default attributes and uniforms\r\n *\r\n * The shaders are automatically patched with the input {@link core/bindGroups/BindGroup.BindGroup | bind groups} and {@link core/bindings/BufferBinding.BufferBinding | bindings} defined in your parameters object, as well as some default attributes and uniforms (see {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry | RenderPipelineEntry}).\r\n *\r\n * ### Default shaders\r\n *\r\n * If one or all shaders are missing, the library will use default ones.\r\n *\r\n * #### Default vertex shader:\r\n *\r\n * ```wgsl\r\n * struct VSOutput {\r\n *   @builtin(position) position: vec4f,\r\n *   @location(0) uv: vec2f,\r\n *   @location(1) normal: vec3f,\r\n *   @location(2) worldPosition: vec3f,\r\n *   @location(3) viewDirection: vec3f,\r\n * };\r\n *\r\n * @vertex fn main(\r\n *   attributes: Attributes,\r\n * ) -> VSOutput {\r\n *   var vsOutput: VSOutput;\r\n *\r\n *   vsOutput.position = getOutputPosition(attributes.position);\r\n *   vsOutput.uv = attributes.uv;\r\n *   vsOutput.normal = getWorldNormal(attributes.normal);\r\n *   vsOutput.worldPosition = getWorldPosition(attributes.position).xyz;\r\n *   vsOutput.viewDirection = camera.position - vsOutput.worldPosition;\r\n *\r\n *   return vsOutput;\r\n * }\r\n * ```\r\n *\r\n * #### Default fragment shader:\r\n *\r\n * ```wgsl\r\n * struct VSOutput {\r\n *   @builtin(position) position: vec4f,\r\n *   @location(0) uv: vec2f,\r\n *   @location(1) normal: vec3f,\r\n * };\r\n *\r\n * @fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {\r\n *   // normals\r\n *   return vec4(normalize(fsInput.normal) * 0.5 + 0.5, 1.0);\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a mesh with a box geometry\r\n * // will use the normals colors as default shading\r\n * const mesh = new Mesh(gpuCurtains, {\r\n *   label: 'My mesh',\r\n *   geometry: new BoxGeometry(),\r\n * })\r\n * ```\r\n */\r\nexport class Mesh extends ProjectedMeshBaseMixin(ProjectedObject3D) {\r\n  /**\r\n   * Mesh constructor\r\n   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link Mesh}\r\n   * @param parameters - {@link ProjectedMeshParameters | parameters} use to create this {@link Mesh}\r\n   */\r\n  constructor(renderer: CameraRenderer | GPUCurtains, parameters: ProjectedMeshParameters = {}) {\r\n    // we could pass our curtains object OR our curtains renderer object\r\n    renderer = isCameraRenderer(renderer, parameters.label ? parameters.label + ' Mesh' : 'Mesh')\r\n\r\n    // @ts-ignore\r\n    super(renderer, null, parameters)\r\n\r\n    this.type = 'Mesh'\r\n  }\r\n}\r\n","import { PipelineEntry } from './PipelineEntry'\r\nimport { isRenderer } from '../renderers/utils'\r\nimport { throwError } from '../../utils/utils'\r\nimport { PipelineEntryParams, PipelineEntryShaders } from '../../types/PipelineEntries'\r\nimport { BindGroupBufferBindingElement } from '../../types/BindGroups'\r\n\r\n/**\r\n * Used to create a {@link PipelineEntry} specifically designed to handle {@link core/materials/ComputeMaterial.ComputeMaterial | ComputeMaterial}.\r\n *\r\n * ## Shaders patching\r\n *\r\n * The {@link ComputePipelineEntry} uses each of its {@link ComputePipelineEntry#bindGroups | bind groups} {@link core/bindings/Binding.Binding | Binding} to patch the given compute shader before creating the {@link GPUShaderModule}.<br>\r\n * It will prepend every {@link core/bindings/Binding.Binding | Binding} WGSL code snippets (or fragments) with the correct bind group and bindings indices.\r\n *\r\n * ## Pipeline compilation\r\n *\r\n * The {@link ComputePipelineEntry} will then create a {@link GPUComputePipeline} (asynchronously by default).\r\n */\r\nexport class ComputePipelineEntry extends PipelineEntry {\r\n  /** Shaders to use with this {@link ComputePipelineEntry} */\r\n  shaders: PipelineEntryShaders\r\n  /** {@link GPUDevice.createComputePipeline().descriptor | GPUComputePipelineDescriptor} based on {@link layout} and {@link shaders} */\r\n  descriptor: GPUComputePipelineDescriptor | null\r\n\r\n  /**\r\n   * ComputePipelineEntry constructor\r\n   * @param parameters - {@link PipelineEntryParams | parameters} used to create this {@link ComputePipelineEntry}\r\n   */\r\n  constructor(parameters: PipelineEntryParams) {\r\n    const { label, renderer, bindGroups } = parameters\r\n\r\n    const type = 'ComputePipelineEntry'\r\n\r\n    isRenderer(renderer, label ? label + ' ' + type : type)\r\n\r\n    super(parameters)\r\n\r\n    this.type = type\r\n\r\n    this.shaders = {\r\n      compute: {\r\n        head: '',\r\n        code: '',\r\n        module: null,\r\n      },\r\n    }\r\n\r\n    this.descriptor = null\r\n  }\r\n\r\n  /* SHADERS */\r\n\r\n  /**\r\n   * Patch the shaders by appending all the {@link bindGroups | bind groups}) WGSL code fragments to the given {@link PipelineEntryParams#shaders | parameter shader code}\r\n   */\r\n  patchShaders() {\r\n    this.shaders.compute.head = ''\r\n    this.shaders.compute.code = ''\r\n\r\n    const groupsBindings = []\r\n    for (const bindGroup of this.bindGroups) {\r\n      let bindIndex = 0\r\n      bindGroup.bindings.forEach((binding, bindingIndex) => {\r\n        binding.wgslGroupFragment.forEach((groupFragment, groupFragmentIndex) => {\r\n          groupsBindings.push({\r\n            groupIndex: bindGroup.index,\r\n            bindIndex,\r\n            wgslStructFragment: (binding as BindGroupBufferBindingElement).wgslStructFragment,\r\n            wgslGroupFragment: groupFragment,\r\n            newLine:\r\n              bindingIndex === bindGroup.bindings.length - 1 &&\r\n              groupFragmentIndex === binding.wgslGroupFragment.length - 1,\r\n          })\r\n\r\n          bindIndex++\r\n        })\r\n      })\r\n    }\r\n\r\n    for (const groupBinding of groupsBindings) {\r\n      // do not duplicate structs\r\n      if (\r\n        groupBinding.wgslStructFragment &&\r\n        this.shaders.compute.head.indexOf(groupBinding.wgslStructFragment) === -1\r\n      ) {\r\n        this.shaders.compute.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.compute.head}`\r\n      }\r\n\r\n      // do not duplicate struct var as well\r\n      if (this.shaders.compute.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\r\n        this.shaders.compute.head = `${this.shaders.compute.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\r\n      }\r\n\r\n      if (groupBinding.newLine) this.shaders.compute.head += `\\n`\r\n    }\r\n\r\n    this.shaders.compute.code = this.shaders.compute.head + this.options.shaders.compute.code\r\n  }\r\n\r\n  /* SETUP */\r\n\r\n  /**\r\n   * Create the {@link shaders}: patch them and create the {@link GPUShaderModule}\r\n   */\r\n  createShaders() {\r\n    this.patchShaders()\r\n\r\n    this.shaders.compute.module = this.createShaderModule({\r\n      code: this.shaders.compute.code,\r\n      type: 'compute',\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create the compute pipeline {@link descriptor}\r\n   */\r\n  createPipelineDescriptor() {\r\n    if (!this.shaders.compute.module) return\r\n\r\n    this.descriptor = {\r\n      label: this.options.label,\r\n      layout: this.layout,\r\n      compute: {\r\n        module: this.shaders.compute.module,\r\n        entryPoint: this.options.shaders.compute.entryPoint,\r\n      },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the compute {@link pipeline}\r\n   */\r\n  createComputePipeline() {\r\n    if (!this.shaders.compute.module) return\r\n\r\n    try {\r\n      this.pipeline = this.renderer.createComputePipeline(this.descriptor)\r\n    } catch (error) {\r\n      this.status.error = error\r\n      throwError(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Asynchronously create the compute {@link pipeline}\r\n   * @returns - void promise result\r\n   */\r\n  async createComputePipelineAsync(): Promise<void> {\r\n    if (!this.shaders.compute.module) return\r\n\r\n    try {\r\n      this.pipeline = await this.renderer.createComputePipelineAsync(this.descriptor)\r\n      this.status.compiled = true\r\n      this.status.compiling = false\r\n      this.status.error = null\r\n    } catch (error) {\r\n      this.status.error = error\r\n      throwError(error)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Call {@link PipelineEntry#compilePipelineEntry | PipelineEntry compilePipelineEntry} method, then create our compute {@link pipeline}\r\n   */\r\n  async compilePipelineEntry(): Promise<void> {\r\n    super.compilePipelineEntry()\r\n\r\n    if (this.options.useAsync) {\r\n      await this.createComputePipelineAsync()\r\n    } else {\r\n      this.createComputePipeline()\r\n      this.status.compiled = true\r\n      this.status.compiling = false\r\n      this.status.error = null\r\n    }\r\n  }\r\n}\r\n","import { RenderPipelineEntry } from './RenderPipelineEntry'\nimport { ComputePipelineEntry } from './ComputePipelineEntry'\nimport { PipelineEntryParams, RenderPipelineEntryParams } from '../../types/PipelineEntries'\nimport { ShaderOptions } from '../../types/Materials'\nimport { compareRenderingOptions } from '../materials/utils'\nimport { BindGroup } from '../bindGroups/BindGroup'\nimport { RenderMaterial } from '../materials/RenderMaterial'\nimport { ComputeMaterial } from '../materials/ComputeMaterial'\n\n/** Defines all types of allowed {@link core/pipelines/PipelineEntry.PipelineEntry | PipelineEntry} class objects */\nexport type AllowedPipelineEntries = RenderPipelineEntry | ComputePipelineEntry\n\n/** Defines all the types of render passes allowed. */\nexport type GPURenderPassTypes = GPURenderPassEncoder | GPURenderBundleEncoder\n/** Defines all the types of passes allowed. */\nexport type GPUPassTypes = GPURenderPassTypes | GPUComputePassEncoder\n\n/**\n * Used to create and keep track of both {@link ComputePipelineEntry} and {@link RenderPipelineEntry}.<br>\n * Perform checks to eventually use a cached pipeline entry instead of creating a new one.<br>\n * The end goal is to cache pipelines and reuse them (as well as bind groups).<br>\n * Also responsible for setting the current pass encoder pipeline in order to avoid redundant setPipeline calls.<br>\n * Created internally by the {@link core/renderers/GPUDeviceManager.GPUDeviceManager | GPUDeviceManager}.<br>\n * @see {@link https://toji.dev/webgpu-best-practices/bind-groups#grouping-resources-based-on-frequency-of-change | WebGPU Bind Group best practices}\n */\nexport class PipelineManager {\n  /** The type of the {@link PipelineManager} */\n  type: string\n  /** Keep track of the current bound pipeline in order to avoid redundant setPipeline calls */\n  currentPipelineIndex: number | null\n  /** Array of already created {@link ComputePipelineEntry} and {@link RenderPipelineEntry} */\n  pipelineEntries: AllowedPipelineEntries[]\n  /** Array of current pass (used by {@link GPURenderPassEncoder} at the moment, but can be extended to {@link GPUComputePassEncoder} as well) already set {@link core/bindGroups/BindGroup.BindGroup | bind groups}. */\n  activeBindGroups: BindGroup[]\n\n  constructor() {\n    this.type = 'PipelineManager'\n\n    this.currentPipelineIndex = null\n    this.pipelineEntries = []\n    this.activeBindGroups = []\n  }\n\n  /**\n   * Compare two {@link ShaderOptions | shader objects}\n   * @param shaderA - first {@link ShaderOptions | shader object} to compare\n   * @param shaderB - second {@link ShaderOptions | shader object} to compare\n   * @returns - whether the two {@link ShaderOptions | shader objects} code and entryPoint match\n   */\n  compareShaders(shaderA: ShaderOptions, shaderB: ShaderOptions): boolean {\n    // store shader code in a Set map?\n    // https://www.measurethat.net/Benchmarks/Show/30363/0/shaders-strings-comparisons\n    return shaderA.code === shaderB.code && shaderA.entryPoint === shaderB.entryPoint\n    //return shaderA.code?.localeCompare(shaderB.code) === 0 && shaderA.entryPoint === shaderB.entryPoint\n  }\n\n  /**\n   * Checks if the provided {@link RenderPipelineEntryParams | RenderPipelineEntry parameters} belongs to an already created {@link RenderPipelineEntry}.\n   * @param parameters - {@link RenderPipelineEntryParams | RenderPipelineEntry parameters}\n   * @returns - the found {@link RenderPipelineEntry}, or null if not found\n   */\n  isSameRenderPipeline(parameters: RenderPipelineEntryParams): RenderPipelineEntry | null {\n    return this.pipelineEntries\n      .filter((pipelineEntry) => pipelineEntry instanceof RenderPipelineEntry)\n      .find((pipelineEntry: RenderPipelineEntry) => {\n        const { options } = pipelineEntry\n        const { shaders, rendering, cacheKey } = parameters\n\n        const sameCacheKey = cacheKey === options.cacheKey\n\n        const sameVertexShader = this.compareShaders(shaders.vertex, options.shaders.vertex)\n        const sameFragmentShader =\n          (!shaders.fragment && !options.shaders.fragment) ||\n          this.compareShaders(shaders.fragment as ShaderOptions, options.shaders.fragment as ShaderOptions)\n\n        const differentParams = compareRenderingOptions(rendering, options.rendering)\n\n        return sameCacheKey && !differentParams.length && sameVertexShader && sameFragmentShader\n      }) as RenderPipelineEntry | null\n  }\n\n  /**\n   * Check if a {@link RenderPipelineEntry} has already been created with the given {@link RenderPipelineEntryParams | parameters}.\n   * Use it if found, else create a new one and add it to the {@link pipelineEntries} array.\n   * @param material - {@link RenderMaterial} used to create the pipeline.\n   * @returns - {@link RenderPipelineEntry}, either from cache or newly created.\n   */\n  createRenderPipeline(material: RenderMaterial): RenderPipelineEntry {\n    const { renderer, attributes, bindGroups, cacheKey, options } = material\n    const { shaders, label, useAsyncPipeline, rendering } = options\n\n    const parameters = {\n      renderer,\n      label: label + ' render pipeline',\n      shaders,\n      useAsync: useAsyncPipeline,\n      bindGroups,\n      cacheKey,\n      rendering,\n      attributes,\n    }\n\n    // render pipeline cache is based on 3 things:\n    // 1. geometry and bind groups buffers layout comparison, via the cacheKey\n    // 2. same rendering options via compareRenderingOptions()\n    // 3. same vertex and fragment shaders code and entry points\n    // see https://toji.dev/webgpu-gltf-case-study/#part-3-pipeline-caching\n    const existingPipelineEntry = this.isSameRenderPipeline(parameters)\n\n    if (existingPipelineEntry) {\n      return existingPipelineEntry\n    } else {\n      const pipelineEntry = new RenderPipelineEntry(parameters)\n\n      this.pipelineEntries.push(pipelineEntry)\n\n      return pipelineEntry\n    }\n  }\n\n  /**\n   * Checks if the provided {@link PipelineEntryParams | PipelineEntry parameters} belongs to an already created {@link ComputePipelineEntry}.\n   * @param parameters - {@link PipelineEntryParams | PipelineEntry parameters}\n   * @returns - the found {@link ComputePipelineEntry}, or null if not found\n   */\n  isSameComputePipeline(parameters: PipelineEntryParams): ComputePipelineEntry | null {\n    return this.pipelineEntries\n      .filter((pipelineEntry) => pipelineEntry instanceof ComputePipelineEntry)\n      .find((pipelineEntry: ComputePipelineEntry) => {\n        const { options } = pipelineEntry\n        const { shaders, cacheKey } = parameters\n\n        const sameCacheKey = cacheKey === options.cacheKey\n\n        const sameComputeShader = this.compareShaders(shaders.compute, options.shaders.compute)\n\n        return sameCacheKey && sameComputeShader\n      }) as ComputePipelineEntry | null\n  }\n\n  /**\n   * Check if a {@link ComputePipelineEntry} has already been created with the given {@link PipelineEntryParams | parameters}.\n   * Use it if found, else create a new one and add it to the {@link pipelineEntries} array.\n   * @param material - {@link ComputeMaterial} used to create the pipeline.\n   * @returns - newly created {@link ComputePipelineEntry}\n   */\n  createComputePipeline(material: ComputeMaterial): ComputePipelineEntry {\n    const { renderer, bindGroups, cacheKey, options } = material\n    const { shaders, label, useAsyncPipeline } = options\n\n    const parameters = {\n      renderer,\n      label: label + ' compute pipeline',\n      shaders,\n      useAsync: useAsyncPipeline,\n      bindGroups,\n      cacheKey,\n    }\n\n    const existingPipelineEntry = this.isSameComputePipeline(parameters)\n\n    if (existingPipelineEntry) {\n      return existingPipelineEntry\n    } else {\n      const pipelineEntry = new ComputePipelineEntry(parameters)\n\n      this.pipelineEntries.push(pipelineEntry)\n\n      return pipelineEntry\n    }\n  }\n\n  /**\n   * Check if the given {@link AllowedPipelineEntries | PipelineEntry} is already set, if not set it\n   * @param pass - current pass encoder\n   * @param pipelineEntry - the {@link AllowedPipelineEntries | PipelineEntry} to set\n   */\n  setCurrentPipeline(pass: GPUPassTypes, pipelineEntry: AllowedPipelineEntries) {\n    if (pipelineEntry.index !== this.currentPipelineIndex) {\n      pass.setPipeline(pipelineEntry.pipeline as GPURenderPipeline & GPUComputePipeline)\n      this.currentPipelineIndex = pipelineEntry.index\n    }\n  }\n\n  /**\n   * Track the active/already set {@link core/bindGroups/BindGroup.BindGroup | bind groups} to avoid `setBindGroup()` redundant calls.\n   * @param pass - current pass encoder.\n   * @param bindGroups - array {@link core/bindGroups/BindGroup.BindGroup | bind groups} passed by the {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}.\n   */\n  setActiveBindGroups(pass: GPUPassTypes, bindGroups: BindGroup[]) {\n    bindGroups.forEach((bindGroup, index) => {\n      if (\n        !this.activeBindGroups[index] ||\n        this.activeBindGroups[index].uuid !== bindGroup.uuid ||\n        this.activeBindGroups[index].index !== bindGroup.index // the same bind group might be used at different indices\n      ) {\n        this.activeBindGroups[index] = bindGroup\n        pass.setBindGroup(bindGroup.index, bindGroup.bindGroup)\n      }\n    })\n  }\n\n  /**\n   * Reset the {@link PipelineManager#currentPipelineIndex | current pipeline index} and {@link activeBindGroups} so the next {@link AllowedPipelineEntries | PipelineEntry} will be set for sure\n   */\n  resetCurrentPipeline() {\n    this.currentPipelineIndex = null\n    this.activeBindGroups = []\n  }\n}\n","import { DOMElement } from '../core/DOM/DOMElement'\r\n\r\n/**\r\n * Defines a {@link ResizeManager} entry\r\n */\r\nexport interface ResizeManagerEntry {\r\n  /** {@link HTMLElement} to track */\r\n  element: DOMElement['element'] | Element\r\n  /** Priority in which to call the callback function */\r\n  priority?: number\r\n  /** Function to execute when the {@link element} is resized */\r\n  callback: () => void | null\r\n}\r\n\r\n/**\r\n * Tiny wrapper around {@link ResizeObserver} used to execute callbacks when given {@link HTMLElement} size changes.\r\n */\r\nexport class ResizeManager {\r\n  /** Whether we should add elements to our {@link resizeObserver} or not */\r\n  shouldWatch: boolean\r\n  /** Array of {@link ResizeManagerEntry | entries} */\r\n  entries: ResizeManagerEntry[]\r\n  /** {@link ResizeObserver} used */\r\n  resizeObserver: ResizeObserver | undefined\r\n\r\n  /**\r\n   * ResizeManager constructor\r\n   */\r\n  constructor() {\r\n    // default to true\r\n    this.shouldWatch = true\r\n\r\n    this.entries = []\r\n\r\n    // do not throw an error if we're using the lib inside a worker\r\n    if (typeof window === 'object' && 'ResizeObserver' in window) {\r\n      this.resizeObserver = new ResizeObserver((observedEntries) => {\r\n        // get all entries corresponding to that element, and sort them by priority\r\n        const allEntries = observedEntries\r\n          .map((observedEntry) => {\r\n            return this.entries.filter((e) => e.element.isSameNode(observedEntry.target))\r\n          })\r\n          .flat()\r\n          .sort((a, b) => b.priority - a.priority)\r\n\r\n        allEntries?.forEach((entry) => {\r\n          if (entry && entry.callback) {\r\n            entry.callback()\r\n          }\r\n        })\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set {@link ResizeManager.shouldWatch | shouldWatch}.\r\n   * @param shouldWatch - whether to watch or not.\r\n   */\r\n  useObserver(shouldWatch = true) {\r\n    this.shouldWatch = shouldWatch\r\n  }\r\n\r\n  /**\r\n   * Track an {@link HTMLElement} size change and execute a callback function when it happens.\r\n   * @param entry - {@link ResizeManagerEntry | entry} to watch.\r\n   */\r\n  observe({ element, priority, callback }: ResizeManagerEntry) {\r\n    if (!element || !this.shouldWatch) return\r\n\r\n    this.resizeObserver?.observe(element)\r\n\r\n    const entry = {\r\n      element,\r\n      priority,\r\n      callback,\r\n    }\r\n\r\n    this.entries.push(entry)\r\n  }\r\n\r\n  /**\r\n   * Unobserve an {@link HTMLElement} and remove it from our {@link entries} array.\r\n   * @param element - {@link HTMLElement} to unobserve.\r\n   */\r\n  unobserve(element: DOMElement['element'] | Element) {\r\n    this.resizeObserver?.unobserve(element)\r\n    this.entries = this.entries.filter((e) => !e.element.isSameNode(element))\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link ResizeManager}.\r\n   */\r\n  destroy() {\r\n    this.resizeObserver?.disconnect()\r\n  }\r\n}\r\n\r\n/** The {@link ResizeManager} instance. */\r\nexport const resizeManager = new ResizeManager() as ResizeManager\r\n","import { resizeManager, ResizeManager, ResizeManagerEntry } from '../../utils/ResizeManager'\r\nimport { throwError } from '../../utils/utils'\r\n\r\n/**\r\n * Defines a rectangular coordinates object\r\n */\r\nexport interface RectCoords {\r\n  /** top position */\r\n  top: number\r\n  /** right position */\r\n  right: number\r\n  /** bottom position */\r\n  bottom: number\r\n  /** left position */\r\n  left: number\r\n}\r\n\r\n/**\r\n * Defines a size object\r\n */\r\nexport interface RectSize {\r\n  /** width of the rectangle */\r\n  width: number\r\n  /** height of the rectangle */\r\n  height: number\r\n}\r\n\r\n/**\r\n * Defines a rectangular bounding box object\r\n */\r\nexport interface RectBBox extends RectSize {\r\n  /** top position of the bounding box */\r\n  top: number\r\n  /** left position of the bounding box */\r\n  left: number\r\n}\r\n\r\n/**\r\n * Defines a DOM position object\r\n */\r\nexport interface DOMPosition {\r\n  /** X position */\r\n  x: number\r\n  /** Y position */\r\n  y: number\r\n}\r\n\r\n/**\r\n * Defines a complete DOM Element bounding rect object, similar to a {@link DOMRect}\r\n */\r\nexport interface DOMElementBoundingRect extends RectCoords, RectBBox, DOMPosition {}\r\n\r\n/**\r\n * Parameters used to create a {@link DOMElement}\r\n */\r\nexport interface DOMElementParams {\r\n  /** {@link HTMLElement} or string representing an {@link HTMLElement} selector of the element the resize observer should track */\r\n  element?: string | Element\r\n  /** Order in which the {@link resizeManager} callback is executed */\r\n  priority?: ResizeManagerEntry['priority']\r\n  /** Callback to tun when the {@link DOMElement#element | element} size changed */\r\n  onSizeChanged?: (boundingRect: DOMElementBoundingRect | null) => void | null\r\n  /** Callback to tun when the {@link DOMElement#element | element} position changed */\r\n  onPositionChanged?: (boundingRect: DOMElementBoundingRect | null) => void | null\r\n}\r\n\r\n/**\r\n * Used to track a DOM Element size and position by using a resize observer provided by {@link ResizeManager}.<br>\r\n * Execute callbacks when the bounding rectangle of the DOM Element changes, which means when its size and/or position change.\r\n */\r\nexport class DOMElement {\r\n  /** The HTML element to track */\r\n  element: HTMLElement\r\n  /** Priority at which this element {@link onSizeChanged} function must be called */\r\n  priority: ResizeManagerEntry['priority']\r\n  /** Flag indicating whether the timeout is still running and we should avoid a new computation */\r\n  isResizing: boolean\r\n  /** Callback to run whenever the {@link element} size changed */\r\n  onSizeChanged: (boundingRect: DOMElementBoundingRect | null) => void | null\r\n  /** Callback to run whenever the {@link element} position changed */\r\n  onPositionChanged: (boundingRect: DOMElementBoundingRect | null) => void | null\r\n  /** The {@link ResizeManager} used, basically a wrapper around a {@link ResizeObserver} */\r\n  resizeManager: ResizeManager\r\n  /** Current  {@link element} bounding rectangle */\r\n  _boundingRect: DOMElementBoundingRect\r\n\r\n  /**\r\n   * DOMElement constructor\r\n   * @param parameters - {@link DOMElementParams | parameters} used to create our DOMElement\r\n   */\r\n  constructor(\r\n    {\r\n      element = document.body,\r\n      priority = 1,\r\n      onSizeChanged = (boundingRect = null) => {\r\n        /* allow empty callback */\r\n      },\r\n      onPositionChanged = (boundingRect = null) => {\r\n        /* allow empty callback */\r\n      },\r\n    } = {} as DOMElementParams\r\n  ) {\r\n    if (typeof element === 'string') {\r\n      this.element = document.querySelector(element)\r\n\r\n      if (!this.element) {\r\n        const notFoundEl = typeof element === 'string' ? `'${element}' selector` : `${element} HTMLElement`\r\n        throwError(`DOMElement: corresponding ${notFoundEl} not found.`)\r\n      }\r\n    } else {\r\n      this.element = element as HTMLElement\r\n    }\r\n\r\n    this.priority = priority\r\n\r\n    this.isResizing = false\r\n\r\n    this.onSizeChanged = onSizeChanged\r\n    this.onPositionChanged = onPositionChanged\r\n\r\n    this.resizeManager = resizeManager\r\n\r\n    this.resizeManager.observe({\r\n      element: this.element,\r\n      priority: this.priority,\r\n      callback: () => {\r\n        this.setSize()\r\n      },\r\n    })\r\n\r\n    // set size right away on init\r\n    this.setSize()\r\n  }\r\n\r\n  /**\r\n   * Check whether 2 bounding rectangles are equals\r\n   * @param rect1 - first bounding rectangle\r\n   * @param rect2 - second bounding rectangle\r\n   * @returns - whether the rectangles are equals or not\r\n   */\r\n  compareBoundingRect(rect1: DOMRect | DOMElementBoundingRect, rect2: DOMRect | DOMElementBoundingRect): boolean {\r\n    return !['x', 'y', 'left', 'top', 'right', 'bottom', 'width', 'height'].some((k) => rect1[k] !== rect2[k])\r\n  }\r\n\r\n  /**\r\n   * Get our element bounding rectangle\r\n   */\r\n  get boundingRect(): DOMElementBoundingRect {\r\n    return this._boundingRect\r\n  }\r\n\r\n  /**\r\n   * Set our element bounding rectangle\r\n   * @param boundingRect - new bounding rectangle\r\n   */\r\n  set boundingRect(boundingRect: DOMElementBoundingRect) {\r\n    const isSameRect = !!this.boundingRect && this.compareBoundingRect(boundingRect, this.boundingRect)\r\n\r\n    this._boundingRect = {\r\n      top: boundingRect.top,\r\n      right: boundingRect.right,\r\n      bottom: boundingRect.bottom,\r\n      left: boundingRect.left,\r\n      width: boundingRect.width,\r\n      height: boundingRect.height,\r\n      x: boundingRect.x,\r\n      y: boundingRect.y,\r\n    }\r\n\r\n    if (!isSameRect) {\r\n      this.onSizeChanged(this.boundingRect)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update our element bounding rectangle because the scroll position has changed\r\n   * @param delta - scroll delta values along X and Y axis\r\n   */\r\n  updateScrollPosition(delta: DOMPosition = { x: 0, y: 0 }) {\r\n    if (this.isResizing) return\r\n\r\n    this._boundingRect.top += delta.y\r\n    this._boundingRect.left += delta.x\r\n\r\n    if (delta.x || delta.y) {\r\n      this.onPositionChanged(this.boundingRect)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set our element bounding rectangle, either by a value or a getBoundingClientRect call\r\n   * @param boundingRect - new bounding rectangle\r\n   */\r\n  setSize(boundingRect: DOMElementBoundingRect | null = null) {\r\n    if (!this.element || this.isResizing) return\r\n\r\n    this.isResizing = true\r\n\r\n    this.boundingRect = boundingRect ?? this.element.getBoundingClientRect()\r\n\r\n    setTimeout(() => {\r\n      this.isResizing = false\r\n    }, 10)\r\n  }\r\n\r\n  /**\r\n   * Destroy our DOMElement - remove from resize observer and clear throttle timeout\r\n   */\r\n  destroy() {\r\n    this.resizeManager.unobserve(this.element)\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\nimport { SceneStackedMesh, RenderedMesh, ProjectedMesh, SceneStackedObject } from '../renderers/GPURenderer'\nimport { ShaderPass } from '../renderPasses/ShaderPass'\nimport { PingPongPlane } from '../../extras/meshes/PingPongPlane'\nimport { ComputePass } from '../computePasses/ComputePass'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { RenderTarget } from '../renderPasses/RenderTarget'\nimport { RenderPass } from '../renderPasses/RenderPass'\nimport { Texture } from '../textures/Texture'\nimport { Object3D } from '../objects3D/Object3D'\nimport { Vec3 } from '../../math/Vec3'\nimport { RenderBundle } from '../renderPasses/RenderBundle'\nimport { throwWarning } from '../../utils/utils'\n\n// used to sort transparent meshes\nconst camPosA = new Vec3()\nconst camPosB = new Vec3()\nconst posA = new Vec3()\nconst posB = new Vec3()\n\n/**\n * Meshes rendering order is dependant of their transparency setting.\n */\nexport interface ProjectionStack {\n  /** opaque Meshes or {@link RenderBundle} will be drawn first */\n  opaque: SceneStackedObject[]\n  /** transparent Meshes or {@link RenderBundle} will be drawn last */\n  transparent: SceneStackedObject[]\n}\n\n/** Meshes or render bundles will be stacked in 2 different objects whether they are projected (use a {@link core/camera/Camera.Camera | Camera}) or not. */\nexport type ProjectionType = 'unProjected' | 'projected'\n\n/** Meshes or render bundles will be put into two stacks of projected/unprojected transparent and opaques objects arrays. */\nexport type Stack = Record<ProjectionType, ProjectionStack>\n\n/**\n * A RenderPassEntry object is used to group Meshes or {@link RenderBundle} based on their rendering target.\n */\nexport interface RenderPassEntry {\n  /** {@link RenderPass} target used onto which render. */\n  renderPass: RenderPass\n  /** {@link Texture} to render to if any (if not specified then this {@link RenderPassEntry} Meshes will be rendered directly to screen). */\n  renderTexture: Texture | null\n  /** Optional function to execute just before rendering the Meshes, useful for eventual texture copy. */\n  onBeforeRenderPass: ((commandEncoder?: GPUCommandEncoder, swapChainTexture?: GPUTexture) => void) | null\n  /** Optional function to execute just after rendering the Meshes, useful for eventual texture copy. */\n  onAfterRenderPass: ((commandEncoder?: GPUCommandEncoder, swapChainTexture?: GPUTexture) => void) | null\n  /** If this {@link RenderPassEntry} needs to render only one Mesh. */\n  element: PingPongPlane | ShaderPass | null\n  /** If this {@link RenderPassEntry} needs to render multiple Meshes or {@link RenderBundle}, then use a {@link Stack} object. */\n  stack: Stack | null\n}\n\n/** Defines all our possible render targets. */\nexport type RenderPassEntriesType = 'pingPong' | 'renderTarget' | 'screen'\n/** Defines our render pass entries object. */\nexport type RenderPassEntries = Record<RenderPassEntriesType, RenderPassEntry[]>\n\n/**\n * Used to by the {@link Renderer} to render everything that needs to be rendered (compute passes, meshes and/or render bundles) in the right order with the right pass descriptors and target textures, perform textures copy at the right time, etc.\n *\n * ## Render order\n *\n * - Run all the {@link ComputePass} first, sorted by their {@link ComputePass#renderOrder | renderOrder}\n * - Then render all {@link renderPassEntries} pingPong entries Meshes or {@link RenderBundle}, sorted by their {@link PingPongPlane#renderOrder | renderOrder}.\n * - Then all Meshes that need to be rendered into specific {@link renderPassEntries} outputTarget entries:\n *   - First, the opaque unprojected Meshes (i.e. opaque {@link core/meshes/FullscreenPlane.FullscreenPlane | FullscreenPlane}  or {@link RenderBundle}, if any), sorted by their {@link core/meshes/FullscreenPlane.FullscreenPlane#renderOrder | renderOrder}.\n *   - Then, the transparent unprojected Meshes (i.e. transparent {@link core/meshes/FullscreenPlane.FullscreenPlane | FullscreenPlane} or {@link RenderBundle}, if any), sorted by their {@link core/meshes/FullscreenPlane.FullscreenPlane#renderOrder | renderOrder}.\n *   - Then, the opaque projected Meshes (i.e. opaque {@link core/meshes/Mesh.Mesh | Mesh}, {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh}, {@link curtains/meshes/Plane.Plane | Plane}) or {@link RenderBundle}, sorted by their {@link core/meshes/Mesh.Mesh#renderOrder | renderOrder}.\n *   - Finally, the transparent projected Meshes (i.e. transparent {@link core/meshes/Mesh.Mesh | Mesh}, {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh}, {@link curtains/meshes/Plane.Plane | Plane} or {@link RenderBundle}), sorted by their Z position and then their {@link core/meshes/Mesh.Mesh#renderOrder | renderOrder}.\n * - Finally all Meshes that need to be rendered directly to the {@link renderPassEntries} screen (the {@link Renderer} current texture), in the same order than above.\n */\nexport class Scene extends Object3D {\n  /** {@link Renderer} used by this {@link Scene} */\n  renderer: Renderer\n  /** Array of {@link ComputePass} to render, ordered by {@link ComputePass#renderOrder | renderOrder} */\n  computePassEntries: ComputePass[]\n  /**\n   * A {@link RenderPassEntries} object that will contain every Meshes or {@link RenderBundle} that need to be drawn, put inside each one of our three entries type arrays: `pingPong`, `renderTarget` and `screen`.\n   * - The {@link Scene} will first render all {@link renderPassEntries} pingPong entries Meshes.\n   * - Then all Meshes that need to be rendered into specific {@link renderPassEntries} renderTarget entries.\n   * - Finally all Meshes that need to be rendered to the {@link renderPassEntries} screen.\n   */\n  renderPassEntries: RenderPassEntries\n\n  /**\n   * Scene constructor\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Scene}\n   */\n  constructor({ renderer }: { renderer: Renderer | GPUCurtains }) {\n    super()\n\n    renderer = isRenderer(renderer, 'Scene')\n\n    this.renderer = renderer\n\n    this.computePassEntries = []\n\n    this.renderPassEntries = {\n      /** Array of {@link RenderPassEntry} that will handle {@link PingPongPlane}. Each {@link PingPongPlane} will be added as a distinct {@link RenderPassEntry} here */\n      pingPong: [] as RenderPassEntry[],\n      /** Array of {@link RenderPassEntry} that will render to a specific {@link RenderTarget}. Each {@link RenderTarget} will be added as a distinct {@link RenderPassEntry} here */\n      renderTarget: [] as RenderPassEntry[],\n      /** Array of {@link RenderPassEntry} that will render directly to the screen. Our first entry will contain all the Meshes that do not have any {@link RenderTarget} assigned. Following entries will be created for every global {@link ShaderPass} */\n      screen: [] as RenderPassEntry[],\n    }\n  }\n\n  /**\n   * Set the main {@link Renderer} render pass entry.\n   */\n  setMainRenderPassEntry() {\n    // add our basic scene entry\n    this.renderPassEntries.screen.push({\n      renderPass: this.renderer.renderPass,\n      renderTexture: null,\n      onBeforeRenderPass: null,\n      onAfterRenderPass: null,\n      element: null, // explicitly set to null\n      stack: {\n        unProjected: {\n          opaque: [],\n          transparent: [],\n        },\n        projected: {\n          opaque: [],\n          transparent: [],\n        },\n      },\n    } as RenderPassEntry)\n  }\n\n  /**\n   * Get the number of meshes a {@link RenderPassEntry | render pass entry} should draw.\n   * @param renderPassEntry - The {@link RenderPassEntry | render pass entry} to test\n   */\n  getRenderPassEntryLength(renderPassEntry: RenderPassEntry): number {\n    if (!renderPassEntry) {\n      return 0\n    } else {\n      return renderPassEntry.element\n        ? renderPassEntry.element.visible\n          ? 1\n          : 0\n        : renderPassEntry.stack.unProjected.opaque.length +\n            renderPassEntry.stack.unProjected.transparent.length +\n            renderPassEntry.stack.projected.opaque.length +\n            renderPassEntry.stack.projected.transparent.length\n    }\n  }\n\n  /**\n   * Add a {@link ComputePass} to our scene {@link computePassEntries} array\n   * @param computePass - {@link ComputePass} to add\n   */\n  addComputePass(computePass: ComputePass) {\n    this.computePassEntries.push(computePass)\n    this.computePassEntries.sort((a, b) => {\n      if (a.renderOrder !== b.renderOrder) {\n        return a.renderOrder - b.renderOrder\n      } else {\n        return a.index - b.index\n      }\n    })\n  }\n\n  /**\n   * Remove a {@link ComputePass} from our scene {@link computePassEntries} array\n   * @param computePass - {@link ComputePass} to remove\n   */\n  removeComputePass(computePass: ComputePass) {\n    this.computePassEntries = this.computePassEntries.filter((cP) => cP.uuid !== computePass.uuid)\n  }\n\n  /**\n   * Add a {@link RenderTarget} to our scene {@link renderPassEntries} outputTarget array.\n   * Every Meshes later added to this {@link RenderTarget} will be rendered to the {@link RenderTarget#renderTexture | RenderTarget Texture} using the {@link RenderTarget#renderPass.descriptor | RenderTarget RenderPass descriptor}\n   * @param renderTarget - {@link RenderTarget} to add\n   */\n  addRenderTarget(renderTarget: RenderTarget) {\n    // if RT is not already in the render pass entries\n    if (!this.renderPassEntries.renderTarget.find((entry) => entry.renderPass.uuid === renderTarget.renderPass.uuid))\n      this.renderPassEntries.renderTarget.push({\n        renderPass: renderTarget.renderPass,\n        renderTexture: renderTarget.renderTexture,\n        onBeforeRenderPass: null,\n        onAfterRenderPass: null,\n        element: null, // explicitly set to null\n        stack: {\n          unProjected: {\n            opaque: [],\n            transparent: [],\n          },\n          projected: {\n            opaque: [],\n            transparent: [],\n          },\n        },\n      } as RenderPassEntry)\n  }\n\n  /**\n   * Remove a {@link RenderTarget} from our scene {@link renderPassEntries} outputTarget array.\n   * @param renderTarget - {@link RenderTarget} to add\n   */\n  removeRenderTarget(renderTarget: RenderTarget) {\n    this.renderPassEntries.renderTarget = this.renderPassEntries.renderTarget.filter(\n      (entry) => entry.renderPass.uuid !== renderTarget.renderPass.uuid\n    )\n  }\n\n  /**\n   * Get the correct {@link renderPassEntries | render pass entry} (either {@link renderPassEntries} outputTarget or {@link renderPassEntries} screen) {@link Stack} onto which this Mesh should be added, depending on whether it's projected or not\n   * @param mesh - Mesh to check\n   * @returns - the corresponding render pass entry {@link Stack}\n   */\n  getMeshProjectionStack(mesh: RenderedMesh): ProjectionStack {\n    // first get correct render pass enty and stack\n    const renderPassEntry = mesh.outputTarget\n      ? this.renderPassEntries.renderTarget.find(\n          (passEntry) => passEntry.renderPass.uuid === mesh.outputTarget.renderPass.uuid\n        )\n      : this.renderPassEntries.screen[0]\n\n    const { stack } = renderPassEntry\n\n    return mesh.material.options.rendering.useProjection ? stack.projected : stack.unProjected\n  }\n\n  /**\n   * Order a {@link SceneStackedObject} array by using the {@link core/meshes/Mesh.Mesh.renderOrder | renderOrder} or {@link core/meshes/Mesh.Mesh.index | index} properties.\n   * @param stack - {@link SceneStackedObject} to sort, filled with {@link RenderedMesh} or {@link RenderBundle}.\n   */\n  orderStack(stack: SceneStackedObject[]) {\n    // sort by their render order or natural index\n    stack.sort((a, b) => {\n      return a.renderOrder - b.renderOrder || a.index - b.index\n    })\n  }\n\n  /**\n   * Test whether a {@link SceneStackedObject} is a {@link RenderBundle} or not.\n   * @param object - Object to test.\n   * @returns - Whether the object is a {@link RenderBundle} or not.\n   */\n  isStackObjectRenderBundle(object: SceneStackedObject): object is RenderBundle {\n    return object.type === 'RenderBundle'\n  }\n\n  /**\n   * Add a Mesh to the correct {@link renderPassEntries | render pass entry} {@link Stack} array.\n   * Meshes are then ordered by their {@link core/meshes/mixins/MeshBaseMixin.MeshBaseClass#index | indexes (order of creation]}, {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry#index | pipeline entry indexes} and then {@link core/meshes/mixins/MeshBaseMixin.MeshBaseClass#renderOrder | renderOrder}\n   * @param mesh - Mesh to add\n   */\n  addMesh(mesh: SceneStackedMesh) {\n    const projectionStack = this.getMeshProjectionStack(mesh)\n    const isTransparent = !!mesh.transparent\n    const { useProjection } = mesh.material.options.rendering\n\n    if (mesh.renderBundle) {\n      mesh.renderBundle.addMesh(mesh, mesh.outputTarget ? mesh.outputTarget.renderPass : this.renderer.renderPass)\n    }\n\n    if (!mesh.renderBundle) {\n      // rebuild stack\n      const similarMeshes = isTransparent ? projectionStack.transparent : projectionStack.opaque\n\n      similarMeshes.push(mesh)\n\n      this.orderStack(similarMeshes)\n    }\n\n    if ('parent' in mesh && !mesh.parent && useProjection) {\n      mesh.parent = this\n    }\n  }\n\n  /**\n   * Remove a Mesh from our {@link Scene}.\n   * @param mesh - Mesh to remove.\n   */\n  removeMesh(mesh: SceneStackedMesh) {\n    const projectionStack = this.getMeshProjectionStack(mesh)\n    const isTransparent = !!mesh.transparent\n\n    if (mesh.renderBundle) {\n      mesh.renderBundle.removeMesh(mesh, false)\n    } else {\n      if (isTransparent) {\n        projectionStack.transparent = projectionStack.transparent.filter((m) => m.uuid !== mesh.uuid)\n      } else {\n        projectionStack.opaque = projectionStack.opaque.filter((m) => m.uuid !== mesh.uuid)\n      }\n    }\n\n    if ('parent' in mesh && mesh.parent && mesh.parent.object3DIndex === this.object3DIndex) {\n      mesh.parent = null\n    }\n  }\n\n  /**\n   * Add a {@link RenderBundle} to the correct {@link renderPassEntries | render pass entry} {@link Stack} array.\n   * @param renderBundle - {@link RenderBundle} to add.\n   * @param projectionStack - {@link ProjectionStack} onto which to add the {@link RenderBundle}.\n   */\n  addRenderBundle(renderBundle: RenderBundle, projectionStack: ProjectionStack) {\n    // rebuild stack\n    const similarObjects = !!renderBundle.transparent ? projectionStack.transparent : projectionStack.opaque\n\n    similarObjects.push(renderBundle)\n\n    this.orderStack(similarObjects)\n  }\n\n  /**\n   * Remove a {@link RenderBundle} from our {@link Scene}.\n   * @param renderBundle - {@link RenderBundle} to remove.\n   */\n  removeRenderBundle(renderBundle: RenderBundle) {\n    // first get correct render pass enty and stack\n    const renderPassEntry = this.renderPassEntries.renderTarget.find(\n      (passEntry) => passEntry.renderPass.uuid === renderBundle.options.renderPass?.uuid\n    )\n\n    const { stack } = renderPassEntry || this.renderPassEntries.screen[0]\n\n    const isProjected = !!renderBundle.useProjection\n    const projectionStack = isProjected ? stack.projected : stack.unProjected\n\n    const isTransparent = !!renderBundle.transparent\n\n    if (isTransparent) {\n      projectionStack.transparent = projectionStack.transparent.filter((bundle) => bundle.uuid !== renderBundle.uuid)\n    } else {\n      projectionStack.opaque = projectionStack.opaque.filter((bundle) => bundle.uuid !== renderBundle.uuid)\n    }\n  }\n\n  /**\n   * Add a {@link ShaderPass} to our scene {@link renderPassEntries} screen array.\n   * Before rendering the {@link ShaderPass}, we will copy the correct input texture into its {@link ShaderPass#renderTexture | renderTexture}\n   * This also handles the {@link renderPassEntries} screen array entries order: We will first draw selective passes, then our main screen pass and finally global post processing passes.\n   * @see {@link https://codesandbox.io/p/sandbox/webgpu-render-to-2-textures-without-texture-copy-c4sx4s?file=%2Fsrc%2Findex.js%3A10%2C4 | minimal code example}\n   * @param shaderPass - {@link ShaderPass} to add\n   */\n  addShaderPass(shaderPass: ShaderPass) {\n    const onBeforeRenderPass =\n      shaderPass.inputTarget || shaderPass.outputTarget\n        ? null\n        : (commandEncoder, swapChainTexture) => {\n            // draw the content into our render texture\n            // if it's a global postprocessing pass, copy the context current texture into its renderTexture\n            // we don't need to do that if it has an inputTarget\n            // because in this case its renderTexture is already a copy of the render target content\n            if (shaderPass.renderTexture && swapChainTexture) {\n              commandEncoder.copyTextureToTexture(\n                {\n                  texture: swapChainTexture,\n                },\n                {\n                  texture: shaderPass.renderTexture.texture,\n                },\n                [shaderPass.renderTexture.size.width, shaderPass.renderTexture.size.height]\n              )\n            }\n\n            // if we want to post process the whole scene, clear render pass content\n            this.renderer.postProcessingPass.setLoadOp('clear')\n          }\n\n    const onAfterRenderPass =\n      !shaderPass.outputTarget && shaderPass.options.copyOutputToRenderTexture\n        ? (commandEncoder, swapChainTexture) => {\n            // if we rendered to the screen,\n            // copy the context current texture result back into the shaderPass renderTexture\n            if (shaderPass.renderTexture && swapChainTexture) {\n              commandEncoder.copyTextureToTexture(\n                {\n                  texture: swapChainTexture,\n                },\n                {\n                  texture: shaderPass.renderTexture.texture,\n                },\n                [shaderPass.renderTexture.size.width, shaderPass.renderTexture.size.height]\n              )\n            }\n          }\n        : null\n\n    const outputPass = shaderPass.outputTarget ? shaderPass.outputTarget.renderPass : this.renderer.postProcessingPass\n\n    const shaderPassEntry = {\n      // use output target or postprocessing render pass\n      renderPass: outputPass,\n      // render to output target renderTexture or directly to screen\n      renderTexture: shaderPass.outputTarget ? shaderPass.outputTarget.renderTexture : null,\n      onBeforeRenderPass,\n      onAfterRenderPass,\n      element: shaderPass,\n      stack: null, // explicitly set to null\n    }\n\n    if (shaderPass.renderBundle) {\n      const { renderBundle } = shaderPass\n\n      if (renderBundle.meshes.size >= 1) {\n        throwWarning(\n          `${renderBundle.options.label} (${renderBundle.type}): Cannot add more than 1 ShaderPass to a render bundle. This ShaderPass will not be added: ${shaderPass.options.label}`\n        )\n\n        shaderPass.renderBundle = null\n      } else {\n        renderBundle.addMesh(shaderPass, outputPass)\n      }\n    }\n\n    this.renderPassEntries.screen.push(shaderPassEntry)\n\n    // screen passes are sorted by 2 criteria\n    // first we draw render passes that have an output target OR our main render pass, ordered by renderOrder\n    // then we draw our full postprocessing pass, ordered by renderOrder\n    this.renderPassEntries.screen.sort((a, b) => {\n      const isPostProA = a.element && !a.element.outputTarget\n      const renderOrderA = a.element ? a.element.renderOrder : 0\n      const indexA = a.element ? a.element.index : 0\n\n      const isPostProB = b.element && !b.element.outputTarget\n      const renderOrderB = b.element ? b.element.renderOrder : 0\n      const indexB = b.element ? b.element.index : 0\n\n      if (isPostProA && !isPostProB) {\n        return 1\n      } else if (!isPostProA && isPostProB) {\n        return -1\n      } else if (renderOrderA !== renderOrderB) {\n        return renderOrderA - renderOrderB\n      } else {\n        return indexA - indexB\n      }\n    })\n  }\n\n  /**\n   * Remove a {@link ShaderPass} from our scene {@link renderPassEntries} screen array\n   * @param shaderPass - {@link ShaderPass} to remove\n   */\n  removeShaderPass(shaderPass: ShaderPass) {\n    if (shaderPass.renderBundle) {\n      shaderPass.renderBundle.empty()\n    }\n\n    this.renderPassEntries.screen = this.renderPassEntries.screen.filter(\n      (entry) => !entry.element || entry.element.uuid !== shaderPass.uuid\n    )\n  }\n\n  /**\n   * Add a {@link PingPongPlane} to our scene {@link renderPassEntries} pingPong array.\n   * After rendering the {@link PingPongPlane}, we will copy the context current texture into its {@link PingPongPlane#renderTexture | renderTexture} so we'll be able to use it as an input for the next pass\n   * @see {@link https://codesandbox.io/p/sandbox/webgpu-render-ping-pong-to-texture-use-in-quad-gwjx9p | minimal code example}\n   * @param pingPongPlane\n   */\n  addPingPongPlane(pingPongPlane: PingPongPlane) {\n    this.renderPassEntries.pingPong.push({\n      renderPass: pingPongPlane.outputTarget.renderPass,\n      renderTexture: pingPongPlane.outputTarget.renderTexture,\n      onBeforeRenderPass: null,\n      onAfterRenderPass: (commandEncoder, swapChainTexture) => {\n        // Copy the rendering results from the swapChainTexture into our |pingPongPlane texture|.\n        commandEncoder.copyTextureToTexture(\n          {\n            texture: swapChainTexture,\n          },\n          {\n            texture: pingPongPlane.renderTexture.texture,\n          },\n          [pingPongPlane.renderTexture.size.width, pingPongPlane.renderTexture.size.height]\n        )\n      },\n      element: pingPongPlane,\n      stack: null, // explicitly set to null\n    } as RenderPassEntry)\n\n    if (pingPongPlane.renderBundle) {\n      const { renderBundle } = pingPongPlane\n\n      if (renderBundle.meshes.size >= 1) {\n        throwWarning(\n          `${renderBundle.options.label} (${renderBundle.type}): Cannot add more than 1 PingPongPlane to a render bundle. This PingPongPlane will not be added: ${pingPongPlane.options.label}`\n        )\n\n        pingPongPlane.renderBundle = null\n      } else {\n        renderBundle.addMesh(pingPongPlane, pingPongPlane.outputTarget.renderPass)\n      }\n    }\n\n    // sort by their render order\n    this.renderPassEntries.pingPong.sort((a, b) => a.element.renderOrder - b.element.renderOrder)\n  }\n\n  /**\n   * Remove a {@link PingPongPlane} from our scene {@link renderPassEntries} pingPong array.\n   * @param pingPongPlane - {@link PingPongPlane} to remove\n   */\n  removePingPongPlane(pingPongPlane: PingPongPlane) {\n    if (pingPongPlane.renderBundle) {\n      pingPongPlane.renderBundle.empty()\n    }\n\n    this.renderPassEntries.pingPong = this.renderPassEntries.pingPong.filter(\n      (entry) => entry.element.uuid !== pingPongPlane.uuid\n    )\n  }\n\n  /**\n   * Get any rendered object or {@link RenderTarget} {@link RenderPassEntry}. Useful to override a {@link RenderPassEntry#onBeforeRenderPass | RenderPassEntry onBeforeRenderPass} or {@link RenderPassEntry#onAfterRenderPass | RenderPassEntry onAfterRenderPass} default behavior.\n   * @param object - The object from which we want to get the parentMesh {@link RenderPassEntry}\n   * @returns - the {@link RenderPassEntry} if found\n   */\n  getObjectRenderPassEntry(object: RenderedMesh | RenderTarget): RenderPassEntry | undefined {\n    if (object.type === 'RenderTarget') {\n      return this.renderPassEntries.renderTarget.find(\n        (entry) => entry.renderPass.uuid === (object as RenderTarget).renderPass.uuid\n      )\n    } else if (object.type === 'PingPongPlane') {\n      return this.renderPassEntries.pingPong.find((entry) => entry.element.uuid === object.uuid)\n    } else if (object.type === 'ShaderPass') {\n      return this.renderPassEntries.screen.find((entry) => entry.element?.uuid === object.uuid)\n    } else {\n      const entryType = (object as RenderedMesh).outputTarget ? 'renderTarget' : 'screen'\n\n      if ((object as RenderedMesh).renderBundle) {\n        return this.renderPassEntries[entryType].find((entry) => {\n          return [\n            ...entry.stack.unProjected.opaque,\n            ...entry.stack.unProjected.transparent,\n            ...entry.stack.projected.opaque,\n            ...entry.stack.projected.transparent,\n          ]\n            .filter((object) => object.type === 'RenderBundle')\n            .some((bundle: RenderBundle) => {\n              return bundle.meshes.get(object.uuid)\n            })\n        })\n      } else {\n        return this.renderPassEntries[entryType].find((entry) => {\n          return [\n            ...entry.stack.unProjected.opaque,\n            ...entry.stack.unProjected.transparent,\n            ...entry.stack.projected.opaque,\n            ...entry.stack.projected.transparent,\n          ].some((mesh) => mesh.uuid === object.uuid)\n        })\n      }\n    }\n  }\n\n  /**\n   * Sort transparent projected meshes by their render order or distance to the camera (farther meshes should be drawn first).\n   * @param meshes - transparent projected meshes array to sort\n   */\n  sortTransparentMeshes(meshes: Array<ProjectedMesh | RenderBundle>) {\n    meshes.sort((meshA, meshB) => {\n      if (meshA.renderOrder !== meshB.renderOrder) {\n        return meshA.renderOrder - meshB.renderOrder\n      }\n\n      if (this.isStackObjectRenderBundle(meshA) || this.isStackObjectRenderBundle(meshB)) {\n        return meshA.renderOrder - meshB.renderOrder\n      }\n\n      // apply world matrices to objects\n      meshA.geometry\n        ? posA.copy(meshA.geometry.boundingBox.center).applyMat4(meshA.worldMatrix)\n        : meshA.worldMatrix.getTranslation(posA)\n\n      meshB.geometry\n        ? posB.copy(meshB.geometry.boundingBox.center).applyMat4(meshB.worldMatrix)\n        : meshB.worldMatrix.getTranslation(posB)\n\n      // apply scale to bounding sphere radius\n      const radiusA = meshA.geometry ? meshA.geometry.boundingBox.radius * meshA.worldMatrix.getMaxScaleOnAxis() : 0\n      const radiusB = meshB.geometry ? meshB.geometry.boundingBox.radius * meshB.worldMatrix.getMaxScaleOnAxis() : 0\n\n      return (\n        meshB.camera.worldMatrix.getTranslation(camPosB).distance(posB) -\n        radiusB -\n        (meshA.camera.worldMatrix.getTranslation(camPosA).distance(posA) - radiusA)\n      )\n    })\n  }\n\n  /**\n   * Here we render a {@link RenderPassEntry}:\n   * - Set its {@link RenderPass#descriptor | renderPass descriptor} view or resolveTarget and get it at as swap chain texture\n   * - Execute {@link RenderPassEntry#onBeforeRenderPass | onBeforeRenderPass} callback if specified\n   * - Begin the {@link GPURenderPassEncoder | GPU render pass encoder} using our {@link RenderPass#descriptor | renderPass descriptor}\n   * - Render the single element if specified or the render pass entry {@link Stack}: draw unprojected opaque / transparent meshes first, then set the {@link core/renderers/GPUCameraRenderer.GPUCameraRenderer#cameraLightsBindGroup | camera and lights bind group} and draw projected opaque / transparent meshes\n   * - End the {@link GPURenderPassEncoder | GPU render pass encoder}\n   * - Execute {@link RenderPassEntry#onAfterRenderPass | onAfterRenderPass} callback if specified\n   * - Reset {@link core/pipelines/PipelineManager.PipelineManager#currentPipelineIndex | pipeline manager current pipeline}\n   * @param commandEncoder - current {@link GPUCommandEncoder}\n   * @param renderPassEntry - {@link RenderPassEntry} to render\n   */\n  renderSinglePassEntry(commandEncoder: GPUCommandEncoder, renderPassEntry: RenderPassEntry) {\n    // set the pass texture to render to\n    const swapChainTexture = renderPassEntry.renderPass.updateView(renderPassEntry.renderTexture?.texture)\n\n    renderPassEntry.onBeforeRenderPass && renderPassEntry.onBeforeRenderPass(commandEncoder, swapChainTexture)\n\n    // now begin our actual render pass\n    const pass = commandEncoder.beginRenderPass(renderPassEntry.renderPass.descriptor)\n\n    if (!this.renderer.production) {\n      pass.pushDebugGroup(\n        renderPassEntry.element\n          ? `${renderPassEntry.element.options.label} render pass using ${renderPassEntry.renderPass.options.label} descriptor`\n          : `Render stack pass using ${renderPassEntry.renderPass.options.label}${\n              renderPassEntry.renderTexture ? ' onto ' + renderPassEntry.renderTexture.options.label : ''\n            }`\n      )\n    }\n\n    // pass entries can have a single element or a stack\n    if (renderPassEntry.element) {\n      if (renderPassEntry.element.renderBundle) {\n        renderPassEntry.element.renderBundle.render(pass)\n      } else {\n        renderPassEntry.element.render(pass)\n      }\n    } else if (renderPassEntry.stack) {\n      // draw unProjected regular meshes\n      for (const mesh of renderPassEntry.stack.unProjected.opaque) {\n        mesh.render(pass)\n      }\n      for (const mesh of renderPassEntry.stack.unProjected.transparent) {\n        mesh.render(pass)\n      }\n\n      // then draw projected meshes\n      if (renderPassEntry.stack.projected.opaque.length || renderPassEntry.stack.projected.transparent.length) {\n        // opaque\n        for (const mesh of renderPassEntry.stack.projected.opaque) {\n          mesh.render(pass)\n        }\n\n        // transparent\n        this.sortTransparentMeshes(renderPassEntry.stack.projected.transparent as Array<ProjectedMesh | RenderBundle>)\n\n        for (const mesh of renderPassEntry.stack.projected.transparent) {\n          mesh.render(pass)\n        }\n      }\n    }\n\n    if (!this.renderer.production) pass.popDebugGroup()\n\n    pass.end()\n\n    renderPassEntry.onAfterRenderPass && renderPassEntry.onAfterRenderPass(commandEncoder, swapChainTexture)\n\n    this.renderer.pipelineManager.resetCurrentPipeline()\n  }\n\n  /**\n   * Before actually rendering the scene, update matrix stack and frustum culling checks. Batching these calls greatly improve performance. Called by the {@link renderer} before rendering.\n   */\n  onBeforeRender() {\n    // execute meshes onBeforeRender callback if needed\n    for (let i = 0, l = this.renderer.meshes.length; i < l; i++) {\n      this.renderer.meshes[i].onBeforeRenderScene()\n    }\n\n    this.renderer.animations.forEach((targetsAnimation) => targetsAnimation.update())\n\n    // update matrices\n    this.updateMatrixStack()\n\n    this.renderer.animations.forEach((targetsAnimation) => targetsAnimation.onAfterUpdate())\n\n    // TODO store projected meshes only?\n    // frustum culling check if needed\n    for (const mesh of this.renderer.meshes) {\n      if ('checkFrustumCulling' in mesh && mesh.visible) {\n        mesh.checkFrustumCulling()\n      }\n    }\n  }\n\n  /**\n   * Render our {@link Scene}\n   * - Execute {@link onBeforeRender} first\n   * - Then render {@link computePassEntries}\n   * - And finally render our {@link renderPassEntries}\n   * @param commandEncoder - current {@link GPUCommandEncoder}\n   */\n  render(commandEncoder: GPUCommandEncoder) {\n    for (const computePass of this.computePassEntries) {\n      const pass = commandEncoder.beginComputePass()\n\n      if (!this.renderer.production) pass.pushDebugGroup(`${computePass.options.label}: begin compute pass`)\n\n      computePass.render(pass)\n\n      if (!this.renderer.production) pass.popDebugGroup()\n\n      pass.end()\n\n      computePass.copyBufferToResult(commandEncoder)\n\n      this.renderer.pipelineManager.resetCurrentPipeline()\n    }\n\n    for (const renderPassEntryType in this.renderPassEntries) {\n      let passDrawnCount = 0\n\n      this.renderPassEntries[renderPassEntryType].forEach((renderPassEntry) => {\n        // early bail if there's nothing to draw\n        if (!this.getRenderPassEntryLength(renderPassEntry)) return\n\n        // if we're drawing to screen and it's not our first pass, load result from previous passes\n        // post processing scene pass will clear content inside onBeforeRenderPass anyway\n        renderPassEntry.renderPass.setLoadOp(\n          renderPassEntryType === 'screen' && passDrawnCount !== 0 ? 'load' : 'clear'\n        )\n\n        passDrawnCount++\n\n        this.renderSinglePassEntry(commandEncoder, renderPassEntry)\n      })\n    }\n  }\n}\n","/** Defines a task queue item */\r\nexport interface TaskQueueItem {\r\n  /** Unique id of the task queue item */\r\n  id: number\r\n  /** Priority order in the {@link TasksQueueManager#queue | tasks queue array} */\r\n  order: number\r\n  /** Callback to execute */\r\n  callback: (args?: any) => void\r\n  /** Whether to execute the task only once and them automatically remove it from the {@link TasksQueueManager#queue | tasks queue array} */\r\n  once: boolean\r\n}\r\n\r\n/** Parameters used to add a task to the {@link TasksQueueManager#queue | tasks queue array} */\r\nexport type TaskQueueItemParams = Partial<Omit<TaskQueueItem, 'id' | 'callback'>>\r\n\r\n/**\r\n * Used to keep track of a bunch of callbacks and execute them in the right order when needed\r\n */\r\nexport class TasksQueueManager {\r\n  /** Array of {@link TaskQueueItem | task queue item} to execute */\r\n  queue: TaskQueueItem[]\r\n  /** Private number to assign a unique id to each {@link TaskQueueItem | task queue item} */\r\n  #taskCount = 0\r\n\r\n  /**\r\n   * TaskQueueManager constructor\r\n   */\r\n  constructor() {\r\n    this.queue = []\r\n  }\r\n\r\n  /**\r\n   * Add a {@link TaskQueueItem | task queue item} to the queue\r\n   * @param callback - callback to add to the {@link TaskQueueItem | task queue item}\r\n   * @param parameters - {@link TaskQueueItemParams | parameters} of the {@link TaskQueueItem | task queue item} to add\r\n   * @returns - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item}, useful to later remove the task if needed\r\n   */\r\n  add(\r\n    callback: TaskQueueItem['callback'] = (args?: any) => {\r\n      /* allow empty callbacks */\r\n    },\r\n    { order = this.queue.length, once = false } = {} as TaskQueueItemParams\r\n  ): TaskQueueItem['id'] {\r\n    const task = {\r\n      callback,\r\n      order,\r\n      once,\r\n      id: this.#taskCount,\r\n    }\r\n\r\n    // increment id\r\n    this.#taskCount++\r\n\r\n    this.queue.push(task)\r\n    this.queue.sort((a, b) => {\r\n      return a.order - b.order\r\n    })\r\n\r\n    return task.id\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link TaskQueueItem | task queue item} from the queue\r\n   * @param taskId - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item} to remove\r\n   */\r\n  remove(taskId = 0) {\r\n    this.queue = this.queue.filter((task) => task.id !== taskId)\r\n  }\r\n\r\n  /**\r\n   * Execute the {@link TasksQueueManager#queue | tasks queue array}\r\n   */\r\n  execute(args?: any) {\r\n    this.queue.forEach((task) => {\r\n      task.callback(args)\r\n\r\n      // if it was a one time callback, remove it\r\n      if (task.once) {\r\n        this.remove(task.id)\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { PipelineManager } from '../pipelines/PipelineManager'\nimport { DOMElement, DOMElementBoundingRect, RectBBox, RectSize } from '../DOM/DOMElement'\nimport { Scene } from '../scenes/Scene'\nimport { RenderPass, RenderPassParams } from '../renderPasses/RenderPass'\nimport { generateUUID, throwError, throwWarning } from '../../utils/utils'\n\nimport { ComputePass } from '../computePasses/ComputePass'\nimport { PingPongPlane } from '../../extras/meshes/PingPongPlane'\nimport { ShaderPass } from '../renderPasses/ShaderPass'\nimport { RenderTarget } from '../renderPasses/RenderTarget'\nimport { DOMTexture } from '../textures/DOMTexture'\nimport { Sampler } from '../samplers/Sampler'\n\nimport { DOMMesh } from '../../curtains/meshes/DOMMesh'\nimport { Plane } from '../../curtains/meshes/Plane'\nimport { Mesh } from '../meshes/Mesh'\nimport { TasksQueueManager } from '../../utils/TasksQueueManager'\nimport { AllowedBindGroups } from '../../types/BindGroups'\nimport { Texture } from '../textures/Texture'\nimport { GPUDeviceManager } from './GPUDeviceManager'\nimport { FullscreenPlane } from '../meshes/FullscreenPlane'\nimport { Buffer } from '../buffers/Buffer'\nimport { RenderBundle } from '../renderPasses/RenderBundle'\nimport { IndirectBuffer } from '../../extras/buffers/IndirectBuffer'\nimport { TargetsAnimationsManager } from '../../extras/animations/TargetsAnimationsManager'\n\n/** Options used to configure the renderer canvas context. If not specified, `format` will be set with `GPU.getPreferredCanvasFormat()` and `alphaMode` with `premultiplied`. */\nexport interface GPURendererContextOptions extends Omit<GPUCanvasConfiguration, 'device' | 'usage'> {}\n\n/** Parameters used to configure the renderer canvas context. */\nexport interface GPURendererContextParams extends Partial<GPURendererContextOptions> {}\n\n/**\n * Parameters used to create a {@link GPURenderer}.\n */\nexport interface GPURendererParams {\n  /** The {@link GPUDeviceManager} used to create this {@link GPURenderer} */\n  deviceManager: GPUDeviceManager\n\n  /** Optional label of this {@link GPURenderer} */\n  label?: string\n  /** {@link HTMLElement} or selector used as a container for our {@link GPURenderer#canvas | canvas}. Could also be directly a {@link HTMLCanvasElement | canvas element}. */\n  container: string | HTMLElement\n  /** Pixel ratio to use for rendering */\n  pixelRatio?: number\n\n  /** Whether to auto resize the renderer each time its {@link GPURenderer#domElement} size changes or not. It is advised to set this parameter to `false` if the provided {@link container} is a {@link HTMLCanvasElement | canvas element}, and handle {@link GPURenderer#resize | resizing} by yourself. */\n  autoResize?: boolean\n\n  /** Options used to configure this {@link GPURenderer} context. If not specified, `format` will be set with `GPU.getPreferredCanvasFormat()` and `alphaMode` with `premultiplied`. */\n  context?: GPURendererContextParams\n\n  /** The {@link GPURenderer#renderPass | renderer RenderPass} parameters */\n  renderPass?: {\n    /** Whether the {@link GPURenderer#renderPass | renderer RenderPass} should handle depth. Default to `true` */\n    useDepth: RenderPassParams['useDepth']\n    /** The {@link GPURenderer#renderPass | renderer RenderPass} sample count (i.e. whether it should use multisampled antialiasing). Default to `4` */\n    sampleCount: RenderPassParams['sampleCount']\n    /** The {@link GPUCommandEncoder.beginRenderPass().clearValue | color values} to clear to before drawing the {@link GPURenderer#renderPass | renderer RenderPass}. Default to `[0, 0, 0, 0]` */\n    clearValue: GPUColor\n  }\n}\n\n/** Options used to create this {@link GPURenderer}. */\nexport interface GPURendererOptions extends GPURendererParams {\n  /** Patched {@link GPURendererContextOptions | context configuration options}. */\n  context: GPURendererContextOptions\n}\n\n/** Any Mesh that is bound to a DOM Element */\nexport type DOMProjectedMesh = DOMMesh | Plane\n/** Any Mesh that is projected (i.e use a {@link core/camera/Camera.Camera | Camera} to compute a model view projection matrix) */\nexport type ProjectedMesh = Mesh | DOMProjectedMesh\n/** Any Mesh that can be drawn (including fullscreen quad meshes) and that will be put in the {@link Scene} meshes stacks */\nexport type SceneStackedMesh = ProjectedMesh | FullscreenPlane\n/** Anything that can be added to a {@link Scene} meshes stacks, including {@link RenderBundle} */\nexport type SceneStackedObject = SceneStackedMesh | RenderBundle\n/** Any Mesh that is drawn fullscren, i.e. fullscreen quad meshes used for post processing and {@link PingPongPlane} */\nexport type FullscreenPass = PingPongPlane | ShaderPass\n/** Any Mesh that can be drawn, including fullscreen quad meshes used for post processing and {@link PingPongPlane} */\nexport type RenderedMesh = SceneStackedMesh | FullscreenPass\n/** Any Mesh or Compute pass */\nexport type SceneObject = RenderedMesh | ComputePass\n\n/**\n * Base renderer class, that could technically be used to render compute passes and draw fullscreen quads, even tho it is strongly advised to use at least the {@link core/renderers/GPUCameraRenderer.GPUCameraRenderer | GPUCameraRenderer} class instead.\n * A renderer is responsible for:\n * - Setting a {@link GPUCanvasContext | context}\n * - Handling the {@link HTMLCanvasElement | canvas} onto everything is drawn\n * - Creating a {@link RenderPass} that will handle our render and depth textures and the render pass descriptor\n * - Keeping track of every specific class objects created relative to computing and rendering\n * - Creating a {@link Scene} class that will take care of the rendering process of all previously mentioned objects\n */\nexport class GPURenderer {\n  /** The type of the {@link GPURenderer} */\n  type: string\n  /** The universal unique id of this {@link GPURenderer} */\n  readonly uuid: string\n\n  /** The {@link GPUDeviceManager} used to create this {@link GPURenderer} */\n  deviceManager: GPUDeviceManager\n\n  /** {@link HTMLCanvasElement} onto everything is drawn */\n  canvas: HTMLCanvasElement\n  /** The WebGPU {@link GPUCanvasContext | context} used */\n  context: null | GPUCanvasContext\n\n  /** Options used to create this {@link GPURenderer} */\n  options: GPURendererOptions\n\n  /** The {@link RenderPass | render pass} used to render our result to screen */\n  renderPass: RenderPass\n  /** Additional {@link RenderPass | render pass} used by {@link ShaderPass} for compositing / post processing. Does not handle depth */\n  postProcessingPass: RenderPass\n\n  /** The {@link Scene} used */\n  scene: Scene\n\n  /** Whether we should render our {@link GPURenderer} or not. If set to `false`, the render hooks {@link onBeforeCommandEncoderCreation}, {@link onBeforeRenderScene}, {@link onAfterRenderScene} and {@link onAfterCommandEncoderSubmission} won't be called, the scene graph will not be updated and the scene will not be rendered, completely pausing the renderer. Default to `true`. */\n  shouldRender: boolean\n\n  /** Whether we should explicitly update our {@link Scene} or not. If set to `false`, the scene graph will not be updated and the scene will not be rendered. Default to `true`. */\n  shouldRenderScene: boolean\n\n  /** An array containing all our created {@link ComputePass} */\n  computePasses: ComputePass[]\n  /** An array containing all our created {@link PingPongPlane} */\n  pingPongPlanes: PingPongPlane[]\n  /** An array containing all our created {@link ShaderPass} */\n  shaderPasses: ShaderPass[]\n  /** An array containing all our created {@link RenderTarget} */\n  renderTargets: RenderTarget[]\n  /** An array containing all our created {@link SceneStackedMesh | meshes} */\n  meshes: SceneStackedMesh[]\n  /** An array containing all our created {@link Texture} */\n  textures: Texture[]\n  /** A {@link Map} containing all the {@link RenderBundle} handled by this renderer. */\n  renderBundles: Map<RenderBundle['uuid'], RenderBundle>\n  /** A {@link Map} containing all the {@link TargetsAnimationsManager} handled by this renderer. */\n  animations: Map<TargetsAnimationsManager['uuid'], TargetsAnimationsManager>\n\n  /** Pixel ratio to use for rendering */\n  pixelRatio: number\n  /** An object defining the width, height, top and left position of the canvas. Mainly used internally. If you need to get the renderer dimensions, use {@link boundingRect} instead. */\n  rectBBox: RectBBox\n\n  /** {@link DOMElement} that will track our canvas container size */\n  domElement: DOMElement | undefined\n\n  /** Allow to add callbacks to be executed at each render before the {@link GPUCommandEncoder} is created */\n  onBeforeCommandEncoderCreation: TasksQueueManager\n  /** Allow to add callbacks to be executed at each render after the {@link GPUCommandEncoder} has been created but before the {@link Scene} is rendered */\n  onBeforeRenderScene: TasksQueueManager\n  /** Allow to add callbacks to be executed at each render after the {@link GPUCommandEncoder} has been created and after the {@link Scene} has been rendered */\n  onAfterRenderScene: TasksQueueManager\n  /** Allow to add callbacks to be executed at each render after the {@link Scene} has been rendered and the {@link GPUCommandEncoder} has been submitted */\n  onAfterCommandEncoderSubmission: TasksQueueManager\n\n  // callbacks / events\n  /** function assigned to the {@link onBeforeRender} callback */\n  _onBeforeRenderCallback = (commandEncoder: GPUCommandEncoder) => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onAfterRender} callback */\n  _onAfterRenderCallback = (commandEncoder: GPUCommandEncoder) => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link resizeObjects} callback */\n  _onResizeCallback: () => void = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onAfterResize} callback */\n  _onAfterResizeCallback: () => void = () => {\n    /* allow empty callback */\n  }\n\n  /**\n   * GPURenderer constructor\n   * @param parameters - {@link GPURendererParams | parameters} used to create this {@link GPURenderer}\n   */\n  constructor({\n    deviceManager,\n    label,\n    container,\n    pixelRatio = 1,\n    autoResize = true,\n    context = {},\n    renderPass,\n  }: GPURendererParams) {\n    this.type = 'GPURenderer'\n    this.uuid = generateUUID()\n\n    if (!deviceManager || deviceManager.constructor.name !== 'GPUDeviceManager') {\n      throwError(\n        label\n          ? `${label} (${this.type}): no device manager or wrong device manager provided: ${deviceManager}`\n          : `${this.type}: no device manager or wrong device manager provided: ${deviceManager}`\n      )\n    }\n\n    if (!label) {\n      label = `${this.constructor.name}${deviceManager.renderers.length}`\n    }\n\n    this.deviceManager = deviceManager\n    this.deviceManager.addRenderer(this)\n\n    this.shouldRender = true\n    this.shouldRenderScene = true\n\n    // context configuration default values\n    const contextOptions = {\n      ...{\n        alphaMode: 'premultiplied' as GPUCanvasAlphaMode,\n        format: this.deviceManager.gpu?.getPreferredCanvasFormat(),\n      },\n      ...context,\n    }\n\n    // render pass default values\n    renderPass = { ...{ useDepth: true, sampleCount: 4, clearValue: [0, 0, 0, 0] }, ...renderPass }\n\n    this.options = {\n      deviceManager,\n      label,\n      container,\n      pixelRatio,\n      autoResize,\n      context: contextOptions,\n      renderPass,\n    }\n\n    this.pixelRatio = pixelRatio ?? window.devicePixelRatio ?? 1\n\n    // create the canvas\n    const isOffscreenCanvas = container instanceof OffscreenCanvas\n    const isContainerCanvas = isOffscreenCanvas || container instanceof HTMLCanvasElement\n    this.canvas = isContainerCanvas ? (container as HTMLCanvasElement) : document.createElement('canvas')\n\n    // set default size\n    const { width, height } = this.canvas\n    this.rectBBox = {\n      width,\n      height,\n      top: 0,\n      left: 0,\n    }\n\n    this.setScene()\n    this.setTasksQueues()\n    this.setRendererObjects()\n\n    if (!isOffscreenCanvas) {\n      // needed to get container bounding box\n      this.domElement = new DOMElement({\n        element: container,\n        priority: 5, // renderer callback need to be called first\n        onSizeChanged: () => {\n          if (this.options.autoResize) this.resize()\n        },\n      })\n\n      // now that we have a domElement, resize right away\n      this.resize()\n\n      if (!isContainerCanvas) {\n        // append the canvas\n        this.domElement.element.appendChild(this.canvas)\n      }\n    }\n\n    // device is already available? create the context!\n    if (this.deviceManager.device) {\n      this.setContext()\n    }\n  }\n\n  /**\n   * Set the renderer {@link RectBBox} and canvas sizes\n   * @param rectBBox - the optional new {@link canvas} {@link RectBBox} to set\n   */\n  setSize(rectBBox: Partial<RectBBox> | null = null) {\n    // patch rect bbox with missing values from bounding rect if needed\n    rectBBox = {\n      ...{\n        width: Math.max(1, this.boundingRect.width),\n        height: Math.max(1, this.boundingRect.height),\n        top: this.boundingRect.top,\n        left: this.boundingRect.left,\n      },\n      ...rectBBox,\n    }\n\n    this.rectBBox = rectBBox as RectBBox\n\n    const renderingSize = {\n      width: this.rectBBox.width,\n      height: this.rectBBox.height,\n    }\n\n    renderingSize.width *= this.pixelRatio\n    renderingSize.height *= this.pixelRatio\n\n    this.clampToMaxDimension(renderingSize)\n\n    // canvas rendering size\n    this.canvas.width = Math.floor(renderingSize.width)\n    this.canvas.height = Math.floor(renderingSize.height)\n\n    // canvas display size\n    if (this.canvas.style) {\n      this.canvas.style.width = this.rectBBox.width + 'px'\n      this.canvas.style.height = this.rectBBox.height + 'px'\n    }\n  }\n\n  /**\n   * Set the renderer {@link GPURenderer.pixelRatio | pixel ratio} and {@link resize} it\n   * @param pixelRatio - new pixel ratio to use\n   */\n  setPixelRatio(pixelRatio: number = 1) {\n    this.pixelRatio = pixelRatio\n    this.resize(this.rectBBox)\n  }\n\n  /**\n   * Resize our {@link GPURenderer}\n   * @param rectBBox - the optional new {@link canvas} {@link RectBBox} to set\n   */\n  resize(rectBBox: RectBBox | null = null) {\n    this.setSize(rectBBox)\n\n    this._onResizeCallback && this._onResizeCallback()\n\n    this.resizeObjects()\n\n    this._onAfterResizeCallback && this._onAfterResizeCallback()\n  }\n\n  /**\n   * Resize all tracked objects ({@link Texture | textures}, {@link RenderPass | render passes}, {@link RenderTarget | render targets}, {@link ComputePass | compute passes} and meshes).\n   */\n  resizeObjects() {\n    // resize textures first\n    this.textures.forEach((texture) => {\n      texture.resize()\n    })\n\n    // resize render & shader passes\n    this.renderPass?.resize()\n    this.postProcessingPass?.resize()\n\n    this.renderTargets.forEach((renderTarget) => renderTarget.resize())\n\n    // force compute passes onAfterResize callback\n    this.computePasses.forEach((computePass) => computePass.resize())\n\n    // now resize meshes that are bound to the renderer size\n    // especially useful to resize textures\n    this.pingPongPlanes.forEach((pingPongPlane) => pingPongPlane.resize(this.boundingRect))\n    this.shaderPasses.forEach((shaderPass) => shaderPass.resize(this.boundingRect))\n    this.resizeMeshes()\n  }\n\n  /**\n   * Resize the {@link meshes}.\n   */\n  resizeMeshes() {\n    this.meshes.forEach((mesh) => {\n      mesh.resize(this.boundingRect)\n    })\n  }\n\n  /**\n   * Get our {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}. If there's no {@link domElement | DOM Element} (like when using an offscreen canvas for example), the {@link rectBBox} values are used.\n   */\n  get boundingRect(): DOMElementBoundingRect {\n    if (!!this.domElement && !!this.domElement.boundingRect) {\n      return this.domElement.boundingRect\n    } else if (!!this.domElement) {\n      const boundingRect = this.domElement.element?.getBoundingClientRect()\n      return {\n        top: boundingRect.top,\n        right: boundingRect.right,\n        bottom: boundingRect.bottom,\n        left: boundingRect.left,\n        width: boundingRect.width,\n        height: boundingRect.height,\n        x: boundingRect.x,\n        y: boundingRect.y,\n      }\n    } else {\n      return {\n        top: this.rectBBox.top,\n        right: this.rectBBox.left + this.rectBBox.width,\n        bottom: this.rectBBox.top + this.rectBBox.height,\n        left: this.rectBBox.left,\n        width: this.rectBBox.width,\n        height: this.rectBBox.height,\n        x: this.rectBBox.left,\n        y: this.rectBBox.top,\n      }\n    }\n  }\n\n  /**\n   * Clamp to max WebGPU texture dimensions\n   * @param dimension - width and height dimensions to clamp\n   */\n  clampToMaxDimension(dimension: RectSize | DOMElementBoundingRect) {\n    if (this.device) {\n      dimension.width = Math.min(this.device.limits.maxTextureDimension2D, dimension.width)\n      dimension.height = Math.min(this.device.limits.maxTextureDimension2D, dimension.height)\n    }\n  }\n\n  /* USEFUL DEVICE MANAGER OBJECTS */\n\n  /**\n   * Get our {@link GPUDeviceManager#device | device}\n   * @readonly\n   */\n  get device(): GPUDevice | undefined {\n    return this.deviceManager.device\n  }\n\n  /**\n   * Get whether our {@link GPUDeviceManager} is ready (i.e. its {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device} are set) its {@link context} is set and its size is set\n   * @readonly\n   */\n  get ready(): boolean {\n    return this.deviceManager.ready && !!this.context && !!this.canvas.width && !!this.canvas.height\n  }\n\n  /**\n   * Get our {@link GPUDeviceManager#production | GPUDeviceManager production flag}\n   * @readonly\n   */\n  get production(): boolean {\n    return this.deviceManager.production\n  }\n\n  /**\n   * Get all the created {@link GPUDeviceManager#samplers | samplers}\n   * @readonly\n   */\n  get samplers(): Sampler[] {\n    return this.deviceManager.samplers\n  }\n\n  /**\n   * Get all the created {@link GPUDeviceManager#buffers | GPU buffers}\n   * @readonly\n   */\n  get buffers(): Map<Buffer['uuid'], Buffer> {\n    return this.deviceManager.buffers\n  }\n\n  /**\n   * Get all the created {@link GPUDeviceManager#indirectBuffers | indirect buffers}\n   * @readonly\n   */\n  get indirectBuffers(): Map<IndirectBuffer['uuid'], IndirectBuffer> {\n    return this.deviceManager.indirectBuffers\n  }\n\n  /**\n   * Get the {@link GPUDeviceManager#pipelineManager | pipeline manager}\n   * @readonly\n   */\n  get pipelineManager(): PipelineManager {\n    return this.deviceManager.pipelineManager\n  }\n\n  /**\n   * Get all the rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes) created by the {@link GPUDeviceManager}\n   * @readonly\n   */\n  get deviceRenderedObjects(): SceneObject[] {\n    return this.deviceManager.deviceRenderedObjects\n  }\n\n  /**\n   * Configure our {@link context} with the given options\n   */\n  configureContext() {\n    this.context.configure({\n      device: this.device,\n      ...this.options.context,\n      // needed so we can copy textures for post processing usage\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\n      //viewFormats: []\n    })\n  }\n\n  /**\n   * Set our {@link context} if possible and set {@link renderPass | main render pass} and {@link scene}\n   */\n  setContext() {\n    this.context = this.canvas.getContext('webgpu')\n\n    if (this.device) {\n      this.configureContext()\n\n      this.setMainRenderPasses()\n    }\n  }\n\n  /**\n   * Called when the {@link GPUDeviceManager#device | device} is lost.\n   * Force all our scene objects to lose context.\n   */\n  loseContext() {\n    // force all our scene objects to lose context\n    this.renderBundles.forEach((bundle) => bundle.loseContext())\n    this.renderedObjects.forEach((sceneObject) => sceneObject.loseContext())\n  }\n\n  /**\n   * Called when the {@link GPUDeviceManager#device | device} should be restored.\n   * Configure the context again, resize the {@link RenderTarget | render targets} and {@link Texture | textures}, restore our {@link renderedObjects | rendered objects} context.\n   */\n  restoreContext() {\n    this.configureContext()\n\n    // recreate all textures first\n    this.textures.forEach((texture) => {\n      texture.createTexture()\n    })\n\n    // resize render passes/recreate their textures\n    this.renderPass?.resize()\n    this.postProcessingPass?.resize()\n\n    this.renderTargets.forEach((renderTarget) => renderTarget.resize())\n\n    // restore context of all our scene objects\n    this.renderedObjects.forEach((sceneObject) => sceneObject.restoreContext())\n  }\n\n  /* PIPELINES, SCENE & MAIN RENDER PASS */\n\n  /**\n   * Set our {@link renderPass | main render pass} that will be used to render the result of our draw commands back to the screen and our {@link postProcessingPass | postprocessing pass} that will be used for any additional postprocessing render passes.\n   */\n  setMainRenderPasses() {\n    this.renderPass = new RenderPass(this, {\n      label: this.options.label + ' render pass',\n      ...this.options.renderPass,\n    } as RenderPassParams)\n\n    // add to the scene stack\n    this.scene.setMainRenderPassEntry()\n\n    this.postProcessingPass = new RenderPass(this, {\n      label: this.options.label + ' post processing render pass',\n      // no need to handle depth or perform MSAA on a fullscreen quad\n      useDepth: false,\n      sampleCount: 1,\n    })\n  }\n\n  /**\n   * Set our {@link scene}\n   */\n  setScene() {\n    this.scene = new Scene({ renderer: this })\n  }\n\n  /* BUFFERS & BINDINGS */\n\n  /**\n   * Create a {@link !GPUBuffer}\n   * @param buffer - {@link Buffer} to use for buffer creation\n   * @returns - newly created {@link !GPUBuffer}\n   */\n  createBuffer(buffer: Buffer): GPUBuffer {\n    const GPUBuffer = this.deviceManager.device?.createBuffer(buffer.options)\n    this.deviceManager.addBuffer(buffer)\n    return GPUBuffer\n  }\n\n  /**\n   * Remove a {@link Buffer} from our {@link GPUDeviceManager#buffers | buffers Map}\n   * @param buffer - {@link Buffer} to remove\n   */\n  removeBuffer(buffer: Buffer) {\n    this.deviceManager.removeBuffer(buffer)\n  }\n\n  /**\n   * Write to a {@link GPUBuffer}\n   * @param buffer - {@link GPUBuffer} to write to\n   * @param bufferOffset - {@link GPUQueue.writeBuffer().bufferOffset | buffer offset}\n   * @param data - {@link GPUQueue.writeBuffer().data | data} to write\n   */\n  queueWriteBuffer(buffer: GPUBuffer, bufferOffset: GPUSize64, data: BufferSource) {\n    this.deviceManager.device?.queue.writeBuffer(buffer, bufferOffset, data)\n  }\n\n  /**\n   * Copy a source {@link Buffer#GPUBuffer | Buffer GPUBuffer} into a destination {@link Buffer#GPUBuffer | Buffer GPUBuffer}\n   * @param parameters - parameters used to realize the copy\n   * @param parameters.srcBuffer - source {@link Buffer}\n   * @param [parameters.dstBuffer] - destination {@link Buffer}. Will create a new one if none provided.\n   * @param [parameters.commandEncoder] - {@link GPUCommandEncoder} to use for the copy. Will create a new one and submit the command buffer if none provided.\n   * @returns - destination {@link Buffer} after copy\n   */\n  copyBufferToBuffer({\n    srcBuffer,\n    dstBuffer,\n    commandEncoder,\n  }: {\n    srcBuffer: Buffer\n    dstBuffer?: Buffer\n    commandEncoder?: GPUCommandEncoder\n  }): Buffer | null {\n    if (!srcBuffer || !srcBuffer.GPUBuffer) {\n      throwWarning(\n        `${this.options.label} (${this.type}): cannot copy to buffer because the source buffer has not been provided`\n      )\n      return null\n    }\n\n    if (!dstBuffer) {\n      dstBuffer = new Buffer()\n    }\n\n    if (!dstBuffer.GPUBuffer) {\n      dstBuffer.createBuffer(this, {\n        label: `GPURenderer (${this.options.label}): destination copy buffer from: ${srcBuffer.options.label}`,\n        size: srcBuffer.GPUBuffer.size,\n        //usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\n        usage: ['copyDst', 'mapRead'],\n      })\n    }\n\n    if (srcBuffer.GPUBuffer.mapState !== 'unmapped') {\n      throwWarning(\n        `${this.options.label} (${this.type}): Cannot copy from ${srcBuffer.GPUBuffer} because it is currently mapped`\n      )\n      return\n    }\n    if (dstBuffer.GPUBuffer.mapState !== 'unmapped') {\n      throwWarning(\n        `${this.options.label} (${this.type}): Cannot copy from ${dstBuffer.GPUBuffer} because it is currently mapped`\n      )\n      return\n    }\n\n    // if there's no command encoder provided, we'll have to create one and submit it after the copy process\n    const hasCommandEncoder = !!commandEncoder\n\n    if (!hasCommandEncoder) {\n      commandEncoder = this.deviceManager.device?.createCommandEncoder({\n        label: `${this.type} (${this.options.label}): Copy buffer command encoder`,\n      })\n      !this.production &&\n        commandEncoder.pushDebugGroup(`${this.type} (${this.options.label}): Copy buffer command encoder`)\n    }\n\n    commandEncoder.copyBufferToBuffer(srcBuffer.GPUBuffer, 0, dstBuffer.GPUBuffer, 0, dstBuffer.GPUBuffer.size)\n\n    if (!hasCommandEncoder) {\n      !this.production && commandEncoder.popDebugGroup()\n      const commandBuffer = commandEncoder.finish()\n      this.deviceManager.device?.queue.submit([commandBuffer])\n    }\n\n    return dstBuffer\n  }\n\n  /* BIND GROUPS & LAYOUTS */\n\n  /**\n   * Get all created {@link AllowedBindGroups | bind group} tracked by our {@link GPUDeviceManager}\n   * @readonly\n   */\n  get bindGroups(): Map<string, AllowedBindGroups> {\n    return this.deviceManager.bindGroups\n  }\n\n  /**\n   * Add a {@link AllowedBindGroups | bind group} to our {@link GPUDeviceManager#bindGroups | bind groups array}\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to add\n   */\n  addBindGroup(bindGroup: AllowedBindGroups) {\n    this.deviceManager.addBindGroup(bindGroup)\n  }\n\n  /**\n   * Remove a {@link AllowedBindGroups | bind group} from our {@link GPUDeviceManager#bindGroups | bind groups array}\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to remove\n   */\n  removeBindGroup(bindGroup: AllowedBindGroups) {\n    this.deviceManager.removeBindGroup(bindGroup)\n  }\n\n  /**\n   * Create a {@link GPUBindGroupLayout}\n   * @param bindGroupLayoutDescriptor - {@link GPUDevice.createBindGroupLayout().descriptor | GPUBindGroupLayoutDescriptor}\n   * @returns - newly created {@link GPUBindGroupLayout}\n   */\n  createBindGroupLayout(bindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor): GPUBindGroupLayout {\n    return this.deviceManager.device?.createBindGroupLayout(bindGroupLayoutDescriptor)\n  }\n\n  /**\n   * Create a {@link GPUBindGroup}\n   * @param bindGroupDescriptor - {@link GPUDevice.createBindGroup().descriptor | GPUBindGroupDescriptor}\n   * @returns - newly created {@link GPUBindGroup}\n   */\n  createBindGroup(bindGroupDescriptor: GPUBindGroupDescriptor): GPUBindGroup {\n    return this.deviceManager.device?.createBindGroup(bindGroupDescriptor)\n  }\n\n  /* SHADERS & PIPELINES */\n\n  /**\n   * Create a {@link GPUShaderModule}\n   * @param shaderModuleDescriptor - {@link GPUDevice.createShaderModule().descriptor | GPUShaderModuleDescriptor}\n   * @returns - newly created {@link GPUShaderModule}\n   */\n  createShaderModule(shaderModuleDescriptor: GPUShaderModuleDescriptor): GPUShaderModule {\n    return this.device?.createShaderModule(shaderModuleDescriptor)\n  }\n\n  /**\n   * Create a {@link GPUPipelineLayout}\n   * @param pipelineLayoutDescriptor - {@link GPUDevice.createPipelineLayout().descriptor | GPUPipelineLayoutDescriptor}\n   * @returns - newly created {@link GPUPipelineLayout}\n   */\n  createPipelineLayout(pipelineLayoutDescriptor: GPUPipelineLayoutDescriptor): GPUPipelineLayout {\n    return this.device?.createPipelineLayout(pipelineLayoutDescriptor)\n  }\n\n  /**\n   * Create a {@link GPURenderPipeline}\n   * @param pipelineDescriptor - {@link GPUDevice.createRenderPipeline().descriptor | GPURenderPipelineDescriptor}\n   * @returns - newly created {@link GPURenderPipeline}\n   */\n  createRenderPipeline(pipelineDescriptor: GPURenderPipelineDescriptor): GPURenderPipeline {\n    return this.device?.createRenderPipeline(pipelineDescriptor)\n  }\n\n  /**\n   * Asynchronously create a {@link GPURenderPipeline}\n   * @param pipelineDescriptor - {@link GPUDevice.createRenderPipeline().descriptor | GPURenderPipelineDescriptor}\n   * @returns - newly created {@link GPURenderPipeline}\n   */\n  async createRenderPipelineAsync(pipelineDescriptor: GPURenderPipelineDescriptor): Promise<GPURenderPipeline> {\n    return await this.device?.createRenderPipelineAsync(pipelineDescriptor)\n  }\n\n  /**\n   * Create a {@link GPUComputePipeline}\n   * @param pipelineDescriptor - {@link GPUDevice.createComputePipeline().descriptor | GPUComputePipelineDescriptor}\n   * @returns - newly created {@link GPUComputePipeline}\n   */\n  createComputePipeline(pipelineDescriptor: GPUComputePipelineDescriptor): GPUComputePipeline {\n    return this.device?.createComputePipeline(pipelineDescriptor)\n  }\n\n  /**\n   * Asynchronously create a {@link GPUComputePipeline}\n   * @param pipelineDescriptor - {@link GPUDevice.createComputePipeline().descriptor | GPUComputePipelineDescriptor}\n   * @returns - newly created {@link GPUComputePipeline}\n   */\n  async createComputePipelineAsync(pipelineDescriptor: GPUComputePipelineDescriptor): Promise<GPUComputePipeline> {\n    return await this.device?.createComputePipelineAsync(pipelineDescriptor)\n  }\n\n  /* TEXTURES */\n\n  /**\n   * Get all created {@link DOMTexture} tracked by our {@link GPUDeviceManager}\n   * @readonly\n   */\n  get domTextures(): DOMTexture[] {\n    return this.deviceManager.domTextures\n  }\n\n  /**\n   * Add a {@link DOMTexture} to our {@link GPUDeviceManager#domTextures | textures array}\n   * @param texture - {@link DOMTexture} to add\n   */\n  addDOMTexture(texture: DOMTexture) {\n    this.deviceManager.addDOMTexture(texture)\n  }\n\n  /**\n   * Remove a {@link DOMTexture} from our {@link GPUDeviceManager#domTextures | textures array}\n   * @param texture - {@link DOMTexture} to remove\n   */\n  removeDOMTexture(texture: DOMTexture) {\n    this.deviceManager.removeDOMTexture(texture)\n  }\n\n  /**\n   * Add a {@link Texture} to our {@link textures} array\n   * @param texture - {@link Texture} to add\n   */\n  addTexture(texture: Texture) {\n    this.textures.push(texture)\n  }\n\n  /**\n   * Remove a {@link Texture} from our {@link textures} array\n   * @param texture - {@link Texture} to remove\n   */\n  removeTexture(texture: Texture) {\n    this.textures = this.textures.filter((t) => t.uuid !== texture.uuid)\n  }\n\n  /**\n   * Create a {@link GPUTexture}\n   * @param textureDescriptor - {@link GPUDevice.createTexture().descriptor | GPUTextureDescriptor}\n   * @returns - newly created {@link GPUTexture}\n   */\n  createTexture(textureDescriptor: GPUTextureDescriptor): GPUTexture {\n    return this.deviceManager.device?.createTexture(textureDescriptor)\n  }\n\n  /**\n   * Upload a {@linkDOMTexture#texture | texture} to the GPU\n   * @param texture - {@link DOMTexture} class object with the {@link DOMTexture#texture | texture} to upload\n   */\n  uploadTexture(texture: DOMTexture) {\n    this.deviceManager.uploadTexture(texture)\n  }\n\n  /**\n   * Import a {@link GPUExternalTexture}\n   * @param video - {@link HTMLVideoElement} source\n   * @returns - {@link GPUExternalTexture}\n   */\n  importExternalTexture(video: HTMLVideoElement): GPUExternalTexture {\n    // TODO WebCodecs may be the way to go when time comes!\n    // https://developer.chrome.com/blog/new-in-webgpu-113/#use-webcodecs-videoframe-source-in-importexternaltexture\n    // see onVideoFrameCallback method in DOMTexture class\n    // const videoFrame = new VideoFrame(video)\n    // return this.deviceManager.device?.importExternalTexture({ source: videoFrame })\n    return this.deviceManager.device?.importExternalTexture({ source: video })\n  }\n\n  /**\n   * Check if a {@link Sampler} has already been created with the same {@link Sampler#options | parameters}.\n   * Use it if found, else create a new one and add it to the {@link GPUDeviceManager#samplers | samplers array}.\n   * @param sampler - {@link Sampler} to create\n   * @returns - the {@link GPUSampler}\n   */\n  createSampler(sampler: Sampler): GPUSampler {\n    const existingSampler = this.samplers.find((existingSampler) => {\n      return JSON.stringify(existingSampler.options) === JSON.stringify(sampler.options) && existingSampler.sampler\n    })\n\n    if (existingSampler) {\n      return existingSampler.sampler\n    } else {\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\n      const { type, ...samplerOptions } = sampler.options\n      const gpuSampler: GPUSampler = this.deviceManager.device?.createSampler({\n        label: sampler.label,\n        ...samplerOptions,\n      })\n\n      this.deviceManager.addSampler(sampler)\n\n      return gpuSampler\n    }\n  }\n\n  /**\n   * Remove a {@link Sampler} from our {@link GPUDeviceManager#samplers | samplers array}\n   * @param sampler - {@link Sampler} to remove\n   */\n  removeSampler(sampler: Sampler) {\n    this.deviceManager.removeSampler(sampler)\n  }\n\n  /* OBJECTS & TASKS */\n\n  /**\n   * Set different tasks queue managers to execute callbacks at different phases of our render call:\n   * - {@link onBeforeCommandEncoderCreation}: callbacks executed before the creation of the command encoder\n   * - {@link onBeforeRenderScene}: callbacks executed after the creation of the command encoder and before rendering the {@link Scene}\n   * - {@link onAfterRenderScene}: callbacks executed after the creation of the command encoder and after rendering the {@link Scene}\n   * - {@link onAfterCommandEncoderSubmission}: callbacks executed after the submission of the command encoder\n   */\n  setTasksQueues() {\n    this.onBeforeCommandEncoderCreation = new TasksQueueManager()\n    this.onBeforeRenderScene = new TasksQueueManager()\n    this.onAfterRenderScene = new TasksQueueManager()\n    this.onAfterCommandEncoderSubmission = new TasksQueueManager()\n  }\n\n  /**\n   * Set all objects arrays that we'll keep track of\n   */\n  setRendererObjects() {\n    // keep track of compute passes, meshes, etc.\n    this.computePasses = []\n    this.pingPongPlanes = []\n    this.shaderPasses = []\n    this.renderTargets = []\n    this.meshes = []\n    this.textures = []\n    this.renderBundles = new Map()\n    this.animations = new Map()\n  }\n\n  /**\n   * Get all this {@link GPURenderer} rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes)\n   * @readonly\n   */\n  get renderedObjects(): SceneObject[] {\n    return [...this.computePasses, ...this.meshes, ...this.shaderPasses, ...this.pingPongPlanes]\n  }\n\n  /**\n   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link ComputePass | compute passes}) using a given {@link AllowedBindGroups | bind group}.\n   * Useful (but slow) to know if a resource is used by multiple objects and if it is safe to destroy it or not.\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to check\n   */\n  getObjectsByBindGroup(bindGroup: AllowedBindGroups): undefined | SceneObject[] {\n    return this.deviceRenderedObjects.filter((object) => {\n      return [\n        ...object.material.bindGroups,\n        ...object.material.inputsBindGroups,\n        ...object.material.clonedBindGroups,\n      ].some((bG) => bG.uuid === bindGroup.uuid)\n    })\n  }\n\n  /**\n   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link ComputePass | compute passes}) using a given {@link DOMTexture} or {@link Texture}.\n   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.\n   * @param texture - {@link DOMTexture} or {@link Texture} to check\n   */\n  getObjectsByTexture(texture: DOMTexture | Texture): undefined | SceneObject[] {\n    return this.deviceRenderedObjects.filter((object) => {\n      return [...object.material.domTextures, ...object.material.textures].some((t) => t.uuid === texture.uuid)\n    })\n  }\n\n  /* EVENTS */\n\n  /**\n   * Assign a callback function to _onBeforeRenderCallback\n   * @param callback - callback to run just before the {@link render} method will be executed\n   * @returns - our {@link GPURenderer}\n   */\n  onBeforeRender(callback: (commandEncoder?: GPUCommandEncoder) => void) {\n    if (callback) {\n      this._onBeforeRenderCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Assign a callback function to _onAfterRenderCallback\n   * @param callback - callback to run just after the {@link render} method has been executed\n   * @returns - our {@link GPURenderer}\n   */\n  onAfterRender(callback: (commandEncoder?: GPUCommandEncoder) => void) {\n    if (callback) {\n      this._onAfterRenderCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Callback to run after the {@link GPURenderer} has been resized but before the {@link resizeObjects} method has been executed (before the {@link Texture | textures}, {@link RenderPass | render passes}, {@link RenderTarget | render targets}, {@link ComputePass | compute passes} and meshes are resized).\n   * @param callback - callback to execute.\n   * @returns - our {@link GPURenderer}\n   */\n  onResize(callback: (commandEncoder?: GPUCommandEncoder) => void) {\n    if (callback) {\n      this._onResizeCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Callback to run after the {@link GPURenderer} has been resized and after the {@link resizeObjects} method has been executed (after the {@link Texture | textures}, {@link RenderPass | render passes}, {@link RenderTarget | render targets}, {@link ComputePass | compute passes} and meshes have been resized).\n   * @param callback - callback to execute.\n   * @returns - our {@link GPURenderer}\n   */\n  onAfterResize(callback: (commandEncoder?: GPUCommandEncoder) => void) {\n    if (callback) {\n      this._onAfterResizeCallback = callback\n    }\n\n    return this\n  }\n\n  /* RENDER */\n\n  /**\n   * Render a single {@link ComputePass}\n   * @param commandEncoder - current {@link GPUCommandEncoder}\n   * @param computePass - {@link ComputePass}\n   */\n  renderSingleComputePass(commandEncoder: GPUCommandEncoder, computePass: ComputePass) {\n    const pass = commandEncoder.beginComputePass()\n    computePass.render(pass)\n    pass.end()\n\n    computePass.copyBufferToResult(commandEncoder)\n  }\n\n  /**\n   * Render a single {@link RenderedMesh | Mesh}\n   * @param commandEncoder - current {@link GPUCommandEncoder}\n   * @param mesh - {@link RenderedMesh | Mesh} to render\n   */\n  renderSingleMesh(commandEncoder: GPUCommandEncoder, mesh: RenderedMesh) {\n    const pass = commandEncoder.beginRenderPass(this.renderPass.descriptor)\n    mesh.render(pass)\n    pass.end()\n  }\n\n  /**\n   * Render an array of objects (either {@link RenderedMesh | Meshes} or {@link ComputePass}) once. This method won't call any of the renderer render hooks like {@link onBeforeRender}, {@link onAfterRender}\n   * @param objects - Array of {@link RenderedMesh | Meshes} or {@link ComputePass} to render\n   */\n  renderOnce(objects: SceneObject[]) {\n    const commandEncoder = this.device?.createCommandEncoder({\n      label: 'Render once command encoder',\n    })\n    !this.production && commandEncoder.pushDebugGroup('Render once command encoder')\n\n    this.pipelineManager.resetCurrentPipeline()\n\n    objects.forEach((object) => {\n      if (object.type === 'ComputePass') {\n        this.renderSingleComputePass(commandEncoder, object as ComputePass)\n      } else {\n        this.renderSingleMesh(commandEncoder, object as RenderedMesh)\n      }\n    })\n\n    !this.production && commandEncoder.popDebugGroup()\n    const commandBuffer = commandEncoder.finish()\n    this.device?.queue.submit([commandBuffer])\n\n    this.pipelineManager.resetCurrentPipeline()\n  }\n\n  /**\n   * Force to clear a {@link GPURenderer} content to its {@link RenderPass#options.clearValue | clear value} by rendering and empty pass.\n   * @param commandEncoder\n   */\n  forceClear(commandEncoder?: GPUCommandEncoder) {\n    // if there's no command encoder provided, we'll have to create one and submit it after the copy process\n    const hasCommandEncoder = !!commandEncoder\n\n    if (!hasCommandEncoder) {\n      commandEncoder = this.device?.createCommandEncoder({\n        label: `${this.type} (${this.options.label}): Force clear command encoder`,\n      })\n      !this.production &&\n        commandEncoder.pushDebugGroup(`${this.type} (${this.options.label}): Force clear command encoder`)\n    }\n\n    this.renderPass.updateView()\n    const pass = commandEncoder.beginRenderPass(this.renderPass.descriptor)\n    pass.end()\n\n    if (!hasCommandEncoder) {\n      !this.production && commandEncoder.popDebugGroup()\n      const commandBuffer = commandEncoder.finish()\n      this.device?.queue.submit([commandBuffer])\n    }\n  }\n\n  /**\n   * Called by the {@link GPUDeviceManager#render | GPUDeviceManager render method} before the {@link GPUCommandEncoder} has been created. Used to update the {@link Scene} matrix stack.\n   */\n  onBeforeCommandEncoder() {\n    if (!this.ready) return\n    if (this.shouldRenderScene) this.scene?.onBeforeRender()\n    this.onBeforeCommandEncoderCreation.execute()\n  }\n\n  /**\n   * Called by the {@link GPUDeviceManager#render | GPUDeviceManager render method} after the {@link GPUCommandEncoder} has been created.\n   */\n  onAfterCommandEncoder() {\n    if (!this.ready) return\n\n    this.onAfterCommandEncoderSubmission.execute()\n  }\n\n  /**\n   * Called at each draw call to render our scene and its content\n   * @param commandEncoder - current {@link GPUCommandEncoder}\n   */\n  render(commandEncoder: GPUCommandEncoder) {\n    if (!this.ready || !this.shouldRender) return\n\n    this._onBeforeRenderCallback && this._onBeforeRenderCallback(commandEncoder)\n    this.onBeforeRenderScene.execute(commandEncoder)\n\n    if (this.shouldRenderScene) this.scene?.render(commandEncoder)\n\n    this._onAfterRenderCallback && this._onAfterRenderCallback(commandEncoder)\n    this.onAfterRenderScene.execute(commandEncoder)\n  }\n\n  /**\n   * Destroy our {@link GPURenderer} and everything that needs to be destroyed as well\n   */\n  destroy() {\n    this.deviceManager.renderers = this.deviceManager.renderers.filter((renderer) => renderer.uuid !== this.uuid)\n\n    this.domElement?.destroy()\n\n    // remove/destroy render bundles\n    this.renderBundles.forEach((bundle) => bundle.destroy())\n\n    this.animations = new Map()\n\n    // destroy render passes\n    this.renderPass?.destroy()\n    this.postProcessingPass?.destroy()\n\n    this.renderTargets.forEach((renderTarget) => renderTarget.destroy())\n    this.renderedObjects.forEach((sceneObject) => sceneObject.remove())\n\n    this.textures.forEach((texture) => texture.destroy())\n\n    this.context?.unconfigure()\n  }\n}\n","import { GPURenderer, GPURendererOptions, GPURendererParams, SceneObject } from './GPURenderer'\nimport { Camera, CameraBasePerspectiveOptions } from '../camera/Camera'\nimport { BufferBinding } from '../bindings/BufferBinding'\nimport { BindGroup } from '../bindGroups/BindGroup'\nimport { Vec3 } from '../../math/Vec3'\nimport { AllowedBindGroups, Input } from '../../types/BindGroups'\nimport { RectBBox } from '../DOM/DOMElement'\nimport type { Light, LightsType, ShadowCastingLights } from '../lights/Light'\nimport { WGSLVariableType } from '../bindings/utils'\nimport { throwWarning } from '../../utils/utils'\nimport { directionalShadowStruct } from '../shadows/DirectionalShadow'\nimport { pointShadowStruct } from '../shadows/PointShadow'\nimport { ShadowsType } from '../shadows/Shadow'\n\n/** Defines the parameters used to build the {@link BufferBinding} of each type of lights. */\nexport interface LightParams {\n  /** Maximum number for a given type of light. */\n  max: number\n  /** Label for a given type of light. */\n  label: string\n  /** Parameters to use to build the {@link BufferBinding} for a given type of light. */\n  params: Record<\n    string,\n    {\n      /** WGSL type of the input. */\n      type: WGSLVariableType\n      /** Size of the input. */\n      size: number\n    }\n  >\n}\n\n/** Defines the {@link BufferBinding} parameters for all kinds of {@link LightsType | light types}. */\nexport type LightsBindingParams = Record<LightsType, LightParams>\n\n/** Defines all the possible {@link BufferBinding} to use in the {@link GPUCameraRenderer#cameraLightsBindGroup | renderer camera, lights and shadows bind group}. */\nexport type GPUCameraRendererBindings = Record<'camera' | LightsType | ShadowsType, BufferBinding>\n\n/**\n * Base parameters for the maximum number of lights to use when creating a {@link GPUCameraRenderer}.\n */\nexport interface GPUCameraRendererLightParams {\n  /** Maximum number of {@link core/lights/AmbientLight.AmbientLight | AmbientLight} to use. Default to `2`. */\n  maxAmbientLights?: LightsBindingParams['ambientLights']['max']\n  /** Maximum number of {@link core/lights/DirectionalLight.DirectionalLight | DirectionalLight} to use. Default to `5`. */\n  maxDirectionalLights?: LightsBindingParams['directionalLights']['max']\n  /** Maximum number of {@link core/lights/PointLight.PointLight | PointLight} to use. Default to `5`. */\n  maxPointLights?: LightsBindingParams['pointLights']['max']\n}\n\n/** Extra parameters used to define the {@link Camera} and various lights options. */\nexport interface GPUCameraLightsRendererParams {\n  /** An object defining {@link CameraBasePerspectiveOptions | camera perspective parameters} */\n  camera?: CameraBasePerspectiveOptions\n  /** An object defining {@link GPUCameraRendererLightParams | the maximum number of light} to use when creating the {@link GPUCameraRenderer}. Can be set to `false` to avoid creating lights and shadows buffers, but note this is a permanent choice and cannot be changed later. */\n  lights?: GPUCameraRendererLightParams | false\n}\n\n/** Parameters used to create a {@link GPUCameraRenderer}. */\nexport interface GPUCameraRendererParams extends GPURendererParams, GPUCameraLightsRendererParams {}\n\n/** Options used to create a {@link GPUCameraRenderer}. */\nexport interface GPUCameraRendererOptions extends GPURendererOptions, GPUCameraLightsRendererParams {}\n\n/**\n * This renderer is meant to render meshes projected by a {@link Camera}. It therefore creates a {@link Camera} with its associated {@link bindings} as well as lights and shadows {@link bindings} used for lighting and their associated {@link cameraLightsBindGroup | bind group}.<br>\n * Can be safely used to render compute passes and meshes if they do not need to be tied to the DOM.\n *\n * @example\n * ```javascript\n * // first, we need a WebGPU device, that's what GPUDeviceManager is for\n * const gpuDeviceManager = new GPUDeviceManager({\n *   label: 'Custom device manager',\n * })\n *\n * // we need to wait for the WebGPU device to be created\n * await gpuDeviceManager.init()\n *\n * // then we can create a camera renderer\n * const gpuCameraRenderer = new GPUCameraRenderer({\n *   deviceManager: gpuDeviceManager, // we need the WebGPU device to create the renderer context\n *   container: document.querySelector('#canvas'),\n * })\n * ```\n */\nexport class GPUCameraRenderer extends GPURenderer {\n  /** {@link Camera} used by this {@link GPUCameraRenderer}. */\n  camera: Camera\n  /** {@link BindGroup | bind group} handling the camera, lights and shadows {@link BufferBinding}. */\n  cameraLightsBindGroup: BindGroup\n\n  /** Array of all the created {@link Light}. */\n  lights: Light[]\n  /** An object defining the current {@link LightsBindingParams | lights binding parameters}, including the maximum number of lights for each type and the structure used to create the associated {@link BufferBinding}. */\n  lightsBindingParams: LightsBindingParams\n  /** An object defining the structure used to create the shadows {@link BufferBinding}. */\n  shadowsBindingsStruct: Record<string, Record<string, Input>>\n  /** The bindings used by the {@link cameraLightsBindGroup | camera, lights and shadows bind group}. */\n  bindings: GPUCameraRendererBindings\n\n  /** Options used to create this {@link GPUCameraRenderer}. */\n  options: GPUCameraRendererOptions\n\n  /** @ignore */\n  #shouldUpdateCameraLightsBindGroup: boolean\n\n  /**\n   * GPUCameraRenderer constructor\n   * @param parameters - {@link GPUCameraRendererParams | parameters} used to create this {@link GPUCameraRenderer}\n   */\n  constructor({\n    deviceManager,\n    label,\n    container,\n    pixelRatio = 1,\n    autoResize = true,\n    context = {},\n    renderPass,\n    camera = {},\n    lights = {},\n  }: GPUCameraRendererParams) {\n    super({\n      deviceManager,\n      label,\n      container,\n      pixelRatio,\n      autoResize,\n      context,\n      renderPass,\n    })\n\n    this.type = 'GPUCameraRenderer'\n\n    camera = { ...{ fov: 50, near: 0.1, far: 1000 }, ...camera }\n\n    if (lights !== false) {\n      lights = { ...{ maxAmbientLights: 2, maxDirectionalLights: 5, maxPointLights: 5 }, ...lights }\n    }\n\n    this.options = {\n      ...this.options,\n      camera,\n      lights,\n    }\n\n    this.bindings = {} as GPUCameraRendererBindings\n    this.#shouldUpdateCameraLightsBindGroup = true\n\n    this.lights = []\n\n    this.setCamera(camera)\n\n    this.setCameraBinding()\n\n    if (this.options.lights) {\n      this.setLightsBinding()\n      this.setShadowsBinding()\n    }\n\n    this.setCameraLightsBindGroup()\n  }\n\n  /**\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} is lost.\n   * Reset all our samplers, force all our scene objects and camera bind group to lose context.\n   */\n  loseContext() {\n    super.loseContext()\n    // lose camera bind group context as well\n    this.cameraLightsBindGroup.loseContext()\n  }\n\n  /**\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored.\n   * Configure the context again, resize the {@link core/renderPasses/RenderTarget.RenderTarget | render targets} and {@link core/textures/Texture.Texture | textures}, restore our {@link renderedObjects | rendered objects} context, re-write our {@link cameraLightsBindGroup | camera, lights and shadows bind group} bindings.\n   */\n  restoreContext() {\n    super.restoreContext()\n    this.cameraLightsBindGroup?.restoreContext()\n    this.updateCameraBindings()\n  }\n\n  /* CAMERA */\n\n  /**\n   * Set the {@link camera}\n   * @param cameraParameters - {@link CameraBasePerspectiveOptions | parameters} used to create the {@link camera}\n   */\n  setCamera(cameraParameters: CameraBasePerspectiveOptions) {\n    const { width, height } = this.rectBBox\n\n    this.useCamera(\n      new Camera({\n        fov: cameraParameters.fov,\n        near: cameraParameters.near,\n        far: cameraParameters.far,\n        width,\n        height,\n        pixelRatio: this.pixelRatio,\n        onMatricesChanged: () => {\n          this.onCameraMatricesChanged()\n        },\n      })\n    )\n  }\n\n  /**\n   * Tell our {@link GPUCameraRenderer} to use this {@link Camera}. If a {@link camera} has already been set, reset the {@link GPUCameraRenderer#bindings.camera | camera binding} inputs view values and the {@link meshes} {@link Camera} object.\n   * @param camera - new {@link Camera} to use.\n   */\n  useCamera(camera: Camera) {\n    if (this.camera && camera && this.camera.uuid === camera.uuid) return\n\n    if (this.camera) {\n      this.camera.parent = null\n      this.camera.onMatricesChanged = () => {}\n    }\n\n    this.camera = camera\n    this.camera.parent = this.scene\n\n    if (this.bindings.camera) {\n      this.camera.onMatricesChanged = () => this.onCameraMatricesChanged()\n\n      // replace the 2 matrices inputs view values\n      // position will be computed before updating the binding anyway\n      this.bindings.camera.inputs.view.value = this.camera.viewMatrix\n      this.bindings.camera.inputs.projection.value = this.camera.projectionMatrix\n\n      for (const mesh of this.meshes) {\n        if ('modelViewMatrix' in mesh) {\n          mesh.camera = this.camera\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the {@link core/renderers/GPURenderer.ProjectedMesh | projected meshes} sizes and positions when the {@link camera} {@link Camera#position | position} changes\n   */\n  onCameraMatricesChanged() {\n    this.updateCameraBindings()\n\n    for (const mesh of this.meshes) {\n      if ('modelViewMatrix' in mesh) {\n        mesh.shouldUpdateProjectionMatrixStack()\n      }\n    }\n  }\n\n  /**\n   * Set the {@link GPUCameraRenderer#bindings.camera | camera buffer binding} and {@link cameraLightsBindGroup | camera bind group}\n   */\n  setCameraBinding() {\n    // TODO add world matrix / inverseViewMatrix?\n    this.bindings.camera = new BufferBinding({\n      label: 'Camera',\n      name: 'camera',\n      visibility: ['vertex'],\n      struct: {\n        view: {\n          // camera view matrix\n          type: 'mat4x4f',\n          value: this.camera.viewMatrix,\n        },\n        projection: {\n          // camera projection matrix\n          type: 'mat4x4f',\n          value: this.camera.projectionMatrix,\n        },\n        position: {\n          // camera world position\n          type: 'vec3f',\n          value: this.camera.position.clone().setFromMatrixPosition(this.camera.worldMatrix),\n          onBeforeUpdate: () => {\n            ;(this.bindings.camera.inputs.position.value as Vec3)\n              .copy(this.camera.position)\n              .setFromMatrixPosition(this.camera.worldMatrix)\n          },\n        },\n      },\n    })\n  }\n\n  /* LIGHTS */\n\n  /**\n   * Add a {@link Light} to the {@link lights} array.\n   * @param light - {@link Light} to add.\n   */\n  addLight(light: Light) {\n    this.lights.push(light)\n    this.bindings[light.type].inputs.count.value++\n    this.bindings[light.type].inputs.count.shouldUpdate = true\n  }\n\n  /**\n   * Remove a {@link Light} from the {@link lights} array.\n   * @param light - {@link Light} to remove.\n   */\n  removeLight(light: Light) {\n    this.lights = this.lights.filter((l) => l.uuid !== light.uuid)\n    this.bindings[light.type].inputs.count.value--\n    this.bindings[light.type].inputs.count.shouldUpdate = true\n  }\n\n  /**\n   * Set the lights {@link BufferBinding} based on the {@link lightsBindingParams}.\n   */\n  setLightsBinding() {\n    if (!this.options.lights) return\n\n    // TODO we could combine lights and shadows in a single buffer using childrenBindings\n    // to improve performance by reducing writeBuffer calls\n    this.lightsBindingParams = {\n      ambientLights: {\n        max: this.options.lights.maxAmbientLights,\n        label: 'Ambient lights',\n        params: {\n          color: {\n            type: 'array<vec3f>',\n            size: 3,\n          },\n        },\n      },\n      directionalLights: {\n        max: this.options.lights.maxDirectionalLights,\n        label: 'Directional lights',\n        params: {\n          color: {\n            type: 'array<vec3f>',\n            size: 3,\n          },\n          direction: {\n            type: 'array<vec3f>',\n            size: 3,\n          },\n        },\n      },\n      pointLights: {\n        max: this.options.lights.maxPointLights,\n        label: 'Point lights',\n        params: {\n          color: {\n            type: 'array<vec3f>',\n            size: 3,\n          },\n          position: {\n            type: 'array<vec3f>',\n            size: 3,\n          },\n          range: {\n            type: 'array<f32>',\n            size: 1,\n          },\n        },\n      },\n    }\n\n    const lightsBindings = {\n      ambientLights: null,\n      directionalLights: null,\n      pointLights: null,\n    }\n\n    Object.keys(lightsBindings).forEach((lightsType) => {\n      this.setLightsTypeBinding(lightsType as LightsType)\n    })\n  }\n\n  /**\n   * Set or reset the {@link BufferBinding} for a given {@link LightsType | type of light}.\n   * @param lightsType - {@link LightsType | Type of light} for which to create the {@link BufferBinding}.\n   */\n  setLightsTypeBinding(lightsType: LightsType) {\n    const structParams = Object.keys(this.lightsBindingParams[lightsType].params)\n      .map((paramKey) => {\n        return {\n          key: paramKey,\n          type: this.lightsBindingParams[lightsType].params[paramKey].type,\n          size: this.lightsBindingParams[lightsType].params[paramKey].size,\n        }\n      })\n      .reduce((acc, binding) => {\n        acc[binding.key] = {\n          type: binding.type,\n          value: new Float32Array(Math.max(this.lightsBindingParams[lightsType].max, 1) * binding.size),\n        }\n\n        return acc\n      }, {})\n\n    this.bindings[lightsType] = new BufferBinding({\n      label: this.lightsBindingParams[lightsType].label,\n      name: lightsType,\n      bindingType: 'storage',\n      visibility: ['vertex', 'fragment', 'compute'], // TODO needed in compute?\n      struct: {\n        count: {\n          type: 'i32',\n          value: 0,\n        },\n        ...structParams,\n      },\n    })\n  }\n\n  /**\n   * Called when a {@link LightsType | type of light} has overflown its maximum capacity. Destroys the associated {@link BufferBinding} (and eventually the associated shadow {@link BufferBinding}), recreates the {@link cameraLightsBindGroup | camera, lights and shadows bind group} and reset all lights for this {@link LightsType | type of light}.\n   * @param lightsType - {@link LightsType | Type of light} that has overflown its maximum capacity.\n   */\n  onMaxLightOverflow(lightsType: LightsType) {\n    if (!this.production) {\n      throwWarning(\n        `${this.options.label} (${this.type}): You are overflowing the current max lights count of '${\n          this.lightsBindingParams[lightsType].max\n        }' for this type of lights: ${lightsType}. This should be avoided by setting a larger ${\n          'max' + lightsType.charAt(0).toUpperCase() + lightsType.slice(1)\n        } when instancing your ${this.type}.`\n      )\n    }\n\n    this.lightsBindingParams[lightsType].max++\n\n    const oldLightBinding = this.cameraLightsBindGroup.getBindingByName(lightsType)\n    if (oldLightBinding) {\n      this.cameraLightsBindGroup.destroyBufferBinding(oldLightBinding as BufferBinding)\n    }\n\n    this.setLightsTypeBinding(lightsType)\n\n    const lightBindingIndex = this.cameraLightsBindGroup.bindings.findIndex((binding) => binding.name === lightsType)\n\n    if (lightBindingIndex !== -1) {\n      this.cameraLightsBindGroup.bindings[lightBindingIndex] = this.bindings[lightsType]\n    } else {\n      // not used yet but could be useful\n      // if we'd decide not to create a binding if max === 0\n      this.bindings[lightsType].shouldResetBindGroup = true\n      this.bindings[lightsType].shouldResetBindGroupLayout = true\n      this.cameraLightsBindGroup.addBinding(this.bindings[lightsType])\n      this.shouldUpdateCameraLightsBindGroup()\n    }\n\n    // increase shadows binding size as well\n    if (lightsType === 'directionalLights' || lightsType === 'pointLights') {\n      const shadowsType = (lightsType.replace('Lights', '') + 'Shadows') as ShadowsType\n      const oldShadowsBinding = this.cameraLightsBindGroup.getBindingByName(shadowsType)\n      if (oldShadowsBinding) {\n        this.cameraLightsBindGroup.destroyBufferBinding(oldShadowsBinding as BufferBinding)\n      }\n\n      this.setShadowsTypeBinding(lightsType)\n\n      const shadowsBindingIndex = this.cameraLightsBindGroup.bindings.findIndex(\n        (binding) => binding.name === shadowsType\n      )\n\n      if (shadowsBindingIndex !== -1) {\n        this.cameraLightsBindGroup.bindings[shadowsBindingIndex] = this.bindings[shadowsType]\n      } else {\n        // not used yet, same as above\n        this.bindings[shadowsType].shouldResetBindGroup = true\n        this.bindings[shadowsType].shouldResetBindGroupLayout = true\n        this.cameraLightsBindGroup.addBinding(this.bindings[shadowsType])\n        this.shouldUpdateCameraLightsBindGroup()\n      }\n    }\n\n    this.cameraLightsBindGroup.resetEntries()\n    this.cameraLightsBindGroup.createBindGroup()\n\n    this.lights.forEach((light) => {\n      if (light.type === lightsType) {\n        light.reset()\n      }\n    })\n  }\n\n  /* SHADOW MAPS */\n\n  /**\n   * Get all the current {@link ShadowCastingLights | lights that can cast shadows}.\n   * @returns - All {@link ShadowCastingLights | lights that can cast shadows}.\n   */\n  get shadowCastingLights(): ShadowCastingLights[] {\n    return this.lights.filter(\n      (light) => light.type === 'directionalLights' || light.type === 'pointLights'\n    ) as ShadowCastingLights[]\n  }\n\n  /**\n   * Set the shadows {@link BufferBinding} based on the {@link shadowsBindingsStruct}.\n   */\n  setShadowsBinding() {\n    this.shadowsBindingsStruct = {\n      directional: directionalShadowStruct,\n      point: pointShadowStruct,\n    }\n\n    this.setShadowsTypeBinding('directionalLights')\n    this.setShadowsTypeBinding('pointLights')\n  }\n\n  /**\n   * Set or reset the associated shadow {@link BufferBinding} for a given {@link LightsType | type of light}.\n   * @param lightsType - {@link LightsType | Type of light} for which to create the associated shadow {@link BufferBinding}.\n   */\n  setShadowsTypeBinding(lightsType: LightsType) {\n    const type = lightsType.replace('Lights', '')\n    const shadowsType = (type + 'Shadows') as ShadowsType\n    const struct = this.shadowsBindingsStruct[type]\n    const label = type.charAt(0).toUpperCase() + type.slice(1) + ' shadows'\n\n    this.bindings[shadowsType] = new BufferBinding({\n      label: label,\n      name: shadowsType,\n      bindingType: 'storage',\n      visibility: ['vertex', 'fragment', 'compute'], // TODO needed in compute?\n      childrenBindings: [\n        {\n          binding: new BufferBinding({\n            label: label + ' element',\n            name: shadowsType + 'Elements',\n            bindingType: 'uniform',\n            visibility: ['vertex', 'fragment'],\n            struct,\n          }),\n          count: Math.max(1, this.lightsBindingParams[lightsType].max),\n          forceArray: true, // needs to be iterable anyway!\n        },\n      ],\n    })\n  }\n\n  /* CAMERA, LIGHTS & SHADOWS BIND GROUP */\n\n  /**\n   * Set the {@link cameraLightsBindGroup | camera, lights and shadows bind group}.\n   */\n  setCameraLightsBindGroup() {\n    // now initialize bind group\n    this.cameraLightsBindGroup = new BindGroup(this, {\n      label: this.options.label + ': Camera and lights uniform bind group',\n      bindings: Object.keys(this.bindings)\n        .map((bindingName) => this.bindings[bindingName])\n        .flat(),\n    })\n\n    this.cameraLightsBindGroup.consumers.add(this.uuid)\n  }\n\n  /**\n   * Create the {@link cameraLightsBindGroup | camera, lights and shadows bind group} buffers\n   */\n  setCameraBindGroup() {\n    if (this.cameraLightsBindGroup && this.cameraLightsBindGroup.shouldCreateBindGroup) {\n      this.cameraLightsBindGroup.setIndex(0)\n      this.cameraLightsBindGroup.createBindGroup()\n    }\n  }\n\n  /**\n   * Tell our  {@link cameraLightsBindGroup | camera, lights and shadows bind group} to update.\n   */\n  shouldUpdateCameraLightsBindGroup() {\n    this.#shouldUpdateCameraLightsBindGroup = true\n  }\n\n  /**\n   * Tell our {@link GPUCameraRenderer#bindings.camera | camera buffer binding} that we should update its bindings and update the bind group. Called each time the camera matrices change.\n   */\n  updateCameraBindings() {\n    this.bindings.camera?.shouldUpdateBinding('view')\n    this.bindings.camera?.shouldUpdateBinding('projection')\n    this.bindings.camera?.shouldUpdateBinding('position')\n\n    // tell our bind group to update\n    this.shouldUpdateCameraLightsBindGroup()\n  }\n\n  /**\n   * Update the {@link cameraLightsBindGroup | camera and lights BindGroup}.\n   */\n  updateCameraLightsBindGroup() {\n    if (this.cameraLightsBindGroup && this.#shouldUpdateCameraLightsBindGroup) {\n      this.cameraLightsBindGroup.update()\n      this.#shouldUpdateCameraLightsBindGroup = false\n    }\n  }\n\n  /**\n   * Get all objects ({@link core/renderers/GPURenderer.RenderedMesh | rendered meshes} or {@link core/computePasses/ComputePass.ComputePass | compute passes}) using a given {@link AllowedBindGroups | bind group}, including {@link cameraLightsBindGroup | camera and lights bind group}.\n   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to check\n   */\n  getObjectsByBindGroup(bindGroup: AllowedBindGroups): undefined | SceneObject[] {\n    return this.deviceRenderedObjects.filter((object) => {\n      return [\n        ...object.material.bindGroups,\n        ...object.material.inputsBindGroups,\n        ...object.material.clonedBindGroups,\n        this.cameraLightsBindGroup,\n      ].some((bG) => bG.uuid === bindGroup.uuid)\n    })\n  }\n\n  /**\n   * Set our {@link camera} perspective matrix new parameters (fov, near plane and far plane)\n   * @param parameters - {@link CameraBasePerspectiveOptions | parameters} to use for the perspective\n   */\n  setPerspective({ fov, near, far }: CameraBasePerspectiveOptions = {}) {\n    this.camera?.setPerspective({\n      fov,\n      near,\n      far,\n      width: this.rectBBox.width,\n      height: this.rectBBox.height,\n      pixelRatio: this.pixelRatio,\n    })\n  }\n\n  /**\n   * Set our {@link camera} {@link Camera#position | position}\n   * @param position - new {@link Camera#position | position}\n   */\n  setCameraPosition(position: Vec3 = new Vec3(0, 0, 1)) {\n    this.camera.position.copy(position)\n  }\n\n  /**\n   * Resize our {@link GPUCameraRenderer} and resize our {@link camera} before anything else.\n   * @param rectBBox - the optional new {@link canvas} {@link RectBBox} to set\n   */\n  resize(rectBBox: RectBBox | null = null) {\n    this.setSize(rectBBox)\n\n    this.setPerspective()\n\n    this._onResizeCallback && this._onResizeCallback()\n\n    this.resizeObjects()\n\n    this._onAfterResizeCallback && this._onAfterResizeCallback()\n  }\n\n  /* RENDER */\n\n  /**\n   * {@link setCameraBindGroup | Set the camera bind group if needed} and then call our {@link GPURenderer#render | GPURenderer render method}\n   * @param commandEncoder - current {@link GPUCommandEncoder}\n   */\n  render(commandEncoder: GPUCommandEncoder) {\n    if (!this.ready) return\n\n    this.setCameraBindGroup()\n\n    this.updateCameraLightsBindGroup()\n\n    super.render(commandEncoder)\n\n    if (this.cameraLightsBindGroup) {\n      this.cameraLightsBindGroup.needsPipelineFlush = false\n    }\n  }\n\n  /**\n   * Destroy our {@link GPUCameraRenderer}\n   */\n  destroy() {\n    this.cameraLightsBindGroup?.destroy()\n    this.lights.forEach((light) => light.remove())\n    super.destroy()\n  }\n}\n","import { throwError, throwWarning } from '../../utils/utils'\nimport { generateMips, Renderer } from './utils'\nimport { Sampler } from '../samplers/Sampler'\nimport { PipelineManager } from '../pipelines/PipelineManager'\nimport { SceneObject } from './GPURenderer'\nimport { DOMTexture } from '../textures/DOMTexture'\nimport { AllowedBindGroups } from '../../types/BindGroups'\nimport { Buffer } from '../buffers/Buffer'\nimport { BufferBinding } from '../bindings/BufferBinding'\nimport { IndirectBuffer } from '../../extras/buffers/IndirectBuffer'\n\n/**\n * Base parameters used to create a {@link GPUDeviceManager}\n */\nexport interface GPUDeviceManagerBaseParams {\n  /** Flag indicating whether we're running the production mode or not. If not, useful warnings could be logged to the console */\n  production?: boolean\n  /** Additional options to use when requesting an {@link GPUAdapter | adapter} */\n  adapterOptions?: GPURequestAdapterOptions\n  /** Whether the {@link GPUDeviceManager} should create its own requestAnimationFrame loop to render or not */\n  autoRender?: boolean\n}\n\n/**\n * Parameters used to create a {@link GPUDeviceManager}\n */\nexport interface GPUDeviceManagerParams extends GPUDeviceManagerBaseParams {\n  /** The label of the {@link GPUDeviceManager}, used to create the {@link GPUDevice} for debugging purpose */\n  label?: string\n  /** Callback to run if there's any error while trying to set up the {@link GPUAdapter | adapter} or {@link GPUDevice | device} */\n  onError?: () => void\n  /** Callback to run whenever the {@link GPUDeviceManager#device | device} is lost. */\n  onDeviceLost?: (info?: GPUDeviceLostInfo) => void\n  /** Callback to run whenever the {@link GPUDeviceManager#device | device} has been intentionally destroyed. */\n  onDeviceDestroyed?: (info?: GPUDeviceLostInfo) => void\n}\n\n/** Optional parameters used to set up/init a {@link GPUAdapter} and {@link GPUDevice} */\nexport interface GPUDeviceManagerSetupParams {\n  /** {@link GPUAdapter} to use if set */\n  adapter?: GPUAdapter | null\n  /** {@link GPUDevice} to use if set */\n  device?: GPUDevice | null\n}\n\n/**\n * Responsible for the WebGPU {@link GPUAdapter | adapter} and {@link GPUDevice | device} creations, losing and restoration.\n *\n * It will create all the GPU objects that need a {@link GPUDevice | device} to do so, as well as a {@link PipelineManager}. It will also keep a track of all the {@link Renderer}, {@link AllowedBindGroups | bind groups}, {@link Sampler}, {@link DOMTexture} and {@link GPUBuffer | GPU buffers} created.\n *\n * The {@link GPUDeviceManager} is also responsible for creating the {@link GPUCommandBuffer}, rendering all the {@link Renderer} and then submitting the {@link GPUCommandBuffer} at each {@link GPUDeviceManager#render | render} calls.\n */\nexport class GPUDeviceManager {\n  /** Number of times a {@link GPUDevice} has been created */\n  index: number\n  /** The label of the {@link GPUDeviceManager}, used to create the {@link GPUDevice} for debugging purpose */\n  label: string\n\n  /** Flag indicating whether we're running the production mode or not. If not, useful warnings could be logged to the console */\n  production: boolean\n\n  /** The navigator {@link GPU} object */\n  gpu: GPU | undefined\n  /** The WebGPU {@link GPUAdapter | adapter} used */\n  adapter: GPUAdapter | void\n  /** Additional options to use when requesting an {@link GPUAdapter | adapter} */\n  adapterOptions: GPURequestAdapterOptions\n  /** The WebGPU {@link GPUDevice | device} used */\n  device: GPUDevice | undefined\n  /** Flag indicating whether the {@link GPUDeviceManager} is ready, i.e. its {@link adapter} and {@link device} have been successfully created */\n  ready: boolean\n\n  /** The {@link PipelineManager} used to cache {@link GPURenderPipeline} and {@link GPUComputePipeline} and set them only when appropriate */\n  pipelineManager: PipelineManager\n\n  /** Array of {@link Renderer | renderers} using that {@link GPUDeviceManager} */\n  renderers: Renderer[]\n  /** A Map containing all our created {@link AllowedBindGroups} */\n  bindGroups: Map<string, AllowedBindGroups>\n  /** An array containing all our created {@link GPUBuffer} */\n  buffers: Map<Buffer['uuid'], Buffer>\n  /** A {@link Map} containing all our created {@link IndirectBuffer} */\n  indirectBuffers: Map<IndirectBuffer['uuid'], IndirectBuffer>\n\n  /** A Map containing all our created {@link GPUBindGroupLayout} indexed by cache keys */\n  bindGroupLayouts: Map<string, GPUBindGroupLayout>\n  /** A Map containing all our created {@link BufferBinding} indexed by cache keys */\n  bufferBindings: Map<string, BufferBinding>\n\n  /** An array containing all our created {@link Sampler} */\n  samplers: Sampler[]\n  /** An array containing all our created {@link DOMTexture} */\n  domTextures: DOMTexture[]\n  /** An array to keep track of the newly uploaded {@link DOMTexture} and set their {@link DOMTexture#sourceUploaded | sourceUploaded} property */\n  texturesQueue: DOMTexture[]\n\n  /** Request animation frame callback returned id if used */\n  animationFrameID: null | number\n\n  /** function assigned to the {@link onBeforeRender} callback */\n  _onBeforeRenderCallback: () => void = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onAfterRender} callback */\n  _onAfterRenderCallback: () => void = () => {\n    /* allow empty callback */\n  }\n\n  /** Callback to run if there's any error while trying to set up the {@link GPUAdapter | adapter} or {@link GPUDevice | device} */\n  onError: () => void\n  /** Callback to run whenever the {@link device} is lost. */\n  onDeviceLost: (info?: GPUDeviceLostInfo) => void\n  /** Callback to run whenever the {@link device} has been intentionally destroyed. */\n  onDeviceDestroyed: (info?: GPUDeviceLostInfo) => void\n\n  /**\n   * GPUDeviceManager constructor\n   * @param parameters - {@link GPUDeviceManagerParams | parameters} used to create this {@link GPUDeviceManager}\n   */\n  constructor({\n    label,\n    production = false,\n    adapterOptions = {},\n    autoRender = true,\n    onError = () => {\n      /* allow empty callbacks */\n    },\n    onDeviceLost = (info?: GPUDeviceLostInfo) => {\n      /* allow empty callbacks */\n    },\n    onDeviceDestroyed = (info?: GPUDeviceLostInfo) => {\n      /* allow empty callbacks */\n    },\n  }: GPUDeviceManagerParams = {}) {\n    this.index = 0\n    this.label = label ?? 'GPUDeviceManager instance'\n    this.production = production\n    this.ready = false\n\n    this.adapterOptions = adapterOptions\n\n    this.onError = onError\n    this.onDeviceLost = onDeviceLost\n    this.onDeviceDestroyed = onDeviceDestroyed\n\n    this.gpu = navigator.gpu\n\n    this.setPipelineManager()\n    this.setDeviceObjects()\n\n    if (autoRender) {\n      this.animate()\n    }\n  }\n\n  /**\n   * Set our {@link adapter} and {@link device} if possible.\n   * @param parameters - {@link GPUAdapter} and/or {@link GPUDevice} to use if set.\n   */\n  async setAdapterAndDevice({ adapter = null, device = null }: GPUDeviceManagerSetupParams = {}) {\n    await this.setAdapter(adapter)\n    await this.setDevice(device)\n  }\n\n  /**\n   * Set up our {@link adapter} and {@link device} and all the already created {@link renderers} contexts\n   * @param parameters - {@link GPUAdapter} and/or {@link GPUDevice} to use if set.\n   */\n  async init({ adapter = null, device = null }: GPUDeviceManagerSetupParams = {}) {\n    await this.setAdapterAndDevice({ adapter, device })\n\n    // set context\n    if (this.device) {\n      for (const renderer of this.renderers) {\n        if (!renderer.context) {\n          renderer.setContext()\n        }\n      }\n    }\n  }\n\n  /**\n   * Set our {@link GPUDeviceManager.adapter | adapter} if possible.\n   * The adapter represents a specific GPU. Some devices have multiple GPUs.\n   * @param adapter - {@link GPUAdapter} to use if set.\n   */\n  async setAdapter(adapter: GPUAdapter | null = null) {\n    if (!this.gpu) {\n      this.onError()\n      throwError(\"GPUDeviceManager: WebGPU is not supported on your browser/OS. No 'gpu' object in 'navigator'.\")\n    }\n\n    if (adapter) {\n      this.adapter = adapter\n    } else {\n      try {\n        this.adapter = await this.gpu?.requestAdapter(this.adapterOptions)\n\n        if (!this.adapter) {\n          this.onError()\n          throwError(\"GPUDeviceManager: WebGPU is not supported on your browser/OS. 'requestAdapter' failed.\")\n        }\n      } catch (e) {\n        this.onError()\n        throwError('GPUDeviceManager: ' + e.message)\n      }\n    }\n  }\n\n  /**\n   * Set our {@link GPUDeviceManager.device | device}.\n   * @param device - {@link GPUDevice} to use if set.\n   */\n  async setDevice(device: GPUDevice | null = null) {\n    if (device) {\n      this.device = device\n      this.ready = true\n      this.index++\n    } else {\n      try {\n        const requiredFeatures = [] as GPUFeatureName[]\n\n        if ((this.adapter as GPUAdapter).features.has('float32-filterable')) {\n          requiredFeatures.push('float32-filterable')\n        }\n\n        this.device = await (this.adapter as GPUAdapter)?.requestDevice({\n          label: this.label + ' ' + this.index,\n          requiredFeatures,\n        })\n\n        if (this.device) {\n          this.ready = true\n          this.index++\n        }\n      } catch (error) {\n        this.onError()\n        throwError(`${this.label}: WebGPU is not supported on your browser/OS. 'requestDevice' failed: ${error}`)\n      }\n    }\n\n    this.device?.lost.then((info) => {\n      throwWarning(`${this.label}: WebGPU device was lost: ${info.message}`)\n\n      this.loseDevice()\n\n      // do not call onDeviceLost event if the device was intentionally destroyed\n      // call onDeviceDestroyed instead\n      if (info.reason !== 'destroyed') {\n        this.onDeviceLost(info)\n      } else {\n        this.onDeviceDestroyed(info)\n      }\n    })\n  }\n\n  /**\n   * Set our {@link pipelineManager | pipeline manager}\n   */\n  setPipelineManager() {\n    this.pipelineManager = new PipelineManager()\n  }\n\n  /**\n   * Called when the {@link device} is lost.\n   * Reset all our renderers\n   */\n  loseDevice() {\n    this.ready = false\n\n    this.pipelineManager.resetCurrentPipeline()\n\n    // first clean all samplers\n    this.samplers.forEach((sampler) => (sampler.sampler = null))\n\n    this.renderers.forEach((renderer) => renderer.loseContext())\n\n    this.bindGroupLayouts.clear()\n\n    // reset the buffers array, it would eventually be repopulated while restoring the device\n    this.buffers.clear()\n  }\n\n  /**\n   * Called when the {@link device} should be restored.\n   * Restore all our renderers.\n   * @param parameters - {@link GPUAdapter} and/or {@link GPUDevice} to use if set.\n   */\n  async restoreDevice({ adapter = null, device = null }: GPUDeviceManagerSetupParams = {}) {\n    await this.setAdapterAndDevice({ adapter, device })\n\n    if (this.device) {\n      // now recreate all the samplers\n      this.samplers.forEach((sampler) => {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { type, ...samplerOptions } = sampler.options\n        sampler.sampler = this.device.createSampler({\n          label: sampler.label,\n          ...samplerOptions,\n        })\n      })\n\n      // recreate indirect buffers\n      this.indirectBuffers.forEach((indirectBuffer) => indirectBuffer.create())\n\n      // then the renderers\n      this.renderers.forEach((renderer) => renderer.restoreContext())\n    }\n  }\n\n  /**\n   * Set all objects arrays that we'll keep track of\n   */\n  setDeviceObjects() {\n    // keep track of renderers, bind groups, buffers, samplers, textures\n    this.renderers = []\n    this.bindGroups = new Map()\n    this.buffers = new Map()\n    this.indirectBuffers = new Map()\n    this.bindGroupLayouts = new Map()\n    this.bufferBindings = new Map()\n    this.samplers = []\n    this.domTextures = []\n\n    // keep track of all textures that are being uploaded\n    this.texturesQueue = []\n  }\n\n  /**\n   * Add a {@link Renderer} to our {@link renderers} array\n   * @param renderer - {@link Renderer} to add\n   */\n  addRenderer(renderer: Renderer) {\n    this.renderers.push(renderer)\n  }\n\n  /**\n   * Remove a {@link Renderer} from our {@link renderers} array\n   * @param renderer - {@link Renderer} to remove\n   */\n  removeRenderer(renderer: Renderer) {\n    this.renderers = this.renderers.filter((r) => r.uuid !== renderer.uuid)\n  }\n\n  /**\n   * Get all the rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes) created by this {@link GPUDeviceManager}\n   * @readonly\n   */\n  get deviceRenderedObjects(): SceneObject[] {\n    return this.renderers.map((renderer) => renderer.renderedObjects).flat()\n  }\n\n  /**\n   * Add a {@link AllowedBindGroups | bind group} to our {@link bindGroups | bind groups array}\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to add\n   */\n  addBindGroup(bindGroup: AllowedBindGroups) {\n    this.bindGroups.set(bindGroup.uuid, bindGroup)\n  }\n\n  /**\n   * Remove a {@link AllowedBindGroups | bind group} from our {@link bindGroups | bind groups array}\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to remove\n   */\n  removeBindGroup(bindGroup: AllowedBindGroups) {\n    this.bindGroups.delete(bindGroup.uuid)\n  }\n\n  /**\n   * Add a {@link GPUBuffer} to our our {@link buffers} array\n   * @param buffer - {@link Buffer} to add\n   */\n  addBuffer(buffer: Buffer) {\n    this.buffers.set(buffer.uuid, buffer)\n  }\n\n  /**\n   * Remove a {@link Buffer} from our {@link buffers} Map\n   * @param buffer - {@link Buffer} to remove\n   */\n  removeBuffer(buffer: Buffer) {\n    this.buffers.delete(buffer?.uuid)\n  }\n\n  /**\n   * Add a {@link Sampler} to our {@link samplers} array\n   * @param sampler - {@link Sampler} to add\n   */\n  addSampler(sampler: Sampler) {\n    this.samplers.push(sampler)\n  }\n\n  /**\n   * Remove a {@link Sampler} from our {@link samplers} array\n   * @param sampler - {@link Sampler} to remove\n   */\n  removeSampler(sampler: Sampler) {\n    this.samplers = this.samplers.filter((s) => s.uuid !== sampler.uuid)\n  }\n\n  /**\n   * Add a {@link DOMTexture} to our {@link domTextures} array\n   * @param texture - {@link DOMTexture} to add\n   */\n  addDOMTexture(texture: DOMTexture) {\n    this.domTextures.push(texture)\n  }\n\n  /**\n   * Upload a {@link DOMTexture#texture | texture} to the GPU\n   * @param texture - {@link DOMTexture} class object with the {@link DOMTexture#texture | texture} to upload\n   */\n  uploadTexture(texture: DOMTexture) {\n    if (texture.source) {\n      try {\n        this.device?.queue.copyExternalImageToTexture(\n          {\n            source: texture.source as GPUImageCopyExternalImageSource,\n            flipY: texture.options.flipY,\n          } as GPUImageCopyExternalImage,\n          { texture: texture.texture as GPUTexture, premultipliedAlpha: texture.options.premultipliedAlpha },\n          { width: texture.size.width, height: texture.size.height }\n        )\n\n        if ((texture.texture as GPUTexture).mipLevelCount > 1) {\n          generateMips(this.device, texture.texture as GPUTexture)\n        }\n\n        // add to our textures queue array to track when it has been uploaded\n        this.texturesQueue.push(texture)\n      } catch ({ message }) {\n        throwError(`GPUDeviceManager: could not upload texture: ${texture.options.name} because: ${message}`)\n      }\n    } else {\n      this.device?.queue.writeTexture(\n        { texture: texture.texture as GPUTexture },\n        new Uint8Array(texture.options.placeholderColor),\n        { bytesPerRow: texture.size.width * 4 },\n        { width: texture.size.width, height: texture.size.height }\n      )\n    }\n  }\n\n  /**\n   * Remove a {@link DOMTexture} from our {@link domTextures} array\n   * @param texture - {@link DOMTexture} to remove\n   */\n  removeDOMTexture(texture: DOMTexture) {\n    this.domTextures = this.domTextures.filter((t) => t.uuid !== texture.uuid)\n  }\n\n  /* RENDER */\n\n  /**\n   * Create a requestAnimationFrame loop and run it\n   */\n  animate() {\n    this.render()\n    this.animationFrameID = requestAnimationFrame(this.animate.bind(this))\n  }\n\n  /**\n   * Called each frame before rendering\n   * @param callback - callback to run at each render\n   * @returns - our {@link GPUDeviceManager}\n   */\n  onBeforeRender(callback: () => void): GPUDeviceManager {\n    if (callback) {\n      this._onBeforeRenderCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Called each frame after rendering\n   * @param callback - callback to run at each render\n   * @returns - our {@link GPUDeviceManager}\n   */\n  onAfterRender(callback: () => void): GPUDeviceManager {\n    if (callback) {\n      this._onAfterRenderCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Render everything:\n   * - call all our {@link renderers} {@link core/renderers/GPURenderer.GPURenderer#onBeforeCommandEncoder | onBeforeCommandEncoder} callbacks\n   * - create a {@link GPUCommandEncoder}\n   * - render all our {@link renderers}\n   * - submit our {@link GPUCommandBuffer}\n   * - upload {@link DOMTexture#texture | DOMTexture textures} that do not have a parentMesh\n   * - empty our {@link texturesQueue} array\n   * - call all our {@link renderers} {@link core/renderers/GPURenderer.GPURenderer#onAfterCommandEncoder | onAfterCommandEncoder} callbacks\n   */\n  render() {\n    if (!this.ready) return\n\n    this._onBeforeRenderCallback && this._onBeforeRenderCallback()\n\n    for (const renderer of this.renderers) {\n      if (renderer.shouldRender) renderer.onBeforeCommandEncoder()\n    }\n\n    const commandEncoder = this.device?.createCommandEncoder({ label: this.label + ' command encoder' })\n    !this.production && commandEncoder.pushDebugGroup(this.label + ' command encoder: main render loop')\n\n    this.renderers.forEach((renderer) => renderer.render(commandEncoder))\n\n    !this.production && commandEncoder.popDebugGroup()\n    const commandBuffer = commandEncoder.finish()\n    this.device?.queue.submit([commandBuffer])\n\n    // handle textures\n    // first check if media textures without parentMesh need to be uploaded\n    this.domTextures\n      .filter((texture) => !texture.parentMesh && texture.sourceLoaded && !texture.sourceUploaded)\n      .forEach((texture) => this.uploadTexture(texture))\n\n    // no need to use device.queue.onSubmittedWorkDone\n    // as [Kai Ninomiya](https://github.com/kainino0x) stated:\n    // \"Anything you submit() after the copyExternalImageToTexture() is guaranteed to see the result of that call.\"\n    for (const texture of this.texturesQueue) {\n      texture.sourceUploaded = true\n    }\n\n    // clear texture queue\n    this.texturesQueue = []\n\n    for (const renderer of this.renderers) {\n      if (renderer.shouldRender) renderer.onAfterCommandEncoder()\n    }\n\n    this._onAfterRenderCallback && this._onAfterRenderCallback()\n  }\n\n  /**\n   * Destroy the {@link GPUDeviceManager} and its {@link renderers}\n   */\n  destroy() {\n    if (this.animationFrameID) {\n      cancelAnimationFrame(this.animationFrameID)\n    }\n\n    this.animationFrameID = null\n\n    this.device?.destroy()\n    this.device = null\n\n    this.renderers.forEach((renderer) => renderer.destroy())\n\n    // now clear everything that could have been left behind\n    this.bindGroups.forEach((bindGroup) => bindGroup.destroy())\n    this.buffers.forEach((buffer) => buffer?.destroy())\n    this.indirectBuffers.forEach((indirectBuffer) => indirectBuffer.destroy())\n\n    this.domTextures.forEach((texture) => texture.destroy())\n\n    this.setDeviceObjects()\n  }\n}\n","import { isRenderer, Renderer } from '../../core/renderers/utils'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { Geometry } from '../../core/geometries/Geometry'\nimport { IndexedGeometry } from '../../core/geometries/IndexedGeometry'\nimport { Buffer } from '../../core/buffers/Buffer'\nimport { generateUUID } from '../../utils/utils'\n\n/** Options used to create a {@link IndirectBuffer}. */\nexport interface IndirectBufferOptions {\n  /** Label of the {@link IndirectBuffer}. */\n  label: string\n  /** Array of {@link Geometry} to use with this {@link IndirectBuffer}. */\n  geometries: Array<Geometry | IndexedGeometry>\n  /** Number of elements each {@link Geometry} attributes should take in the {@link IndirectBuffer}. Default to `5` to handle both {@link Geometry} and {@link IndexedGeometry}. */\n  minEntrySize: number\n}\n\n/** Parameters used to create a {@link IndirectBuffer}. */\nexport interface IndirectBufferParams extends Partial<IndirectBufferOptions> {}\n\n// since we don't know if we're gonna have indexed or non indexed geometry\n// prepare for worse and just use a size of 5\nconst indirectBufferEntrySize = 5\n\n/**\n * Utility to handle indirect drawing.\n *\n * Create a {@link buffer}, fill it with all the added {@link geometries} attributes and tell all the {@link geometries} to start using this {@link buffer} for indirect drawing.\n *\n * @example\n * ```javascript\n * const geometry = new Geometry()\n *\n * // assuming 'renderer' is a valid renderer or curtains instance\n * const indirectBuffer = new IndirectBuffer(renderer, {\n *   label: 'Custom indirect buffer',\n *   geometries: [geometry]\n * })\n *\n * // if every geometries have been added, create the buffer.\n * indirectBuffer.create()\n *\n * // from now on, any Mesh using 'geometry' as geometry will be rendered using indirect drawing.\n * ```\n */\nexport class IndirectBuffer {\n  /** The type of the {@link IndirectBuffer}. */\n  type: string\n  /** The {@link Renderer} used to create this {@link IndirectBuffer}. */\n  renderer: Renderer\n  /** The universal unique id of this {@link IndirectBuffer}. */\n  readonly uuid: string\n\n  /** Options used to create this {@link IndirectBuffer}. */\n  options: IndirectBufferOptions\n\n  /** {@link Map} of {@link Geometry} or {@link IndexedGeometry} that will use this {@link IndirectBuffer}. */\n  geometries: Map<Geometry['uuid'], Geometry | IndexedGeometry>\n\n  /** The {@link Buffer} that will hold the {@link geometries} attributes. */\n  buffer: Buffer | null\n\n  /**\n   * IndirectBuffer constructor.\n   * @param renderer - {@link Renderer} or {@link GPUCurtains} class object used to create this {@link IndirectBuffer}.\n   * @param parameters - {@link IndirectBufferParams | parameters} used to create this {@link IndirectBuffer}.\n   */\n  constructor(\n    renderer: Renderer | GPUCurtains,\n    { label = 'Indirect buffer', geometries = [], minEntrySize = indirectBufferEntrySize } = {} as IndirectBufferParams\n  ) {\n    this.type = 'IndirectBuffer'\n\n    renderer = isRenderer(renderer, this.type)\n\n    this.renderer = renderer\n\n    this.uuid = generateUUID()\n\n    this.options = {\n      label,\n      geometries,\n      minEntrySize,\n    }\n\n    this.geometries = new Map()\n    this.buffer = null\n\n    this.addGeometries(geometries)\n\n    // add to renderer\n    this.renderer.indirectBuffers.set(this.uuid, this)\n  }\n\n  /**\n   * Get the number of unique {@link Geometry} and {@link IndexedGeometry} added to this {@link IndirectBuffer}.\n   * @returns - Number of unique {@link Geometry} and {@link IndexedGeometry} added to this {@link IndirectBuffer}.\n   * @readonly\n   */\n  get size(): number {\n    return this.geometries.size\n  }\n\n  /**\n   * Add multiple {@link Geometry} or {@link IndexedGeometry} to this {@link IndirectBuffer}.\n   * @param geometries - Array of {@link Geometry} or {@link IndexedGeometry} to add to this {@link IndirectBuffer}.\n   */\n  addGeometries(geometries: IndirectBufferOptions['geometries'] = []) {\n    geometries.forEach((geometry) => this.addGeometry(geometry))\n  }\n\n  /**\n   * Add a {@link Geometry} or {@link IndexedGeometry} to this {@link IndirectBuffer}.\n   * @param geometry - A {@link Geometry} or {@link IndexedGeometry} to add to this {@link IndirectBuffer}.\n   */\n  addGeometry(geometry: Geometry | IndexedGeometry) {\n    this.geometries.set(geometry.uuid, geometry)\n  }\n\n  /**\n   * Get the byte offset in the {@link buffer} at a given index.\n   * @param index - Index to get the byte offset from.\n   * @returns - Byte offset in the {@link buffer} at a given index.\n   */\n  getByteOffsetAtIndex(index = 0) {\n    return index * this.options.minEntrySize * Uint32Array.BYTES_PER_ELEMENT\n  }\n\n  /**\n   * Create the {@link buffer} (or destroy it if it already exists) with the right size, create its {@link GPUBuffer} in a mapped state, add all {@link geometries} attributes to the mapped buffer and tell the {@link geometries} to use this {@link IndirectBuffer}.\n   */\n  create() {\n    const size = this.getByteOffsetAtIndex(this.geometries.size)\n\n    if (this.buffer) {\n      this.buffer.destroy()\n      this.buffer.options.size = size\n    } else {\n      this.buffer = new Buffer({\n        label: this.options.label,\n        size,\n        usage: ['copyDst', 'indirect', 'storage'],\n        mappedAtCreation: true,\n      })\n    }\n\n    this.buffer.consumers.add(this.uuid)\n    this.buffer.createBuffer(this.renderer)\n\n    const indirectMappedBuffer = new Uint32Array(this.buffer.GPUBuffer.getMappedRange())\n\n    let offset = 0\n    this.geometries.forEach((geometry) => {\n      this.#addGeometryToIndirectMappedBuffer(geometry, indirectMappedBuffer, offset * this.options.minEntrySize)\n\n      geometry.useIndirectBuffer({ buffer: this.buffer, offset: this.getByteOffsetAtIndex(offset) })\n      offset++\n    })\n\n    this.buffer.GPUBuffer.unmap()\n  }\n\n  /**\n   * Add a {@link Geometry} or {@link IndexedGeometry} attributes to the {@link buffer} mapped array buffer.\n   * @param geometry - {@link Geometry} or {@link IndexedGeometry} to add the attributes from\n   * @param mappedBuffer - The {@link buffer} mapped array buffer\n   * @param index - Index in the {@link buffer} mapped array buffer at which to add the attributes.\n   * @private\n   */\n  #addGeometryToIndirectMappedBuffer(geometry: Geometry | IndexedGeometry, mappedBuffer: Uint32Array, index = 0) {\n    if ('indexBuffer' in geometry && geometry.indexBuffer) {\n      mappedBuffer[index] = geometry.indexBuffer.bufferLength\n      mappedBuffer[index + 1] = geometry.instancesCount\n      mappedBuffer[index + 2] = 0 // First Index\n      mappedBuffer[index + 3] = 0 // Base Vertex\n      mappedBuffer[index + 4] = 0 // First Instance\n    } else {\n      mappedBuffer[index] = geometry.verticesCount\n      mappedBuffer[index + 1] = geometry.instancesCount\n      mappedBuffer[index + 2] = 0 // First Vertex\n      mappedBuffer[index + 3] = 0 // First Instance\n      mappedBuffer[index + 4] = 0 // Pad for indexed geometries\n    }\n  }\n\n  /**\n   * Destroy this {@link IndirectBuffer}. Reset all {@link geometries} {@link Geometry#indirectDraw | indirectDraw} properties and destroy the {@link Buffer}.\n   */\n  destroy() {\n    // remove from renderer\n    this.renderer.removeBuffer(this.buffer)\n    this.renderer.indirectBuffers.delete(this.uuid)\n\n    this.geometries.forEach((geometry) => (geometry.indirectDraw = null))\n    this.buffer?.destroy()\n    this.buffer = null\n    this.geometries = null\n  }\n}\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { ProjectedMesh, RenderedMesh, SceneStackedMesh } from '../renderers/GPURenderer'\r\nimport { generateUUID, throwWarning } from '../../utils/utils'\r\nimport { BufferBinding } from '../bindings/BufferBinding'\r\nimport { BufferUsageKeys } from '../buffers/utils'\r\nimport { RenderPass } from './RenderPass'\r\nimport { ShaderPass } from './ShaderPass'\r\nimport { PingPongPlane } from '../../extras/meshes/PingPongPlane'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { IndirectBuffer } from '../../extras/buffers/IndirectBuffer'\r\n\r\nlet bundleIndex = 0\r\n\r\n/** Options used to create a {@link RenderBundle}. */\r\nexport interface RenderBundleOptions {\r\n  /** The label of the {@link RenderBundle}, sent to various GPU objects for debugging purpose. */\r\n  label: string\r\n  /** The {@link RenderPass} used to describe the {@link RenderBundle#descriptor | RenderBundle encoder descriptor}. Default to the first added mesh output target if not set (usually the {@link Renderer#renderPass | renderer main render pass} or {@link Renderer#postProcessingPass | renderer post processing pass}). */\r\n  renderPass: RenderPass\r\n  /** Whether the {@link RenderBundle} should handle all its child {@link core/renderers/GPURenderer.ProjectedMesh | meshes} transformation matrices with a single {@link GPUBuffer}. Can greatly improve performance when dealing with a lot of moving objects, but the {@link size} parameter has to be set upon creation and should not change afterwards. Default to `false`. */\r\n  useBuffer: boolean\r\n  /** Fixed size (number of meshes) of the {@link RenderBundle}. Mostly useful when using the {@link useBuffer} parameter. */\r\n  size: number\r\n  /** Whether this {@link RenderBundle} should create its own {@link IndirectBuffer} and add its {@link RenderBundle#meshes | meshes} geometries to it. Default to `false`. */\r\n  useIndirectDraw: boolean\r\n}\r\n\r\n/** Parameters used to created a {@link RenderBundle}. */\r\nexport interface RenderBundleParams extends Partial<RenderBundleOptions> {\r\n  /** Controls the order in which this {@link RenderBundle} should be rendered by our {@link core/scenes/Scene.Scene | Scene}. */\r\n  renderOrder?: number\r\n  /** Whether this {@link RenderBundle} should be added to our {@link core/scenes/Scene.Scene | Scene} transparent stack (drawn after the opaque stack). */\r\n  transparent?: boolean\r\n  /** Whether this {@link RenderBundle} content should be drawn. */\r\n  visible?: boolean\r\n}\r\n\r\n/**\r\n * Used to create a {@link GPURenderBundle} and its associated {@link GPURenderBundleEncoder}.\r\n *\r\n * Render bundle are a powerful tool that can significantly reduce the amount of CPU time spent issuing repeated rendered commands. In other words, it can be used to draw given set of meshes that share the same {@link RenderPass | output target} faster (up to 1.5x in some cases) and with less CPU overhead.\r\n *\r\n * The main drawback is that {@link RenderBundle} works best when the number of meshes drawn is known in advance and is not subject to change.\r\n *\r\n * @example\r\n * ```javascript\r\n * const nbMeshes = 100\r\n *\r\n * // assuming 'renderer' is a valid renderer or curtains instance\r\n * const renderBundle = new RenderBundle(renderer, {\r\n *   label: 'Custom render bundle',\r\n *   size: nbMeshes,\r\n *   useBuffer: true, // use a single buffer to handle all 100 meshes transformations\r\n * })\r\n *\r\n * for (let i = 0; i < nbMeshes; i++) {\r\n *   const mesh = new Mesh(renderer, {\r\n *     label: 'Cube ' + i,\r\n *     geometry: new BoxGeometry(),\r\n *     renderBundle,\r\n *   })\r\n *\r\n *   mesh.onBeforeRender(() => {\r\n *     mesh.rotation.y += 0.02\r\n *   })\r\n * }\r\n * ```\r\n */\r\nexport class RenderBundle {\r\n  /** The type of the {@link RenderBundle}. */\r\n  type: string\r\n  /** The universal unique id of this {@link RenderBundle}. */\r\n  readonly uuid: string\r\n  /** Index of this {@link RenderBundle}, i.e. creation order. */\r\n  readonly index: number\r\n\r\n  /** The {@link Renderer} used to create this {@link RenderBundle}. */\r\n  renderer: Renderer\r\n\r\n  /** Options used to create this {@link RenderBundle}. */\r\n  options: RenderBundleOptions\r\n\r\n  /** Controls the order in which this {@link RenderBundle} should be rendered by our {@link core/scenes/Scene.Scene | Scene}. */\r\n  renderOrder: number\r\n  /** Whether this {@link RenderBundle} should be added to our {@link core/scenes/Scene.Scene | Scene} transparent stack (drawn after the opaque stack). */\r\n  transparent: boolean | null\r\n  /** Whether this {@link RenderBundle} content should be drawn. */\r\n  visible: boolean\r\n\r\n  /** @ignore */\r\n  // whether this render bundle should be added to the 'projected' or 'unProjected' Scene stacks.\r\n  #useProjection: boolean | null\r\n\r\n  /** Optional {@link BufferBinding} created if the {@link RenderBundleParams#useBuffer | useBuffer} parameter has been set to `true` and if the {@link meshes} drawn actually have transformation matrices. This {@link BufferBinding} will act as a parent buffer, and the {@link meshes} `matrices` binding will use a {@link BufferBinding} with this {@link binding} as parent and the correct `offset`. */\r\n  binding: BufferBinding | null\r\n\r\n  /** Optional internal {@link IndirectBuffer} containing all {@link meshes} unique geometries to render them using indirect drawing. */\r\n  indirectBuffer: IndirectBuffer | null\r\n\r\n  /** The {@link GPUDevice.createRenderBundleEncoder().descriptor | GPURenderBundleEncoderDescriptor} created by this {@link RenderBundle}, based on the {@link RenderPass} passed as parameters. */\r\n  descriptor: GPURenderBundleEncoderDescriptor\r\n  /** The {@link GPURenderBundleEncoder} created by this {@link RenderBundle}. */\r\n  encoder: GPURenderBundleEncoder | null\r\n  /** The {@link GPURenderBundle} created by this {@link RenderBundle}. */\r\n  bundle: GPURenderBundle | null\r\n\r\n  /** A {@link Map} of {@link RenderedMesh | mesh} drawn by this {@link RenderBundle}. */\r\n  meshes: Map<RenderedMesh['uuid'], RenderedMesh>\r\n\r\n  /** @ignore */\r\n  #ready: boolean\r\n\r\n  /**\r\n   * RenderBundle constructor\r\n   * @param renderer - {@link Renderer} or {@link GPUCurtains} class object used to create this {@link RenderBundle}.\r\n   * @param parameters - {@link RenderBundleParams | parameters} use to create this {@link RenderBundle}.\r\n   */\r\n  constructor(\r\n    renderer: Renderer | GPUCurtains,\r\n    {\r\n      label,\r\n      renderPass = null,\r\n      renderOrder = 0,\r\n      transparent = null,\r\n      visible = true,\r\n      size = 0,\r\n      useBuffer = false,\r\n      useIndirectDraw = false,\r\n    } = {} as RenderBundleParams\r\n  ) {\r\n    this.type = 'RenderBundle'\r\n\r\n    renderer = isRenderer(renderer, this.type)\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    Object.defineProperty(this as RenderBundle, 'index', { value: bundleIndex++ })\r\n    this.renderOrder = renderOrder\r\n\r\n    this.transparent = transparent\r\n    this.visible = visible\r\n\r\n    label = label ?? this.type + this.index\r\n\r\n    this.options = {\r\n      label,\r\n      renderPass,\r\n      useBuffer,\r\n      size,\r\n      useIndirectDraw,\r\n    }\r\n\r\n    this.meshes = new Map()\r\n\r\n    this.encoder = null\r\n    this.bundle = null\r\n    this.#ready = false\r\n\r\n    this.binding = null\r\n    this.indirectBuffer = null\r\n\r\n    this.setRenderer(renderer)\r\n\r\n    if (this.options.useIndirectDraw) {\r\n      this.indirectBuffer = new IndirectBuffer(this.renderer)\r\n    }\r\n\r\n    if (this.options.useBuffer) {\r\n      this.#useProjection = true\r\n\r\n      if (this.options.size !== 0) {\r\n        this.#setBinding()\r\n      } else {\r\n        this.options.useBuffer = false\r\n\r\n        if (!this.renderer.production) {\r\n          throwWarning(\r\n            `${this.options.label} (${this.type}): Cannot use a single transformation buffer if the size parameter has not been set upon creation.`\r\n          )\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the {@link RenderBundle} {@link RenderBundle.renderer | renderer} and eventually remove/add to the {@link core/scenes/Scene.Scene | Scene}.\r\n   * @param renderer - new {@link Renderer} to use.\r\n   */\r\n  setRenderer(renderer: Renderer) {\r\n    if (this.renderer) {\r\n      this.removeFromScene()\r\n      this.renderer.renderBundles.delete(this.uuid)\r\n    }\r\n\r\n    this.renderer = renderer\r\n    this.renderer.renderBundles.set(this.uuid, this)\r\n\r\n    if (this.meshes.size >= 1) {\r\n      this.addToScene()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add our {@link RenderBundle} to the {@link core/scenes/Scene.Scene | Scene}.\r\n   * Once we have at least one mesh in our {@link meshes} Map, we can add the {@link RenderBundle} to the {@link core/scenes/Scene.Scene | Scene} at the right place.\r\n   */\r\n  addToScene() {\r\n    const firstEntry = this.meshes.entries().next()\r\n\r\n    if (firstEntry && firstEntry.value && firstEntry.value.length && firstEntry.value[1]) {\r\n      const mesh = firstEntry.value[1]\r\n\r\n      // first mesh of the render bundle?\r\n      const isTransparent = !!mesh.transparent\r\n\r\n      if (this.transparent === null) {\r\n        this.transparent = isTransparent\r\n      }\r\n\r\n      if (mesh.constructor.name !== 'ShaderPass' && mesh.constructor.name !== 'PingPongPlane') {\r\n        const { useProjection } = mesh.material.options.rendering\r\n\r\n        if (this.useProjection === null) {\r\n          this.useProjection = useProjection\r\n        }\r\n\r\n        // add the render bundle to the correct stack\r\n        const projectionStack = this.renderer.scene.getMeshProjectionStack(mesh)\r\n        this.renderer.scene.addRenderBundle(this, projectionStack)\r\n      } else {\r\n        // force render bundle size to 1\r\n        this.size = 1\r\n        mesh.renderOrder = this.renderOrder\r\n        this.useProjection = false\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove our {@link RenderBundle} from the {@link core/scenes/Scene.Scene | Scene}.\r\n   */\r\n  removeFromScene() {\r\n    this.renderer.scene.removeRenderBundle(this)\r\n  }\r\n\r\n  /**\r\n   * Get whether our {@link RenderBundle} handles {@link core/renderers/GPURenderer.ProjectedMesh | projected meshes} or not (useful to know in which {@link core/scenes/Scene.Scene | Scene} stack it has been added.\r\n   * @readonly\r\n   * @returns - Whether our {@link RenderBundle} handles {@link core/renderers/GPURenderer.ProjectedMesh | projected meshes} or not.\r\n   */\r\n  get useProjection(): boolean | null {\r\n    return this.#useProjection\r\n  }\r\n\r\n  /**\r\n   * Set whether our {@link RenderBundle} handles {@link core/renderers/GPURenderer.ProjectedMesh | projected meshes} or not.\r\n   * @param value - New projection value.\r\n   */\r\n  set useProjection(value: boolean) {\r\n    this.#useProjection = value\r\n  }\r\n\r\n  /**\r\n   * Set the {@link binding} and patches its array and buffer size if needed.\r\n   * @private\r\n   */\r\n  #setBinding() {\r\n    this.binding = new BufferBinding({\r\n      label: this.options.label + ' matrices',\r\n      name: 'matrices',\r\n      struct: {\r\n        model: {\r\n          type: 'array<mat4x4f>',\r\n          value: new Float32Array(16 * this.options.size),\r\n        },\r\n        modelView: {\r\n          type: 'array<mat4x4f>',\r\n          value: new Float32Array(16 * this.options.size),\r\n        },\r\n        normal: {\r\n          type: 'array<mat3x3f>',\r\n          value: new Float32Array(12 * this.options.size),\r\n        },\r\n      },\r\n    })\r\n\r\n    this.#patchBindingOffset(this.options.size)\r\n  }\r\n\r\n  /**\r\n   * Path the {@link binding} array and buffer size with the minimum {@link Renderer#device | device} buffer offset alignment.\r\n   * @param size - new {@link binding} size to use.\r\n   * @private\r\n   */\r\n  #patchBindingOffset(size: number) {\r\n    const minOffset = this.renderer.device.limits.minUniformBufferOffsetAlignment\r\n\r\n    // patch minimum uniform buffer offset\r\n    if (this.binding.arrayBufferSize < size * minOffset) {\r\n      this.binding.arrayBufferSize = size * minOffset\r\n      this.binding.arrayBuffer = new ArrayBuffer(this.binding.arrayBufferSize)\r\n      this.binding.buffer.size = this.binding.arrayBuffer.byteLength\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called each time the {@link RenderBundle} size has actually changed.\r\n   * @param newSize - new {@link RenderBundle} size to set.\r\n   * @private\r\n   */\r\n  #onSizeChanged(newSize: number) {\r\n    if (newSize > this.options.size && this.binding) {\r\n      this.#patchBindingOffset(newSize)\r\n\r\n      if (this.binding.buffer.GPUBuffer) {\r\n        this.binding.buffer.GPUBuffer.destroy()\r\n\r\n        this.binding.buffer.createBuffer(this.renderer, {\r\n          label: this.binding.options.label,\r\n          usage: [\r\n            ...(['copySrc', 'copyDst', this.binding.bindingType] as BufferUsageKeys[]),\r\n            ...this.binding.options.usage,\r\n          ],\r\n        })\r\n\r\n        let offset = 0\r\n        this.meshes.forEach((mesh: ProjectedMesh) => {\r\n          mesh.patchRenderBundleBinding(offset)\r\n\r\n          offset++\r\n        })\r\n\r\n        this.binding.shouldUpdate = true\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the new {@link RenderBundle} size. Should be used before adding or removing {@link meshes} to the {@link RenderBundle} if the {@link bundle} has already been created (especially if it's using a {@link binding}).\r\n   * @param value - New size to set.\r\n   */\r\n  set size(value: number) {\r\n    if (value !== this.options.size) {\r\n      if (this.ready && !this.renderer.production) {\r\n        throwWarning(\r\n          `${this.options.label} (${this.type}): The content of a render bundle is meant to be static. You should not change its size after it has been created.`\r\n        )\r\n      }\r\n\r\n      this.ready = false\r\n\r\n      this.#onSizeChanged(value)\r\n\r\n      this.options.size = value\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get whether our {@link RenderBundle} is ready.\r\n   * @readonly\r\n   * @returns - Whether our {@link RenderBundle} is ready.\r\n   */\r\n  get ready(): boolean {\r\n    return this.#ready\r\n  }\r\n\r\n  /**\r\n   * Set whether our {@link RenderBundle} is ready and encode it if needed.\r\n   * @param value - New ready state.\r\n   */\r\n  set ready(value: boolean) {\r\n    if (value && !this.ready) {\r\n      // set the new size\r\n      // can eventually resize the buffer\r\n      this.size = this.meshes.size\r\n\r\n      if (this.options.useIndirectDraw) {\r\n        this.meshes.forEach((mesh) => {\r\n          this.indirectBuffer.addGeometry(mesh.geometry)\r\n        })\r\n\r\n        this.indirectBuffer.create()\r\n      }\r\n\r\n      // finally ready\r\n      this.#encodeRenderCommands()\r\n    } else if (!value && this.ready) {\r\n      // invalidate\r\n      this.bundle = null\r\n    }\r\n\r\n    this.#ready = value\r\n  }\r\n\r\n  /**\r\n   * Called by the {@link core/scenes/Scene.Scene | Scene} to eventually add a {@link RenderedMesh | mesh} to this {@link RenderBundle}. Can set the {@link RenderBundleOptions#renderPass | render pass} if needed. If the {@link RenderBundleOptions#renderPass | render pass} is already set and the mesh output {@link RenderPass} does not match, it won't be added.\r\n   * @param mesh - {@link RenderedMesh | Mesh} to eventually add.\r\n   * @param outputPass - The mesh output {@link RenderPass}.\r\n   */\r\n  addMesh(mesh: RenderedMesh, outputPass: RenderPass) {\r\n    // check for correct render pass first?\r\n    if (!this.options.renderPass) {\r\n      this.options.renderPass = outputPass\r\n    } else if (outputPass.uuid !== this.options.renderPass.uuid) {\r\n      throwWarning(\r\n        `${this.options.label} (${this.type}): Cannot add Mesh ${mesh.options.label} to this render bundle because the output render passes do not match.`\r\n      )\r\n\r\n      mesh.renderBundle = null\r\n\r\n      return\r\n    }\r\n\r\n    if (this.ready && !this.renderer.production) {\r\n      throwWarning(\r\n        `${this.options.label} (${this.type}): The content of a render bundle is meant to be static. You should not add meshes to it after it has been created (mesh added: ${mesh.options.label}).`\r\n      )\r\n    }\r\n\r\n    this.ready = false\r\n    this.meshes.set(mesh.uuid, mesh)\r\n\r\n    if (this.meshes.size === 1) {\r\n      this.addToScene()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove any {@link RenderedMesh | rendered mesh} from this {@link RenderBundle}.\r\n   * @param mesh - {@link RenderedMesh | Mesh} to remove.\r\n   */\r\n  removeSceneObject(mesh: RenderedMesh) {\r\n    if (this.ready && !this.renderer.production) {\r\n      throwWarning(\r\n        `${this.options.label} (${this.type}): The content of a render bundle is meant to be static. You should not remove meshes from it after it has been created (mesh removed: ${mesh.options.label}).`\r\n      )\r\n    }\r\n\r\n    this.ready = false\r\n    this.meshes.delete(mesh.uuid)\r\n\r\n    mesh.setRenderBundle(null, false)\r\n\r\n    if (this.options.useIndirectDraw) {\r\n      mesh.geometry.indirectDraw = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link SceneStackedMesh | scene stacked mesh} from this {@link RenderBundle}.\r\n   * @param mesh - {@link SceneStackedMesh | Scene stacked mesh} to remove.\r\n   * @param keepMesh - Whether to preserve the mesh in order to render it normally again. Default to `true`.\r\n   */\r\n  removeMesh(mesh: SceneStackedMesh, keepMesh = true) {\r\n    this.removeSceneObject(mesh)\r\n\r\n    if (keepMesh && mesh.type !== 'ShaderPass' && mesh.type !== 'PingPongPlane') {\r\n      this.renderer.scene.addMesh(mesh)\r\n    }\r\n\r\n    if (this.meshes.size === 0) {\r\n      this.renderer.scene.removeRenderBundle(this)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the {@link descriptor} based on the {@link RenderBundleOptions#renderPass | render pass}.\r\n   * @private\r\n   */\r\n  #setDescriptor() {\r\n    this.descriptor = {\r\n      ...(this.options.renderPass.options.colorAttachments && {\r\n        colorFormats: this.options.renderPass.options.colorAttachments.map(\r\n          (colorAttachment) => colorAttachment.targetFormat\r\n        ),\r\n      }),\r\n      ...(this.options.renderPass.options.useDepth && {\r\n        depthStencilFormat: this.options.renderPass.options.depthFormat,\r\n      }),\r\n      sampleCount: this.options.renderPass.options.sampleCount,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the {@link descriptor}, {@link encoder} and {@link bundle} used by this {@link RenderBundle}.\r\n   * @private\r\n   */\r\n  #encodeRenderCommands() {\r\n    this.#setDescriptor()\r\n\r\n    this.renderer.pipelineManager.resetCurrentPipeline()\r\n\r\n    this.encoder = this.renderer.device.createRenderBundleEncoder({\r\n      ...this.descriptor,\r\n      label: this.options.label + ' (encoder)',\r\n    })\r\n\r\n    if (!this.renderer.production) {\r\n      this.encoder.pushDebugGroup(`${this.options.label}: create encoder`)\r\n    }\r\n\r\n    // render commands\r\n    let offset = 0\r\n    this.meshes.forEach((mesh) => {\r\n      mesh.material.render(this.encoder)\r\n      mesh.geometry.render(this.encoder)\r\n\r\n      offset++\r\n    })\r\n\r\n    if (!this.renderer.production) {\r\n      this.encoder.popDebugGroup()\r\n    }\r\n\r\n    this.bundle = this.encoder.finish({ label: this.options.label + ' (bundle)' })\r\n\r\n    this.renderer.pipelineManager.resetCurrentPipeline()\r\n  }\r\n\r\n  /**\r\n   * Update the {@link binding} buffer if needed.\r\n   */\r\n  updateBinding() {\r\n    if (this.binding && this.binding.shouldUpdate && this.binding.buffer.GPUBuffer) {\r\n      this.renderer.queueWriteBuffer(this.binding.buffer.GPUBuffer, 0, this.binding.arrayBuffer)\r\n      this.binding.shouldUpdate = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the {@link RenderBundle}.\r\n   *\r\n   * If it is ready, execute each {@link core/meshes/Mesh.Mesh.onBeforeRenderPass | mesh onBeforeRenderPass method}, {@link updateBinding | update the binding} if needed, execute the {@link bundle} and finally execute each {@link core/meshes/Mesh.Mesh.onAfterRenderPass | mesh onAfterRenderPass method}.\r\n   *\r\n   * If not, just render its {@link meshes} as usual and check whether they are all ready and if we can therefore encode our {@link RenderBundle}.\r\n   * @param pass - {@link GPURenderPassEncoder} to use.\r\n   */\r\n  render(pass: GPURenderPassEncoder) {\r\n    // render bundle ready, render meshes\r\n    if (this.ready && this.bundle && this.visible) {\r\n      this.meshes.forEach((mesh) => {\r\n        mesh.onBeforeRenderPass()\r\n      })\r\n\r\n      // update transformations binding if needed\r\n      this.updateBinding()\r\n\r\n      // force pipeline resets before and after executing the bundle\r\n      this.renderer.pipelineManager.resetCurrentPipeline()\r\n\r\n      if (!this.renderer.production) {\r\n        pass.pushDebugGroup(`${this.options.label}: execute bundle`)\r\n      }\r\n\r\n      pass.executeBundles([this.bundle])\r\n\r\n      if (!this.renderer.production) {\r\n        pass.popDebugGroup()\r\n      }\r\n\r\n      this.renderer.pipelineManager.resetCurrentPipeline()\r\n\r\n      this.meshes.forEach((mesh) => {\r\n        mesh.onAfterRenderPass()\r\n      })\r\n    }\r\n\r\n    // bundle not ready?\r\n    // render meshes as usual\r\n    let index = 0\r\n    if (!this.ready) {\r\n      let isReady = true\r\n\r\n      for (const [_key, mesh] of this.meshes) {\r\n        mesh.render(pass)\r\n\r\n        if (!mesh.ready) {\r\n          isReady = false\r\n        }\r\n\r\n        // dom textures should be ready\r\n        // in order to validate the render bundle\r\n        if ('sourcesReady' in mesh && !mesh.sourcesReady) {\r\n          isReady = false\r\n        }\r\n\r\n        index++\r\n      }\r\n\r\n      this.ready = isReady\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link Renderer#device | WebGPU device} has been lost.\r\n   * Just set the {@link ready} flag to `false` to eventually invalidate the {@link bundle}.\r\n   */\r\n  loseContext() {\r\n    this.ready = false\r\n  }\r\n\r\n  /**\r\n   * Empty the {@link RenderBundle}. Can eventually re-add the {@link SceneStackedMesh | scene stacked meshes} to the {@link core/scenes/Scene.Scene | Scene} in order to render them normally again.\r\n   * @param keepMeshes - Whether to preserve the {@link meshes} in order to render them normally again. Default to `true`.\r\n   */\r\n  empty(keepMeshes = true) {\r\n    this.ready = false\r\n\r\n    this.meshes.forEach((mesh) => {\r\n      this.removeMesh(mesh, keepMeshes)\r\n    })\r\n\r\n    this.size = 0\r\n  }\r\n\r\n  /**\r\n   * Destroy the {@link binding} buffer if needed and remove the {@link RenderBundle} from the {@link Renderer}.\r\n   * @private\r\n   */\r\n  #cleanUp() {\r\n    // destroy binding\r\n    if (this.binding) {\r\n      this.renderer.removeBuffer(this.binding.buffer)\r\n      this.binding.buffer.destroy()\r\n    }\r\n\r\n    if (this.indirectBuffer) {\r\n      this.indirectBuffer.destroy()\r\n    }\r\n\r\n    // remove from renderer\r\n    this.renderer.renderBundles.delete(this.uuid)\r\n  }\r\n\r\n  /**\r\n   * Remove the {@link RenderBundle}, i.e. destroy it while preserving the {@link SceneStackedMesh | scene stacked meshes} by re-adding them to the {@link core/scenes/Scene.Scene | Scene}.\r\n   */\r\n  remove() {\r\n    this.empty(true)\r\n    this.#cleanUp()\r\n  }\r\n\r\n  /**\r\n   * Remove the {@link RenderBundle} from our {@link core/scenes/Scene.Scene | Scene}, {@link RenderedMesh#remove | remove the meshes}, eventually destroy the {@link binding} and remove the {@link RenderBundle} from the {@link Renderer}.\r\n   */\r\n  destroy() {\r\n    this.ready = false\r\n\r\n    this.meshes.forEach((mesh) => {\r\n      mesh.remove()\r\n    })\r\n\r\n    this.size = 0\r\n\r\n    this.#cleanUp()\r\n  }\r\n}\r\n","export default /* wgsl */ `\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n};\r\n\r\n@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {\r\n  return textureSample(renderTexture, defaultSampler, fsInput.uv);\r\n}`\r\n","import { FullscreenPlane } from '../meshes/FullscreenPlane'\nimport { isRenderer, Renderer } from '../renderers/utils'\nimport { RenderTarget } from './RenderTarget'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { MeshBaseOptions, MeshBaseRenderParams } from '../meshes/mixins/MeshBaseMixin'\nimport { Texture } from '../textures/Texture'\nimport default_pass_fsWGSl from '../shaders/chunks/default/default_pass_fs.wgsl'\nimport { throwWarning } from '../../utils/utils'\n\n/**\n * Parameters used to create a {@link ShaderPass}\n */\nexport interface ShaderPassParams extends MeshBaseRenderParams {\n  /** Optional input {@link RenderTarget} to assign to the {@link ShaderPass}. Used to automatically copy the content of the given {@link RenderTarget} texture into the {@link ShaderPass#renderTexture | ShaderPass renderTexture}. */\n  inputTarget?: RenderTarget\n\n  /** Whether the result of this {@link ShaderPass} should be copied to the {@link ShaderPass#renderTexture | renderTexture} after each render. Default to false. */\n  copyOutputToRenderTexture?: boolean\n}\n\nexport interface ShaderPassOptions extends MeshBaseOptions {\n  /** Whether the result of this {@link ShaderPass} should be copied to the {@link ShaderPass#renderTexture | renderTexture} after each render. Default to false. */\n  copyOutputToRenderTexture?: boolean\n}\n\n/**\n * Used to apply postprocessing, i.e. draw meshes to a {@link Texture} and then draw a {@link FullscreenPlane} using that texture as an input.\n *\n * A ShaderPass could either post process the whole scene or just a bunch of meshes using a specific {@link RenderTarget}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a ShaderPass\n * const shaderPass = new ShaderPass(gpuCurtain, {\n *   label: 'My shader pass',\n *   shaders: {\n *     fragment: {\n *       code: shaderPassCode, // assume it is a valid WGSL fragment shader\n *     },\n *   },\n * })\n * ```\n */\nexport class ShaderPass extends FullscreenPlane {\n  /** Optional input {@link RenderTarget} to assign to the {@link ShaderPass}. Used to automatically copy the content of the given {@link RenderTarget} texture into the {@link ShaderPass#renderTexture | ShaderPass renderTexture}. */\n  inputTarget: RenderTarget | undefined\n\n  /** Options used to create this {@link ShaderPass} */\n  options: ShaderPassOptions\n\n  /**\n   * ShaderPass constructor\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link ShaderPass}\n   * @param parameters - {@link ShaderPassParams | parameters} use to create this {@link ShaderPass}\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters: ShaderPassParams = {}) {\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' ShaderPass' : 'ShaderPass')\n\n    // disable depth for postprocessing passes\n    parameters.depth = false\n\n    // blend equation specific to shader passes\n    const defaultBlend: GPUBlendState = {\n      color: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n      },\n      alpha: {\n        srcFactor: 'one',\n        dstFactor: 'one-minus-src-alpha',\n      },\n    }\n\n    if (!parameters.targets) {\n      parameters.targets = [\n        {\n          blend: defaultBlend,\n        },\n      ]\n    } else if (parameters.targets && parameters.targets.length && !parameters.targets[0].blend) {\n      parameters.targets[0].blend = defaultBlend\n    }\n\n    parameters.label = parameters.label ?? 'ShaderPass ' + renderer.shaderPasses?.length\n\n    // set default sample count to post processing render pass\n    parameters.sampleCount = !!parameters.sampleCount\n      ? parameters.sampleCount\n      : renderer && renderer.postProcessingPass\n      ? renderer && renderer.postProcessingPass.options.sampleCount\n      : 1\n\n    if (!parameters.shaders) {\n      parameters.shaders = {}\n    }\n\n    if (!parameters.shaders.fragment) {\n      parameters.shaders.fragment = {\n        code: default_pass_fsWGSl,\n        entryPoint: 'main',\n      }\n    }\n\n    // force the postprocessing passes to not use depth\n    parameters.depth = false\n\n    super(renderer, parameters)\n\n    if (parameters.inputTarget) {\n      this.setInputTarget(parameters.inputTarget)\n    }\n\n    if (this.outputTarget) {\n      // patch to match outputTarget if needed\n      this.setRenderingOptionsForRenderPass(this.outputTarget.renderPass)\n    }\n\n    this.type = 'ShaderPass'\n\n    this.createTexture({\n      label: parameters.label ? `${parameters.label} render texture` : 'Shader pass render texture',\n      name: 'renderTexture',\n      fromTexture: this.inputTarget ? this.inputTarget.renderTexture : null,\n      usage: ['copySrc', 'copyDst', 'textureBinding'],\n      ...(this.outputTarget &&\n        this.outputTarget.options.qualityRatio && { qualityRatio: this.outputTarget.options.qualityRatio }),\n    })\n  }\n\n  /**\n   * Hook used to clean up parameters before sending them to the material.\n   * @param parameters - parameters to clean before sending them to the {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}\n   * @returns - cleaned parameters\n   */\n  cleanupRenderMaterialParameters(parameters: ShaderPassParams): MeshBaseRenderParams {\n    // patch mesh parameters\n    delete parameters.copyOutputToRenderTexture\n    delete parameters.inputTarget\n\n    super.cleanupRenderMaterialParameters(parameters)\n\n    return parameters\n  }\n\n  /**\n   * Get our main {@link Texture} that contains the input content to be used by the {@link ShaderPass}. Can also contain the ouputted content if {@link ShaderPassOptions#copyOutputToRenderTexture | copyOutputToRenderTexture} is set to true.\n   * @readonly\n   */\n  get renderTexture(): Texture | undefined {\n    return this.textures.find((texture) => texture.options.name === 'renderTexture')\n  }\n\n  /**\n   * Assign or remove an input {@link RenderTarget} to this {@link ShaderPass}, which can be different from what has just been drawn to the {@link core/renderers/GPURenderer.GPURenderer#context | context} current texture.\n   *\n   * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a RenderTarget as well.\n   * Also copy or remove the {@link RenderTarget#renderTexture | render target render texture} into the {@link ShaderPass} {@link renderTexture}\n   * @param inputTarget - the {@link RenderTarget} to assign or null if we want to remove the current {@link RenderTarget}\n   */\n  setInputTarget(inputTarget: RenderTarget | null) {\n    if (inputTarget && inputTarget.type !== 'RenderTarget') {\n      throwWarning(`${this.options.label ?? this.type}: inputTarget is not a RenderTarget: ${inputTarget}`)\n      return\n    }\n\n    // ensure the mesh is in the correct scene stack\n    this.removeFromScene()\n    this.inputTarget = inputTarget\n    this.addToScene()\n\n    // it might not have been created yet\n    if (this.renderTexture) {\n      if (inputTarget) {\n        this.renderTexture.copy(this.inputTarget.renderTexture)\n      } else {\n        this.renderTexture.options.fromTexture = null\n        this.renderTexture.createTexture()\n      }\n    }\n  }\n\n  /**\n   * Add the {@link ShaderPass} to the {@link core/scenes/Scene.Scene | Scene} and optionally to the renderer as well.\n   * @param addToRenderer - whether to add this {@link ShaderPass} to the {@link Renderer#shaderPasses | Renderer shaderPasses array}\n   */\n  addToScene(addToRenderer = false) {\n    if (addToRenderer) {\n      this.renderer.shaderPasses.push(this)\n    }\n\n    this.setRenderingOptionsForRenderPass(\n      this.outputTarget ? this.outputTarget.renderPass : this.renderer.postProcessingPass\n    )\n\n    if (this.autoRender) {\n      this.renderer.scene.addShaderPass(this)\n    }\n  }\n\n  /**\n   * Remove the {@link ShaderPass} from the {@link core/scenes/Scene.Scene | Scene} and optionally from the renderer as well.\n   * @param removeFromRenderer - whether to remove this {@link ShaderPass} from the {@link Renderer#shaderPasses | Renderer shaderPasses array}\n   */\n  removeFromScene(removeFromRenderer = false) {\n    if (this.outputTarget) {\n      this.outputTarget.destroy()\n    }\n\n    if (this.autoRender) {\n      this.renderer.scene.removeShaderPass(this)\n    }\n\n    if (removeFromRenderer) {\n      this.renderer.shaderPasses = this.renderer.shaderPasses.filter((sP) => sP.uuid !== this.uuid)\n    }\n  }\n}\n","export default /* wgsl */ `\r\nfn lessThan3(a: vec3f, b: vec3f) -> vec3f {\r\n  return vec3f(vec3<bool>(a.x < b.x, a.y < b.y, a.z < b.z));\r\n}\r\n\r\nfn pow2( x: f32 ) -> f32 {\r\n    return x * x;\r\n}\r\n\r\nfn pow3( x: f32 ) -> f32 {\r\n    return x * x * x;\r\n}\r\n\r\nfn pow4( x: f32 ) -> f32 {\r\n    return pow2(x) * pow2(x);\r\n}\r\n`\r\n","import common from '../common.wgsl.js'\r\n\r\nexport default /* wgsl */ `\r\n${common}\r\n\r\nstruct ReflectedLight {\r\n  directDiffuse: vec3f,\r\n  directSpecular: vec3f,\r\n  indirectDiffuse: vec3f,\r\n  indirectSpecular: vec3f,\r\n}\r\n\r\nstruct DirectLight {\r\n  color: vec3f,\r\n  direction: vec3f,\r\n  visible: bool,\r\n}\r\n\r\nfn rangeAttenuation(range: f32, distance: f32) -> f32 {\r\n  var distanceFalloff: f32 = 1.0 / max( pow( distance, 2.0 ), 0.01 );\r\n  if ( range > 0.0 ) {\r\n      distanceFalloff *= pow2( clamp( 1.0 - pow4( distance / range ), 0.0, 1.0 ) );\r\n  }\r\n  \r\n  return distanceFalloff;\r\n}\r\n\r\nfn BRDF_Lambert(diffuseColor: vec3f) -> vec3f {\r\n  return RECIPROCAL_PI * diffuseColor;\r\n}\r\n\r\nfn F_Schlick(VdotH: f32, f0: vec3f) -> vec3f {\r\n  let fresnel: f32 = pow( 1.0 - VdotH, 5.0 );\r\n  \r\n  // TODO if specular intensity is defined\r\n  // it could be: mix( specularIntensity, 1.0, metallic );\r\n  let f90: f32 = 1.0;\r\n  return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\r\n}\r\n\r\nfn getDirectionalLightInfo(directionalLight: DirectionalLightsElement, worldPosition: vec3f, ptr_light: ptr<function, DirectLight>) {\r\n  (*ptr_light).color = directionalLight.color;\r\n  (*ptr_light).direction = worldPosition - directionalLight.direction;\r\n  (*ptr_light).visible = true;\r\n}\r\n\r\nfn getPointLightInfo(pointLight: PointLightsElement, worldPosition: vec3f, ptr_light: ptr<function, DirectLight>) {\r\n  let lightDirection: vec3f = pointLight.position - worldPosition;\r\n  (*ptr_light).direction = normalize(lightDirection);\r\n  let lightDistance: f32 = length(lightDirection);\r\n  (*ptr_light).color = pointLight.color;\r\n  (*ptr_light).color *= rangeAttenuation(pointLight.range, lightDistance);\r\n  (*ptr_light).visible = length((*ptr_light).color) > 0.0001;\r\n}\r\n`\r\n","// TODO add more tone mapping options?\r\n// see https://github.com/dmnsgn/glsl-tone-map\r\n\r\n/** Defines all available tone mapping types */\r\nexport type ToneMappingTypes = 'linear' | 'khronos'\r\n\r\n/** Tone mapping utils chunks. */\r\nexport const toneMappingUtils = /* wgsl */ `\r\nfn linearToOutput3(value: vec3f) -> vec3f {\r\n  return vec3( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThan3( value.rgb, vec3( 0.0031308 ) ) ) ) );\r\n}\r\n\r\nfn linearToOutput4(value: vec4f) -> vec4f {\r\n  return vec4( linearToOutput3(value.rgb), value.a );\r\n}\r\n\r\n// linear <-> sRGB conversions\r\nfn linearTosRGB(linear: vec3f) -> vec3f {\r\n  if (all(linear <= vec3(0.0031308))) {\r\n    return linear * 12.92;\r\n  }\r\n  return (pow(abs(linear), vec3(1.0/2.4)) * 1.055) - vec3(0.055);\r\n}\r\n\r\nfn sRGBToLinear(srgb: vec3f) -> vec3f {\r\n  if (all(srgb <= vec3(0.04045))) {\r\n    return srgb / vec3(12.92);\r\n  }\r\n  return pow((srgb + vec3(0.055)) / vec3(1.055), vec3(2.4));\r\n}\r\n\r\nfn toneMapKhronosPbrNeutral( color: vec3f ) -> vec3f {\r\n  var toneMapColor = color; \r\n  const startCompression: f32 = 0.8 - 0.04;\r\n  const desaturation: f32 = 0.15;\r\n  var x: f32 = min(toneMapColor.r, min(toneMapColor.g, toneMapColor.b));\r\n  var offset: f32 = select(0.04, x - 6.25 * x * x, x < 0.08);\r\n  toneMapColor = toneMapColor - offset;\r\n  var peak: f32 = max(toneMapColor.r, max(toneMapColor.g, toneMapColor.b));\r\n  if (peak < startCompression) {\r\n    return toneMapColor;\r\n  }\r\n  const d: f32 = 1. - startCompression;\r\n  let newPeak: f32 = 1. - d * d / (peak + d - startCompression);\r\n  toneMapColor *= newPeak / peak;\r\n  let g: f32 = 1. - 1. / (desaturation * (peak - newPeak) + 1.);\r\n  return mix(toneMapColor, newPeak * vec3(1, 1, 1), g);\r\n}\r\n`\r\n","export default /* wgsl */ `\r\nfn getIndirectDiffuse(irradiance: vec3f, diffuseColor: vec3f, ptr_reflectedLight: ptr<function, ReflectedLight>) {\r\n  (*ptr_reflectedLight).indirectDiffuse += irradiance * BRDF_Lambert( diffuseColor );\r\n}\r\n\r\n// Indirect Diffuse RenderEquations\r\nfn RE_IndirectDiffuse(irradiance: vec3f, diffuseColor: vec3f, ptr_reflectedLight: ptr<function, ReflectedLight>) {\r\n  var totalAmbientIrradiance: vec3f = irradiance;\r\n  \r\n  for(var i: i32 = 0; i < ambientLights.count; i++) {\r\n    totalAmbientIrradiance += ambientLights.color[i];\r\n  }\r\n  \r\n  getIndirectDiffuse(totalAmbientIrradiance, diffuseColor, ptr_reflectedLight);\r\n}\r\n`\r\n","export default /* wgsl */ `\r\nconst PI = ${Math.PI};\r\nconst RECIPROCAL_PI = ${1 / Math.PI};\r\nconst RECIPROCAL_PI2 = ${0.5 / Math.PI};\r\nconst EPSILON = 1e-6;`\r\n","import light_utils from '../helpers/lights/light_utils.wgsl'\r\nimport { ToneMappingTypes, toneMappingUtils } from './tone-mapping-utils'\r\nimport RE_indirect_diffuse from '../helpers/lights/RE_indirect_diffuse.wgsl'\r\nimport { applyDirectionalShadows, applyPointShadows, getPCFShadows } from './shadows'\r\nimport constants from '../helpers/constants.wgsl'\r\n\r\n// TODO add emissive?\r\n/** Defines the basic parameters available for the various shading getter functions. */\r\nexport interface GetShadingParams {\r\n  /** Whether to add the utils functions such as constants or helper functions. Default to `true`. */\r\n  addUtils?: boolean\r\n  /** Whether the shading function should account for current shadows. Default to `false`. */\r\n  receiveShadows?: boolean\r\n  /** Whether the shading function should apply tone mapping to the resulting color and if so, which one. Default to `'linear'`. */\r\n  toneMapping?: ToneMappingTypes | boolean\r\n  /** Whether ambient occlusion should be accounted when calculating the shading. Default to `false`. If set to `true`, a float `f32` ambient occlusion value should be passed as the last shading function parameter. */\r\n  useOcclusion?: boolean\r\n}\r\n\r\n/** Basic minimum utils needed to compute Lambert shading. */\r\nexport const lambertUtils = /* wgsl */ `\r\n${constants}\r\n${light_utils}\r\n${RE_indirect_diffuse}\r\n`\r\n\r\n/** Helper function chunk appended internally and used to compute Lambert direct light contributions. */\r\nexport const getLambertDirect = /* wgsl */ `\r\nfn getLambertDirect(\r\n  normal: vec3f,\r\n  diffuseColor: vec3f,\r\n  directLight: DirectLight,\r\n  ptr_reflectedLight: ptr<function, ReflectedLight>\r\n) {\r\n  let L = normalize(directLight.direction);\r\n  let NdotL = max(dot(normal, L), 0.0);\r\n  \r\n  let irradiance: vec3f = NdotL * directLight.color;\r\n  (*ptr_reflectedLight).directDiffuse += irradiance * BRDF_Lambert( diffuseColor );\r\n}\r\n`\r\n\r\n/**\r\n * Shader chunk to add to the head of a fragment shader to be able to use Lambert shading.\r\n * @param parameters - {@link GetShadingParams | parameters} used to append the right chunks and calculate the Lambert shading.\r\n *\r\n * @example\r\n * ```wgsl\r\n * var color: vec3f = vec3(1.0);\r\n * color = getLambert(normal, worldPosition, color);\r\n * ```\r\n */\r\nexport const getLambert = (\r\n  { addUtils = true, receiveShadows = false, toneMapping = 'linear', useOcclusion = false } = {} as GetShadingParams\r\n) => /* wgsl */ `\r\n${addUtils ? lambertUtils : ''}\r\n${getLambertDirect}\r\n${toneMapping ? toneMappingUtils : ''}\r\n\r\nfn getLambert(\r\n  normal: vec3f,\r\n  worldPosition: vec3f,\r\n  diffuseColor: vec3f,\r\n  ${useOcclusion ? 'occlusion: f32,' : ''}\r\n) -> vec3f {\r\n  var directLight: DirectLight;\r\n  var reflectedLight: ReflectedLight;\r\n  \r\n  ${receiveShadows ? getPCFShadows : ''}\r\n\r\n  // point lights\r\n  for(var i = 0; i < pointLights.count; i++) {\r\n    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);\r\n    ${receiveShadows ? applyPointShadows : ''}\r\n    getLambertDirect(normal, diffuseColor, directLight, &reflectedLight);\r\n  }\r\n  \r\n  // directional lights\r\n  for(var i = 0; i < directionalLights.count; i++) {\r\n    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);\r\n    ${receiveShadows ? applyDirectionalShadows : ''}\r\n    getLambertDirect(normal, diffuseColor, directLight, &reflectedLight);\r\n  }\r\n  \r\n  // ambient lights\r\n  var irradiance: vec3f = vec3(0.0);\r\n  RE_IndirectDiffuse(irradiance, diffuseColor, &reflectedLight);\r\n  \r\n  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;\r\n  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;\r\n  \r\n  ${useOcclusion ? 'totalIndirect *= occlusion;' : ''}\r\n  \r\n  var outgoingLight: vec3f = totalDirect + totalIndirect;\r\n  \r\n  ${\r\n    toneMapping === 'linear'\r\n      ? 'outgoingLight = linearToOutput3(outgoingLight);'\r\n      : toneMapping === 'khronos'\r\n      ? 'outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));'\r\n      : ''\r\n  }\r\n  \r\n  return outgoingLight;\r\n}\r\n`\r\n","import { toneMappingUtils } from './tone-mapping-utils'\r\nimport { GetShadingParams, lambertUtils } from './lambert-shading'\r\nimport { applyDirectionalShadows, applyPointShadows, getPCFShadows } from './shadows'\r\n\r\n/** Helper function chunk appended internally and used to compute Phong direct light contributions. */\r\nexport const getPhongDirect = /* wgsl */ `\r\nfn D_BlinnPhong( shininess: f32, NdotH: f32 ) -> f32 {\r\n  return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( NdotH, shininess );\r\n}\r\n\r\nfn BRDF_BlinnPhong(\r\n  normal: vec3f,\r\n  viewDirection: vec3f,\r\n  specularColor: vec3f,\r\n  shininess: f32,\r\n  directLight: DirectLight\r\n) -> vec3f {\r\n  let L = normalize(directLight.direction);\r\n  let NdotL = max(dot(normal, L), 0.0);\r\n  let H: vec3f = normalize(viewDirection + L);\r\n  \r\n  let NdotH: f32 = clamp(dot(normal, H), 0.0, 1.0);\r\n  let VdotH: f32 = clamp(dot(viewDirection, H), 0.0, 1.0);\r\n  let NdotV: f32 = clamp( dot(normal, viewDirection), 0.0, 1.0 );\r\n  \r\n  let F: vec3f = F_Schlick(VdotH, specularColor);\r\n  \r\n  let G: f32 = 0.25; // blinn phong implicit\r\n  \r\n  let D = D_BlinnPhong(shininess, NdotH);\r\n  \r\n  let specular: vec3f = F * G * D;\r\n        \r\n  return specular;\r\n}\r\n\r\nfn getPhongDirect(\r\n  normal: vec3f,\r\n  diffuseColor: vec3f,\r\n  viewDirection: vec3f,\r\n  specularColor: vec3f,\r\n  specularStrength: f32,\r\n  shininess: f32,\r\n  directLight: DirectLight,\r\n  ptr_reflectedLight: ptr<function, ReflectedLight>\r\n) {\r\n  let L = normalize(directLight.direction);\r\n  let NdotL = max(dot(normal, L), 0.0);\r\n  \r\n  let irradiance: vec3f = NdotL * directLight.color;\r\n  (*ptr_reflectedLight).directDiffuse += irradiance * BRDF_Lambert( diffuseColor );\r\n  (*ptr_reflectedLight).directSpecular += irradiance * BRDF_BlinnPhong( normal, viewDirection, specularColor, shininess, directLight ) * specularStrength;\r\n}\r\n`\r\n\r\n/**\r\n * Shader chunk to add to the head of a fragment shader to be able to use Phong shading.\r\n * @param parameters - {@link GetShadingParams | parameters} used to append the right chunks and calculate the Phong shading.\r\n *\r\n * @example\r\n * ```wgsl\r\n * var color: vec3f = vec3(1.0);\r\n * let specularColor: vec3f = vec3(1.0);\r\n * let specularStrength: f32 = 1.0;\r\n * let shininess: f32 = 32.0;\r\n * color = getPhong(normal, worldPosition, color, viewDirection, specularColor, specularStrength, shininess);\r\n * ```\r\n */\r\nexport const getPhong = (\r\n  { addUtils = true, receiveShadows = false, toneMapping = 'linear', useOcclusion = false } = {} as GetShadingParams\r\n) => /* wgsl */ `\r\n${addUtils ? lambertUtils : ''}\r\n${getPhongDirect}\r\n${toneMapping ? toneMappingUtils : ''}\r\n\r\nfn getPhong(\r\n  normal: vec3f,\r\n  worldPosition: vec3f,\r\n  diffuseColor: vec3f,\r\n  viewDirection: vec3f,\r\n  specularColor: vec3f,\r\n  specularStrength: f32,\r\n  shininess: f32,\r\n  ${useOcclusion ? 'occlusion: f32,' : ''}\r\n) -> vec3f {\r\n  var directLight: DirectLight;\r\n  var reflectedLight: ReflectedLight;\r\n  \r\n  ${receiveShadows ? getPCFShadows : ''}\r\n\r\n  // point lights\r\n  for(var i = 0; i < pointLights.count; i++) {  \r\n    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);\r\n    ${receiveShadows ? applyPointShadows : ''}\r\n    getPhongDirect(normal, diffuseColor, viewDirection, specularColor, specularStrength, shininess, directLight, &reflectedLight);\r\n  }\r\n  \r\n  // directional lights\r\n  for(var i = 0; i < directionalLights.count; i++) {\r\n    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);\r\n    ${receiveShadows ? applyDirectionalShadows : ''}\r\n    getPhongDirect(normal, diffuseColor, viewDirection, specularColor, specularStrength, shininess, directLight, &reflectedLight);\r\n  }\r\n  \r\n  // ambient lights\r\n  var irradiance: vec3f = vec3(0.0);\r\n  RE_IndirectDiffuse(irradiance, diffuseColor, &reflectedLight);\r\n  \r\n  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;\r\n  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;\r\n  \r\n  ${useOcclusion ? 'totalIndirect *= occlusion;' : ''}\r\n  \r\n  var outgoingLight: vec3f = totalDirect + totalIndirect;\r\n  \r\n  ${\r\n    toneMapping === 'linear'\r\n      ? 'outgoingLight = linearToOutput3(outgoingLight);'\r\n      : toneMapping === 'khronos'\r\n      ? 'outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));'\r\n      : ''\r\n  }\r\n  \r\n  return outgoingLight;\r\n}\r\n`\r\n","export default /* wgsl */ `\r\nfn DFGApprox(\r\n  normal: vec3f,\r\n  viewDirection: vec3f,\r\n  roughness: f32,\r\n) -> vec2f {\r\n  let dotNV: f32 = clamp( dot( normal, viewDirection ), 0.0, 1.0 );\r\n\r\n\tlet c0: vec4f = vec4( - 1, - 0.0275, - 0.572, 0.022 );\r\n\tlet c1: vec4f = vec4( 1, 0.0425, 1.04, - 0.04 );\r\n\r\n\tlet r: vec4f = roughness * c0 + c1;\r\n\tlet a004: f32 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\r\n\t\r\n\tlet fab: vec2f = vec2( - 1.04, 1.04 ) * a004 + r.zw;\r\n\r\n\treturn fab;\r\n}\r\n\r\nstruct TotalScattering {\r\n  single: vec3f,\r\n  multi: vec3f,\r\n}\r\n\r\nfn computeMultiscattering(\r\n  normal: vec3f,\r\n  viewDirection: vec3f,\r\n  specularColor: vec3f,\r\n  f90: f32,\r\n  roughness: f32,\r\n  ptr_totalScattering: ptr<function, TotalScattering>\r\n) {\r\n  let fab: vec2f = DFGApprox( normal, viewDirection, roughness );\r\n\r\n\tlet Fr: vec3f = specularColor;\r\n\r\n\tlet FssEss: vec3f = Fr * fab.x + f90 * fab.y;\r\n\r\n\tlet Ess: f32 = fab.x + fab.y;\r\n\tlet Ems: f32 = 1.0 - Ess;\r\n\r\n\tlet Favg: vec3f = Fr + ( 1.0 - Fr ) * 0.047619; // 1/21\r\n\tlet Fms: vec3f = FssEss * Favg / ( 1.0 - Ems * Favg );\r\n\r\n\t(*ptr_totalScattering).single += FssEss;\r\n\t(*ptr_totalScattering).multi += Fms * Ems;\r\n}\r\n\r\n// Indirect Specular RenderEquations\r\nfn RE_IndirectSpecular(\r\n  radiance: vec3f,\r\n  irradiance: vec3f,\r\n  normal: vec3f,\r\n  diffuseColor: vec3f,\r\n  viewDirection: vec3f,\r\n  metallic: f32,\r\n  roughness: f32,\r\n  ptr_reflectedLight: ptr<function, ReflectedLight>\r\n) {\r\n  var totalScattering: TotalScattering;\r\n  let cosineWeightedIrradiance: vec3f = irradiance * RECIPROCAL_PI;\r\n  \r\n  let specularColor: vec3f = mix( vec3( 0.04 ), diffuseColor, metallic );\r\n  \r\n  let f90: f32 = 1.0;\r\n  \r\n  computeMultiscattering( normal, viewDirection, specularColor, f90, roughness, &totalScattering );\r\n  \r\n  let totalScatter: vec3f = totalScattering.single + totalScattering.multi;\r\n  let diffuse: vec3f = diffuseColor * ( 1.0 - max( max( totalScatter.r, totalScatter.g ), totalScatter.b ) );\r\n\r\n  (*ptr_reflectedLight).indirectSpecular += radiance * totalScattering.single;\r\n  (*ptr_reflectedLight).indirectSpecular += totalScattering.multi * cosineWeightedIrradiance;\r\n\r\n  (*ptr_reflectedLight).indirectDiffuse += diffuse * cosineWeightedIrradiance;\r\n}\r\n`\r\n","import { toneMappingUtils } from './tone-mapping-utils'\r\nimport RE_indirect_specular from '../helpers/lights/RE_indirect_specular.wgsl'\r\nimport { GetShadingParams, lambertUtils } from './lambert-shading'\r\nimport { applyDirectionalShadows, applyPointShadows, getPCFShadows } from './shadows'\r\n\r\n/** Basic minimum utils needed to compute PBR shading. Extends {@link lambertUtils | utils needed for lambert shading}. */\r\nexport const pbrUtils = `\r\n${lambertUtils}\r\n${RE_indirect_specular}\r\n`\r\n\r\n/** Helper function chunk appended internally and used to compute PBR direct light contributions. */\r\nexport const getPBRDirect = /* wgsl */ `\r\nfn DistributionGGX(NdotH: f32, roughness: f32) -> f32 {\r\n  let a: f32 = pow2( roughness );\r\n  let a2: f32 = pow2( a );\r\n\r\n  let denom: f32 = (pow2( NdotH ) * (a2 - 1.0) + 1.0);\r\n\r\n  return RECIPROCAL_PI * a2 / ( pow2( denom ) );\r\n}\r\n\r\nfn GeometrySmith(NdotL: f32, NdotV: f32, roughness: f32) -> f32 {\r\n  let a: f32 = pow2( roughness );\r\n  let a2: f32 = pow2( a );\r\n  \r\n  let gv: f32 = NdotL * sqrt( a2 + ( 1.0 - a2 ) * pow2( NdotV ) );\r\n  let gl: f32 = NdotV * sqrt( a2 + ( 1.0 - a2 ) * pow2( NdotL ) );\r\n\r\n  return 0.5 / max( gv + gl, EPSILON );\r\n}\r\n\r\nfn BRDF_GGX(\r\n  NdotV: f32,\r\n  NdotL: f32,\r\n  NdotH: f32,\r\n  VdotH: f32,\r\n  roughness: f32,\r\n  f0: vec3f\r\n) -> vec3f {\r\n  // cook-torrance brdf\r\n  let G: f32 = GeometrySmith(NdotL, NdotV, roughness);\r\n  let D: f32 = DistributionGGX(NdotH, roughness);\r\n  let F: vec3f = F_Schlick(VdotH, f0);\r\n  \r\n  return G * D * F;\r\n}\r\n\r\nfn getPBRDirect(\r\n  normal: vec3f,\r\n  diffuseColor: vec3f,\r\n  viewDirection: vec3f,\r\n  f0: vec3f,\r\n  metallic: f32,\r\n  roughness: f32,\r\n  directLight: DirectLight,\r\n  ptr_reflectedLight: ptr<function, ReflectedLight>\r\n) {\r\n  let N: vec3f = normalize(normal);\r\n  let L: vec3f = normalize(directLight.direction);\r\n  let V: vec3f = normalize(viewDirection);\r\n  let H: vec3f = normalize(V + L);\r\n  let NdotV: f32 = clamp(dot(N, V), 0.0, 1.0);\r\n  let NdotL: f32 = clamp(dot(N, L), 0.0, 1.0);\r\n  let NdotH: f32 = clamp(dot(N, H), 0.0, 1.0);\r\n  let VdotH: f32 = clamp(dot(V, H), 0.0, 1.0);\r\n\r\n  let irradiance: vec3f = NdotL * directLight.color;\r\n  let ggx: vec3f = BRDF_GGX(NdotV, NdotL, NdotH, VdotH, roughness, f0);\r\n  \r\n  (*ptr_reflectedLight).directDiffuse += irradiance * BRDF_Lambert( diffuseColor );\r\n  (*ptr_reflectedLight).directSpecular += ggx * irradiance;\r\n}\r\n`\r\n\r\n/**\r\n * Shader chunk to add to the head of a fragment shader to be able to use PBR shading.\r\n * @param parameters - {@link GetShadingParams | parameters} used to append the right chunks and calculate the PBR shading.\r\n *\r\n * @example\r\n * ```wgsl\r\n * var color: vec3f = vec3(1.0);\r\n * color = getPBR(normal, worldPosition, color, viewDirection, f0, metallic, roughness);\r\n * ```\r\n */\r\nexport const getPBR = (\r\n  { addUtils = true, receiveShadows = false, toneMapping = 'linear', useOcclusion = false } = {} as GetShadingParams\r\n) => /* wgsl */ `\r\n${addUtils ? pbrUtils : ''}\r\n${getPBRDirect}\r\n${toneMapping ? toneMappingUtils : ''}\r\n\r\nfn getPBR(\r\n  normal: vec3f,\r\n  worldPosition: vec3f,\r\n  diffuseColor: vec3f,\r\n  viewDirection: vec3f,\r\n  f0: vec3f,\r\n  metallic: f32,\r\n  roughness: f32,\r\n  ${useOcclusion ? 'occlusion: f32,' : ''}\r\n) -> vec3f {\r\n  var directLight: DirectLight;\r\n  var reflectedLight: ReflectedLight;\r\n  \r\n  ${receiveShadows ? getPCFShadows : ''}\r\n\r\n  // point lights\r\n  for(var i = 0; i < pointLights.count; i++) {\r\n    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);\r\n    ${receiveShadows ? applyPointShadows : ''}\r\n    getPBRDirect(normal, diffuseColor, viewDirection, f0, metallic, roughness, directLight, &reflectedLight);\r\n  }\r\n  \r\n  // directional lights\r\n  for(var i = 0; i < directionalLights.count; i++) {\r\n    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);\r\n    ${receiveShadows ? applyDirectionalShadows : ''}\r\n    getPBRDirect(normal, diffuseColor, viewDirection, f0, metallic, roughness, directLight, &reflectedLight);\r\n  }\r\n  \r\n  // ambient lights\r\n  var irradiance: vec3f = vec3(0.0);\r\n  RE_IndirectDiffuse(irradiance, diffuseColor, &reflectedLight);\r\n  \r\n  // ambient lights specular\r\n  // var radiance: vec3f = vec3(0.0);\r\n  // RE_IndirectSpecular(radiance, irradiance, normal, diffuseColor, viewDirection, metallic, roughness, &reflectedLight);\r\n  \r\n  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;\r\n  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;\r\n  \r\n  ${useOcclusion ? 'totalIndirect *= occlusion;' : ''}\r\n  \r\n  var outgoingLight: vec3f = totalDirect + totalIndirect;\r\n  \r\n  ${\r\n    toneMapping === 'linear'\r\n      ? 'outgoingLight = linearToOutput3(outgoingLight);'\r\n      : toneMapping === 'khronos'\r\n      ? 'outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));'\r\n      : ''\r\n  }\r\n  \r\n  return outgoingLight;\r\n}\r\n`\r\n","import { getPBRDirect, pbrUtils } from './pbr-shading'\r\nimport { toneMappingUtils } from './tone-mapping-utils'\r\nimport { applyDirectionalShadows, applyPointShadows, getPCFShadows } from './shadows'\r\nimport { GetShadingParams } from './lambert-shading'\r\n\r\n/** Helper function chunk appended internally and used to compute IBL indirect light contributions, based on environment diffuse and specular maps. Image Based Lightning also use {@link getPBRDirect | PBR direct light contributions}. */\r\n// we could either compute the indirect contribution directly inside getIBLIndirect()\r\n// or compute IBL radiance (specular) and irradiance (diffuse) factors\r\n// and use them inside RE_IndirectSpecular() later to apply scattering\r\n// first solution seems to be more realistic for now\r\nexport const getIBLIndirect = /* wgsl */ `\r\n// struct IBLIndirect {\r\n//   diffuse: vec3f,\r\n//   specular: vec3f\r\n// }\r\n\r\nfn getIBLIndirect(\r\n  normal: vec3f,\r\n  viewDirection: vec3f,\r\n  roughness: f32,\r\n  metallic: f32,\r\n  diffuseColor: vec3f,\r\n  f0: vec3f,\r\n  clampSampler: sampler,\r\n  lutTexture: texture_2d<f32>,\r\n  envSpecularTexture: texture_cube<f32>,\r\n  envDiffuseTexture: texture_cube<f32>,\r\n  ptr_reflectedLight: ptr<function, ReflectedLight>,\r\n  // ptr_iblIndirect: ptr<function, IBLIndirect>\r\n) {\r\n  let N: vec3f = normalize(normal);\r\n  let V: vec3f = normalize(viewDirection);\r\n  let NdotV: f32 = clamp(dot(N, V), 0.0, 1.0);\r\n  \r\n  let reflection: vec3f = normalize(reflect(-V, N));\r\n  \r\n  let iblDiffuseColor: vec3f = mix(diffuseColor, vec3(0.0), vec3(metallic));\r\n\r\n  let brdfSamplePoint: vec2f = clamp(vec2(NdotV, roughness), vec2(0.0), vec2(1.0));\r\n  \r\n  let brdf: vec3f = textureSample(\r\n    lutTexture,\r\n    clampSampler,\r\n    brdfSamplePoint\r\n  ).rgb;\r\n\r\n  let Fr: vec3f = max(vec3(1.0 - roughness), f0) - f0;\r\n  let k_S: vec3f = f0 + Fr * pow(1.0 - NdotV, 5.0);\r\n  var FssEss: vec3f = k_S * brdf.x + brdf.y;\r\n  \r\n  // IBL specular (radiance)\r\n  let lod: f32 = roughness * f32(textureNumLevels(envSpecularTexture) - 1);\r\n  \r\n  let specularLight: vec4f = textureSampleLevel(\r\n    envSpecularTexture,\r\n    clampSampler,\r\n    reflection * ibl.envRotation,\r\n    lod\r\n  );\r\n  \r\n  // IBL diffuse (irradiance)\r\n  let diffuseLight: vec4f = textureSample(\r\n    envDiffuseTexture,\r\n    clampSampler,\r\n    normal * ibl.envRotation\r\n  );\r\n  \r\n  // product of specularFactor and specularTexture.a\r\n  let specularWeight: f32 = 1.0;\r\n        \r\n  FssEss = specularWeight * k_S * brdf.x + brdf.y;\r\n  \r\n  let Ems: f32 = (1.0 - (brdf.x + brdf.y));\r\n  let F_avg: vec3f = specularWeight * (f0 + (1.0 - f0) / 21.0);\r\n  let FmsEms: vec3f = Ems * FssEss * F_avg / (1.0 - F_avg * Ems);\r\n  let k_D: vec3f = iblDiffuseColor * (1.0 - FssEss + FmsEms);\r\n  \r\n  (*ptr_reflectedLight).indirectSpecular += specularLight.rgb * FssEss * ibl.specularStrength;\r\n  (*ptr_reflectedLight).indirectDiffuse += (FmsEms + k_D) * diffuseLight.rgb * ibl.diffuseStrength;\r\n  \r\n  // (*ptr_iblIndirect).diffuse = PI * diffuseLight.rgb * ibl.diffuseStrength;\r\n  // (*ptr_iblIndirect).specular = specularLight.rgb * ibl.specularStrength;\r\n}\r\n`\r\n\r\n/**\r\n * Shader chunk to add to the head of a fragment shader to be able to use IBL shading.\r\n * @param parameters - {@link GetShadingParams | parameters} used to append the right chunks and calculate the IBL shading.\r\n *\r\n * @example\r\n * ```wgsl\r\n * var color: vec3f = vec3(1.0);\r\n * color = getIBL(normal, worldPosition, color, viewDirection, f0, metallic, roughness, clampSampler, lutTexture, envSpecularTexture, envDiffuseTexture);\r\n * ```\r\n */\r\nexport const getIBL = (\r\n  { addUtils = true, receiveShadows = false, toneMapping = 'linear', useOcclusion = false } = {} as GetShadingParams\r\n) => /* wgsl */ `\r\n${addUtils ? pbrUtils : ''}\r\n${getPBRDirect}\r\n${getIBLIndirect}\r\n${toneMapping ? toneMappingUtils : ''}\r\n\r\nfn getIBL(\r\n  normal: vec3f,\r\n  worldPosition: vec3f,\r\n  diffuseColor: vec3f,\r\n  viewDirection: vec3f,\r\n  f0: vec3f,\r\n  metallic: f32,\r\n  roughness: f32,\r\n  clampSampler: sampler,\r\n  lutTexture: texture_2d<f32>,\r\n  envSpecularTexture: texture_cube<f32>,\r\n  envDiffuseTexture: texture_cube<f32>,\r\n  ${useOcclusion ? 'occlusion: f32,' : ''}\r\n) -> vec3f {\r\n  var directLight: DirectLight;\r\n  var reflectedLight: ReflectedLight;\r\n  \r\n  ${receiveShadows ? getPCFShadows : ''}\r\n\r\n  // point lights\r\n  for(var i = 0; i < pointLights.count; i++) {\r\n    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);\r\n    ${receiveShadows ? applyPointShadows : ''}\r\n    getPBRDirect(normal, diffuseColor, viewDirection, f0, metallic, roughness, directLight, &reflectedLight);\r\n  }\r\n  \r\n  // directional lights\r\n  for(var i = 0; i < directionalLights.count; i++) {\r\n    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);\r\n    ${receiveShadows ? applyDirectionalShadows : ''}\r\n    getPBRDirect(normal, diffuseColor, viewDirection, f0, metallic, roughness, directLight, &reflectedLight);\r\n  }\r\n  \r\n  var irradiance: vec3f = vec3(0.0);\r\n  var radiance: vec3f = vec3(0.0);\r\n  \r\n  // var iblIndirect: IBLIndirect;\r\n  \r\n  // IBL\r\n  getIBLIndirect(\r\n    normal,\r\n    viewDirection,\r\n    roughness,\r\n    metallic,\r\n    diffuseColor,\r\n    f0,\r\n    clampSampler,\r\n    lutTexture,\r\n    envSpecularTexture,\r\n    envDiffuseTexture,\r\n    &reflectedLight,\r\n    // &iblIndirect\r\n  );\r\n  \r\n  // irradiance += iblIndirect.diffuse;\r\n  // radiance += iblIndirect.specular;\r\n  \r\n  // ambient lights\r\n  RE_IndirectDiffuse(irradiance, diffuseColor, &reflectedLight);\r\n  \r\n  // ambient lights specular\r\n  // RE_IndirectSpecular(radiance, irradiance, normal, diffuseColor, viewDirection, metallic, roughness, &reflectedLight);  \r\n  \r\n  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;\r\n  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;\r\n  \r\n  ${useOcclusion ? 'totalIndirect *= occlusion;' : ''}\r\n  \r\n  var outgoingLight: vec3f = totalDirect + totalIndirect;\r\n  \r\n  ${\r\n    toneMapping === 'linear'\r\n      ? 'outgoingLight = linearToOutput3(outgoingLight);'\r\n      : toneMapping === 'khronos'\r\n      ? 'outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));'\r\n      : ''\r\n  }\r\n  \r\n  return outgoingLight;\r\n}\r\n`\r\n","import { ProjectedObject3D } from '../../core/objects3D/ProjectedObject3D'\r\nimport { GPUCurtainsRenderer } from '../renderers/GPUCurtainsRenderer'\r\nimport { GPUCurtains } from '../GPUCurtains'\r\nimport { isCurtainsRenderer } from '../../core/renderers/utils'\r\nimport { DOMElement, DOMElementBoundingRect, DOMElementParams, DOMPosition, RectBBox } from '../../core/DOM/DOMElement'\r\nimport { Vec2 } from '../../math/Vec2'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { Object3DTransforms } from '../../core/objects3D/Object3D'\r\nimport { Box3 } from '../../math/Box3'\r\n\r\n/** Defines the {@link DOMObject3D} bounding boxes in both document and world spaces */\r\nexport interface DOMObject3DSize {\r\n  /** Whether we should update the computed sizes before updating the matrices. */\r\n  shouldUpdate: boolean\r\n  /** Normalized world size represent the size ratio of the DOM element compared to its container (the renderer DOM element). */\r\n  normalizedWorld: {\r\n    /** 2D size of the {@link DOMObject3D} relative to the document, in the [0, 1] range. */\r\n    size: Vec2\r\n    /** 2D position of the {@link DOMObject3D} relative to the document, in the [-1, 1] range, [0, 0] being at the container center. */\r\n    position: Vec2\r\n  }\r\n  /** Camera world size and position are the {@link normalizedWorld} size and positions accounting for camera screen ratio (visible height / width in world unit) */\r\n  cameraWorld: {\r\n    /** 2D size of the {@link DOMObject3D} relative to the camera field of view and size. */\r\n    size: Vec2\r\n  }\r\n  /** Scaled world size and position are the {@link cameraWorld} size and position scaled by the geometry bounding box, because the geometry vertices are not always in the [-1, 1] range. */\r\n  scaledWorld: {\r\n    /** 3D size of the {@link DOMObject3D} relative to the camera field of view and size and the geometry bounding box. */\r\n    size: Vec3\r\n    /** 3D position of the {@link DOMObject3D} relative to the camera field of view and size and the normalized coordinates. */\r\n    position: Vec3\r\n  }\r\n}\r\n\r\n/**\r\n * Defines all necessary {@link Vec3 | vectors}/{@link math/Quat.Quat | quaternions} to compute a 3D {@link math/Mat4.Mat4 | model matrix} based on a DOM {@link HTMLElement}\r\n */\r\nexport interface DOMObject3DTransforms extends Omit<Object3DTransforms, 'origin' | 'position'> {\r\n  /** Transformation origin object */\r\n  origin: {\r\n    /** Transformation origin {@link Vec3 | vector} relative to the {@link DOMObject3D} */\r\n    model: Vec3\r\n    /** Transformation origin {@link Vec3 | vector} relative to the 3D world */\r\n    world: Vec3\r\n  }\r\n  /** Position object */\r\n  position: {\r\n    /** Position {@link Vec3 | vector} relative to the 3D world */\r\n    world: Vec3\r\n    /** Additional translation {@link Vec3 | vector} relative to the DOM document */\r\n    document: Vec3\r\n  }\r\n}\r\n\r\n/**\r\n * Parameters used to create a {@link DOMObject3D}\r\n */\r\nexport interface DOMObject3DParams {\r\n  /** Whether to automatically update the {@link DOMObject3D} document and world positions on scroll */\r\n  watchScroll?: boolean\r\n}\r\n\r\n/**\r\n * This special kind of {@link ProjectedObject3D} uses an {@link HTMLElement} to convert the corresponding X and Y {@link DOMObject3D#scale | scale} and {@link DOMObject3D#position | position} relative to the 3D world space.\r\n *\r\n * Internally used by the {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh} and {@link curtains/meshes/Plane.Plane | Plane}, but can also be used as any {@link core/meshes/Mesh.Mesh | Mesh} {@link parent} to map it with an {@link HTMLElement} size and position values.\r\n */\r\nexport class DOMObject3D extends ProjectedObject3D {\r\n  /** {@link GPUCurtainsRenderer} used to create this {@link DOMObject3D} */\r\n  renderer: GPUCurtainsRenderer\r\n\r\n  /** Defines the {@link DOMObject3D} bounding boxes in both document and world spaces */\r\n  size: DOMObject3DSize\r\n  /** {@link DOMElement} used to track the given {@link HTMLElement} size change */\r\n  domElement: DOMElement\r\n\r\n  /** Whether to automatically update the {@link DOMObject3D} document and world positions on scroll */\r\n  watchScroll: boolean\r\n\r\n  /** {@link DOMObject3DTransforms | Transformation object} of the {@link DOMObject3D} */\r\n  transforms: DOMObject3DTransforms\r\n\r\n  /** Private {@link Vec3 | vector} used to keep track of the actual {@link DOMObject3DTransforms#position.world | world position} accounting the {@link DOMObject3DTransforms#position.document | additional document translation} converted into world space */\r\n  #DOMObjectWorldPosition: Vec3 = new Vec3()\r\n  /** Private {@link Vec3 | vector} used to keep track of the actual {@link DOMObject3D} world scale accounting the {@link DOMObject3D#size.world | DOMObject3D world size} */\r\n  #DOMObjectWorldScale: Vec3 = new Vec3(1)\r\n  /** Private number representing the scale ratio of the {@link DOMObject3D} along Z axis to apply. Since it can be difficult to guess the most accurate scale along the Z axis of an object mapped to 2D coordinates, this helps with adjusting the scale along the Z axis. */\r\n  #DOMObjectDepthScaleRatio: number = 1\r\n\r\n  /** Helper {@link Box3 | bounding box} used to map the 3D object onto the 2D DOM element. */\r\n  boundingBox: Box3 = new Box3(new Vec3(-1), new Vec3(1))\r\n\r\n  /** function assigned to the {@link onAfterDOMElementResize} callback */\r\n  _onAfterDOMElementResizeCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n\r\n  /**\r\n   * DOMObject3D constructor\r\n   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link DOMObject3D}\r\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link DOMObject3D}\r\n   * @param parameters - {@link DOMObject3DParams | parameters} used to create this {@link DOMObject3D}\r\n   */\r\n  constructor(\r\n    renderer: GPUCurtainsRenderer | GPUCurtains,\r\n    element: DOMElementParams['element'],\r\n    parameters: DOMObject3DParams = {}\r\n  ) {\r\n    super(renderer)\r\n\r\n    renderer = isCurtainsRenderer(renderer, 'DOM3DObject')\r\n\r\n    this.renderer = renderer\r\n\r\n    this.size = {\r\n      shouldUpdate: true,\r\n      normalizedWorld: {\r\n        size: new Vec2(1),\r\n        position: new Vec2(),\r\n      },\r\n      cameraWorld: {\r\n        size: new Vec2(1),\r\n      },\r\n      scaledWorld: {\r\n        size: new Vec3(1),\r\n        position: new Vec3(),\r\n      },\r\n    }\r\n\r\n    this.watchScroll = parameters.watchScroll\r\n\r\n    this.camera = this.renderer.camera\r\n\r\n    this.boundingBox.min.onChange(() => this.shouldUpdateComputedSizes())\r\n    this.boundingBox.max.onChange(() => this.shouldUpdateComputedSizes())\r\n\r\n    this.setDOMElement(element)\r\n    ;(this.renderer as GPUCurtainsRenderer).domObjects.push(this)\r\n  }\r\n\r\n  /**\r\n   * Set the {@link domElement | DOM Element}\r\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\r\n   */\r\n  setDOMElement(element: DOMElementParams['element']) {\r\n    this.domElement = new DOMElement({\r\n      element,\r\n      onSizeChanged: (boundingRect) => this.resize(boundingRect),\r\n      onPositionChanged: () => this.onPositionChanged(),\r\n    })\r\n\r\n    // eagerly set size and position\r\n    this.updateSizeAndPosition()\r\n  }\r\n\r\n  /**\r\n   * Update size and position when the {@link domElement | DOM Element} position changed\r\n   */\r\n  onPositionChanged() {\r\n    if (this.watchScroll) {\r\n      this.shouldUpdateComputedSizes()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the {@link domElement | DOMElement}\r\n   * @param element - the new {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\r\n   */\r\n  resetDOMElement(element: string | HTMLElement) {\r\n    if (this.domElement) {\r\n      this.domElement.destroy()\r\n    }\r\n\r\n    this.setDOMElement(element)\r\n  }\r\n\r\n  /**\r\n   * Resize the {@link DOMObject3D}\r\n   * @param boundingRect - new {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}\r\n   */\r\n  resize(boundingRect: DOMElementBoundingRect | null = null) {\r\n    if (!boundingRect && (!this.domElement || this.domElement?.isResizing)) return\r\n\r\n    // update size and position eagerly on resize\r\n    // so we have new values in the callbacks\r\n    this.updateSizeAndPosition()\r\n\r\n    this._onAfterDOMElementResizeCallback && this._onAfterDOMElementResizeCallback()\r\n  }\r\n\r\n  /* BOUNDING BOXES GETTERS */\r\n\r\n  /**\r\n   * Get the {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}\r\n   * @readonly\r\n   */\r\n  get boundingRect(): DOMElementBoundingRect {\r\n    return (\r\n      this.domElement?.boundingRect ?? {\r\n        width: 1,\r\n        height: 1,\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n        x: 0,\r\n        y: 0,\r\n      }\r\n    )\r\n  }\r\n\r\n  /* TRANSFOMS */\r\n\r\n  /**\r\n   * Set our transforms properties and {@link Vec3#onChange | onChange vector} callbacks\r\n   */\r\n  setTransforms() {\r\n    super.setTransforms()\r\n\r\n    // reset our model transform origin to reflect CSS transform origins\r\n    this.transforms.origin.model.set(0.5, 0.5, 0)\r\n\r\n    this.transforms.origin.world = new Vec3()\r\n    this.transforms.position.document = new Vec3()\r\n\r\n    this.documentPosition.onChange(() => this.applyPosition())\r\n    this.transformOrigin.onChange(() => this.setWorldTransformOrigin())\r\n  }\r\n\r\n  /**\r\n   * Get the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}\r\n   */\r\n  get documentPosition(): Vec3 {\r\n    return this.transforms.position.document\r\n  }\r\n\r\n  /**\r\n   * Set the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}\r\n   * @param value - additional translation relative to the document to apply\r\n   */\r\n  set documentPosition(value: Vec3) {\r\n    this.transforms.position.document = value\r\n    this.applyPosition()\r\n  }\r\n\r\n  /**\r\n   * Get the {@link domElement | DOM element} scale in world space\r\n   * @readonly\r\n   */\r\n  get DOMObjectWorldScale(): Vec3 {\r\n    return this.#DOMObjectWorldScale.clone()\r\n  }\r\n\r\n  /**\r\n   * Get the {@link DOMObject3D} scale in world space (accounting for {@link scale})\r\n   * @readonly\r\n   */\r\n  get worldScale(): Vec3 {\r\n    return this.DOMObjectWorldScale.multiply(this.scale)\r\n  }\r\n\r\n  /**\r\n   * Get the {@link DOMObject3D} position in world space\r\n   * @readonly\r\n   */\r\n  get worldPosition(): Vec3 {\r\n    return this.#DOMObjectWorldPosition.clone()\r\n  }\r\n\r\n  /**\r\n   * Get the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}\r\n   */\r\n  get transformOrigin(): Vec3 {\r\n    return this.transforms.origin.model\r\n  }\r\n\r\n  /**\r\n   * Set the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}\r\n   * @param value - new transform origin\r\n   */\r\n  set transformOrigin(value: Vec3) {\r\n    this.transforms.origin.model = value\r\n    this.setWorldTransformOrigin()\r\n  }\r\n\r\n  /**\r\n   * Get the {@link DOMObject3D} transform origin in world space\r\n   */\r\n  get worldTransformOrigin(): Vec3 {\r\n    return this.transforms.origin.world\r\n  }\r\n\r\n  /**\r\n   * Set the {@link DOMObject3D} transform origin in world space\r\n   * @param value - new world space transform origin\r\n   */\r\n  set worldTransformOrigin(value: Vec3) {\r\n    this.transforms.origin.world = value\r\n  }\r\n\r\n  /**\r\n   * Check whether at least one of the matrix should be updated\r\n   */\r\n  shouldUpdateMatrices() {\r\n    super.shouldUpdateMatrices()\r\n\r\n    if (this.matricesNeedUpdate || this.size.shouldUpdate) {\r\n      this.updateSizeAndPosition()\r\n      this.matricesNeedUpdate = true\r\n    }\r\n\r\n    this.size.shouldUpdate = false\r\n  }\r\n\r\n  /**\r\n   * Set the {@link DOMObject3D#size.shouldUpdate | size shouldUpdate} flag to true to compute the new sizes before next matrices calculations.\r\n   */\r\n  shouldUpdateComputedSizes() {\r\n    this.size.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Update the {@link DOMObject3D} sizes and position\r\n   */\r\n  updateSizeAndPosition() {\r\n    this.setWorldSizes()\r\n    this.applyDocumentPosition()\r\n    this.shouldUpdateModelMatrix()\r\n  }\r\n\r\n  /**\r\n   * Compute the {@link DOMObject3D} world position using its world position and document translation converted to world space\r\n   */\r\n  applyDocumentPosition() {\r\n    // avoid unnecessary calculations if we don't have a users set relative position\r\n    let worldPosition = new Vec3(0, 0, 0)\r\n    if (!this.documentPosition.equals(worldPosition)) {\r\n      worldPosition = this.documentToWorldSpace(this.documentPosition)\r\n    }\r\n\r\n    this.#DOMObjectWorldPosition.set(\r\n      this.position.x + this.size.scaledWorld.position.x + worldPosition.x,\r\n      this.position.y + this.size.scaledWorld.position.y + worldPosition.y,\r\n      this.position.z + this.size.scaledWorld.position.z + this.documentPosition.z / this.camera.CSSPerspective\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Apply the transform origin and set the {@link DOMObject3D} world transform origin\r\n   */\r\n  applyTransformOrigin() {\r\n    if (!this.size) return\r\n\r\n    this.setWorldTransformOrigin()\r\n\r\n    super.applyTransformOrigin()\r\n  }\r\n\r\n  /* MATRICES */\r\n\r\n  /**\r\n   * Update the {@link modelMatrix | model matrix} accounting the {@link DOMObject3D} world position and {@link DOMObject3D} world scale\r\n   */\r\n  updateModelMatrix() {\r\n    // override for this special case\r\n    // compose our model transformation matrix from custom origin\r\n    this.modelMatrix.composeFromOrigin(\r\n      this.#DOMObjectWorldPosition,\r\n      this.quaternion,\r\n      this.scale,\r\n      this.worldTransformOrigin\r\n    )\r\n\r\n    // we need to scale our meshes at least on X and Y axis, from a square to a right sized rectangle\r\n    // we're doing this after our transformation matrix because this scale transformation always have the same origin\r\n    this.modelMatrix.scale(this.DOMObjectWorldScale)\r\n\r\n    this.shouldUpdateWorldMatrix()\r\n  }\r\n\r\n  /**\r\n   * Convert a document position {@link Vec3 | vector} to a world position {@link Vec3 | vector}\r\n   * @param vector - document position {@link Vec3 | vector} converted to world space\r\n   */\r\n  documentToWorldSpace(vector: Vec3 = new Vec3()): Vec3 {\r\n    return new Vec3(\r\n      ((vector.x * this.renderer.pixelRatio) / this.renderer.boundingRect.width) * this.camera.visibleSize.width,\r\n      -((vector.y * this.renderer.pixelRatio) / this.renderer.boundingRect.height) * this.camera.visibleSize.height,\r\n      vector.z\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Compute the {@link DOMObject3D#size | world sizes}\r\n   */\r\n  computeWorldSizes() {\r\n    const containerBoundingRect = this.renderer.boundingRect\r\n\r\n    // dimensions and positions of our plane in the document and clip spaces\r\n    // don't forget positions in webgl space are referring to the center of our plane and canvas\r\n    const planeCenter = {\r\n      x: this.boundingRect.width / 2 + this.boundingRect.left,\r\n      y: this.boundingRect.height / 2 + this.boundingRect.top,\r\n    }\r\n\r\n    const containerCenter = {\r\n      x: containerBoundingRect.width / 2 + containerBoundingRect.left,\r\n      y: containerBoundingRect.height / 2 + containerBoundingRect.top,\r\n    }\r\n\r\n    // not always ranging from -1 to 1!\r\n    const { size, center } = this.boundingBox\r\n    if (size.x !== 0 && size.y !== 0 && size.z !== 0) {\r\n      center.divide(size)\r\n    }\r\n\r\n    // normalized world size represent the size ratio of the DOM element compared to its container (the renderer DOM element)\r\n    // in the [0, 1] range\r\n    this.size.normalizedWorld.size.set(\r\n      this.boundingRect.width / containerBoundingRect.width,\r\n      this.boundingRect.height / containerBoundingRect.height\r\n    )\r\n\r\n    // normalized world position represent the position of the DOM element compared to its container (the renderer DOM element)\r\n    // in the [-1, 1] range, [0, 0] being the center of the container\r\n    this.size.normalizedWorld.position.set(\r\n      (planeCenter.x - containerCenter.x) / containerBoundingRect.width,\r\n      (containerCenter.y - planeCenter.y) / containerBoundingRect.height\r\n    )\r\n\r\n    // camera world size and position are the normalized world size and positions accounting for camera screen ratio (visible height / width in world unit).\r\n    this.size.cameraWorld.size.set(\r\n      this.size.normalizedWorld.size.x * this.camera.visibleSize.width,\r\n      this.size.normalizedWorld.size.y * this.camera.visibleSize.height\r\n    )\r\n\r\n    // scaled world size and position are the camera world size and position scaled by the geometry bounding box\r\n    // because the geometry vertices do not always have a [-1, 1] range\r\n    this.size.scaledWorld.size.set(this.size.cameraWorld.size.x / size.x, this.size.cameraWorld.size.y / size.y, 1)\r\n\r\n    // Z size is based on Y component, because with a perspective camera, the width is based upon the height\r\n    // we could still adjust with #DOMObjectDepthScaleRatio\r\n    this.size.scaledWorld.size.z =\r\n      this.size.scaledWorld.size.y * (size.x / size.y / (this.boundingRect.width / this.boundingRect.height))\r\n\r\n    // our scaled world position is the normalized position multiplied by the camera screen ratio\r\n    this.size.scaledWorld.position.set(\r\n      this.size.normalizedWorld.position.x * this.camera.visibleSize.width,\r\n      this.size.normalizedWorld.position.y * this.camera.visibleSize.height,\r\n      0\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Compute and set the {@link DOMObject3D#size.world | world size} and set the {@link DOMObject3D} world transform origin\r\n   */\r\n  setWorldSizes() {\r\n    this.computeWorldSizes()\r\n    this.setWorldScale()\r\n    this.setWorldTransformOrigin()\r\n  }\r\n\r\n  /**\r\n   * Set the {@link worldScale} accounting for scaled world size and {@link DOMObjectDepthScaleRatio}\r\n   */\r\n  setWorldScale() {\r\n    this.#DOMObjectWorldScale.set(\r\n      this.size.scaledWorld.size.x,\r\n      this.size.scaledWorld.size.y,\r\n      this.size.scaledWorld.size.z * this.#DOMObjectDepthScaleRatio\r\n    )\r\n\r\n    this.shouldUpdateMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Set {@link DOMObjectDepthScaleRatio}. Since it can be difficult to guess the most accurate scale along the Z axis of an object mapped to 2D coordinates, this helps with adjusting the scale along the Z axis.\r\n   * @param value - depth scale ratio value to use\r\n   */\r\n  set DOMObjectDepthScaleRatio(value: number) {\r\n    this.#DOMObjectDepthScaleRatio = value\r\n\r\n    this.setWorldScale()\r\n  }\r\n\r\n  /**\r\n   * Set the {@link DOMObject3D} world transform origin and tell the matrices to update\r\n   */\r\n  setWorldTransformOrigin() {\r\n    // set transformation origin relative to world space as well\r\n    this.transforms.origin.world = new Vec3(\r\n      (this.transformOrigin.x * 2 - 1) * // between -1 and 1\r\n        this.#DOMObjectWorldScale.x,\r\n      -(this.transformOrigin.y * 2 - 1) * // between -1 and 1\r\n        this.#DOMObjectWorldScale.y,\r\n      this.transformOrigin.z * this.#DOMObjectWorldScale.z\r\n    )\r\n\r\n    this.shouldUpdateMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Update the {@link domElement | DOM Element} scroll position\r\n   * @param delta - last {@link utils/ScrollManager.ScrollManager.delta | scroll delta values}\r\n   */\r\n  updateScrollPosition(delta: DOMPosition = { x: 0, y: 0 }) {\r\n    // actually update the plane position only if last X delta or last Y delta is not equal to 0\r\n    if (delta.x || delta.y) {\r\n      // set new positions based on our delta without triggering reflow\r\n      this.domElement.updateScrollPosition(delta)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback to execute just after the {@link domElement} has been resized.\r\n   * @param callback - callback to run just after {@link domElement} has been resized\r\n   * @returns - our {@link DOMObject3D}\r\n   */\r\n  onAfterDOMElementResize(callback: () => void): DOMObject3D {\r\n    if (callback) {\r\n      this._onAfterDOMElementResizeCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link DOMObject3D}\r\n   */\r\n  destroy() {\r\n    super.destroy()\r\n    this.domElement?.destroy()\r\n  }\r\n}\r\n","import { DOMObject3D } from '../objects3D/DOMObject3D'\r\nimport { isCurtainsRenderer } from '../../core/renderers/utils'\r\nimport { ProjectedMeshBaseMixin } from '../../core/meshes/mixins/ProjectedMeshBaseMixin'\r\nimport { MeshBaseRenderParams } from '../../core/meshes/mixins/MeshBaseMixin'\r\nimport { throwWarning } from '../../utils/utils'\r\nimport { GPUCurtainsRenderer } from '../renderers/GPUCurtainsRenderer'\r\nimport { GPUCurtains } from '../GPUCurtains'\r\nimport { DOMTexture } from '../../core/textures/DOMTexture'\r\nimport { AllowedGeometries } from '../../types/Materials'\r\nimport { DOMElementBoundingRect, DOMElementParams } from '../../core/DOM/DOMElement'\r\n\r\n/**\r\n * Base parameters to create a {@link DOMMesh}\r\n */\r\nexport interface DOMMeshBaseParams extends MeshBaseRenderParams {\r\n  /** Whether to automatically create a {@link DOMTexture} for all {@link HTMLImageElement}, {@link HTMLVideoElement} and {@link HTMLCanvasElement} child of the specified {@link DOMMesh} {@link HTMLElement} */\r\n  autoloadSources?: boolean\r\n  /** Whether to automatically update the {@link DOMMesh} position on scroll */\r\n  watchScroll?: boolean\r\n}\r\n\r\n/**\r\n * Parameters to create a {@link DOMMesh}\r\n */\r\nexport interface DOMMeshParams extends DOMMeshBaseParams {\r\n  /** {@link core/geometries/Geometry.Geometry | Geometry} to use with the {@link DOMMesh} */\r\n  geometry: AllowedGeometries\r\n}\r\n\r\n/** @const - default {@link DOMMesh} parameters */\r\nconst defaultDOMMeshParams = {\r\n  autoloadSources: true,\r\n  watchScroll: true,\r\n} as DOMMeshBaseParams\r\n\r\n/**\r\n * Create a {@link core/meshes/Mesh.Mesh | Mesh} based on a {@link DOMObject3D}, which allow the {@link core/meshes/Mesh.Mesh | Mesh} to be scaled and positioned based on a {@link HTMLElement} {@link DOMElementBoundingRect | bounding rectangle}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a DOMMesh with a box geometry,\r\n * // assuming there's a HTML element with the \"mesh\" ID in the DOM\r\n * // will use the normals colors as default shading\r\n * const domMesh = new DOMMesh(gpuCurtains, '#mesh', {\r\n *   label: 'My DOM Mesh',\r\n *   geometry: new BoxGeometry(),\r\n * })\r\n * ```\r\n */\r\nexport class DOMMesh extends ProjectedMeshBaseMixin(DOMObject3D) {\r\n  /** {@link GPUCurtainsRenderer} used to create this {@link DOMObject3D} */\r\n  renderer: GPUCurtainsRenderer\r\n  /** Whether to automatically create a {@link DOMTexture} for all {@link HTMLImageElement}, {@link HTMLVideoElement} and {@link HTMLCanvasElement} child of the specified {@link DOMMesh} {@link HTMLElement} */\r\n  autoloadSources: boolean\r\n  /** Whether all the sources have been successfully loaded */\r\n  _sourcesReady: boolean\r\n\r\n  // callbacks / events\r\n  /** function assigned to the {@link onLoading} callback */\r\n  _onLoadingCallback = (texture: DOMTexture): void => {\r\n    /* allow empty callback */\r\n  }\r\n\r\n  /**\r\n   * DOMMesh constructor\r\n   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link DOMMesh}\r\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link DOMMesh}\r\n   * @param parameters - {@link DOMMeshParams | parameters} used to create this {@link DOMMesh}\r\n   */\r\n  constructor(\r\n    renderer: GPUCurtainsRenderer | GPUCurtains,\r\n    element: DOMElementParams['element'],\r\n    parameters: DOMMeshParams\r\n  ) {\r\n    super(renderer, element, { ...defaultDOMMeshParams, ...parameters })\r\n\r\n    parameters = { ...defaultDOMMeshParams, ...parameters }\r\n\r\n    isCurtainsRenderer(renderer, parameters.label ? parameters.label + ' DOMMesh' : 'DOMMesh')\r\n\r\n    this.type = 'DOMMesh'\r\n\r\n    const { autoloadSources } = parameters\r\n\r\n    this.autoloadSources = autoloadSources\r\n\r\n    this.sourcesReady = false\r\n    this.setInitSources()\r\n  }\r\n\r\n  /**\r\n   * Get/set whether our {@link material} and {@link geometry} are ready\r\n   * @readonly\r\n   */\r\n  get ready(): boolean {\r\n    return this._ready\r\n  }\r\n\r\n  set ready(value: boolean) {\r\n    if (value && !this._ready && this.sourcesReady) {\r\n      this._onReadyCallback && this._onReadyCallback()\r\n    }\r\n\r\n    this._ready = value\r\n  }\r\n\r\n  /**\r\n   * Get/set whether all the initial {@link DOMMesh} sources have been successfully loaded\r\n   * @readonly\r\n   */\r\n  get sourcesReady(): boolean {\r\n    return this._sourcesReady\r\n  }\r\n\r\n  set sourcesReady(value: boolean) {\r\n    if (value && !this._sourcesReady && this.ready) {\r\n      this._onReadyCallback && this._onReadyCallback()\r\n    }\r\n\r\n    this._sourcesReady = value\r\n  }\r\n\r\n  /**\r\n   * Add a {@link DOMMesh} to the {@link core/scenes/Scene.Scene | Scene} and optionally to the renderer.\r\n   * @param addToRenderer - whether to add this {@link DOMMesh} to the {@link GPUCurtainsRenderer#meshes | renderer meshes array} and {@link GPUCurtainsRenderer#domMeshes | renderer domMeshes array}\r\n   */\r\n  addToScene(addToRenderer = false) {\r\n    super.addToScene(addToRenderer)\r\n\r\n    if (addToRenderer) {\r\n      ;(this.renderer as GPUCurtainsRenderer).domMeshes.push(this)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link DOMMesh} from the {@link core/scenes/Scene.Scene | Scene} and optionally from the renderer as well.\r\n   * @param removeFromRenderer - whether to remove this {@link DOMMesh} from the {@link GPUCurtainsRenderer#meshes | renderer meshes array} and {@link GPUCurtainsRenderer#domMeshes | renderer domMeshes array}\r\n   */\r\n  removeFromScene(removeFromRenderer = false) {\r\n    super.removeFromScene(removeFromRenderer)\r\n\r\n    if (removeFromRenderer) {\r\n      ;(this.renderer as GPUCurtainsRenderer).domMeshes = (this.renderer as GPUCurtainsRenderer).domMeshes.filter(\r\n        (m) => m.uuid !== this.uuid\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load initial {@link DOMMesh} sources if needed and create associated {@link DOMTexture}\r\n   */\r\n  setInitSources() {\r\n    let loaderSize = 0\r\n    let sourcesLoaded = 0\r\n\r\n    if (this.autoloadSources) {\r\n      const images = this.domElement.element.querySelectorAll('img')\r\n      const videos = this.domElement.element.querySelectorAll('video')\r\n      const canvases = this.domElement.element.querySelectorAll('canvas')\r\n\r\n      loaderSize = images.length + videos.length + canvases.length\r\n\r\n      const onSourceUploaded = (texture) => {\r\n        sourcesLoaded++\r\n\r\n        this._onLoadingCallback && this._onLoadingCallback(texture)\r\n\r\n        if (sourcesLoaded === loaderSize) {\r\n          this.sourcesReady = true\r\n        }\r\n      }\r\n\r\n      if (!loaderSize) {\r\n        this.sourcesReady = true\r\n      }\r\n\r\n      // load images\r\n      if (images.length) {\r\n        images.forEach((image) => {\r\n          const texture = this.createDOMTexture({\r\n            name: image.getAttribute('data-texture-name') ?? 'texture' + this.domTextures.length,\r\n          })\r\n\r\n          texture.onSourceUploaded(() => onSourceUploaded(texture)).loadImage(image.src)\r\n        })\r\n      }\r\n\r\n      // load videos\r\n      if (videos.length) {\r\n        videos.forEach((video) => {\r\n          const texture = this.createDOMTexture({\r\n            name: video.getAttribute('data-texture-name') ?? 'texture' + this.domTextures.length,\r\n          })\r\n\r\n          texture.onSourceUploaded(() => onSourceUploaded(texture)).loadVideo(video)\r\n        })\r\n      }\r\n\r\n      // load canvases\r\n      if (canvases.length) {\r\n        canvases.forEach((canvas) => {\r\n          const texture = this.createDOMTexture({\r\n            name: canvas.getAttribute('data-texture-name') ?? 'texture' + this.domTextures.length,\r\n          })\r\n\r\n          texture.onSourceUploaded(() => onSourceUploaded(texture)).loadCanvas(canvas)\r\n        })\r\n      }\r\n    } else {\r\n      this.sourcesReady = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset/change the {@link domElement | DOM Element}\r\n   * @param element - new {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\r\n   */\r\n  resetDOMElement(element: string | HTMLElement) {\r\n    if (!!element) {\r\n      super.resetDOMElement(element)\r\n    } else if (!element && !this.renderer.production) {\r\n      throwWarning(\r\n        `${this.options.label}: You are trying to reset a ${this.type} with a HTML element that does not exist. The old HTML element will be kept instead.`\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get our {@link DOMMesh#domElement | DOM Element} {@link core/DOM/DOMElement.DOMElement#boundingRect | bounding rectangle} accounting for current {@link core/renderers/GPURenderer.GPURenderer#pixelRatio | renderer pixel ratio}\r\n   */\r\n  get pixelRatioBoundingRect(): DOMElementBoundingRect {\r\n    const devicePixelRatio = window.devicePixelRatio ?? 1\r\n    const scaleBoundingRect = this.renderer.pixelRatio / devicePixelRatio\r\n\r\n    return Object.keys(this.domElement.boundingRect).reduce(\r\n      (a, key) => ({ ...a, [key]: this.domElement.boundingRect[key] * scaleBoundingRect }),\r\n      {\r\n        x: 0,\r\n        y: 0,\r\n        width: 0,\r\n        height: 0,\r\n        top: 0,\r\n        right: 0,\r\n        bottom: 0,\r\n        left: 0,\r\n      }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Compute the Mesh geometry if needed\r\n   */\r\n  computeGeometry() {\r\n    super.computeGeometry()\r\n    this.boundingBox.copy(this.geometry.boundingBox)\r\n  }\r\n\r\n  /* EVENTS */\r\n\r\n  /**\r\n   * Called each time one of the initial sources associated {@link DOMTexture#texture | GPU texture} has been uploaded to the GPU\r\n   * @param callback - callback to call each time a {@link DOMTexture#texture | GPU texture} has been uploaded to the GPU\r\n   * @returns - our {@link DOMMesh}\r\n   */\r\n  onLoading(callback: (texture: DOMTexture) => void): DOMMesh {\r\n    if (callback) {\r\n      this._onLoadingCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n}\r\n","import { isCurtainsRenderer } from '../../core/renderers/utils'\r\nimport { PlaneGeometry, PlaneGeometryParams } from '../../core/geometries/PlaneGeometry'\r\nimport { DOMMesh, DOMMeshBaseParams, DOMMeshParams } from './DOMMesh'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { Vec2 } from '../../math/Vec2'\r\nimport { cacheManager } from '../../utils/CacheManager'\r\nimport { GPUCurtainsRenderer } from '../renderers/GPUCurtainsRenderer'\r\nimport { GPUCurtains } from '../GPUCurtains'\r\nimport { DOMElementParams } from '../../core/DOM/DOMElement'\r\n\r\n/**\r\n * Parameters used to create a {@link Plane}\r\n */\r\nexport interface PlaneParams extends DOMMeshBaseParams, PlaneGeometryParams {\r\n  /** Optional {@link PlaneGeometry} to use */\r\n  geometry?: PlaneGeometry\r\n}\r\n\r\n/** @const - default {@link Plane} parameters */\r\nconst defaultPlaneParams = {\r\n  label: 'Plane',\r\n\r\n  // geometry\r\n  instancesCount: 1,\r\n  vertexBuffers: [],\r\n} as PlaneParams\r\n\r\n/**\r\n * Used to create a special {@link DOMMesh} class object using a {@link PlaneGeometry}.\r\n * This means a quad that looks like an ordinary {@link HTMLElement} but with WebGPU rendering capabilities.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a Plane,\r\n * // assuming there's a HTML element with the \"plane\" ID in the DOM\r\n * // will use the normals colors as default shading\r\n * const plane = new Plane(gpuCurtains, '#plane', {\r\n *   label: 'My plane',\r\n * })\r\n * ```\r\n */\r\nexport class Plane extends DOMMesh {\r\n  /**\r\n   * Plane constructor\r\n   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link Plane}\r\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link Plane}\r\n   * @param parameters - {@link PlaneParams | parameters} used to create this {@link Plane}\r\n   */\r\n  constructor(\r\n    renderer: GPUCurtainsRenderer | GPUCurtains,\r\n    element: DOMElementParams['element'],\r\n    parameters = {} as PlaneParams\r\n  ) {\r\n    renderer = isCurtainsRenderer(renderer, parameters.label ? parameters.label + ' Plane' : 'Plane')\r\n\r\n    // assign default params if needed\r\n    const params = { ...defaultPlaneParams, ...parameters }\r\n\r\n    let { geometry, widthSegments, heightSegments, ...DOMMeshParams } = params\r\n    const { instancesCount, vertexBuffers, ...materialParams } = DOMMeshParams\r\n\r\n    // can we get a cached geometry?\r\n    if (!geometry || geometry.type !== 'PlaneGeometry') {\r\n      widthSegments = widthSegments ?? 1\r\n      heightSegments = heightSegments ?? 1\r\n\r\n      const geometryID = widthSegments * heightSegments + widthSegments\r\n\r\n      // if there's no additional vertex buffers, try to get a geometry from cache\r\n      if (!vertexBuffers.length) {\r\n        geometry = cacheManager.getPlaneGeometryByID(geometryID)\r\n      }\r\n\r\n      if (!geometry) {\r\n        // no cached plane geometry, we need to create a new one\r\n        geometry = new PlaneGeometry({ widthSegments, heightSegments, instancesCount, vertexBuffers })\r\n        cacheManager.addPlaneGeometry(geometry as PlaneGeometry)\r\n      } else {\r\n        // if geometry comes from cache, force instances count\r\n        geometry.instancesCount = instancesCount\r\n      }\r\n    }\r\n\r\n    // get DOMMesh params\r\n    super(renderer, element, { geometry, ...materialParams } as DOMMeshParams)\r\n\r\n    this.type = 'Plane'\r\n  }\r\n}\r\n","import { GPUCameraRenderer, GPUCameraRendererParams } from '../../core/renderers/GPUCameraRenderer'\r\nimport { DOMProjectedMesh } from '../../core/renderers/GPURenderer'\r\nimport { DOMObject3D } from '../objects3D/DOMObject3D'\r\n\r\n/**\r\n * This renderer just extends the {@link GPUCameraRenderer} by keeping track of all the created {@link curtains/meshes/DOMMesh.DOMMesh | DOM Meshes}\r\n *\r\n * @example\r\n * ```javascript\r\n * // first, we need a WebGPU device, that's what GPUDeviceManager is for\r\n * const gpuDeviceManager = new GPUDeviceManager({\r\n *   label: 'Custom device manager',\r\n * })\r\n *\r\n * // we need to wait for the WebGPU device to be created\r\n * await gpuDeviceManager.init()\r\n *\r\n * // then we can create a curtains renderer\r\n * const gpuCurtainsRenderer = new GPUCurtainsRenderer({\r\n *   deviceManager: gpuDeviceManager, // we need the WebGPU device to create the renderer context\r\n *   container: document.querySelector('#canvas'),\r\n * })\r\n * ```\r\n */\r\nexport class GPUCurtainsRenderer extends GPUCameraRenderer {\r\n  /** All created {@link curtains/meshes/DOMMesh.DOMMesh | DOM Meshes} and {@link curtains/meshes/Plane.Plane | planes} */\r\n  domMeshes: DOMProjectedMesh[]\r\n  /** All created {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D} which position should be updated on scroll. */\r\n  domObjects: DOMObject3D[]\r\n\r\n  /**\r\n   * GPUCurtainsRenderer constructor\r\n   * @param parameters - {@link GPUCameraRendererParams | parameters} used to create this {@link GPUCurtainsRenderer}\r\n   */\r\n  constructor({\r\n    deviceManager,\r\n    label,\r\n    container,\r\n    pixelRatio = 1,\r\n    autoResize = true,\r\n    context = {},\r\n    renderPass,\r\n    camera,\r\n    lights,\r\n  }: GPUCameraRendererParams) {\r\n    super({\r\n      deviceManager,\r\n      label,\r\n      container,\r\n      pixelRatio,\r\n      autoResize,\r\n      context,\r\n      renderPass,\r\n      camera,\r\n      lights,\r\n    } as GPUCameraRendererParams)\r\n\r\n    this.type = 'GPUCurtainsRenderer'\r\n  }\r\n\r\n  /**\r\n   * Add the {@link GPUCurtainsRenderer#domMeshes | domMeshes} to our tracked elements\r\n   */\r\n  setRendererObjects() {\r\n    super.setRendererObjects()\r\n\r\n    this.domMeshes = []\r\n    this.domObjects = []\r\n  }\r\n\r\n  /**\r\n   * Update the {@link domObjects} sizes and positions when the {@link camera} {@link core/camera/Camera.Camera#position | position} or {@link core/camera/Camera.Camera#size | size} change.\r\n   */\r\n  onCameraMatricesChanged() {\r\n    super.onCameraMatricesChanged()\r\n\r\n    this.domObjects.forEach((domObject) => {\r\n      domObject.updateSizeAndPosition()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Resize the {@link meshes}.\r\n   */\r\n  resizeMeshes() {\r\n    this.meshes.forEach((mesh) => {\r\n      if (!('domElement' in mesh)) {\r\n        // resize meshes that do not have a bound DOM element\r\n        mesh.resize(this.boundingRect)\r\n      }\r\n    })\r\n\r\n    // resize dom objects as well\r\n    this.domObjects.forEach((domObject) => {\r\n      // update position for DOM objects only if they're not currently being resized\r\n      if (!domObject.domElement.isResizing) {\r\n        domObject.domElement.setSize()\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { DOMPosition } from '../core/DOM/DOMElement'\r\n\r\n/**\r\n * Parameters used to create a {@link ScrollManager}\r\n */\r\nexport interface ScrollManagerParams {\r\n  /** Current scroll position */\r\n  scroll?: DOMPosition\r\n  /** Last scroll deltas */\r\n  delta?: DOMPosition\r\n  /** Whether the {@link ScrollManager} should listen to the window scroll event or not */\r\n  shouldWatch?: boolean\r\n  /** Callback to execute each time the {@link ScrollManager#scroll | scroll} values change */\r\n  onScroll?: (delta?: DOMPosition) => void\r\n}\r\n\r\n/**\r\n * Used to keep track of our scroll position, scroll deltas and trigger an onScroll callback.<br>\r\n * Could either listen to the native scroll event or be hooked to any scroll (natural or virtual) scroll event\r\n */\r\nexport class ScrollManager {\r\n  /** Current scroll position */\r\n  scroll: DOMPosition\r\n  /** Last scroll deltas */\r\n  delta: DOMPosition\r\n  /** Whether the {@link ScrollManager} should listen to the window scroll event or not */\r\n  shouldWatch: boolean\r\n  /** Callback to execute each time the {@link scroll} values change */\r\n  onScroll: (delta?: DOMPosition) => void\r\n\r\n  /**\r\n   * ScrollManager constructor\r\n   * @param parameters - {@link ScrollManagerParams | parameters} used to create this {@link ScrollManager}\r\n   */\r\n  constructor({\r\n    scroll = { x: 0, y: 0 },\r\n    delta = { x: 0, y: 0 },\r\n    shouldWatch = true,\r\n    onScroll = (delta: DOMPosition = { x: 0, y: 0 }) => {\r\n      /* allow empty callback */\r\n    },\r\n  }: ScrollManagerParams = {}) {\r\n    this.scroll = scroll\r\n    this.delta = delta\r\n\r\n    this.shouldWatch = shouldWatch\r\n\r\n    this.onScroll = onScroll\r\n\r\n    if (this.shouldWatch) {\r\n      window.addEventListener('scroll', this.setScroll.bind(this), { passive: true })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called by the scroll event listener\r\n   */\r\n  setScroll() {\r\n    this.updateScrollValues({ x: window.pageXOffset, y: window.pageYOffset })\r\n  }\r\n\r\n  /**\r\n   * Updates the scroll manager X and Y scroll values as well as last X and Y deltas\r\n   * Internally called by the scroll event listener\r\n   * Could be called externally as well if the user wants to handle the scroll by himself\r\n   * @param parameters - {@link core/DOM/DOMElement.DOMPosition | scroll values}\r\n   */\r\n  updateScrollValues({ x, y }: DOMPosition) {\r\n    // get our scroll delta values\r\n    const lastScroll = this.scroll\r\n    this.scroll = { x, y }\r\n    this.delta = {\r\n      x: lastScroll.x - this.scroll.x,\r\n      y: lastScroll.y - this.scroll.y,\r\n    }\r\n\r\n    if (this.onScroll) {\r\n      this.onScroll(this.delta)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy our scroll manager (just remove our event listner if it had been added previously)\r\n   */\r\n  destroy() {\r\n    if (this.shouldWatch) {\r\n      // passive triggers a typescript error\r\n      // https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\r\n      window.removeEventListener('scroll', this.setScroll.bind(this), { passive: true } as AddEventListenerOptions &\r\n        EventListenerOptions)\r\n    }\r\n  }\r\n}\r\n","import { GPUCurtainsRenderer } from './renderers/GPUCurtainsRenderer'\r\nimport { ScrollManager } from '../utils/ScrollManager'\r\nimport { resizeManager } from '../utils/ResizeManager'\r\nimport { PingPongPlane } from '../extras/meshes/PingPongPlane'\r\nimport { ShaderPass } from '../core/renderPasses/ShaderPass'\r\nimport { GPURenderer, GPURendererParams, SceneStackedMesh } from '../core/renderers/GPURenderer'\r\nimport { DOMMesh } from './meshes/DOMMesh'\r\nimport { Plane } from './meshes/Plane'\r\nimport { ComputePass } from '../core/computePasses/ComputePass'\r\nimport { DOMElementBoundingRect, DOMElementParams, DOMPosition } from '../core/DOM/DOMElement'\r\nimport { GPUCameraRenderer, GPUCameraRendererParams } from '../core/renderers/GPUCameraRenderer'\r\nimport {\r\n  GPUDeviceManager,\r\n  GPUDeviceManagerBaseParams,\r\n  GPUDeviceManagerSetupParams,\r\n} from '../core/renderers/GPUDeviceManager'\r\nimport { Renderer } from '../core/renderers/utils'\r\nimport { DOMObject3D } from './objects3D/DOMObject3D'\r\n\r\n/**\r\n * Options used to create a {@link GPUCurtains}\r\n */\r\nexport interface GPUCurtainsOptions extends Omit<GPUCameraRendererParams, 'deviceManager'>, GPUDeviceManagerBaseParams {\r\n  /** Whether {@link GPUCurtains} should handle all resizing by itself or not */\r\n  autoResize?: boolean\r\n  /** Whether {@link GPUCurtains} should listen to scroll event or not */\r\n  watchScroll?: boolean\r\n}\r\n\r\n/**\r\n * Parameters used to create a {@link GPUCurtains}\r\n */\r\nexport interface GPUCurtainsParams extends Partial<Omit<GPUCurtainsOptions, 'container'>> {\r\n  /** {@link HTMLElement} or string representing an {@link HTMLElement} selector that will hold the WebGPU {@link HTMLCanvasElement}. Could be set later if not specified. */\r\n  container?: string | HTMLElement | null\r\n}\r\n\r\n/**\r\n * Used as a global class to create a {@link GPUCurtainsRenderer}, create all objects that need a reference to a renderer, listen to various events such as scroll and resize and render.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n * ```\r\n */\r\nexport class GPUCurtains {\r\n  /** The type of this {@link GPUCurtains} */\r\n  type: string\r\n  /** Options used to create this {@link GPUCurtains} */\r\n  options: GPUCurtainsOptions\r\n  /** {@link HTMLElement} that will hold the WebGPU {@link HTMLCanvasElement} */\r\n  container: HTMLElement\r\n\r\n  /** {@link GPUDeviceManager} used to handle the {@link GPUAdapter} and {@link GPUDevice} */\r\n  deviceManager: GPUDeviceManager\r\n\r\n  /** Tiny scroll event listener wrapper */\r\n  scrollManager: ScrollManager\r\n\r\n  // callbacks / events\r\n  /** function assigned to the {@link onScroll} callback */\r\n  _onScrollCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onError} callback */\r\n  _onErrorCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onContextLost} callback */\r\n  _onContextLostCallback: (info?: GPUDeviceLostInfo) => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onContextLost} callback */\r\n  _onContextDestroyedCallback: (info?: GPUDeviceLostInfo) => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n\r\n  /**\r\n   * GPUCurtains constructor\r\n   * @param parameters - {@link GPUCurtainsParams | parameters} used to create this {@link GPUCurtains}\r\n   */\r\n  constructor({\r\n    container,\r\n    label,\r\n    pixelRatio = window.devicePixelRatio ?? 1,\r\n    context = {},\r\n    production = false,\r\n    adapterOptions = {},\r\n    renderPass,\r\n    camera,\r\n    lights,\r\n    autoRender = true,\r\n    autoResize = true,\r\n    watchScroll = true,\r\n  }: GPUCurtainsParams = {}) {\r\n    this.type = 'CurtainsGPU'\r\n\r\n    this.options = {\r\n      container,\r\n      label,\r\n      pixelRatio,\r\n      camera,\r\n      lights,\r\n      production,\r\n      adapterOptions,\r\n      context,\r\n      renderPass,\r\n      autoRender,\r\n      autoResize,\r\n      watchScroll,\r\n    }\r\n\r\n    this.setDeviceManager()\r\n\r\n    if (container) {\r\n      this.setContainer(container)\r\n    }\r\n\r\n    this.initEvents()\r\n  }\r\n\r\n  /**\r\n   * Set the {@link GPUCurtains.container | container}.\r\n   * @param container - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\r\n   */\r\n  setContainer(container: DOMElementParams['element']) {\r\n    if (!container) {\r\n      const container = document.createElement('div')\r\n      container.setAttribute('id', 'curtains-gpu-canvas')\r\n      document.body.appendChild(container)\r\n      this.options.container = container\r\n    } else {\r\n      if (typeof container === 'string') {\r\n        container = document.querySelector(container)\r\n\r\n        if (!container) {\r\n          const container = document.createElement('div')\r\n          container.setAttribute('id', 'curtains-gpu-canvas')\r\n          document.body.appendChild(container)\r\n          this.options.container = container\r\n        } else {\r\n          this.options.container = container as HTMLElement\r\n        }\r\n      } else if (container instanceof Element) {\r\n        this.options.container = container as HTMLElement\r\n      }\r\n    }\r\n\r\n    this.container = this.options.container as HTMLElement\r\n\r\n    this.setMainRenderer()\r\n  }\r\n\r\n  /**\r\n   * Set the default {@link GPUCurtainsRenderer | renderer}\r\n   */\r\n  setMainRenderer() {\r\n    this.createCurtainsRenderer({\r\n      deviceManager: this.deviceManager,\r\n      // TODO ...this.options?\r\n      label: this.options.label || 'GPUCurtains main GPUCurtainsRenderer',\r\n      container: this.options.container,\r\n      pixelRatio: this.options.pixelRatio,\r\n      autoResize: this.options.autoResize,\r\n      context: this.options.context,\r\n      renderPass: this.options.renderPass,\r\n      camera: this.options.camera,\r\n      lights: this.options.lights,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Patch the options with default values before creating a {@link Renderer}\r\n   * @param parameters - parameters to patch\r\n   */\r\n  patchRendererOptions<T extends GPURendererParams | GPUCameraRendererParams>(parameters: T): T {\r\n    if (parameters.pixelRatio === undefined) parameters.pixelRatio = this.options.pixelRatio\r\n    if (parameters.autoResize === undefined) parameters.autoResize = this.options.autoResize\r\n\r\n    return parameters\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link GPURenderer} instance\r\n   * @param parameters - {@link GPURendererParams | parameters} to use\r\n   */\r\n  createRenderer(parameters: GPURendererParams): GPURenderer {\r\n    parameters = this.patchRendererOptions(parameters)\r\n\r\n    return new GPURenderer({ ...parameters, deviceManager: this.deviceManager })\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link GPUCameraRenderer} instance\r\n   * @param parameters - {@link GPUCameraRendererParams | parameters} to use\r\n   */\r\n  createCameraRenderer(parameters: GPUCameraRendererParams): GPUCameraRenderer {\r\n    parameters = this.patchRendererOptions(parameters)\r\n\r\n    return new GPUCameraRenderer({ ...parameters, deviceManager: this.deviceManager })\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link GPUCurtainsRenderer} instance\r\n   * @param parameters - {@link GPUCameraRendererParams | parameters} to use\r\n   */\r\n  createCurtainsRenderer(parameters: GPUCameraRendererParams): GPUCurtainsRenderer {\r\n    parameters = this.patchRendererOptions(parameters)\r\n\r\n    return new GPUCurtainsRenderer({ ...parameters, deviceManager: this.deviceManager })\r\n  }\r\n\r\n  /**\r\n   * Set our {@link GPUDeviceManager}\r\n   */\r\n  setDeviceManager() {\r\n    this.deviceManager = new GPUDeviceManager({\r\n      label: 'GPUCurtains default device',\r\n      production: this.options.production,\r\n      adapterOptions: this.options.adapterOptions,\r\n      autoRender: this.options.autoRender,\r\n      onError: () =>\r\n        setTimeout(() => {\r\n          this._onErrorCallback && this._onErrorCallback()\r\n        }, 0),\r\n      onDeviceLost: (info) => this._onContextLostCallback && this._onContextLostCallback(info),\r\n      onDeviceDestroyed: (info) => this._onContextDestroyedCallback && this._onContextDestroyedCallback(info),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get all created {@link Renderer}\r\n   * @readonly\r\n   */\r\n  get renderers(): Renderer[] {\r\n    return this.deviceManager.renderers\r\n  }\r\n\r\n  /**\r\n   * Get the first created {@link Renderer} if any\r\n   * @readonly\r\n   */\r\n  get renderer(): Renderer | undefined {\r\n    return this.renderers[0]\r\n  }\r\n\r\n  /**\r\n   * Set the {@link GPUDeviceManager} {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device} if possible, then set all created {@link Renderer} contexts.\r\n   * @param parameters - {@link GPUAdapter} and/or {@link GPUDevice} to use if set.\r\n   */\r\n  async setDevice({ adapter = null, device = null }: GPUDeviceManagerSetupParams = {}) {\r\n    await this.deviceManager.init({ adapter, device })\r\n  }\r\n\r\n  /**\r\n   * Restore the {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device}\r\n   */\r\n  async restoreContext() {\r\n    await this.deviceManager.restoreDevice()\r\n  }\r\n\r\n  /* RENDERER TRACKED OBJECTS */\r\n\r\n  /**\r\n   * Get all the created {@link PingPongPlane}\r\n   * @readonly\r\n   */\r\n  get pingPongPlanes(): PingPongPlane[] {\r\n    return this.renderers?.map((renderer) => renderer.pingPongPlanes).flat()\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link ShaderPass}\r\n   * @readonly\r\n   */\r\n  get shaderPasses(): ShaderPass[] {\r\n    return this.renderers?.map((renderer) => renderer.shaderPasses).flat()\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link SceneStackedMesh | meshes}\r\n   * @readonly\r\n   */\r\n  get meshes(): SceneStackedMesh[] {\r\n    return this.renderers?.map((renderer) => renderer.meshes).flat()\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link DOMMesh | DOM Meshes} (including {@link Plane | planes})\r\n   * @readonly\r\n   */\r\n  get domMeshes(): DOMMesh[] {\r\n    return this.renderers\r\n      ?.filter((renderer) => renderer instanceof GPUCurtainsRenderer)\r\n      .map((renderer: GPUCurtainsRenderer) => renderer.domMeshes)\r\n      .flat()\r\n  }\r\n\r\n  /**\r\n   * Get all created {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D} which position should be updated on scroll.\r\n   * @readonly\r\n   */\r\n  get domObjects(): DOMObject3D[] {\r\n    return this.renderers\r\n      ?.filter((renderer) => renderer instanceof GPUCurtainsRenderer)\r\n      .map((renderer: GPUCurtainsRenderer) => renderer.domObjects)\r\n      .flat()\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link Plane | planes}\r\n   * @readonly\r\n   */\r\n  get planes(): Plane[] {\r\n    return this.domMeshes.filter((domMesh) => domMesh instanceof Plane) as Plane[]\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link ComputePass | compute passes}\r\n   * @readonly\r\n   */\r\n  get computePasses(): ComputePass[] {\r\n    return this.renderers?.map((renderer) => renderer.computePasses).flat()\r\n  }\r\n\r\n  /**\r\n   * Get our {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer bounding rectangle}\r\n   */\r\n  get boundingRect(): DOMElementBoundingRect {\r\n    return this.renderer?.boundingRect\r\n  }\r\n\r\n  /* SCROLL */\r\n\r\n  /**\r\n   * Set the {@link scrollManager}\r\n   */\r\n  initScroll() {\r\n    this.scrollManager = new ScrollManager({\r\n      // init values\r\n      scroll: {\r\n        x: window.pageXOffset,\r\n        y: window.pageYOffset,\r\n      },\r\n      delta: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      shouldWatch: this.options.watchScroll,\r\n      onScroll: (delta) => this.updateScroll(delta),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Update all {@link DOMMesh#updateScrollPosition | DOMMesh scroll positions}\r\n   * @param delta - last {@link ScrollManager#delta | scroll delta values}\r\n   */\r\n  updateScroll(delta: DOMPosition = { x: 0, y: 0 }) {\r\n    this.domObjects.forEach((domObject) => {\r\n      if (domObject.domElement && domObject.watchScroll) {\r\n        domObject.updateScrollPosition(delta)\r\n      }\r\n    })\r\n\r\n    this._onScrollCallback && this._onScrollCallback()\r\n  }\r\n\r\n  /**\r\n   * Update our {@link ScrollManager#scroll | scrollManager scroll values}. Called each time the scroll has changed if {@link GPUCurtains#options.watchScroll | watchScroll option} is set to true. Could be called externally as well.\r\n   * @param scroll - new {@link DOMPosition | scroll values}\r\n   */\r\n  updateScrollValues(scroll: DOMPosition = { x: 0, y: 0 }) {\r\n    this.scrollManager.updateScrollValues(scroll)\r\n  }\r\n\r\n  /**\r\n   * Get our {@link ScrollManager#delta | scrollManager delta values}\r\n   * @readonly\r\n   */\r\n  get scrollDelta(): DOMPosition {\r\n    return this.scrollManager.delta\r\n  }\r\n\r\n  /**\r\n   * Get our {@link ScrollManager#scroll | scrollManager scroll values}\r\n   * @readonly\r\n   */\r\n  get scrollValues(): DOMPosition {\r\n    return this.scrollManager.scroll\r\n  }\r\n\r\n  /* EVENT LISTENERS */\r\n\r\n  /**\r\n   * Set the resize and scroll event listeners\r\n   */\r\n  initEvents() {\r\n    resizeManager.useObserver(this.options.autoResize)\r\n\r\n    this.initScroll()\r\n  }\r\n\r\n  /* EVENTS */\r\n\r\n  /**\r\n   * Called each frame before rendering\r\n   * @param callback - callback to run at each render\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onBeforeRender(callback: () => void): GPUCurtains {\r\n    this.deviceManager.onBeforeRender(callback)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Called each frame after rendering\r\n   * @param callback - callback to run at each render\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onAfterRender(callback: () => void): GPUCurtains {\r\n    this.deviceManager.onAfterRender(callback)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Called each time the {@link ScrollManager#scroll | scrollManager scroll values} changed\r\n   * @param callback - callback to run each time the {@link ScrollManager#scroll | scrollManager scroll values} changed\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onScroll(callback: () => void): GPUCurtains {\r\n    if (callback) {\r\n      this._onScrollCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Called if there's been an error while trying to create the {@link GPUDeviceManager#device | device}\r\n   * @param callback - callback to run if there's been an error while trying to create the {@link GPUDeviceManager#device | device}\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onError(callback: () => void): GPUCurtains {\r\n    if (callback) {\r\n      this._onErrorCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Called whenever the {@link GPUDeviceManager#device | device} is lost\r\n   * @param callback - callback to run whenever the {@link GPUDeviceManager#device | device} is lost\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onContextLost(callback: (info?: GPUDeviceLostInfo) => void): GPUCurtains {\r\n    if (callback) {\r\n      this._onContextLostCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Called whenever the {@link GPUDeviceManager#device | device} has been intentionally destroyed.\r\n   * @param callback - callback to run whenever the {@link GPUDeviceManager#device | device} has been destroyed.\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onContextDestroyed(callback: (info?: GPUDeviceLostInfo) => void): GPUCurtains {\r\n    if (callback) {\r\n      this._onContextDestroyedCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Render our {@link GPUDeviceManager}\r\n   */\r\n  render() {\r\n    this.deviceManager.render()\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link GPUCurtains} and {@link GPUDeviceManager}\r\n   */\r\n  destroy() {\r\n    this.deviceManager.destroy()\r\n    this.scrollManager?.destroy()\r\n    resizeManager.destroy()\r\n  }\r\n}\r\n","import { Camera } from '../../core/camera/Camera'\r\nimport { Vec2 } from '../../math/Vec2'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { throwWarning } from '../../utils/utils'\r\n\r\n// largely based on https://github.com/oframe/ogl/blob/master/src/extras/Orbit.js\r\n\r\nconst tempVec2a = new Vec2()\r\nconst tempVec2b = new Vec2()\r\nconst tempVec3 = new Vec3()\r\n\r\n/** Defines the base parameters used to set / reset an {@link OrbitControls}. */\r\nexport interface OrbitControlsBaseParams {\r\n  /** The {@link Vec3 | focus point} or the {@link OrbitControls}. */\r\n  target?: Vec3\r\n  // zoom\r\n  /** Whether to allow zooming or not. */\r\n  enableZoom?: boolean\r\n  /** Minimum zoom value to use. */\r\n  minZoom?: number\r\n  /** Maximum zoom value to use. */\r\n  maxZoom?: number\r\n  /** Zoom speed value to use. */\r\n  zoomSpeed?: number\r\n  // rotate\r\n  /** Whether to allow rotating or not. */\r\n  enableRotate?: boolean\r\n  /** Minimum angle to use for vertical rotation. */\r\n  minPolarAngle?: number\r\n  /** Maximum angle to use for vertical rotation. */\r\n  maxPolarAngle?: number\r\n  /** Minimum angle to use for horizontal rotation. */\r\n  minAzimuthAngle?: number\r\n  /** Maximum angle to use for horizontal rotation. */\r\n  maxAzimuthAngle?: number\r\n  /** Rotate speed value to use. */\r\n  rotateSpeed?: number\r\n  // pan\r\n  /** Whether to allow paning or not. */\r\n  enablePan?: boolean\r\n  /** Pan speed value to use. */\r\n  panSpeed?: number\r\n}\r\n\r\n/** Defines base parameters used to create an {@link OrbitControls}. */\r\nexport interface OrbitControlsParams extends OrbitControlsBaseParams {\r\n  /** Optional {@link Camera} to use. */\r\n  camera?: Camera\r\n  /** Optional {@link HTMLElement} (or {@link Window} element) to use for event listeners. */\r\n  element?: HTMLElement | Window\r\n}\r\n\r\n/**\r\n * Helper to create orbit camera controls (sometimes called arc ball camera).\r\n *\r\n * @example\r\n * ```javascript\r\n * // assuming renderer is a valid CameraRenderer\r\n * const { camera } = renderer\r\n * const orbitControls = new OrbitControls({ camera })\r\n * ```\r\n */\r\nexport class OrbitControls {\r\n  /** {@link Camera} to use with this {@link OrbitControls}. */\r\n  camera: Camera\r\n\r\n  /**\r\n   * {@link HTMLElement} (or {@link Window} element) to use for event listeners.\r\n   * @private\r\n   */\r\n  #element = null\r\n\r\n  /** The {@link Vec3 | focus point} or the {@link OrbitControls}. Default to `Vec3(0)`. */\r\n  target: Vec3\r\n\r\n  /** @ignore */\r\n  #offset = new Vec3()\r\n\r\n  /** Whether to allow zooming or not. Default to `true`. */\r\n  enableZoom: boolean\r\n  /** Minimum zoom value to use. Default to `0`. */\r\n  minZoom: number\r\n  /** Maximum zoom value to use. Default to `Infinity`. */\r\n  maxZoom: number\r\n  /** Zoom speed value to use. Default to `1`. */\r\n  zoomSpeed: number\r\n\r\n  /** Whether to allow rotating or not. Default to `true`. */\r\n  enableRotate: boolean\r\n  /** Minimum angle to use for vertical rotation. Default to `0`. */\r\n  minPolarAngle: number\r\n  /** Maximum angle to use for vertical rotation. Default to `Math.PI`. */\r\n  maxPolarAngle: number\r\n  /** Minimum angle to use for horizontal rotation. Default to `-Infinity`. */\r\n  minAzimuthAngle: number\r\n  /** Maximum angle to use for horizontal rotation. Default to `Infinity`. */\r\n  maxAzimuthAngle: number\r\n  /** Rotate speed value to use. Default to `1`. */\r\n  rotateSpeed: number\r\n  /** @ignore */\r\n  #isOrbiting = false\r\n  /** @ignore */\r\n  #spherical = { radius: 1, phi: 0, theta: 0 }\r\n  /** @ignore */\r\n  #rotateStart = new Vec2()\r\n\r\n  /** Whether to allow paning or not. Default to `true`. */\r\n  enablePan: boolean\r\n  /** Pan speed value to use. Default to `1`. */\r\n  panSpeed: number\r\n  /** @ignore */\r\n  #isPaning = false\r\n  /** @ignore */\r\n  #panStart = new Vec2()\r\n  /** @ignore */\r\n  #panDelta = new Vec3()\r\n\r\n  /**\r\n   * OrbitControls constructor\r\n=   * @param parameters - parameters to use.\r\n   */\r\n  constructor({\r\n    camera,\r\n    element = null,\r\n    target = new Vec3(),\r\n    // zoom\r\n    enableZoom = true,\r\n    minZoom = 0,\r\n    maxZoom = Infinity,\r\n    zoomSpeed = 1,\r\n    // rotate\r\n    enableRotate = true,\r\n    minPolarAngle = 0,\r\n    maxPolarAngle = Math.PI,\r\n    minAzimuthAngle = -Infinity,\r\n    maxAzimuthAngle = Infinity,\r\n    rotateSpeed = 1,\r\n    // pan\r\n    enablePan = true,\r\n    panSpeed = 1,\r\n  }: OrbitControlsParams) {\r\n    if (!camera) {\r\n      throwWarning('OrbitControls: cannot initialize without a camera.')\r\n      return\r\n    }\r\n\r\n    // options\r\n    this.#setBaseParams({\r\n      target,\r\n      enableZoom,\r\n      minZoom,\r\n      maxZoom,\r\n      zoomSpeed,\r\n      enableRotate,\r\n      minPolarAngle,\r\n      maxPolarAngle,\r\n      minAzimuthAngle,\r\n      maxAzimuthAngle,\r\n      rotateSpeed,\r\n      enablePan,\r\n      panSpeed,\r\n    })\r\n\r\n    this.element = element ?? (typeof window !== 'undefined' ? window : null)\r\n\r\n    this.useCamera(camera)\r\n  }\r\n\r\n  /**\r\n   * Allow to set or reset this {@link OrbitControls.camera | OrbitControls camera}.\r\n   * @param camera - New {@link OrbitControls.camera | camera} to use.\r\n   */\r\n  useCamera(camera: Camera) {\r\n    this.camera = camera\r\n\r\n    this.camera.position.onChange(() => {\r\n      this.camera.lookAt(this.target)\r\n    })\r\n\r\n    // Grab initial position values\r\n    this.#offset.copy(this.camera.position).sub(this.target)\r\n    this.#spherical.radius = this.#offset.length()\r\n    this.#spherical.theta = Math.atan2(this.#offset.x, this.#offset.z)\r\n    this.#spherical.phi = Math.acos(Math.min(Math.max(this.#offset.y / this.#spherical.radius, -1), 1))\r\n\r\n    this.#update()\r\n  }\r\n\r\n  /**\r\n   * Set / reset base params\r\n   * @ignore\r\n   */\r\n  #setBaseParams({\r\n    target,\r\n    // zoom\r\n    enableZoom = this.enableZoom,\r\n    minZoom = this.minZoom,\r\n    maxZoom = this.maxZoom,\r\n    zoomSpeed = this.zoomSpeed,\r\n    // rotate\r\n    enableRotate = this.enableRotate,\r\n    minPolarAngle = this.minPolarAngle,\r\n    maxPolarAngle = this.maxPolarAngle,\r\n    minAzimuthAngle = this.minAzimuthAngle,\r\n    maxAzimuthAngle = this.maxAzimuthAngle,\r\n    rotateSpeed = this.rotateSpeed,\r\n    // pan\r\n    enablePan = this.enablePan,\r\n    panSpeed = this.panSpeed,\r\n  }: OrbitControlsBaseParams = {}) {\r\n    if (target) {\r\n      this.target = target\r\n    }\r\n\r\n    this.enableZoom = enableZoom\r\n    this.minZoom = minZoom\r\n    this.maxZoom = maxZoom\r\n    this.zoomSpeed = zoomSpeed\r\n\r\n    this.enableRotate = enableRotate\r\n    this.minPolarAngle = minPolarAngle\r\n    this.maxPolarAngle = maxPolarAngle\r\n    this.minAzimuthAngle = minAzimuthAngle\r\n    this.maxAzimuthAngle = maxAzimuthAngle\r\n    this.rotateSpeed = rotateSpeed\r\n\r\n    this.enablePan = enablePan\r\n    this.panSpeed = panSpeed\r\n  }\r\n\r\n  /**\r\n   * Reset the {@link OrbitControls} values.\r\n   * @param parameters - Parameters used to reset the values. Those are the same as {@link OrbitControlsBaseParams} with an additional position parameter to allow to override the {@link OrbitControls} position.\r\n   */\r\n  reset({\r\n    position,\r\n    target,\r\n    // zoom\r\n    enableZoom = this.enableZoom,\r\n    minZoom = this.minZoom,\r\n    maxZoom = this.maxZoom,\r\n    zoomSpeed = this.zoomSpeed,\r\n    // rotate\r\n    enableRotate = this.enableRotate,\r\n    minPolarAngle = this.minPolarAngle,\r\n    maxPolarAngle = this.maxPolarAngle,\r\n    minAzimuthAngle = this.minAzimuthAngle,\r\n    maxAzimuthAngle = this.maxAzimuthAngle,\r\n    rotateSpeed = this.rotateSpeed,\r\n    // pan\r\n    enablePan = this.enablePan,\r\n    panSpeed = this.panSpeed,\r\n  }: { position?: Vec3 } & OrbitControlsBaseParams = {}) {\r\n    this.#setBaseParams({\r\n      target,\r\n      enableZoom,\r\n      minZoom,\r\n      maxZoom,\r\n      zoomSpeed,\r\n      enableRotate,\r\n      minPolarAngle,\r\n      maxPolarAngle,\r\n      minAzimuthAngle,\r\n      maxAzimuthAngle,\r\n      rotateSpeed,\r\n      enablePan,\r\n      panSpeed,\r\n    })\r\n\r\n    if (position) {\r\n      this.updatePosition(position)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Allow to override the {@link camera} position.\r\n   * @param position - new {@link camera} position to set.\r\n   */\r\n  updatePosition(position = new Vec3()) {\r\n    position.sub(this.target)\r\n    this.#spherical.radius = position.length()\r\n    this.#spherical.theta = Math.atan2(position.x, position.z)\r\n    this.#spherical.phi = Math.acos(Math.min(Math.max(position.y / this.#spherical.radius, -1), 1))\r\n\r\n    this.#update()\r\n  }\r\n\r\n  /**\r\n   * Set the element to use for event listeners. Can remove previous event listeners first if needed.\r\n   * @param value - {@link HTMLElement} (or {@link Window} element) to use.\r\n   */\r\n  set element(value: HTMLElement | Window | null) {\r\n    if (this.#element && (!value || this.#element !== value)) {\r\n      this.#removeEvents()\r\n    }\r\n\r\n    this.#element = value\r\n\r\n    if (value) {\r\n      this.#addEvents()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get our element to use for event listeners.\r\n   * @returns - {@link HTMLElement} (or {@link Window} element) used.\r\n   */\r\n  get element() {\r\n    return this.#element\r\n  }\r\n\r\n  /**\r\n   * Add the event listeners.\r\n   * @private\r\n   */\r\n  #addEvents() {\r\n    this.#element.addEventListener('contextmenu', this.#onContextMenu.bind(this), false)\r\n    this.#element.addEventListener('mousedown', this.#onMouseDown.bind(this), false)\r\n    this.#element.addEventListener('mousemove', this.#onMouseMove.bind(this), false)\r\n    this.#element.addEventListener('mouseup', this.#onMouseUp.bind(this), false)\r\n    this.#element.addEventListener('touchstart', this.#onTouchStart.bind(this), { passive: false })\r\n    this.#element.addEventListener('touchmove', this.#onTouchMove.bind(this), { passive: false })\r\n    this.#element.addEventListener('touchend', this.#onTouchEnd.bind(this), false)\r\n    this.#element.addEventListener('wheel', this.#onMouseWheel.bind(this), { passive: false })\r\n  }\r\n\r\n  /**\r\n   * Remove the event listeners.\r\n   * @private\r\n   */\r\n  #removeEvents() {\r\n    this.#element.removeEventListener('contextmenu', this.#onContextMenu.bind(this), false)\r\n    this.#element.removeEventListener('mousedown', this.#onMouseDown.bind(this), false)\r\n    this.#element.removeEventListener('mousemove', this.#onMouseMove.bind(this), false)\r\n    this.#element.removeEventListener('mouseup', this.#onMouseUp.bind(this), false)\r\n    this.#element.removeEventListener('touchstart', this.#onTouchStart.bind(this), { passive: false })\r\n    this.#element.removeEventListener('touchmove', this.#onTouchMove.bind(this), { passive: false })\r\n    this.#element.removeEventListener('touchend', this.#onTouchEnd.bind(this), false)\r\n    this.#element.removeEventListener('wheel', this.#onMouseWheel.bind(this), { passive: false })\r\n  }\r\n\r\n  /**\r\n   * Callback executed on mouse down event.\r\n   * @param e - {@link MouseEvent}.\r\n   * @private\r\n   */\r\n  #onMouseDown(e: MouseEvent) {\r\n    if (e.button === 0 && this.enableRotate) {\r\n      this.#isOrbiting = true\r\n      this.#rotateStart.set(e.clientX, e.clientY)\r\n    } else if (e.button === 2 && this.enablePan) {\r\n      this.#isPaning = true\r\n      this.#panStart.set(e.clientX, e.clientY)\r\n    }\r\n\r\n    e.stopPropagation()\r\n    e.preventDefault()\r\n  }\r\n\r\n  /**\r\n   * Callback executed on touch start event.\r\n   * @param e - {@link TouchEvent}.\r\n   * @private\r\n   */\r\n  #onTouchStart(e: TouchEvent) {\r\n    // TODO zoom / pan with 2 fingers\r\n    if (e.touches.length === 1 && this.enableRotate) {\r\n      this.#isOrbiting = true\r\n      this.#rotateStart.set(e.touches[0].pageX, e.touches[0].pageY)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback executed on mouse move event.\r\n   * @param e - {@link MouseEvent}.\r\n   */\r\n  #onMouseMove(e: MouseEvent) {\r\n    if (this.#isOrbiting && this.enableRotate) {\r\n      this.#rotate(e.clientX, e.clientY)\r\n    } else if (this.#isPaning && this.enablePan) {\r\n      this.#pan(e.clientX, e.clientY)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback executed on touch move event.\r\n   * @param e - {@link TouchEvent}.\r\n   * @private\r\n   */\r\n  #onTouchMove(e: TouchEvent) {\r\n    if (this.#isOrbiting && this.enableRotate) {\r\n      this.#rotate(e.touches[0].pageX, e.touches[0].pageY)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback executed on mouse up event.\r\n   * @param e - {@link MouseEvent}.\r\n   * @private\r\n   */\r\n  #onMouseUp(e: MouseEvent) {\r\n    this.#isOrbiting = false\r\n    this.#isPaning = false\r\n  }\r\n\r\n  /**\r\n   * Callback executed on touch end event.\r\n   * @param e - {@link MouseEvent}.\r\n   * @private\r\n   */\r\n  #onTouchEnd(e: TouchEvent) {\r\n    this.#isOrbiting = false\r\n    this.#isPaning = false\r\n  }\r\n\r\n  /**\r\n   * Callback executed on wheel event.\r\n   * @param e - {@link WheelEvent}.\r\n   * @private\r\n   */\r\n  #onMouseWheel(e: WheelEvent) {\r\n    if (this.enableZoom) {\r\n      this.#zoom(e.deltaY)\r\n\r\n      e.preventDefault()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Prevent context menu apparition on right click\r\n   * @param e - {@link MouseEvent}.\r\n   * @private\r\n   */\r\n  #onContextMenu(e: MouseEvent) {\r\n    e.preventDefault()\r\n  }\r\n\r\n  /**\r\n   * Update the {@link camera} position based on the {@link target} and internal values.\r\n   * @private\r\n   */\r\n  #update() {\r\n    // apply rotation to offset\r\n    const sinPhiRadius = this.#spherical.radius * Math.sin(Math.max(0.000001, this.#spherical.phi))\r\n    this.#offset.x = sinPhiRadius * Math.sin(this.#spherical.theta)\r\n    this.#offset.y = this.#spherical.radius * Math.cos(this.#spherical.phi)\r\n    this.#offset.z = sinPhiRadius * Math.cos(this.#spherical.theta)\r\n\r\n    // Apply updated values to object\r\n    this.camera.position.copy(this.target).add(this.#offset)\r\n  }\r\n\r\n  /**\r\n   * Update the {@link camera} position based on input coordinates so it rotates around the {@link target}.\r\n   * @param x - input coordinate along the X axis.\r\n   * @param y - input coordinate along the Y axis.\r\n   * @private\r\n   */\r\n  #rotate(x: number, y: number) {\r\n    tempVec2a.set(x, y)\r\n    tempVec2b.copy(tempVec2a).sub(this.#rotateStart).multiplyScalar(this.rotateSpeed)\r\n    this.#spherical.theta -= (2 * Math.PI * tempVec2b.x) / this.camera.size.height\r\n    this.#spherical.phi -= (2 * Math.PI * tempVec2b.y) / this.camera.size.height\r\n\r\n    this.#spherical.theta = Math.min(this.maxAzimuthAngle, Math.max(this.minAzimuthAngle, this.#spherical.theta))\r\n    this.#spherical.phi = Math.min(this.maxPolarAngle, Math.max(this.minPolarAngle, this.#spherical.phi))\r\n\r\n    this.#rotateStart.copy(tempVec2a)\r\n\r\n    this.#update()\r\n  }\r\n\r\n  /**\r\n   * Pan the {@link camera} position based on input coordinates by updating {@link target}.\r\n   * @param x - input coordinate along the X axis.\r\n   * @param y - input coordinate along the Y axis.\r\n   * @private\r\n   */\r\n  #pan(x: number, y: number) {\r\n    tempVec2a.set(x, y)\r\n    tempVec2b.copy(tempVec2a).sub(this.#panStart).multiplyScalar(this.panSpeed)\r\n\r\n    this.#panDelta.set(0)\r\n\r\n    tempVec3.copy(this.camera.position).sub(this.target)\r\n    let targetDistance = tempVec3.length()\r\n    targetDistance *= Math.tan(((this.camera.fov / 2) * Math.PI) / 180.0)\r\n\r\n    // pan left\r\n    // get right direction axis accounting for camera transform\r\n    tempVec3.set(\r\n      this.camera.modelMatrix.elements[0],\r\n      this.camera.modelMatrix.elements[1],\r\n      this.camera.modelMatrix.elements[2]\r\n    )\r\n\r\n    tempVec3.multiplyScalar(-(2 * tempVec2b.x * targetDistance) / this.camera.size.height)\r\n    this.#panDelta.add(tempVec3)\r\n\r\n    // pan up\r\n    // get up direction axis accounting for camera transform\r\n    tempVec3.set(\r\n      this.camera.modelMatrix.elements[4],\r\n      this.camera.modelMatrix.elements[5],\r\n      this.camera.modelMatrix.elements[6]\r\n    )\r\n    tempVec3.multiplyScalar((2 * tempVec2b.y * targetDistance) / this.camera.size.height)\r\n    this.#panDelta.add(tempVec3)\r\n\r\n    this.#panStart.copy(tempVec2a)\r\n\r\n    this.target.add(this.#panDelta)\r\n    this.#offset.copy(this.camera.position).sub(this.target)\r\n    this.#spherical.radius = this.#offset.length()\r\n\r\n    this.#update()\r\n  }\r\n\r\n  /**\r\n   * Move the {@link camera} forward or backward.\r\n   * @param value - new value to use for zoom.\r\n   * @private\r\n   */\r\n  #zoom(value: number) {\r\n    this.#spherical.radius = Math.min(\r\n      this.maxZoom,\r\n      Math.max(this.minZoom + 0.000001, this.#spherical.radius + (value * this.zoomSpeed) / 100)\r\n    )\r\n\r\n    this.#update()\r\n  }\r\n\r\n  /**\r\n   * Destroy the {@link OrbitControls}.\r\n   */\r\n  destroy() {\r\n    // will automatically remove listeners\r\n    this.element = null\r\n  }\r\n}\r\n","// ported from https://github.com/DerSchmale/io-rgbe/tree/main\r\n\r\n/**\r\n * HDRImageData contains all decompressed image data.\r\n */\r\nexport interface HDRImageData {\r\n  /** Width of the HDR image */\r\n  width: number\r\n  /** Height of the HDR image */\r\n  height: number\r\n  /** Exposure of the HDR image */\r\n  exposure: number\r\n  /** Gamma of the HDR image */\r\n  gamma: number\r\n  /** {@link Float32Array} holding the HDR image data */\r\n  data: Float32Array\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\ntype Header = {\r\n  width: number\r\n  height: number\r\n  gamma: number\r\n  exposure: number\r\n  colorCorr: number[]\r\n  flipX: boolean\r\n  flipY: boolean\r\n}\r\n\r\n/**\r\n * @ignore\r\n */\r\ntype DataStream = {\r\n  offset: number\r\n  data: DataView\r\n}\r\n\r\n/**\r\n * Basic glTF loader class.\r\n *\r\n * Allow to load an HDR file from an URI and returns a {@link HDRImageData} object containing the {@link Float32Array} data alongside width, height and other useful information.\r\n *\r\n * @example\r\n * ```javascript\r\n * const hdrLoader = new HDRLoader()\r\n * const hdr = await hdrLoader.loadFromUrl('path/to/environment.hdr')\r\n *\r\n * // assuming `renderer` is a valid Renderer\r\n * const envTexture = new Texture(renderer, {\r\n *   label: 'Environment texture',\r\n *   name: 'envTexture',\r\n *   visibility: ['fragment'],\r\n *   format: 'rgba16float',\r\n *   generateMips: true,\r\n *   fixedSize: {\r\n *     width: hdr.width,\r\n *     height: hdr.height,\r\n *   },\r\n * })\r\n *\r\n * envTexture.uploadData({\r\n *   data: hdr.data,\r\n * })\r\n * ```\r\n */\r\nexport class HDRLoader {\r\n  /**\r\n   * Load and decode RGBE-encoded data to a flat list of floating point pixel data (RGBA).\r\n   * @param url - The url of the .hdr file to load.\r\n   * @returns - The {@link HDRImageData}.\r\n   */\r\n  async loadFromUrl(url: string): Promise<HDRImageData> {\r\n    const buffer = await (await fetch(url)).arrayBuffer()\r\n\r\n    return this.#decodeRGBE(new DataView(buffer))\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  #decodeRGBE(data: DataView): HDRImageData {\r\n    const stream = {\r\n      data,\r\n      offset: 0,\r\n    }\r\n\r\n    const header = this.#parseHeader(stream)\r\n\r\n    return {\r\n      width: header.width,\r\n      height: header.height,\r\n      exposure: header.exposure,\r\n      gamma: header.gamma,\r\n      data: this.#parseData(stream, header),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  #parseHeader(stream: DataStream): Header {\r\n    let line = this.#readLine(stream)\r\n    const header = {\r\n      colorCorr: [1, 1, 1],\r\n      exposure: 1,\r\n      gamma: 1,\r\n      width: 0,\r\n      height: 0,\r\n      flipX: false,\r\n      flipY: false,\r\n    }\r\n\r\n    if (line !== '#?RADIANCE' && line !== '#?RGBE') throw new Error('Incorrect file format!')\r\n\r\n    while (line !== '') {\r\n      // empty line means there's only 1 line left, containing size info:\r\n      line = this.#readLine(stream)\r\n      const parts = line.split('=')\r\n      switch (parts[0]) {\r\n        case 'GAMMA':\r\n          header.gamma = parseFloat(parts[1])\r\n          break\r\n        case 'FORMAT':\r\n          if (parts[1] !== '32-bit_rle_rgbe' && parts[1] !== '32-bit_rle_xyze')\r\n            throw new Error('Incorrect encoding format!')\r\n          break\r\n        case 'EXPOSURE':\r\n          header.exposure = parseFloat(parts[1])\r\n          break\r\n        case 'COLORCORR':\r\n          header.colorCorr = parts[1]\r\n            .replace(/^\\s+|\\s+$/g, '')\r\n            .split(' ')\r\n            .map((m) => parseFloat(m))\r\n          break\r\n      }\r\n    }\r\n\r\n    line = this.#readLine(stream)\r\n\r\n    const parts = line.split(' ')\r\n    this.#parseSize(parts[0], parseInt(parts[1]), header)\r\n    this.#parseSize(parts[2], parseInt(parts[3]), header)\r\n\r\n    return header\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  #parseSize(label: string, value: number, header: Header) {\r\n    switch (label) {\r\n      case '+X':\r\n        header.width = value\r\n        break\r\n      case '-X':\r\n        header.width = value\r\n        header.flipX = true\r\n        console.warn('Flipping horizontal orientation not currently supported')\r\n        break\r\n      case '-Y':\r\n        header.height = value\r\n        header.flipY = true // WebGPU flipY default is false\r\n        break\r\n      case '+Y':\r\n        header.height = value\r\n        break\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  #readLine(stream: DataStream): string {\r\n    let ch,\r\n      str = ''\r\n\r\n    while ((ch = stream.data.getUint8(stream.offset++)) !== 0x0a) str += String.fromCharCode(ch)\r\n\r\n    return str\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  #parseData(stream: DataStream, header: Header): Float32Array {\r\n    const hash = stream.data.getUint16(stream.offset)\r\n    let data\r\n\r\n    if (hash === 0x0202) {\r\n      data = this.#parseNewRLE(stream, header)\r\n      if (header.flipX) this.#flipX(data, header)\r\n      if (header.flipY) this.#flipY(data, header)\r\n    } else {\r\n      throw new Error('Obsolete HDR file version!')\r\n    }\r\n\r\n    return data\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  #parseNewRLE(stream: DataStream, header: Header): Float32Array {\r\n    const { width, height, colorCorr } = header\r\n    const tgt = new Float32Array(width * height * 4)\r\n    let i = 0\r\n    let { offset, data } = stream\r\n\r\n    for (let y = 0; y < height; ++y) {\r\n      if (data.getUint16(offset) !== 0x0202) throw new Error('Incorrect scanline start hash')\r\n\r\n      if (data.getUint16(offset + 2) !== width) throw new Error(\"Scanline doesn't match picture dimension!\")\r\n\r\n      offset += 4\r\n      const numComps = width * 4\r\n\r\n      // read individual RLE components\r\n      const comps = []\r\n      let x = 0\r\n\r\n      while (x < numComps) {\r\n        let value = data.getUint8(offset++)\r\n        if (value > 128) {\r\n          // RLE:\r\n          const len = value - 128\r\n          value = data.getUint8(offset++)\r\n          for (let rle = 0; rle < len; ++rle) {\r\n            comps[x++] = value\r\n          }\r\n        } else {\r\n          for (let n = 0; n < value; ++n) {\r\n            comps[x++] = data.getUint8(offset++)\r\n          }\r\n        }\r\n      }\r\n\r\n      for (x = 0; x < width; ++x) {\r\n        const r = comps[x]\r\n        const g = comps[x + width]\r\n        const b = comps[x + width * 2]\r\n        let e = comps[x + width * 3]\r\n\r\n        // NOT -128 but -136!!! This allows encoding smaller values rather than higher ones (as you'd expect).\r\n        e = e ? Math.pow(2.0, e - 136) : 0\r\n\r\n        tgt[i++] = r * e * colorCorr[0]\r\n        tgt[i++] = g * e * colorCorr[1]\r\n        tgt[i++] = b * e * colorCorr[2]\r\n        tgt[i++] = e\r\n      }\r\n    }\r\n\r\n    return tgt\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  #swap(data: Float32Array, i1: number, i2: number) {\r\n    i1 *= 4\r\n    i2 *= 4\r\n\r\n    for (let i = 0; i < 4; ++i) {\r\n      const tmp = data[i1 + i]\r\n      data[i1 + i] = data[i2 + i]\r\n      data[i2 + i] = tmp\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  #flipX(data: Float32Array, header: Header) {\r\n    const { width, height } = header\r\n    const hw = width >> 1\r\n\r\n    for (let y = 0; y < height; ++y) {\r\n      // selects the current row\r\n      const b = y * width\r\n      for (let x = 0; x < hw; ++x) {\r\n        // add the mirrored columns\r\n        const i1 = b + x\r\n        const i2 = b + width - 1 - x\r\n        this.#swap(data, i1, i2)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @ignore\r\n   */\r\n  #flipY(data: Float32Array, header: Header) {\r\n    const { width, height } = header\r\n    const hh = height >> 1\r\n\r\n    for (let y = 0; y < hh; ++y) {\r\n      // selects the mirrored rows\r\n      const b1 = y * width\r\n      const b2 = (height - 1 - y) * width\r\n\r\n      for (let x = 0; x < width; ++x) {\r\n        // adds the column\r\n        this.#swap(data, b1 + x, b2 + x)\r\n      }\r\n    }\r\n  }\r\n}\r\n","// LUT for GGX distribution\r\n// ported from https://github.com/KhronosGroup/glTF-Sample-Viewer/blob/9940e4b4f4a2a296351bcd35035cc518deadc298/source/shaders/ibl_filtering.frag\r\n// TODO use chunks (hammersley, V_SmithGGXCorrelated / GeometrySmith, generateTBN, etc.)\r\nexport default /* wgsl */ `\r\nfn radicalInverse_VdC(inputBits: u32) -> f32 {\r\n  var bits: u32 = inputBits;\r\n  bits = (bits << 16u) | (bits >> 16u);\r\n  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n  return f32(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n}\r\n\r\n// hammersley2d describes a sequence of points in the 2d unit square [0,1)^2\r\n// that can be used for quasi Monte Carlo integration\r\nfn hammersley2d(i: u32, N: u32) -> vec2f {\r\n  return vec2(f32(i) / f32(N), radicalInverse_VdC(i));\r\n}\r\n\r\n// GGX microfacet distribution\r\nstruct MicrofacetDistributionSample {\r\n  pdf: f32,\r\n  cosTheta: f32,\r\n  sinTheta: f32,\r\n  phi: f32\r\n};\r\n\r\nfn D_GGX(NdotH: f32, roughness: f32) -> f32 {\r\n  let a: f32 = NdotH * roughness;\r\n  let k: f32 = roughness / (1.0 - NdotH * NdotH + a * a);\r\n  return k * k * (1.0 / ${Math.PI});\r\n}\r\n\r\n// https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.html\r\n// This implementation is based on https://bruop.github.io/ibl/,\r\n//  https://www.tobias-franke.eu/log/2014/03/30/notes_on_importance_sampling.html\r\n// and https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html\r\nfn GGX(xi: vec2f, roughness: f32) -> MicrofacetDistributionSample {\r\n  var ggx: MicrofacetDistributionSample;\r\n\r\n  // evaluate sampling equations\r\n  let alpha: f32 = roughness * roughness;\r\n  ggx.cosTheta = clamp(sqrt((1.0 - xi.y) / (1.0 + (alpha * alpha - 1.0) * xi.y)), 0.0, 1.0);\r\n  ggx.sinTheta = sqrt(1.0 - ggx.cosTheta * ggx.cosTheta);\r\n  ggx.phi = 2.0 * ${Math.PI} * xi.x;\r\n\r\n  // evaluate GGX pdf (for half vector)\r\n  ggx.pdf = D_GGX(ggx.cosTheta, alpha);\r\n\r\n  // Apply the Jacobian to obtain a pdf that is parameterized by l\r\n  // see https://bruop.github.io/ibl/\r\n  // Typically you'd have the following:\r\n  // float pdf = D_GGX(NoH, roughness) * NoH / (4.0 * VoH);\r\n  // but since V = N => VoH == NoH\r\n  ggx.pdf /= 4.0;\r\n\r\n  return ggx;\r\n}\r\n\r\nfn Lambertian(xi: vec2f, roughness: f32) -> MicrofacetDistributionSample {\r\n    var lambertian: MicrofacetDistributionSample;\r\n\r\n  // Cosine weighted hemisphere sampling\r\n  // http://www.pbr-book.org/3ed-2018/Monte_Carlo_Integration/2D_Sampling_with_Multidimensional_Transformations.html#Cosine-WeightedHemisphereSampling\r\n  lambertian.cosTheta = sqrt(1.0 - xi.y);\r\n  lambertian.sinTheta = sqrt(xi.y); // equivalent to \\`sqrt(1.0 - cosTheta*cosTheta)\\`;\r\n  lambertian.phi = 2.0 * ${Math.PI} * xi.x;\r\n\r\n  lambertian.pdf = lambertian.cosTheta / ${Math.PI}; // evaluation for solid angle, therefore drop the sinTheta\r\n\r\n  return lambertian;\r\n}\r\n\r\n// TBN generates a tangent bitangent normal coordinate frame from the normal\r\n// (the normal must be normalized)\r\nfn generateTBN(normal: vec3f) -> mat3x3f {\r\n  var bitangent: vec3f = vec3(0.0, 1.0, 0.0);\r\n\r\n  let NdotUp: f32 = dot(normal, vec3(0.0, 1.0, 0.0));\r\n  let epsilon: f32 = 0.0000001;\r\n  \r\n  if (1.0 - abs(NdotUp) <= epsilon) {\r\n    // Sampling +Y or -Y, so we need a more robust bitangent.\r\n    if (NdotUp > 0.0) {\r\n      bitangent = vec3(0.0, 0.0, 1.0);\r\n    }\r\n    else {\r\n      bitangent = vec3(0.0, 0.0, -1.0);\r\n    }\r\n  }\r\n\r\n  let tangent: vec3f = normalize(cross(bitangent, normal));\r\n  bitangent = cross(normal, tangent);\r\n\r\n  return mat3x3f(tangent, bitangent, normal);\r\n}\r\n\r\n// getImportanceSample returns an importance sample direction with pdf in the .w component\r\nfn getImportanceSample(Xi: vec2<f32>, N: vec3f, roughness: f32) -> vec4f {\r\n  var importanceSample: MicrofacetDistributionSample;\r\n  \r\n  importanceSample = GGX(Xi, roughness);\r\n  \r\n   // transform the hemisphere sample to the normal coordinate frame\r\n  // i.e. rotate the hemisphere to the normal direction\r\n  let localSpaceDirection: vec3f = normalize(vec3(\r\n    importanceSample.sinTheta * cos(importanceSample.phi), \r\n    importanceSample.sinTheta * sin(importanceSample.phi), \r\n    importanceSample.cosTheta\r\n  ));\r\n  \r\n  let TBN: mat3x3f = generateTBN(N);\r\n  let direction: vec3f = TBN * localSpaceDirection;\r\n\r\n  return vec4(direction, importanceSample.pdf);\r\n}\r\n\r\n// From the filament docs. Geometric Shadowing function\r\n// https://google.github.io/filament/Filament.html#toc4.4.2\r\nfn V_SmithGGXCorrelated(NoV: f32, NoL: f32, roughness: f32) -> f32 {\r\n  let a2: f32 = pow(roughness, 4.0);\r\n  let GGXV: f32 = NoL * sqrt(NoV * NoV * (1.0 - a2) + a2);\r\n  let GGXL: f32 = NoV * sqrt(NoL * NoL * (1.0 - a2) + a2);\r\n  return 0.5 / (GGXV + GGXL);\r\n}\r\n\r\n@compute @workgroup_size(16, 16, 1)\r\nfn main(@builtin(global_invocation_id) global_id : vec3<u32>) {  \r\n  let texelSize: vec2<u32> = textureDimensions(lutStorageTexture);\r\n\r\n  let x: u32 = global_id.x;\r\n  let y: u32 = global_id.y;\r\n\r\n  // Check bounds\r\n  if (x >= texelSize.x || y >= texelSize.y) {\r\n     return;\r\n  }\r\n  \r\n  let epsilon: f32 = 1e-6;\r\n\r\n  // Compute roughness and N·V from texture coordinates\r\n  let NdotV: f32 = max(f32(x) / f32(texelSize.x - 1), epsilon);    // Maps x-axis to N·V (0.0 to 1.0)\r\n  let roughness: f32 = max(f32(y) / f32(texelSize.y - 1), epsilon);  // Maps y-axis to roughness (0.0 to 1.0)\r\n\r\n  // Calculate view vector and normal vector\r\n  let V: vec3<f32> = vec3<f32>(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV);  // Normalized view vector\r\n  let N: vec3<f32> = vec3<f32>(0.0, 0.0, 1.0);                          // Normal is along z-axis\r\n\r\n  // Initialize integration variables\r\n  var A: f32 = 0.0;\r\n  var B: f32 = 0.0;\r\n  var C: f32 = 0.0;\r\n\r\n  // Monte Carlo integration to calculate A and B factors\r\n  let sampleCount: u32 = params.sampleCount;\r\n  for (var i: u32 = 0; i < sampleCount; i++) {\r\n    let Xi: vec2<f32> = hammersley2d(i, sampleCount);  // Importance sampling (Hammersley sequence)\r\n    \r\n    //let H: vec3<f32> = importanceSampleGGX(Xi, N, roughness);\r\n    let importanceSample: vec4f = getImportanceSample(Xi, N, roughness);\r\n    let H: vec3f = importanceSample.xyz;\r\n    // let pdf: f32 = importanceSample.w;\r\n    \r\n    let L: vec3<f32> = normalize(reflect(-V, H));\r\n    \r\n    let NdotL: f32 = clamp(L.z, 0.0, 1.0);\r\n    let NdotH: f32 = clamp(H.z, 0.0, 1.0);\r\n    let VdotH: f32 = clamp(dot(V, H), 0.0, 1.0);\r\n\r\n    // Ensure valid light direction\r\n    if (NdotL > 0.0) {     \r\n      // LUT for GGX distribution.\r\n\r\n      // Taken from: https://bruop.github.io/ibl\r\n      // Shadertoy: https://www.shadertoy.com/view/3lXXDB\r\n      // Terms besides V are from the GGX PDF we're dividing by.\r\n      let V_pdf: f32 = V_SmithGGXCorrelated(NdotV, NdotL, roughness) * VdotH * NdotL / max(NdotH, epsilon);\r\n      let Fc: f32 = pow(1.0 - VdotH, 5.0);\r\n      A += (1.0 - Fc) * V_pdf;\r\n      B += Fc * V_pdf;\r\n      C += 0.0;\r\n    }\r\n  }\r\n\r\n  // Average the integration result\r\n  // The PDF is simply pdf(v, h) -> NDF * <nh>.\r\n  // To parametrize the PDF over l, use the Jacobian transform, yielding to: pdf(v, l) -> NDF * <nh> / 4<vh>\r\n  // Since the BRDF divide through the PDF to be normalized, the 4 can be pulled out of the integral.\r\n  A = A * 4.0 / f32(sampleCount);\r\n  B = B * 4.0 / f32(sampleCount);\r\n  C = C * 4.0 * 2.0 * ${Math.PI} / f32(sampleCount);\r\n    \r\n  // Store the result in the LUT texture\r\n  textureStore(lutStorageTexture, vec2<u32>(x, y), vec4<f32>(A, B, C, 1.0));\r\n}\r\n`\r\n","export default /* wgsl */ `\r\n// Cube face lookup vectors\r\n// positive and negative Y need to be inverted\r\nconst faceVectors = array<array<vec3<f32>, 2>, 6>(\r\n  array<vec3<f32>, 2>(vec3<f32>(1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0)), // +X\r\n  array<vec3<f32>, 2>(vec3<f32>(-1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0)), // -X\r\n  array<vec3<f32>, 2>(vec3<f32>(0.0, -1.0, 0.0), vec3<f32>(0.0, 0.0, 1.0)),  // -Y\r\n  array<vec3<f32>, 2>(vec3<f32>(0.0, 1.0, 0.0), vec3<f32>(0.0, 0.0, -1.0)), // +Y\r\n  array<vec3<f32>, 2>(vec3<f32>(0.0, 0.0, 1.0), vec3<f32>(0.0, 1.0, 0.0)), // +Z\r\n  array<vec3<f32>, 2>(vec3<f32>(0.0, 0.0, -1.0), vec3<f32>(0.0, 1.0, 0.0)) // -Z\r\n);\r\n\r\n// Utility to calculate 3D direction for a given cube face pixel\r\nfn texelDirection(faceIndex : u32, u : f32, v : f32) -> vec3<f32> {\r\n  let forward = faceVectors[faceIndex][0];\r\n  let up = faceVectors[faceIndex][1];\r\n  let right = normalize(cross(up, forward));\r\n  return normalize(forward + (2.0 * u - 1.0) * right + (2.0 * v - 1.0) * up);\r\n}\r\n\r\n// Map 3D direction to equirectangular coordinates\r\nfn dirToEquirect(dir : vec3<f32>) -> vec2<f32> {\r\n  let phi = atan2(dir.z, dir.x);\r\n  let theta = asin(dir.y);\r\n  let u = 0.5 + 0.5 * phi / ${Math.PI};\r\n  let v = 0.5 - theta / ${Math.PI};\r\n  return vec2<f32>(u, v);\r\n}\r\n\r\n@compute @workgroup_size(8, 8, 1)\r\nfn main(@builtin(global_invocation_id) global_id : vec3<u32>) {\r\n  let faceSize = params.faceSize;\r\n  let cubeFaceIndex = global_id.z;\r\n  let x = global_id.x;\r\n  let y = global_id.y;\r\n\r\n  if (x >= faceSize || y >= faceSize || cubeFaceIndex >= 6u) {\r\n    return;\r\n  }\r\n\r\n  let u = f32(x) / f32(faceSize);\r\n  let v = f32(y) / f32(faceSize);\r\n\r\n  // Get the 3D direction for this cube face texel\r\n  let dir = texelDirection(cubeFaceIndex, u, v);\r\n\r\n  // Map to equirectangular coordinates\r\n  let uv = dirToEquirect(dir);        \r\n  \r\n  let hdrWidth = params.imageSize.x;\r\n  let hdrHeight = params.imageSize.y;\r\n\r\n  let texX = u32(clamp(uv.x * hdrWidth, 0.0, hdrWidth - 1.0));\r\n  let texY = u32(clamp(uv.y * hdrHeight, 0.0, hdrHeight - 1.0));\r\n\r\n  let hdrTexelIndex = texY * u32(hdrWidth) + texX;\r\n  \r\n  // Sample the equirectangular texture\r\n  let sampledColor = params.hdrImageData[hdrTexelIndex];\r\n  \r\n  // Correct cube face order in texture store (fix for reversed face indices)\r\n  textureStore(\r\n    specularStorageCubemap,\r\n    vec2<u32>(x, y),\r\n    cubeFaceIndex,\r\n    sampledColor\r\n  );\r\n}\r\n`\r\n","// ported from https://github.com/KhronosGroup/glTF-Sample-Viewer/blob/9940e4b4f4a2a296351bcd35035cc518deadc298/source/shaders/ibl_filtering.frag\r\n// TODO use chunks (hammersley, generateTBN, etc.)\r\nexport const computeDiffuseFromSpecularCubemap = (specularTexture) => /* wgsl */ `\r\nfn radicalInverse_VdC(inputBits: u32) -> f32 {\r\n  var bits: u32 = inputBits;\r\n  bits = (bits << 16u) | (bits >> 16u);\r\n  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n  return f32(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n}\r\n\r\n// hammersley2d describes a sequence of points in the 2d unit square [0,1)^2\r\n// that can be used for quasi Monte Carlo integration\r\nfn hammersley2d(i: u32, N: u32) -> vec2f {\r\n  return vec2(f32(i) / f32(N), radicalInverse_VdC(i));\r\n}\r\n\r\n// TBN generates a tangent bitangent normal coordinate frame from the normal\r\n// (the normal must be normalized)\r\nfn generateTBN(normal: vec3f) -> mat3x3f {\r\n  var bitangent: vec3f = vec3(0.0, 1.0, 0.0);\r\n\r\n  let NdotUp: f32 = dot(normal, vec3(0.0, 1.0, 0.0));\r\n  let epsilon: f32 = 0.0000001;\r\n  \r\n  if (1.0 - abs(NdotUp) <= epsilon) {\r\n    // Sampling +Y or -Y, so we need a more robust bitangent.\r\n    if (NdotUp > 0.0) {\r\n      bitangent = vec3(0.0, 0.0, 1.0);\r\n    }\r\n    else {\r\n      bitangent = vec3(0.0, 0.0, -1.0);\r\n    }\r\n  }\r\n\r\n  let tangent: vec3f = normalize(cross(bitangent, normal));\r\n  bitangent = cross(normal, tangent);\r\n\r\n  return mat3x3f(tangent, bitangent, normal);\r\n}\r\n\r\n// Mipmap Filtered Samples (GPU Gems 3, 20.4)\r\n// https://developer.nvidia.com/gpugems/gpugems3/part-iii-rendering/chapter-20-gpu-based-importance-sampling\r\n// https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf\r\nfn computeLod(pdf: f32) -> f32 {\r\n  // https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf\r\n  return 0.5 * log2( 6.0 * f32(params.faceSize) * f32(params.faceSize) / (f32(params.sampleCount) * pdf));\r\n}\r\n\r\nfn transformDirection(face: u32, uv: vec2f) -> vec3f {\r\n  // Transform the direction based on the cubemap face\r\n  switch (face) {\r\n    case 0u {\r\n      // +X\r\n      return vec3f( 1.0,  uv.y, -uv.x);\r\n    }\r\n    case 1u {\r\n      // -X\r\n      return vec3f(-1.0,  uv.y,  uv.x);\r\n    }\r\n    case 2u {\r\n      // +Y\r\n      return vec3f( uv.x,  -1.0, uv.y);\r\n    }\r\n    case 3u {\r\n      // -Y\r\n      return vec3f( uv.x, 1.0,  -uv.y);\r\n    }\r\n    case 4u {\r\n      // +Z\r\n      return vec3f( uv.x,  uv.y,  1.0);\r\n    }\r\n    case 5u {\r\n      // -Z\r\n      return vec3f(-uv.x,  uv.y, -1.0);\r\n    }\r\n    default {\r\n      return vec3f(0.0, 0.0, 0.0);\r\n    }\r\n  }\r\n}\r\n\r\nconst PI = ${Math.PI};\r\n\r\n@compute @workgroup_size(8, 8, 1) fn main(\r\n  @builtin(global_invocation_id) GlobalInvocationID: vec3u,\r\n) {\r\n  let faceSize: u32 = params.faceSize;\r\n  let sampleCount: u32 = params.sampleCount;\r\n  \r\n  let face: u32 = GlobalInvocationID.z;\r\n  let x: u32 = GlobalInvocationID.x;\r\n  let y: u32 = GlobalInvocationID.y;\r\n\r\n  if (x >= faceSize || y >= faceSize) {\r\n    return;\r\n  }\r\n\r\n  let texelSize: f32 = 1.0 / f32(faceSize);\r\n  let halfTexel: f32 = texelSize * 0.5;\r\n  \r\n  var uv: vec2f = vec2(\r\n    (f32(x) + halfTexel) * texelSize,\r\n    (f32(y) + halfTexel) * texelSize\r\n  );\r\n  \r\n  uv = uv * 2.0 - 1.0;\r\n\r\n  let normal: vec3<f32> = transformDirection(face, uv);\r\n  \r\n  var irradiance: vec3f = vec3f(0.0, 0.0, 0.0);\r\n\r\n  for (var i: u32 = 0; i < sampleCount; i++) {\r\n    // generate a quasi monte carlo point in the unit square [0.1)^2\r\n    let xi: vec2f = hammersley2d(i, sampleCount);\r\n    \r\n    let cosTheta: f32 = sqrt(1.0 - xi.y);\r\n    let sinTheta: f32 = sqrt(1.0 - cosTheta * cosTheta);\r\n    let phi: f32 = 2.0 * PI * xi.x;\r\n    let pdf: f32 = cosTheta / PI; // evaluation for solid angle, therefore drop the sinTheta\r\n\r\n    let sampleVec: vec3f = vec3f(\r\n      sinTheta * cos(phi),\r\n      sinTheta * sin(phi),\r\n      cosTheta\r\n    );\r\n    \r\n    let TBN: mat3x3f = generateTBN(normalize(normal));\r\n    \r\n    var direction: vec3f = TBN * sampleVec;\r\n    \r\n    // invert along Y axis\r\n    direction.y *= -1.0;\r\n    \r\n    let lod: f32 = computeLod(pdf);\r\n    \r\n    let sampleLevel = min(lod, f32(params.maxMipLevel));\r\n\r\n    // Convert sampleVec to texture coordinates of the specular env map\r\n    irradiance += textureSampleLevel(\r\n      ${specularTexture.options.name},\r\n      clampSampler,\r\n      direction,\r\n      sampleLevel\r\n    ).rgb;\r\n  }\r\n\r\n  irradiance /= f32(sampleCount);\r\n\r\n  textureStore(diffuseEnvMap, vec2(x, y), face, vec4f(irradiance, 1.0));\r\n}\r\n`\r\n","import { generateMips, isRenderer, Renderer } from '../../core/renderers/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { HDRImageData, HDRLoader } from '../loaders/HDRLoader'\r\nimport { Texture, TextureParams } from '../../core/textures/Texture'\r\nimport { ComputePass } from '../../core/computePasses/ComputePass'\r\nimport { Vec2 } from '../../math/Vec2'\r\nimport { throwWarning } from '../../utils/utils'\r\nimport { Sampler } from '../../core/samplers/Sampler'\r\nimport { Mat3 } from '../../math/Mat3'\r\nimport computeBrdfLutWgsl from '../../core/shaders/compute/compute-brdf-lut.wgsl'\r\nimport computeSpecularCubemapFromHdr from '../../core/shaders/compute/compute-specular-cubemap-from-hdr.wgsl'\r\nimport { computeDiffuseFromSpecularCubemap } from '../../core/shaders/compute/compute-diffuse-from-specular-cubemap.wgsl'\r\n\r\n/** Define the base parameters for the {@link ComputePass} {@link Texture} writing. */\r\nexport interface ComputePassTextureParams {\r\n  /** The size of the {@link Texture}, knowing the `width` and `height` are equal. */\r\n  size?: number\r\n  /** Number of samples to use in the {@link ComputePass} to generate the {@link Texture}. */\r\n  computeSampleCount?: number\r\n}\r\n\r\n/** Define the base {@link Texture} parameters for the textures. */\r\nexport interface ComputeTextureBaseParams {\r\n  /** Label of the {@link Texture}. */\r\n  label?: TextureParams['label']\r\n  /** Name of the {@link Texture}. */\r\n  name?: TextureParams['name']\r\n  /** Format of the {@link Texture}. */\r\n  format?: TextureParams['format']\r\n}\r\n\r\n/** Define the parameters used to create the LUT {@link Texture}. */\r\nexport interface LUTTextureParams extends ComputePassTextureParams, ComputeTextureBaseParams {}\r\n/** Define the parameters used to create the diffuse cube map {@link Texture}. */\r\nexport interface DiffuseTextureParams extends ComputePassTextureParams, ComputeTextureBaseParams {}\r\n/** Define the parameters used to create the specular cube map {@link Texture}. */\r\nexport interface SpecularTextureParams extends ComputeTextureBaseParams {\r\n  /** Whether to generate mips for this {@link Texture} or not. */\r\n  generateMips?: TextureParams['generateMips']\r\n}\r\n\r\n/** Define the options used to create the textures by the {@link EnvironmentMap}. */\r\nexport interface EnvironmentMapOptions {\r\n  /** Define the parameters used to create the LUT {@link Texture}. */\r\n  lutTextureParams: LUTTextureParams\r\n  /** Define the parameters used to create the diffuse cube map {@link Texture}. */\r\n  diffuseTextureParams: DiffuseTextureParams\r\n  /** Define the parameters used to create the specular cube map {@link Texture}. */\r\n  specularTextureParams: SpecularTextureParams\r\n}\r\n\r\n/** Define the parameters used to create the {@link EnvironmentMap}. */\r\nexport interface EnvironmentMapParams extends Partial<EnvironmentMapOptions> {}\r\n\r\n/**\r\n * Utility to create environment maps specular, diffuse and LUT textures using an HDR file.\r\n *\r\n * Create a LUT texture on init using a {@link ComputePass}. Can load an HDR file and then create the specular and diffuse textures using two separate {@link ComputePass}.\r\n *\r\n * Especially useful for IBL shading with glTF.\r\n *\r\n * @example\r\n * ```javascript\r\n * // assuming 'renderer' is a valid renderer or curtains instance\r\n * const environmentMap = new EnvironmentMap(renderer)\r\n * await environmentMap.loadAndComputeFromHDR('path/to/environment-map.hdr')\r\n * ```\r\n */\r\nexport class EnvironmentMap {\r\n  /** The {@link Renderer} used. */\r\n  renderer: Renderer\r\n  /** The {@link Sampler} used in both the {@link ComputePass} and in `IBL` shading from the {@link extras/gltf/utils.buildShaders | buildShaders} utility function. */\r\n  sampler: Sampler\r\n  /** {@link HDRLoader} used to load the .hdr file. */\r\n  hdrLoader: HDRLoader\r\n\r\n  /** Options used to generate the {@link lutTexture}, {@link specularTexture} and {@link diffuseTexture}. */\r\n  options: EnvironmentMapOptions\r\n\r\n  /** Define the default environment maps rotation. */\r\n  // TODO use a Vec3 and compute the Mat3 from it?\r\n  rotation: Mat3\r\n\r\n  /** BRDF GGX LUT {@link Texture} used for IBL shading. */\r\n  lutTexture: Texture | null\r\n  /** Diffuse environment cube map {@link Texture}. */\r\n  diffuseTexture: Texture | null\r\n  /** Specular environment cube map {@link Texture}. */\r\n  specularTexture: Texture | null\r\n\r\n  /**\r\n   * {@link EnvironmentMap} constructor.\r\n   * @param renderer - {@link Renderer} or {@link GPUCurtains} class object used to create this {@link EnvironmentMap}.\r\n   * @param params - {@link EnvironmentMapParams | parameters} use to create this {@link EnvironmentMap}. Defines the various textures options.\r\n   */\r\n  constructor(\r\n    renderer: Renderer | GPUCurtains,\r\n    params: EnvironmentMapParams = {\r\n      lutTextureParams: {\r\n        size: 256,\r\n        computeSampleCount: 1024,\r\n        label: 'Environment LUT texture',\r\n        name: 'lutTexture',\r\n        format: 'rgba32float',\r\n      },\r\n      diffuseTextureParams: {\r\n        size: 128,\r\n        computeSampleCount: 2048,\r\n        label: 'Environment diffuse texture',\r\n        name: 'diffuseTexture',\r\n        format: 'rgba16float',\r\n      },\r\n      specularTextureParams: {\r\n        label: 'Environment specular texture',\r\n        name: 'specularTexture',\r\n        format: 'rgba16float',\r\n        generateMips: true,\r\n      },\r\n    }\r\n  ) {\r\n    renderer = isRenderer(renderer, 'EnvironmentMap')\r\n\r\n    this.renderer = renderer\r\n\r\n    this.options = params as EnvironmentMapOptions\r\n\r\n    this.sampler = new Sampler(this.renderer, {\r\n      label: 'Clamp sampler',\r\n      name: 'clampSampler',\r\n      magFilter: 'linear',\r\n      minFilter: 'linear',\r\n      mipmapFilter: 'linear',\r\n      addressModeU: 'clamp-to-edge',\r\n      addressModeV: 'clamp-to-edge',\r\n    })\r\n\r\n    this.rotation = new Mat3(new Float32Array([0, 0, 1, 0, 1, 0, -1, 0, 0]))\r\n\r\n    this.hdrLoader = new HDRLoader()\r\n\r\n    // generate LUT texture right now\r\n    this.computeBRDFLUTTexture()\r\n  }\r\n\r\n  /**\r\n   * Once the given {@link ComputePass} has written to a temporary storage {@link Texture}, copy it into our permanent {@link Texture}.\r\n   * @param commandEncoder - The GPU command encoder to use.\r\n   * @param storageTexture - Temporary storage {@link Texture} used in the {@link ComputePass}.\r\n   * @param texture - Permanent {@link Texture} (either the {@link lutTexture}, {@link specularTexture} or {@link diffuseTexture}) to copy onto.\r\n   * @private\r\n   */\r\n  #copyComputeStorageTextureToTexture(commandEncoder: GPUCommandEncoder, storageTexture: Texture, texture: Texture) {\r\n    commandEncoder.copyTextureToTexture(\r\n      {\r\n        texture: storageTexture.texture,\r\n      },\r\n      {\r\n        texture: texture.texture,\r\n      },\r\n      [texture.texture.width, texture.texture.height, texture.texture.depthOrArrayLayers]\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Create the {@link lutTexture | BRDF GGX LUT texture} using the provided {@link LUTTextureParams | LUT texture options} and a {@link ComputePass} that runs once.\r\n   */\r\n  async computeBRDFLUTTexture() {\r\n    // specific lut texture options\r\n    const { size, computeSampleCount, ...lutTextureParams } = this.options.lutTextureParams\r\n\r\n    this.lutTexture = new Texture(this.renderer, {\r\n      ...lutTextureParams,\r\n      visibility: ['fragment'],\r\n      fixedSize: {\r\n        width: size,\r\n        height: size,\r\n      },\r\n      autoDestroy: false,\r\n    })\r\n\r\n    let lutStorageTexture = new Texture(this.renderer, {\r\n      label: 'LUT storage texture',\r\n      name: 'lutStorageTexture',\r\n      format: this.lutTexture.options.format,\r\n      visibility: ['compute'],\r\n      usage: ['copySrc', 'storageBinding'],\r\n      type: 'storage',\r\n      fixedSize: {\r\n        width: this.lutTexture.size.width,\r\n        height: this.lutTexture.size.height,\r\n      },\r\n    })\r\n\r\n    let computeLUTPass = new ComputePass(this.renderer, {\r\n      label: 'Compute LUT texture',\r\n      autoRender: false, // we're going to render only on demand\r\n      dispatchSize: [Math.ceil(lutStorageTexture.size.width / 16), Math.ceil(lutStorageTexture.size.height / 16), 1],\r\n      shaders: {\r\n        compute: {\r\n          code: computeBrdfLutWgsl,\r\n        },\r\n      },\r\n      uniforms: {\r\n        params: {\r\n          struct: {\r\n            sampleCount: {\r\n              type: 'u32',\r\n              value: computeSampleCount,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      textures: [lutStorageTexture],\r\n    })\r\n\r\n    await computeLUTPass.material.compileMaterial()\r\n\r\n    this.renderer.onBeforeRenderScene.add(\r\n      (commandEncoder) => {\r\n        // run the compute pass just once\r\n        this.renderer.renderSingleComputePass(commandEncoder, computeLUTPass)\r\n\r\n        // copy the result to our LUT texture\r\n        this.#copyComputeStorageTextureToTexture(commandEncoder, lutStorageTexture, this.lutTexture)\r\n      },\r\n      { once: true }\r\n    )\r\n\r\n    this.renderer.onAfterCommandEncoderSubmission.add(\r\n      () => {\r\n        // once command encoder has been submitted, free the resources\r\n        computeLUTPass.destroy()\r\n        lutStorageTexture.destroy()\r\n        lutStorageTexture = null\r\n        computeLUTPass = null\r\n      },\r\n      { once: true }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Create the {@link specularTexture | specular cube map texture} from a loaded {@link HDRImageData} using the provided {@link SpecularTextureParams | specular texture options} and a {@link ComputePass} that runs once.\r\n   * @param parsedHdr - parsed {@link HDRImageData} loaded by the {@link hdrLoader}.\r\n   */\r\n  async computeSpecularCubemapFromHDRData(parsedHdr: HDRImageData) {\r\n    let cubeStorageTexture = new Texture(this.renderer, {\r\n      label: 'Specular storage cubemap',\r\n      name: 'specularStorageCubemap',\r\n      format: this.specularTexture.options.format,\r\n      visibility: ['compute'],\r\n      usage: ['copySrc', 'storageBinding'],\r\n      type: 'storage',\r\n      fixedSize: {\r\n        width: this.specularTexture.size.width,\r\n        height: this.specularTexture.size.height,\r\n        depth: 6,\r\n      },\r\n      viewDimension: '2d-array',\r\n    })\r\n\r\n    let computeCubeMapPass = new ComputePass(this.renderer, {\r\n      label: 'Compute specular cubemap from equirectangular',\r\n      autoRender: false, // we're going to render only on demand\r\n      dispatchSize: [\r\n        Math.ceil(this.specularTexture.size.width / 8),\r\n        Math.ceil(this.specularTexture.size.height / 8),\r\n        6,\r\n      ],\r\n      shaders: {\r\n        compute: {\r\n          code: computeSpecularCubemapFromHdr,\r\n        },\r\n      },\r\n      storages: {\r\n        params: {\r\n          struct: {\r\n            hdrImageData: {\r\n              type: 'array<vec4f>',\r\n              value: parsedHdr.data,\r\n            },\r\n            imageSize: {\r\n              type: 'vec2f',\r\n              value: new Vec2(parsedHdr.width, parsedHdr.height),\r\n            },\r\n            faceSize: {\r\n              type: 'u32',\r\n              value: this.specularTexture.size.width,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      textures: [cubeStorageTexture],\r\n    })\r\n\r\n    await computeCubeMapPass.material.compileMaterial()\r\n\r\n    // do it right now\r\n    // before computing the diffuse texture\r\n    const commandEncoder = this.renderer.device?.createCommandEncoder({\r\n      label: 'Render once command encoder',\r\n    })\r\n\r\n    if (!this.renderer.production) commandEncoder.pushDebugGroup('Render once command encoder')\r\n\r\n    this.renderer.renderSingleComputePass(commandEncoder, computeCubeMapPass)\r\n\r\n    // copy the result to our diffuse texture\r\n    this.#copyComputeStorageTextureToTexture(commandEncoder, cubeStorageTexture, this.specularTexture)\r\n\r\n    if (!this.renderer.production) commandEncoder.popDebugGroup()\r\n    const commandBuffer = commandEncoder.finish()\r\n    this.renderer.device?.queue.submit([commandBuffer])\r\n\r\n    // generate mips if needed\r\n    if (this.specularTexture.texture.mipLevelCount > 1) {\r\n      generateMips(this.renderer.device, this.specularTexture.texture)\r\n    }\r\n\r\n    computeCubeMapPass.destroy()\r\n    cubeStorageTexture.destroy()\r\n    cubeStorageTexture = null\r\n    computeCubeMapPass = null\r\n  }\r\n\r\n  /**\r\n   * Compute the {@link diffuseTexture | diffuse cube map texture} from the {@link specularTexture | specular cube map texture } using the provided {@link DiffuseTextureParams | diffuse texture options} and a {@link ComputePass} that runs once.\r\n   */\r\n  async computeDiffuseFromSpecular() {\r\n    if (this.specularTexture.options.viewDimension !== 'cube') {\r\n      throwWarning(\r\n        'Could not compute the diffuse texture because the specular texture is not a cube map:' +\r\n          this.specularTexture.options.viewDimension\r\n      )\r\n      return\r\n    }\r\n\r\n    let diffuseStorageTexture = new Texture(this.renderer, {\r\n      label: 'Diffuse storage cubemap',\r\n      name: 'diffuseEnvMap',\r\n      format: this.diffuseTexture.options.format,\r\n      visibility: ['compute'],\r\n      usage: ['copySrc', 'storageBinding'],\r\n      type: 'storage',\r\n      fixedSize: {\r\n        width: this.diffuseTexture.size.width,\r\n        height: this.diffuseTexture.size.height,\r\n        depth: 6,\r\n      },\r\n      viewDimension: '2d-array',\r\n    })\r\n\r\n    let computeDiffusePass = new ComputePass(this.renderer, {\r\n      label: 'Compute diffuse map from specular map',\r\n      autoRender: false, // we're going to render only on demand\r\n      dispatchSize: [Math.ceil(this.diffuseTexture.size.width / 8), Math.ceil(this.diffuseTexture.size.height / 8), 6],\r\n      shaders: {\r\n        compute: {\r\n          code: computeDiffuseFromSpecularCubemap(this.specularTexture),\r\n        },\r\n      },\r\n      uniforms: {\r\n        params: {\r\n          struct: {\r\n            faceSize: {\r\n              type: 'u32',\r\n              value: this.diffuseTexture.size.width,\r\n            },\r\n            maxMipLevel: {\r\n              type: 'u32',\r\n              value: this.specularTexture.texture.mipLevelCount,\r\n            },\r\n            sampleCount: {\r\n              type: 'u32',\r\n              value: this.options.diffuseTextureParams.computeSampleCount,\r\n            },\r\n          },\r\n        },\r\n      },\r\n      samplers: [this.sampler],\r\n      textures: [this.specularTexture, diffuseStorageTexture],\r\n    })\r\n\r\n    await computeDiffusePass.material.compileMaterial()\r\n\r\n    this.renderer.onBeforeRenderScene.add(\r\n      (commandEncoder) => {\r\n        // run the compute pass just once\r\n        this.renderer.renderSingleComputePass(commandEncoder, computeDiffusePass)\r\n\r\n        // copy the result to our diffuse texture\r\n        this.#copyComputeStorageTextureToTexture(commandEncoder, diffuseStorageTexture, this.diffuseTexture)\r\n      },\r\n      { once: true }\r\n    )\r\n\r\n    this.renderer.onAfterCommandEncoderSubmission.add(\r\n      () => {\r\n        // once command encoder has been submitted, free the resources\r\n        computeDiffusePass.destroy()\r\n        diffuseStorageTexture.destroy()\r\n        diffuseStorageTexture = null\r\n        computeDiffusePass = null\r\n      },\r\n      { once: true }\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Load an HDR environment map and then generates the {@link specularTexture} and {@link diffuseTexture} using two separate {@link ComputePass}.\r\n   * @param url - The url of the .hdr file to load.\r\n   */\r\n  async loadAndComputeFromHDR(url: string) {\r\n    const parsedHdr = await this.hdrLoader.loadFromUrl(url)\r\n\r\n    const { width, height } = parsedHdr ? parsedHdr : { width: 1024, height: 512 }\r\n\r\n    const faceSize = Math.max(width / 4, height / 2)\r\n\r\n    // now prepare the textures\r\n\r\n    // default options to absolutely use\r\n    const textureDefaultOptions: TextureParams = {\r\n      viewDimension: 'cube',\r\n      autoDestroy: false, // keep alive when changing glTF\r\n    }\r\n\r\n    // specular texture\r\n    if (!this.specularTexture) {\r\n      this.specularTexture = new Texture(this.renderer, {\r\n        ...this.options.specularTextureParams,\r\n        ...{\r\n          visibility: ['fragment', 'compute'],\r\n          fixedSize: {\r\n            width: faceSize,\r\n            height: faceSize,\r\n          },\r\n        },\r\n        ...textureDefaultOptions,\r\n      } as TextureParams)\r\n    } else if (this.specularTexture.size.width !== faceSize || this.specularTexture.size.height !== faceSize) {\r\n      this.specularTexture.options.fixedSize.width = faceSize\r\n      this.specularTexture.options.fixedSize.height = faceSize\r\n      this.specularTexture.size.width = faceSize\r\n      this.specularTexture.size.height = faceSize\r\n      this.specularTexture.createTexture()\r\n    }\r\n\r\n    // specific diffuse texture options\r\n    const { size, computeSampleCount, ...diffuseTextureParams } = this.options.diffuseTextureParams\r\n\r\n    const diffuseSize = Math.min(size, faceSize)\r\n\r\n    if (!this.diffuseTexture) {\r\n      // diffuse texture\r\n      this.diffuseTexture = new Texture(this.renderer, {\r\n        ...diffuseTextureParams,\r\n        ...{\r\n          visibility: ['fragment'],\r\n          fixedSize: {\r\n            width: diffuseSize,\r\n            height: diffuseSize,\r\n          },\r\n        },\r\n        ...textureDefaultOptions,\r\n      } as TextureParams)\r\n    } else if (this.diffuseTexture.size.width !== diffuseSize || this.diffuseTexture.size.height !== diffuseSize) {\r\n      this.diffuseTexture.options.fixedSize.width = diffuseSize\r\n      this.diffuseTexture.options.fixedSize.height = diffuseSize\r\n      this.diffuseTexture.size.width = diffuseSize\r\n      this.diffuseTexture.size.height = diffuseSize\r\n      this.diffuseTexture.createTexture()\r\n    }\r\n\r\n    if (parsedHdr) {\r\n      this.computeSpecularCubemapFromHDRData(parsedHdr).then(() => {\r\n        this.computeDiffuseFromSpecular()\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy the {@link EnvironmentMap} and its associated textures.\r\n   */\r\n  destroy() {\r\n    this.lutTexture?.destroy()\r\n    this.diffuseTexture?.destroy()\r\n    this.specularTexture?.destroy()\r\n  }\r\n}\r\n","import { IndexedGeometry } from '../../core/geometries/IndexedGeometry'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { GeometryBaseParams } from '../../types/Geometries'\r\n\r\n/**\r\n * Parameters used to create a {@link BoxGeometry}\r\n */\r\nexport interface BoxGeometryParams extends GeometryBaseParams {\r\n  /** Number of segments along the X axis */\r\n  widthSegments?: number\r\n  /** Number of segments along the Y axis */\r\n  heightSegments?: number\r\n  /** Number of segments along the Z axis */\r\n  depthSegments?: number\r\n}\r\n\r\n/**\r\n * Helper to easily create 3D box indexed geometries.\r\n *\r\n * @example\r\n * ```javascript\r\n * const boxGeometry = new BoxGeometry()\r\n * ```\r\n */\r\nexport class BoxGeometry extends IndexedGeometry {\r\n  constructor(\r\n    {\r\n      instancesCount = 1,\r\n      vertexBuffers = [],\r\n      topology,\r\n      mapBuffersAtCreation = true,\r\n      widthSegments = 1,\r\n      heightSegments = 1,\r\n      depthSegments = 1,\r\n    } = {} as BoxGeometryParams\r\n  ) {\r\n    super({ verticesOrder: 'ccw', topology, instancesCount, vertexBuffers, mapBuffersAtCreation })\r\n\r\n    this.type = 'BoxGeometry'\r\n\r\n    // taken from threejs\r\n    // https://github.com/mrdoob/three.js/blob/dev/src/geometries/BoxGeometry.js\r\n    widthSegments = Math.floor(widthSegments)\r\n    heightSegments = Math.floor(heightSegments)\r\n    depthSegments = Math.floor(depthSegments)\r\n\r\n    const vertices = []\r\n    const uvs = []\r\n    const normals = []\r\n    const indices = []\r\n\r\n    let numberOfVertices = 0\r\n\r\n    const buildPlane = (u, v, w, udir, vdir, width, height, depth, gridX, gridY) => {\r\n      const segmentWidth = width / gridX\r\n      const segmentHeight = height / gridY\r\n\r\n      const widthHalf = width / 2\r\n      const heightHalf = height / 2\r\n      const depthHalf = depth / 2\r\n\r\n      const gridX1 = gridX + 1\r\n      const gridY1 = gridY + 1\r\n\r\n      let vertexCounter = 0\r\n\r\n      const vector = new Vec3()\r\n\r\n      // generate vertices, normals and uvs\r\n\r\n      for (let iy = 0; iy < gridY1; iy++) {\r\n        const y = iy * segmentHeight - heightHalf\r\n\r\n        for (let ix = 0; ix < gridX1; ix++) {\r\n          const x = ix * segmentWidth - widthHalf\r\n\r\n          // set values to correct vector component\r\n\r\n          vector[u] = x * udir\r\n          vector[v] = y * vdir\r\n          vector[w] = depthHalf\r\n\r\n          // now apply vector to vertex buffer\r\n\r\n          vertices.push(vector.x, vector.y, vector.z)\r\n\r\n          // set values to correct vector component\r\n\r\n          vector[u] = 0\r\n          vector[v] = 0\r\n          vector[w] = depth > 0 ? 1 : -1\r\n\r\n          // now apply vector to normal buffer\r\n\r\n          normals.push(vector.x, vector.y, vector.z)\r\n\r\n          // uvs\r\n\r\n          uvs.push(ix / gridX)\r\n          uvs.push(iy / gridY)\r\n\r\n          // counters\r\n\r\n          vertexCounter += 1\r\n        }\r\n      }\r\n\r\n      // indices\r\n\r\n      // 1. you need three indices to draw a single face\r\n      // 2. a single segment consists of two faces\r\n      // 3. so we need to generate six (2*3) indices per segment\r\n\r\n      for (let iy = 0; iy < gridY; iy++) {\r\n        for (let ix = 0; ix < gridX; ix++) {\r\n          const a = numberOfVertices + ix + gridX1 * iy\r\n          const b = numberOfVertices + ix + gridX1 * (iy + 1)\r\n          const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1)\r\n          const d = numberOfVertices + (ix + 1) + gridX1 * iy\r\n\r\n          // faces\r\n\r\n          indices.push(a, b, d)\r\n          indices.push(b, c, d)\r\n\r\n          // update total number of vertices\r\n\r\n          numberOfVertices += vertexCounter\r\n        }\r\n      }\r\n    }\r\n\r\n    buildPlane('z', 'y', 'x', -1, -1, 2, 2, 2, depthSegments, heightSegments) // px\r\n    buildPlane('z', 'y', 'x', 1, -1, 2, 2, -2, depthSegments, heightSegments) // nx\r\n    buildPlane('x', 'z', 'y', 1, 1, 2, 2, 2, widthSegments, depthSegments) // py\r\n    buildPlane('x', 'z', 'y', 1, -1, 2, 2, -2, widthSegments, depthSegments) // ny\r\n    buildPlane('x', 'y', 'z', 1, -1, 2, 2, 2, widthSegments, heightSegments) // pz\r\n    buildPlane('x', 'y', 'z', -1, -1, 2, 2, -2, widthSegments, heightSegments) // nz\r\n\r\n    this.setAttribute({\r\n      name: 'position',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      size: 3,\r\n      array: new Float32Array(vertices),\r\n    })\r\n\r\n    this.setAttribute({\r\n      name: 'uv',\r\n      type: 'vec2f',\r\n      bufferFormat: 'float32x2',\r\n      size: 2,\r\n      array: new Float32Array(uvs),\r\n    })\r\n\r\n    this.setAttribute({\r\n      name: 'normal',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      size: 3,\r\n      array: new Float32Array(normals),\r\n    })\r\n\r\n    this.setIndexBuffer({\r\n      array: this.useUint16IndexArray ? new Uint16Array(indices) : new Uint32Array(indices),\r\n      bufferFormat: this.useUint16IndexArray ? 'uint16' : 'uint32',\r\n    })\r\n  }\r\n}\r\n","import { IndexedGeometry } from '../../core/geometries/IndexedGeometry'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { GeometryBaseParams } from '../../types/Geometries'\r\n\r\n/**\r\n * Parameters used to create a {@link SphereGeometry}\r\n */\r\nexport interface SphereGeometryParams extends GeometryBaseParams {\r\n  /** Number of horizontal segments */\r\n  widthSegments?: number\r\n  /** Number of vertical segments */\r\n  heightSegments?: number\r\n  /** Horizontal starting angle */\r\n  phiStart?: number\r\n  /** Horizontal sweep angle size */\r\n  phiLength?: number\r\n  /** Vertical starting angle */\r\n  thetaStart?: number\r\n  /** Vertical sweep angle size */\r\n  thetaLength?: number\r\n}\r\n\r\n/**\r\n * Helper to easily create 3D sphere indexed geometries.\r\n *\r\n * @example\r\n * ```javascript\r\n * const sphereGeometry = new SphereGeometry()\r\n * ```\r\n */\r\nexport class SphereGeometry extends IndexedGeometry {\r\n  constructor(\r\n    {\r\n      topology,\r\n      instancesCount = 1,\r\n      vertexBuffers = [],\r\n      mapBuffersAtCreation = true,\r\n      widthSegments = 32,\r\n      heightSegments = 16,\r\n      phiStart = 0,\r\n      phiLength = Math.PI * 2,\r\n      thetaStart = 0,\r\n      thetaLength = Math.PI,\r\n    } = {} as SphereGeometryParams\r\n  ) {\r\n    super({ verticesOrder: 'ccw', topology, instancesCount, vertexBuffers, mapBuffersAtCreation })\r\n\r\n    this.type = 'SphereGeometry'\r\n\r\n    // taken from threejs\r\n    // https://github.com/mrdoob/three.js/blob/dev/src/geometries/SphereGeometry.js\r\n    widthSegments = Math.max(3, Math.floor(widthSegments))\r\n    heightSegments = Math.max(2, Math.floor(heightSegments))\r\n\r\n    const radius = 1\r\n    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI)\r\n\r\n    let index = 0\r\n    const grid = []\r\n\r\n    const vertex = new Vec3()\r\n    const normal = new Vec3()\r\n\r\n    // buffers\r\n\r\n    const indices = []\r\n    const vertices = []\r\n    const normals = []\r\n    const uvs = []\r\n\r\n    // generate vertices, normals and uvs\r\n\r\n    for (let iy = 0; iy <= heightSegments; iy++) {\r\n      const verticesRow = []\r\n\r\n      const v = iy / heightSegments\r\n\r\n      // special case for the poles\r\n\r\n      let uOffset = 0\r\n\r\n      if (iy === 0 && thetaStart === 0) {\r\n        uOffset = 0.5 / widthSegments\r\n      } else if (iy === heightSegments && thetaEnd === Math.PI) {\r\n        uOffset = -0.5 / widthSegments\r\n      }\r\n\r\n      for (let ix = 0; ix <= widthSegments; ix++) {\r\n        const u = ix / widthSegments\r\n\r\n        // vertex\r\n\r\n        vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\r\n        vertex.y = radius * Math.cos(thetaStart + v * thetaLength)\r\n        vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\r\n\r\n        vertices.push(vertex.x, vertex.y, vertex.z)\r\n\r\n        // normal\r\n\r\n        normal.copy(vertex).normalize()\r\n        normals.push(normal.x, normal.y, normal.z)\r\n\r\n        // uv\r\n\r\n        uvs.push(u + uOffset, v)\r\n\r\n        verticesRow.push(index++)\r\n      }\r\n\r\n      grid.push(verticesRow)\r\n    }\r\n\r\n    // indices\r\n\r\n    for (let iy = 0; iy < heightSegments; iy++) {\r\n      for (let ix = 0; ix < widthSegments; ix++) {\r\n        const a = grid[iy][ix + 1]\r\n        const b = grid[iy][ix]\r\n        const c = grid[iy + 1][ix]\r\n        const d = grid[iy + 1][ix + 1]\r\n\r\n        if (iy !== 0 || thetaStart > 0) indices.push(a, b, d)\r\n        if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d)\r\n      }\r\n    }\r\n\r\n    this.setAttribute({\r\n      name: 'position',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      size: 3,\r\n      array: new Float32Array(vertices),\r\n    })\r\n\r\n    this.setAttribute({\r\n      name: 'uv',\r\n      type: 'vec2f',\r\n      bufferFormat: 'float32x2',\r\n      size: 2,\r\n      array: new Float32Array(uvs),\r\n    })\r\n\r\n    this.setAttribute({\r\n      name: 'normal',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      size: 3,\r\n      array: new Float32Array(normals),\r\n    })\r\n\r\n    this.setIndexBuffer({\r\n      array: this.useUint16IndexArray ? new Uint16Array(indices) : new Uint32Array(indices),\r\n      bufferFormat: this.useUint16IndexArray ? 'uint16' : 'uint32',\r\n    })\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../../core/renderers/utils'\r\nimport { RenderTarget } from '../../core/renderPasses/RenderTarget'\r\nimport { FullscreenPlane } from '../../core/meshes/FullscreenPlane'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { Texture, TextureParams } from '../../core/textures/Texture'\r\nimport { MeshBaseRenderParams } from '../../core/meshes/mixins/MeshBaseMixin'\r\n\r\n/**\r\n * Used to create a special type of {@link FullscreenPlane} that allows to use the previous frame fragment shader output as an input texture.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a PingPongPlane\r\n * const shaderPass = new PingPongPlane(gpuCurtain, {\r\n *   label: 'My ping pong plane',\r\n *   shaders: {\r\n *     fragment: {\r\n *       code: pingPongCode, // assume it is a valid WGSL fragment shader\r\n *     },\r\n *   },\r\n * })\r\n * ```\r\n */\r\nexport class PingPongPlane extends FullscreenPlane {\r\n  /** {@link RenderTarget} content to use as an input */\r\n  outputTarget: RenderTarget\r\n\r\n  /**\r\n   * PingPongPlane constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link PingPongPlane}\r\n   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link PingPongPlane}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters = {} as MeshBaseRenderParams) {\r\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' PingPongPlane' : 'PingPongPlane')\r\n\r\n    const colorAttachments =\r\n      parameters.targets &&\r\n      parameters.targets.length &&\r\n      parameters.targets.map((target) => {\r\n        return {\r\n          targetFormat: target.format,\r\n        }\r\n      })\r\n\r\n    // we will render into a separate texture\r\n    parameters.outputTarget = new RenderTarget(renderer, {\r\n      label: parameters.label ? parameters.label + ' render target' : 'Ping Pong render target',\r\n      useDepth: false,\r\n      ...(colorAttachments && { colorAttachments }),\r\n    })\r\n\r\n    // no blending and depth for ping pong planes\r\n    parameters.transparent = false\r\n    parameters.depth = false\r\n\r\n    parameters.label = parameters.label ?? 'PingPongPlane ' + renderer.pingPongPlanes?.length\r\n\r\n    super(renderer, parameters)\r\n\r\n    this.type = 'PingPongPlane'\r\n\r\n    this.createTexture({\r\n      label: parameters.label ? `${parameters.label} render texture` : 'PingPongPlane render texture',\r\n      name: 'renderTexture',\r\n      ...(parameters.targets && parameters.targets.length && { format: parameters.targets[0].format }),\r\n      usage: ['copyDst', 'textureBinding'],\r\n    } as TextureParams)\r\n  }\r\n\r\n  /**\r\n   * Get our main {@link Texture}, the one that contains our ping pong content\r\n   * @readonly\r\n   */\r\n  get renderTexture(): Texture | undefined {\r\n    return this.textures.find((texture) => texture.options.name === 'renderTexture')\r\n  }\r\n\r\n  /**\r\n   * Add the {@link PingPongPlane} to the {@link core/scenes/Scene.Scene | Scene} and optionally to the renderer.\r\n   * @param addToRenderer - whether to add this {@link PingPongPlane} to the {@link Renderer#pingPongPlanes | Renderer pingPongPlanes array}\r\n   */\r\n  addToScene(addToRenderer = false) {\r\n    if (addToRenderer) {\r\n      this.renderer.pingPongPlanes.push(this)\r\n    }\r\n\r\n    if (this.autoRender) {\r\n      this.renderer.scene.addPingPongPlane(this)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the {@link PingPongPlane} from the {@link core/scenes/Scene.Scene | Scene} and optionally from the renderer as well.\r\n   * @param removeFromRenderer - whether to remove this {@link PingPongPlane} from the {@link Renderer#pingPongPlanes | Renderer pingPongPlanes array}\r\n   */\r\n  removeFromScene(removeFromRenderer = false) {\r\n    if (this.outputTarget) {\r\n      this.outputTarget.destroy()\r\n    }\r\n\r\n    if (this.autoRender) {\r\n      this.renderer.scene.removePingPongPlane(this)\r\n    }\r\n\r\n    if (removeFromRenderer) {\r\n      this.renderer.pingPongPlanes = this.renderer.pingPongPlanes.filter((pPP) => pPP.uuid !== this.uuid)\r\n    }\r\n  }\r\n}\r\n","import { Vec2 } from '../../math/Vec2'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { CameraRenderer, isCameraRenderer, isProjectedMesh } from '../../core/renderers/utils'\r\nimport { Camera } from '../../core/camera/Camera'\r\nimport { throwWarning } from '../../utils/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { ProjectedMesh } from '../../core/renderers/GPURenderer'\r\nimport { IndexBuffer, IndexedGeometry } from '../../core/geometries/IndexedGeometry'\r\nimport { VertexBufferAttribute } from '../../types/Geometries'\r\nimport { Object3D } from '../../core/objects3D/Object3D'\r\n\r\n/**\r\n * Defines the returned values when an intersection between the {@link Raycaster#ray | ray} and a {@link ProjectedMesh | projected mesh} has been found.\r\n */\r\nexport interface Intersection {\r\n  /** Intersected {@link ProjectedMesh | projected mesh}. */\r\n  object: ProjectedMesh\r\n  /** Distance from the {@link Raycaster#ray | ray} origin to the intersection point. */\r\n  distance: number\r\n  /** {@link Vec3 | Coordinate} of the intersection point in {@link object} local space. */\r\n  localPoint: Vec3\r\n  /** {@link Vec3 | Coordinate} of the intersection point in world space. */\r\n  point: Vec3\r\n  /** The triangle (as an array of {@link Vec3} vertices) inside which lies the intersection point. */\r\n  triangle: Vec3[]\r\n  /** Index of the triangle in the {@link ProjectedMesh | projected mesh} geometry position or index array. */\r\n  triangleIndex: number\r\n  /** Interpolated {@link Vec2 | uv coordinates} of the intersection point. */\r\n  uv?: Vec2\r\n  /** Interpolated {@link Vec3 | normal} of the intersection point, in {@link object} local space. */\r\n  normal?: Vec3\r\n}\r\n\r\n/**\r\n * Utility to help with raycasting (determining what objects in the 3d space the mouse is over).\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a mesh with a box geometry\r\n * // will use the normals colors as default shading\r\n * const mesh = new Mesh(gpuCurtains, {\r\n *   label: 'My mesh',\r\n *   geometry: new BoxGeometry(),\r\n * })\r\n *\r\n * const raycaster = new Raycaster(gpuCurtains)\r\n *\r\n * window.addEventListener('mousemove', (e) => {\r\n *   raycaster.setFromMouse(e)\r\n *\r\n *   const intersections = raycaster.intersectObject(mesh)\r\n *\r\n *   if(intersections.length) {\r\n *     // the mouse is hovering the mesh\r\n *     mesh.scale.set(1.25)\r\n *   } else {\r\n *     // the mouse is not hovering the mesh\r\n *     mesh.scale.set(1)\r\n *   }\r\n * })\r\n * ```\r\n */\r\nexport class Raycaster {\r\n  /** The type of the {@link Raycaster}. */\r\n  type: string\r\n  /** The {@link CameraRenderer} used. */\r\n  renderer: CameraRenderer\r\n  /** The {@link Camera} used. */\r\n  camera: Camera | null\r\n\r\n  /** Pointer position in normalized device coordinates (in the [-1, 1] range). */\r\n  pointer: Vec2\r\n\r\n  /** Ray used to test for intersections. */\r\n  ray: {\r\n    /** Origin of the ray in world space ({@link Camera} position). */\r\n    origin: Vec3\r\n    /** Normalized direction of the ray in world space. */\r\n    direction: Vec3\r\n  }\r\n\r\n  /** @ignore */\r\n  #localRay: {\r\n    origin: Vec3\r\n    direction: Vec3\r\n  }\r\n\r\n  /** @ignore */\r\n  #v0: Vec3\r\n  /** @ignore */\r\n  #v1: Vec3\r\n  /** @ignore */\r\n  #v2: Vec3\r\n\r\n  /** @ignore */\r\n  #edge1: Vec3\r\n  /** @ignore */\r\n  #edge2: Vec3\r\n\r\n  /** @ignore */\r\n  #uv0: Vec2\r\n  /** @ignore */\r\n  #uv1: Vec2\r\n  /** @ignore */\r\n  #uv2: Vec2\r\n\r\n  /** @ignore */\r\n  #n0: Vec3\r\n  /** @ignore */\r\n  #n1: Vec3\r\n  /** @ignore */\r\n  #n2: Vec3\r\n\r\n  /**\r\n   * Raycaster constructor\r\n   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link Raycaster}\r\n   */\r\n  constructor(renderer: CameraRenderer | GPUCurtains) {\r\n    this.type = 'Raycaster'\r\n\r\n    renderer = isCameraRenderer(renderer, this.type)\r\n\r\n    this.renderer = renderer\r\n    this.camera = this.renderer.camera\r\n\r\n    this.pointer = new Vec2(Infinity)\r\n\r\n    this.ray = {\r\n      origin: new Vec3(),\r\n      direction: new Vec3(),\r\n    }\r\n\r\n    // ray in local object space\r\n    this.#localRay = {\r\n      origin: this.ray.origin.clone(),\r\n      direction: this.ray.direction.clone(),\r\n    }\r\n\r\n    // helper vectors to speed up calcs\r\n    // positions\r\n    this.#v0 = new Vec3()\r\n    this.#v1 = new Vec3()\r\n    this.#v2 = new Vec3()\r\n    // edges\r\n    this.#edge1 = new Vec3()\r\n    this.#edge2 = new Vec3()\r\n    // uvs\r\n    this.#uv0 = new Vec2()\r\n    this.#uv1 = new Vec2()\r\n    this.#uv2 = new Vec2()\r\n    // normals\r\n    this.#n0 = new Vec3()\r\n    this.#n1 = new Vec3()\r\n    this.#n2 = new Vec3()\r\n  }\r\n\r\n  /**\r\n   * Set the {@link pointer} normalized device coordinates values (in the [-1, 1] range) based on a mouse/pointer/touch event and the {@link CameraRenderer#boundingRect | renderer bounding rectangle}. Useful if the canvas has a fixed position for example, but you might need to directly use {@link setFromNDCCoords} if not.\r\n   * @param e - Mouse, pointer or touch event.\r\n   */\r\n  setFromMouse(e: MouseEvent | PointerEvent | TouchEvent) {\r\n    const { clientX, clientY } =\r\n      (e as TouchEvent).targetTouches && (e as TouchEvent).targetTouches.length\r\n        ? (e as TouchEvent).targetTouches[0]\r\n        : (e as MouseEvent | PointerEvent)\r\n\r\n    this.setFromNDCCoords(\r\n      ((clientX - this.renderer.boundingRect.left) / this.renderer.boundingRect.width) * 2 - 1,\r\n      -((clientY - this.renderer.boundingRect.top) / this.renderer.boundingRect.height) * 2 + 1\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Set the {@link pointer} normalized device coordinates (in the [-1, 1] range).\r\n   * @param x - input position along the X axis in the [-1, 1] range where `-1` represents the left edge and `1` the right edge.\r\n   * @param y - input position along the Y axis in the [-1, 1] range where `-1` represents the bottom edge and `1` the top edge.\r\n   */\r\n  setFromNDCCoords(x = 0, y = 0) {\r\n    this.pointer.set(x, y)\r\n    this.setRay()\r\n  }\r\n\r\n  /**\r\n   * Sets the {@link ray} origin and direction based on the {@link camera} and the normalized device coordinates of the {@link pointer}.\r\n   */\r\n  setRay() {\r\n    this.camera.worldMatrix.getTranslation(this.ray.origin)\r\n    this.ray.direction.set(this.pointer.x, this.pointer.y, -1).unproject(this.camera).sub(this.ray.origin).normalize()\r\n  }\r\n\r\n  // INTERSECTIONS\r\n\r\n  /**\r\n   * Ray-Triangle Intersection with Möller–Trumbore Algorithm.\r\n   * @param intersectionPoint - {@link Vec3} to store the intersection point if any.\r\n   * @returns - Whether an intersection point has been found or not.\r\n   */\r\n  rayIntersectsTriangle(intersectionPoint: Vec3): boolean {\r\n    const EPSILON = 1e-6\r\n    const h = new Vec3()\r\n    const q = new Vec3()\r\n\r\n    // Calculate the determinant\r\n    h.crossVectors(this.#localRay.direction, this.#edge2)\r\n    const a = this.#edge1.dot(h)\r\n\r\n    // If the determinant is near zero, the ray lies in the plane of the triangle\r\n    if (Math.abs(a) < EPSILON) return false\r\n\r\n    const f = 1.0 / a\r\n    const s = this.#localRay.origin.clone().sub(this.#v0)\r\n    const u = f * s.dot(h)\r\n\r\n    // Check if intersection lies outside the triangle\r\n    if (u < 0.0 || u > 1.0) return false\r\n\r\n    q.crossVectors(s, this.#edge1)\r\n    const v = f * this.#localRay.direction.dot(q)\r\n\r\n    if (v < 0.0 || u + v > 1.0) return false\r\n\r\n    // Compute the intersection distance along the ray\r\n    const t = f * this.#edge2.dot(q)\r\n\r\n    // If t is positive, we have an intersection\r\n    if (t > EPSILON) {\r\n      // Calculate the intersection point if needed\r\n      intersectionPoint.copy(this.#localRay.origin).add(this.#localRay.direction.clone().multiplyScalar(t))\r\n      return true\r\n    }\r\n\r\n    // No intersection\r\n    return false\r\n  }\r\n\r\n  /**\r\n   * Find the barycentric contributions of a given intersection point lying inside our current triangle.\r\n   * @param intersectionPoint - Given {@link Vec3 | intersection point}.\r\n   * @returns - {@link Vec3} barycentric contributions.\r\n   */\r\n  getBarycentricCoordinates(intersectionPoint: Vec3) {\r\n    const v0p = intersectionPoint.clone().sub(this.#v0) // Vector v0->intersectionPoint\r\n\r\n    // Calculate areas with cross products for u and v, w is 1 - u - v\r\n    const d00 = this.#edge1.dot(this.#edge1)\r\n    const d01 = this.#edge1.dot(this.#edge2)\r\n    const d11 = this.#edge2.dot(this.#edge2)\r\n    const d20 = v0p.dot(this.#edge1)\r\n    const d21 = v0p.dot(this.#edge2)\r\n    const denom = d00 * d11 - d01 * d01\r\n\r\n    const barycentric = new Vec3(0, (d11 * d20 - d01 * d21) / denom, (d00 * d21 - d01 * d20) / denom)\r\n\r\n    barycentric.x = 1.0 - barycentric.y - barycentric.z\r\n\r\n    return barycentric\r\n  }\r\n\r\n  /**\r\n   * Get a rough estimation of the current normal of our current triangle, in local space.\r\n   * @returns - {@link Vec3} normal.\r\n   */\r\n  getTriangleNormal(): Vec3 {\r\n    return new Vec3().crossVectors(this.#edge1, this.#edge2).normalize()\r\n  }\r\n\r\n  /**\r\n   * Set our input vector with the desired attribute value at the given offset defined by our triangleIndex, offset and whether we're using and indexed geometry or not.\r\n   * @param triangleIndex - Index of the triangle for which to look our attribute value.\r\n   * @param offset - Index of the point inside our triangle (`0`, `1` or `2`).\r\n   * @param indices - Indexed geometry array if defined or `null`.\r\n   * @param attribute - {@link VertexBufferAttribute | Vertex buffer attribute} to get the value from.\r\n   * @param vector - Input vector to set (can either be a {@link Vec2} or {@link Vec3}).\r\n   */\r\n  setAttributeVectorAtIndex(\r\n    triangleIndex: number,\r\n    offset: number,\r\n    indices: IndexBuffer['array'] | null,\r\n    attribute: VertexBufferAttribute,\r\n    vector: Vec2 | Vec3\r\n  ) {\r\n    const index = indices ? indices[triangleIndex * 3 + offset] : triangleIndex * 3 + offset\r\n\r\n    vector.x = attribute.array[index * attribute.size]\r\n    vector.y = attribute.array[index * attribute.size + 1]\r\n\r\n    if ('z' in vector) {\r\n      vector.z = attribute.array[index * attribute.size + 2]\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test whether the {@link ray} is intersecting a given {@link ProjectedMesh | projected mesh} and if so, returns the given {@link Intersection | intersection} information.\r\n   * Uses various early exits to optimize the process:\r\n   * - if the mesh is frustum culled\r\n   * - if the pointer is currently outside the mesh clip space bounding rectangle.\r\n   * - based on the face culling.\r\n   * @param mesh - {@link ProjectedMesh | Projected mesh} to test against.\r\n   * @param intersections - Already existing {@link Intersection | intersections} if any.\r\n   * @returns - Updated {@link Intersection | intersections}.\r\n   * @private\r\n   */\r\n  #intersectMesh(mesh: ProjectedMesh, intersections: Intersection[] = []): Intersection[] {\r\n    if (!mesh.geometry) return intersections\r\n\r\n    const position = mesh.geometry.getAttributeByName('position')\r\n\r\n    if (!position) {\r\n      if (!this.renderer.production) {\r\n        throwWarning(`Raycaster: can't raycast on a mesh that has no position attribute: ${mesh.options.label}`)\r\n      }\r\n      return intersections\r\n    }\r\n\r\n    if (!position.array) {\r\n      if (!this.renderer.production) {\r\n        throwWarning(`Raycaster: can't raycast on a mesh that has no position attribute array: ${mesh.options.label}`)\r\n      }\r\n      return intersections\r\n    }\r\n\r\n    // early bounding rect check\r\n    if (mesh.frustumCulling && mesh.domFrustum) {\r\n      const { clipSpaceBoundingRect } = mesh.domFrustum\r\n\r\n      if (!mesh.domFrustum.isIntersecting) {\r\n        // frustum culled? bail\r\n        return intersections\r\n      } else if (\r\n        this.pointer.x > clipSpaceBoundingRect.left + clipSpaceBoundingRect.width ||\r\n        this.pointer.x < clipSpaceBoundingRect.left ||\r\n        this.pointer.y > clipSpaceBoundingRect.top ||\r\n        this.pointer.y < clipSpaceBoundingRect.top - clipSpaceBoundingRect.height\r\n      ) {\r\n        // outside of clip space bounding rectangle? bail\r\n        return intersections\r\n      }\r\n    }\r\n\r\n    // Invert the object's model matrix to go from world to object space\r\n    const inverseModelMatrix = mesh.worldMatrix.getInverse()\r\n\r\n    // Transform ray origin and direction into the object's local space\r\n    this.#localRay.origin.copy(this.ray.origin).applyMat4(inverseModelMatrix)\r\n    this.#localRay.direction.copy(this.ray.direction).transformDirection(inverseModelMatrix)\r\n\r\n    const uv = mesh.geometry.getAttributeByName('uv')\r\n    const normal = mesh.geometry.getAttributeByName('normal')\r\n\r\n    const indices = (mesh.geometry as IndexedGeometry).indexBuffer?.array\r\n\r\n    const triangleCount = indices ? indices.length / 3 : position.array.length / 9\r\n\r\n    // Iterate over each triangle\r\n    for (let i = 0; i < triangleCount; i++) {\r\n      this.setAttributeVectorAtIndex(i, 0, indices, position, this.#v0)\r\n      this.setAttributeVectorAtIndex(i, 1, indices, position, this.#v1)\r\n      this.setAttributeVectorAtIndex(i, 2, indices, position, this.#v2)\r\n\r\n      // Compute the two edges of the triangle\r\n      this.#edge1.copy(this.#v1).sub(this.#v0)\r\n      this.#edge2.copy(this.#v2).sub(this.#v0)\r\n\r\n      // face culling\r\n      if (mesh.material.options.rendering.cullMode !== 'none') {\r\n        const computedNormal = this.getTriangleNormal()\r\n        const faceDirection = computedNormal.dot(this.#localRay.direction)\r\n        if (faceDirection > 0 && mesh.material.options.rendering.cullMode === 'back') {\r\n          continue\r\n        } else if (faceDirection < 0 && mesh.material.options.rendering.cullMode === 'front') {\r\n          continue\r\n        }\r\n      }\r\n\r\n      // Check if the ray intersects this triangle\r\n      const intersectionPoint = new Vec3()\r\n      const isIntersected = this.rayIntersectsTriangle(intersectionPoint)\r\n\r\n      if (isIntersected) {\r\n        const barycentric = this.getBarycentricCoordinates(intersectionPoint)\r\n        const point = intersectionPoint.clone().applyMat4(mesh.worldMatrix)\r\n        const distance = this.ray.origin.distance(point)\r\n\r\n        // Store this intersection with its distance and face index\r\n        const intersection: Intersection = {\r\n          object: mesh,\r\n          distance,\r\n          localPoint: intersectionPoint,\r\n          point,\r\n          triangle: [this.#v0.clone(), this.#v1.clone(), this.#v2.clone()],\r\n          triangleIndex: i,\r\n        }\r\n\r\n        // get uvs\r\n        if (uv && uv.array && uv.array.length) {\r\n          this.setAttributeVectorAtIndex(i, 0, indices, uv, this.#uv0)\r\n          this.setAttributeVectorAtIndex(i, 1, indices, uv, this.#uv1)\r\n          this.setAttributeVectorAtIndex(i, 2, indices, uv, this.#uv2)\r\n\r\n          intersection.uv = this.#uv0\r\n            .clone() // useless?\r\n            .multiplyScalar(barycentric.x)\r\n            .add(this.#uv1.clone().multiplyScalar(barycentric.y))\r\n            .add(this.#uv2.clone().multiplyScalar(barycentric.z))\r\n        }\r\n\r\n        if (normal && normal.array && normal.array.length) {\r\n          this.setAttributeVectorAtIndex(i, 0, indices, normal, this.#n0)\r\n          this.setAttributeVectorAtIndex(i, 1, indices, normal, this.#n1)\r\n          this.setAttributeVectorAtIndex(i, 2, indices, normal, this.#n2)\r\n\r\n          intersection.normal = this.#n0\r\n            .clone() // useless?\r\n            .multiplyScalar(barycentric.x)\r\n            .add(this.#n1.clone().multiplyScalar(barycentric.y))\r\n            .add(this.#n2.clone().multiplyScalar(barycentric.z))\r\n        }\r\n\r\n        intersections.push(intersection)\r\n      }\r\n    }\r\n\r\n    return intersections\r\n  }\r\n\r\n  /**\r\n   * Test whether the {@link ray} is intersecting a given object, if the is object is actually a {@link ProjectedMesh | projected mesh}.\r\n   * Then, if the recursive flag is set to `true`, test if the {@link Object3D#children | object's children} are intersecting as well.\r\n   * @param object - {@link Object3D | object} to test against.\r\n   * @param recursive - Whether we should also test against the {@link Object3D#children | object's children}. Default to `true`.\r\n   * @param intersections - Already existing {@link Intersection | intersections} if any.\r\n   * @returns - Updated {@link Intersection | intersections}.\r\n   */\r\n  intersectObject(object: Object3D, recursive = true, intersections: Intersection[] = []): Intersection[] {\r\n    if (!(object instanceof Object3D)) {\r\n      if (!this.renderer.production) {\r\n        throwWarning(`${this.type}: object to test intersection again is not of type Object3D`)\r\n      }\r\n      return intersections\r\n    }\r\n\r\n    const mesh = isProjectedMesh(object)\r\n\r\n    if (mesh) {\r\n      this.#intersectMesh(mesh, intersections)\r\n    }\r\n\r\n    if (recursive) {\r\n      object.children.forEach((child) => {\r\n        this.intersectObject(child, recursive, intersections)\r\n      })\r\n    }\r\n\r\n    if (intersections.length) {\r\n      intersections.sort((a, b) => {\r\n        return this.ray.origin.distance(a.point) - this.ray.origin.distance(b.point)\r\n      })\r\n    }\r\n\r\n    return intersections\r\n  }\r\n\r\n  /**\r\n   * Test whether the {@link ray} is intersecting a given array of objects.\r\n   * If the recursive flag is set to `true`, test if each {@link Object3D#children | object's children} are intersecting as well.\r\n   * @param objects - Array of {@link Object3D | objects} to test against.\r\n   * @param recursive - Whether we should also test against each {@link Object3D#children | object's children}. Default to `true`.\r\n   * @param intersections - Already existing {@link Intersection | intersections} if any.\r\n   * @returns - Updated {@link Intersection | intersections}.\r\n   */\r\n  intersectObjects(objects: Object3D[], recursive = true, intersections: Intersection[] = []): Intersection[] {\r\n    objects.forEach((object) => {\r\n      this.intersectObject(object, recursive, intersections)\r\n    })\r\n\r\n    if (intersections.length) {\r\n      intersections.sort((a, b) => {\r\n        return this.ray.origin.distance(a.point) - this.ray.origin.distance(b.point)\r\n      })\r\n    }\r\n\r\n    return intersections\r\n  }\r\n}\r\n","import { TypedArray } from '../../core/bindings/utils'\nimport { GLTF } from '../../types/gltf/GLTF'\nimport { Vec3 } from '../../math/Vec3'\nimport { Quat } from '../../math/Quat'\nimport { BufferBindingInput } from '../../core/bindings/BufferBinding'\nimport { Object3D } from '../../core/objects3D/Object3D'\n\n// temp values to use during calcs\nconst tempVec3 = new Vec3()\nconst tempQuat = new Quat()\n\n/** Parameters used to create a {@link KeyframesAnimation}. */\nexport interface KeyframesAnimationParams {\n  /** Optional label of the {@link KeyframesAnimation}. */\n  label?: string\n  /** Optional input accessor index defined in the glTF, used to keep different {@link extras/animations/TargetsAnimationsManager.TargetsAnimationsManager | TargetsAnimationsManager} in sync if they're using the same input. */\n  inputIndex?: number\n  /** Keyframes {@link Float32Array} of the {@link KeyframesAnimation}. Could be omitted when used for a skin joint matrices animation. */\n  keyframes?: TypedArray\n  /** Values {@link Float32Array} of the {@link KeyframesAnimation} to use for animation, mapped to the {@link keyframes} array. Could be omitted when used for a skin joint matrices animation. */\n  values?: TypedArray\n  /** {@link GLTF.AnimationChannelTargetPath | glTF animation path} to use, i.e. what component should be animated between 'translation', 'rotation', 'scale' and 'weights'. Could be omitted when used for a skin joint matrices animation. */\n  path?: GLTF.AnimationChannelTargetPath\n  /** {@link GLTF.AnimationSamplerInterpolation | glTF sampler interpolation} to use, i.e. how the animated values should be computed. Default to `LINEAR` . */\n  interpolation?: GLTF.AnimationSamplerInterpolation\n}\n\n/**\n * Helper class to use for transformation (position, scale or rotation) and morph targets weights animations (can also be used for skin joint matrices animations using only the `onAfterUpdate` callback).\n *\n * This class is not made to be used alone but should rather be handled by a {@link extras/animations/TargetsAnimationsManager.TargetsAnimationsManager | TargetsAnimationsManager} instance instead.\n */\nexport class KeyframesAnimation {\n  /** Optional label of the {@link KeyframesAnimation}. */\n  label: string\n\n  /** Optional input accessor index defined in the glTF, used to keep different {@link extras/animations/TargetsAnimationsManager.TargetsAnimationsManager | TargetsAnimationsManager} in sync if they're using the same input. */\n  inputIndex: number | null\n\n  /** Keyframes {@link Float32Array} of the {@link KeyframesAnimation}. Could be omitted when used for a skin joint matrices animation. */\n  keyframes: TypedArray | null\n  /** Values {@link Float32Array} of the {@link KeyframesAnimation} to use for animation, mapped to the {@link keyframes} array. Could be omitted when used for a skin joint matrices animation. */\n  values: TypedArray | null\n\n  /** Total duration of this animation, i.e. the last {@link keyframes} value.  */\n  duration: number\n\n  /** {@link GLTF.AnimationChannelTargetPath | glTF animation path} to use, i.e. what component should be animated between 'translation', 'rotation', 'scale' and 'weights'. Could be omitted when used for a skin joint matrices animation. */\n  path: GLTF.AnimationChannelTargetPath | null\n  /** {@link GLTF.AnimationSamplerInterpolation | glTF sampler interpolation} to use, i.e. how the animated values should be computed. Default to `LINEAR` . */\n  interpolation: GLTF.AnimationSamplerInterpolation\n\n  /** Optional {@link BufferBindingInput} array to update a weight binding. */\n  weightsBindingInputs: BufferBindingInput[]\n\n  /** Callback to run after the animated value has been updated. Used for skin joints animations to update joint matrices. */\n  onAfterUpdate: () => void | null // used for skins\n\n  /**\n   * KeyframesAnimation constructor\n   * @param parameters - {@link KeyframesAnimationParams | Parameters} used to create this {@link KeyframesAnimation}.\n   */\n  constructor(\n    {\n      label = '',\n      inputIndex = null,\n      keyframes = null,\n      values = null,\n      path = null,\n      interpolation = 'LINEAR' as GLTF.AnimationSamplerInterpolation,\n    } = {} as KeyframesAnimationParams\n  ) {\n    this.label = label\n    this.keyframes = keyframes\n    this.values = values\n\n    this.path = path\n    this.interpolation = interpolation\n\n    this.inputIndex = inputIndex\n\n    this.weightsBindingInputs = []\n    this.onAfterUpdate = null\n\n    this.duration = this.keyframes ? this.keyframes[this.keyframes.length - 1] : 0\n  }\n\n  /**\n   * Add a weight {@link BufferBindingInput} to the {@link weightsBindingInputs} array.\n   * @param input - Weight {@link BufferBindingInput}.\n   */\n  addWeightBindingInput(input: BufferBindingInput) {\n    this.weightsBindingInputs.push(input)\n  }\n\n  /**\n   * Get a cubic spline interpolation value.\n   * @param t - Current time value to use in the [0, 1] range.\n   * @param prevComponentValue - Previous value to use for interpolation.\n   * @param nextComponentValue - Next value to use for interpolation.\n   * @param prevOutputTangentValue - Previous output tangent value to use for interpolation.\n   * @param nextInputTangentValue - Previous output tangent value to use for interpolation.\n   */\n  getCubicSplineComponentValue(\n    t: number,\n    prevComponentValue: number,\n    nextComponentValue: number,\n    prevOutputTangentValue: number,\n    nextInputTangentValue: number\n  ): number {\n    const t2 = t * t\n    const t3 = t2 * t\n\n    return (\n      (2 * t3 - 3 * t2 + 1) * prevComponentValue +\n      (t3 - 2 * t2 + t) * prevOutputTangentValue +\n      (-2 * t3 + 3 * t2) * nextComponentValue +\n      (t3 - t2) * nextInputTangentValue\n    )\n  }\n\n  /**\n   * Get the index from which to return a value from the {@link values} array based on an index in the {@link keyframes} array and the size of the component to animate.\n   * @param index - Index in the {@link keyframes} array to use.\n   * @param size - Size of the component to animate in the {@link values} array.\n   */\n  getIndexFromInterpolation(index = 0, size = 1): number {\n    return this.interpolation === 'CUBICSPLINE' ? index * 3 * size + size : index * size\n  }\n\n  /**\n   * Update an {@link Object3D} transformation property or eventually the {@link weightsBindingInputs} based on the current time given, the {@link path} and {@link interpolation} used and the {@link keyframes} and {@link values}.\n   * @param target - {@link Object3D} to update.\n   * @param currentTime - Current time in seconds.\n   */\n  update(target: Object3D, currentTime = 0) {\n    // do not run for empty animations\n    if (!this.keyframes || !this.values || !this.path) return\n\n    const nextTimeIndex = this.keyframes.findIndex((t) => t >= currentTime)\n    if (nextTimeIndex === -1) return\n\n    const previousTimeIndex = nextTimeIndex - 1\n    if (previousTimeIndex === -1) return\n\n    const nextTime = this.keyframes[nextTimeIndex]\n    const previousTime = this.keyframes[previousTimeIndex]\n\n    const interpolatedTime = (currentTime - previousTime) / (nextTime - previousTime)\n    const deltaTime = nextTime - previousTime\n\n    if (this.path === 'rotation') {\n      const prevIndex = this.getIndexFromInterpolation(previousTimeIndex, 4)\n      const nextIndex = this.getIndexFromInterpolation(nextTimeIndex, 4)\n\n      target.quaternion.setFromArray([\n        this.values[prevIndex],\n        this.values[prevIndex + 1],\n        this.values[prevIndex + 2],\n        this.values[prevIndex + 3],\n      ])\n\n      if (this.interpolation === 'LINEAR' || this.interpolation === 'CUBICSPLINE') {\n        tempQuat.setFromArray([\n          this.values[nextIndex],\n          this.values[nextIndex + 1],\n          this.values[nextIndex + 2],\n          this.values[nextIndex + 3],\n        ])\n\n        if (this.interpolation === 'CUBICSPLINE') {\n          // get previous output tangent\n          const previousOutputTangent = [\n            this.values[prevIndex + 4],\n            this.values[prevIndex + 5],\n            this.values[prevIndex + 6],\n            this.values[prevIndex + 7],\n          ]\n\n          const nextInputTangent = [\n            this.values[nextIndex - 4],\n            this.values[nextIndex - 3],\n            this.values[nextIndex - 2],\n            this.values[nextIndex - 1],\n          ]\n\n          const cubicValue = [\n            this.getCubicSplineComponentValue(\n              interpolatedTime,\n              target.quaternion.elements[0],\n              tempQuat.elements[0],\n              deltaTime * previousOutputTangent[0],\n              deltaTime * nextInputTangent[0]\n            ),\n            this.getCubicSplineComponentValue(\n              interpolatedTime,\n              target.quaternion.elements[1],\n              tempQuat.elements[1],\n              deltaTime * previousOutputTangent[1],\n              deltaTime * nextInputTangent[1]\n            ),\n            this.getCubicSplineComponentValue(\n              interpolatedTime,\n              target.quaternion.elements[2],\n              tempQuat.elements[2],\n              deltaTime * previousOutputTangent[2],\n              deltaTime * nextInputTangent[2]\n            ),\n            this.getCubicSplineComponentValue(\n              interpolatedTime,\n              target.quaternion.elements[3],\n              tempQuat.elements[3],\n              deltaTime * previousOutputTangent[3],\n              deltaTime * nextInputTangent[3]\n            ),\n          ]\n\n          target.quaternion.setFromArray(cubicValue).normalize()\n        } else {\n          target.quaternion.slerp(tempQuat, interpolatedTime)\n        }\n      }\n\n      // update model matrix since we modified the quaternion\n      target.shouldUpdateModelMatrix()\n    } else if (this.path === 'translation' || this.path === 'scale') {\n      const vectorName = this.path === 'translation' ? 'position' : this.path\n\n      const prevIndex = this.getIndexFromInterpolation(previousTimeIndex, 3)\n      const nextIndex = this.getIndexFromInterpolation(nextTimeIndex, 3)\n\n      target[vectorName].set(this.values[prevIndex], this.values[prevIndex + 1], this.values[prevIndex + 2])\n\n      if (this.interpolation === 'LINEAR' || this.interpolation === 'CUBICSPLINE') {\n        tempVec3.set(this.values[nextIndex], this.values[nextIndex + 1], this.values[nextIndex + 2])\n\n        if (this.interpolation === 'CUBICSPLINE') {\n          // get previous output tangent\n          const previousOutputTangent = [\n            this.values[prevIndex + 3],\n            this.values[prevIndex + 4],\n            this.values[prevIndex + 5],\n          ]\n\n          const nextInputTangent = [this.values[nextIndex - 3], this.values[nextIndex - 2], this.values[nextIndex - 1]]\n\n          const cubicValue = [\n            this.getCubicSplineComponentValue(\n              interpolatedTime,\n              target[vectorName].x,\n              tempVec3.x,\n              deltaTime * previousOutputTangent[0],\n              deltaTime * nextInputTangent[0]\n            ),\n            this.getCubicSplineComponentValue(\n              interpolatedTime,\n              target[vectorName].y,\n              tempVec3.y,\n              deltaTime * previousOutputTangent[1],\n              deltaTime * nextInputTangent[1]\n            ),\n            this.getCubicSplineComponentValue(\n              interpolatedTime,\n              target[vectorName].z,\n              tempVec3.z,\n              deltaTime * previousOutputTangent[2],\n              deltaTime * nextInputTangent[2]\n            ),\n          ]\n\n          target[vectorName].set(cubicValue[0], cubicValue[1], cubicValue[2])\n        } else {\n          target[vectorName].lerp(tempVec3, interpolatedTime)\n        }\n      }\n    } else if (this.path === 'weights') {\n      const prevIndex = this.getIndexFromInterpolation(previousTimeIndex, this.weightsBindingInputs.length)\n      const nextIndex = this.getIndexFromInterpolation(nextTimeIndex, this.weightsBindingInputs.length)\n\n      for (let i = 0; i < this.weightsBindingInputs.length; i++) {\n        const value = this.values[prevIndex + i]\n        this.weightsBindingInputs[i].value = value\n\n        if (this.interpolation === 'LINEAR') {\n          const nextValue = this.values[nextIndex + i]\n\n          ;(this.weightsBindingInputs[i].value as number) += (nextValue - value) * interpolatedTime\n        } else if (this.interpolation === 'CUBICSPLINE') {\n          const nextValue = this.values[nextIndex + i]\n\n          // get previous output tangent\n          const previousOutputTangent = this.values[prevIndex + i + 1]\n          const nextInputTangent = this.values[nextIndex + i - 1]\n\n          this.weightsBindingInputs[i].value = this.getCubicSplineComponentValue(\n            interpolatedTime,\n            value,\n            nextValue,\n            deltaTime * previousOutputTangent[0],\n            deltaTime * nextInputTangent[0]\n          )\n        }\n      }\n    }\n  }\n}\n","import { KeyframesAnimation } from './KeyframesAnimation'\nimport { Object3D } from '../../core/objects3D/Object3D'\nimport { generateUUID } from '../../utils/utils'\nimport { isRenderer, Renderer } from '../../core/renderers/utils'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/** Defines a {@link TargetsAnimationsManager} target. */\nexport interface Target {\n  /** {@link Object3D} of this target. */\n  object: Object3D\n  /** Array of {@link KeyframesAnimation} to use to animate the {@link Object3D}. */\n  animations: KeyframesAnimation[]\n}\n\n/** Parameters used to create a {@link TargetsAnimationsManager}. */\nexport interface TargetsAnimationsManagerParams {\n  /** Optional label of the {@link TargetsAnimationsManager}. */\n  label?: string\n  /** Optional {@link Target} array to use with this {@link TargetsAnimationsManager}. Can be set later. */\n  targets?: Target[]\n}\n\n/**\n * Class used to help synchronize and run {@link KeyframesAnimation} for a given list of {@link Object3D}. Mostly used internally when loading glTF files, but could be used externally as well.\n */\nexport class TargetsAnimationsManager {\n  /** The {@link Renderer} used to updte this {@link TargetsAnimationsManager}. */\n  renderer: Renderer\n\n  /** Label of the {@link TargetsAnimationsManager}. */\n  label: string\n  /** The universal unique id of this {@link TargetsAnimationsManager}. */\n  readonly uuid: string\n  /** Array of {@link Target} defining the animations that this {@link TargetsAnimationsManager} should run. */\n  targets: Target[]\n\n  // inner time values\n  /** @ignore */\n  #startTime: number\n  /** @ignore */\n  #currentTime: number\n  /** @ignore */\n  #deltaTime: number\n\n  /** Total duration in seconds of all the animations handled by this {@link TargetsAnimationsManager}. */\n  duration: number\n  /** Timescale to use for all the animations handled by this {@link TargetsAnimationsManager}. */\n  timeScale: number\n\n  /** @ignore */\n  #count: number\n  /** @ignore */\n  #maxCount: number\n  /** Whether the current {@link TargetsAnimationsManager} animations are playing or not. */\n  isPlaying: boolean\n\n  /** Array of all children animations input accessor indices defined in the glTF, used to keep different {@link TargetsAnimationsManager} in sync. */\n  inputIndices: number[]\n  /** Map of other {@link TargetsAnimationsManager} using the exact same inputs and that should be synced together. */\n  siblings: Map<TargetsAnimationsManager['uuid'], TargetsAnimationsManager>\n\n  /**\n   * TargetsAnimationsManager constructor\n   * @param renderer - {@link Renderer} or {@link GPUCurtains} class object used to create this {@link TargetsAnimationsManager}.\n   * @param parameters - {@link TargetsAnimationsManagerParams | parameters} used to create this {@link TargetsAnimationsManager}.\n   */\n  constructor(renderer: Renderer | GPUCurtains, { label = '', targets = [] } = {} as TargetsAnimationsManagerParams) {\n    this.uuid = generateUUID()\n    this.inputIndices = []\n\n    this.setRenderer(renderer)\n\n    this.label = label\n    this.targets = []\n    this.duration = 0\n    this.timeScale = 1\n\n    this.#startTime = performance.now()\n    this.#currentTime = performance.now()\n    this.#deltaTime = 0\n    this.#count = 0\n\n    this.#count = 0\n    this.#maxCount = Infinity\n    this.isPlaying = false\n\n    this.siblings = new Map()\n\n    if (targets && targets.length) {\n      this.targets = [...this.targets, ...targets]\n    }\n  }\n\n  /**\n   * Set the current {@link TargetsAnimationsManager.renderer | renderer} to use with this {@link TargetsAnimationsManager}. Can be set to `null` to detach from the current {@link TargetsAnimationsManager.renderer | renderer}.\n   * @param renderer\n   */\n  setRenderer(renderer: Renderer | GPUCurtains | null) {\n    if (this.renderer) {\n      this.renderer.animations.delete(this.uuid)\n      this.renderer.animations.forEach((animation) => animation.siblings.delete(this.uuid))\n    }\n\n    if (renderer) {\n      renderer = isRenderer(renderer, 'TargetsAnimationsManager')\n      this.renderer = renderer\n      this.renderer.animations.set(this.uuid, this)\n\n      if (this.inputIndices.length) {\n        this.#setSiblings()\n      }\n    }\n  }\n\n  /**\n   * Add a new {@link Target} to the {@link targets} array based on an {@link Object3D}.\n   * @param object - {@link Object3D} to use for the {@link Target}.\n   */\n  addTarget(object: Object3D): Target {\n    const target = {\n      object,\n      animations: [],\n    }\n\n    this.targets.push(target)\n\n    return target\n  }\n\n  /**\n   * Add new {@link Target | targets} to the {@link targets} array based on an array of {@link Object3D}.\n   * @param objects - array of {@link Object3D} to use for the {@link Target | targets}.\n   */\n  addTargets(objects: Object3D[]) {\n    objects.forEach((object) => this.addTarget(object))\n  }\n\n  /**\n   * Add a {@link KeyframesAnimation} to a {@link Target#animations | target animations} array based on an {@link Object3D}.\n   * @param object - {@link Object3D} to use for the {@link Target}.\n   * @param animation - {@link KeyframesAnimation} to add.\n   */\n  addTargetAnimation(object: Object3D, animation: KeyframesAnimation) {\n    this.duration = Math.max(this.duration, animation.duration)\n\n    let target = this.getTargetByObject3D(object)\n\n    if (!target) {\n      target = this.addTarget(object)\n    }\n\n    target.animations.push(animation)\n\n    // check for siblings\n    if (animation.inputIndex !== null && !this.inputIndices.includes(animation.inputIndex)) {\n      this.inputIndices.push(animation.inputIndex)\n    }\n\n    this.#setSiblings()\n  }\n\n  /**\n   * Set the {@link TargetsAnimationsManager} siblings by comparing {@link inputIndices} arrays.\n   * @private\n   */\n  #setSiblings() {\n    this.siblings = new Map()\n\n    this.renderer.animations.forEach((animation) => {\n      if (\n        animation.uuid !== this.uuid &&\n        JSON.stringify(animation.inputIndices) === JSON.stringify(this.inputIndices)\n      ) {\n        // this is mutual\n        this.siblings.set(animation.uuid, animation)\n        animation.siblings.set(this.uuid, this)\n      } else {\n        animation.siblings.delete(this.uuid)\n      }\n    })\n  }\n\n  /**\n   * Get a {@link Target} from the {@link targets} array based on an {@link Object3D}.\n   * @param object - {@link Object3D} to use to find the {@link Target}.\n   * @returns - {@link Target} found if any.\n   */\n  getTargetByObject3D(object: Object3D): Target | null {\n    return this.targets.find((target) => target.object.object3DIndex === object.object3DIndex)\n  }\n\n  /**\n   * Get the first animation from the {@link targets} array that matches the {@link Object3D} and {@link KeyframesAnimation#path | path} given.\n   * @param object - {@link Object3D} to use to find the {@link KeyframesAnimation}.\n   * @param path - {@link KeyframesAnimation#path | path} to use to find the {@link KeyframesAnimation}.\n   * @returns - {@link KeyframesAnimation} found if any.\n   */\n  getAnimationByObject3DAndPath(object: Object3D, path: KeyframesAnimation['path']): KeyframesAnimation | null {\n    const target = this.getTargetByObject3D(object)\n\n    if (target) {\n      return target.animations.find((animation) => animation.path === path)\n    } else {\n      return null\n    }\n  }\n\n  /**\n   * Play or resume the {@link TargetsAnimationsManager}.\n   */\n  play() {\n    this.isPlaying = true\n  }\n\n  /**\n   * Play the {@link TargetsAnimationsManager} once.\n   */\n  playOnce() {\n    this.#maxCount = 1\n    this.play()\n  }\n\n  /**\n   * Pause the {@link TargetsAnimationsManager}.\n   */\n  pause() {\n    this.isPlaying = false\n    // reset start time so we could know we'll be coming back from a pause\n    this.#startTime = -1\n  }\n\n  /**\n   * Stop the {@link TargetsAnimationsManager} and reset all the animations values to last keyframe.\n   */\n  stop() {\n    this.isPlaying = false\n    this.#count = 0\n\n    // if no siblings, no need to sync\n    // reset start time\n    if (!this.siblings.size) {\n      this.#startTime = 0\n    }\n\n    // force reset all animations to end frame\n    this.targets.forEach((target) =>\n      target.animations.forEach((animation) =>\n        animation.update(target.object, Math.min(animation.duration, this.duration))\n      )\n    )\n\n    // update joints matrices if needed\n    this.renderer.onAfterRenderScene.add(\n      () => {\n        this.targets.forEach((target) => {\n          target.animations.forEach((animation) => {\n            if (animation.onAfterUpdate) animation.onAfterUpdate()\n          })\n        })\n      },\n      {\n        once: true,\n      }\n    )\n  }\n\n  /**\n   * {@link stop | Stop} the {@link TargetsAnimationsManager} at the end of the next animation loop.\n   */\n  stopAtEndOfLoop() {\n    this.#maxCount = this.#count + 1\n  }\n\n  /**\n   * Update all the {@link targets} animations.\n   */\n  update() {\n    if (!this.isPlaying) return\n\n    if (this.#startTime === -1) {\n      // we're coming back from a pause\n      this.#startTime = performance.now() - this.#deltaTime\n    } else if (this.#startTime === 0) {\n      // we're coming back from a pause\n      this.#startTime = performance.now()\n    }\n\n    this.#currentTime = performance.now()\n\n    // in seconds\n    this.#deltaTime = this.#currentTime - this.#startTime\n    const time = (this.#deltaTime * this.timeScale) / 1000\n\n    const currentTime = time % this.duration\n    this.#count = Math.floor(time / this.duration)\n\n    if (this.#count >= this.#maxCount) {\n      this.stop()\n      return\n    }\n\n    this.targets.forEach((target) =>\n      target.animations.forEach((animation) => animation.update(target.object, currentTime))\n    )\n  }\n\n  /**\n   * Call all the {@link targets} animations {@link KeyframesAnimation#onAfterUpdate | onAfterUpdate} callbacks.\n   */\n  onAfterUpdate() {\n    if (!this.isPlaying) return\n\n    this.targets.forEach((target) =>\n      target.animations.forEach((animation) => {\n        if (animation.onAfterUpdate) animation.onAfterUpdate()\n      })\n    )\n  }\n}\n","import { CameraRenderer, isCameraRenderer } from '../../core/renderers/utils'\nimport { GLTF } from '../../types/gltf/GLTF'\nimport { GLTFLoader } from '../loaders/GLTFLoader'\nimport { Sampler, SamplerParams } from '../../core/samplers/Sampler'\nimport { Texture } from '../../core/textures/Texture'\nimport { Object3D } from '../../core/objects3D/Object3D'\nimport { Box3 } from '../../math/Box3'\nimport { Vec3 } from '../../math/Vec3'\nimport { Mat3 } from '../../math/Mat3'\nimport { Mat4 } from '../../math/Mat4'\nimport { Geometry } from '../../core/geometries/Geometry'\nimport { IndexedGeometry } from '../../core/geometries/IndexedGeometry'\nimport { Mesh } from '../../core/meshes/Mesh'\nimport { TypedArray, TypedArrayConstructor } from '../../core/bindings/utils'\nimport { GeometryParams, VertexBufferAttribute, VertexBufferAttributeParams } from '../../types/Geometries'\nimport { Camera } from '../../core/camera/Camera'\nimport {\n  ChildDescriptor,\n  MeshDescriptor,\n  PrimitiveInstanceDescriptor,\n  PrimitiveInstances,\n  ScenesManager,\n  SkinDefinition,\n} from '../../types/gltf/GLTFScenesManager'\nimport { throwWarning } from '../../utils/utils'\nimport { BufferBinding } from '../../core/bindings/BufferBinding'\nimport { KeyframesAnimation } from '../animations/KeyframesAnimation'\nimport { TargetsAnimationsManager } from '../animations/TargetsAnimationsManager'\n\n// TODO limitations, example...\n// use a list like: https://github.com/warrenm/GLTFKit2?tab=readme-ov-file#status-and-conformance\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n// To make it easier to reference the WebGL enums that glTF uses.\nconst GL = WebGLRenderingContext\n\n/**\n * Used to create a {@link GLTFScenesManager} from a given {@link GLTFLoader.gltf | gltf} object.\n *\n * Parse the {@link GLTFLoader.gltf | gltf} object, create all the {@link Sampler} and {@link Texture}, create all the {@link Object3D} nodes to compute the correct transformations and parent -> child relationships, create all the needed {@link MeshDescriptor} containing the {@link Geometry}, {@link Mesh} parameters and so on.\n *\n * ## Loading Features\n *\n * - [x] Accessors\n *   - [x] Sparse accessors\n * - [x] Buffers\n * - [x] BufferViews\n * - [x] Images\n * - [x] Meshes\n * - [x] Nodes\n * - [x] Primitives\n *   - [x] Compute flat normals if normal attributes is missing\n *   - [x] Compute tangent space in fragment shader if tangent attributes is missing and a normal map is used (would be better/faster with [MikkTSpace](http://www.mikktspace.com/))\n * - [x] Samplers\n * - [x] Textures\n * - [x] Animations\n *   - Paths\n *     - [x] Translation\n *     - [x] Rotation\n *     - [x] Scale\n *     - [x] Weights\n *   - Interpolation\n *     - [x] Step\n *     - [x] Linear\n *     - [x] CubicSpline\n * - [x] Cameras\n *   - [ ] OrthographicCamera\n *   - [x] PerspectiveCamera\n * - [x] Materials\n * - [x] Skins\n * - [x] Morph targets\n * - [ ] Extensions\n *\n * @example\n * ```javascript\n * const gltfLoader = new GLTFLoader()\n * const gltf = await gltfLoader.loadFromUrl('path/to/model.gltf')\n *\n * // create a gltfScenesManager from the resulting 'gltf' object\n * // assuming 'renderer' is a valid camera renderer or curtains instance\n * const gltfScenesManager = new GLTFScenesManager({ renderer, gltf })\n * gltfScenesManager.addMeshes()\n * ```\n */\nexport class GLTFScenesManager {\n  /** The {@link CameraRenderer} used. */\n  renderer: CameraRenderer\n  /** The {@link GLTFLoader.gltf | gltf} object used. */\n  gltf: GLTFLoader['gltf']\n  /** The {@link ScenesManager} containing all the useful data. */\n  scenesManager: ScenesManager\n  /** The {@link PrimitiveInstances} Map, to group similar {@link Mesh} by instances. */\n  #primitiveInstances: PrimitiveInstances\n\n  /**\n   * {@link GLTFScenesManager} constructor.\n   * @param parameters - parameters used to create our {@link GLTFScenesManager}.\n   * @param parameters.renderer - our {@link CameraRenderer} class object.\n   * @param parameters.gltf - The {@link GLTFLoader.gltf | gltf} object used.\n   */\n  constructor({ renderer, gltf }) {\n    renderer = isCameraRenderer(renderer, 'GLTFScenesManager')\n\n    this.renderer = renderer\n    this.gltf = gltf\n\n    this.#primitiveInstances = new Map()\n\n    this.scenesManager = {\n      node: new Object3D(),\n      nodes: new Map(),\n      boundingBox: new Box3(),\n      samplers: [],\n      materialsTextures: [],\n      scenes: [],\n      meshes: [],\n      meshesDescriptors: [],\n      animations: [],\n      cameras: [],\n      skins: [],\n    }\n\n    this.createSamplers()\n    this.createMaterialTextures()\n    this.createAnimations()\n    this.createScenes()\n  }\n\n  /**\n   * Get an attribute type, bufferFormat and size from its {@link GLTF.AccessorType | accessor type}.\n   * @param type - {@link GLTF.AccessorType | accessor type} to use.\n   * @returns - corresponding type, bufferFormat and size.\n   */\n  static getVertexAttributeParamsFromType(type: GLTF.AccessorType): {\n    /** Corresponding attribute type */\n    type: VertexBufferAttribute['type']\n    /** Corresponding attribute bufferFormat */\n    bufferFormat: VertexBufferAttribute['bufferFormat']\n    /** Corresponding attribute size */\n    size: VertexBufferAttribute['size']\n  } {\n    switch (type) {\n      case 'VEC2':\n        return {\n          type: 'vec2f',\n          bufferFormat: 'float32x2',\n          size: 2,\n        }\n      case 'VEC3':\n        return {\n          type: 'vec3f',\n          bufferFormat: 'float32x3',\n          size: 3,\n        }\n      case 'VEC4':\n        return {\n          type: 'vec4f',\n          bufferFormat: 'float32x4',\n          size: 4,\n        }\n      case 'MAT2':\n        return {\n          type: 'mat2x2f',\n          bufferFormat: 'float32x2', // not used\n          size: 6,\n        }\n      case 'MAT3':\n        return {\n          type: 'mat3x3f',\n          bufferFormat: 'float32x3', // not used\n          size: 9,\n        }\n      case 'MAT4':\n        return {\n          type: 'mat4x4f',\n          bufferFormat: 'float32x4', // not used\n          size: 16,\n        }\n      case 'SCALAR':\n      default: // treat default as f32\n        return {\n          type: 'f32',\n          bufferFormat: 'float32',\n          size: 1,\n        }\n    }\n  }\n\n  /**\n   * Get the corresponding typed array constructor based on the {@link GLTF.AccessorComponentType | accessor component type}.\n   * @param componentType - {@link GLTF.AccessorComponentType | accessor component type} to use.\n   * @returns - corresponding typed array constructor.\n   */\n  static getTypedArrayConstructorFromComponentType(componentType: GLTF.AccessorComponentType): TypedArrayConstructor {\n    switch (componentType) {\n      case GL.BYTE: // GL.BYTE\n        return Int8Array\n      case GL.UNSIGNED_BYTE: // GL.UNSIGNED_BYTE\n        return Uint8Array\n      case GL.SHORT: // GL.SHORT\n        return Int16Array\n      case GL.UNSIGNED_SHORT: // GL.UNSIGNED_SHORT\n        return Uint16Array\n      case GL.UNSIGNED_INT: // GL.UNSIGNED_INT\n        return Uint32Array\n      case GL.FLOAT: // GL.FLOAT\n      default:\n        return Float32Array\n    }\n  }\n\n  /**\n   * Get the {@link GPUDevice.createRenderPipeline().topology | GPUPrimitiveTopology} based on the {@link GLTF.MeshPrimitiveMode | WebGL primitive mode}.\n   * @param mode - {@link GLTF.MeshPrimitiveMode | WebGL primitive mode} to use.\n   * @returns - corresponding {@link GPUDevice.createRenderPipeline().topology | GPUPrimitiveTopology}.\n   */\n  static gpuPrimitiveTopologyForMode(mode: GLTF.MeshPrimitiveMode): GPUPrimitiveTopology {\n    switch (mode) {\n      case GL.TRIANGLES: // GL.TRIANGLES\n        return 'triangle-list'\n      case GL.TRIANGLE_STRIP: // GL.TRIANGLE_STRIP\n        return 'triangle-strip'\n      case GL.LINES: // GL.LINES\n        return 'line-list'\n      case GL.LINE_STRIP: // GL.LINE_STRIP\n        return 'line-strip'\n      case GL.POINTS: // GL.POINTS\n        return 'point-list'\n    }\n  }\n\n  /**\n   * Get the {@link GPUDevice.createSampler().descriptor.addressModeU | GPUAddressMode} based on the {@link GLTF.TextureWrapMode | WebGL texture wrap mode}.\n   * @param wrap - {@link GLTF.TextureWrapMode | WebGL texture wrap mode} to use.\n   * @returns - corresponding {@link GPUDevice.createSampler().descriptor.addressModeU | GPUAddressMode}.\n   */\n  static gpuAddressModeForWrap(wrap: GLTF.TextureWrapMode): GPUAddressMode {\n    switch (wrap) {\n      case GL.CLAMP_TO_EDGE:\n        return 'clamp-to-edge'\n      case GL.MIRRORED_REPEAT:\n        return 'mirror-repeat'\n      default:\n        return 'repeat'\n    }\n  }\n\n  /**\n   * Create the {@link scenesManager} {@link TargetsAnimationsManager} if any animation is present in the {@link gltf}.\n   */\n  createAnimations() {\n    this.gltf.animations?.forEach((animation, index) => {\n      this.scenesManager.animations.push(\n        new TargetsAnimationsManager(this.renderer, {\n          label: animation.name ?? 'Animation ' + index,\n        })\n      )\n    })\n  }\n\n  /**\n   * Create the {@link Sampler} and add them to the {@link ScenesManager.samplers | scenesManager samplers array}.\n   */\n  createSamplers() {\n    if (this.gltf.samplers) {\n      for (const [index, sampler] of Object.entries(this.gltf.samplers)) {\n        const descriptor = {\n          label: 'glTF sampler ' + index,\n          name: 'gltfSampler' + index, // TODO better name?\n          addressModeU: GLTFScenesManager.gpuAddressModeForWrap(sampler.wrapS),\n          addressModeV: GLTFScenesManager.gpuAddressModeForWrap(sampler.wrapT),\n        } as SamplerParams\n\n        // WebGPU's default min/mag/mipmap filtering is nearest, se we only have to override it if we\n        // want linear filtering for some aspect.\n        if (!sampler.magFilter || sampler.magFilter === GL.LINEAR) {\n          descriptor.magFilter = 'linear'\n        }\n\n        switch (sampler.minFilter) {\n          case GL.NEAREST:\n            break\n          case GL.LINEAR:\n          case GL.LINEAR_MIPMAP_NEAREST:\n            descriptor.minFilter = 'linear'\n            break\n          case GL.NEAREST_MIPMAP_LINEAR:\n            descriptor.mipmapFilter = 'linear'\n            break\n          case GL.LINEAR_MIPMAP_LINEAR:\n          default:\n            descriptor.minFilter = 'linear'\n            descriptor.mipmapFilter = 'linear'\n            break\n        }\n\n        this.scenesManager.samplers.push(new Sampler(this.renderer, descriptor))\n      }\n    } else {\n      // create a default sampler\n      this.scenesManager.samplers.push(\n        new Sampler(this.renderer, {\n          label: 'Default sampler',\n          name: 'defaultSampler',\n          magFilter: 'linear',\n          minFilter: 'linear',\n          mipmapFilter: 'linear',\n        })\n      )\n    }\n  }\n\n  /**\n   * Create a {@link Texture} based on the options.\n   * @param material - material using that texture.\n   * @param image - image source of the texture.\n   * @param name - name of the texture.\n   * @returns - newly created {@link Texture}.\n   */\n  createTexture(material: GLTF.IMaterial, image: ImageBitmap, name: string): Texture {\n    const format = (() => {\n      switch (name) {\n        case 'baseColorTexture':\n        case 'emissiveTexture':\n          return 'bgra8unorm-srgb'\n        case 'occlusionTexture':\n          return 'r8unorm'\n        default:\n          return 'bgra8unorm'\n      }\n    })()\n\n    const texture = new Texture(this.renderer, {\n      label: material.name ? material.name + ': ' + name : name,\n      name,\n      format,\n      visibility: ['fragment'],\n      generateMips: true, // generate mips by default\n      fixedSize: {\n        width: image.width,\n        height: image.height,\n      },\n    })\n\n    texture.uploadSource({\n      source: image,\n    })\n\n    return texture\n  }\n\n  /**\n   * Create the {ScenesManager.materialsTextures | scenesManager materialsTextures array} and each associated {@link types/gltf/GLTFScenesManager.MaterialTexture | MaterialTexture} and their respective {@link Texture}.\n   */\n  createMaterialTextures() {\n    this.scenesManager.materialsTextures = []\n\n    if (this.gltf.materials) {\n      for (const [materialIndex, material] of Object.entries(this.gltf.materials)) {\n        // TODO handle custom/additional UV attributes\n        const materialTextures = {\n          material: materialIndex,\n          texturesDescriptors: [],\n        }\n\n        const getUVAttributeName = (texture) => {\n          if (!texture.texCoord) return 'uv'\n\n          return texture.texCoord !== 0 ? 'uv' + texture.texCoord : 'uv'\n        }\n\n        this.scenesManager.materialsTextures[materialIndex] = materialTextures\n\n        if (material.pbrMetallicRoughness) {\n          if (\n            material.pbrMetallicRoughness.baseColorTexture &&\n            material.pbrMetallicRoughness.baseColorTexture.index !== undefined\n          ) {\n            const index = material.pbrMetallicRoughness.baseColorTexture.index\n            const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\n\n            const texture = this.createTexture(material, image, 'baseColorTexture')\n            const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\n\n            materialTextures.texturesDescriptors.push({\n              texture,\n              sampler: this.scenesManager.samplers[samplerIndex ?? 0],\n              texCoordAttributeName: getUVAttributeName(material.pbrMetallicRoughness.baseColorTexture),\n            })\n          }\n\n          if (\n            material.pbrMetallicRoughness.metallicRoughnessTexture &&\n            material.pbrMetallicRoughness.metallicRoughnessTexture.index !== undefined\n          ) {\n            const index = material.pbrMetallicRoughness.metallicRoughnessTexture.index\n            const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\n\n            const texture = this.createTexture(material, image, 'metallicRoughnessTexture')\n            const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\n\n            materialTextures.texturesDescriptors.push({\n              texture,\n              sampler: this.scenesManager.samplers[samplerIndex ?? 0],\n              texCoordAttributeName: getUVAttributeName(material.pbrMetallicRoughness.metallicRoughnessTexture),\n            })\n          }\n        }\n\n        if (material.normalTexture && material.normalTexture.index !== undefined) {\n          const index = material.normalTexture.index\n          const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\n\n          const texture = this.createTexture(material, image, 'normalTexture')\n          const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\n\n          materialTextures.texturesDescriptors.push({\n            texture,\n            sampler: this.scenesManager.samplers[samplerIndex ?? 0],\n            texCoordAttributeName: getUVAttributeName(material.normalTexture),\n          })\n        }\n\n        if (material.occlusionTexture && material.occlusionTexture.index !== undefined) {\n          const index = material.occlusionTexture.index\n          const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\n\n          const texture = this.createTexture(material, image, 'occlusionTexture')\n          const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\n\n          materialTextures.texturesDescriptors.push({\n            texture,\n            sampler: this.scenesManager.samplers[samplerIndex ?? 0],\n            texCoordAttributeName: getUVAttributeName(material.occlusionTexture),\n          })\n        }\n\n        if (material.emissiveTexture && material.emissiveTexture.index !== undefined) {\n          const index = material.emissiveTexture.index\n          const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\n\n          const texture = this.createTexture(material, image, 'emissiveTexture')\n          const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\n\n          materialTextures.texturesDescriptors.push({\n            texture,\n            sampler: this.scenesManager.samplers[samplerIndex ?? 0],\n            texCoordAttributeName: getUVAttributeName(material.emissiveTexture),\n          })\n        }\n      }\n    }\n  }\n\n  /**\n   * Create a {@link ChildDescriptor} from a parent {@link ChildDescriptor} and a {@link GLTF.INode | glTF Node}\n   * @param parent - parent {@link ChildDescriptor} to use.\n   * @param node - {@link GLTF.INode | glTF Node} to use.\n   * @param index - Index of the {@link GLTF.INode | glTF Node} to use.\n   */\n  createNode(parent: ChildDescriptor, node: GLTF.INode, index: number) {\n    const child: ChildDescriptor = {\n      index,\n      name: node.name,\n      node: new Object3D(),\n      children: [],\n    }\n\n    this.scenesManager.nodes.set(index, child.node)\n\n    parent.children.push(child)\n\n    child.node.parent = parent.node\n\n    if (node.matrix) {\n      child.node.modelMatrix.setFromArray(new Float32Array(node.matrix))\n      // avoid overriding the matrix with empty position/scale/rotation\n      child.node.matrices.model.shouldUpdate = false\n    } else {\n      if (node.translation) child.node.position.set(node.translation[0], node.translation[1], node.translation[2])\n      if (node.scale) child.node.scale.set(node.scale[0], node.scale[1], node.scale[2])\n      if (node.rotation) child.node.quaternion.setFromArray(new Float32Array(node.rotation))\n    }\n\n    if (node.children) {\n      node.children.forEach((childNodeIndex) => {\n        const childNode = this.gltf.nodes[childNodeIndex]\n        this.createNode(child, childNode, childNodeIndex)\n      })\n    }\n\n    let instancesDescriptor = null\n\n    if (node.mesh !== undefined) {\n      // EXT_mesh_gpu_instancing\n      let instanceAttributes = null\n      if (node.extensions && node.extensions.EXT_mesh_gpu_instancing) {\n        const { attributes } = node.extensions.EXT_mesh_gpu_instancing as GLTF.IMeshPrimitive['attributes']\n\n        instanceAttributes = {\n          count: 0,\n          nodesTransformations: {},\n        }\n\n        for (const attribute of Object.entries(attributes)) {\n          const accessor = this.gltf.accessors[attribute[1]]\n          const bufferView = this.gltf.bufferViews[accessor.bufferView]\n\n          const accessorConstructor = GLTFScenesManager.getTypedArrayConstructorFromComponentType(\n            accessor.componentType\n          )\n          const attributeSize = GLTFScenesManager.getVertexAttributeParamsFromType(accessor.type).size\n\n          const attributeValues = new accessorConstructor(\n            this.gltf.arrayBuffers[bufferView.buffer],\n            accessor.byteOffset + bufferView.byteOffset,\n            accessor.count * attributeSize\n          )\n\n          instanceAttributes.count = accessor.count\n\n          instanceAttributes.nodesTransformations[attribute[0].toLowerCase()] = attributeValues\n        }\n      }\n\n      const mesh = this.gltf.meshes[node.mesh]\n\n      // each primitive is in fact a mesh\n      mesh.primitives.forEach((primitive, primitiveIndex) => {\n        const meshDescriptor: MeshDescriptor = {\n          parent: child.node,\n          attributes: [],\n          textures: [],\n          parameters: {\n            label: mesh.name ? mesh.name + ' ' + primitiveIndex : 'glTF mesh ' + primitiveIndex,\n          },\n          nodes: [],\n        }\n\n        instancesDescriptor = this.#primitiveInstances.get(primitive)\n        if (!instancesDescriptor) {\n          instancesDescriptor = {\n            instances: [], // instances\n            nodes: [], // node transform\n            meshDescriptor,\n          }\n\n          this.#primitiveInstances.set(primitive, instancesDescriptor)\n        }\n\n        instancesDescriptor.instances.push(node)\n        instancesDescriptor.nodes.push(child.node)\n\n        // add eventual instances from extension\n        if (instanceAttributes && instanceAttributes.count) {\n          for (let i = 0; i < instanceAttributes.count; i++) {\n            const instanceNode = new Object3D()\n            if (instanceAttributes.nodesTransformations) {\n              const { translation, scale, rotation } = instanceAttributes.nodesTransformations\n              if (translation) {\n                instanceNode.position.set(translation[i * 3], translation[i * 3 + 1], translation[i * 3 + 2])\n              }\n              if (scale) {\n                instanceNode.scale.set(scale[i * 3], scale[i * 3 + 1], scale[i * 3 + 2])\n              }\n              if (rotation) {\n                instanceNode.quaternion.setFromArray(\n                  Float32Array.from([rotation[i * 4], rotation[i * 4 + 1], rotation[i * 4 + 2], rotation[i * 4 + 3]])\n                )\n              }\n            }\n\n            instanceNode.parent = child.node\n\n            instancesDescriptor.instances.push(node)\n            instancesDescriptor.nodes.push(instanceNode)\n          }\n        }\n      })\n    }\n\n    if (node.camera !== undefined) {\n      const gltfCamera = this.gltf.cameras[node.camera]\n\n      if (gltfCamera.type === 'perspective') {\n        const minSize = Math.min(this.renderer.boundingRect.width, this.renderer.boundingRect.height)\n        const width = minSize / gltfCamera.perspective.aspectRatio\n        const height = minSize * gltfCamera.perspective.aspectRatio\n        const fov = (gltfCamera.perspective.yfov * 180) / Math.PI\n\n        const camera = new Camera({\n          fov,\n          near: gltfCamera.perspective.znear,\n          far: gltfCamera.perspective.zfar,\n          width,\n          height,\n          pixelRatio: this.renderer.pixelRatio,\n        })\n\n        camera.parent = child.node\n\n        this.scenesManager.cameras.push(camera)\n      } else if (gltfCamera.type === 'orthographic') {\n        // TODO orthographic not supported for now\n        // since they're not implemented (yet?)\n        throwWarning('GLTFScenesManager: Orthographic cameras are not supported yet.')\n      }\n    }\n\n    if (this.gltf.animations) {\n      this.scenesManager.animations.forEach((targetsAnimation, i) => {\n        const animation = this.gltf.animations[i]\n\n        const channels = animation.channels.filter((channel) => channel.target.node === index)\n\n        if (channels && channels.length) {\n          targetsAnimation.addTarget(child.node)\n\n          channels.forEach((channel) => {\n            const sampler = animation.samplers[channel.sampler]\n            const path = channel.target.path\n\n            const inputAccessor = this.gltf.accessors[sampler.input]\n            const inputBufferView = this.gltf.bufferViews[inputAccessor.bufferView]\n\n            const inputTypedArrayConstructor = GLTFScenesManager.getTypedArrayConstructorFromComponentType(\n              inputAccessor.componentType\n            )\n\n            const outputAccessor = this.gltf.accessors[sampler.output]\n            const outputBufferView = this.gltf.bufferViews[outputAccessor.bufferView]\n            const outputTypedArrayConstructor = GLTFScenesManager.getTypedArrayConstructorFromComponentType(\n              outputAccessor.componentType\n            )\n\n            const keyframes = new inputTypedArrayConstructor(\n              this.gltf.arrayBuffers[inputBufferView.buffer],\n              inputAccessor.byteOffset + inputBufferView.byteOffset,\n              inputAccessor.count * GLTFScenesManager.getVertexAttributeParamsFromType(inputAccessor.type).size\n            )\n\n            const values = new outputTypedArrayConstructor(\n              this.gltf.arrayBuffers[outputBufferView.buffer],\n              outputAccessor.byteOffset + outputBufferView.byteOffset,\n              outputAccessor.count * GLTFScenesManager.getVertexAttributeParamsFromType(outputAccessor.type).size\n            )\n\n            const animName = node.name ? `${node.name} animation` : `${channel.target.path} animation ${index}`\n\n            const keyframesAnimation = new KeyframesAnimation({\n              label: animation.name ? `${animation.name} ${animName}` : `Animation ${i} ${animName}`,\n              inputIndex: sampler.input,\n              keyframes,\n              values,\n              path,\n              interpolation: sampler.interpolation,\n            })\n\n            targetsAnimation.addTargetAnimation(child.node, keyframesAnimation)\n          })\n        }\n      })\n    }\n  }\n\n  /**\n   * Get an accessor sparse indices values to use for replacement if any.\n   * @param accessor - {@link GLTF.IAccessor | Accessor} to check for sparse indices.\n   * @returns parameters - indices and values found as {@link TypedArray} if any.\n   * @private\n   */\n  #getSparseAccessorIndicesAndValues(\n    accessor: GLTF.IAccessor\n  ): { indices: TypedArray | null; values: TypedArray | null } | null {\n    if (!accessor.sparse) return { indices: null, values: null }\n\n    const accessorConstructor = GLTFScenesManager.getTypedArrayConstructorFromComponentType(accessor.componentType)\n    const attrSize = GLTFScenesManager.getVertexAttributeParamsFromType(accessor.type).size\n\n    const sparseIndicesConstructor = GLTFScenesManager.getTypedArrayConstructorFromComponentType(\n      accessor.sparse.indices.componentType\n    )\n    const sparseIndicesBufferView = this.gltf.bufferViews[accessor.sparse.indices.bufferView]\n    const sparseIndices = new sparseIndicesConstructor(\n      this.gltf.arrayBuffers[sparseIndicesBufferView.buffer],\n      accessor.byteOffset + sparseIndicesBufferView.byteOffset,\n      accessor.sparse.count\n    )\n\n    const sparseValuesBufferView = this.gltf.bufferViews[accessor.sparse.values.bufferView]\n    const sparseValues = new accessorConstructor(\n      this.gltf.arrayBuffers[sparseValuesBufferView.buffer],\n      accessor.byteOffset + sparseValuesBufferView.byteOffset,\n      accessor.sparse.count * attrSize\n    )\n\n    return {\n      indices: sparseIndices,\n      values: sparseValues,\n    }\n  }\n\n  /**\n   * Get a clean attribute name based on a glTF attribute name.\n   * @param gltfAttributeName - glTF attribute name.\n   * @returns - Attribute name conform to our expectations.\n   */\n  static getCleanAttributeName(gltfAttributeName: string): string {\n    return gltfAttributeName === 'TEXCOORD_0'\n      ? 'uv'\n      : gltfAttributeName.replace('_', '').replace('TEXCOORD', 'uv').toLowerCase()\n  }\n\n  /**\n   * Sort an array of {@link VertexBufferAttributeParams} by an array of attribute names.\n   * @param attributesNames - array of attribute names to use for sorting.\n   * @param attributes - {@link VertexBufferAttributeParams} array to sort.\n   */\n  sortAttributesByNames(attributesNames: string[], attributes: VertexBufferAttributeParams[]) {\n    attributes.sort((a, b) => {\n      let aIndex = attributesNames.findIndex((attrName) => attrName === a.name)\n      aIndex = aIndex === -1 ? Infinity : aIndex\n\n      let bIndex = attributesNames.findIndex((attrName) => attrName === b.name)\n      bIndex = bIndex === -1 ? Infinity : bIndex\n\n      return aIndex - bIndex\n    })\n  }\n\n  /**\n   * Parse a {@link GLTF.IMeshPrimitive | glTF primitive} and create typed arrays from the given {@link gltf} accessors, bufferViews and buffers.\n   * @param primitiveProperty- Primitive property to parse, can either be `attributes` or `targets`.\n   * @param attributes - An empty {@link VertexBufferAttributeParams} array to fill with parsed values.\n   * @returns - Interleaved attributes {@link TypedArray} if any.\n   * @private\n   */\n  #parsePrimitiveProperty(\n    primitiveProperty: GLTF.IMeshPrimitive['attributes'] | GLTF.IMeshPrimitive['targets'],\n    attributes: VertexBufferAttributeParams[]\n  ): TypedArray | null {\n    // check whether the buffer view is already interleaved\n    let interleavedArray = null\n    let interleavedBufferView = null\n    let maxByteOffset = 0\n\n    // prepare default attributes\n    // first sort them by accessor indices\n    const primitiveAttributes = Object.entries(primitiveProperty)\n    primitiveAttributes.sort((a, b) => a[1] - b[1])\n    const primitiveAttributesValues = Object.values(primitiveProperty)\n    primitiveAttributesValues.sort((a, b) => a - b)\n\n    for (const [attribName, accessorIndex] of primitiveAttributes) {\n      // clean attributes names\n      const name = GLTFScenesManager.getCleanAttributeName(attribName)\n\n      const accessor = this.gltf.accessors[accessorIndex as number]\n\n      const constructor = accessor.componentType\n        ? GLTFScenesManager.getTypedArrayConstructorFromComponentType(accessor.componentType)\n        : Float32Array\n\n      const bufferView = this.gltf.bufferViews[accessor.bufferView]\n\n      const byteStride = bufferView.byteStride\n      const accessorByteOffset = accessor.byteOffset\n\n      const isInterleaved =\n        byteStride !== undefined && accessorByteOffset !== undefined && accessorByteOffset < byteStride\n\n      if (isInterleaved) {\n        maxByteOffset = Math.max(accessorByteOffset, maxByteOffset)\n      } else {\n        maxByteOffset = 0\n      }\n\n      if (name === 'position') {\n        // this feels quite conservative\n        // what about targets for example?\n        interleavedBufferView = bufferView\n      }\n\n      const attributeParams = GLTFScenesManager.getVertexAttributeParamsFromType(accessor.type)\n      const { size } = attributeParams\n\n      // will hold our attribute data\n      let array\n\n      if (maxByteOffset > 0) {\n        const parentArray = new constructor(\n          this.gltf.arrayBuffers[bufferView.buffer],\n          0,\n          bufferView.byteLength / constructor.BYTES_PER_ELEMENT\n        )\n\n        array = new constructor(accessor.count * size)\n\n        const arrayStride = accessorByteOffset / constructor.BYTES_PER_ELEMENT\n        for (let i = 0; i < accessor.count; i++) {\n          for (let j = 0; j < size; j++) {\n            array[i * size + j] = parentArray[arrayStride + size * i + size * i + j]\n          }\n        }\n      } else {\n        if (bufferView.byteStride && bufferView.byteStride > constructor.BYTES_PER_ELEMENT * size) {\n          // buffer view stride is bigger than the actual stride\n          // we have to rebuild the array accounting for stride\n          const dataView = new DataView(\n            this.gltf.arrayBuffers[bufferView.buffer],\n            bufferView.byteOffset + accessor.byteOffset\n          )\n\n          // Reading the data with stride handling\n          array = new constructor(accessor.count * size)\n          for (let i = 0; i < accessor.count; i++) {\n            const baseOffset = i * bufferView.byteStride\n            for (let j = 0; j < size; j++) {\n              array[i * size + j] = dataView.getUint16(baseOffset + j * constructor.BYTES_PER_ELEMENT, true) // true for little-endian\n            }\n          }\n        } else {\n          array = new constructor(\n            this.gltf.arrayBuffers[bufferView.buffer],\n            accessor.byteOffset + bufferView.byteOffset,\n            accessor.count * size\n          )\n        }\n      }\n\n      // sparse accessor?\n      // patch the array with sparse values\n      if (accessor.sparse) {\n        const { indices, values } = this.#getSparseAccessorIndicesAndValues(accessor)\n\n        for (let i = 0; i < indices.length; i++) {\n          for (let j = 0; j < size; j++) {\n            array[indices[i] * size + j] = values[i * size + j]\n          }\n        }\n      }\n\n      if (name.includes('weights')) {\n        // normalize weights\n        for (let i = 0; i < accessor.count * size; i += size) {\n          const x = array[i]\n          const y = array[i + 1]\n          const z = array[i + 2]\n          const w = array[i + 3]\n\n          let len = Math.abs(x) + Math.abs(y) + Math.abs(z) + Math.abs(w)\n          if (len > 0) {\n            len = 1 / Math.sqrt(len)\n          } else {\n            len = 1\n          }\n\n          array[i] *= len\n          array[i + 1] *= len\n          array[i + 2] *= len\n          array[i + 3] *= len\n        }\n      }\n\n      const attribute = {\n        name,\n        ...attributeParams,\n        array,\n      }\n\n      attributes.push(attribute)\n    }\n\n    if (maxByteOffset > 0) {\n      // check they are all really interleaved\n      const accessorsBufferViews = primitiveAttributesValues.map(\n        (accessorIndex) => this.gltf.accessors[accessorIndex as number].bufferView\n      )\n\n      if (!accessorsBufferViews.every((val) => val === accessorsBufferViews[0])) {\n        // we're not that lucky since we have interleaved values coming from different positions of our main buffer\n        // we'll have to rebuild an interleaved array ourselves\n        // see https://github.com/toji/sponza-optimized/issues/1\n        let totalStride = 0\n        const mainBufferStrides = {}\n        const arrayLength = primitiveAttributesValues.reduce((acc: number, accessorIndex: number): number => {\n          const accessor = this.gltf.accessors[accessorIndex]\n\n          const attrSize = GLTFScenesManager.getVertexAttributeParamsFromType(accessor.type).size\n\n          if (!mainBufferStrides[accessor.bufferView]) {\n            mainBufferStrides[accessor.bufferView] = 0\n          }\n\n          mainBufferStrides[accessor.bufferView] = Math.max(\n            mainBufferStrides[accessor.bufferView],\n            accessor.byteOffset + attrSize * Float32Array.BYTES_PER_ELEMENT\n          )\n\n          totalStride += attrSize * Float32Array.BYTES_PER_ELEMENT\n\n          return acc + accessor.count * attrSize\n        }, 0) as number\n\n        interleavedArray = new Float32Array(Math.ceil(arrayLength / 4) * 4)\n\n        primitiveAttributesValues.forEach((accessorIndex: number) => {\n          const accessor = this.gltf.accessors[accessorIndex]\n          const bufferView = this.gltf.bufferViews[accessor.bufferView]\n\n          const attrSize = GLTFScenesManager.getVertexAttributeParamsFromType(accessor.type).size\n\n          // get eventual sparse\n          const { indices, values } = this.#getSparseAccessorIndicesAndValues(accessor)\n\n          for (let i = 0; i < accessor.count; i++) {\n            const startOffset =\n              accessor.byteOffset / Float32Array.BYTES_PER_ELEMENT + (i * totalStride) / Float32Array.BYTES_PER_ELEMENT\n\n            const subarray = new Float32Array(\n              this.gltf.arrayBuffers[bufferView.buffer],\n              bufferView.byteOffset + accessor.byteOffset + i * mainBufferStrides[accessor.bufferView],\n              attrSize\n            )\n\n            // patch with sparse values if needed\n            if (indices && values && indices.includes(i)) {\n              for (let j = 0; i < attrSize; j++) {\n                subarray[j] = values[i * attrSize + j]\n              }\n            }\n\n            interleavedArray.subarray(startOffset, startOffset + attrSize).set(subarray)\n          }\n        })\n\n        // we need to reorder the attributes\n        const cleanAttributeNames = Object.entries(primitiveProperty).map((prop) =>\n          GLTFScenesManager.getCleanAttributeName(prop[0])\n        )\n\n        this.sortAttributesByNames(cleanAttributeNames, attributes)\n      } else {\n        // we're lucky to have an interleaved array!\n        // we won't have to compute our geometry!\n        interleavedArray = new Float32Array(\n          this.gltf.arrayBuffers[interleavedBufferView.buffer],\n          interleavedBufferView.byteOffset,\n          (Math.ceil(interleavedBufferView.byteLength / 4) * 4) / Float32Array.BYTES_PER_ELEMENT\n        )\n\n        // check for sparse!\n        let stride = 0\n        primitiveAttributesValues.forEach((accessorIndex: number) => {\n          const accessor = this.gltf.accessors[accessorIndex]\n          const attrSize = GLTFScenesManager.getVertexAttributeParamsFromType(accessor.type).size\n\n          // get eventual sparse\n          const { indices, values } = this.#getSparseAccessorIndicesAndValues(accessor)\n\n          if (indices && values) {\n            // patch interleaved array with sparse values\n            for (let i = 0; i < indices.length; i++) {\n              for (let j = 0; j < attrSize; j++) {\n                const arrayStride = stride + attrSize * i\n                interleavedArray[arrayStride + indices[i] * attrSize + j] = values[i * attrSize + j]\n              }\n            }\n          }\n\n          stride += attrSize\n        })\n\n        // now we're lucky enough to have an interleaved array\n        // but we must ensure our attributes are passed to the geometry in the right order\n        // which corresponds to the attributes accessors byte offset order\n        const primitivePropertiesSortedByByteOffset = Object.entries(primitiveProperty).sort((a, b) => {\n          const accessorAByteOffset = this.gltf.accessors[a[1]].byteOffset\n          const accessorBByteOffset = this.gltf.accessors[b[1]].byteOffset\n          return accessorAByteOffset - accessorBByteOffset\n        })\n\n        const accessorNameOrder = primitivePropertiesSortedByByteOffset.map((property) =>\n          GLTFScenesManager.getCleanAttributeName(property[0])\n        )\n\n        this.sortAttributesByNames(accessorNameOrder, attributes)\n      }\n    }\n\n    return interleavedArray\n  }\n\n  /**\n   * Create the mesh {@link Geometry} based on the given {@link gltf} primitive and {@link PrimitiveInstanceDescriptor}.\n   * @param primitive - {@link gltf} primitive to use to create the {@link Geometry}.\n   * @param primitiveInstance - {@link PrimitiveInstanceDescriptor} to use to create the {@link Geometry}.\n   */\n  createGeometry(primitive: GLTF.IMeshPrimitive, primitiveInstance: PrimitiveInstanceDescriptor) {\n    const { instances, meshDescriptor } = primitiveInstance\n\n    // set geometry bounding box\n    const geometryBBox = new Box3()\n\n    for (const [attribName, accessorIndex] of Object.entries(primitive.attributes)) {\n      if (attribName === 'POSITION') {\n        const accessor = this.gltf.accessors[accessorIndex as number]\n\n        // custom bbox\n        // glTF specs says: \"vertex position attribute accessors MUST have accessor.min and accessor.max defined\"\n        if (geometryBBox) {\n          geometryBBox.min.min(new Vec3(accessor.min[0], accessor.min[1], accessor.min[2]))\n          geometryBBox.max.max(new Vec3(accessor.max[0], accessor.max[1], accessor.max[2]))\n        }\n      }\n    }\n\n    // TODO should we pass an already created buffer to the geometry main vertex and index buffers if possible?\n    // and use bufferOffset and bufferSize parameters\n    // if the accessors byteOffset is large enough,\n    // it means we have an array that is not interleaved (with each vertexBuffer attributes bufferOffset = 0)\n    // but we can deal with the actual offset in the geometry setVertexBuffer call!\n    // see https://toji.dev/webgpu-gltf-case-study/#handling-large-attribute-offsets\n\n    let defaultAttributes = []\n\n    let interleavedArray = this.#parsePrimitiveProperty(primitive.attributes, defaultAttributes)\n\n    // indices\n    const isIndexedGeometry = 'indices' in primitive\n    let indicesArray = null\n    let indicesConstructor = null\n\n    if (isIndexedGeometry) {\n      const accessor = this.gltf.accessors[primitive.indices]\n      const bufferView = this.gltf.bufferViews[accessor.bufferView]\n\n      indicesConstructor = GLTFScenesManager.getTypedArrayConstructorFromComponentType(accessor.componentType) as\n        | Uint32ArrayConstructor\n        | Uint16ArrayConstructor\n\n      const arrayOffset = accessor.byteOffset + bufferView.byteOffset\n      const arrayBuffer = this.gltf.arrayBuffers[bufferView.buffer]\n      const arrayLength =\n        Math.ceil(accessor.count / indicesConstructor.BYTES_PER_ELEMENT) * indicesConstructor.BYTES_PER_ELEMENT\n\n      // do not allow Uint8Array arrays\n      indicesArray =\n        indicesConstructor.name === 'Uint8Array'\n          ? Uint16Array.from(new indicesConstructor(arrayBuffer, arrayOffset, arrayLength))\n          : new indicesConstructor(arrayBuffer, arrayOffset, arrayLength)\n    }\n\n    const hasNormal = defaultAttributes.find((attribute) => attribute.name === 'normal')\n\n    if (!hasNormal) {\n      // specs say \"When normals are not specified, client implementations MUST calculate flat normals and the provided tangents (if present) MUST be ignored.\"\n      // compute flat normal\n      // from https://gist.github.com/donmccurdy/34a60951796cf703c8f6a9e1cd4bbe58\n      const positionAttribute = defaultAttributes.find((attribute) => attribute.name === 'position')\n      const vertex1 = new Vec3()\n      const vertex2 = new Vec3()\n      const vertex3 = new Vec3()\n      const edge1 = new Vec3()\n      const edge2 = new Vec3()\n      const normal = new Vec3()\n\n      const computeNormal = () => {\n        edge1.copy(vertex2).sub(vertex1)\n        edge2.copy(vertex3).sub(vertex1)\n\n        normal.crossVectors(edge1, edge2).normalize()\n      }\n\n      const posLength = positionAttribute.array.length\n      const normalArray = new Float32Array(posLength)\n\n      if (!indicesArray) {\n        for (let i = 0; i < posLength; i += positionAttribute.size * 3) {\n          vertex1.set(positionAttribute.array[i], positionAttribute.array[i + 1], positionAttribute.array[i + 2])\n          vertex2.set(positionAttribute.array[i + 3], positionAttribute.array[i + 4], positionAttribute.array[i + 5])\n          vertex3.set(positionAttribute.array[i + 6], positionAttribute.array[i + 7], positionAttribute.array[i + 8])\n\n          computeNormal()\n\n          for (let j = 0; j < 3; j++) {\n            normalArray[i + j * 3] = normal.x\n            normalArray[i + 1 + j * 3] = normal.y\n            normalArray[i + 2 + j * 3] = normal.z\n          }\n        }\n      } else {\n        const nbIndices = indicesArray.length\n        for (let i = 0; i < nbIndices; i += 3) {\n          const i0 = indicesArray[i] * 3\n          const i1 = indicesArray[i + 1] * 3\n          const i2 = indicesArray[i + 2] * 3\n\n          // avoid to access non existing values if we padded our indices array\n          if (posLength < i0 + 2) continue\n          vertex1.set(positionAttribute.array[i0], positionAttribute.array[i0 + 1], positionAttribute.array[i0 + 2])\n          if (posLength < i1 + 2) continue\n          vertex2.set(positionAttribute.array[i1], positionAttribute.array[i1 + 1], positionAttribute.array[i1 + 2])\n          if (posLength < i2 + 2) continue\n          vertex3.set(positionAttribute.array[i2], positionAttribute.array[i2 + 1], positionAttribute.array[i2 + 2])\n\n          computeNormal()\n\n          for (let j = 0; j < 3; j++) {\n            normalArray[indicesArray[i + j] * 3] = normal.x\n            normalArray[indicesArray[i + j] * 3 + 1] = normal.y\n            normalArray[indicesArray[i + j] * 3 + 2] = normal.z\n          }\n        }\n      }\n\n      const normalAttribute = {\n        name: 'normal',\n        type: 'vec3f',\n        bufferFormat: 'float32x3',\n        size: 3,\n        array: normalArray,\n      }\n\n      // add to the attributes\n      defaultAttributes.push(normalAttribute)\n\n      // remove existing tangent if any\n      defaultAttributes = defaultAttributes.filter((attr) => attr.name !== 'tangent')\n\n      // if we had an interleavedArray then we'd have to rebuilt it with normals\n      // the Geometry is going to do that for us\n      interleavedArray = null\n    }\n\n    if (!interleavedArray) {\n      // not interleaved?\n      // let's try to reorder the attributes so we might benefit from pipeline cache\n      this.sortAttributesByNames(['position', 'uv', 'normal'], defaultAttributes)\n    }\n\n    defaultAttributes.forEach((attribute) => {\n      meshDescriptor.attributes.push({\n        name: attribute.name,\n        type: attribute.type,\n      })\n    })\n\n    const geometryAttributes: GeometryParams = {\n      instancesCount: instances.length,\n      topology: GLTFScenesManager.gpuPrimitiveTopologyForMode(primitive.mode),\n      vertexBuffers: [\n        {\n          name: 'attributes',\n          stepMode: 'vertex', // explicitly set the stepMode even if not mandatory\n          attributes: defaultAttributes,\n          ...(interleavedArray && { array: interleavedArray }), // interleaved array!\n        },\n      ],\n    }\n\n    const GeometryConstructor = isIndexedGeometry ? IndexedGeometry : Geometry\n\n    meshDescriptor.parameters.geometry = new GeometryConstructor(geometryAttributes)\n    meshDescriptor.parameters.geometry.boundingBox = geometryBBox\n\n    if (isIndexedGeometry && indicesConstructor && indicesArray) {\n      ;(meshDescriptor.parameters.geometry as IndexedGeometry).setIndexBuffer({\n        bufferFormat: indicesConstructor.name === 'Uint32Array' ? 'uint32' : 'uint16',\n        array: indicesArray,\n      })\n    }\n  }\n\n  /**\n   * Create the {@link SkinDefinition | skins definitions} for each {@link gltf} skins.\n   */\n  createSkins() {\n    if (this.gltf.skins) {\n      this.gltf.skins.forEach((skin, skinIndex) => {\n        const skinnedMeshNode = this.gltf.nodes.find(\n          (node) => node.skin !== undefined && node.mesh !== undefined && node.skin === skinIndex\n        )\n\n        const meshIndex = skinnedMeshNode.mesh\n\n        let matrices\n        if (skin.inverseBindMatrices) {\n          const matricesAccessor = this.gltf.accessors[skin.inverseBindMatrices]\n          const matricesBufferView = this.gltf.bufferViews[matricesAccessor.bufferView]\n\n          const matricesTypedArrayConstructor = GLTFScenesManager.getTypedArrayConstructorFromComponentType(\n            matricesAccessor.componentType\n          )\n\n          matrices = new matricesTypedArrayConstructor(\n            this.gltf.arrayBuffers[matricesBufferView.buffer],\n            matricesAccessor.byteOffset + matricesBufferView.byteOffset,\n            matricesAccessor.count * GLTFScenesManager.getVertexAttributeParamsFromType(matricesAccessor.type).size\n          )\n        } else {\n          matrices = new Float32Array(16 * skin.joints.length)\n          // fill with identity matrices\n          for (let i = 0; i < skin.joints.length * 16; i += 16) {\n            matrices[i] = 1\n            matrices[i + 5] = 1\n            matrices[i + 10] = 1\n            matrices[i + 15] = 1\n          }\n        }\n\n        const binding = new BufferBinding({\n          label: 'Skin ' + skinIndex,\n          name: 'skin' + skinIndex,\n          bindingType: 'storage',\n          visibility: ['vertex'],\n          childrenBindings: [\n            {\n              binding: new BufferBinding({\n                label: 'Joints ' + skinIndex,\n                name: 'joints',\n                bindingType: 'storage',\n                visibility: ['vertex'],\n                struct: {\n                  jointMatrix: {\n                    type: 'mat4x4f',\n                    value: new Float32Array(16),\n                  },\n                  normalMatrix: {\n                    type: 'mat4x4f',\n                    value: new Float32Array(16),\n                  },\n                },\n              }),\n              count: skin.joints.length,\n              forceArray: true, // needs to be always iterable\n            },\n          ],\n        })\n\n        // set default matrices values\n        for (let i = 0; i < skin.joints.length; i++) {\n          for (let j = 0; j < 16; j++) {\n            binding.childrenBindings[i].inputs.jointMatrix.value[j] = matrices[i * 16 + j]\n            binding.childrenBindings[i].inputs.normalMatrix.value[j] = matrices[i * 16 + j]\n          }\n\n          binding.childrenBindings[i].inputs.jointMatrix.shouldUpdate = true\n          binding.childrenBindings[i].inputs.normalMatrix.shouldUpdate = true\n        }\n\n        const joints = skin.joints.map((joint) => this.scenesManager.nodes.get(joint))\n\n        const jointMatrix = new Mat4()\n        const normalMatrix = new Mat4()\n\n        const parentNodeIndex = this.gltf.nodes.findIndex(\n          (node) => node.mesh !== undefined && node.skin !== undefined && node.mesh === meshIndex\n        )\n\n        if (parentNodeIndex !== -1) {\n          const parentNode = this.scenesManager.nodes.get(parentNodeIndex)\n\n          // create parent inverse world matrix\n          // and update it once before updating the joint matrices\n          const parentInverseWorldMatrix = new Mat4()\n\n          const _updateWorldMatrix = parentNode.updateWorldMatrix.bind(parentNode)\n\n          parentNode.updateWorldMatrix = () => {\n            _updateWorldMatrix()\n\n            parentInverseWorldMatrix.copy(parentNode.worldMatrix).invert()\n          }\n\n          if (this.scenesManager.animations.length) {\n            for (const animation of this.scenesManager.animations) {\n              joints.forEach((object, jointIndex) => {\n                // from https://github.com/KhronosGroup/glTF-Sample-Renderer/blob/63b7c128266cfd86bbd3f25caf8b3db3fe854015/source/gltf/skin.js#L88\n                const updateJointMatrix = () => {\n                  if (animation.isPlaying) {\n                    // same as\n                    // jointMatrix.multiplyMatrices(object.worldMatrix, new Mat4().setFromArray(matrices as Float32Array, jointIndex * 16))\n                    // jointMatrix.multiplyMatrices(parentInverseWorldMatrix, jointMatrix)\n                    jointMatrix\n                      .setFromArray(matrices as Float32Array, jointIndex * 16)\n                      .premultiply(object.worldMatrix)\n                      .premultiply(parentInverseWorldMatrix)\n                  } else {\n                    // if the animation is not playing\n                    // reset the joint matrices to display default model\n                    jointMatrix.identity()\n                  }\n\n                  normalMatrix.copy(jointMatrix).invert().transpose()\n\n                  for (let i = 0; i < 16; i++) {\n                    binding.childrenBindings[jointIndex].inputs.jointMatrix.value[i] = jointMatrix.elements[i]\n                    binding.childrenBindings[jointIndex].inputs.normalMatrix.value[i] = normalMatrix.elements[i]\n                  }\n\n                  binding.childrenBindings[jointIndex].inputs.jointMatrix.shouldUpdate = true\n                  binding.childrenBindings[jointIndex].inputs.normalMatrix.shouldUpdate = true\n                }\n\n                // add an empty animation to our target with just an onAfterUpdate callback\n                // that will update the joint matrices\n                const node = this.gltf.nodes[jointIndex]\n                const animName = node.name ? `${node.name} skin animation` : `skin animation ${jointIndex}`\n\n                const emptyAnimation = new KeyframesAnimation({\n                  label: animation.label ? `${animation.label} ${animName}` : `Animation ${animName}`,\n                })\n\n                emptyAnimation.onAfterUpdate = updateJointMatrix\n\n                animation.addTargetAnimation(object, emptyAnimation)\n              })\n            }\n          } else {\n            // no animations? weird, but set the joint matrices once anyway\n            joints.forEach((object, jointIndex) => {\n              jointMatrix\n                .setFromArray(matrices as Float32Array, jointIndex * 16)\n                .premultiply(object.worldMatrix)\n                .premultiply(parentInverseWorldMatrix)\n\n              normalMatrix.copy(jointMatrix).invert().transpose()\n\n              for (let i = 0; i < 16; i++) {\n                binding.childrenBindings[jointIndex].inputs.jointMatrix.value[i] = jointMatrix.elements[i]\n                binding.childrenBindings[jointIndex].inputs.normalMatrix.value[i] = normalMatrix.elements[i]\n              }\n\n              binding.childrenBindings[jointIndex].inputs.jointMatrix.shouldUpdate = true\n              binding.childrenBindings[jointIndex].inputs.normalMatrix.shouldUpdate = true\n            })\n          }\n\n          this.scenesManager.skins.push({\n            parentNode,\n            joints,\n            inverseBindMatrices: matrices,\n            jointMatrix,\n            normalMatrix,\n            parentInverseWorldMatrix,\n            binding,\n          } as SkinDefinition)\n        }\n      })\n    }\n  }\n\n  /**\n   * Create the mesh material parameters based on the given {@link gltf} primitive and {@link PrimitiveInstanceDescriptor}.\n   * @param primitive - {@link gltf} primitive to use to create the material parameters.\n   * @param primitiveInstance - {@link PrimitiveInstanceDescriptor} to use to create the material parameters.\n   */\n  createMaterial(primitive: GLTF.IMeshPrimitive, primitiveInstance: PrimitiveInstanceDescriptor) {\n    const { instances, nodes, meshDescriptor } = primitiveInstance\n\n    const instancesCount = instances.length\n\n    const meshIndex = instances[0].mesh\n\n    // morph targets\n    if (primitive.targets) {\n      const bindings = []\n\n      const weights = this.gltf.meshes[meshIndex].weights\n\n      let weightAnimation\n      for (const animation of this.scenesManager.animations) {\n        weightAnimation = animation.getAnimationByObject3DAndPath(meshDescriptor.parent, 'weights')\n\n        if (weightAnimation) break\n      }\n\n      primitive.targets.forEach((target, index) => {\n        const targetAttributes = []\n        this.#parsePrimitiveProperty(target, targetAttributes)\n\n        const struct = targetAttributes.reduce(\n          (acc, attribute) => {\n            return (acc = {\n              ...acc,\n              ...{\n                [attribute.name]: {\n                  type: `array<${attribute.type}>`,\n                  value: attribute.array,\n                },\n              },\n            })\n          },\n          {\n            weight: {\n              type: 'f32',\n              value: weights && weights.length ? weights[index] : 0,\n            },\n          }\n        )\n\n        const targetBinding = new BufferBinding({\n          label: 'Morph target ' + index,\n          name: 'morphTarget' + index,\n          bindingType: 'storage',\n          visibility: ['vertex'],\n          struct,\n        })\n\n        if (weightAnimation) {\n          weightAnimation.addWeightBindingInput(targetBinding.inputs.weight)\n        }\n\n        bindings.push(targetBinding)\n      })\n\n      if (!meshDescriptor.parameters.bindings) {\n        meshDescriptor.parameters.bindings = []\n      }\n\n      meshDescriptor.parameters.bindings = [...meshDescriptor.parameters.bindings, ...bindings]\n    }\n\n    // skins\n    if (this.gltf.skins) {\n      this.gltf.skins.forEach((skin, skinIndex) => {\n        if (!meshDescriptor.parameters.bindings) {\n          meshDescriptor.parameters.bindings = []\n        }\n\n        instances.forEach((node, instanceIndex) => {\n          if (node.skin !== undefined && node.skin === skinIndex) {\n            const skinDef = this.scenesManager.skins[skinIndex]\n\n            meshDescriptor.parameters.bindings = [...meshDescriptor.parameters.bindings, skinDef.binding]\n\n            // TODO skinned meshes bounding box?\n            // real dirty way to get a better approximate bounding box\n            // should use https://discourse.threejs.org/t/accurate-gltf-bounding-box/45410/4\n            if (instanceIndex > 0) {\n              const tempBbox = meshDescriptor.parameters.geometry.boundingBox.clone()\n              const tempMat4 = new Mat4()\n              skinDef.joints.forEach((object, jointIndex) => {\n                tempMat4.setFromArray(skinDef.inverseBindMatrices, jointIndex * 16)\n\n                const transformedBbox = tempBbox.applyMat4(tempMat4).applyMat4(object.worldMatrix)\n                this.scenesManager.boundingBox.min.min(transformedBbox.min)\n                this.scenesManager.boundingBox.max.max(transformedBbox.max)\n              })\n            }\n          }\n        })\n      })\n    }\n\n    // textures and samplers\n    const materialTextures = this.scenesManager.materialsTextures[primitive.material]\n\n    meshDescriptor.parameters.samplers = []\n    meshDescriptor.parameters.textures = []\n\n    materialTextures?.texturesDescriptors.forEach((t) => {\n      meshDescriptor.textures.push({\n        texture: t.texture.options.name,\n        sampler: t.sampler.name,\n        texCoordAttributeName: t.texCoordAttributeName,\n      })\n\n      const samplerExists = meshDescriptor.parameters.samplers.find((s) => s.uuid === t.sampler.uuid)\n\n      if (!samplerExists) {\n        meshDescriptor.parameters.samplers.push(t.sampler)\n      }\n\n      meshDescriptor.parameters.textures.push(t.texture)\n    })\n\n    const material = (this.gltf.materials && this.gltf.materials[primitive.material]) || {}\n\n    meshDescriptor.parameters.cullMode = material.doubleSided ? 'none' : 'back'\n\n    // transparency\n    if (material.alphaMode === 'BLEND' || (material.extensions && material.extensions.KHR_materials_transmission)) {\n      meshDescriptor.parameters.transparent = true\n      meshDescriptor.parameters.targets = [\n        {\n          blend: {\n            color: {\n              srcFactor: 'src-alpha',\n              dstFactor: 'one-minus-src-alpha',\n            },\n            alpha: {\n              // This just prevents the canvas from having alpha \"holes\" in it.\n              srcFactor: 'one',\n              dstFactor: 'one',\n            },\n          },\n        },\n      ]\n    }\n\n    // uniforms\n    const materialUniformStruct = {\n      baseColorFactor: {\n        type: 'vec4f',\n        value: material.pbrMetallicRoughness?.baseColorFactor || [1, 1, 1, 1],\n      },\n      alphaCutoff: {\n        type: 'f32',\n        value: material.alphaCutoff !== undefined ? material.alphaCutoff : material.alphaMode === 'MASK' ? 0.5 : 0,\n      },\n      metallicFactor: {\n        type: 'f32',\n        value:\n          material.pbrMetallicRoughness?.metallicFactor === undefined\n            ? 1\n            : material.pbrMetallicRoughness.metallicFactor,\n      },\n      roughnessFactor: {\n        type: 'f32',\n        value:\n          material.pbrMetallicRoughness?.roughnessFactor === undefined\n            ? 1\n            : material.pbrMetallicRoughness.roughnessFactor,\n      },\n      normalMapScale: {\n        type: 'f32',\n        value: material.normalTexture?.scale === undefined ? 1 : material.normalTexture.scale,\n      },\n      occlusionStrength: {\n        type: 'f32',\n        value: material.occlusionTexture?.strength === undefined ? 1 : material.occlusionTexture.strength,\n      },\n      emissiveFactor: {\n        type: 'vec3f',\n        value: material.emissiveFactor !== undefined ? material.emissiveFactor : [1, 1, 1],\n      },\n    }\n\n    if (Object.keys(materialUniformStruct).length) {\n      meshDescriptor.parameters.uniforms = {\n        material: {\n          visibility: ['vertex', 'fragment'],\n          struct: materialUniformStruct,\n        },\n      }\n    }\n\n    // instances matrices storage\n    if (instancesCount > 1) {\n      const instanceMatricesBinding = new BufferBinding({\n        label: 'Instance matrices',\n        name: 'matrices',\n        visibility: ['vertex', 'fragment'],\n        bindingType: 'storage',\n        struct: {\n          model: {\n            type: 'mat4x4f',\n            value: new Mat4(),\n          },\n          normal: {\n            type: 'mat3x3f',\n            value: new Mat3(),\n          },\n        },\n      })\n\n      const instancesBinding = new BufferBinding({\n        label: 'Instances',\n        name: 'instances',\n        visibility: ['vertex', 'fragment'],\n        bindingType: 'storage',\n        childrenBindings: [\n          {\n            binding: instanceMatricesBinding,\n            count: instancesCount,\n            forceArray: true,\n          },\n        ],\n      })\n\n      instancesBinding.childrenBindings.forEach((binding, index) => {\n        // each time the instance node world matrix is updated\n        // we compute and update the corresponding matrices bindings\n        const instanceNode = nodes[index]\n        const _updateWorldMatrix = instanceNode.updateWorldMatrix.bind(instanceNode)\n        instanceNode.updateWorldMatrix = () => {\n          _updateWorldMatrix()\n          ;(binding.inputs.model.value as Mat4).copy(instanceNode.worldMatrix)\n          ;(binding.inputs.normal.value as Mat3).getNormalMatrix(instanceNode.worldMatrix)\n          binding.inputs.model.shouldUpdate = true\n          binding.inputs.normal.shouldUpdate = true\n        }\n      })\n\n      if (!meshDescriptor.parameters.bindings) {\n        meshDescriptor.parameters.bindings = []\n      }\n\n      meshDescriptor.parameters.bindings.push(instancesBinding)\n    }\n\n    // computed transformed bbox\n    for (let i = 0; i < nodes.length; i++) {\n      const tempBbox = meshDescriptor.parameters.geometry.boundingBox.clone()\n      const transformedBbox = tempBbox.applyMat4(meshDescriptor.nodes[i].worldMatrix)\n\n      this.scenesManager.boundingBox.min.min(transformedBbox.min)\n      this.scenesManager.boundingBox.max.max(transformedBbox.max)\n    }\n\n    // avoid having a bounding box max component equal to 0\n    this.scenesManager.boundingBox.max.max(new Vec3(0.001))\n  }\n\n  /**\n   * Create the {@link ScenesManager#scenes | ScenesManager scenes} based on the {@link gltf} object.\n   */\n  createScenes() {\n    this.scenesManager.node.parent = this.renderer.scene\n\n    this.gltf.scenes.forEach((childScene) => {\n      const sceneDescriptor = {\n        name: childScene.name,\n        children: [],\n        node: new Object3D(),\n      }\n\n      sceneDescriptor.node.parent = this.scenesManager.node\n\n      this.scenesManager.scenes.push(sceneDescriptor)\n\n      childScene.nodes.forEach((nodeIndex) => {\n        const node = this.gltf.nodes[nodeIndex]\n        this.createNode(sceneDescriptor, node, nodeIndex)\n      })\n    })\n\n    // now that we created all our nodes, update all the matrices eagerly\n    // needed to get the right bounding box\n    this.scenesManager.node.updateMatrixStack()\n\n    // create skins definitions if needed\n    this.createSkins()\n\n    for (const [primitive, primitiveInstance] of this.#primitiveInstances) {\n      const { nodes, meshDescriptor } = primitiveInstance\n\n      meshDescriptor.nodes = nodes\n      this.scenesManager.meshesDescriptors.push(meshDescriptor)\n\n      // ------------------------------------\n      // GEOMETRY\n      // ------------------------------------\n\n      this.createGeometry(primitive, primitiveInstance)\n\n      // ------------------------------------\n      // MATERIAL\n      // ------------------------------------\n\n      this.createMaterial(primitive, primitiveInstance)\n    }\n  }\n\n  /**\n   * Add all the needed {@link Mesh} based on the {@link ScenesManager#meshesDescriptors | ScenesManager meshesDescriptors} array.\n   * @param patchMeshesParameters - allow to optionally patch the {@link Mesh} parameters before creating it (can be used to add custom shaders, uniforms or storages, change rendering options, etc.)\n   * @returns - Array of created {@link Mesh}.\n   */\n  addMeshes(patchMeshesParameters = (meshDescriptor: MeshDescriptor) => {}): Mesh[] {\n    // once again, update all the matrix stack eagerly\n    // because the main node or children transformations might have changed\n    this.scenesManager.node.updateMatrixStack()\n\n    return this.scenesManager.meshesDescriptors.map((meshDescriptor) => {\n      if (meshDescriptor.parameters.geometry) {\n        // patch the parameters\n        patchMeshesParameters(meshDescriptor)\n\n        const mesh = new Mesh(this.renderer, {\n          ...meshDescriptor.parameters,\n        })\n\n        mesh.parent = meshDescriptor.parent\n\n        this.scenesManager.meshes.push(mesh)\n\n        return mesh\n      }\n    })\n  }\n\n  /**\n   * Destroy the current {@link ScenesManager} by removing all created {@link ScenesManager#meshes | meshes} and destroying all the {@link Object3D} nodes.\n   */\n  destroy() {\n    this.scenesManager.meshes.forEach((mesh) => mesh.remove())\n    this.scenesManager.meshes = []\n\n    // destroy all Object3D created\n    this.scenesManager.nodes.forEach((node) => {\n      node.destroy()\n    })\n\n    this.scenesManager.nodes = new Map()\n\n    this.scenesManager.scenes.forEach((scene) => {\n      scene.node.destroy()\n    })\n\n    // remove animation from renderer\n    this.scenesManager.animations.forEach((animation) => animation.setRenderer(null))\n\n    this.scenesManager.node.destroy()\n\n    this.#primitiveInstances = new Map()\n  }\n}\n","import { MeshDescriptor } from '../../types/gltf/GLTFScenesManager'\nimport { ShaderOptions } from '../../types/Materials'\nimport { Texture } from '../../core/textures/Texture'\nimport { Sampler } from '../../core/samplers/Sampler'\nimport { throwWarning } from '../../utils/utils'\nimport { getLambert, GetShadingParams } from '../../core/shaders/chunks/shading/lambert-shading'\nimport { getPhong } from '../../core/shaders/chunks/shading/phong-shading'\nimport { getPBR } from '../../core/shaders/chunks/shading/pbr-shading'\nimport { getIBL } from '../../core/shaders/chunks/shading/ibl-shading'\nimport { EnvironmentMap } from '../environment-map/EnvironmentMap'\nimport { BufferElement } from '../../core/bindings/bufferElements/BufferElement'\nimport { BufferBinding } from '../../core/bindings/BufferBinding'\nimport { getFullVertexOutput } from '../../core/shaders/chunks/vertex/get_vertex_output'\n\n/** Defines all kinds of shading models available. */\nexport type ShadingModels = 'Lambert' | 'Phong' | 'PBR' | 'IBL'\n\n/**\n * Parameters to use for IBL textures.\n */\nexport interface IBLShaderTextureParams {\n  /** {@link Texture} to use. */\n  texture: Texture\n  /** {@link Sampler#name | Sampler name} to use. */\n  samplerName?: Sampler['name']\n}\n\n/**\n * Parameters used to build the shaders\n */\nexport interface ShaderBuilderParameters {\n  /** Shading model to use. */\n  shadingModel?: ShadingModels\n  /** Additional WGSL chunks to add to the shaders. */\n  chunks?: {\n    /** Additional WGSL chunk to add to the fragment shader head. */\n    additionalFragmentHead?: string\n    /** Preliminary modification to apply to the fragment shader `color` `vec4f` variable before applying any lightning calculations. */\n    preliminaryColorContribution?: string\n    /** Additional modification to apply to the fragment shader `color` `vec4f` variable before returning it. */\n    additionalColorContribution?: string\n  }\n  /** Additional IBL parameters to pass as uniform and textures. */\n  iblParameters?: {\n    /** Environment diffuse strength. Default to `0.5`. */\n    diffuseStrength?: number\n    /** Environment specular strength. Default to `0.5`. */\n    specularStrength?: number\n    /** {@link EnvironmentMap} to use for IBL shading. */\n    environmentMap?: EnvironmentMap\n  }\n}\n\n/** Shaders returned by the shaders builder function. */\nexport interface BuiltShaders {\n  /** Vertex shader returned by the PBR shader builder. */\n  vertex: ShaderOptions\n  /** Fragment shader returned by the PBR shader builder. */\n  fragment: ShaderOptions\n}\n\n/**\n * Build shaders made for glTF parsed objects, based on a {@link MeshDescriptor} and optional {@link ShaderBuilderParameters | shader parameters}.\n *\n * @param meshDescriptor - {@link MeshDescriptor} built by the {@link extras/gltf/GLTFScenesManager.GLTFScenesManager | GLTFScenesManager}\n * @param shaderParameters - {@link ShaderBuilderParameters | shader parameters} to use.\n * @returns - An object containing the shaders.\n */\nexport const buildShaders = (\n  meshDescriptor: MeshDescriptor,\n  shaderParameters = {} as ShaderBuilderParameters\n): BuiltShaders => {\n  // textures check\n  const baseColorTexture = meshDescriptor.textures.find((t) => t.texture === 'baseColorTexture')\n  const normalTexture = meshDescriptor.textures.find((t) => t.texture === 'normalTexture')\n  const emissiveTexture = meshDescriptor.textures.find((t) => t.texture === 'emissiveTexture')\n  const occlusionTexture = meshDescriptor.textures.find((t) => t.texture === 'occlusionTexture')\n  const metallicRoughnessTexture = meshDescriptor.textures.find((t) => t.texture === 'metallicRoughnessTexture')\n\n  const facultativeAttributes = meshDescriptor.attributes.filter((attribute) => attribute.name !== 'position')\n\n  const structAttributes = facultativeAttributes\n    .map((attribute, index) => {\n      return `\n  @location(${index}) ${attribute.name}: ${attribute.type},`\n    })\n    .join('')\n\n  // VERTEX\n  let vertexOutputContent = `\n  @builtin(position) position: vec4f,\n  ${structAttributes}\n  @location(${facultativeAttributes.length}) viewDirection: vec3f,\n  @location(${facultativeAttributes.length + 1}) worldPosition: vec3f,\n  `\n\n  let outputNormalMap = ''\n  const tangentAttribute = facultativeAttributes.find((attr) => attr.name === 'tangent')\n  const useNormalMap = !!(normalTexture && tangentAttribute)\n\n  if (useNormalMap) {\n    vertexOutputContent += `\n  @location(${facultativeAttributes.length + 2}) bitangent: vec3f,\n      `\n\n    outputNormalMap = `\n  vsOutput.bitangent = cross(vsOutput.normal, vsOutput.tangent.xyz) * vsOutput.tangent.w;\n      `\n  }\n\n  const fullVertexOutput = getFullVertexOutput({\n    bindings: meshDescriptor.parameters.bindings as BufferBinding[],\n    geometry: meshDescriptor.parameters.geometry,\n  })\n\n  const vertexOutput = /*wgsl */ `\nstruct VSOutput {\n  ${vertexOutputContent}\n};`\n\n  const fragmentInput = /*wgsl */ `\nstruct VSOutput {\n  @builtin(front_facing) frontFacing: bool,\n  ${vertexOutputContent}\n};`\n\n  const vs = /* wgsl */ `\n${vertexOutput}\n\n@vertex fn main(\n  attributes: Attributes,\n) -> VSOutput {\n  var vsOutput: VSOutput;\n    \n  ${fullVertexOutput}\n  ${outputNormalMap}\n\n  return vsOutput;\n}\n`\n\n  // FRAGMENT\n  const initColor = /* wgsl */ 'var color: vec4f = vec4();'\n  const returnColor = /* wgsl */ `\n  return color;`\n\n  // start with the base color\n  // use vertex color 0 if defined\n  const vertexColor = meshDescriptor.attributes.find((attr) => attr.name === 'color0')\n  let baseColor = /* wgsl */ !!vertexColor\n    ? vertexColor.type === 'vec3f'\n      ? 'var baseColor: vec4f = vec4(fsInput.color0, 1.0) * material.baseColorFactor;'\n      : 'var baseColor: vec4f = fsInput.color0 * material.baseColorFactor;'\n    : 'var baseColor: vec4f = material.baseColorFactor;'\n\n  if (baseColorTexture) {\n    baseColor = /* wgsl */ `\n  var baseColor: vec4f = textureSample(baseColorTexture, ${baseColorTexture.sampler}, fsInput.${baseColorTexture.texCoordAttributeName}) * material.baseColorFactor;\n  \n  if (baseColor.a < material.alphaCutoff) {\n    discard;\n  }\n    `\n  }\n\n  baseColor += /* wgsl */ `\n  color = baseColor;\n  `\n\n  // normal map\n\n  let normalMap = /* wgsl */ `\n  let faceDirection = select(-1.0, 1.0, fsInput.frontFacing);\n  let geometryNormal: vec3f = faceDirection * normal;`\n\n  if (useNormalMap) {\n    normalMap += /* wgsl */ `\n  let tbn = mat3x3f(normalize(fsInput.tangent.xyz), normalize(fsInput.bitangent), geometryNormal);\n  let normalMap = textureSample(normalTexture, ${normalTexture.sampler}, fsInput.${normalTexture.texCoordAttributeName}).rgb;\n  normal = normalize(tbn * (2.0 * normalMap - vec3(material.normalMapScale, material.normalMapScale, 1.0)));`\n  } else if (normalTexture) {\n    normalMap += /* wgsl */ `\n  let Q1: vec3f = dpdx(worldPosition);\n  let Q2: vec3f = dpdy(worldPosition);\n  let st1: vec2f = dpdx(fsInput.${normalTexture.texCoordAttributeName});\n  let st2: vec2f = dpdy(fsInput.${normalTexture.texCoordAttributeName});\n  \n  let T: vec3f = normalize(Q1 * st2.y - Q2 * st1.y);\n  let B: vec3f = normalize(-Q1 * st2.x + Q2 * st1.x);\n  \n  let tbn = mat3x3f(T, B, geometryNormal);\n  let normalMap = textureSample(normalTexture, ${normalTexture.sampler}, fsInput.${normalTexture.texCoordAttributeName}).rgb;\n  normal = normalize(tbn * (2.0 * normalMap - vec3(material.normalMapScale, material.normalMapScale, 1.0)));`\n  } else {\n    normalMap += /* wgsl */ `\n  normal = geometryNormal;`\n  }\n\n  // metallic roughness\n  let metallicRoughness = /*  wgsl */ `\n  var metallic = material.metallicFactor;\n  var roughness = material.roughnessFactor;`\n\n  if (metallicRoughnessTexture) {\n    metallicRoughness += /* wgsl */ `\n  let metallicRoughness = textureSample(metallicRoughnessTexture, ${metallicRoughnessTexture.sampler}, fsInput.${metallicRoughnessTexture.texCoordAttributeName});\n  \n  metallic = clamp(metallic * metallicRoughness.b, 0.0, 1.0);\n  roughness = clamp(roughness * metallicRoughness.g, 0.0, 1.0);\n  `\n  }\n\n  const f0 = /* wgsl */ `\n  let f0: vec3f = mix(vec3(0.04), color.rgb, vec3(metallic));`\n\n  // emissive and occlusion\n  let emissiveOcclusion = /* wgsl */ `\n  var emissive: vec3f = vec3(0.0);\n  var occlusion: f32 = 1.0;`\n\n  if (emissiveTexture) {\n    emissiveOcclusion += /* wgsl */ `\n  emissive = textureSample(emissiveTexture, ${emissiveTexture.sampler}, fsInput.${emissiveTexture.texCoordAttributeName}).rgb;\n  emissive *= material.emissiveFactor;`\n    if (occlusionTexture) {\n      emissiveOcclusion += /* wgsl */ `\n  occlusion = textureSample(occlusionTexture, ${occlusionTexture.sampler}, fsInput.${occlusionTexture.texCoordAttributeName}).r;`\n    }\n  }\n\n  emissiveOcclusion += /* wgsl */ `\n  occlusion = 1.0 + material.occlusionStrength * (occlusion - 1.0);`\n\n  // Shader parameters\n  let { shadingModel } = shaderParameters\n  if (!shadingModel) {\n    shadingModel = 'PBR'\n  }\n\n  let { chunks } = shaderParameters || {}\n  const { iblParameters } = shaderParameters || {}\n  const { environmentMap } = iblParameters || {}\n\n  if (environmentMap && shadingModel === 'IBL') {\n    // add lights & ibl uniforms\n    meshDescriptor.parameters.uniforms = {\n      ...meshDescriptor.parameters.uniforms,\n      ...{\n        ibl: {\n          struct: {\n            envRotation: {\n              type: 'mat3x3f',\n              value: environmentMap.rotation,\n            },\n            diffuseStrength: {\n              type: 'f32',\n              value: iblParameters?.diffuseStrength ?? 0.5,\n            },\n            specularStrength: {\n              type: 'f32',\n              value: iblParameters?.specularStrength ?? 0.5,\n            },\n          },\n        },\n      },\n    }\n\n    meshDescriptor.parameters.textures = [\n      ...meshDescriptor.parameters.textures,\n      environmentMap.lutTexture,\n      environmentMap.diffuseTexture,\n      environmentMap.specularTexture,\n    ]\n\n    meshDescriptor.parameters.samplers = [...meshDescriptor.parameters.samplers, environmentMap.sampler]\n  } else if (shadingModel === 'IBL') {\n    throwWarning('IBL shading requested but the environment map missing. Defaulting to PBR shading.')\n    shadingModel = 'PBR'\n  }\n\n  const shadingOptions: GetShadingParams = {\n    toneMapping: 'khronos',\n    receiveShadows: !!meshDescriptor.parameters.receiveShadows,\n    useOcclusion: true,\n  }\n\n  // user defined chunks\n  const defaultAdditionalHead = (() => {\n    switch (shadingModel) {\n      case 'Lambert':\n      default:\n        return getLambert(shadingOptions)\n      case 'Phong':\n        return getPhong(shadingOptions)\n      case 'PBR':\n        return getPBR(shadingOptions)\n      case 'IBL':\n        return getIBL(shadingOptions)\n    }\n  })()\n\n  const defaultPreliminaryColor = ''\n  const defaultAdditionalColor = ''\n\n  if (!chunks) {\n    chunks = {\n      additionalFragmentHead: defaultAdditionalHead,\n      preliminaryColorContribution: defaultPreliminaryColor,\n      additionalColorContribution: defaultAdditionalColor,\n    }\n  } else {\n    if (!chunks.additionalFragmentHead) {\n      chunks.additionalFragmentHead = defaultAdditionalHead\n    } else {\n      chunks.additionalFragmentHead = defaultAdditionalHead + chunks.additionalFragmentHead\n    }\n\n    if (!chunks.preliminaryColorContribution) {\n      chunks.preliminaryColorContribution = defaultPreliminaryColor\n    } else {\n      chunks.preliminaryColorContribution = defaultPreliminaryColor + chunks.preliminaryColorContribution\n    }\n\n    if (!chunks.additionalColorContribution) {\n      chunks.additionalColorContribution = defaultAdditionalColor\n    } else {\n      chunks.additionalColorContribution = defaultAdditionalColor + chunks.additionalColorContribution\n    }\n  }\n\n  // TODO shininess, specularStrength, specularColor\n  const applyLightShading: string = (() => {\n    switch (shadingModel) {\n      case 'Lambert':\n      default:\n        return /* wgsl */ `\n  color = vec4(\n    getLambert(\n      normal,\n      worldPosition,\n      color.rgb,\n      occlusion\n    ),\n    color.a\n  );`\n      case 'Phong':\n        return /* wgsl */ `\n  color = vec4(\n    getPhong(\n      normal,\n      worldPosition,\n      color.rgb,\n      viewDirection,\n      f0, // specular color\n      metallic * (1.0 - roughness) + (1.0 - metallic) * 0.04, // specular strength\n      (1.0 - roughness) * 30.0, // TODO shininess\n      occlusion\n    ),\n    color.a\n  );`\n      case 'PBR':\n        return /* wgsl */ `\n  color = vec4(\n    getPBR(\n      normal,\n      worldPosition,\n      color.rgb,\n      viewDirection,\n      f0,\n      metallic,\n      roughness,\n      occlusion\n    ),\n    color.a\n  );`\n      case 'IBL':\n        return /* wgsl */ `\n  color = vec4(\n    getIBL(\n      normal,\n      worldPosition,\n      color.rgb,\n      viewDirection,\n      f0,\n      metallic,\n      roughness,\n      ${environmentMap.sampler.name},\n      ${environmentMap.lutTexture.options.name},\n      ${environmentMap.specularTexture.options.name},\n      ${environmentMap.diffuseTexture.options.name},\n      occlusion\n    ),\n    color.a\n  );`\n    }\n  })()\n\n  const applyEmissive = /* wgsl */ `\n  color = vec4(color.rgb + emissive, color.a);\n  `\n\n  const fs = /* wgsl */ `  \n${chunks.additionalFragmentHead}\n\n${fragmentInput}\n\n@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {       \n  ${initColor}\n  ${baseColor}\n  let worldPosition: vec3f = fsInput.worldPosition;\n  let viewDirection: vec3f = fsInput.viewDirection;\n  var normal: vec3f = normalize(fsInput.normal);\n  ${normalMap}\n  ${metallicRoughness}  \n  // user defined preliminary color contribution\n  ${chunks.preliminaryColorContribution}\n  ${f0}\n  ${emissiveOcclusion}\n  ${applyLightShading}\n  ${applyEmissive}\n  // user defined additional color contribution\n  ${chunks.additionalColorContribution}\n  ${returnColor}\n}\n  `\n\n  return {\n    vertex: {\n      code: vs,\n      entryPoint: 'main',\n    },\n    fragment: {\n      code: fs,\n      entryPoint: 'main',\n    },\n  }\n}\n","import { GLTF } from '../../types/gltf/GLTF'\n\n/**\n * Defined the structure of the parsed result from the glTF json object.\n */\nexport interface GPUCurtainsGLTF extends GLTF.IGLTF {\n  /** Array of {@link ArrayBuffer} used by the glTF. */\n  arrayBuffers: ArrayBuffer[]\n  /** Array of created {@link ImageBitmap}. */\n  imagesBitmaps: ImageBitmap[]\n}\n\n// largely based on\n// https://toji.dev/webgpu-gltf-case-study/\n// https://github.com/toji/webgpu-gltf-case-study/blob/main/samples/js/tiny-gltf.js\n\n// also see glTF specs\n// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html\n\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\n// To make it easier to reference the WebGL enums that glTF uses.\nconst GL = WebGLRenderingContext\n\nconst GLB_MAGIC = 0x46546c67\nconst CHUNK_TYPE = {\n  JSON: 0x4e4f534a,\n  BIN: 0x004e4942,\n}\n\nconst DEFAULT_TRANSLATION = [0, 0, 0]\nconst DEFAULT_ROTATION = [0, 0, 0, 1]\nconst DEFAULT_SCALE = [1, 1, 1]\n\nconst absUriRegEx =\n  (typeof window !== 'undefined' && new RegExp(`^${window.location.protocol}`, 'i')) || RegExp(`^(http|https):`, 'i')\nconst dataUriRegEx = /^data:/\n\n/**\n * Basic glTF loader class.\n *\n * Allow to load a glTF from an URI and create the associated {@link ArrayBuffer} and {@link ImageBitmap}.\n *\n * @example\n * ```javascript\n * const gltfLoader = new GLTFLoader()\n * const gltf = await gltfLoader.loadFromUrl('path/to/model.gltf')\n *\n * // create a gltfScenesManager from the resulting 'gltf' object\n * // assuming 'renderer' is a valid camera or curtains renderer\n * const gltfScenesManager = new GLTFScenesManager({ renderer, gltf })\n * gltfScenesManager.addMeshes()\n * ```\n */\nexport class GLTFLoader {\n  /** The {@link GPUCurtainsGLTF} object result. */\n  gltf: GPUCurtainsGLTF | null\n\n  /**\n   * {@link GLTFLoader} constructor.\n   */\n  constructor() {\n    this.gltf = null\n  }\n\n  /**\n   * Build the absolute uri of the resource\n   * @param uri - uri of the resource\n   * @param baseUrl - base url from which to get all the other assets.\n   * @returns - absolute uri of the resource\n   */\n  static resolveUri(uri: string, baseUrl: string): string {\n    if (!!uri.match(absUriRegEx) || !!uri.match(dataUriRegEx)) {\n      return uri\n    }\n    return baseUrl + uri\n  }\n\n  /**\n   * Load a glTF from the given url.\n   * @param url - url of the glTF.\n   * @returns - the {@link GPUCurtainsGLTF} created.\n   */\n  async loadFromUrl(url: string): Promise<GPUCurtainsGLTF> {\n    const i = url.lastIndexOf('/')\n    const baseUrl = i !== 0 ? url.substring(0, i + 1) : ''\n    const response = await fetch(url)\n\n    if (url.endsWith('.gltf')) {\n      return this.loadFromJson(await response.json(), baseUrl)\n    } else if (url.endsWith('.glb')) {\n      return this.loadFromBinary(await response.arrayBuffer(), baseUrl)\n    } else {\n      throw new Error('Unrecognized file extension')\n    }\n  }\n\n  /**\n   * Parse a {@link GLTF.IGLTF | glTF json} and create our {@link gltf} base object.\n   * @param json - already parsed JSON content.\n   * @param baseUrl - base url from which to get all the other assets.\n   * @param binaryChunk - optional binary chunks.\n   * @returns - {@link gltf} base object.\n   */\n  async loadFromJsonBase(\n    json: GLTF.IGLTF,\n    baseUrl: string,\n    binaryChunk: Record<string, ArrayBuffer> = null\n  ): Promise<GPUCurtainsGLTF> {\n    if (!baseUrl) {\n      throw new Error('baseUrl must be specified.')\n    }\n\n    if (!json.asset) {\n      throw new Error('Missing asset description.')\n    }\n\n    if (json.asset.minVersion !== '2.0' && json.asset.version !== '2.0') {\n      throw new Error('Incompatible asset version.')\n    }\n\n    // Resolve defaults for as many properties as we can.\n    for (const accessor of json.accessors) {\n      accessor.byteOffset = accessor.byteOffset ?? 0\n      accessor.normalized = accessor.normalized ?? false\n    }\n\n    for (const bufferView of json.bufferViews) {\n      bufferView.byteOffset = bufferView.byteOffset ?? 0\n    }\n\n    for (const node of json.nodes) {\n      if (!node.matrix) {\n        node.rotation = node.rotation ?? DEFAULT_ROTATION\n        node.scale = node.scale ?? DEFAULT_SCALE\n        node.translation = node.translation ?? DEFAULT_TRANSLATION\n      }\n    }\n\n    if (json.samplers) {\n      for (const sampler of json.samplers) {\n        sampler.wrapS = sampler.wrapS ?? GL.REPEAT\n        sampler.wrapT = sampler.wrapT ?? GL.REPEAT\n      }\n    }\n\n    // Resolve buffers and images first, since these are the only external resources that the file\n    // might reference.\n    // Buffers will be exposed as ArrayBuffers.\n    // Images will be exposed as ImageBitmaps.\n\n    // Buffers\n    const pendingBuffers = []\n    if (binaryChunk) {\n      pendingBuffers.push(Promise.resolve(binaryChunk))\n    } else {\n      for (const index in json.buffers) {\n        const buffer = json.buffers[index]\n        const uri = GLTFLoader.resolveUri(buffer.uri, baseUrl)\n        pendingBuffers[index] = fetch(uri).then((response) => response.arrayBuffer())\n      }\n    }\n\n    // Images\n    const pendingImages = []\n    for (let index = 0; index < json.images?.length || 0; ++index) {\n      const image = json.images[index]\n      if (image.uri) {\n        pendingImages[index] = fetch(GLTFLoader.resolveUri(image.uri, baseUrl)).then(async (response) => {\n          return createImageBitmap(await response.blob())\n        })\n      } else {\n        const bufferView = json.bufferViews[image.bufferView]\n        pendingImages[index] = pendingBuffers[bufferView.buffer].then((buffer) => {\n          const blob = new Blob([new Uint8Array(buffer, bufferView.byteOffset, bufferView.byteLength)], {\n            type: image.mimeType,\n          })\n          return createImageBitmap(blob)\n        })\n      }\n    }\n\n    return {\n      ...json,\n      arrayBuffers: await Promise.all(pendingBuffers),\n      imagesBitmaps: await Promise.all(pendingImages),\n    } as GPUCurtainsGLTF\n  }\n\n  /**\n   * Load a glTF from a .glb file.\n   * @param arrayBuffer - {@link ArrayBuffer} containing the data.\n   * @param baseUrl - base url from which to get all the other assets.\n   * @returns - the {@link GPUCurtainsGLTF} created.\n   */\n  async loadFromBinary(arrayBuffer: ArrayBuffer, baseUrl: string): Promise<GPUCurtainsGLTF> {\n    const headerView = new DataView(arrayBuffer, 0, 12)\n    const magic = headerView.getUint32(0, true)\n    const version = headerView.getUint32(4, true)\n    const length = headerView.getUint32(8, true)\n\n    if (magic !== GLB_MAGIC) {\n      throw new Error('Invalid magic string in binary header.')\n    }\n\n    if (version !== 2) {\n      throw new Error('Incompatible version in binary header.')\n    }\n\n    const chunks = {}\n    let chunkOffset = 12\n    while (chunkOffset < length) {\n      const chunkHeaderView = new DataView(arrayBuffer, chunkOffset, 8)\n      const chunkLength = chunkHeaderView.getUint32(0, true)\n      const chunkType = chunkHeaderView.getUint32(4, true)\n      chunks[chunkType] = arrayBuffer.slice(chunkOffset + 8, chunkOffset + 8 + chunkLength)\n      chunkOffset += chunkLength + 8\n    }\n\n    if (!chunks[CHUNK_TYPE.JSON]) {\n      throw new Error('File contained no json chunk.')\n    }\n\n    const decoder = new TextDecoder('utf-8')\n    const jsonString = decoder.decode(chunks[CHUNK_TYPE.JSON])\n    return this.loadFromJson(JSON.parse(jsonString), baseUrl, chunks[CHUNK_TYPE.BIN])\n  }\n\n  /**\n   * Load the glTF json, parse the data and create our {@link GPUCurtainsGLTF} object.\n   * @param json - already parsed JSON content.\n   * @param baseUrl - base url from which to get all the other assets.\n   * @param binaryChunk - optional binary chunks.\n   * @returns - the {@link GPUCurtainsGLTF} created.\n   */\n  async loadFromJson(\n    json: GLTF.IGLTF,\n    baseUrl: string,\n    binaryChunk: Record<string, ArrayBuffer> = null\n  ): Promise<GPUCurtainsGLTF> {\n    // Load the glTF file\n    this.gltf = await this.loadFromJsonBase(json, baseUrl, binaryChunk)\n    return this.gltf\n  }\n}\n"],"names":["generateUUID","__name","c","r","toCamelCase","string","ltr","idx","toKebabCase","camelCase","warningThrown","throwWarning","warning","throwError","error","formatRendererError","renderer","rendererType","type","isRenderer","isCameraRenderer","isCurtainsRenderer","isProjectedMesh","object","generateMips","sampler","module","pipelineByFormat","device","texture","pipeline","encoder","width","height","baseMipLevel","layer","bindGroup","renderPassDescriptor","pass","commandBuffer","WebGPUShaderStageConstants","WebGPUBufferUsageConstants","WebGPUTextureUsageConstants","bindingVisibilities","getBindingVisibility","visibilities","acc","v","bufferLayouts","getBufferLayout","bufferType","getBindingWGSLVarType","binding","getTextureBindingWGSLVarType","getBindGroupLayoutBindingType","getBindGroupLayoutTextureBindingType","getBindGroupLayoutTextureBindingCacheKey","Binding","label","name","bindingType","visibility","Vec2","x","y","value","changed","callback","vector","min","max","len","alpha","Quat","elements","axisOrder","array","quaternion","ax","ay","az","cosx","cosy","cosz","sinx","siny","sinz","axis","angle","halfAngle","matrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","s","l","quat","z","w","cosHalfTheta","sqrSinHalfTheta","sinHalfTheta","halfTheta","ratioA","ratioB","Vec3","a","b","bx","by","bz","mArray","e","qx","qy","qz","qw","tx","ty","tz","camera","slotsPerRow","bytesPerSlot","bytesPerRow","BufferElement","key","offset","position","overflow","p1","p2","nextPositionAvailable","alignment","size","align","startOffset","arrayBuffer","arrayView","i","j","result","BufferArrayElement","arrayLength","nextAlignment","valueIndex","viewLength","stride","BufferInterleavedArrayElement","subarray","startByteOffset","index","interleavedResult","resultOffset","bufferUsages","getBufferUsages","usages","Buffer","usage","mappedAtCreation","options","staticOptions","GPUBuffer","buffer","destroyPreviousBuffer","_parent","_BufferBinding","useStruct","access","struct","childrenBindings","parent","minOffset","__privateAdd","bindingKey","__privateGet","getAllBufferElements","child","bufferElements","bufferElement","__privateSet","params","defaultParams","bufferBindingCopy","newBufferElement","count","bindings","_onChangeCallback","childrenArray","countA","countB","removedChildBinding","orderedBindings","arrayBindings","bindingKeyA","bindingKeyB","isBindingAArray","isBindingBArray","bufferElementOptions","isArray","bufferLayout","interleavedBufferElements","tempBufferElements","totalStride","bufferElementsArrayBufferSize","bufferElLastRow","bindingLastRow","rowOffset","kebabCaseLabel","structs","interleavedBufferName","varType","additionalBindings","bindingName","inputs","bufferEl","viewSetBuffer","viewSetFunction","bufferElementName","BufferBinding","WritableBufferBinding","shouldCopyResult","BindGroup","uniforms","storages","inputKey","bindingParams","cachedBinding","BufferBindingConstructor","bufferBinding","optionalLabel","bindGroupLayout","needBindGroupReset","needBindGroupLayoutReset","keepLayout","bindGroupCopy","bindingsRef","TextureBinding","format","viewDimension","multisampled","isNewFormat","isNewMultisampled","xAxis","yAxis","zAxis","Mat4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","ae","be","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","t11","t12","t13","t14","det","detInv","t","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","scaleXSq","scaleYSq","scaleZSq","translation","scale","sx","sy","sz","origin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","eye","target","up","left","right","bottom","top","near","far","fov","aspect","d","objectIndex","tempMatrix","Object3D","rotationMatrix","matrixName","textureUsages","getTextureUsages","getDefaultTextureUsage","textureType","getNumMipLevels","sizes","maxSize","_parentRatio","_sourceRatio","_coverScale","_rotationMatrix","defaultDOMTextureParams","DOMTexture","parameters","defaultOptions","parentScale","parentWidth","parentHeight","parentRatio","sourceRatio","coverRatio","url","blob","source","cachedTexture","video","TextureBindGroup","textures","samplers","SamplerBinding","_fov","_near","_far","_pixelRatio","Camera","pixelRatio","onMatricesChanged","depth","cameraOffset","vFOV","tempCamMat4","tempCamVec3","frustumPlanes","Sampler","addressModeU","addressModeV","magFilter","minFilter","mipmapFilter","maxAnisotropy","compare","_autoResize","defaultTextureParams","Texture","colorSpace","data","Material","shaders","useAsyncPipeline","bindGroups","domTextures","texturesBindGroupLength","cacheKey","shaderType","inputsBindGroup","inputBinding","bG","clone","bufferBindingName","objectsUsingTexture","dstBuffer","ComputeMaterial","dispatchSize","commandEncoder","_autoRender","computePassIndex","ComputePass","renderOrder","autoRender","texturesOptions","addToRenderer","removeFromRenderer","computePass","computeParameters","material","domTexture","_autoRender$2","points","Box3","box","transformedBox","corners","cornersCount","defaultDOMFrustumMargins","DOMFrustum","boundingBox","modelViewProjectionMatrix","containerBoundingRect","DOMFrustumMargins","onReEnterView","onLeaveView","boundingRect","minX","maxX","minY","maxY","boundingSphere","centerX","centerY","Geometry","verticesOrder","topology","instancesCount","vertexBuffers","mapBuffersAtCreation","attributesBuffer","vertexBuffer","aIndex","bIndex","stepMode","attributes","bufferOffset","bufferSize","attribute","bufferFormat","verticesStride","attributesLength","attributeCount","accumulator","currentValue","hasPositionAttribute","currentIndex","attributeIndex","attributeValue","locationIndex","IndexedGeometry","PlaneGeometry","widthSegments","heightSegments","verticesCount","indexArray","uv","normal","positionOffset","normalOffset","uvOffset","_intensity","_intensityColor","Light","color","intensity","hasRenderer","light","propertyKey","lightsType","_intensity$1","AmbientLight","RenderPass","sampleCount","qualityRatio","useColorAttachments","renderToSwapChain","colorAttachments","useDepth","depthTexture","depthLoadOp","depthStoreOp","depthClearValue","depthFormat","defaultColorAttachment","colorAttachment","depthTextureView","viewTexture","resolveTarget","loadOp","colorAttachmentIndex","clearValue","renderTexture","RenderTarget","renderPassParams","depthTextureToUse","renderTarget","mesh","shaderPass","_autoRender$1","pipelineId","PipelineEntry","useAsync","code","shaderModule","compilationInfo","message","formattedMessage","newBindGroups","get_output_position","get_normals","get_uv_cover","get_vertex_to_uv_coords","ShaderChunks","ProjectedShaderChunks","RenderPipelineEntry","pipelineParams","renderingOptions","chunk","groupsBindings","bindIndex","bindingIndex","groupFragment","groupFragmentIndex","groupBinding","isSameShader","vertexLocationIndex","compareRenderingOptions","newOptions","baseOptions","default_projected_vsWgsl","default_vsWgsl","default_fsWgsl","RenderMaterial","useProjection","transparent","depthWriteEnabled","depthCompare","cullMode","targets","newProperties","oldRenderingOptions","oldProps","optKey","newProps","geometry","startBindGroupIndex","getVertexPositionNormal","output","hasInstances","skinJoints","skinWeights","skinBindings","morphAttributes","input","attributeType","attributeBindingVar","hasSkin","skinJoint","skinWeight","getFullVertexOutput","attr","getDefaultShadowDepthVs","lightIndex","getPCFShadowContribution","getPCFDirectionalShadows","directionalLights","minDirectionalLights","getDefaultPointShadowDepthVs","getDefaultPointShadowDepthFs","getPCFPointShadowContribution","getPCFPointShadows","pointLights","minPointLights","getPCFShadows","applyDirectionalShadows","applyPointShadows","_bias","_normalBias","_pcfSamples","_isActive","_materials","_depthMaterials","_depthPassTaskID","_setParameters","setParameters_fn","shadowStruct","Shadow","bias","normalBias","pcfSamples","depthTextureSize","depthTextureFormat","__privateMethod","depthMaterial","samplerExists","depthPassTaskID","once","renderBundles","bundle","depthPass","instancesBinding","directionalShadowStruct","DirectionalShadow","_self","prop","_actualPosition","_direction","DirectionalLight","shadow","_actualPosition$1","_tempCubeDirection","pointShadowStruct","PointShadow","view","_range","PointLight","range","meshIndex","defaultMeshBaseParams","MeshBaseMixin","Base","_a","visible","outputTarget","renderBundle","meshParameters","m","oldRenderer","updateScene","renderPass","currentCacheKey","isDepthMaterialSwitch","switchTransparency","CacheManager","planeGeometry","element","planeGeometryID","cacheManager","FullscreenPlane","mouseCoords","Mat3","me","tmp","ProjectedObject3D","default_normal_fsWgsl","defaultProjectedMeshParams","ProjectedMeshBaseMixin","frustumCulling","receiveShadows","castShadows","hasRenderBundle","matrices","depthTextures","depthSamplers","matricesUniforms","meshTransformationBinding","center","radius","maxWorldRadius","cMin","cMax","sMin","sMax","rMin","rMax","rectMin","rectMax","rect","sphereCenter","sphereRadius","Mesh","ComputePipelineEntry","PipelineManager","shaderA","shaderB","pipelineEntry","rendering","sameCacheKey","sameVertexShader","sameFragmentShader","differentParams","existingPipelineEntry","sameComputeShader","ResizeManager","observedEntries","observedEntry","entry","shouldWatch","priority","resizeManager","DOMElement","onSizeChanged","onPositionChanged","notFoundEl","rect1","rect2","k","isSameRect","delta","camPosA","camPosB","posA","posB","Scene","renderPassEntry","cP","passEntry","stack","projectionStack","isTransparent","similarMeshes","similarObjects","onBeforeRenderPass","swapChainTexture","onAfterRenderPass","outputPass","shaderPassEntry","isPostProA","renderOrderA","indexA","isPostProB","renderOrderB","indexB","pingPongPlane","entryType","meshes","meshA","meshB","radiusA","radiusB","targetsAnimation","renderPassEntryType","passDrawnCount","_taskCount","TasksQueueManager","args","order","task","__privateWrapper","taskId","GPURenderer","deviceManager","container","autoResize","context","contextOptions","isOffscreenCanvas","isContainerCanvas","rectBBox","renderingSize","dimension","sceneObject","srcBuffer","hasCommandEncoder","bindGroupLayoutDescriptor","bindGroupDescriptor","shaderModuleDescriptor","pipelineLayoutDescriptor","pipelineDescriptor","textureDescriptor","existingSampler","samplerOptions","gpuSampler","objects","_shouldUpdateCameraLightsBindGroup","GPUCameraRenderer","lights","cameraParameters","structParams","paramKey","oldLightBinding","lightBindingIndex","shadowsType","oldShadowsBinding","shadowsBindingIndex","GPUDeviceManager","production","adapterOptions","onError","onDeviceLost","info","onDeviceDestroyed","adapter","requiredFeatures","indirectBuffer","_addGeometryToIndirectMappedBuffer","addGeometryToIndirectMappedBuffer_fn","indirectBufferEntrySize","IndirectBuffer","geometries","minEntrySize","indirectMappedBuffer","mappedBuffer","_useProjection","_ready","_setBinding","setBinding_fn","_patchBindingOffset","patchBindingOffset_fn","_onSizeChanged","onSizeChanged_fn","_setDescriptor","setDescriptor_fn","_encodeRenderCommands","encodeRenderCommands_fn","_cleanUp","cleanUp_fn","bundleIndex","RenderBundle","useBuffer","useIndirectDraw","firstEntry","keepMesh","isReady","_key","keepMeshes","newSize","default_pass_fsWGSl","ShaderPass","defaultBlend","inputTarget","sP","common","light_utils","toneMappingUtils","RE_indirect_diffuse","constants","lambertUtils","getLambertDirect","getLambert","addUtils","toneMapping","useOcclusion","getPhongDirect","getPhong","RE_indirect_specular","pbrUtils","getPBRDirect","getPBR","getIBLIndirect","getIBL","_DOMObjectWorldPosition","_DOMObjectWorldScale","_DOMObjectDepthScaleRatio","DOMObject3D","worldPosition","planeCenter","containerCenter","defaultDOMMeshParams","DOMMesh","autoloadSources","loaderSize","sourcesLoaded","images","videos","canvases","onSourceUploaded","image","canvas","devicePixelRatio","scaleBoundingRect","defaultPlaneParams","Plane","DOMMeshParams","materialParams","geometryID","GPUCurtainsRenderer","domObject","ScrollManager","scroll","onScroll","lastScroll","GPUCurtains","watchScroll","domMesh","_element","_offset","_isOrbiting","_spherical","_rotateStart","_isPaning","_panStart","_panDelta","_setBaseParams","setBaseParams_fn","_addEvents","addEvents_fn","_removeEvents","removeEvents_fn","_onMouseDown","onMouseDown_fn","_onTouchStart","onTouchStart_fn","_onMouseMove","onMouseMove_fn","_onTouchMove","onTouchMove_fn","_onMouseUp","onMouseUp_fn","_onTouchEnd","onTouchEnd_fn","_onMouseWheel","onMouseWheel_fn","_onContextMenu","onContextMenu_fn","_update","update_fn","_rotate","rotate_fn","_pan","pan_fn","_zoom","zoom_fn","tempVec2a","tempVec2b","tempVec3","OrbitControls","enableZoom","minZoom","maxZoom","zoomSpeed","enableRotate","minPolarAngle","maxPolarAngle","minAzimuthAngle","maxAzimuthAngle","rotateSpeed","enablePan","panSpeed","sinPhiRadius","targetDistance","_decodeRGBE","decodeRGBE_fn","_parseHeader","parseHeader_fn","_parseSize","parseSize_fn","_readLine","readLine_fn","_parseData","parseData_fn","_parseNewRLE","parseNewRLE_fn","_swap","swap_fn","_flipX","flipX_fn","_flipY","flipY_fn","HDRLoader","stream","header","line","parts","ch","str","hash","colorCorr","tgt","numComps","comps","rle","n","g","i1","i2","hw","hh","b1","b2","computeBrdfLutWgsl","computeSpecularCubemapFromHdr","computeDiffuseFromSpecularCubemap","specularTexture","_copyComputeStorageTextureToTexture","copyComputeStorageTextureToTexture_fn","EnvironmentMap","computeSampleCount","lutTextureParams","lutStorageTexture","computeLUTPass","parsedHdr","cubeStorageTexture","computeCubeMapPass","diffuseStorageTexture","computeDiffusePass","faceSize","textureDefaultOptions","diffuseTextureParams","diffuseSize","storageTexture","BoxGeometry","depthSegments","vertices","uvs","normals","indices","numberOfVertices","buildPlane","u","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","iy","ix","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","thetaEnd","grid","vertex","verticesRow","uOffset","PingPongPlane","pPP","_localRay","_v0","_v1","_v2","_edge1","_edge2","_uv0","_uv1","_uv2","_n0","_n1","_n2","_intersectMesh","intersectMesh_fn","Raycaster","clientX","clientY","intersectionPoint","h","q","f","v0p","d00","d01","d11","d20","d21","denom","barycentric","triangleIndex","recursive","intersections","clipSpaceBoundingRect","inverseModelMatrix","triangleCount","faceDirection","point","distance","intersection","tempQuat","KeyframesAnimation","inputIndex","keyframes","values","path","interpolation","prevComponentValue","nextComponentValue","prevOutputTangentValue","nextInputTangentValue","t2","t3","currentTime","nextTimeIndex","previousTimeIndex","nextTime","previousTime","interpolatedTime","deltaTime","prevIndex","nextIndex","previousOutputTangent","nextInputTangent","cubicValue","vectorName","nextValue","_startTime","_currentTime","_deltaTime","_count","_maxCount","_setSiblings","setSiblings_fn","TargetsAnimationsManager","animation","time","_primitiveInstances","_getSparseAccessorIndicesAndValues","getSparseAccessorIndicesAndValues_fn","_parsePrimitiveProperty","parsePrimitiveProperty_fn","GL","_GLTFScenesManager","gltf","componentType","mode","wrap","descriptor","materialIndex","materialTextures","getUVAttributeName","samplerIndex","node","childNodeIndex","childNode","instancesDescriptor","instanceAttributes","accessor","bufferView","accessorConstructor","attributeSize","attributeValues","primitive","primitiveIndex","meshDescriptor","instanceNode","rotation","gltfCamera","minSize","channels","channel","inputAccessor","inputBufferView","inputTypedArrayConstructor","outputAccessor","outputBufferView","outputTypedArrayConstructor","animName","keyframesAnimation","gltfAttributeName","attributesNames","attrName","primitiveInstance","instances","geometryBBox","attribName","accessorIndex","defaultAttributes","interleavedArray","isIndexedGeometry","indicesArray","indicesConstructor","arrayOffset","positionAttribute","vertex1","vertex2","vertex3","edge1","edge2","computeNormal","posLength","normalArray","nbIndices","i0","normalAttribute","geometryAttributes","GeometryConstructor","skin","skinIndex","matricesAccessor","matricesBufferView","matricesTypedArrayConstructor","joints","joint","jointMatrix","normalMatrix","parentNodeIndex","parentNode","parentInverseWorldMatrix","_updateWorldMatrix","jointIndex","updateJointMatrix","emptyAnimation","nodes","weights","weightAnimation","targetAttributes","targetBinding","instanceIndex","skinDef","tempBbox","tempMat4","transformedBbox","materialUniformStruct","instanceMatricesBinding","childScene","sceneDescriptor","nodeIndex","patchMeshesParameters","scene","attrSize","sparseIndicesConstructor","sparseIndicesBufferView","sparseIndices","sparseValuesBufferView","sparseValues","primitiveProperty","interleavedBufferView","maxByteOffset","primitiveAttributes","primitiveAttributesValues","constructor","byteStride","accessorByteOffset","attributeParams","parentArray","arrayStride","dataView","baseOffset","accessorsBufferViews","val","accessorNameOrder","accessorAByteOffset","accessorBByteOffset","property","mainBufferStrides","cleanAttributeNames","GLTFScenesManager","buildShaders","shaderParameters","baseColorTexture","normalTexture","emissiveTexture","occlusionTexture","metallicRoughnessTexture","facultativeAttributes","vertexOutputContent","outputNormalMap","tangentAttribute","useNormalMap","fullVertexOutput","vertexOutput","fragmentInput","vs","initColor","returnColor","vertexColor","baseColor","normalMap","metallicRoughness","f0","emissiveOcclusion","shadingModel","chunks","iblParameters","environmentMap","shadingOptions","defaultAdditionalHead","defaultPreliminaryColor","defaultAdditionalColor","applyLightShading","fs","GLB_MAGIC","CHUNK_TYPE","DEFAULT_TRANSLATION","DEFAULT_ROTATION","DEFAULT_SCALE","absUriRegEx","dataUriRegEx","GLTFLoader","uri","baseUrl","response","json","binaryChunk","pendingBuffers","pendingImages","headerView","magic","version","length","chunkOffset","chunkHeaderView","chunkLength","chunkType","jsonString"],"mappings":"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"}