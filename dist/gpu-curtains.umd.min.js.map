{"version":3,"file":"gpu-curtains.umd.min.js","sources":["../src/utils/utils.ts","../src/core/renderers/utils.ts","../src/core/bindings/utils.ts","../src/core/bindings/Binding.ts","../src/math/Vec2.ts","../src/math/Quat.ts","../src/math/Vec3.ts","../src/core/bindings/bufferElements/BufferElement.ts","../src/core/bindings/bufferElements/BufferArrayElement.ts","../src/core/bindings/bufferElements/BufferInterleavedArrayElement.ts","../src/core/buffers/utils.ts","../src/core/buffers/Buffer.ts","../src/core/bindings/BufferBinding.ts","../src/core/bindings/WritableBufferBinding.ts","../src/core/bindGroups/BindGroup.ts","../src/core/bindings/TextureBinding.ts","../src/math/Mat4.ts","../src/core/objects3D/Object3D.ts","../src/core/textures/utils.ts","../src/core/textures/DOMTexture.ts","../src/core/bindGroups/TextureBindGroup.ts","../src/core/bindings/SamplerBinding.ts","../src/core/camera/Camera.ts","../src/core/samplers/Sampler.ts","../src/core/textures/Texture.ts","../src/core/materials/Material.ts","../src/core/materials/ComputeMaterial.ts","../src/core/computePasses/ComputePass.ts","../src/math/Box3.ts","../src/core/DOM/DOMFrustum.ts","../src/core/geometries/Geometry.ts","../src/core/geometries/IndexedGeometry.ts","../src/core/geometries/PlaneGeometry.ts","../src/core/materials/utils.ts","../src/core/shaders/chunks/default_projected_vs.wgsl.js","../src/core/shaders/chunks/default_vs.wgsl.js","../src/core/shaders/chunks/default_fs.wgsl.js","../src/core/materials/RenderMaterial.ts","../src/core/meshes/mixins/MeshBaseMixin.ts","../src/utils/CacheManager.ts","../src/core/meshes/FullscreenPlane.ts","../src/math/Mat3.ts","../src/core/objects3D/ProjectedObject3D.ts","../src/core/shaders/chunks/default_normal_fs.wgsl.js","../src/core/meshes/mixins/ProjectedMeshBaseMixin.ts","../src/core/meshes/Mesh.ts","../src/core/pipelines/PipelineEntry.ts","../src/core/shaders/chunks/get_output_position.wgsl.js","../src/core/shaders/chunks/get_normals.wgsl.js","../src/core/shaders/chunks/get_uv_cover.wgsl.js","../src/core/shaders/chunks/get_vertex_to_uv_coords.wgsl.js","../src/core/shaders/ShaderChunks.ts","../src/core/pipelines/RenderPipelineEntry.ts","../src/core/pipelines/ComputePipelineEntry.ts","../src/core/pipelines/PipelineManager.ts","../src/utils/ResizeManager.ts","../src/core/DOM/DOMElement.ts","../src/core/scenes/Scene.ts","../src/core/renderPasses/RenderPass.ts","../src/utils/TasksQueueManager.ts","../src/core/renderers/GPURenderer.ts","../src/core/renderers/GPUCameraRenderer.ts","../src/core/renderers/GPUDeviceManager.ts","../src/core/renderPasses/RenderTarget.ts","../src/core/shaders/chunks/default_pass_fs.wgsl.js","../src/core/renderPasses/ShaderPass.ts","../src/curtains/objects3D/DOMObject3D.ts","../src/curtains/meshes/DOMMesh.ts","../src/curtains/meshes/Plane.ts","../src/curtains/renderers/GPUCurtainsRenderer.ts","../src/utils/ScrollManager.ts","../src/curtains/GPUCurtains.ts","../src/extras/controls/OrbitControls.ts","../src/extras/geometries/BoxGeometry.ts","../src/extras/geometries/SphereGeometry.ts","../src/extras/meshes/PingPongPlane.ts","../src/extras/gltf/GLTFLoader.ts","../src/extras/gltf/GLTFScenesManager.ts","../src/extras/gltf/utils.ts","../src/extras/loaders/HDRLoader.ts","../src/utils/debug.ts"],"sourcesContent":["/**\n * Generate a unique universal id\n * @returns - unique universal id generated\n */\nexport const generateUUID = (): string => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8\n    return v.toString(16).toUpperCase()\n  })\n}\n\n/**\n * Turns a string into a camel case string\n * @param string - string to transform\n * @returns - camel case string created\n */\nexport const toCamelCase = (string: string): string => {\n  return string\n    .replace(/(?:^\\w|[A-Z]|\\b\\w)/g, (ltr, idx) => (idx === 0 ? ltr.toLowerCase() : ltr.toUpperCase()))\n    .replace(/\\s+/g, '')\n}\n\n/**\n * Turns a string into a kebab case string\n * @param string - string to transform\n * @returns - kebab case string created\n */\nexport const toKebabCase = (string: string): string => {\n  const camelCase = toCamelCase(string)\n  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1)\n}\n\nlet warningThrown = 0\n\n/**\n * Throw a console warning with the passed arguments\n * @param warning - warning to be thrown\n */\nexport const throwWarning = (warning: string) => {\n  if (warningThrown > 100) {\n    return\n  } else if (warningThrown === 100) {\n    console.warn('GPUCurtains: too many warnings thrown, stop logging.')\n  } else {\n    console.warn(warning)\n  }\n\n  warningThrown++\n}\n\n/**\n * Throw a javascript error with the passed arguments\n * @param error - error to be thrown\n */\nexport const throwError = (error: string) => {\n  throw new Error(error)\n}\n","import { throwError } from '../../utils/utils'\nimport { GPURenderer } from './GPURenderer'\nimport { GPUCameraRenderer } from './GPUCameraRenderer'\nimport { GPUCurtainsRenderer } from '../../curtains/renderers/GPUCurtainsRenderer'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/**\n * A Renderer could be either a {@link GPURenderer}, a {@link GPUCameraRenderer} or a {@link GPUCurtainsRenderer}\n * @type {Renderer}\n */\nexport type Renderer = GPUCurtainsRenderer | GPUCameraRenderer | GPURenderer\n/**\n * A CameraRenderer could be either a {@link GPUCameraRenderer} or a {@link GPUCurtainsRenderer}\n * @type {CameraRenderer}\n */\nexport type CameraRenderer = GPUCurtainsRenderer | GPUCameraRenderer\n\n/**\n * Format a renderer error based on given renderer, renderer type and object type\n * @param renderer - renderer that failed the test\n * @param rendererType - expected renderer type\n * @param type - object type\n */\nconst formatRendererError = (renderer: Renderer, rendererType = 'GPURenderer', type: string | null): void => {\n  const error = type\n    ? `Unable to create ${type} because the ${rendererType} is not defined: ${renderer}`\n    : `The ${rendererType} is not defined: ${renderer}`\n  throwError(error)\n}\n\n/**\n * Check if the given renderer is a {@link Renderer}\n * @param renderer - renderer to test\n * @param type - object type used to format the error if needed\n * @returns - the {@link Renderer} if correctly set\n */\nexport const isRenderer = (renderer: GPUCurtains | Renderer | undefined, type: string | null): Renderer => {\n  renderer = ((renderer && (renderer as GPUCurtains).renderer) || renderer) as Renderer\n\n  const isRenderer =\n    renderer &&\n    (renderer.type === 'GPURenderer' ||\n      renderer.type === 'GPUCameraRenderer' ||\n      renderer.type === 'GPUCurtainsRenderer')\n\n  if (!isRenderer) {\n    formatRendererError(renderer, 'GPURenderer', type)\n  }\n\n  return renderer\n}\n\n/**\n * Check if the given renderer is a {@link CameraRenderer}\n * @param renderer - renderer to test\n * @param type - object type used to format the error if needed\n * @returns - the {@link CameraRenderer} if correctly set\n */\nexport const isCameraRenderer = (\n  renderer: GPUCurtains | CameraRenderer | undefined,\n  type: string | null\n): CameraRenderer => {\n  renderer = ((renderer && (renderer as GPUCurtains).renderer) || renderer) as CameraRenderer\n\n  const isCameraRenderer =\n    renderer && (renderer.type === 'GPUCameraRenderer' || renderer.type === 'GPUCurtainsRenderer')\n\n  if (!isCameraRenderer) {\n    formatRendererError(renderer, 'GPUCameraRenderer', type)\n  }\n\n  return renderer\n}\n\n/**\n * Check if the given renderer is a {@link GPUCurtainsRenderer}\n * @param renderer - renderer to test\n * @param type - object type used to format the error if needed\n * @returns - the {@link GPUCurtainsRenderer} if correctly set\n */\nexport const isCurtainsRenderer = (\n  renderer: GPUCurtains | GPUCurtainsRenderer | undefined,\n  type: string | null\n): GPUCurtainsRenderer => {\n  renderer = ((renderer && (renderer as GPUCurtains).renderer) || renderer) as GPUCurtainsRenderer\n\n  const isCurtainsRenderer = renderer && renderer.type === 'GPUCurtainsRenderer'\n\n  if (!isCurtainsRenderer) {\n    formatRendererError(renderer, 'GPUCurtainsRenderer', type)\n  }\n\n  return renderer\n}\n\n/**\n * Helper to generate mips on the GPU\n * Taken from https://webgpufundamentals.org/webgpu/lessons/webgpu-importing-textures.html\n */\nexport const generateMips = (() => {\n  let sampler\n  let module\n  const pipelineByFormat = {}\n\n  return function generateMips(device: GPUDevice, texture: GPUTexture) {\n    if (!module) {\n      module = device.createShaderModule({\n        label: 'textured quad shaders for mip level generation',\n        code: `\n            struct VSOutput {\n              @builtin(position) position: vec4f,\n              @location(0) texcoord: vec2f,\n            };\n\n            @vertex fn vs(\n              @builtin(vertex_index) vertexIndex : u32\n            ) -> VSOutput {\n              let pos = array(\n\n                vec2f( 0.0,  0.0),  // center\n                vec2f( 1.0,  0.0),  // right, center\n                vec2f( 0.0,  1.0),  // center, top\n\n                // 2st triangle\n                vec2f( 0.0,  1.0),  // center, top\n                vec2f( 1.0,  0.0),  // right, center\n                vec2f( 1.0,  1.0),  // right, top\n              );\n\n              var vsOutput: VSOutput;\n              let xy = pos[vertexIndex];\n              vsOutput.position = vec4f(xy * 2.0 - 1.0, 0.0, 1.0);\n              vsOutput.texcoord = vec2f(xy.x, 1.0 - xy.y);\n              return vsOutput;\n            }\n\n            @group(0) @binding(0) var ourSampler: sampler;\n            @group(0) @binding(1) var ourTexture: texture_2d<f32>;\n\n            @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {\n              return textureSample(ourTexture, ourSampler, fsInput.texcoord);\n            }\n          `,\n      })\n\n      sampler = device.createSampler({\n        minFilter: 'linear',\n        magFilter: 'linear',\n      })\n    }\n\n    if (!pipelineByFormat[texture.format]) {\n      pipelineByFormat[texture.format] = device.createRenderPipeline({\n        label: 'Mip level generator pipeline',\n        layout: 'auto',\n        vertex: {\n          module,\n        },\n        fragment: {\n          module,\n          targets: [{ format: texture.format }],\n        },\n      })\n    }\n    const pipeline = pipelineByFormat[texture.format]\n\n    const encoder = device.createCommandEncoder({\n      label: 'Mip gen encoder',\n    })\n\n    let width = texture.width\n    let height = texture.height\n    let baseMipLevel = 0\n    while (width > 1 || height > 1) {\n      width = Math.max(1, (width / 2) | 0)\n      height = Math.max(1, (height / 2) | 0)\n\n      for (let layer = 0; layer < texture.depthOrArrayLayers; ++layer) {\n        const bindGroup = device.createBindGroup({\n          layout: pipeline.getBindGroupLayout(0),\n          entries: [\n            { binding: 0, resource: sampler },\n            {\n              binding: 1,\n              resource: texture.createView({\n                dimension: '2d',\n                baseMipLevel,\n                mipLevelCount: 1,\n                baseArrayLayer: layer,\n                arrayLayerCount: 1,\n              }),\n            },\n          ],\n        })\n\n        const renderPassDescriptor = {\n          label: 'Mip generation render pass',\n          colorAttachments: [\n            {\n              view: texture.createView({\n                dimension: '2d',\n                baseMipLevel: baseMipLevel + 1,\n                mipLevelCount: 1,\n                baseArrayLayer: layer,\n                arrayLayerCount: 1,\n              }),\n              loadOp: 'clear',\n              storeOp: 'store',\n            },\n          ],\n        }\n\n        const pass = encoder.beginRenderPass(renderPassDescriptor as GPURenderPassDescriptor)\n        pass.setPipeline(pipeline)\n        pass.setBindGroup(0, bindGroup)\n        pass.draw(6) // call our vertex shader 6 times\n        pass.end()\n      }\n      ++baseMipLevel\n    }\n\n    const commandBuffer = encoder.finish()\n    device.queue.submit([commandBuffer])\n  }\n})()\n","import { BufferBinding } from './BufferBinding'\nimport { TextureBinding } from './TextureBinding'\nimport { MaterialShadersType } from '../../types/Materials'\n\n/**\n * Map {@link MaterialShadersType | shaders types names} with actual {@link GPUShaderStageFlags | shaders visibility bitwise flags}.\n */\nconst bindingVisibilities: Map<MaterialShadersType, GPUShaderStageFlags> = new Map([\n  ['vertex', GPUShaderStage.VERTEX],\n  ['fragment', GPUShaderStage.FRAGMENT],\n  ['compute', GPUShaderStage.COMPUTE],\n])\n\n/**\n * Get the corresponding {@link GPUShaderStageFlags | shaders visibility bitwise flags} based on an array of {@link MaterialShadersType | shaders types names}.\n * @param visibilities - array of {@link MaterialShadersType | shaders types names}.\n * @returns - corresponding {@link GPUShaderStageFlags | shaders visibility bitwise flags}.\n */\nexport const getBindingVisibility = (visibilities: MaterialShadersType[] = []): GPUShaderStageFlags => {\n  return visibilities.reduce((acc, v) => {\n    return acc | bindingVisibilities.get(v)\n  }, 0)\n}\n\n/** Defines a typed array */\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array\n\n/** Defines a typed array constructor */\nexport type TypedArrayConstructor =\n  | Int8ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int16ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int32ArrayConstructor\n  | Uint32ArrayConstructor\n  | Float32ArrayConstructor\n  | Float64ArrayConstructor\n\n/** Defines the possible WGSL variable types */\nexport type WGSLVariableType = string // TODO 'mat4x4f', 'mat3x3f', 'vec3f', 'vec2f', 'f32' etc\n\n/**\n * Defines a {@link BufferLayout} object used to pad our {@link GPUBuffer} arrays\n */\nexport type BufferLayout = {\n  /** Number of elements hold by this variable type */\n  numElements: number\n  /** Required alignment by this variable type */\n  align: number\n  /** Size in bytes of this variable type */\n  size: number\n  /** Variable type */\n  type: WGSLVariableType\n  /** Typed array constructor required by this variable type */\n  View: TypedArrayConstructor\n  /** Pad values required by this variable type */\n  pad?: number[]\n}\n\n/** Object containing all buffer layouts */\nconst bufferLayouts: Record<string, BufferLayout> = {\n  i32: { numElements: 1, align: 4, size: 4, type: 'i32', View: Int32Array },\n  u32: { numElements: 1, align: 4, size: 4, type: 'u32', View: Uint32Array },\n  f32: { numElements: 1, align: 4, size: 4, type: 'f32', View: Float32Array },\n  f16: { numElements: 1, align: 2, size: 2, type: 'u16', View: Uint16Array },\n\n  vec2f: { numElements: 2, align: 8, size: 8, type: 'f32', View: Float32Array },\n  vec2i: { numElements: 2, align: 8, size: 8, type: 'i32', View: Int32Array },\n  vec2u: { numElements: 2, align: 8, size: 8, type: 'u32', View: Uint32Array },\n  vec2h: { numElements: 2, align: 4, size: 4, type: 'u16', View: Uint16Array },\n  vec3i: { numElements: 3, align: 16, size: 12, type: 'i32', View: Int32Array },\n  vec3u: { numElements: 3, align: 16, size: 12, type: 'u32', View: Uint32Array },\n  vec3f: { numElements: 3, align: 16, size: 12, type: 'f32', View: Float32Array },\n  vec3h: { numElements: 3, align: 8, size: 6, type: 'u16', View: Uint16Array },\n  vec4i: { numElements: 4, align: 16, size: 16, type: 'i32', View: Int32Array },\n  vec4u: { numElements: 4, align: 16, size: 16, type: 'u32', View: Uint32Array },\n  vec4f: { numElements: 4, align: 16, size: 16, type: 'f32', View: Float32Array },\n  vec4h: { numElements: 4, align: 8, size: 8, type: 'u16', View: Uint16Array },\n\n  // AlignOf(vecR)\tSizeOf(array<vecR, C>)\n  mat2x2f: { numElements: 4, align: 8, size: 16, type: 'f32', View: Float32Array },\n  mat2x2h: { numElements: 4, align: 4, size: 8, type: 'u16', View: Uint16Array },\n  mat3x2f: { numElements: 6, align: 8, size: 24, type: 'f32', View: Float32Array },\n  mat3x2h: { numElements: 6, align: 4, size: 12, type: 'u16', View: Uint16Array },\n  mat4x2f: { numElements: 8, align: 8, size: 32, type: 'f32', View: Float32Array },\n  mat4x2h: { numElements: 8, align: 4, size: 16, type: 'u16', View: Uint16Array },\n  mat2x3f: { numElements: 8, align: 16, size: 32, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat2x3h: { numElements: 8, align: 8, size: 16, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x3h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat4x3h: { numElements: 16, align: 8, size: 32, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat2x4f: { numElements: 8, align: 16, size: 32, type: 'f32', View: Float32Array },\n  mat2x4h: { numElements: 8, align: 8, size: 16, type: 'u16', View: Uint16Array },\n  mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n  mat3x4h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n  mat4x4f: { numElements: 16, align: 16, size: 64, type: 'f32', View: Float32Array },\n  mat4x4h: { numElements: 16, align: 8, size: 32, type: 'u16', View: Uint16Array },\n}\n\n// from https://github.com/greggman/webgpu-utils/blob/main/src/buffer-views.ts\n/**\n * Get the correct {@link BufferLayout | buffer layout} for given {@link WGSLVariableType | variable type}\n * @param bufferType - [{@link WGSLVariableType | variable type} to use\n * @returns - the ={@link BufferLayout | buffer layout}\n */\nexport const getBufferLayout = (bufferType: WGSLVariableType): BufferLayout => {\n  return bufferLayouts[bufferType]\n}\n\n/**\n * Get the correct WGSL variable declaration code fragment based on the given {@link BufferBinding}\n * @param binding - {@link BufferBinding} to use\n * @returns - WGSL variable declaration code fragment\n */\nexport const getBindingWGSLVarType = (binding: BufferBinding): string => {\n  return (() => {\n    switch (binding.bindingType) {\n      case 'storage':\n        return `var<${binding.bindingType}, ${binding.options.access}>`\n      case 'uniform':\n      default:\n        return 'var<uniform>'\n    }\n  })()\n}\n\n/**\n * Get the correct WGSL variable declaration code fragment based on the given {@link TextureBinding}\n * @param binding - {@link TextureBinding} to use\n * @returns - WGSL variable declaration code fragment\n */\nexport const getTextureBindingWGSLVarType = (binding: TextureBinding): string => {\n  if (binding.bindingType === 'externalTexture') {\n    return `var ${binding.name}: texture_external;`\n  }\n\n  return binding.bindingType === 'storage'\n    ? `var ${binding.name}: texture_storage_${binding.options.viewDimension.replace('-', '_')}<${\n        binding.options.format\n      }, ${binding.options.access}>;`\n    : binding.bindingType === 'depth'\n    ? `var ${binding.name}: texture_depth${\n        binding.options.multisampled ? '_multisampled' : ''\n      }_${binding.options.viewDimension.replace('-', '_')};`\n    : `var ${binding.name}: texture${\n        binding.options.multisampled ? '_multisampled' : ''\n      }_${binding.options.viewDimension.replace('-', '_')}<f32>;`\n}\n\n/**\n * Get the correct {@link GPUBindGroupLayout | bind group layout} resource type based on the given {@link core/bindings/Binding.BindingType | binding type}\n * @param binding - {@link BufferBinding | buffer binding} to use\n * @returns - {@link GPUBindGroupLayout | bind group layout} resource type\n */\nexport const getBindGroupLayoutBindingType = (binding: BufferBinding): GPUBufferBindingType => {\n  if (binding.bindingType === 'storage' && binding.options.access === 'read_write') {\n    return 'storage'\n  } else if (binding.bindingType === 'storage') {\n    return 'read-only-storage'\n  } else {\n    return 'uniform'\n  }\n}\n\n/**\n * Get the correct {@link GPUBindGroupLayout} resource type based on the given {@link core/bindings/Binding.BindingType | texture binding type}\n * @param binding - {@link TextureBinding | texture binding} to use\n * @returns - {@link GPUBindGroupLayout} resource type\n */\nexport const getBindGroupLayoutTextureBindingType = (\n  binding: TextureBinding\n): GPUTextureBindingLayout | GPUExternalTextureBindingLayout | GPUStorageTextureBindingLayout | null => {\n  return (() => {\n    switch (binding.bindingType) {\n      case 'externalTexture':\n        return { externalTexture: {} }\n      case 'storage':\n        return {\n          storageTexture: {\n            format: binding.options.format,\n            viewDimension: binding.options.viewDimension,\n          } as GPUStorageTextureBindingLayout,\n        }\n      case 'texture':\n        return {\n          texture: {\n            multisampled: binding.options.multisampled,\n            viewDimension: binding.options.viewDimension,\n            sampleType: binding.options.multisampled ? 'unfilterable-float' : 'float',\n          } as GPUTextureBindingLayout,\n        }\n      case 'depth':\n        return {\n          texture: {\n            multisampled: binding.options.multisampled,\n            viewDimension: binding.options.viewDimension,\n            sampleType: 'depth',\n          } as GPUTextureBindingLayout,\n        }\n      default:\n        return null\n    }\n  })()\n}\n\n/**\n * Get the correct {@link TextureBinding | texture binding} cache key.\n * @param binding - {@link TextureBinding | texture binding} to use\n * @returns - binding cache key\n */\nexport const getBindGroupLayoutTextureBindingCacheKey = (binding: TextureBinding): string => {\n  return (() => {\n    switch (binding.bindingType) {\n      case 'externalTexture':\n        return `externalTexture,${binding.visibility},`\n      case 'storage':\n        return `storageTexture,${binding.options.format},${binding.options.viewDimension},${binding.visibility},`\n      case 'texture':\n        return `texture,${binding.options.multisampled},${binding.options.viewDimension},${\n          binding.options.multisampled ? 'unfilterable-float' : 'float'\n        },${binding.visibility},`\n      case 'depth':\n        return `depthTexture,${binding.options.format},${binding.options.viewDimension},${binding.visibility},`\n      default:\n        return `${binding.visibility},`\n    }\n  })()\n}\n","import { toCamelCase } from '../../utils/utils'\r\nimport { MaterialShadersType } from '../../types/Materials'\r\nimport { TextureBinding } from './TextureBinding'\r\nimport { SamplerBinding } from './SamplerBinding'\r\nimport { getBindingVisibility } from './utils'\r\n\r\n/** Defines all kind of buffer binding types */\r\nexport type BufferBindingType = 'uniform' | 'storage'\r\n/** Defines all kind of texture binding types */\r\nexport type TextureBindingType = 'texture' | 'storage' | 'depth'\r\n/** Defines all kind of DOM texture binding types */\r\nexport type DOMTextureBindingType = 'externalTexture' | TextureBindingType\r\n/** Defines all kind of sampler binding types */\r\nexport type SamplerBindingType = 'sampler'\r\n/** Defines all kind of binding types  */\r\nexport type BindingType = BufferBindingType | DOMTextureBindingType | SamplerBindingType\r\n\r\n// see https://www.w3.org/TR/WGSL/#memory-access-mode\r\n/** Defines buffer binding memory access types (read only or read/write) */\r\nexport type BufferBindingMemoryAccessType = 'read' | 'read_write'\r\n/** Defines texture binding memory access types (read only, write only or read/write) */\r\nexport type BindingMemoryAccessType = BufferBindingMemoryAccessType | 'write'\r\n\r\n/**\r\n * Defines all kind of {@link Binding} that are related to textures or samplers\r\n */\r\nexport type TextureSamplerBindings = TextureBinding | SamplerBinding\r\n\r\n/**\r\n * An object defining all possible {@link Binding} class instancing parameters\r\n */\r\nexport interface BindingParams {\r\n  /** {@link Binding} label */\r\n  label?: string\r\n  /** {@link Binding} name/key */\r\n  name?: string\r\n  /** {@link BindingType | binding type} to use with this {@link Binding} */\r\n  bindingType?: BindingType\r\n  /** {@link Binding} variables shaders visibility as an array of {@link MaterialShadersType | shaders types names} */\r\n  visibility?: MaterialShadersType[]\r\n}\r\n\r\n/**\r\n * Used as a shell to build actual bindings upon, like {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}, {@link core/bindings/WritableBufferBinding.WritableBufferBinding | WritableBufferBinding}, {@link TextureBinding} and {@link SamplerBinding}.\r\n *\r\n * Ultimately the goal of a {@link Binding} element is to provide correct resources for {@link GPUBindGroupLayoutEntry} and {@link GPUBindGroupEntry}\r\n *\r\n * ## WGSL\r\n *\r\n * Each {@link Binding} creates its own WGSL code snippet variable declaration, using structured types or not.\r\n */\r\nexport class Binding {\r\n  /** The label of the {@link Binding} */\r\n  label: string\r\n  /** The name/key of the {@link Binding} */\r\n  name: string\r\n  /** The binding type of the {@link Binding} */\r\n  bindingType: BindingType\r\n  /** The visibility of the {@link Binding} in the shaders */\r\n  visibility: GPUShaderStageFlags\r\n  /** Options used to create this {@link Binding} */\r\n  options: BindingParams\r\n\r\n  /** Flag indicating whether we should recreate the parentMesh {@link core/bindGroups/BindGroup.BindGroup#bindGroup | bind group}, usually when a resource has changed */\r\n  shouldResetBindGroup: boolean\r\n  /** Flag indicating whether we should recreate the parentMesh {@link core/bindGroups/BindGroup.BindGroup#bindGroupLayout | GPU bind group layout}, usually when a resource layout has changed */\r\n  shouldResetBindGroupLayout: boolean\r\n\r\n  /** A cache key allowing to get / set bindings from the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#bufferBindings | device manager map cache}. Used for {@link core/bindings/BufferBinding.BufferBinding | BufferBinding} only at the moment. */\r\n  cacheKey: string\r\n\r\n  /**\r\n   * Binding constructor\r\n   * @param parameters - {@link BindingParams | parameters} used to create our {@link Binding}\r\n   */\r\n  constructor({\r\n    label = 'Uniform',\r\n    name = 'uniform',\r\n    bindingType = 'uniform',\r\n    visibility = ['vertex', 'fragment', 'compute'],\r\n  }: BindingParams) {\r\n    this.label = label\r\n    this.name = toCamelCase(name)\r\n    this.bindingType = bindingType\r\n\r\n    this.visibility = getBindingVisibility(visibility)\r\n\r\n    this.options = {\r\n      label,\r\n      name,\r\n      bindingType,\r\n      visibility,\r\n    }\r\n\r\n    this.shouldResetBindGroup = false\r\n    this.shouldResetBindGroupLayout = false\r\n\r\n    this.cacheKey = `${bindingType},${this.visibility},`\r\n  }\r\n}\r\n","/**\n * Really basic 2D vector class used for vector calculations\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Vector2.js\n * @see http://glmatrix.net/docs/vec2.js.html\n */\nexport class Vec2 {\n  /** The type of the {@link Vec2} */\n  type: string\n  /** X component of our {@link Vec2} */\n  private _x: number\n  /** Y component of our {@link Vec2} */\n  private _y: number\n\n  /** function assigned to the {@link onChange} callback */\n  _onChangeCallback?(): void\n\n  /**\n   * Vec2 constructor\n   * @param x - X component of our {@link Vec2}\n   * @param y - Y component of our {@link Vec2}\n   */\n  constructor(x = 0, y = x) {\n    this.type = 'Vec2'\n\n    this._x = x\n    this._y = y\n  }\n\n  /**\n   * Get the X component of the {@link Vec2}\n   */\n  get x(): number {\n    return this._x\n  }\n\n  /**\n   * Set the X component of the {@link Vec2}\n   * Can trigger {@link onChange} callback\n   * @param value - X component to set\n   */\n  set x(value: number) {\n    const changed = value !== this._x\n    this._x = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Get the Y component of the {@link Vec2}\n   */\n  get y(): number {\n    return this._y\n  }\n\n  /**\n   * Set the Y component of the {@link Vec2}\n   * Can trigger {@link onChange} callback\n   * @param value - Y component to set\n   */\n  set y(value: number) {\n    const changed = value !== this._y\n    this._y = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Called when at least one component of the {@link Vec2} has changed\n   * @param callback - callback to run when at least one component of the {@link Vec2} has changed\n   * @returns - our {@link Vec2}\n   */\n  onChange(callback: () => void): Vec2 {\n    if (callback) {\n      this._onChangeCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Set the {@link Vec2} from values\n   * @param x - new X component to set\n   * @param y - new Y component to set\n   * @returns - this {@link Vec2} after being set\n   */\n  set(x = 0, y = x): Vec2 {\n    this.x = x\n    this.y = y\n\n    return this\n  }\n\n  /**\n   * Add a {@link Vec2} to this {@link Vec2}\n   * @param vector - {@link Vec2} to add\n   * @returns - this {@link Vec2} after addition\n   */\n  add(vector: Vec2 = new Vec2()): Vec2 {\n    this.x += vector.x\n    this.y += vector.y\n\n    return this\n  }\n\n  /**\n   * Add a scalar to all the components of this {@link Vec2}\n   * @param value - number to add\n   * @returns - this {@link Vec2} after addition\n   */\n  addScalar(value = 0): Vec2 {\n    this.x += value\n    this.y += value\n\n    return this\n  }\n\n  /**\n   * Subtract a {@link Vec2} from this {@link Vec2}\n   * @param vector - {@link Vec2} to subtract\n   * @returns - this {@link Vec2} after subtraction\n   */\n  sub(vector: Vec2 = new Vec2()): Vec2 {\n    this.x -= vector.x\n    this.y -= vector.y\n\n    return this\n  }\n\n  /**\n   * Subtract a scalar to all the components of this {@link Vec2}\n   * @param value - number to subtract\n   * @returns - this {@link Vec2} after subtraction\n   */\n  subScalar(value = 0): Vec2 {\n    this.x -= value\n    this.y -= value\n\n    return this\n  }\n\n  /**\n   * Multiply a {@link Vec2} with this {@link Vec2}\n   * @param vector - {@link Vec2} to multiply with\n   * @returns - this {@link Vec2} after multiplication\n   */\n  multiply(vector: Vec2 = new Vec2(1)): Vec2 {\n    this.x *= vector.x\n    this.y *= vector.y\n\n    return this\n  }\n\n  /**\n   * Multiply all components of this {@link Vec2} with a scalar\n   * @param value - number to multiply with\n   * @returns - this {@link Vec2} after multiplication\n   */\n  multiplyScalar(value = 1): Vec2 {\n    this.x *= value\n    this.y *= value\n\n    return this\n  }\n\n  /**\n   * Divide a {@link Vec2} with this {@link Vec2}\n   * @param vector - {@link Vec2} to divide with\n   * @returns - this {@link Vec2} after division\n   */\n  divide(vector: Vec2 = new Vec2(1)): Vec2 {\n    this.x /= vector.x\n    this.y /= vector.y\n\n    return this\n  }\n\n  /**\n   * Divide all components of this {@link Vec2} with a scalar\n   * @param value - number to divide with\n   * @returns - this {@link Vec2} after division\n   */\n  divideScalar(value = 1): Vec2 {\n    this.x /= value\n    this.y /= value\n\n    return this\n  }\n\n  /**\n   * Copy a {@link Vec2} into this {@link Vec2}\n   * @param vector - {@link Vec2} to copy\n   * @returns - this {@link Vec2} after copy\n   */\n  copy(vector: Vec2 = new Vec2()): Vec2 {\n    this.x = vector.x\n    this.y = vector.y\n\n    return this\n  }\n\n  /**\n   * Clone this {@link Vec2}\n   * @returns - cloned {@link Vec2}\n   */\n  clone(): Vec2 {\n    return new Vec2(this.x, this.y)\n  }\n\n  /**\n   * Apply max values to this {@link Vec2} components\n   * @param vector - {@link Vec2} representing max values\n   * @returns - {@link Vec2} with max values applied\n   */\n  max(vector: Vec2 = new Vec2()): Vec2 {\n    this.x = Math.max(this.x, vector.x)\n    this.y = Math.max(this.y, vector.y)\n\n    return this\n  }\n\n  /**\n   * Apply min values to this {@link Vec2} components\n   * @param vector - {@link Vec2} representing min values\n   * @returns - {@link Vec2} with min values applied\n   */\n  min(vector: Vec2 = new Vec2()): Vec2 {\n    this.x = Math.min(this.x, vector.x)\n    this.y = Math.min(this.y, vector.y)\n\n    return this\n  }\n\n  /**\n   * Clamp this {@link Vec2} components by min and max {@link Vec2} vectors\n   * @param min - minimum {@link Vec2} components to compare with\n   * @param max - maximum {@link Vec2} components to compare with\n   * @returns - clamped {@link Vec2}\n   */\n  clamp(min: Vec2 = new Vec2(), max: Vec2 = new Vec2()): Vec2 {\n    this.x = Math.max(min.x, Math.min(max.x, this.x))\n    this.y = Math.max(min.y, Math.min(max.y, this.y))\n\n    return this\n  }\n\n  /**\n   * Check if 2 {@link Vec2} are equal\n   * @param vector - {@link Vec2} to compare\n   * @returns - whether the {@link Vec2} are equals or not\n   */\n  equals(vector: Vec2 = new Vec2()): boolean {\n    return this.x === vector.x && this.y === vector.y\n  }\n\n  /**\n   * Get the square length of this {@link Vec2}\n   * @returns - square length of this {@link Vec2}\n   */\n  lengthSq(): number {\n    return this.x * this.x + this.y * this.y\n  }\n\n  /**\n   * Get the length of this {@link Vec2}\n   * @returns - length of this {@link Vec2}\n   */\n  length(): number {\n    return Math.sqrt(this.lengthSq())\n  }\n\n  /**\n   * Normalize this {@link Vec2}\n   * @returns - normalized {@link Vec2}\n   */\n  normalize(): Vec2 {\n    // normalize\n    let len = this.x * this.x + this.y * this.y\n    if (len > 0) {\n      len = 1 / Math.sqrt(len)\n    }\n    this.x *= len\n    this.y *= len\n\n    return this\n  }\n\n  /**\n   * Calculate the dot product of 2 {@link Vec2}\n   * @param vector - {@link Vec2} to use for dot product\n   * @returns - dot product of the 2 {@link Vec2}\n   */\n  dot(vector: Vec2 = new Vec2()): number {\n    return this.x * vector.x + this.y * vector.y\n  }\n\n  /**\n   * Calculate the linear interpolation of this {@link Vec2} by given {@link Vec2} and alpha, where alpha is the percent distance along the line\n   * @param vector - {@link Vec2} to interpolate towards\n   * @param [alpha=1] - interpolation factor in the [0, 1] interval\n   * @returns - this {@link Vec2} after linear interpolation\n   */\n  lerp(vector: Vec2 = new Vec2(), alpha = 1): Vec2 {\n    this.x += (vector.x - this.x) * alpha\n    this.y += (vector.y - this.y) * alpha\n\n    return this\n  }\n}\n","import { Vec3 } from './Vec3'\nimport { Mat4 } from './Mat4'\n\n/** Defines all possible rotations axis orders */\nexport type AxisOrder = 'XYZ' | 'XZY' | 'YXZ' | 'YZX' | 'ZXY' | 'ZYX'\n\n/**\n * Really basic quaternion class used for 3D rotation calculations\n * @see https://github.com/mrdoosb/three.js/blob/dev/src/math/Quaternion.js\n */\nexport class Quat {\n  /** The type of the {@link Quat} */\n  type: string\n  /** Our quaternion array */\n  elements: Float32Array\n  /** Rotation axis order */\n  axisOrder: AxisOrder\n\n  /**\n   * Quat constructor\n   * @param [elements] - initial array to use\n   * @param [axisOrder='XYZ'] - axis order to use\n   */\n  constructor(elements: Float32Array = new Float32Array([0, 0, 0, 1]), axisOrder: AxisOrder = 'XYZ') {\n    this.type = 'Quat'\n    this.elements = elements\n    // rotation axis order\n    this.axisOrder = axisOrder\n  }\n\n  /**\n   * Sets the {@link Quat} values from an array\n   * @param array - an array of at least 4 elements\n   * @returns - this {@link Quat} after being set\n   */\n  setFromArray(array: Float32Array | number[] = new Float32Array([0, 0, 0, 1])): Quat {\n    this.elements[0] = array[0]\n    this.elements[1] = array[1]\n    this.elements[2] = array[2]\n    this.elements[3] = array[3]\n\n    return this\n  }\n\n  /**\n   * Sets the {@link Quat} axis order\n   * @param axisOrder - axis order to use\n   * @returns - this {@link Quat} after axis order has been set\n   */\n  setAxisOrder(axisOrder: AxisOrder | string = 'XYZ'): Quat {\n    // force uppercase for strict equality tests\n    axisOrder = axisOrder.toUpperCase()\n\n    switch (axisOrder) {\n      case 'XYZ':\n      case 'YXZ':\n      case 'ZXY':\n      case 'ZYX':\n      case 'YZX':\n      case 'XZY':\n        this.axisOrder = axisOrder\n        break\n      default:\n        // apply a default axis order\n        this.axisOrder = 'XYZ'\n    }\n\n    return this\n  }\n\n  /**\n   * Copy a {@link Quat} into this {@link Quat}\n   * @param quaternion - {@link Quat} to copy\n   * @returns - this {@link Quat} after copy\n   */\n  copy(quaternion: Quat = new Quat()): Quat {\n    this.elements = quaternion.elements\n    this.axisOrder = quaternion.axisOrder\n\n    return this\n  }\n\n  /**\n   * Clone a {@link Quat}\n   * @returns - cloned {@link Quat}\n   */\n  clone(): Quat {\n    return new Quat().copy(this)\n  }\n\n  /**\n   * Check if 2 {@link Quat} are equal\n   * @param quaternion - {@link Quat} to check against\n   * @returns - whether the {@link Quat} are equal or not\n   */\n  equals(quaternion: Quat = new Quat()): boolean {\n    return (\n      this.elements[0] === quaternion.elements[0] &&\n      this.elements[1] === quaternion.elements[1] &&\n      this.elements[2] === quaternion.elements[2] &&\n      this.elements[3] === quaternion.elements[3] &&\n      this.axisOrder === quaternion.axisOrder\n    )\n  }\n\n  /**\n   * Sets a rotation {@link Quat} using Euler angles {@link Vec3 | vector} and its axis order\n   * @param vector - rotation {@link Vec3 | vector} to set our {@link Quat} from\n   * @returns - {@link Quat} after having applied the rotation\n   */\n  setFromVec3(vector: Vec3): Quat {\n    const ax = vector.x * 0.5\n    const ay = vector.y * 0.5\n    const az = vector.z * 0.5\n\n    const cosx = Math.cos(ax)\n    const cosy = Math.cos(ay)\n    const cosz = Math.cos(az)\n    const sinx = Math.sin(ax)\n    const siny = Math.sin(ay)\n    const sinz = Math.sin(az)\n\n    // XYZ order\n    if (this.axisOrder === 'XYZ') {\n      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz\n    } else if (this.axisOrder === 'YXZ') {\n      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz\n    } else if (this.axisOrder === 'ZXY') {\n      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz\n    } else if (this.axisOrder === 'ZYX') {\n      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz\n    } else if (this.axisOrder === 'YZX') {\n      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz\n    } else if (this.axisOrder === 'XZY') {\n      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz\n    }\n\n    return this\n  }\n\n  /**\n   * Set a {@link Quat} from a rotation axis {@link Vec3 | vector} and an angle\n   * @param axis - normalized {@link Vec3 | vector} around which to rotate\n   * @param angle - angle (in radians) to rotate\n   * @returns - {@link Quat} after having applied the rotation\n   */\n  setFromAxisAngle(axis: Vec3, angle = 0): Quat {\n    // https://github.com/mrdoob/three.js/blob/dev/src/math/Quaternion.js#L275\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    // assumes axis is normalized\n\n    const halfAngle = angle / 2,\n      s = Math.sin(halfAngle)\n\n    this.elements[0] = axis.x * s\n    this.elements[1] = axis.y * s\n    this.elements[2] = axis.z * s\n    this.elements[3] = Math.cos(halfAngle)\n\n    return this\n  }\n\n  /**\n   * Set a {@link Quat} from a rotation {@link Mat4 | matrix}\n   * @param matrix - rotation {@link Mat4 | matrix} to use\n   * @returns - {@link Quat} after having applied the rotation\n   */\n  setFromRotationMatrix(matrix: Mat4): Quat {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const te = matrix.elements,\n      m11 = te[0],\n      m12 = te[4],\n      m13 = te[8],\n      m21 = te[1],\n      m22 = te[5],\n      m23 = te[9],\n      m31 = te[2],\n      m32 = te[6],\n      m33 = te[10],\n      trace = m11 + m22 + m33\n\n    if (trace > 0) {\n      const s = 0.5 / Math.sqrt(trace + 1.0)\n\n      this.elements[3] = 0.25 / s\n      this.elements[0] = (m32 - m23) * s\n      this.elements[1] = (m13 - m31) * s\n      this.elements[2] = (m21 - m12) * s\n    } else if (m11 > m22 && m11 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33)\n\n      this.elements[3] = (m32 - m23) / s\n      this.elements[0] = 0.25 * s\n      this.elements[1] = (m12 + m21) / s\n      this.elements[2] = (m13 + m31) / s\n    } else if (m22 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33)\n\n      this.elements[3] = (m13 - m31) / s\n      this.elements[0] = (m12 + m21) / s\n      this.elements[1] = 0.25 * s\n      this.elements[2] = (m23 + m32) / s\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22)\n\n      this.elements[3] = (m21 - m12) / s\n      this.elements[0] = (m13 + m31) / s\n      this.elements[1] = (m23 + m32) / s\n      this.elements[2] = 0.25 * s\n    }\n\n    return this\n  }\n}\n","import { Mat4 } from './Mat4'\nimport { Quat } from './Quat'\nimport { Camera } from '../core/camera/Camera'\n\n/**\n * Really basic 3D vector class used for vector calculations\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Vector3.js\n * @see http://glmatrix.net/docs/vec3.js.html\n */\nexport class Vec3 {\n  /** The type of the {@link Vec3} */\n  type: string\n  /** X component of our {@link Vec3} */\n  private _x: number\n  /** Y component of our {@link Vec3} */\n  private _y: number\n  /** Z component of our {@link Vec3} */\n  private _z: number\n\n  /** function assigned to the {@link onChange} callback */\n  _onChangeCallback?(): void\n\n  /**\n   * Vec3 constructor\n   * @param x - X component of our {@link Vec3}\n   * @param y - Y component of our {@link Vec3}\n   * @param z - Z component of our {@link Vec3}\n   */\n  constructor(x = 0, y = x, z = x) {\n    this.type = 'Vec3'\n\n    this._x = x\n    this._y = y\n    this._z = z\n  }\n\n  /**\n   * Get the X component of the {@link Vec3}\n   */\n  get x(): number {\n    return this._x\n  }\n\n  /**\n   * Set the X component of the {@link Vec3}\n   * Can trigger {@link onChange} callback\n   * @param value - X component to set\n   */\n  set x(value: number) {\n    const changed = value !== this._x\n    this._x = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Get the Y component of the {@link Vec3}\n   */\n  get y(): number {\n    return this._y\n  }\n\n  /**\n   * Set the Y component of the {@link Vec3}\n   * Can trigger {@link onChange} callback\n   * @param value - Y component to set\n   */\n  set y(value: number) {\n    const changed = value !== this._y\n    this._y = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Get the Z component of the {@link Vec3}\n   */\n  get z(): number {\n    return this._z\n  }\n\n  /**\n   * Set the Z component of the {@link Vec3}\n   * Can trigger {@link onChange} callback\n   * @param value - Z component to set\n   */\n  set z(value: number) {\n    const changed = value !== this._z\n    this._z = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Called when at least one component of the {@link Vec3} has changed\n   * @param callback - callback to run when at least one component of the {@link Vec3} has changed\n   * @returns - our {@link Vec3}\n   */\n  onChange(callback: () => void): Vec3 {\n    if (callback) {\n      this._onChangeCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Set the {@link Vec3} from values\n   * @param x - new X component to set\n   * @param y - new Y component to set\n   * @param z - new Z component to set\n   * @returns - this {@link Vec3} after being set\n   */\n  set(x = 0, y = x, z = x): Vec3 {\n    this.x = x\n    this.y = y\n    this.z = z\n\n    return this\n  }\n\n  /**\n   * Add a {@link Vec3} to this {@link Vec3}\n   * @param vector - {@link Vec3} to add\n   * @returns - this {@link Vec3} after addition\n   */\n  add(vector: Vec3 = new Vec3()): Vec3 {\n    this.x += vector.x\n    this.y += vector.y\n    this.z += vector.z\n\n    return this\n  }\n\n  /**\n   * Add a scalar to all the components of this {@link Vec3}\n   * @param value - number to add\n   * @returns - this {@link Vec3} after addition\n   */\n  addScalar(value = 0): Vec3 {\n    this.x += value\n    this.y += value\n    this.z += value\n\n    return this\n  }\n\n  /**\n   * Subtract a {@link Vec3} from this {@link Vec3}\n   * @param vector - {@link Vec3} to subtract\n   * @returns - this {@link Vec3} after subtraction\n   */\n  sub(vector: Vec3 = new Vec3()): Vec3 {\n    this.x -= vector.x\n    this.y -= vector.y\n    this.z -= vector.z\n\n    return this\n  }\n\n  /**\n   * Subtract a scalar to all the components of this {@link Vec3}\n   * @param value - number to subtract\n   * @returns - this {@link Vec3} after subtraction\n   */\n  subScalar(value = 0): Vec3 {\n    this.x -= value\n    this.y -= value\n    this.z -= value\n\n    return this\n  }\n\n  /**\n   * Multiply a {@link Vec3} with this {@link Vec3}\n   * @param vector - {@link Vec3} to multiply with\n   * @returns - this {@link Vec3} after multiplication\n   */\n  multiply(vector: Vec3 = new Vec3(1)): Vec3 {\n    this.x *= vector.x\n    this.y *= vector.y\n    this.z *= vector.z\n\n    return this\n  }\n\n  /**\n   * Multiply all components of this {@link Vec3} with a scalar\n   * @param value - number to multiply with\n   * @returns - this {@link Vec3} after multiplication\n   */\n  multiplyScalar(value = 1): Vec3 {\n    this.x *= value\n    this.y *= value\n    this.z *= value\n\n    return this\n  }\n\n  /**\n   * Divide a {@link Vec3} with this {@link Vec3}\n   * @param vector - {@link Vec3} to divide with\n   * @returns - this {@link Vec3} after division\n   */\n  divide(vector: Vec3 = new Vec3(1)): Vec3 {\n    this.x /= vector.x\n    this.y /= vector.y\n    this.z /= vector.z\n\n    return this\n  }\n\n  /**\n   * Divide all components of this {@link Vec3} with a scalar\n   * @param value - number to divide with\n   * @returns - this {@link Vec3} after division\n   */\n  divideScalar(value = 1): Vec3 {\n    this.x /= value\n    this.y /= value\n    this.z /= value\n\n    return this\n  }\n\n  /**\n   * Copy a {@link Vec3} into this {@link Vec3}\n   * @param vector - {@link Vec3} to copy\n   * @returns - this {@link Vec3} after copy\n   */\n  copy(vector: Vec3 = new Vec3()): Vec3 {\n    this.x = vector.x\n    this.y = vector.y\n    this.z = vector.z\n\n    return this\n  }\n\n  /**\n   * Clone this {@link Vec3}\n   * @returns - cloned {@link Vec3}\n   */\n  clone(): Vec3 {\n    return new Vec3(this.x, this.y, this.z)\n  }\n\n  /**\n   * Apply max values to this {@link Vec3} components\n   * @param vector - {@link Vec3} representing max values\n   * @returns - {@link Vec3} with max values applied\n   */\n  max(vector: Vec3 = new Vec3()): Vec3 {\n    this.x = Math.max(this.x, vector.x)\n    this.y = Math.max(this.y, vector.y)\n    this.z = Math.max(this.z, vector.z)\n\n    return this\n  }\n\n  /**\n   * Apply min values to this {@link Vec3} components\n   * @param vector - {@link Vec3} representing min values\n   * @returns - {@link Vec3} with min values applied\n   */\n  min(vector: Vec3 = new Vec3()): Vec3 {\n    this.x = Math.min(this.x, vector.x)\n    this.y = Math.min(this.y, vector.y)\n    this.z = Math.min(this.z, vector.z)\n\n    return this\n  }\n\n  /**\n   * Clamp this {@link Vec3} components by min and max {@link Vec3} vectors\n   * @param min - minimum {@link Vec3} components to compare with\n   * @param max - maximum {@link Vec3} components to compare with\n   * @returns - clamped {@link Vec3}\n   */\n  clamp(min: Vec3 = new Vec3(), max: Vec3 = new Vec3()): Vec3 {\n    this.x = Math.max(min.x, Math.min(max.x, this.x))\n    this.y = Math.max(min.y, Math.min(max.y, this.y))\n    this.z = Math.max(min.z, Math.min(max.z, this.z))\n\n    return this\n  }\n\n  /**\n   * Check if 2 {@link Vec3} are equal\n   * @param vector - {@link Vec3} to compare\n   * @returns - whether the {@link Vec3} are equals or not\n   */\n  equals(vector: Vec3 = new Vec3()): boolean {\n    return this.x === vector.x && this.y === vector.y && this.z === vector.z\n  }\n\n  /**\n   * Get the square length of this {@link Vec3}\n   * @returns - square length of this {@link Vec3}\n   */\n  lengthSq(): number {\n    return this.x * this.x + this.y * this.y + this.z * this.z\n  }\n\n  /**\n   * Get the length of this {@link Vec3}\n   * @returns - length of this {@link Vec3}\n   */\n  length(): number {\n    return Math.sqrt(this.lengthSq())\n  }\n\n  /**\n   * Get the euclidian distance between this {@link Vec3} and another {@link Vec3}\n   * @param vector - {@link Vec3} to use for distance calculation\n   * @returns - euclidian distance\n   */\n  distance(vector: Vec3 = new Vec3()): number {\n    return Math.hypot(vector.x - this.x, vector.y - this.y, vector.z - this.z)\n  }\n\n  /**\n   * Normalize this {@link Vec3}\n   * @returns - normalized {@link Vec3}\n   */\n  normalize(): Vec3 {\n    // normalize\n    let len = this.lengthSq()\n    if (len > 0) {\n      len = 1 / Math.sqrt(len)\n    }\n    this.x *= len\n    this.y *= len\n    this.z *= len\n\n    return this\n  }\n\n  /**\n   * Calculate the dot product of 2 {@link Vec3}\n   * @param vector - {@link Vec3} to use for dot product\n   * @returns - dot product of the 2 {@link Vec3}\n   */\n  dot(vector: Vec3 = new Vec3()): number {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z\n  }\n\n  /**\n   * Get the cross product of this {@link Vec3} with another {@link Vec3}\n   * @param vector - {@link Vec3} to use for cross product\n   * @returns - this {@link Vec3} after cross product\n   */\n  cross(vector: Vec3 = new Vec3()): Vec3 {\n    return this.crossVectors(this, vector)\n  }\n\n  /**\n   * Set this {@link Vec3} as the result of the cross product of two {@link Vec3}\n   * @param a - first {@link Vec3} to use for cross product\n   * @param b - second {@link Vec3} to use for cross product\n   * @returns - this {@link Vec3} after cross product\n   */\n  crossVectors(a: Vec3 = new Vec3(), b: Vec3 = new Vec3()): Vec3 {\n    const ax = a.x,\n      ay = a.y,\n      az = a.z\n    const bx = b.x,\n      by = b.y,\n      bz = b.z\n\n    this.x = ay * bz - az * by\n    this.y = az * bx - ax * bz\n    this.z = ax * by - ay * bx\n\n    return this\n  }\n\n  /**\n   * Calculate the linear interpolation of this {@link Vec3} by given {@link Vec3} and alpha, where alpha is the percent distance along the line\n   * @param vector - {@link Vec3} to interpolate towards\n   * @param alpha - interpolation factor in the [0, 1] interval\n   * @returns - this {@link Vec3} after linear interpolation\n   */\n  lerp(vector: Vec3 = new Vec3(), alpha = 1): Vec3 {\n    this.x += (vector.x - this.x) * alpha\n    this.y += (vector.y - this.y) * alpha\n    this.z += (vector.z - this.z) * alpha\n\n    return this\n  }\n\n  /**\n   * Apply a {@link Mat4 | matrix} to a {@link Vec3}\n   * Useful to convert a position {@link Vec3} from plane local world to webgl space using projection view matrix for example\n   * Source code from: http://glmatrix.net/docs/vec3.js.html\n   * @param matrix - {@link Mat4 | matrix} to use\n   * @returns - this {@link Vec3} after {@link Mat4 | matrix} application\n   */\n  applyMat4(matrix: Mat4): Vec3 {\n    const x = this._x,\n      y = this._y,\n      z = this._z\n    const mArray = matrix.elements\n\n    let w = mArray[3] * x + mArray[7] * y + mArray[11] * z + mArray[15]\n    w = w || 1\n\n    this.x = (mArray[0] * x + mArray[4] * y + mArray[8] * z + mArray[12]) / w\n    this.y = (mArray[1] * x + mArray[5] * y + mArray[9] * z + mArray[13]) / w\n    this.z = (mArray[2] * x + mArray[6] * y + mArray[10] * z + mArray[14]) / w\n\n    return this\n  }\n\n  /**\n   * Set this {@link Vec3} to the translation component of a {@link Mat4 | matrix}.\n   * @param matrix - {@link Mat4 | matrix} to use\n   * @returns - this {@link Vec3} after {@link Mat4 | matrix} application.\n   */\n  setFromMatrixPosition(matrix: Mat4) {\n    const e = matrix.elements\n\n    this.x = e[12]\n    this.y = e[13]\n    this.z = e[14]\n\n    return this\n  }\n\n  /**\n   * Apply a {@link Quat | quaternion} (rotation in 3D space) to this {@link Vec3}\n   * @param quaternion - {@link Quat | quaternion} to use\n   * @returns - this {@link Vec3} with the transformation applied\n   */\n  applyQuat(quaternion: Quat = new Quat()): Vec3 {\n    const x = this.x,\n      y = this.y,\n      z = this.z\n    const qx = quaternion.elements[0],\n      qy = quaternion.elements[1],\n      qz = quaternion.elements[2],\n      qw = quaternion.elements[3]\n\n    // calculate quat * vector\n\n    const ix = qw * x + qy * z - qz * y\n    const iy = qw * y + qz * x - qx * z\n    const iz = qw * z + qx * y - qy * x\n    const iw = -qx * x - qy * y - qz * z\n\n    // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx\n\n    return this\n  }\n\n  /**\n   * Rotate a {@link Vec3} around and axis by a given angle\n   * @param axis - normalized {@link Vec3} around which to rotate\n   * @param angle - angle (in radians) to rotate\n   * @param quaternion - optional {@link Quat | quaternion} to use for rotation computations\n   * @returns - this {@link Vec3} with the rotation applied\n   */\n  applyAxisAngle(axis = new Vec3(), angle = 0, quaternion = new Quat()) {\n    // https://github.com/mrdoob/three.js/blob/master/src/math/Vector3.js#L212\n    return this.applyQuat(quaternion.setFromAxisAngle(axis, angle))\n  }\n\n  /**\n   * Project a 3D coordinate {@link Vec3} to a 2D coordinate {@link Vec3}\n   * @param camera - {@link Camera} to use for projection\n   * @returns - projected {@link Vec3}\n   */\n  project(camera: Camera): Vec3 {\n    this.applyMat4(camera.viewMatrix).applyMat4(camera.projectionMatrix)\n    return this\n  }\n\n  /**\n   * Unproject a 2D coordinate {@link Vec3} to 3D coordinate {@link Vec3}\n   * @param camera - {@link Camera} to use for projection\n   * @returns - unprojected {@link Vec3}\n   */\n  unproject(camera: Camera): Vec3 {\n    this.applyMat4(camera.projectionMatrix.getInverse()).applyMat4(camera.modelMatrix)\n    return this\n  }\n}\n","import { BufferLayout, getBufferLayout, TypedArray, WGSLVariableType } from '../utils'\r\nimport { Vec2 } from '../../../math/Vec2'\r\nimport { Vec3 } from '../../../math/Vec3'\r\nimport { Quat } from '../../../math/Quat'\r\nimport { Mat4 } from '../../../math/Mat4'\r\nimport { throwWarning } from '../../../utils/utils'\r\nimport { Mat3 } from '../../../math/Mat3'\r\nimport { InputValue } from '../../../types/BindGroups'\r\n\r\n/** Number of slots per row */\r\nexport const slotsPerRow = 4\r\n/** Number of bytes per slot */\r\nexport const bytesPerSlot = 4\r\n/** Number of bytes per row */\r\nexport const bytesPerRow = slotsPerRow * bytesPerSlot\r\n\r\n/**\r\n * Defines a position in our array buffer with a row index and a byte index\r\n */\r\nexport interface BufferElementAlignmentPosition {\r\n  /** row index of that position */\r\n  row: number\r\n  /** byte index of that position */\r\n  byte: number\r\n}\r\n\r\n/**\r\n * Defines our {@link BufferElement} alignment:\r\n * Keep track of an entry start and end row and bytes indexes (16 bytes per row)\r\n */\r\nexport interface BufferElementAlignment {\r\n  /** The row and byte indexes at which this {@link BufferElement} starts */\r\n  start: BufferElementAlignmentPosition\r\n  /** The row and byte indexes at which this {@link BufferElement} ends */\r\n  end: BufferElementAlignmentPosition\r\n}\r\n\r\n/**\r\n * Parameters used to create a {@link BufferElement}\r\n */\r\nexport interface BufferElementParams {\r\n  /** The name of the {@link BufferElement} */\r\n  name: string\r\n  /** The key of the {@link BufferElement} */\r\n  key: string\r\n  /** The WGSL variable type of the {@link BufferElement} */\r\n  type: WGSLVariableType\r\n}\r\n\r\n/**\r\n * Used to handle each {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array} view and data layout alignment.\r\n * Compute the exact alignment offsets needed to fill an {@link ArrayBuffer} that will be sent to a {@link GPUBuffer}, based on an input type and value.\r\n * Also update the view array at the correct offset.\r\n *\r\n * So all our struct need to be packed into our arrayBuffer using a precise layout.\r\n * They will be stored in rows, each row made of 4 slots and each slots made of 4 bytes. Depending on the binding element type, its row and slot may vary and we may have to insert empty padded values.\r\n * All in all it looks like that:<br>\r\n * <pre>\r\n *          slot 0    slot 1    slot 2    slot 3\r\n * row 0 | _ _ _ _ | _ _ _ _ | _ _ _ _ | _ _ _ _ |\r\n * row 1 | _ _ _ _ | _ _ _ _ | _ _ _ _ | _ _ _ _ |\r\n * row 2 | _ _ _ _ | _ _ _ _ | _ _ _ _ | _ _ _ _ |\r\n * </pre>\r\n * see https://webgpufundamentals.org/webgpu/lessons/resources/wgsl-offset-computer.html\r\n */\r\nexport class BufferElement {\r\n  /** The name of the {@link BufferElement} */\r\n  name: string\r\n  /** The WGSL variable type of the {@link BufferElement} */\r\n  type: WGSLVariableType\r\n  /** The key of the {@link BufferElement} */\r\n  key: string\r\n\r\n  /** {@link BufferLayout} used to fill the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array} at the right offsets */\r\n  bufferLayout: BufferLayout\r\n\r\n  /**\r\n   * Object defining exactly at which place a binding should be inserted into the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\r\n   */\r\n  alignment: BufferElementAlignment\r\n\r\n  /** Array containing the {@link BufferElement} values */\r\n  view?: TypedArray\r\n\r\n  /** Function assigned to set the {@link view} values */\r\n  setValue: (value: InputValue) => void | null\r\n\r\n  /**\r\n   * BufferElement constructor\r\n   * @param parameters - {@link BufferElementParams | parameters} used to create our {@link BufferElement}\r\n   */\r\n  constructor({ name, key, type = 'f32' }: BufferElementParams) {\r\n    this.name = name\r\n    this.key = key\r\n    this.type = type\r\n\r\n    this.bufferLayout = getBufferLayout(this.type.replace('array', '').replace('<', '').replace('>', ''))\r\n\r\n    // set init alignment\r\n    this.alignment = {\r\n      start: {\r\n        row: 0,\r\n        byte: 0,\r\n      },\r\n      end: {\r\n        row: 0,\r\n        byte: 0,\r\n      },\r\n    }\r\n\r\n    this.setValue = null\r\n  }\r\n\r\n  /**\r\n   * Get the total number of rows used by this {@link BufferElement}\r\n   * @readonly\r\n   */\r\n  get rowCount(): number {\r\n    return this.alignment.end.row - this.alignment.start.row + 1\r\n  }\r\n\r\n  /**\r\n   * Get the total number of bytes used by this {@link BufferElement} based on {@link BufferElementAlignment | alignment} start and end offsets\r\n   * @readonly\r\n   */\r\n  get byteCount(): number {\r\n    return Math.abs(this.endOffset - this.startOffset) + 1\r\n  }\r\n\r\n  /**\r\n   * Get the total number of bytes used by this {@link BufferElement}, including final padding\r\n   * @readonly\r\n   */\r\n  get paddedByteCount(): number {\r\n    return (this.alignment.end.row + 1) * bytesPerRow\r\n  }\r\n\r\n  /**\r\n   * Get the offset (i.e. byte index) at which our {@link BufferElement} starts\r\n   * @readonly\r\n   */\r\n  get startOffset(): number {\r\n    return this.getByteCountAtPosition(this.alignment.start)\r\n  }\r\n\r\n  /**\r\n   * Get the array offset (i.e. array index) at which our {@link BufferElement} starts\r\n   * @readonly\r\n   */\r\n  get startOffsetToIndex(): number {\r\n    return this.startOffset / bytesPerSlot\r\n  }\r\n\r\n  /**\r\n   * Get the offset (i.e. byte index) at which our {@link BufferElement} ends\r\n   * @readonly\r\n   */\r\n  get endOffset(): number {\r\n    return this.getByteCountAtPosition(this.alignment.end)\r\n  }\r\n\r\n  /**\r\n   * Get the array offset (i.e. array index) at which our {@link BufferElement} ends\r\n   * @readonly\r\n   */\r\n  get endOffsetToIndex(): number {\r\n    return Math.floor(this.endOffset / bytesPerSlot)\r\n  }\r\n\r\n  /**\r\n   * Get the position at given offset (i.e. byte index)\r\n   * @param offset - byte index to use\r\n   */\r\n  getPositionAtOffset(offset = 0): BufferElementAlignmentPosition {\r\n    return {\r\n      row: Math.floor(offset / bytesPerRow),\r\n      byte: offset % bytesPerRow,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the number of bytes at a given {@link BufferElementAlignmentPosition | position}\r\n   * @param position - {@link BufferElementAlignmentPosition | position} from which to count\r\n   * @returns - byte count at the given {@link BufferElementAlignmentPosition | position}\r\n   */\r\n  getByteCountAtPosition(position: BufferElementAlignmentPosition = { row: 0, byte: 0 }): number {\r\n    return position.row * bytesPerRow + position.byte\r\n  }\r\n\r\n  /**\r\n   * Check that a {@link BufferElementAlignmentPosition#byte | byte position} does not overflow its max value (16)\r\n   * @param position - {@link BufferElementAlignmentPosition | position}\r\n   * @returns - updated {@link BufferElementAlignmentPosition | position}\r\n   */\r\n  applyOverflowToPosition(\r\n    position: BufferElementAlignmentPosition = { row: 0, byte: 0 }\r\n  ): BufferElementAlignmentPosition {\r\n    if (position.byte > bytesPerRow - 1) {\r\n      const overflow = position.byte % bytesPerRow\r\n      position.row += Math.floor(position.byte / bytesPerRow)\r\n      position.byte = overflow\r\n    }\r\n\r\n    return position\r\n  }\r\n\r\n  /**\r\n   * Get the number of bytes between two {@link BufferElementAlignmentPosition | positions}\r\n   * @param p1 - first {@link BufferElementAlignmentPosition | position}\r\n   * @param p2 - second {@link BufferElementAlignmentPosition | position}\r\n   * @returns - number of bytes\r\n   */\r\n  getByteCountBetweenPositions(\r\n    p1: BufferElementAlignmentPosition = { row: 0, byte: 0 },\r\n    p2: BufferElementAlignmentPosition = { row: 0, byte: 0 }\r\n  ): number {\r\n    return Math.abs(this.getByteCountAtPosition(p2) - this.getByteCountAtPosition(p1))\r\n  }\r\n\r\n  /**\r\n   * Compute the right alignment (i.e. start and end rows and bytes) given the size and align properties and the next available {@link BufferElementAlignmentPosition | position}\r\n   * @param nextPositionAvailable - next {@link BufferElementAlignmentPosition | position} at which we should insert this element\r\n   * @returns - computed {@link BufferElementAlignment | alignment}\r\n   */\r\n  getElementAlignment(\r\n    nextPositionAvailable: BufferElementAlignmentPosition = { row: 0, byte: 0 }\r\n  ): BufferElementAlignment {\r\n    const alignment = {\r\n      start: nextPositionAvailable,\r\n      end: nextPositionAvailable,\r\n    }\r\n\r\n    const { size, align } = this.bufferLayout\r\n\r\n    // check the alignment, i.e. even if there's enough space for our binding\r\n    // we might have to pad the slot because some types need a specific alignment\r\n    if (nextPositionAvailable.byte % align !== 0) {\r\n      nextPositionAvailable.byte += nextPositionAvailable.byte % align\r\n    }\r\n\r\n    if (size <= bytesPerRow && nextPositionAvailable.byte + size > bytesPerRow) {\r\n      // in the case of a binding that could fit on one row\r\n      // but we don't have space on the current row for this binding element\r\n      // go to next row\r\n      nextPositionAvailable.row += 1\r\n      nextPositionAvailable.byte = 0\r\n    } else if (size > bytesPerRow && nextPositionAvailable.byte > bytesPerRow) {\r\n      // there's also the case where the binding size is too big\r\n      // and we have already padded it above\r\n      // just go to next row as well\r\n      nextPositionAvailable.row += 1\r\n      nextPositionAvailable.byte = 0\r\n    }\r\n\r\n    alignment.end = {\r\n      row: nextPositionAvailable.row + Math.ceil(size / bytesPerRow) - 1,\r\n      byte: nextPositionAvailable.byte + (size % bytesPerRow === 0 ? bytesPerRow - 1 : (size % bytesPerRow) - 1), // end of row ? then it ends on slot (bytesPerRow - 1)\r\n    }\r\n\r\n    // now final check, if end slot has overflown\r\n    alignment.end = this.applyOverflowToPosition(alignment.end)\r\n\r\n    return alignment\r\n  }\r\n\r\n  /**\r\n   * Set the {@link BufferElementAlignment | alignment} from a {@link BufferElementAlignmentPosition | position}\r\n   * @param position - {@link BufferElementAlignmentPosition | position} at which to start inserting the values in the {@link !core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\r\n   */\r\n  setAlignmentFromPosition(position: BufferElementAlignmentPosition = { row: 0, byte: 0 }) {\r\n    this.alignment = this.getElementAlignment(position)\r\n  }\r\n\r\n  /**\r\n   * Set the {@link BufferElementAlignment | alignment} from an offset (byte count)\r\n   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\r\n   */\r\n  setAlignment(startOffset = 0) {\r\n    this.setAlignmentFromPosition(this.getPositionAtOffset(startOffset))\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view}\r\n   * @param arrayBuffer - the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\r\n   * @param arrayView - the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view}\r\n   */\r\n  setView(arrayBuffer: ArrayBuffer, arrayView: DataView) {\r\n    this.view = new this.bufferLayout.View(\r\n      arrayBuffer,\r\n      this.startOffset,\r\n      this.byteCount / this.bufferLayout.View.BYTES_PER_ELEMENT\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view} value from a float or an int\r\n   * @param value - float or int to use\r\n   */\r\n  setValueFromFloat(value: number) {\r\n    this.view[0] = value as number\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view} value from a {@link Vec2} or an array\r\n   * @param value - {@link Vec2} or array to use\r\n   */\r\n  setValueFromVec2(value: Vec2 | number[]) {\r\n    this.view[0] = (value as Vec2).x ?? value[0] ?? 0\r\n    this.view[1] = (value as Vec2).y ?? value[1] ?? 0\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view} value from a {@link Vec3} or an array\r\n   * @param value - {@link Vec3} or array to use\r\n   */\r\n  setValueFromVec3(value: Vec3 | number[]) {\r\n    this.view[0] = (value as Vec3).x ?? value[0] ?? 0\r\n    this.view[1] = (value as Vec3).y ?? value[1] ?? 0\r\n    this.view[2] = (value as Vec3).z ?? value[2] ?? 0\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view} value from a {@link Mat4} or {@link Quat}\r\n   * @param value - {@link Mat4} or {@link Quat} to use\r\n   */\r\n  setValueFromMat4OrQuat(value: Mat4 | Quat) {\r\n    this.view.set(value.elements)\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view} value from a {@link Mat3}\r\n   * @param value - {@link Mat3} to use\r\n   */\r\n  setValueFromMat3(value: Mat3) {\r\n    // mat3x3f are padded!\r\n    this.setValueFromArrayWithPad(value.elements)\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view} value from an array\r\n   * @param value - array to use\r\n   */\r\n  setValueFromArray(value: number[] | TypedArray) {\r\n    this.view.set(value as number[] | TypedArray)\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view} value from an array with pad applied\r\n   * @param value - array to use\r\n   */\r\n  setValueFromArrayWithPad(value: number[] | TypedArray) {\r\n    for (\r\n      let i = 0, offset = 0;\r\n      i < this.view.length;\r\n      i += this.bufferLayout.pad[0] + this.bufferLayout.pad[1], offset++\r\n    ) {\r\n      for (let j = 0; j < this.bufferLayout.pad[0]; j++) {\r\n        this.view[i + j] = value[i + j - offset]\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the {@link view} based on the new value\r\n   * @param value - new value to use\r\n   */\r\n  update(value: InputValue) {\r\n    if (!this.setValue) {\r\n      this.setValue = ((value) => {\r\n        if (this.type === 'f32' || this.type === 'u32' || this.type === 'i32') {\r\n          return this.setValueFromFloat\r\n        } else if (this.type === 'vec2f') {\r\n          return this.setValueFromVec2\r\n        } else if (this.type === 'vec3f') {\r\n          return this.setValueFromVec3\r\n        } else if (this.type === 'mat3x3f') {\r\n          return (value as Mat3).elements ? this.setValueFromMat3 : this.setValueFromArrayWithPad\r\n        } else if ((value as Quat | Mat4).elements) {\r\n          return this.setValueFromMat4OrQuat\r\n        } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {\r\n          if (!this.bufferLayout.pad) {\r\n            return this.setValueFromArray\r\n          } else {\r\n            return this.setValueFromArrayWithPad\r\n          }\r\n        } else {\r\n          throwWarning(`${this.constructor.name}: value passed to ${this.name} cannot be used: ${value}`)\r\n        }\r\n      })(value)\r\n    }\r\n\r\n    this.setValue(value)\r\n  }\r\n\r\n  /**\r\n   * Extract the data corresponding to this specific {@link BufferElement} from a {@link Float32Array} holding the {@link GPUBuffer} data of the parentMesh {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}\r\n   * @param result - {@link Float32Array} holding {@link GPUBuffer} data\r\n   * @returns - extracted data from the {@link Float32Array}\r\n   */\r\n  extractDataFromBufferResult(result: Float32Array) {\r\n    return result.slice(this.startOffsetToIndex, this.endOffsetToIndex)\r\n  }\r\n}\r\n","import { BufferElement, BufferElementParams, bytesPerSlot } from './BufferElement'\r\nimport { TypedArray } from '../utils'\r\n\r\n/**\r\n * Parameters used to create a {@link BufferArrayElement}\r\n */\r\nexport interface BufferArrayElementParams extends BufferElementParams {\r\n  /** Initial length of the input {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array} */\r\n  arrayLength: number\r\n}\r\n\r\n/**\r\n * Used to handle specific array {@link core/bindings/BufferBinding.BufferBinding | BufferBinding} types\r\n */\r\nexport class BufferArrayElement extends BufferElement {\r\n  /** Initial length of the input {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array} */\r\n  arrayLength: number\r\n  /** Total number of elements (i.e. {@link arrayLength} divided by {@link core/bindings/utils.BufferLayout | buffer layout} number of elements */\r\n  numElements: number\r\n  /** Number of bytes in the {@link ArrayBuffer} between two elements {@link startOffset} */\r\n  arrayStride: number\r\n\r\n  /**\r\n   * BufferArrayElement constructor\r\n   * @param parameters - {@link BufferArrayElementParams | parameters} used to create our {@link BufferArrayElement}\r\n   */\r\n  constructor({ name, key, type = 'f32', arrayLength = 1 }: BufferArrayElementParams) {\r\n    super({ name, key, type })\r\n\r\n    this.arrayLength = arrayLength\r\n    this.numElements = Math.ceil(this.arrayLength / this.bufferLayout.numElements)\r\n  }\r\n\r\n  /**\r\n   * Get the array stride between two elements of the array, in indices\r\n   * @readonly\r\n   */\r\n  get arrayStrideToIndex(): number {\r\n    return this.arrayStride / bytesPerSlot\r\n  }\r\n\r\n  /**\r\n   * Set the {@link core/bindings/bufferElements/BufferElement.BufferElementAlignment | alignment}\r\n   * To compute how arrays are packed, we get the second item alignment as well and use it to calculate the arrayStride between two array elements. Using the arrayStride and the total number of elements, we can easily get the end alignment position.\r\n   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array buffer}\r\n   */\r\n  setAlignment(startOffset = 0) {\r\n    super.setAlignment(startOffset)\r\n\r\n    // repeat for a second element to know how things are laid out\r\n    const nextAlignment = this.getElementAlignment(this.getPositionAtOffset(this.endOffset + 1))\r\n    this.arrayStride = this.getByteCountBetweenPositions(this.alignment.end, nextAlignment.end)\r\n\r\n    this.alignment.end = this.getPositionAtOffset(this.endOffset + this.arrayStride * (this.numElements - 1))\r\n  }\r\n\r\n  /**\r\n   * Set the strided {@link view} value from an array\r\n   * @param value - array to use\r\n   */\r\n  setValueFromArray(value: number[] | TypedArray) {\r\n    let valueIndex = 0\r\n\r\n    const viewLength = this.byteCount / this.bufferLayout.View.BYTES_PER_ELEMENT\r\n    // arrayStride is our view length divided by the number of elements in our array\r\n    const stride = Math.ceil(viewLength / this.numElements)\r\n\r\n    for (let i = 0; i < this.numElements; i++) {\r\n      for (let j = 0; j < this.bufferLayout.numElements; j++) {\r\n        this.view[j + i * stride] = value[valueIndex]\r\n\r\n        valueIndex++\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { BufferArrayElement, BufferArrayElementParams } from './BufferArrayElement'\r\nimport { InputValue } from '../../../types/BindGroups'\r\n\r\n/**\r\n * Used to compute alignment when dealing with arrays of Struct\r\n */\r\nexport class BufferInterleavedArrayElement extends BufferArrayElement {\r\n  /** Corresponding {@link DataView} set function based on {@link view} type */\r\n  viewSetFunction: DataView['setInt32'] | DataView['setUint16'] | DataView['setUint32'] | DataView['setFloat32']\r\n\r\n  /**\r\n   * BufferInterleavedArrayElement constructor\r\n   * @param parameters - {@link BufferArrayElementParams | parameters} used to create our {@link BufferInterleavedArrayElement}\r\n   */\r\n  constructor({ name, key, type = 'f32', arrayLength = 1 }: BufferArrayElementParams) {\r\n    super({ name, key, type, arrayLength })\r\n\r\n    this.arrayStride = 1\r\n\r\n    this.arrayLength = arrayLength\r\n    this.numElements = Math.ceil(this.arrayLength / this.bufferLayout.numElements)\r\n  }\r\n\r\n  /**\r\n   * Get the total number of slots used by this {@link BufferInterleavedArrayElement} based on buffer layout size and total number of elements\r\n   * @readonly\r\n   */\r\n  get byteCount(): number {\r\n    return this.bufferLayout.size * this.numElements\r\n  }\r\n\r\n  /**\r\n   * Set the {@link core/bindings/bufferElements/BufferElement.BufferElementAlignment | alignment}\r\n   * To compute how arrays are packed, we need to compute the arrayStride between two elements beforehand and pass it here. Using the arrayStride and the total number of elements, we can easily get the end alignment position.\r\n   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\r\n   * @param stride - Stride in the {@link ArrayBuffer} between two elements of the array\r\n   */\r\n  setAlignment(startOffset = 0, stride = 0) {\r\n    this.alignment = this.getElementAlignment(this.getPositionAtOffset(startOffset))\r\n\r\n    this.arrayStride = stride\r\n\r\n    this.alignment.end = this.getPositionAtOffset(this.endOffset + stride * (this.numElements - 1))\r\n  }\r\n\r\n  /**\r\n   * Set the {@link view} and {@link viewSetFunction}\r\n   * @param arrayBuffer - the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}\r\n   * @param arrayView - the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view}\r\n   */\r\n  setView(arrayBuffer: ArrayBuffer, arrayView: DataView) {\r\n    // our view will be a simple typed array, not linked to the array buffer\r\n    this.view = new this.bufferLayout.View(this.bufferLayout.numElements * this.numElements)\r\n\r\n    // but our viewSetFunction is linked to the array view\r\n    this.viewSetFunction = ((arrayView) => {\r\n      switch (this.bufferLayout.View) {\r\n        case Int32Array:\r\n          return arrayView.setInt32.bind(arrayView) as DataView['setInt32']\r\n        case Uint16Array:\r\n          return arrayView.setUint16.bind(arrayView) as DataView['setUint16']\r\n        case Uint32Array:\r\n          return arrayView.setUint32.bind(arrayView) as DataView['setUint32']\r\n        case Float32Array:\r\n        default:\r\n          return arrayView.setFloat32.bind(arrayView) as DataView['setFloat32']\r\n      }\r\n    })(arrayView)\r\n  }\r\n\r\n  /**\r\n   * Update the {@link view} based on the new value, and then update the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view} using sub arrays\r\n   * @param value - new value to use\r\n   */\r\n  update(value: InputValue) {\r\n    super.update(value)\r\n\r\n    // now use our viewSetFunction to fill the array view with interleaved alignment\r\n    for (let i = 0; i < this.numElements; i++) {\r\n      const subarray = this.view.subarray(\r\n        i * this.bufferLayout.numElements,\r\n        i * this.bufferLayout.numElements + this.bufferLayout.numElements\r\n      )\r\n\r\n      const startByteOffset = this.startOffset + i * this.arrayStride\r\n\r\n      // view set function need to be called for each subarray entry, so loop over subarray entries\r\n      subarray.forEach((value, index) => {\r\n        this.viewSetFunction(startByteOffset + index * this.bufferLayout.View.BYTES_PER_ELEMENT, value, true)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract the data corresponding to this specific {@link BufferInterleavedArrayElement} from a {@link Float32Array} holding the {@link GPUBuffer} data of the parentMesh {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}\r\n   * @param result - {@link Float32Array} holding {@link GPUBuffer} data\r\n   */\r\n  extractDataFromBufferResult(result: Float32Array) {\r\n    const interleavedResult = new Float32Array(this.arrayLength)\r\n    for (let i = 0; i < this.numElements; i++) {\r\n      const resultOffset = this.startOffsetToIndex + i * this.arrayStrideToIndex\r\n\r\n      for (let j = 0; j < this.bufferLayout.numElements; j++) {\r\n        interleavedResult[i * this.bufferLayout.numElements + j] = result[resultOffset + j]\r\n      }\r\n    }\r\n    return interleavedResult\r\n  }\r\n}\r\n","// buffers bitwise flags\r\nimport { BufferBindingType } from '../bindings/Binding'\r\n\r\n/**  Defines all kinds of allowed buffer usages as camel case strings. */\r\nexport type BufferUsageKeys =\r\n  | 'copySrc'\r\n  | 'copyDst'\r\n  | 'index'\r\n  | 'indirect'\r\n  | 'mapRead'\r\n  | 'mapWrite'\r\n  | 'queryResolve'\r\n  | 'vertex'\r\n  | BufferBindingType\r\n\r\n/**\r\n * Map {@link BufferUsageKeys | buffer usage names} with actual {@link GPUBufferUsageFlags | buffer usage bitwise flags}.\r\n */\r\nconst bufferUsages: Map<BufferUsageKeys, GPUBufferUsageFlags> = new Map([\r\n  ['copySrc', GPUBufferUsage.COPY_SRC],\r\n  ['copyDst', GPUBufferUsage.COPY_DST],\r\n  ['index', GPUBufferUsage.INDEX],\r\n  ['indirect', GPUBufferUsage.INDIRECT],\r\n  ['mapRead', GPUBufferUsage.MAP_READ],\r\n  ['mapWrite', GPUBufferUsage.MAP_WRITE],\r\n  ['queryResolve', GPUBufferUsage.QUERY_RESOLVE],\r\n  ['storage', GPUBufferUsage.STORAGE],\r\n  ['uniform', GPUBufferUsage.UNIFORM],\r\n  ['vertex', GPUBufferUsage.VERTEX],\r\n])\r\n\r\n/**\r\n * Get the corresponding {@link GPUBufferUsageFlags | buffer usage bitwise flags} based on an array of {@link BufferUsageKeys | buffer usage names}.\r\n * @param usages - array of {@link BufferUsageKeys | buffer usage names}.\r\n * @returns - corresponding {@link GPUBufferUsageFlags | buffer usage bitwise flags}.\r\n */\r\nexport const getBufferUsages = (usages: BufferUsageKeys[] = []): GPUBufferUsageFlags => {\r\n  return usages.reduce((acc, v) => {\r\n    return acc | bufferUsages.get(v)\r\n  }, 0)\r\n}\r\n","import { generateUUID } from '../../utils/utils'\r\nimport { BufferUsageKeys, getBufferUsages } from './utils'\r\n\r\n/**\r\n * Parameters used to create a {@link Buffer}.\r\n */\r\nexport interface BufferParams extends Partial<Omit<GPUBufferDescriptor, 'usage'>> {\r\n  /** Allowed usages for the {@link Buffer#GPUBuffer | GPU buffer} as an array of {@link BufferUsageKeys | buffer usages names} */\r\n  usage?: BufferUsageKeys[]\r\n}\r\n\r\n/**\r\n * Used as a wrapper around {@link GPUBuffer}.\r\n *\r\n * Useful to keep tracks of all the {@link GPUBuffer} created thanks to the {@link uuid} property.\r\n */\r\nexport class Buffer {\r\n  /** The type of the {@link Buffer} */\r\n  type: string\r\n  /** The universal unique id of the {@link Buffer} */\r\n  uuid: string\r\n  /** Options used to create this {@link Buffer}, also used as {@link GPUBufferDescriptor} */\r\n  options: GPUBufferDescriptor\r\n\r\n  /** The actual {@link GPUBuffer} after having been created. */\r\n  GPUBuffer: null | GPUBuffer\r\n\r\n  /** A Set to store this {@link Buffer} consumers (usually {@link core/geometries/Geometry.Geometry#uuid | Geometry uuid} or {@link core/bindGroups/BindGroup.BindGroup#uuid | BindGroup uuid}) */\r\n  consumers: Set<string>\r\n\r\n  /**\r\n   * Buffer constructor\r\n   * @param parameters - {@link GPUBufferDescriptor | parameters} used to create our Buffer\r\n   */\r\n  constructor(\r\n    {\r\n      label = 'Buffer',\r\n      size = 0,\r\n      usage = ['copySrc', 'copyDst'],\r\n      mappedAtCreation = false,\r\n    }: BufferParams = {} as BufferParams\r\n  ) {\r\n    this.type = 'Buffer'\r\n\r\n    this.reset()\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    this.consumers = new Set()\r\n\r\n    this.options = {\r\n      label,\r\n      size,\r\n      usage: getBufferUsages(usage),\r\n      mappedAtCreation,\r\n    }\r\n  }\r\n\r\n  /** Reset the {@link GPUBuffer} value to `null`. */\r\n  reset() {\r\n    this.GPUBuffer = null\r\n  }\r\n\r\n  /** Allow to dynamically set the size of the {@link GPUBuffer}. */\r\n  set size(value: number) {\r\n    this.options.size = value\r\n  }\r\n\r\n  /**\r\n   * Create a {@link GPUBuffer} based on the descriptor stored in the {@link options | Buffer options}.\r\n   * @param renderer - {@link core/renderers/GPURenderer.GPURenderer | renderer} used to create the {@link GPUBuffer}.\r\n   * @param options - optional way to update the {@link options} previously set before creating the {@link GPUBuffer}.\r\n   */\r\n  createBuffer(renderer, options: BufferParams = {}) {\r\n    const { usage, ...staticOptions } = options\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      ...staticOptions,\r\n      ...(usage !== undefined && { usage: getBufferUsages(usage) }),\r\n    }\r\n\r\n    this.setBuffer(renderer.createBuffer(this))\r\n  }\r\n\r\n  /**\r\n   * Set the {@link GPUBuffer}. This allows to use a {@link Buffer} with a {@link GPUBuffer} created separately.\r\n   * @param GPUBuffer - GPU buffer to use.\r\n   */\r\n  setBuffer(GPUBuffer: GPUBuffer) {\r\n    this.GPUBuffer = GPUBuffer\r\n  }\r\n\r\n  /**\r\n   * Copy an {@link Buffer#GPUBuffer | Buffer GPUBuffer} and its {@link options} into this {@link Buffer}.\r\n   * @param buffer - {@link Buffer} to use for the copy.\r\n   * @param destroyPreviousBuffer - whether to destroy the previous {@link Buffer} before the copy.\r\n   */\r\n  copy(buffer: Buffer, destroyPreviousBuffer: boolean = false) {\r\n    if (destroyPreviousBuffer) {\r\n      this.destroy()\r\n    }\r\n\r\n    this.options = buffer.options\r\n    this.GPUBuffer = buffer.GPUBuffer\r\n    this.consumers = new Set([...this.consumers, ...buffer.consumers])\r\n  }\r\n\r\n  /**\r\n   * Map the {@link GPUBuffer} and put a copy of the data into a {@link Float32Array}.\r\n   * @async\r\n   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data.\r\n   */\r\n  async mapBufferAsync() {\r\n    if (!this.GPUBuffer || this.GPUBuffer.mapState !== 'unmapped') return new Float32Array(0)\r\n\r\n    await this.GPUBuffer.mapAsync(GPUMapMode.READ)\r\n    const result = new Float32Array(this.GPUBuffer.getMappedRange().slice(0))\r\n    this.GPUBuffer.unmap()\r\n\r\n    return result\r\n  }\r\n\r\n  /**\r\n   * Destroy the {@link GPUBuffer} and {@link reset} its value.\r\n   */\r\n  destroy() {\r\n    this.GPUBuffer?.destroy()\r\n    this.reset()\r\n    this.consumers.clear()\r\n  }\r\n}\r\n","import { Binding, BindingParams, BufferBindingMemoryAccessType, BufferBindingType } from './Binding'\r\nimport { getBindGroupLayoutBindingType, getBindingWGSLVarType, getBufferLayout, TypedArray } from './utils'\r\nimport { throwWarning, toCamelCase, toKebabCase } from '../../utils/utils'\r\nimport { Vec2 } from '../../math/Vec2'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { Input, InputBase, InputValue } from '../../types/BindGroups'\r\nimport { BufferElement } from './bufferElements/BufferElement'\r\nimport { BufferArrayElement } from './bufferElements/BufferArrayElement'\r\nimport { BufferInterleavedArrayElement } from './bufferElements/BufferInterleavedArrayElement'\r\nimport { Buffer, BufferParams } from '../buffers/Buffer'\r\n\r\n/**\r\n * Defines a {@link BufferBinding} input object that can set a value and run a callback function when this happens\r\n */\r\nexport interface BufferBindingInput extends InputBase {\r\n  /** Original {@link InputValue | input value} */\r\n  _value: InputValue\r\n\r\n  /** Get the {@link InputValue | input value} */\r\n  get value(): InputValue\r\n\r\n  /** Set the {@link InputValue | input value} */\r\n  set value(value: InputValue)\r\n\r\n  /** Whether the {@link InputValue | input value} has changed and we should update the {@link BufferBinding#arrayBuffer | buffer binding array} */\r\n  shouldUpdate: boolean\r\n\r\n  /** {@link BufferBindingInput} name */\r\n  name: string\r\n}\r\n\r\n/**\r\n * Base parameters used to create a {@link BufferBinding}\r\n */\r\nexport interface BufferBindingBaseParams {\r\n  /** Whether this {@link BufferBinding} should use structured WGSL variables */\r\n  useStruct?: boolean\r\n  /** {@link BufferBinding} memory access types (read only or read/write) */\r\n  access?: BufferBindingMemoryAccessType\r\n  /** Object containing one or multiple {@link Input | inputs} describing the structure of the {@link BufferBinding} */\r\n  struct?: Record<string, Input>\r\n  /** Allowed usages for the {@link BufferBinding#buffer} as an array of {@link core/buffers/utils.BufferUsageKeys | buffer usages names} */\r\n  usage?: BufferParams['usage']\r\n}\r\n\r\n/**\r\n * Parameters used to create a {@link BufferBinding}\r\n */\r\nexport interface BufferBindingParams extends BindingParams, BufferBindingBaseParams {\r\n  /** The binding type of the {@link BufferBinding} */\r\n  bindingType?: BufferBindingType\r\n}\r\n\r\n/** All allowed {@link BufferElement | buffer elements} */\r\nexport type AllowedBufferElement = BufferElement | BufferArrayElement | BufferInterleavedArrayElement\r\n\r\n/**\r\n * Used to format {@link BufferBindingParams#struct | uniforms or storages struct inputs} and create a single typed array that will hold all those inputs values. The array needs to be correctly padded depending on every value type, so it can be safely used as a GPUBuffer input.<br>\r\n * It will also create WGSL Structs and variables according to the BufferBindings inputs parameters.<br>\r\n * The WGSL structs and variables declaration may vary based on the input types, especially if there's one or more arrays involved (i.e. `array<f32>`, `array<vec3f>` etc.).\r\n *\r\n * @example\r\n * ```javascript\r\n * // create a GPU buffer binding\r\n * const bufferBinding = new BufferBinding({\r\n *   name: 'params', // name of the WGSL object\r\n *   bindingType: 'uniform', // should be 'storage' for large arrays\r\n *   struct: {\r\n *     opacity: {\r\n *       type: 'f32',\r\n *       value: 1,\r\n *     },\r\n *     mousePosition: {\r\n *       type: 'vec2f',\r\n *       value: new Vec2(),\r\n *     },\r\n *   },\r\n * })\r\n * ```\r\n */\r\nexport class BufferBinding extends Binding {\r\n  /** The binding type of the {@link BufferBinding} */\r\n  bindingType: BufferBindingType\r\n  /** Flag to indicate whether this {@link BufferBinding} {@link bufferElements | buffer elements} should be packed in a single structured object or if each one of them should be a separate binding. */\r\n  useStruct: boolean\r\n  /** All the {@link BufferBinding} data inputs */\r\n  inputs: Record<string, BufferBindingInput>\r\n\r\n  /** Flag to indicate whether one of the {@link inputs} value has changed and we need to update the GPUBuffer linked to the {@link arrayBuffer} array */\r\n  shouldUpdate: boolean\r\n\r\n  /** An array describing how each corresponding {@link inputs} should be inserted into our {@link arrayView} array */\r\n  bufferElements: AllowedBufferElement[]\r\n\r\n  /** Total size of our {@link arrayBuffer} array in bytes */\r\n  arrayBufferSize: number\r\n  /** Array buffer that will be sent to the {@link GPUBuffer} */\r\n  arrayBuffer: ArrayBuffer\r\n  /** Data view of our {@link arrayBuffer | array buffer} */\r\n  arrayView: DataView\r\n\r\n  /** The {@link Buffer} holding the {@link GPUBuffer}  */\r\n  buffer: Buffer\r\n\r\n  /** A string to append to our shaders code describing the WGSL structure representing this {@link BufferBinding} */\r\n  wgslStructFragment: string\r\n  /** An array of strings to append to our shaders code declaring all the WGSL variables representing this {@link BufferBinding} */\r\n  wgslGroupFragment: string[]\r\n  /** Options used to create this {@link BufferBinding} */\r\n  options: BufferBindingParams\r\n\r\n  /**\r\n   * BufferBinding constructor\r\n   * @param parameters - {@link BufferBindingParams | parameters} used to create our BufferBindings\r\n   */\r\n  constructor({\r\n    label = 'Uniform',\r\n    name = 'uniform',\r\n    bindingType,\r\n    visibility,\r\n    useStruct = true,\r\n    access = 'read',\r\n    usage = [],\r\n    struct = {},\r\n  }: BufferBindingParams) {\r\n    bindingType = bindingType ?? 'uniform'\r\n\r\n    super({ label, name, bindingType, visibility })\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      useStruct,\r\n      access,\r\n      usage,\r\n      struct,\r\n    }\r\n\r\n    this.cacheKey += `${useStruct},${access},`\r\n\r\n    this.arrayBufferSize = 0\r\n\r\n    this.shouldUpdate = false\r\n    this.useStruct = useStruct\r\n\r\n    this.bufferElements = []\r\n    this.inputs = {}\r\n    this.buffer = new Buffer()\r\n\r\n    if (Object.keys(struct).length) {\r\n      this.setBindings(struct)\r\n      this.setBufferAttributes()\r\n\r\n      this.setWGSLFragment()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get {@link GPUBindGroupLayoutEntry#buffer | bind group layout entry resource}\r\n   * @readonly\r\n   */\r\n  get resourceLayout(): {\r\n    /** {@link GPUBindGroupLayout | bind group layout} resource */\r\n    buffer: GPUBufferBindingLayout\r\n  } {\r\n    return {\r\n      buffer: {\r\n        type: getBindGroupLayoutBindingType(this),\r\n      },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the resource cache key\r\n   * @readonly\r\n   */\r\n  get resourceLayoutCacheKey(): string {\r\n    return `buffer,${getBindGroupLayoutBindingType(this)},${this.visibility},`\r\n  }\r\n\r\n  /**\r\n   * Get {@link GPUBindGroupEntry#resource | bind group resource}\r\n   * @readonly\r\n   */\r\n  get resource(): {\r\n    /** {@link GPUBindGroup | bind group} resource */\r\n    buffer: GPUBuffer | null\r\n  } {\r\n    return { buffer: this.buffer.GPUBuffer }\r\n  }\r\n\r\n  /**\r\n   * Clone this {@link BufferBinding} into a new one. Allows to skip buffer layout alignment computations.\r\n   * @param params - params to use for cloning\r\n   */\r\n  clone(params: BufferBindingParams) {\r\n    const { struct, ...defaultParams } = params\r\n\r\n    const bufferBindingCopy = new (this.constructor as typeof BufferBinding)(defaultParams)\r\n    struct && bufferBindingCopy.setBindings(struct)\r\n    bufferBindingCopy.options.struct = struct\r\n\r\n    bufferBindingCopy.arrayBufferSize = this.arrayBufferSize\r\n\r\n    bufferBindingCopy.arrayBuffer = new ArrayBuffer(bufferBindingCopy.arrayBufferSize)\r\n    bufferBindingCopy.arrayView = new DataView(\r\n      bufferBindingCopy.arrayBuffer,\r\n      0,\r\n      bufferBindingCopy.arrayBuffer.byteLength\r\n    )\r\n\r\n    bufferBindingCopy.buffer.size = bufferBindingCopy.arrayBuffer.byteLength\r\n\r\n    this.bufferElements.forEach((bufferElement: BufferArrayElement) => {\r\n      const newBufferElement = new (bufferElement.constructor as typeof BufferArrayElement)({\r\n        name: bufferElement.name,\r\n        key: bufferElement.key,\r\n        type: bufferElement.type,\r\n        ...(bufferElement.arrayLength && {\r\n          arrayLength: bufferElement.arrayLength,\r\n        }),\r\n      })\r\n\r\n      newBufferElement.alignment = bufferElement.alignment\r\n      if (bufferElement.arrayStride) {\r\n        newBufferElement.arrayStride = bufferElement.arrayStride\r\n      }\r\n\r\n      newBufferElement.setView(bufferBindingCopy.arrayBuffer, bufferBindingCopy.arrayView)\r\n      bufferBindingCopy.bufferElements.push(newBufferElement)\r\n    })\r\n\r\n    if (this.name === bufferBindingCopy.name && this.label === bufferBindingCopy.label) {\r\n      bufferBindingCopy.wgslStructFragment = this.wgslStructFragment\r\n      bufferBindingCopy.wgslGroupFragment = this.wgslGroupFragment\r\n    } else {\r\n      bufferBindingCopy.setWGSLFragment()\r\n    }\r\n\r\n    bufferBindingCopy.shouldUpdate = bufferBindingCopy.arrayBufferSize > 0\r\n\r\n    return bufferBindingCopy\r\n  }\r\n\r\n  /**\r\n   * Format bindings struct and set our {@link inputs}\r\n   * @param bindings - bindings inputs\r\n   */\r\n  setBindings(bindings: Record<string, Input>) {\r\n    for (const bindingKey of Object.keys(bindings)) {\r\n      const binding = {} as BufferBindingInput\r\n\r\n      for (const key in bindings[bindingKey]) {\r\n        if (key !== 'value') {\r\n          binding[key] = bindings[bindingKey][key]\r\n        }\r\n      }\r\n\r\n      // binding name is the key\r\n      binding.name = bindingKey\r\n\r\n      // define a \"value\" getter/setter so we can now when to update the buffer binding\r\n      Object.defineProperty(binding, 'value', {\r\n        get() {\r\n          return binding._value\r\n        },\r\n        set(v) {\r\n          binding._value = v\r\n          binding.shouldUpdate = true\r\n        },\r\n      })\r\n\r\n      binding.value = bindings[bindingKey].value\r\n\r\n      if (binding.value instanceof Vec2 || binding.value instanceof Vec3) {\r\n        // add binding update to _onChangeCallback\r\n        const _onChangeCallback = binding.value._onChangeCallback\r\n\r\n        binding.value._onChangeCallback = () => {\r\n          if (_onChangeCallback) {\r\n            _onChangeCallback()\r\n          }\r\n\r\n          binding.shouldUpdate = true\r\n        }\r\n      }\r\n\r\n      this.inputs[bindingKey] = binding\r\n\r\n      this.cacheKey += `${bindingKey},${bindings[bindingKey].type},`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set our buffer attributes:\r\n   * Takes all the {@link inputs} and adds them to the {@link bufferElements} array with the correct start and end offsets (padded), then fill our {@link arrayBuffer} typed array accordingly.\r\n   */\r\n  setBufferAttributes() {\r\n    // early on, check if there's at least one array binding\r\n    // If there's one and only one, put it at the end of the binding elements array, treat it as a single entry of the type, but loop on it by array.length / size to fill the alignment\r\n    // If there's more than one, create buffer interleaved elements.\r\n\r\n    // if length === 0, OK\r\n    // if length === 1, put it at the end of our struct\r\n    // if length > 1, create a buffer interleaved elements\r\n    let orderedBindings = Object.keys(this.inputs)\r\n\r\n    const arrayBindings = orderedBindings.filter((bindingKey) => {\r\n      return this.inputs[bindingKey].type.includes('array')\r\n    })\r\n\r\n    // put the array struct at the end\r\n    if (arrayBindings.length) {\r\n      orderedBindings.sort((bindingKeyA, bindingKeyB) => {\r\n        // 0 if it's an array, -1 else\r\n        const isBindingAArray = Math.min(0, this.inputs[bindingKeyA].type.indexOf('array'))\r\n        const isBindingBArray = Math.min(0, this.inputs[bindingKeyB].type.indexOf('array'))\r\n\r\n        return isBindingAArray - isBindingBArray\r\n      })\r\n\r\n      if (arrayBindings.length > 1) {\r\n        // remove interleaved arrays from the ordered struct key array\r\n        orderedBindings = orderedBindings.filter((bindingKey) => !arrayBindings.includes(bindingKey))\r\n      }\r\n    }\r\n\r\n    // handle buffer (non interleaved) elements\r\n    for (const bindingKey of orderedBindings) {\r\n      const binding = this.inputs[bindingKey]\r\n\r\n      const bufferElementOptions = {\r\n        name: toCamelCase(binding.name ?? bindingKey),\r\n        key: bindingKey,\r\n        type: binding.type,\r\n      }\r\n\r\n      const isArray =\r\n        binding.type.includes('array') && (Array.isArray(binding.value) || ArrayBuffer.isView(binding.value))\r\n\r\n      this.bufferElements.push(\r\n        isArray\r\n          ? new BufferArrayElement({\r\n              ...bufferElementOptions,\r\n              arrayLength: (binding.value as number[]).length,\r\n            })\r\n          : new BufferElement(bufferElementOptions)\r\n      )\r\n    }\r\n\r\n    // set their alignments\r\n    this.bufferElements.forEach((bufferElement, index) => {\r\n      const startOffset = index === 0 ? 0 : this.bufferElements[index - 1].endOffset + 1\r\n\r\n      bufferElement.setAlignment(startOffset)\r\n    })\r\n\r\n    // now create our interleaved buffer elements\r\n    if (arrayBindings.length > 1) {\r\n      // first get the sizes of the arrays\r\n      const arraySizes = arrayBindings.map((bindingKey) => {\r\n        const binding = this.inputs[bindingKey]\r\n        const bufferLayout = getBufferLayout(binding.type.replace('array', '').replace('<', '').replace('>', ''))\r\n\r\n        return Math.ceil((binding.value as number[] | TypedArray).length / bufferLayout.numElements)\r\n      })\r\n\r\n      // are they all of the same size?\r\n      const equalSize = arraySizes.every((size, i, array) => size === array[0])\r\n\r\n      if (equalSize) {\r\n        // this will hold our interleaved buffer elements\r\n        const interleavedBufferElements = arrayBindings.map((bindingKey) => {\r\n          const binding = this.inputs[bindingKey]\r\n          return new BufferInterleavedArrayElement({\r\n            name: toCamelCase(binding.name ?? bindingKey),\r\n            key: bindingKey,\r\n            type: binding.type,\r\n            arrayLength: (binding.value as number[]).length,\r\n          })\r\n        })\r\n\r\n        // now create temp buffer elements that we'll use to fill the interleaved buffer elements alignments\r\n        const tempBufferElements = arrayBindings.map((bindingKey) => {\r\n          const binding = this.inputs[bindingKey]\r\n          return new BufferElement({\r\n            name: toCamelCase(binding.name ?? bindingKey),\r\n            key: bindingKey,\r\n            type: binding.type.replace('array', '').replace('<', '').replace('>', ''),\r\n          })\r\n        })\r\n\r\n        // set temp buffer alignments as if it was regular buffer elements\r\n        tempBufferElements.forEach((bufferElement, index) => {\r\n          if (index === 0) {\r\n            if (this.bufferElements.length) {\r\n              // if there are already buffer elements\r\n              // get last one end row, and start at the next row\r\n              bufferElement.setAlignmentFromPosition({\r\n                row: this.bufferElements[this.bufferElements.length - 1].alignment.end.row + 1,\r\n                byte: 0,\r\n              })\r\n            } else {\r\n              bufferElement.setAlignment(0)\r\n            }\r\n          } else {\r\n            bufferElement.setAlignment(tempBufferElements[index - 1].endOffset + 1)\r\n          }\r\n        })\r\n\r\n        // now use last temp buffer end offset as our interleaved arrayStride\r\n        const totalStride =\r\n          tempBufferElements[tempBufferElements.length - 1].endOffset + 1 - tempBufferElements[0].startOffset\r\n\r\n        // finally, set interleaved buffer elements alignment\r\n        interleavedBufferElements.forEach((bufferElement, index) => {\r\n          bufferElement.setAlignment(tempBufferElements[index].startOffset, totalStride)\r\n        })\r\n\r\n        // add to our buffer elements array\r\n        this.bufferElements = [...this.bufferElements, ...interleavedBufferElements]\r\n      } else {\r\n        throwWarning(\r\n          `BufferBinding: \"${\r\n            this.label\r\n          }\" contains multiple array inputs that should use an interleaved array, but their sizes do not match. These inputs cannot be added to the BufferBinding: \"${arrayBindings.join(\r\n            ', '\r\n          )}\"`\r\n        )\r\n      }\r\n    }\r\n\r\n    this.arrayBufferSize = this.bufferElements.length\r\n      ? this.bufferElements[this.bufferElements.length - 1].paddedByteCount\r\n      : 0\r\n\r\n    this.arrayBuffer = new ArrayBuffer(this.arrayBufferSize)\r\n    this.arrayView = new DataView(this.arrayBuffer, 0, this.arrayBuffer.byteLength)\r\n\r\n    this.buffer.size = this.arrayBuffer.byteLength\r\n\r\n    for (const bufferElement of this.bufferElements) {\r\n      bufferElement.setView(this.arrayBuffer, this.arrayView)\r\n    }\r\n\r\n    this.shouldUpdate = this.arrayBufferSize > 0\r\n  }\r\n\r\n  /**\r\n   * Set the WGSL code snippet to append to the shaders code. It consists of variable (and Struct structures if needed) declarations.\r\n   */\r\n  setWGSLFragment() {\r\n    if (!this.bufferElements.length) return\r\n\r\n    const kebabCaseLabel = toKebabCase(this.label)\r\n\r\n    if (this.useStruct) {\r\n      const bufferElements = this.bufferElements.filter(\r\n        (bufferElement) => !(bufferElement instanceof BufferInterleavedArrayElement)\r\n      )\r\n      const interleavedBufferElements = this.bufferElements.filter(\r\n        (bufferElement) => bufferElement instanceof BufferInterleavedArrayElement\r\n      ) as BufferInterleavedArrayElement[]\r\n\r\n      if (interleavedBufferElements.length) {\r\n        const arrayLength = this.bindingType === 'uniform' ? `, ${interleavedBufferElements[0].numElements}` : ''\r\n\r\n        if (bufferElements.length) {\r\n          this.wgslStructFragment = `struct ${kebabCaseLabel}Element {\\n\\t${interleavedBufferElements\r\n            .map((binding) => binding.name + ': ' + binding.type.replace('array', '').replace('<', '').replace('>', ''))\r\n            .join(',\\n\\t')}\r\n};\\n\\n`\r\n\r\n          const interleavedBufferStructDeclaration = `${this.name}Element: array<${kebabCaseLabel}Element${arrayLength}>,`\r\n\r\n          this.wgslStructFragment += `struct ${kebabCaseLabel} {\\n\\t${bufferElements\r\n            .map((bufferElement) => bufferElement.name + ': ' + bufferElement.type)\r\n            .join(',\\n\\t')}\r\n\\t${interleavedBufferStructDeclaration}\r\n};`\r\n\r\n          const varType = getBindingWGSLVarType(this)\r\n          this.wgslGroupFragment = [`${varType} ${this.name}: ${kebabCaseLabel};`]\r\n        } else {\r\n          this.wgslStructFragment = `struct ${kebabCaseLabel} {\\n\\t${this.bufferElements\r\n            .map((binding) => binding.name + ': ' + binding.type.replace('array', '').replace('<', '').replace('>', ''))\r\n            .join(',\\n\\t')}\r\n};`\r\n\r\n          const varType = getBindingWGSLVarType(this)\r\n          this.wgslGroupFragment = [`${varType} ${this.name}: array<${kebabCaseLabel}${arrayLength}>;`]\r\n        }\r\n      } else {\r\n        this.wgslStructFragment = `struct ${kebabCaseLabel} {\\n\\t${this.bufferElements\r\n          .map((binding) => {\r\n            // now add array length if needed\r\n            const bindingType =\r\n              this.bindingType === 'uniform' && 'numElements' in binding\r\n                ? `array<${binding.type.replace('array', '').replace('<', '').replace('>', '')}, ${\r\n                    binding.numElements\r\n                  }>`\r\n                : binding.type\r\n            return binding.name + ': ' + bindingType\r\n          })\r\n          .join(',\\n\\t')}\r\n};`\r\n\r\n        const varType = getBindingWGSLVarType(this)\r\n        this.wgslGroupFragment = [`${varType} ${this.name}: ${kebabCaseLabel};`]\r\n      }\r\n    } else {\r\n      this.wgslStructFragment = ''\r\n      this.wgslGroupFragment = this.bufferElements.map((binding) => {\r\n        const varType = getBindingWGSLVarType(this)\r\n        return `${varType} ${binding.name}: ${binding.type};`\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set a {@link BufferBinding#shouldUpdate | binding shouldUpdate} flag to `true` to update our {@link arrayBuffer} array during next render.\r\n   * @param bindingName - the binding name/key to update\r\n   */\r\n  shouldUpdateBinding(bindingName = '') {\r\n    if (this.inputs[bindingName]) {\r\n      this.inputs[bindingName].shouldUpdate = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Executed at the beginning of a Material render call.\r\n   * If any of the {@link inputs} has changed, run its onBeforeUpdate callback then updates our {@link arrayBuffer} array.\r\n   * Also sets the {@link shouldUpdate} property to true so the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} knows it will need to update the {@link GPUBuffer}.\r\n   */\r\n  update() {\r\n    const inputs = Object.values(this.inputs)\r\n    for (const binding of inputs) {\r\n      const bufferElement = this.bufferElements.find((bufferEl) => bufferEl.key === binding.name)\r\n\r\n      if (binding.shouldUpdate && bufferElement) {\r\n        binding.onBeforeUpdate && binding.onBeforeUpdate()\r\n        // we're going to directly update the arrayBuffer from the buffer element update method\r\n        bufferElement.update(binding.value)\r\n\r\n        this.shouldUpdate = true\r\n        binding.shouldUpdate = false\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Extract the data corresponding to a specific {@link BufferElement} from a {@link Float32Array} holding the {@link BufferBinding#buffer | GPU buffer} data of this {@link BufferBinding}\r\n   * @param parameters - parameters used to extract the data\r\n   * @param parameters.result - {@link Float32Array} holding {@link GPUBuffer} data\r\n   * @param parameters.bufferElementName - name of the {@link BufferElement} to use to extract the data\r\n   * @returns - extracted data from the {@link Float32Array}\r\n   */\r\n  extractBufferElementDataFromBufferResult({\r\n    result,\r\n    bufferElementName,\r\n  }: {\r\n    result: Float32Array\r\n    bufferElementName: BufferElement['name']\r\n  }): Float32Array {\r\n    const bufferElement = this.bufferElements.find((bufferElement) => bufferElement.name === bufferElementName)\r\n    if (bufferElement) {\r\n      return bufferElement.extractDataFromBufferResult(result)\r\n    } else {\r\n      return result\r\n    }\r\n  }\r\n}\r\n","import { BufferBinding, BufferBindingParams } from './BufferBinding'\r\nimport { Buffer } from '../buffers/Buffer'\r\n\r\n/**\r\n * Parameters used to create a {@link WritableBufferBinding}\r\n */\r\nexport interface WritableBufferBindingParams extends BufferBindingParams {\r\n  /** Whether whe should automatically copy the {@link WritableBufferBinding#buffer | GPU buffer} content into our {@link WritableBufferBinding#resultBuffer | result GPU buffer} */\r\n  shouldCopyResult?: boolean\r\n}\r\n\r\n/**\r\n * Used to create a {@link BufferBinding} that can hold read/write storage bindings along with a {@link WritableBufferBinding#resultBuffer | result GPU buffer} that can be used to get data back from the GPU.\r\n *\r\n * Note that it is automatically created by the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} when a {@link types/BindGroups.BindGroupInputs#storages | storages input} has its {@link BufferBindingParams#access | access} property set to `\"read_write\"`.\r\n */\r\nexport class WritableBufferBinding extends BufferBinding {\r\n  /** Flag indicating whether whe should automatically copy the {@link buffer | GPU buffer} content into our {@link resultBuffer | result GPU buffer} */\r\n  shouldCopyResult: boolean\r\n  /** The result GPUBuffer */\r\n  resultBuffer: Buffer\r\n  /** Options used to create this {@link WritableBufferBinding} */\r\n  options: WritableBufferBindingParams\r\n\r\n  /**\r\n   * WritableBufferBinding constructor\r\n   * @param parameters - {@link WritableBufferBindingParams | parameters} used to create our {@link WritableBufferBinding}\r\n   */\r\n  constructor({\r\n    label = 'Work',\r\n    name = 'work',\r\n    bindingType,\r\n    visibility,\r\n    useStruct = true,\r\n    access = 'read_write',\r\n    usage = [],\r\n    struct = {},\r\n    shouldCopyResult = false,\r\n  }: WritableBufferBindingParams) {\r\n    bindingType = 'storage'\r\n    visibility = ['compute']\r\n\r\n    super({ label, name, bindingType, visibility, useStruct, access, usage, struct })\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      shouldCopyResult,\r\n    }\r\n\r\n    this.shouldCopyResult = shouldCopyResult\r\n    this.cacheKey += `${shouldCopyResult},`\r\n\r\n    // can be used as our buffer copy destination\r\n    this.resultBuffer = new Buffer()\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { generateUUID, toKebabCase } from '../../utils/utils'\r\nimport { WritableBufferBinding, WritableBufferBindingParams } from '../bindings/WritableBufferBinding'\r\nimport { BufferBinding } from '../bindings/BufferBinding'\r\nimport {\r\n  AllowedBindGroups,\r\n  BindGroupBindingElement,\r\n  BindGroupBufferBindingElement,\r\n  BindGroupEntries,\r\n  BindGroupParams,\r\n  ReadOnlyInputBindings,\r\n} from '../../types/BindGroups'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { TextureBindGroupParams } from './TextureBindGroup'\r\nimport { BufferBindingType } from '../bindings/Binding'\r\nimport { BufferUsageKeys } from '../buffers/utils'\r\n\r\n/**\r\n * Used to handle all inputs data sent to the GPU.<br>\r\n * In WebGPU, data (buffers, textures or samplers, called bindings) are organised by bind groups, containing those bindings.\r\n *\r\n * ## Bindings\r\n *\r\n * A {@link BindGroup} is responsible for creating each {@link BufferBinding} {@link GPUBuffer} and then the {@link GPUBindGroup} and {@link GPUBindGroupLayout} that are used to create {@link GPUComputePipeline} or {@link GPURenderPipeline}.<br>\r\n * Those are generally automatically created by the {@link core/materials/Material.Material | Material} using this {@link BindGroup}. If you need to manually create them, you will have to call its {@link BindGroup#createBindGroup | `createBindGroup()` method}\r\n *\r\n * ### Samplers and textures\r\n *\r\n * A {@link BindGroup} is best suited to handle {@link GPUBuffer} only bindings. If you need to handle {@link GPUSampler}, a {@link GPUTexture} or a {@link GPUExternalTexture}, you should use a {@link core/bindGroups/TextureBindGroup.TextureBindGroup | TextureBindGroup} instead.\r\n *\r\n * ### Updating a GPUBindGroup or GPUBindGroupLayout\r\n *\r\n * Each time one of the {@link https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createBindGroup#resource | binding resource} changes, its {@link BindGroup#bindGroup | bindGroup} will be recreated (usually, when a {@link GPUTexture} is uploaded).<br>\r\n * Each time one of the {@link https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createBindGroupLayout#resource_layout_objects | binding resource layout} changes, its {@link BindGroup#bindGroupLayout | bindGroupLayout} and {@link BindGroup#bindGroup | bindGroup} will be recreated, and the {@link GPUComputePipeline} or {@link GPURenderPipeline} will be recreated as well.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * const bindGroup = new BindGroup(gpuCurtains, {\r\n *   label: 'My bind group',\r\n *   uniforms: {\r\n *     params: {\r\n *       visibility: ['fragment'],\r\n *       struct: {\r\n *         opacity: {\r\n *           value: 'f32',\r\n *           value: 1,\r\n *         },\r\n *         mousePosition: {\r\n *           value: 'vec2f',\r\n *           value: new Vec2(),\r\n *         },\r\n *       },\r\n *     },\r\n *   },\r\n * })\r\n *\r\n * // create the GPU buffer, bindGroupLayout and bindGroup\r\n * bindGroup.createBindGroup()\r\n * ```\r\n */\r\nexport class BindGroup {\r\n  /** The type of the {@link BindGroup} */\r\n  type: string\r\n  /** The universal unique id of the {@link BindGroup} */\r\n  uuid: string\r\n  /** The {@link Renderer} used */\r\n  renderer: Renderer\r\n  /** Options used to create this {@link BindGroup} */\r\n  options: TextureBindGroupParams\r\n  /** Index of this {@link BindGroup}, used to link struct in the shaders */\r\n  index: number\r\n\r\n  /** List of {@link BindGroupBindingElement | bindings} (buffers, texture, etc.) handled by this {@link BindGroup} */\r\n  bindings: BindGroupBindingElement[]\r\n\r\n  /** Our {@link BindGroup} {@link BindGroupEntries | entries} objects */\r\n  entries: BindGroupEntries\r\n\r\n  /** Our {@link BindGroup}{@link GPUBindGroupLayout} */\r\n  bindGroupLayout: null | GPUBindGroupLayout\r\n  /** Our {@link BindGroup} {@link GPUBindGroup} */\r\n  bindGroup: null | GPUBindGroup\r\n\r\n  /** A cache key allowing to get / set {@link GPUBindGroupLayout} from the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#bindGroupLayouts | device manager map cache}. */\r\n  layoutCacheKey: string\r\n  /** A cache key allowing the {@link core/pipelines/PipelineManager.PipelineManager | PipelineManager} to compare {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry | RenderPipelineEntry} bind groups content. */\r\n  pipelineCacheKey: string\r\n\r\n  /** Flag indicating whether we need to flush and recreate the pipeline using this {@link BindGroup} s*/\r\n  needsPipelineFlush: boolean\r\n\r\n  /** A Set to store this {@link BindGroup} consumers ({@link core/materials/Material.Material#uuid | Material uuid})  */\r\n  consumers: Set<string>\r\n\r\n  /**\r\n   * BindGroup constructor\r\n   * @param renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object\r\n   * @param parameters - {@link BindGroupParams | parameters} used to create our {@link BindGroup}\r\n   */\r\n  constructor(\r\n    renderer: Renderer | GPUCurtains,\r\n    { label = 'BindGroup', index = 0, bindings = [], uniforms, storages }: BindGroupParams = {}\r\n  ) {\r\n    this.type = 'BindGroup'\r\n\r\n    renderer = isRenderer(renderer, this.type)\r\n\r\n    this.renderer = renderer\r\n    this.options = {\r\n      label,\r\n      index,\r\n      bindings,\r\n      ...(uniforms && { uniforms }),\r\n      ...(storages && { storages }),\r\n    }\r\n\r\n    this.index = index\r\n    this.uuid = generateUUID()\r\n\r\n    this.bindings = []\r\n    bindings.length && this.addBindings(bindings)\r\n    if (this.options.uniforms || this.options.storages) this.setInputBindings()\r\n\r\n    this.layoutCacheKey = ''\r\n    this.pipelineCacheKey = ''\r\n    this.resetEntries()\r\n\r\n    this.bindGroupLayout = null\r\n    this.bindGroup = null\r\n\r\n    // if we ever update our bind group layout\r\n    // we will have to recreate the whole pipeline again\r\n    this.needsPipelineFlush = false\r\n\r\n    this.consumers = new Set()\r\n\r\n    // add the bind group to the buffers consumers\r\n    for (const binding of this.bufferBindings) {\r\n      if ('buffer' in binding) {\r\n        binding.buffer.consumers.add(this.uuid)\r\n      }\r\n\r\n      if ('resultBuffer' in binding) {\r\n        binding.resultBuffer.consumers.add(this.uuid)\r\n      }\r\n    }\r\n\r\n    this.renderer.addBindGroup(this)\r\n  }\r\n\r\n  /**\r\n   * Sets our {@link BindGroup#index | bind group index}\r\n   * @param index - {@link BindGroup#index | bind group index} to set\r\n   */\r\n  setIndex(index: number) {\r\n    this.index = index\r\n  }\r\n\r\n  /**\r\n   * Adds an array of already created {@link bindings} (buffers, texture, etc.) to the {@link bindings} array\r\n   * @param bindings - {@link bindings} to add\r\n   */\r\n  addBindings(bindings: BindGroupBindingElement[] = []) {\r\n    bindings.forEach((binding) => {\r\n      if ('buffer' in binding) {\r\n        this.renderer.deviceManager.bufferBindings.set(binding.cacheKey, binding)\r\n        binding.buffer.consumers.add(this.uuid)\r\n      }\r\n    })\r\n\r\n    this.bindings = [...this.bindings, ...bindings]\r\n  }\r\n\r\n  /**\r\n   * Adds an already created {@link bindings} (buffers, texture, etc.) to the {@link bindings} array\r\n   * @param binding - binding to add\r\n   */\r\n  addBinding(binding: BindGroupBindingElement) {\r\n    this.bindings.push(binding)\r\n  }\r\n\r\n  /**\r\n   * Creates Bindings based on a list of inputs\r\n   * @param bindingType - {@link core/bindings/Binding.Binding#bindingType | binding type}\r\n   * @param inputs - {@link ReadOnlyInputBindings | inputs (uniform or storage)} that will be used to create the binding\r\n   * @returns - a {@link bindings} array\r\n   */\r\n  createInputBindings(\r\n    bindingType: BufferBindingType = 'uniform',\r\n    inputs: ReadOnlyInputBindings = {}\r\n  ): BindGroupBindingElement[] {\r\n    let bindings = [\r\n      ...Object.keys(inputs).map((inputKey) => {\r\n        const binding = inputs[inputKey] as WritableBufferBindingParams\r\n\r\n        // bail if no struct\r\n        if (!binding.struct) return\r\n\r\n        const bindingParams: WritableBufferBindingParams = {\r\n          label: toKebabCase(binding.label || inputKey),\r\n          name: inputKey,\r\n          bindingType,\r\n          visibility: binding.access === 'read_write' ? ['compute'] : binding.visibility,\r\n          useStruct: true, // by default\r\n          access: binding.access ?? 'read', // read by default\r\n          ...(binding.usage && { usage: binding.usage }),\r\n          struct: binding.struct,\r\n          ...(binding.shouldCopyResult !== undefined && { shouldCopyResult: binding.shouldCopyResult }),\r\n        }\r\n\r\n        if (binding.useStruct !== false) {\r\n          let key = `${bindingType},${\r\n            binding.visibility === undefined ? 'all' : binding.access === 'read_write' ? 'compute' : binding.visibility\r\n          },true,${binding.access ?? 'read'},`\r\n\r\n          Object.keys(binding.struct).forEach((bindingKey) => {\r\n            key += `${bindingKey},${binding.struct[bindingKey].type},`\r\n          })\r\n\r\n          if (binding.shouldCopyResult !== undefined) {\r\n            key += `${binding.shouldCopyResult},`\r\n          }\r\n\r\n          const cachedBinding = this.renderer.deviceManager.bufferBindings.get(key)\r\n\r\n          if (cachedBinding) {\r\n            return cachedBinding.clone(bindingParams)\r\n          }\r\n        }\r\n\r\n        const BufferBindingConstructor = bindingParams.access === 'read_write' ? WritableBufferBinding : BufferBinding\r\n\r\n        return binding.useStruct !== false\r\n          ? new BufferBindingConstructor(bindingParams)\r\n          : Object.keys(binding.struct).map((bindingKey) => {\r\n              bindingParams.label = toKebabCase(binding.label ? binding.label + bindingKey : inputKey + bindingKey)\r\n              bindingParams.name = inputKey + bindingKey\r\n              bindingParams.useStruct = false\r\n              bindingParams.struct = { [bindingKey]: binding.struct[bindingKey] }\r\n\r\n              return new BufferBindingConstructor(bindingParams)\r\n            })\r\n      }),\r\n    ].flat()\r\n\r\n    // filter to leave only valid bindings\r\n    bindings = bindings.filter(Boolean)\r\n\r\n    bindings.forEach((binding) => {\r\n      this.renderer.deviceManager.bufferBindings.set(binding.cacheKey, binding)\r\n    })\r\n\r\n    return bindings\r\n  }\r\n\r\n  /**\r\n   * Create and adds {@link bindings} based on inputs provided upon creation\r\n   */\r\n  setInputBindings() {\r\n    this.addBindings([\r\n      ...this.createInputBindings('uniform', this.options.uniforms),\r\n      ...this.createInputBindings('storage', this.options.storages),\r\n    ])\r\n  }\r\n\r\n  /**\r\n   * Get whether the GPU bind group is ready to be created\r\n   * It can be created if it has {@link bindings} and has not been created yet\r\n   * @readonly\r\n   */\r\n  get shouldCreateBindGroup(): boolean {\r\n    return !this.bindGroup && !!this.bindings.length\r\n  }\r\n\r\n  /**\r\n   * Reset our {@link BindGroup} {@link entries}\r\n   */\r\n  resetEntries() {\r\n    this.entries = {\r\n      bindGroupLayout: [],\r\n      bindGroup: [],\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the GPU buffers, {@link bindings}, {@link entries}, {@link bindGroupLayout} and {@link bindGroup}\r\n   */\r\n  createBindGroup() {\r\n    this.fillEntries()\r\n    this.setBindGroupLayout()\r\n    this.setBindGroup()\r\n  }\r\n\r\n  /**\r\n   * Reset the {@link BindGroup#entries.bindGroup | bindGroup entries}, recreates them and then recreate the {@link BindGroup#bindGroup | GPU bind group}\r\n   */\r\n  resetBindGroup() {\r\n    this.entries.bindGroup = []\r\n    this.pipelineCacheKey = ''\r\n\r\n    for (const binding of this.bindings) {\r\n      this.addBindGroupEntry(binding)\r\n    }\r\n\r\n    this.setBindGroup()\r\n  }\r\n\r\n  /**\r\n   * Add a {@link BindGroup#entries.bindGroup | bindGroup entry}\r\n   * @param binding - {@link BindGroupBindingElement | binding} to add\r\n   */\r\n  addBindGroupEntry(binding: BindGroupBindingElement) {\r\n    this.entries.bindGroup.push({\r\n      binding: this.entries.bindGroup.length,\r\n      resource: binding.resource,\r\n    })\r\n\r\n    this.pipelineCacheKey += binding.cacheKey\r\n  }\r\n\r\n  /**\r\n   * Reset the {@link BindGroup#entries.bindGroupLayout | bindGroupLayout entries}, recreates them and then recreate the {@link BindGroup#bindGroupLayout | GPU bind group layout}\r\n   */\r\n  resetBindGroupLayout() {\r\n    this.entries.bindGroupLayout = []\r\n    this.layoutCacheKey = ''\r\n\r\n    for (const binding of this.bindings) {\r\n      this.addBindGroupLayoutEntry(binding)\r\n    }\r\n\r\n    this.setBindGroupLayout()\r\n  }\r\n\r\n  /**\r\n   * Add a {@link BindGroup#entries.bindGroupLayout | bindGroupLayout entry}\r\n   * @param binding - {@link BindGroupBindingElement | binding} to add\r\n   */\r\n  addBindGroupLayoutEntry(binding: BindGroupBindingElement) {\r\n    this.entries.bindGroupLayout.push({\r\n      binding: this.entries.bindGroupLayout.length,\r\n      ...binding.resourceLayout,\r\n      visibility: binding.visibility,\r\n    })\r\n\r\n    this.layoutCacheKey += binding.resourceLayoutCacheKey\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration\r\n   */\r\n  loseContext() {\r\n    this.resetEntries()\r\n\r\n    for (const binding of this.bufferBindings) {\r\n      binding.buffer.reset()\r\n\r\n      if ('resultBuffer' in binding) {\r\n        binding.resultBuffer.reset()\r\n      }\r\n    }\r\n\r\n    this.bindGroup = null\r\n    this.bindGroupLayout = null\r\n    this.needsPipelineFlush = true\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored to update our bindings.\r\n   */\r\n  restoreContext() {\r\n    if (this.shouldCreateBindGroup) {\r\n      this.createBindGroup()\r\n    }\r\n\r\n    // finally re-write all our buffers\r\n    for (const bufferBinding of this.bufferBindings) {\r\n      bufferBinding.shouldUpdate = true\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get all {@link BindGroup#bindings | bind group bindings} that handle a {@link GPUBuffer}\r\n   */\r\n  get bufferBindings(): BindGroupBufferBindingElement[] {\r\n    return this.bindings.filter(\r\n      (binding) => binding instanceof BufferBinding || binding instanceof WritableBufferBinding\r\n    ) as BindGroupBufferBindingElement[]\r\n  }\r\n\r\n  /**\r\n   * Creates binding GPUBuffer with correct params\r\n   * @param binding - the binding element\r\n   */\r\n  createBindingBuffer(binding: BindGroupBufferBindingElement) {\r\n    // [Kangz](https://github.com/Kangz) said:\r\n    // \"In general though COPY_SRC/DST is free (at least in Dawn / Chrome because we add it all the time for our own purpose).\"\r\n    binding.buffer.createBuffer(this.renderer, {\r\n      label: this.options.label + ': ' + binding.bindingType + ' buffer from: ' + binding.label,\r\n      usage: [...(['copySrc', 'copyDst', binding.bindingType] as BufferUsageKeys[]), ...binding.options.usage],\r\n    })\r\n\r\n    if ('resultBuffer' in binding) {\r\n      binding.resultBuffer.createBuffer(this.renderer, {\r\n        label: this.options.label + ': Result buffer from: ' + binding.label,\r\n        size: binding.arrayBuffer.byteLength,\r\n        usage: ['copyDst', 'mapRead'],\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fill in our entries bindGroupLayout and bindGroup arrays with the correct binding resources.\r\n   * For buffer struct, create a GPUBuffer first if needed\r\n   */\r\n  fillEntries() {\r\n    for (const binding of this.bindings) {\r\n      // if no visibility specified, just set it to the maximum default capabilities\r\n      if (!binding.visibility) {\r\n        binding.visibility = GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE\r\n      }\r\n\r\n      // if it's a buffer binding, create the GPUBuffer\r\n      if ('buffer' in binding) {\r\n        if (!binding.buffer.GPUBuffer) {\r\n          this.createBindingBuffer(binding)\r\n        }\r\n      }\r\n\r\n      // now that everything is ready, fill our entries\r\n      this.addBindGroupLayoutEntry(binding)\r\n      this.addBindGroupEntry(binding)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get a bind group binding by name/key\r\n   * @param bindingName - the binding name or key\r\n   * @returns - the found binding, or null if not found\r\n   */\r\n  getBindingByName(bindingName = ''): BindGroupBindingElement | null {\r\n    return this.bindings.find((binding) => binding.name === bindingName)\r\n  }\r\n\r\n  /**\r\n   * Create a GPUBindGroupLayout and set our {@link bindGroupLayout}\r\n   */\r\n  setBindGroupLayout() {\r\n    const bindGroupLayout = this.renderer.deviceManager.bindGroupLayouts.get(this.layoutCacheKey)\r\n\r\n    if (bindGroupLayout) {\r\n      this.bindGroupLayout = bindGroupLayout\r\n    } else {\r\n      this.bindGroupLayout = this.renderer.createBindGroupLayout({\r\n        label: this.options.label + ' layout',\r\n        entries: this.entries.bindGroupLayout,\r\n      })\r\n\r\n      this.renderer.deviceManager.bindGroupLayouts.set(this.layoutCacheKey, this.bindGroupLayout)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a GPUBindGroup and set our {@link bindGroup}\r\n   */\r\n  setBindGroup() {\r\n    this.bindGroup = this.renderer.createBindGroup({\r\n      label: this.options.label,\r\n      layout: this.bindGroupLayout,\r\n      entries: this.entries.bindGroup,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Check whether we should update (write) our {@link GPUBuffer} or not.\r\n   */\r\n  updateBufferBindings() {\r\n    this.bindings.forEach((binding, index) => {\r\n      if ('buffer' in binding) {\r\n        // update binding elements\r\n        binding.update()\r\n\r\n        // now write to the GPUBuffer if needed\r\n        if (binding.shouldUpdate) {\r\n          // bufferOffset is always equals to 0 in our case\r\n          if (!binding.useStruct && binding.bufferElements.length > 1) {\r\n            // we're in a non struct buffer binding with multiple entries\r\n            // that should not happen but that way we're covered\r\n            this.renderer.queueWriteBuffer(binding.buffer.GPUBuffer, 0, binding.bufferElements[index].view)\r\n          } else {\r\n            this.renderer.queueWriteBuffer(binding.buffer.GPUBuffer, 0, binding.arrayBuffer)\r\n          }\r\n        }\r\n\r\n        // reset update flag\r\n        binding.shouldUpdate = false\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Update the {@link BindGroup}, which means update its {@link BindGroup#bufferBindings | buffer bindings} and {@link BindGroup#resetBindGroup | reset it} if needed.\r\n   * Called at each render from the parentMesh {@link core/materials/Material.Material | material}\r\n   */\r\n  update() {\r\n    this.updateBufferBindings()\r\n\r\n    const needBindGroupReset = this.bindings.some((binding) => binding.shouldResetBindGroup)\r\n    const needBindGroupLayoutReset = this.bindings.some((binding) => binding.shouldResetBindGroupLayout)\r\n\r\n    // since other bind groups might be using that binding\r\n    // wait for the end of the render loop to reset the bindings flags\r\n    if (needBindGroupReset || needBindGroupLayoutReset) {\r\n      this.renderer.onAfterCommandEncoderSubmission.add(\r\n        () => {\r\n          for (const binding of this.bindings) {\r\n            binding.shouldResetBindGroup = false\r\n            binding.shouldResetBindGroupLayout = false\r\n          }\r\n        },\r\n        { once: true }\r\n      )\r\n    }\r\n\r\n    if (needBindGroupLayoutReset) {\r\n      this.resetBindGroupLayout()\r\n      // bind group layout has changed, we have to recreate the pipeline\r\n      this.needsPipelineFlush = true\r\n    }\r\n\r\n    if (needBindGroupReset) {\r\n      this.resetBindGroup()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clones a {@link BindGroup} from a list of {@link bindings}\r\n   * Useful to create a new bind group with already created buffers, but swapped\r\n   * @param parameters - parameters to use for cloning\r\n   * @param parameters.bindings - our input {@link bindings}\r\n   * @param [parameters.keepLayout=false] - whether we should keep original {@link bindGroupLayout} or not\r\n   * @returns - the cloned {@link BindGroup}\r\n   */\r\n  clone({\r\n    bindings = [],\r\n    keepLayout = false,\r\n  }: {\r\n    bindings?: BindGroupBindingElement[]\r\n    keepLayout?: boolean\r\n  } = {}): AllowedBindGroups {\r\n    const params = { ...this.options }\r\n    params.label += ' (copy)'\r\n\r\n    const bindGroupCopy = new (this.constructor as typeof BindGroup)(this.renderer, {\r\n      label: params.label,\r\n    })\r\n\r\n    bindGroupCopy.setIndex(this.index)\r\n    bindGroupCopy.options = params\r\n\r\n    const bindingsRef = bindings.length ? bindings : this.bindings\r\n\r\n    for (const binding of bindingsRef) {\r\n      bindGroupCopy.addBinding(binding)\r\n\r\n      // if it's a buffer binding without a GPUBuffer, create it now\r\n      if ('buffer' in binding) {\r\n        if (!binding.buffer.GPUBuffer) {\r\n          this.createBindingBuffer(binding)\r\n        }\r\n\r\n        binding.buffer.consumers.add(bindGroupCopy.uuid)\r\n\r\n        if ('resultBuffer' in binding) {\r\n          binding.resultBuffer.consumers.add(bindGroupCopy.uuid)\r\n        }\r\n      }\r\n\r\n      // if we should create a new bind group layout, fill it\r\n      if (!keepLayout) {\r\n        bindGroupCopy.addBindGroupLayoutEntry(binding)\r\n      }\r\n\r\n      bindGroupCopy.addBindGroupEntry(binding)\r\n    }\r\n\r\n    // if we should copy the given bind group layout\r\n    if (keepLayout) {\r\n      bindGroupCopy.entries.bindGroupLayout = [...this.entries.bindGroupLayout]\r\n      bindGroupCopy.layoutCacheKey = this.layoutCacheKey\r\n    }\r\n\r\n    bindGroupCopy.setBindGroupLayout()\r\n    bindGroupCopy.setBindGroup()\r\n\r\n    return bindGroupCopy\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link BindGroup}\r\n   * Most important is to destroy the GPUBuffers to free the memory\r\n   */\r\n  destroy() {\r\n    this.renderer.removeBindGroup(this)\r\n\r\n    for (const binding of this.bufferBindings) {\r\n      if ('buffer' in binding) {\r\n        this.renderer.removeBuffer(binding.buffer)\r\n\r\n        binding.buffer.consumers.delete(this.uuid)\r\n        if (!binding.buffer.consumers.size) {\r\n          binding.buffer.destroy()\r\n        }\r\n      }\r\n\r\n      if ('resultBuffer' in binding) {\r\n        this.renderer.removeBuffer(binding.resultBuffer)\r\n\r\n        binding.resultBuffer.consumers.delete(this.uuid)\r\n        if (!binding.resultBuffer.consumers.size) {\r\n          binding.resultBuffer.destroy()\r\n        }\r\n      }\r\n    }\r\n\r\n    this.bindings = []\r\n    this.bindGroupLayout = null\r\n    this.bindGroup = null\r\n    this.resetEntries()\r\n  }\r\n}\r\n","import { Binding, BindingMemoryAccessType, BindingParams, DOMTextureBindingType } from './Binding'\r\nimport {\r\n  getBindGroupLayoutTextureBindingCacheKey,\r\n  getBindGroupLayoutTextureBindingType,\r\n  getTextureBindingWGSLVarType,\r\n} from './utils'\r\n\r\n/** Defines a {@link TextureBinding} {@link TextureBinding#resource | resource} */\r\nexport type TextureBindingResource = GPUTexture | GPUExternalTexture | null\r\n\r\n/**\r\n * An object defining all possible {@link TextureBinding} class instancing parameters\r\n */\r\nexport interface TextureBindingParams extends BindingParams {\r\n  /** The binding type of the {@link TextureBinding} */\r\n  bindingType?: DOMTextureBindingType\r\n  /** {@link TextureBinding} {@link TextureBinding#resource | resource} */\r\n  texture: TextureBindingResource\r\n  /** The {@link GPUTexture | texture} format to use */\r\n  format?: GPUTextureFormat\r\n  /** The storage {@link GPUTexture | texture} binding memory access types (read only, write only or read/write) */\r\n  access?: BindingMemoryAccessType\r\n  /** The {@link GPUTexture | texture} view dimension to use */\r\n  viewDimension?: GPUTextureViewDimension\r\n  /** Whethe the {@link GPUTexture | texture} is a multisampled texture. Mainly used internally by depth textures if needed. */\r\n  multisampled?: boolean\r\n}\r\n\r\n/**\r\n * Used to handle {@link GPUTexture} and {@link GPUExternalTexture} bindings.\r\n *\r\n * Provide both {@link TextureBinding#resourceLayout | resourceLayout} and {@link TextureBinding#resource | resource} to the {@link GPUBindGroupLayout} and {@link GPUBindGroup}.<br>\r\n * Also create the appropriate WGSL code snippet to add to the shaders.\r\n */\r\nexport class TextureBinding extends Binding {\r\n  /** The binding type of the {@link TextureBinding} */\r\n  bindingType: DOMTextureBindingType\r\n  /** Our {@link TextureBinding} resource, i.e. a {@link GPUTexture} or {@link GPUExternalTexture} */\r\n  texture: TextureBindingResource\r\n  /** An array of strings to append to our shaders code declaring all the WGSL variables representing this {@link TextureBinding} */\r\n  wgslGroupFragment: string[]\r\n  /** Options used to create this {@link TextureBinding} */\r\n  options: TextureBindingParams\r\n\r\n  /**\r\n   * TextureBinding constructor\r\n   * @param parameters - {@link TextureBindingParams | parameters} used to create our {@link TextureBinding}\r\n   */\r\n  constructor({\r\n    label = 'Texture',\r\n    name = 'texture',\r\n    bindingType,\r\n    visibility,\r\n    texture,\r\n    format = 'rgba8unorm',\r\n    access = 'write',\r\n    viewDimension = '2d',\r\n    multisampled = false,\r\n  }: TextureBindingParams) {\r\n    bindingType = bindingType ?? 'texture'\r\n\r\n    if (bindingType === 'storage') {\r\n      visibility = ['compute']\r\n    }\r\n\r\n    super({ label, name, bindingType, visibility })\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      texture,\r\n      format,\r\n      access,\r\n      viewDimension,\r\n      multisampled,\r\n    }\r\n\r\n    this.cacheKey += `${format},${access},${viewDimension},${multisampled},`\r\n\r\n    this.resource = texture // should be a texture or an external texture\r\n\r\n    this.setWGSLFragment()\r\n  }\r\n\r\n  /**\r\n   * Get bind group layout entry resource, either for {@link GPUBindGroupLayoutEntry#texture | texture} or {@link GPUBindGroupLayoutEntry#externalTexture | external texture}\r\n   * @readonly\r\n   */\r\n  get resourceLayout():\r\n    | GPUTextureBindingLayout\r\n    | GPUExternalTextureBindingLayout\r\n    | GPUStorageTextureBindingLayout\r\n    | null {\r\n    return getBindGroupLayoutTextureBindingType(this)\r\n  }\r\n\r\n  /**\r\n   * Get the resource cache key\r\n   * @readonly\r\n   */\r\n  get resourceLayoutCacheKey(): string {\r\n    return getBindGroupLayoutTextureBindingCacheKey(this)\r\n  }\r\n\r\n  /**\r\n   * Get the {@link GPUBindGroupEntry#resource | bind group resource}\r\n   */\r\n  get resource(): GPUExternalTexture | GPUTextureView | null {\r\n    return this.texture instanceof GPUTexture\r\n      ? this.texture.createView({ label: this.options.label + ' view', dimension: this.options.viewDimension })\r\n      : this.texture instanceof GPUExternalTexture\r\n      ? this.texture\r\n      : null\r\n  }\r\n\r\n  /**\r\n   * Set the {@link GPUBindGroupEntry#resource | bind group resource}\r\n   * @param value - new bind group resource\r\n   */\r\n  set resource(value: TextureBindingResource) {\r\n    // resource changed, update bind group!\r\n    if (value || this.texture) this.shouldResetBindGroup = true\r\n    this.texture = value\r\n  }\r\n\r\n  /**\r\n   * Set or update our {@link Binding#bindingType | bindingType} and our WGSL code snippet\r\n   * @param bindingType - the new {@link Binding#bindingType | binding type}\r\n   */\r\n  setBindingType(bindingType: DOMTextureBindingType) {\r\n    if (bindingType !== this.bindingType) {\r\n      // binding type has changed!\r\n      if (bindingType) this.shouldResetBindGroupLayout = true\r\n\r\n      this.bindingType = bindingType\r\n      this.cacheKey = `${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`\r\n      this.setWGSLFragment()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set or update our texture {@link TextureBindingParams#format | format}. Note that if the texture is a `storage` {@link bindingType} and the `format` value is different from the previous one, the associated {@link core/bindGroups/BindGroup.BindGroup#bindGroupLayout | GPU bind group layout} will be recreated.\r\n   * @param format - new texture {@link TextureBindingParams#format | format} value to use\r\n   */\r\n  setFormat(format: GPUTextureFormat) {\r\n    const isNewFormat = format !== this.options.format\r\n    this.options.format = format\r\n\r\n    if (isNewFormat && this.bindingType === 'storage') {\r\n      this.setWGSLFragment()\r\n      this.shouldResetBindGroupLayout = true\r\n      this.cacheKey = `${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set or update our texture {@link TextureBindingParams#multisampled | multisampled}. Note that if the texture is not a `storage` {@link bindingType} and the `multisampled` value is different from the previous one, the associated {@link core/bindGroups/BindGroup.BindGroup#bindGroupLayout | GPU bind group layout} will be recreated.\r\n   * @param multisampled - new texture {@link TextureBindingParams#multisampled | multisampled} value to use\r\n   */\r\n  setMultisampled(multisampled: boolean) {\r\n    const isNewMultisampled = multisampled !== this.options.multisampled\r\n    this.options.multisampled = multisampled\r\n\r\n    if (isNewMultisampled && this.bindingType !== 'storage') {\r\n      this.setWGSLFragment()\r\n      this.shouldResetBindGroupLayout = true\r\n      this.cacheKey = `${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the correct WGSL code snippet.\r\n   */\r\n  setWGSLFragment() {\r\n    this.wgslGroupFragment = [`${getTextureBindingWGSLVarType(this)}`]\r\n  }\r\n}\r\n","import { Vec3 } from './Vec3'\r\nimport { Quat } from './Quat'\r\n\r\nconst xAxis = new Vec3()\r\nconst yAxis = new Vec3()\r\nconst zAxis = new Vec3()\r\n\r\n/**\r\n * Basic 4x4 matrix class used for matrix calculations.\r\n *\r\n * Note that like three.js, the constructor and {@link set} method take arguments in row-major order, while internally they are stored in the {@link elements} array in column-major order.\r\n *\r\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js\r\n * @see http://glmatrix.net/docs/mat4.js.html\r\n */\r\nexport class Mat4 {\r\n  /** The type of the {@link Mat4} */\r\n  type: string\r\n  /** Our matrix array */\r\n  elements: Float32Array\r\n\r\n  // prettier-ignore\r\n  /**\r\n   * Mat4 constructor\r\n   * @param elements - initial array to use, default to identity matrix\r\n   */\r\n  constructor(elements: Float32Array = new Float32Array([\r\n    1, 0, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 0, 1\r\n  ])) {\r\n    this.type = 'Mat4'\r\n    this.elements = elements\r\n  }\r\n\r\n  /***\r\n   * Sets the matrix from 16 numbers\r\n   *\r\n   * @param n11 - number\r\n   * @param n12 - number\r\n   * @param n13 - number\r\n   * @param n14 - number\r\n   * @param n21 - number\r\n   * @param n22 - number\r\n   * @param n23 - number\r\n   * @param n24 - number\r\n   * @param n31 - number\r\n   * @param n32 - number\r\n   * @param n33 - number\r\n   * @param n34 - number\r\n   * @param n41 - number\r\n   * @param n42 - number\r\n   * @param n43 - number\r\n   * @param n44 - number\r\n   *\r\n   * @returns - this {@link Mat4} after being set\r\n   */\r\n  set(\r\n    n11: number,\r\n    n12: number,\r\n    n13: number,\r\n    n14: number,\r\n    n21: number,\r\n    n22: number,\r\n    n23: number,\r\n    n24: number,\r\n    n31: number,\r\n    n32: number,\r\n    n33: number,\r\n    n34: number,\r\n    n41: number,\r\n    n42: number,\r\n    n43: number,\r\n    n44: number\r\n  ): Mat4 {\r\n    const te = this.elements\r\n\r\n    te[0] = n11\r\n    te[1] = n12\r\n    te[2] = n13\r\n    te[3] = n14\r\n    te[4] = n21\r\n    te[5] = n22\r\n    te[6] = n23\r\n    te[7] = n24\r\n    te[8] = n31\r\n    te[9] = n32\r\n    te[10] = n33\r\n    te[11] = n34\r\n    te[12] = n41\r\n    te[13] = n42\r\n    te[14] = n43\r\n    te[15] = n44\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Sets the {@link Mat4} to an identity matrix\r\n   * @returns - this {@link Mat4} after being set\r\n   */\r\n  identity(): Mat4 {\r\n    // prettier-ignore\r\n    this.set(\r\n      1, 0, 0, 0,\r\n      0, 1, 0, 0,\r\n      0, 0, 1, 0,\r\n      0, 0, 0, 1\r\n    )\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Sets the {@link Mat4} values from an array\r\n   * @param array - array to use\r\n   * @returns - this {@link Mat4} after being set\r\n   */\r\n  // prettier-ignore\r\n  setFromArray(array: Float32Array | number[] = new Float32Array([\r\n    1, 0, 0, 0,\r\n    0, 1, 0, 0,\r\n    0, 0, 1, 0,\r\n    0, 0, 0, 1\r\n  ])): Mat4 {\r\n    for (let i = 0; i < this.elements.length; i++) {\r\n      this.elements[i] = array[i]\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Copy another {@link Mat4}\r\n   * @param matrix - matrix to copy\r\n   * @returns - this {@link Mat4} after being set\r\n   */\r\n  copy(matrix: Mat4 = new Mat4()): Mat4 {\r\n    const array = matrix.elements\r\n    this.elements[0] = array[0]\r\n    this.elements[1] = array[1]\r\n    this.elements[2] = array[2]\r\n    this.elements[3] = array[3]\r\n    this.elements[4] = array[4]\r\n    this.elements[5] = array[5]\r\n    this.elements[6] = array[6]\r\n    this.elements[7] = array[7]\r\n    this.elements[8] = array[8]\r\n    this.elements[9] = array[9]\r\n    this.elements[10] = array[10]\r\n    this.elements[11] = array[11]\r\n    this.elements[12] = array[12]\r\n    this.elements[13] = array[13]\r\n    this.elements[14] = array[14]\r\n    this.elements[15] = array[15]\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Clone a {@link Mat4}\r\n   * @returns - cloned {@link Mat4}\r\n   */\r\n  clone(): Mat4 {\r\n    return new Mat4().copy(this)\r\n  }\r\n\r\n  /**\r\n   * Multiply this {@link Mat4} with another {@link Mat4}\r\n   * @param matrix - {@link Mat4} to multiply with\r\n   * @returns - this {@link Mat4} after multiplication\r\n   */\r\n  multiply(matrix: Mat4 = new Mat4()): Mat4 {\r\n    return this.multiplyMatrices(this, matrix)\r\n  }\r\n\r\n  /**\r\n   * Multiply another {@link Mat4} with this {@link Mat4}\r\n   * @param matrix - {@link Mat4} to multiply with\r\n   * @returns - this {@link Mat4} after multiplication\r\n   */\r\n  premultiply(matrix: Mat4 = new Mat4()): Mat4 {\r\n    return this.multiplyMatrices(matrix, this)\r\n  }\r\n\r\n  /**\r\n   * Multiply two {@link Mat4}\r\n   * @param a - first {@link Mat4}\r\n   * @param b - second {@link Mat4}\r\n   * @returns - {@link Mat4} resulting from the multiplication\r\n   */\r\n  multiplyMatrices(a: Mat4 = new Mat4(), b: Mat4 = new Mat4()): Mat4 {\r\n    const ae = a.elements\r\n    const be = b.elements\r\n    const te = this.elements\r\n\r\n    const a11 = ae[0],\r\n      a12 = ae[4],\r\n      a13 = ae[8],\r\n      a14 = ae[12]\r\n    const a21 = ae[1],\r\n      a22 = ae[5],\r\n      a23 = ae[9],\r\n      a24 = ae[13]\r\n    const a31 = ae[2],\r\n      a32 = ae[6],\r\n      a33 = ae[10],\r\n      a34 = ae[14]\r\n    const a41 = ae[3],\r\n      a42 = ae[7],\r\n      a43 = ae[11],\r\n      a44 = ae[15]\r\n\r\n    const b11 = be[0],\r\n      b12 = be[4],\r\n      b13 = be[8],\r\n      b14 = be[12]\r\n    const b21 = be[1],\r\n      b22 = be[5],\r\n      b23 = be[9],\r\n      b24 = be[13]\r\n    const b31 = be[2],\r\n      b32 = be[6],\r\n      b33 = be[10],\r\n      b34 = be[14]\r\n    const b41 = be[3],\r\n      b42 = be[7],\r\n      b43 = be[11],\r\n      b44 = be[15]\r\n\r\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41\r\n    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42\r\n    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43\r\n    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44\r\n\r\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41\r\n    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42\r\n    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43\r\n    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44\r\n\r\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41\r\n    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42\r\n    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43\r\n    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44\r\n\r\n    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41\r\n    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42\r\n    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43\r\n    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * {@link premultiply} this {@link Mat4} by a translate matrix (i.e. translateMatrix = new Mat4().translate(vector))\r\n   * @param vector - translation {@link Vec3 | vector} to use\r\n   * @returns - this {@link Mat4} after the premultiply translate operation\r\n   */\r\n  premultiplyTranslate(vector: Vec3 = new Vec3()): Mat4 {\r\n    // premultiply by a translateMatrix, ie translateMatrix = new Mat4().translate(vector)\r\n    // where translateMatrix[0] = 1, translateMatrix[5] = 1, scaleMatrix[10] = 1, translateMatrix[15] = 1 from identity\r\n    // and translateMatrix[12] = vector.x, translateMatrix[13] = vector.y, translateMatrix[14] = vector.z from translation\r\n    // equivalent (but faster) to this.multiply(translateMatrix, this)\r\n\r\n    // from identity matrix\r\n    const a11 = 1\r\n    const a22 = 1\r\n    const a33 = 1\r\n    const a44 = 1\r\n\r\n    // from translation\r\n    const a14 = vector.x\r\n    const a24 = vector.y\r\n    const a34 = vector.z\r\n\r\n    const be = this.elements\r\n    const te = this.elements\r\n\r\n    const b11 = be[0],\r\n      b12 = be[4],\r\n      b13 = be[8],\r\n      b14 = be[12]\r\n    const b21 = be[1],\r\n      b22 = be[5],\r\n      b23 = be[9],\r\n      b24 = be[13]\r\n    const b31 = be[2],\r\n      b32 = be[6],\r\n      b33 = be[10],\r\n      b34 = be[14]\r\n    const b41 = be[3],\r\n      b42 = be[7],\r\n      b43 = be[11],\r\n      b44 = be[15]\r\n\r\n    te[0] = a11 * b11 + a14 * b41\r\n    te[4] = a11 * b12 + a14 * b42\r\n    te[8] = a11 * b13 + a14 * b43\r\n    te[12] = a11 * b14 + a14 * b44\r\n\r\n    te[1] = a22 * b21 + a24 * b41\r\n    te[5] = a22 * b22 + a24 * b42\r\n    te[9] = a22 * b23 + a24 * b43\r\n    te[13] = a22 * b24 + a24 * b44\r\n\r\n    te[2] = a33 * b31 + a34 * b41\r\n    te[6] = a33 * b32 + a34 * b42\r\n    te[10] = a33 * b33 + a34 * b43\r\n    te[14] = a33 * b34 + a34 * b44\r\n\r\n    te[3] = a44 * b41\r\n    te[7] = a44 * b42\r\n    te[11] = a44 * b43\r\n    te[15] = a44 * b44\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * {@link premultiply} this {@link Mat4} by a scale matrix (i.e. translateMatrix = new Mat4().scale(vector))\r\n   * @param vector - scale {@link Vec3 | vector} to use\r\n   * @returns - this {@link Mat4} after the premultiply scale operation\r\n   */\r\n  premultiplyScale(vector: Vec3 = new Vec3()): Mat4 {\r\n    // premultiply by a scaleMatrix, ie scaleMatrix = new Mat4().scale(vector)\r\n    // where scaleMatrix[0] = vector.x, scaleMatrix[5] = vector.y, scaleMatrix[10] = vector.z, scaleMatrix[15] = 1\r\n    // equivalent (but faster) to this.multiply(scaleMatrix, this)\r\n\r\n    const be = this.elements\r\n    const te = this.elements\r\n\r\n    const a11 = vector.x\r\n    const a22 = vector.y\r\n    const a33 = vector.z\r\n    const a44 = 1\r\n\r\n    const b11 = be[0],\r\n      b12 = be[4],\r\n      b13 = be[8],\r\n      b14 = be[12]\r\n    const b21 = be[1],\r\n      b22 = be[5],\r\n      b23 = be[9],\r\n      b24 = be[13]\r\n    const b31 = be[2],\r\n      b32 = be[6],\r\n      b33 = be[10],\r\n      b34 = be[14]\r\n    const b41 = be[3],\r\n      b42 = be[7],\r\n      b43 = be[11],\r\n      b44 = be[15]\r\n\r\n    te[0] = a11 * b11\r\n    te[4] = a11 * b12\r\n    te[8] = a11 * b13\r\n    te[12] = a11 * b14\r\n\r\n    te[1] = a22 * b21\r\n    te[5] = a22 * b22\r\n    te[9] = a22 * b23\r\n    te[13] = a22 * b24\r\n\r\n    te[2] = a33 * b31\r\n    te[6] = a33 * b32\r\n    te[10] = a33 * b33\r\n    te[14] = a33 * b34\r\n\r\n    te[3] = a44 * b41\r\n    te[7] = a44 * b42\r\n    te[11] = a44 * b43\r\n    te[15] = a44 * b44\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Mat4} inverse\r\n   * @returns - the inverted {@link Mat4}\r\n   */\r\n  invert() {\r\n    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\r\n    const te = this.elements,\r\n      n11 = te[0],\r\n      n21 = te[1],\r\n      n31 = te[2],\r\n      n41 = te[3],\r\n      n12 = te[4],\r\n      n22 = te[5],\r\n      n32 = te[6],\r\n      n42 = te[7],\r\n      n13 = te[8],\r\n      n23 = te[9],\r\n      n33 = te[10],\r\n      n43 = te[11],\r\n      n14 = te[12],\r\n      n24 = te[13],\r\n      n34 = te[14],\r\n      n44 = te[15],\r\n      t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\r\n      t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\r\n      t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\r\n      t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34\r\n\r\n    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14\r\n\r\n    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\r\n\r\n    const detInv = 1 / det\r\n\r\n    te[0] = t11 * detInv\r\n    te[1] =\r\n      (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) *\r\n      detInv\r\n    te[2] =\r\n      (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) *\r\n      detInv\r\n    te[3] =\r\n      (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) *\r\n      detInv\r\n\r\n    te[4] = t12 * detInv\r\n    te[5] =\r\n      (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) *\r\n      detInv\r\n    te[6] =\r\n      (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) *\r\n      detInv\r\n    te[7] =\r\n      (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) *\r\n      detInv\r\n\r\n    te[8] = t13 * detInv\r\n    te[9] =\r\n      (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) *\r\n      detInv\r\n    te[10] =\r\n      (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) *\r\n      detInv\r\n    te[11] =\r\n      (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) *\r\n      detInv\r\n\r\n    te[12] = t14 * detInv\r\n    te[13] =\r\n      (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) *\r\n      detInv\r\n    te[14] =\r\n      (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) *\r\n      detInv\r\n    te[15] =\r\n      (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) *\r\n      detInv\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Clone and invert the {@link Mat4}\r\n   * @returns - inverted cloned {@link Mat4}\r\n   */\r\n  getInverse(): Mat4 {\r\n    return this.clone().invert()\r\n  }\r\n\r\n  /**\r\n   * Transpose this {@link Mat4}\r\n   * @returns - the transposed {@link Mat4}\r\n   */\r\n  transpose(): Mat4 {\r\n    let t\r\n    const te = this.elements\r\n\r\n    t = te[1]\r\n    te[1] = te[4]\r\n    te[4] = t\r\n\r\n    t = te[2]\r\n    te[2] = te[8]\r\n    te[8] = t\r\n\r\n    t = te[3]\r\n    te[3] = te[12]\r\n    te[12] = t\r\n\r\n    t = te[6]\r\n    te[6] = te[9]\r\n    te[9] = t\r\n\r\n    t = te[7]\r\n    te[7] = te[13]\r\n    te[13] = t\r\n\r\n    t = te[11]\r\n    te[11] = te[14]\r\n    te[14] = t\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Translate a {@link Mat4}\r\n   * @param vector - translation {@link Vec3 | vector} to use\r\n   * @returns - translated {@link Mat4}\r\n   */\r\n  translate(vector: Vec3 = new Vec3()): Mat4 {\r\n    const a = this.elements\r\n\r\n    a[12] = a[0] * vector.x + a[4] * vector.y + a[8] * vector.z + a[12]\r\n    a[13] = a[1] * vector.x + a[5] * vector.y + a[9] * vector.z + a[13]\r\n    a[14] = a[2] * vector.x + a[6] * vector.y + a[10] * vector.z + a[14]\r\n    a[15] = a[3] * vector.x + a[7] * vector.y + a[11] * vector.z + a[15]\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Get the translation {@link Vec3} component of a {@link Mat4}\r\n   * @param position - {@link Vec3} to set\r\n   * @returns - translation {@link Vec3} component of this {@link Mat4}\r\n   */\r\n  getTranslation(position = new Vec3()): Vec3 {\r\n    return position.set(this.elements[12], this.elements[13], this.elements[14])\r\n  }\r\n\r\n  /**\r\n   * Scale a {@link Mat4}\r\n   * @param vector - scale {@link Vec3 | vector} to use\r\n   * @returns - scaled {@link Mat4}\r\n   */\r\n  scale(vector: Vec3 = new Vec3()): Mat4 {\r\n    const a = this.elements\r\n\r\n    a[0] *= vector.x\r\n    a[1] *= vector.x\r\n    a[2] *= vector.x\r\n    a[3] *= vector.x\r\n    a[4] *= vector.y\r\n    a[5] *= vector.y\r\n    a[6] *= vector.y\r\n    a[7] *= vector.y\r\n    a[8] *= vector.z\r\n    a[9] *= vector.z\r\n    a[10] *= vector.z\r\n    a[11] *= vector.z\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Rotate a {@link Mat4} from a {@link Quat | quaternion}\r\n   * @param quaternion - {@link Quat | quaternion} to use\r\n   * @returns - rotated {@link Mat4}\r\n   */\r\n  rotateFromQuaternion(quaternion: Quat = new Quat()): Mat4 {\r\n    const te = this.elements\r\n\r\n    const x = quaternion.elements[0],\r\n      y = quaternion.elements[1],\r\n      z = quaternion.elements[2],\r\n      w = quaternion.elements[3]\r\n\r\n    const x2 = x + x,\r\n      y2 = y + y,\r\n      z2 = z + z\r\n    const xx = x * x2,\r\n      xy = x * y2,\r\n      xz = x * z2\r\n    const yy = y * y2,\r\n      yz = y * z2,\r\n      zz = z * z2\r\n    const wx = w * x2,\r\n      wy = w * y2,\r\n      wz = w * z2\r\n\r\n    te[0] = 1 - (yy + zz)\r\n    te[4] = xy - wz\r\n    te[8] = xz + wy\r\n\r\n    te[1] = xy + wz\r\n    te[5] = 1 - (xx + zz)\r\n    te[9] = yz - wx\r\n\r\n    te[2] = xz - wy\r\n    te[6] = yz + wx\r\n    te[10] = 1 - (xx + yy)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Get the maximum scale of the {@link Mat4} on all axes\r\n   * @returns - maximum scale of the {@link Mat4}\r\n   */\r\n  getMaxScaleOnAxis(): number {\r\n    const te = this.elements\r\n\r\n    const scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2]\r\n    const scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6]\r\n    const scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10]\r\n\r\n    return Math.sqrt(Math.max(scaleXSq, scaleYSq, scaleZSq))\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale\r\n   * Equivalent for applying translation, rotation and scale matrices but much faster\r\n   * Source code from: http://glmatrix.net/docs/mat4.js.html\r\n   *\r\n   * @param translation - translation {@link Vec3 | vector} to use\r\n   * @param quaternion - {@link Quat | quaternion} to use\r\n   * @param scale - translation {@link Vec3 | vector} to use\r\n   * @returns - transformed {@link Mat4}\r\n   */\r\n  compose(translation: Vec3 = new Vec3(), quaternion: Quat = new Quat(), scale: Vec3 = new Vec3(1)): Mat4 {\r\n    const matrix = this.elements\r\n\r\n    // Quaternion math\r\n    const x = quaternion.elements[0],\r\n      y = quaternion.elements[1],\r\n      z = quaternion.elements[2],\r\n      w = quaternion.elements[3]\r\n\r\n    const x2 = x + x\r\n    const y2 = y + y\r\n    const z2 = z + z\r\n    const xx = x * x2\r\n    const xy = x * y2\r\n    const xz = x * z2\r\n    const yy = y * y2\r\n    const yz = y * z2\r\n    const zz = z * z2\r\n    const wx = w * x2\r\n    const wy = w * y2\r\n    const wz = w * z2\r\n    const sx = scale.x\r\n    const sy = scale.y\r\n    const sz = scale.z\r\n\r\n    matrix[0] = (1 - (yy + zz)) * sx\r\n    matrix[1] = (xy + wz) * sx\r\n    matrix[2] = (xz - wy) * sx\r\n    matrix[3] = 0\r\n    matrix[4] = (xy - wz) * sy\r\n    matrix[5] = (1 - (xx + zz)) * sy\r\n    matrix[6] = (yz + wx) * sy\r\n    matrix[7] = 0\r\n    matrix[8] = (xz + wy) * sz\r\n    matrix[9] = (yz - wx) * sz\r\n    matrix[10] = (1 - (xx + yy)) * sz\r\n    matrix[11] = 0\r\n    matrix[12] = translation.x\r\n    matrix[13] = translation.y\r\n    matrix[14] = translation.z\r\n    matrix[15] = 1\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale, rotating and scaling around the given {@link Vec3 | origin vector}\r\n   * Equivalent for applying translation, rotation and scale matrices but much faster\r\n   * Source code from: http://glmatrix.net/docs/mat4.js.html\r\n   *\r\n   * @param translation - translation {@link Vec3 | vector} to use\r\n   * @param quaternion - {@link Quat | quaternion} to use\r\n   * @param scale - translation {@link Vec3 | vector} to use\r\n   * @param origin - origin {@link Vec3 | vector} around which to scale and rotate\r\n   * @returns - transformed {@link Mat4}\r\n   */\r\n  composeFromOrigin(\r\n    translation: Vec3 = new Vec3(),\r\n    quaternion: Quat = new Quat(),\r\n    scale: Vec3 = new Vec3(1),\r\n    origin: Vec3 = new Vec3()\r\n  ): Mat4 {\r\n    const matrix = this.elements\r\n\r\n    // Quaternion math\r\n    const x = quaternion.elements[0],\r\n      y = quaternion.elements[1],\r\n      z = quaternion.elements[2],\r\n      w = quaternion.elements[3]\r\n\r\n    const x2 = x + x\r\n    const y2 = y + y\r\n    const z2 = z + z\r\n\r\n    const xx = x * x2\r\n    const xy = x * y2\r\n    const xz = x * z2\r\n    const yy = y * y2\r\n    const yz = y * z2\r\n    const zz = z * z2\r\n\r\n    const wx = w * x2\r\n    const wy = w * y2\r\n    const wz = w * z2\r\n\r\n    const sx = scale.x\r\n    const sy = scale.y\r\n    const sz = scale.z\r\n\r\n    const ox = origin.x\r\n    const oy = origin.y\r\n    const oz = origin.z\r\n\r\n    const out0 = (1 - (yy + zz)) * sx\r\n    const out1 = (xy + wz) * sx\r\n    const out2 = (xz - wy) * sx\r\n    const out4 = (xy - wz) * sy\r\n    const out5 = (1 - (xx + zz)) * sy\r\n    const out6 = (yz + wx) * sy\r\n    const out8 = (xz + wy) * sz\r\n    const out9 = (yz - wx) * sz\r\n    const out10 = (1 - (xx + yy)) * sz\r\n\r\n    matrix[0] = out0\r\n    matrix[1] = out1\r\n    matrix[2] = out2\r\n    matrix[3] = 0\r\n    matrix[4] = out4\r\n    matrix[5] = out5\r\n    matrix[6] = out6\r\n    matrix[7] = 0\r\n    matrix[8] = out8\r\n    matrix[9] = out9\r\n    matrix[10] = out10\r\n    matrix[11] = 0\r\n    matrix[12] = translation.x + ox - (out0 * ox + out4 * oy + out8 * oz)\r\n    matrix[13] = translation.y + oy - (out1 * ox + out5 * oy + out9 * oz)\r\n    matrix[14] = translation.z + oz - (out2 * ox + out6 * oy + out10 * oz)\r\n    matrix[15] = 1\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Set this {@link Mat4} as a rotation matrix based on an eye, target and up {@link Vec3 | vectors}\r\n   * @param eye - {@link Vec3 | position vector} of the object that should be rotated\r\n   * @param target - {@link Vec3 | target vector} to look at\r\n   * @param up - up {@link Vec3 | vector}\r\n   * @returns - rotated {@link Mat4}\r\n   */\r\n  lookAt(eye: Vec3 = new Vec3(), target: Vec3 = new Vec3(), up: Vec3 = new Vec3(0, 1, 0)): Mat4 {\r\n    const te = this.elements\r\n\r\n    zAxis.copy(eye).sub(target)\r\n\r\n    if (zAxis.lengthSq() === 0) {\r\n      // eye and target are in the same position\r\n      zAxis.z = 1\r\n    }\r\n\r\n    zAxis.normalize()\r\n    xAxis.crossVectors(up, zAxis)\r\n\r\n    if (xAxis.lengthSq() === 0) {\r\n      // up and z are parallel\r\n      if (Math.abs(up.z) === 1) {\r\n        zAxis.x += 0.0001\r\n      } else {\r\n        zAxis.z += 0.0001\r\n      }\r\n\r\n      zAxis.normalize()\r\n      xAxis.crossVectors(up, zAxis)\r\n    }\r\n\r\n    xAxis.normalize()\r\n    yAxis.crossVectors(zAxis, xAxis)\r\n\r\n    te[0] = xAxis.x\r\n    te[1] = xAxis.y\r\n    te[2] = xAxis.z\r\n    te[3] = 0\r\n    te[4] = yAxis.x\r\n    te[5] = yAxis.y\r\n    te[6] = yAxis.z\r\n    te[7] = 0\r\n    te[8] = zAxis.x\r\n    te[9] = zAxis.y\r\n    te[10] = zAxis.z\r\n    te[11] = 0\r\n    te[12] = eye.x\r\n    te[13] = eye.y\r\n    te[14] = eye.z\r\n    te[15] = 1\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Compute a view {@link Mat4} matrix.\r\n   *\r\n   * This is a view matrix which transforms all other objects\r\n   * to be in the space of the view defined by the parameters.\r\n   *\r\n   * Equivalent to `matrix.lookAt(eye, target, up).invert()` but faster.\r\n   *\r\n   * @param eye - the position of the object.\r\n   * @param target - the position meant to be aimed at.\r\n   * @param up - a vector pointing up.\r\n   * @returns - the view {@link Mat4} matrix.\r\n   */\r\n  makeView(eye: Vec3 = new Vec3(), target: Vec3 = new Vec3(), up: Vec3 = new Vec3(0, 1, 0)): Mat4 {\r\n    const te = this.elements\r\n\r\n    zAxis.copy(eye).sub(target).normalize()\r\n    xAxis.crossVectors(up, zAxis).normalize()\r\n    yAxis.crossVectors(zAxis, xAxis).normalize()\r\n\r\n    te[0] = xAxis.x\r\n    te[1] = yAxis.x\r\n    te[2] = zAxis.x\r\n    te[3] = 0\r\n    te[4] = xAxis.y\r\n    te[5] = yAxis.y\r\n    te[6] = zAxis.y\r\n    te[7] = 0\r\n    te[8] = xAxis.z\r\n    te[9] = yAxis.z\r\n    te[10] = zAxis.z\r\n    te[11] = 0\r\n\r\n    te[12] = -(xAxis.x * eye.x + xAxis.y * eye.y + xAxis.z * eye.z)\r\n    te[13] = -(yAxis.x * eye.x + yAxis.y * eye.y + yAxis.z * eye.z)\r\n    te[14] = -(zAxis.x * eye.x + zAxis.y * eye.y + zAxis.z * eye.z)\r\n    te[15] = 1\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Create an orthographic {@link Mat4} matrix based on the parameters. Transforms from\r\n   *  * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\r\n   *  * and 0 to +1 in z.\r\n   *\r\n   * @param parameters - parameters used to create the camera orthographic matrix.\r\n   * @param parameters.left - the left side of the camera near clipping plane viewport.\r\n   * @param parameters.right - the right side of the camera near clipping plane viewport.\r\n   * @param parameters.bottom - the bottom of the camera near clipping plane viewport.\r\n   * @param parameters.top - the top of the camera near clipping plane viewport.\r\n   * @param parameters.near - the camera near plane.\r\n   * @param parameters.far - the camera far plane.\r\n   * @returns - the camera orthographic {@link Mat4} matrix.\r\n   */\r\n  makeOrthographic({\r\n    left,\r\n    right,\r\n    bottom,\r\n    top,\r\n    near,\r\n    far,\r\n  }: {\r\n    left: number\r\n    right: number\r\n    bottom: number\r\n    top: number\r\n    near: number\r\n    far: number\r\n  }): Mat4 {\r\n    const te = this.elements\r\n\r\n    te[0] = 2 / (right - left)\r\n    te[1] = 0\r\n    te[2] = 0\r\n    te[3] = 0\r\n\r\n    te[4] = 0\r\n    te[5] = 2 / (top - bottom)\r\n    te[6] = 0\r\n    te[7] = 0\r\n\r\n    te[8] = 0\r\n    te[9] = 0\r\n    te[10] = 1 / (near - far)\r\n    te[11] = 0\r\n\r\n    te[12] = (right + left) / (left - right)\r\n    te[13] = (top + bottom) / (bottom - top)\r\n    te[14] = near / (near - far)\r\n    te[15] = 1\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Create a perspective {@link Mat4} matrix based on the parameters.\r\n   *\r\n   * Note, The matrix generated sends the viewing frustum to the unit box.\r\n   * We assume a unit box extending from -1 to 1 in the x and y dimensions and\r\n   * from -1 to 1 in the z dimension, as three.js and more generally WebGL handles it.\r\n   *\r\n   * @param parameters - parameters used to create the camera perspective matrix.\r\n   * @param parameters.fov - the camera field of view (in radians).\r\n   * @param parameters.aspect - the camera aspect ratio (width / height).\r\n   * @param parameters.near - the camera near plane.\r\n   * @param parameters.far - the camera far plane.\r\n   * @returns - the camera perspective {@link Mat4} matrix.\r\n   */\r\n  makePerspective({ fov, aspect, near, far }: { fov: number; aspect: number; near: number; far: number }): Mat4 {\r\n    const top = near * Math.tan((Math.PI / 180) * 0.5 * fov)\r\n    const height = 2 * top\r\n    const width = aspect * height\r\n    const left = -0.5 * width\r\n\r\n    const right = left + width\r\n    const bottom = top - height\r\n\r\n    const x = (2 * near) / (right - left)\r\n    const y = (2 * near) / (top - bottom)\r\n\r\n    const a = (right + left) / (right - left)\r\n    const b = (top + bottom) / (top - bottom)\r\n\r\n    // this should handle depth from 0 to 1\r\n    // and correct near / far clipping planes\r\n    // see https://github.com/mrdoob/three.js/blob/master/src/math/Matrix4.js#L777\r\n    const c = -far / (far - near)\r\n    const d = (-far * near) / (far - near)\r\n\r\n    // prettier-ignore\r\n    this.set(\r\n      x, 0, 0, 0,\r\n      0, y, 0, 0,\r\n      a, b, c, -1,\r\n      0, 0, d, 0\r\n    )\r\n\r\n    return this\r\n  }\r\n}\r\n","import { Vec3 } from '../../math/Vec3'\r\nimport { Quat } from '../../math/Quat'\r\nimport { Mat4 } from '../../math/Mat4'\r\n\r\nlet objectIndex = 0\r\nconst tempMatrix = new Mat4()\r\n\r\n/** Defines all kind of possible {@link Object3D} matrix types */\r\nexport type Object3DMatricesType = 'model' | 'world'\r\n\r\n/**\r\n * Defines an {@link Object3D} matrix object\r\n */\r\nexport interface Object3DTransformMatrix {\r\n  /** The {@link Mat4 | matrix} used */\r\n  matrix: Mat4\r\n  /** Whether we should update the {@link Mat4 | matrix} */\r\n  shouldUpdate: boolean\r\n  /** Function to update our {@link Mat4 | matrix} */\r\n  onUpdate: () => void\r\n}\r\n\r\n/** Defines all possible {@link Object3DTransformMatrix | matrix object} used by our {@link Object3D} */\r\nexport type Object3DMatrices = Record<Object3DMatricesType, Object3DTransformMatrix>\r\n\r\n/**\r\n * Defines all necessary {@link Vec3 | vectors}/{@link Quat | quaternions} to compute a 3D {@link Mat4 | model matrix}\r\n */\r\nexport interface Object3DTransforms {\r\n  /** Transformation origin object */\r\n  origin: {\r\n    /** Transformation origin {@link Vec3 | vector} relative to the {@link Object3D} */\r\n    model: Vec3\r\n  }\r\n  /** Model {@link Quat | quaternion} defining its rotation in 3D space */\r\n  quaternion: Quat\r\n  /** Model rotation {@link Vec3 | vector} used to compute its {@link Quat | quaternion} */\r\n  rotation: Vec3\r\n  /** Position object */\r\n  position: {\r\n    /** Position {@link Vec3 | vector} relative to the 3D world */\r\n    world: Vec3\r\n  }\r\n  /** Model 3D scale {@link Vec3 | vector} */\r\n  scale: Vec3\r\n}\r\n\r\n/**\r\n * Used to create an object with transformation properties such as position, scale, rotation and transform origin {@link Vec3 | vectors} and a {@link Quat | quaternion} in order to compute the {@link Object3D#modelMatrix | model matrix} and {@link Object3D#worldMatrix | world matrix}.\r\n *\r\n * If an {@link Object3D} does not have any {@link Object3D#parent | parent}, then its {@link Object3D#modelMatrix | model matrix} and {@link Object3D#worldMatrix | world matrix} are the same.\r\n *\r\n * The transformations {@link Vec3 | vectors} are reactive to changes, which mean that updating one of their components will automatically update the {@link Object3D#modelMatrix | model matrix} and {@link Object3D#worldMatrix | world matrix}.\r\n */\r\nexport class Object3D {\r\n  /** {@link Object3DTransforms | Transformation object} of the {@link Object3D} */\r\n  transforms: Object3DTransforms\r\n  /** {@link Object3DMatrices | Matrices object} of the {@link Object3D} */\r\n  matrices: Object3DMatrices\r\n\r\n  /** Parent {@link Object3D} in the scene graph, used to compute the {@link worldMatrix | world matrix} */\r\n  private _parent: null | Object3D\r\n  /** Children {@link Object3D} in the scene graph, used to compute their own {@link worldMatrix | world matrix} */\r\n  children: Object3D[]\r\n\r\n  /** Index (order of creation) of this {@link Object3D}. Used in the {@link parent} / {@link children} relation. */\r\n  object3DIndex: number\r\n\r\n  /** Whether at least one of this {@link Object3D} matrix needs an update. */\r\n  matricesNeedUpdate: boolean\r\n\r\n  /**\r\n   * Object3D constructor\r\n   */\r\n  constructor() {\r\n    this._parent = null\r\n    this.children = []\r\n\r\n    this.matricesNeedUpdate = false\r\n\r\n    Object.defineProperty(this as Object3D, 'object3DIndex', { value: objectIndex++ })\r\n\r\n    this.setMatrices()\r\n    this.setTransforms()\r\n  }\r\n\r\n  /* PARENT */\r\n\r\n  /**\r\n   * Get the parent of this {@link Object3D} if any\r\n   */\r\n  get parent(): Object3D | null {\r\n    return this._parent\r\n  }\r\n\r\n  /**\r\n   * Set the parent of this {@link Object3D}\r\n   * @param value - new parent to set, could be an {@link Object3D} or null\r\n   */\r\n  set parent(value: Object3D | null) {\r\n    if (this._parent && value && this._parent.object3DIndex === value.object3DIndex) {\r\n      return\r\n    }\r\n\r\n    if (this._parent) {\r\n      // if we already have a parent, remove it first\r\n      this._parent.children = this._parent.children.filter((child) => child.object3DIndex !== this.object3DIndex)\r\n    }\r\n\r\n    if (value) {\r\n      this.shouldUpdateWorldMatrix()\r\n    }\r\n\r\n    this._parent = value\r\n    this._parent?.children.push(this)\r\n  }\r\n\r\n  /* TRANSFORMS */\r\n\r\n  /**\r\n   * Set our transforms properties and {@link Vec3#onChange | vectors onChange} callbacks\r\n   */\r\n  setTransforms() {\r\n    this.transforms = {\r\n      origin: {\r\n        model: new Vec3(),\r\n      },\r\n      quaternion: new Quat(),\r\n      rotation: new Vec3(),\r\n      position: {\r\n        world: new Vec3(),\r\n      },\r\n      scale: new Vec3(1),\r\n    }\r\n\r\n    this.rotation.onChange(() => this.applyRotation())\r\n    this.position.onChange(() => this.applyPosition())\r\n    this.scale.onChange(() => this.applyScale())\r\n    this.transformOrigin.onChange(() => this.applyTransformOrigin())\r\n  }\r\n\r\n  /**\r\n   * Get our rotation {@link Vec3 | vector}\r\n   */\r\n  get rotation(): Vec3 {\r\n    return this.transforms.rotation\r\n  }\r\n\r\n  /**\r\n   * Set our rotation {@link Vec3 | vector}\r\n   * @param value - new rotation {@link Vec3 | vector}\r\n   */\r\n  set rotation(value: Vec3) {\r\n    this.transforms.rotation = value\r\n    this.applyRotation()\r\n  }\r\n\r\n  /**\r\n   * Get our {@link Quat | quaternion}\r\n   */\r\n  get quaternion(): Quat {\r\n    return this.transforms.quaternion\r\n  }\r\n\r\n  /**\r\n   * Set our {@link Quat | quaternion}\r\n   * @param value - new {@link Quat | quaternion}\r\n   */\r\n  set quaternion(value: Quat) {\r\n    this.transforms.quaternion = value\r\n  }\r\n\r\n  /**\r\n   * Get our position {@link Vec3 | vector}\r\n   */\r\n  get position(): Vec3 {\r\n    return this.transforms.position.world\r\n  }\r\n\r\n  /**\r\n   * Set our position {@link Vec3 | vector}\r\n   * @param value - new position {@link Vec3 | vector}\r\n   */\r\n  set position(value: Vec3) {\r\n    this.transforms.position.world = value\r\n  }\r\n\r\n  /**\r\n   * Get our scale {@link Vec3 | vector}\r\n   */\r\n  get scale(): Vec3 {\r\n    return this.transforms.scale\r\n  }\r\n\r\n  /**\r\n   * Set our scale {@link Vec3 | vector}\r\n   * @param value - new scale {@link Vec3 | vector}\r\n   */\r\n  set scale(value: Vec3) {\r\n    // force scale to 1 on Z axis\r\n    this.transforms.scale = value\r\n    this.applyScale()\r\n  }\r\n\r\n  /**\r\n   * Get our transform origin {@link Vec3 | vector}\r\n   */\r\n  get transformOrigin(): Vec3 {\r\n    return this.transforms.origin.model\r\n  }\r\n\r\n  /**\r\n   * Set our transform origin {@link Vec3 | vector}\r\n   * @param value - new transform origin {@link Vec3 | vector}\r\n   */\r\n  set transformOrigin(value: Vec3) {\r\n    this.transforms.origin.model = value\r\n  }\r\n\r\n  /**\r\n   * Apply our rotation and tell our {@link modelMatrix | model matrix} to update\r\n   */\r\n  applyRotation() {\r\n    this.quaternion.setFromVec3(this.rotation)\r\n\r\n    this.shouldUpdateModelMatrix()\r\n  }\r\n\r\n  /**\r\n   * Tell our {@link modelMatrix | model matrix} to update\r\n   */\r\n  applyPosition() {\r\n    this.shouldUpdateModelMatrix()\r\n  }\r\n\r\n  /**\r\n   * Tell our {@link modelMatrix | model matrix} to update\r\n   */\r\n  applyScale() {\r\n    this.shouldUpdateModelMatrix()\r\n  }\r\n\r\n  /**\r\n   * Tell our {@link modelMatrix | model matrix} to update\r\n   */\r\n  applyTransformOrigin() {\r\n    this.shouldUpdateModelMatrix()\r\n  }\r\n\r\n  /* MATRICES */\r\n\r\n  /**\r\n   * Set our {@link modelMatrix | model matrix} and {@link worldMatrix | world matrix}\r\n   */\r\n  setMatrices() {\r\n    this.matrices = {\r\n      model: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: true,\r\n        onUpdate: () => this.updateModelMatrix(),\r\n      },\r\n      world: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: true,\r\n        onUpdate: () => this.updateWorldMatrix(),\r\n      },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get our {@link Mat4 | model matrix}\r\n   */\r\n  get modelMatrix(): Mat4 {\r\n    return this.matrices.model.matrix\r\n  }\r\n\r\n  /**\r\n   * Set our {@link Mat4 | model matrix}\r\n   * @param value - new {@link Mat4 | model matrix}\r\n   */\r\n  set modelMatrix(value: Mat4) {\r\n    this.matrices.model.matrix = value\r\n    this.shouldUpdateModelMatrix()\r\n  }\r\n\r\n  /**\r\n   * Set our {@link modelMatrix | model matrix} shouldUpdate flag to true (tell it to update)\r\n   */\r\n  shouldUpdateModelMatrix() {\r\n    this.matrices.model.shouldUpdate = true\r\n    this.shouldUpdateWorldMatrix()\r\n  }\r\n\r\n  /**\r\n   * Get our {@link Mat4 | world matrix}\r\n   */\r\n  get worldMatrix(): Mat4 {\r\n    return this.matrices.world.matrix\r\n  }\r\n\r\n  /**\r\n   * Set our {@link Mat4 | world matrix}\r\n   * @param value - new {@link Mat4 | world matrix}\r\n   */\r\n  set worldMatrix(value: Mat4) {\r\n    this.matrices.world.matrix = value\r\n    this.shouldUpdateWorldMatrix()\r\n  }\r\n\r\n  /**\r\n   * Set our {@link worldMatrix | world matrix} shouldUpdate flag to true (tell it to update)\r\n   */\r\n  shouldUpdateWorldMatrix() {\r\n    this.matrices.world.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Rotate this {@link Object3D} so it looks at the {@link Vec3 | target}\r\n   * @param target - {@link Vec3 | target} to look at\r\n   * @param position - {@link Vec3 | postion} from which to look at\r\n   */\r\n  lookAt(target: Vec3 = new Vec3(), position = this.position) {\r\n    const rotationMatrix = tempMatrix.lookAt(target, position)\r\n    this.quaternion.setFromRotationMatrix(rotationMatrix)\r\n    this.shouldUpdateModelMatrix()\r\n  }\r\n\r\n  /**\r\n   * Update our {@link modelMatrix | model matrix}\r\n   */\r\n  updateModelMatrix() {\r\n    // compose our model transformation matrix from custom origin\r\n    this.modelMatrix = this.modelMatrix.composeFromOrigin(\r\n      this.position,\r\n      this.quaternion,\r\n      this.scale,\r\n      this.transformOrigin\r\n    )\r\n\r\n    // tell our world matrix to update\r\n    this.shouldUpdateWorldMatrix()\r\n  }\r\n\r\n  /**\r\n   * Update our {@link worldMatrix | model matrix}\r\n   */\r\n  updateWorldMatrix() {\r\n    if (!this.parent) {\r\n      this.worldMatrix.copy(this.modelMatrix)\r\n    } else {\r\n      this.worldMatrix.multiplyMatrices(this.parent.worldMatrix, this.modelMatrix)\r\n    }\r\n\r\n    // update the children world matrix as well\r\n    for (let i = 0, l = this.children.length; i < l; i++) {\r\n      this.children[i].shouldUpdateWorldMatrix()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check whether at least one of the matrix should be updated\r\n   */\r\n  shouldUpdateMatrices() {\r\n    this.matricesNeedUpdate = !!Object.values(this.matrices).find((matrix) => matrix.shouldUpdate)\r\n  }\r\n\r\n  /**\r\n   * Check at each render whether we should update our matrices, and update them if needed\r\n   */\r\n  updateMatrixStack() {\r\n    this.shouldUpdateMatrices()\r\n\r\n    if (this.matricesNeedUpdate) {\r\n      for (const matrixName in this.matrices) {\r\n        if (this.matrices[matrixName].shouldUpdate) {\r\n          this.matrices[matrixName].onUpdate()\r\n          this.matrices[matrixName].shouldUpdate = false\r\n        }\r\n      }\r\n    }\r\n\r\n    for (let i = 0, l = this.children.length; i < l; i++) {\r\n      this.children[i].updateMatrixStack()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy this {@link Object3D}. Removes its parent and set its children free.\r\n   */\r\n  destroy() {\r\n    for (let i = 0, l = this.children.length; i < l; i++) {\r\n      if (this.children[i]) this.children[i].parent = null\r\n    }\r\n\r\n    this.parent = null\r\n  }\r\n}\r\n","// texture bitwise flags\nimport { TextureBindingType } from '../bindings/Binding'\n\n/**  Defines all kinds of allowed texture usages as camel case strings. */\nexport type TextureUsageKeys = 'copySrc' | 'copyDst' | 'renderAttachment' | 'storageBinding' | 'textureBinding'\n\n/**\n * Map {@link TextureUsageKeys | texture usage names} with actual {@link GPUTextureUsageFlags | texture usage bitwise flags}.\n */\nconst textureUsages: Map<TextureUsageKeys, GPUTextureUsageFlags> = new Map([\n  ['copySrc', GPUTextureUsage.COPY_SRC],\n  ['copyDst', GPUTextureUsage.COPY_DST],\n  ['renderAttachment', GPUTextureUsage.RENDER_ATTACHMENT],\n  ['storageBinding', GPUTextureUsage.STORAGE_BINDING],\n  ['textureBinding', GPUTextureUsage.TEXTURE_BINDING],\n])\n\n/**\n * Get the corresponding {@link GPUTextureUsageFlags | texture usage bitwise flags} based on an array of {@link TextureUsageKeys | texture usage names}.\n * @param usages - array of {@link TextureUsageKeys | texture usage names}.\n * @returns - corresponding {@link GPUTextureUsageFlags | texture usage bitwise flags}.\n */\nexport const getTextureUsages = (usages: TextureUsageKeys[] = []): GPUTextureUsageFlags => {\n  return usages.reduce((acc, v) => {\n    return acc | textureUsages.get(v)\n  }, 0)\n}\n\n/**\n * Get the corresponding {@link GPUTextureUsageFlags | texture usage bitwise flags} based on an array of {@link TextureUsageKeys | texture usage names} if specified. If not, will try to fall back to a usage based on the {@link TextureBindingType | texture type}.\n * @param usages - array of {@link TextureUsageKeys | texture usage names}.\n * @param textureType - the {@link TextureBindingType | texture type}.\n * @returns - corresponding {@link GPUTextureUsageFlags | texture usage bitwise flags}.\n */\nexport const getDefaultTextureUsage = (usages: TextureUsageKeys[] = [], textureType: TextureBindingType) => {\n  if (usages.length) {\n    return getTextureUsages(usages)\n  }\n\n  return textureType !== 'storage'\n    ? GPUTextureUsage.TEXTURE_BINDING |\n        GPUTextureUsage.COPY_SRC |\n        GPUTextureUsage.COPY_DST |\n        GPUTextureUsage.RENDER_ATTACHMENT\n    : GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST\n}\n\n/**\n * Get the number of mip levels create based on {@link types/Textures.TextureSize | size}\n * @param sizes - Array containing our texture width, height and depth\n * @returns - number of mip levels\n */\nexport const getNumMipLevels = (...sizes: number[]): number => {\n  const maxSize = Math.max(...sizes)\n  return (1 + Math.log2(maxSize)) | 0\n}\n","import { Vec3 } from '../../math/Vec3'\nimport { isRenderer, Renderer } from '../renderers/utils'\nimport { TextureBinding } from '../bindings/TextureBinding'\nimport { BufferBinding } from '../bindings/BufferBinding'\nimport { Object3D } from '../objects3D/Object3D'\nimport { Mat4 } from '../../math/Mat4'\nimport { generateUUID, throwWarning } from '../../utils/utils'\nimport { BindGroupBindingElement } from '../../types/BindGroups'\nimport { DOMTextureOptions, DOMTextureParams, DOMTextureParent, TextureSize, TextureSource } from '../../types/Textures'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { DOMProjectedMesh } from '../renderers/GPURenderer'\nimport { getNumMipLevels } from './utils'\n\n/** @const - default {@link DOMTexture} parameters */\nconst defaultDOMTextureParams: DOMTextureParams = {\n  name: 'texture',\n  generateMips: false,\n  flipY: false,\n  format: 'rgba8unorm',\n  premultipliedAlpha: false,\n  placeholderColor: [0, 0, 0, 255], // default to black\n  useExternalTextures: true,\n  fromTexture: null,\n  viewDimension: '2d',\n  visibility: ['fragment'],\n  cache: true,\n}\n\n/**\n * Used to create {@link GPUTexture} or {@link GPUExternalTexture}, specially made to handle different kinds of DOM elements {@link TextureSource | sources}, like {@link HTMLImageElement}, {@link HTMLVideoElement} or {@link HTMLCanvasElement}.\n *\n * Handles the various sources loading and uploading, GPU textures creation,{@link BufferBinding | texture model matrix binding} and {@link TextureBinding | GPU texture binding}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a DOM texture\n * const imageTexture = new DOMTexture(gpuCurtains, {\n *   label: 'My image texture',\n *   name: 'imageTexture',\n * })\n *\n * // load an image\n * await imageTexture.loadImage(document.querySelector('img'))\n * ```\n */\nexport class DOMTexture extends Object3D {\n  /** The type of the {@link DOMTexture} */\n  type: string\n  /** The universal unique id of this {@link DOMTexture} */\n  readonly uuid: string\n  /** {@link Renderer} used by this {@link DOMTexture} */\n  renderer: Renderer\n\n  /** The {@link GPUTexture} used if any */\n  texture: null | GPUTexture\n  /** The {@link GPUExternalTexture} used if any */\n  externalTexture: null | GPUExternalTexture\n\n  /** The {@link DOMTexture} {@link TextureSource | source} to use */\n  source: TextureSource\n  /** The {@link GPUTexture}, matching the {@link TextureSource | source} {@link core/DOM/DOMElement.RectSize | size} (with 1 for depth) */\n  size: TextureSize\n\n  /** Options used to create this {@link DOMTexture} */\n  options: DOMTextureOptions\n\n  /** A {@link BufferBinding | buffer binding} that will hold the texture model matrix */\n  textureMatrix: BufferBinding\n  /** The bindings used by this {@link DOMTexture}, i.e. its {@link textureMatrix} and its {@link TextureBinding | GPU texture binding} */\n  bindings: BindGroupBindingElement[]\n\n  /** {@link DOMTexture} parentMesh if any */\n  private _parentMesh: DOMTextureParent\n\n  /** Whether the source has been loaded */\n  private _sourceLoaded: boolean\n  /** Whether the source has been uploaded to the GPU, handled by the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#texturesQueue | GPUDeviceManager texturesQueue array} */\n  private _sourceUploaded: boolean\n  /** Whether the texture should be uploaded to the GPU */\n  shouldUpdate: boolean\n\n  /** {@link HTMLVideoElement.requestVideoFrameCallback | requestVideoFrameCallback} returned id if used */\n  videoFrameCallbackId: null | number\n\n  /** Private {@link Vec3 | vector} used for {@link#modelMatrix} calculations, based on {@link parentMesh} {@link core/DOM/DOMElement.RectSize | size} */\n  #parentRatio: Vec3 = new Vec3(1)\n  /** Private {@link Vec3 | vector} used for {@link modelMatrix} calculations, based on {@link size | source size} */\n  #sourceRatio: Vec3 = new Vec3(1)\n  /** Private {@link Vec3 | vector} used for {@link modelMatrix} calculations, based on #parentRatio and #sourceRatio */\n  #coverScale: Vec3 = new Vec3(1)\n  /** Private rotation {@link Mat4 | matrix} based on texture {@link quaternion} */\n  #rotationMatrix: Mat4 = new Mat4()\n\n  // callbacks / events\n  /** function assigned to the {@link onSourceLoaded} callback */\n  _onSourceLoadedCallback = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onSourceUploaded} callback */\n  _onSourceUploadedCallback = () => {\n    /* allow empty callback */\n  }\n\n  /**\n   * DOMTexture constructor\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link DOMTexture}\n   * @param parameters - {@link DOMTextureParams | parameters} used to create this {@link DOMTexture}\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters = defaultDOMTextureParams) {\n    super()\n\n    this.type = 'Texture'\n\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' ' + this.type : this.type)\n\n    this.renderer = renderer\n\n    this.uuid = generateUUID()\n\n    const defaultOptions = {\n      ...defaultDOMTextureParams,\n      source: parameters.fromTexture ? parameters.fromTexture.options.source : null,\n      sourceType: parameters.fromTexture ? parameters.fromTexture.options.sourceType : null,\n    }\n\n    this.options = { ...defaultOptions, ...parameters }\n    // force merge of texture object\n    //this.options.texture = { ...defaultOptions.texture, ...parameters.texture }\n\n    this.options.label = this.options.label ?? this.options.name\n\n    this.texture = null\n    this.externalTexture = null\n    this.source = null\n\n    // sizes\n    this.size = {\n      width: 1,\n      height: 1,\n      depth: 1,\n    }\n\n    // we will always declare a texture matrix\n    this.textureMatrix = new BufferBinding({\n      label: this.options.label + ': model matrix',\n      name: this.options.name + 'Matrix',\n      useStruct: false,\n      struct: {\n        [this.options.name + 'Matrix']: {\n          type: 'mat4x4f',\n          value: this.modelMatrix,\n        },\n      },\n    })\n\n    this.renderer.deviceManager.bufferBindings.set(this.textureMatrix.cacheKey, this.textureMatrix)\n\n    this.setBindings()\n\n    this._parentMesh = null\n\n    this.sourceLoaded = false\n    this.sourceUploaded = false\n    this.shouldUpdate = false\n\n    this.renderer.addDOMTexture(this)\n    this.createTexture()\n  }\n\n  /**\n   * Set our {@link bindings}\n   */\n  setBindings() {\n    this.bindings = [\n      new TextureBinding({\n        label: this.options.label + ': texture',\n        name: this.options.name,\n        bindingType: this.options.sourceType === 'externalVideo' ? 'externalTexture' : 'texture',\n        visibility: this.options.visibility,\n        texture: this.options.sourceType === 'externalVideo' ? this.externalTexture : this.texture,\n        viewDimension: this.options.viewDimension,\n      }),\n      this.textureMatrix,\n    ]\n  }\n\n  /**\n   * Get our {@link TextureBinding | GPU texture binding}\n   * @readonly\n   */\n  get textureBinding(): TextureBinding {\n    return this.bindings[0] as TextureBinding\n  }\n\n  /**\n   * Get our texture {@link parentMesh}\n   */\n  get parentMesh(): DOMTextureParent {\n    return this._parentMesh\n  }\n\n  /**\n   * Set our texture {@link parentMesh}\n   * @param value - texture {@link parentMesh} to set (i.e. any kind of {@link core/renderers/GPURenderer.RenderedMesh | Mesh}\n   */\n  set parentMesh(value: DOMTextureParent) {\n    this._parentMesh = value\n    this.resize()\n  }\n\n  /**\n   * Get whether our {@link source} has been loaded\n   */\n  get sourceLoaded(): boolean {\n    return this._sourceLoaded\n  }\n\n  /**\n   * Set whether our {@link source} has been loaded\n   * @param value - boolean flag indicating if the {@link source} has been loaded\n   */\n  set sourceLoaded(value: boolean) {\n    if (value && !this.sourceLoaded) {\n      this._onSourceLoadedCallback && this._onSourceLoadedCallback()\n    }\n    this._sourceLoaded = value\n  }\n\n  /**\n   * Get whether our {@link source} has been uploaded\n   */\n  get sourceUploaded(): boolean {\n    return this._sourceUploaded\n  }\n\n  /**\n   * Set whether our {@link source} has been uploaded\n   * @param value - boolean flag indicating if the {@link source} has been uploaded\n   */\n  set sourceUploaded(value: boolean) {\n    if (value && !this.sourceUploaded) {\n      this._onSourceUploadedCallback && this._onSourceUploadedCallback()\n    }\n    this._sourceUploaded = value\n  }\n\n  /**\n   * Set our texture {@link transforms} object\n   */\n  setTransforms() {\n    super.setTransforms()\n\n    this.transforms.quaternion.setAxisOrder('ZXY')\n\n    // reset our model transform origin to reflect CSS transform origins\n    this.transforms.origin.model.set(0.5, 0.5, 0)\n  }\n\n  /* TEXTURE MATRIX */\n\n  /**\n   * Update the {@link modelMatrix}\n   */\n  updateModelMatrix() {\n    if (!this.parentMesh) return\n\n    const parentScale = (this.parentMesh as DOMProjectedMesh).scale\n      ? (this.parentMesh as DOMProjectedMesh).scale\n      : new Vec3(1, 1, 1)\n\n    const parentWidth = (this.parentMesh as DOMProjectedMesh).boundingRect\n      ? (this.parentMesh as DOMProjectedMesh).boundingRect.width * parentScale.x\n      : this.size.width\n    const parentHeight = (this.parentMesh as DOMProjectedMesh).boundingRect\n      ? (this.parentMesh as DOMProjectedMesh).boundingRect.height * parentScale.y\n      : this.size.height\n\n    const parentRatio = parentWidth / parentHeight\n    const sourceRatio = this.size.width / this.size.height\n\n    // handle the texture rotation\n    // huge props to [@grgrdvrt](https://github.com/grgrdvrt) for this solution!\n    if (parentWidth > parentHeight) {\n      this.#parentRatio.set(parentRatio, 1, 1)\n      this.#sourceRatio.set(1 / sourceRatio, 1, 1)\n    } else {\n      this.#parentRatio.set(1, 1 / parentRatio, 1)\n      this.#sourceRatio.set(1, sourceRatio, 1)\n    }\n\n    // cover ratio is a bit tricky!\n    const coverRatio =\n      parentRatio > sourceRatio !== parentWidth > parentHeight\n        ? 1\n        : parentWidth > parentHeight\n        ? this.#parentRatio.x * this.#sourceRatio.x\n        : this.#sourceRatio.y * this.#parentRatio.y\n\n    this.#coverScale.set(1 / (coverRatio * this.scale.x), 1 / (coverRatio * this.scale.y), 1)\n\n    this.#rotationMatrix.rotateFromQuaternion(this.quaternion)\n\n    // here we could create a matrix for each translations / scales and do:\n    // this.modelMatrix\n    //   .identity()\n    //   .premultiply(negativeOriginMatrix)\n    //   .premultiply(coverScaleMatrix)\n    //   .premultiply(parentRatioMatrix)\n    //   .premultiply(rotationMatrix)\n    //   .premultiply(textureRatioMatrix)\n    //   .premultiply(originMatrix)\n    //   .translate(this.position)\n\n    // but this is faster!\n    this.modelMatrix\n      .identity()\n      .premultiplyTranslate(this.transformOrigin.clone().multiplyScalar(-1))\n      .premultiplyScale(this.#coverScale)\n      .premultiplyScale(this.#parentRatio)\n      .premultiply(this.#rotationMatrix)\n      .premultiplyScale(this.#sourceRatio)\n      .premultiplyTranslate(this.transformOrigin)\n      .translate(this.position)\n  }\n\n  /**\n   * If our {@link modelMatrix} has been updated, tell the {@link textureMatrix | texture matrix binding} to update as well\n   */\n  updateMatrixStack() {\n    super.updateMatrixStack()\n\n    if (this.matricesNeedUpdate) {\n      this.textureMatrix.shouldUpdateBinding(this.options.name + 'Matrix')\n    }\n  }\n\n  /**\n   * Resize our {@link DOMTexture}\n   */\n  resize() {\n    // this should only happen with canvas textures\n    if (\n      this.source &&\n      this.source instanceof HTMLCanvasElement &&\n      (this.source.width !== this.size.width || this.source.height !== this.size.height)\n    ) {\n      // since the source size has changed, we have to recreate a new texture\n      this.setSourceSize()\n      this.createTexture()\n    }\n\n    // tell our model matrix to update\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Tell the {@link Renderer} to upload or texture\n   */\n  uploadTexture() {\n    this.renderer.uploadTexture(this)\n    this.shouldUpdate = false\n  }\n\n  /**\n   * Import a {@link GPUExternalTexture} from the {@link Renderer}, update the  {@link textureBinding} and its {@link core/bindGroups/TextureBindGroup.TextureBindGroup | bind group}\n   */\n  uploadVideoTexture() {\n    this.externalTexture = this.renderer.importExternalTexture(this.source as HTMLVideoElement)\n    this.textureBinding.resource = this.externalTexture\n    this.textureBinding.setBindingType('externalTexture')\n    this.shouldUpdate = false\n    this.sourceUploaded = true\n  }\n\n  /**\n   * Copy a {@link DOMTexture}\n   * @param texture - {@link DOMTexture} to copy\n   */\n  copy(texture: DOMTexture) {\n    if (this.options.sourceType === 'externalVideo' && texture.options.sourceType !== 'externalVideo') {\n      throwWarning(`${this.options.label}: cannot copy a GPUTexture to a GPUExternalTexture`)\n      return\n    } else if (this.options.sourceType !== 'externalVideo' && texture.options.sourceType === 'externalVideo') {\n      throwWarning(`${this.options.label}: cannot copy a GPUExternalTexture to a GPUTexture`)\n      return\n    }\n\n    this.options.fromTexture = texture\n\n    // now copy all desired texture options except source\n    // const { source, ...optionsToCopy } = texture.options\n    // this.options = { ...this.options, ...optionsToCopy }\n\n    this.options.sourceType = texture.options.sourceType\n\n    // TODO better way to do that?\n    this.options.generateMips = texture.options.generateMips\n    this.options.flipY = texture.options.flipY\n    this.options.format = texture.options.format\n    this.options.premultipliedAlpha = texture.options.premultipliedAlpha\n    this.options.placeholderColor = texture.options.placeholderColor\n    this.options.useExternalTextures = texture.options.useExternalTextures\n\n    this.sourceLoaded = texture.sourceLoaded\n    this.sourceUploaded = texture.sourceUploaded\n\n    // TODO external texture?\n    if (texture.texture) {\n      if (texture.sourceLoaded) {\n        this.size = texture.size\n        this.source = texture.source\n\n        this.resize()\n      }\n\n      if (texture.sourceUploaded) {\n        // texture to copy is ready, update our texture and binding\n        this.texture = texture.texture\n        this.textureBinding.resource = this.texture\n      } else {\n        this.createTexture()\n      }\n    }\n  }\n\n  /**\n   * Set the {@link texture | GPU texture}\n   */\n  createTexture() {\n    const options = {\n      label: this.options.label,\n      format: this.options.format,\n      size: [this.size.width, this.size.height, this.size.depth], // [1, 1] if no source\n      dimensions: this.options.viewDimension === '1d' ? '1d' : this.options.viewDimension === '3d' ? '3d' : '2d',\n      //sampleCount: this.source ? this.renderer.sampleCount : 1,\n      usage: !!this.source\n        ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT\n        : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\n    } as GPUTextureDescriptor\n\n    if (this.options.sourceType !== 'externalVideo') {\n      options.mipLevelCount = this.options.generateMips ? getNumMipLevels(this.size.width, this.size.height) : 1\n\n      this.texture?.destroy()\n\n      this.texture = this.renderer.createTexture(options)\n\n      // update texture binding\n      this.textureBinding.resource = this.texture\n    }\n\n    this.shouldUpdate = true\n  }\n\n  /* SOURCES */\n\n  /**\n   * Set the {@link size} based on the {@link source}\n   */\n  setSourceSize() {\n    this.size = {\n      width:\n        (this.source as HTMLImageElement).naturalWidth ||\n        (this.source as HTMLCanvasElement).width ||\n        (this.source as HTMLVideoElement).videoWidth,\n      height:\n        (this.source as HTMLImageElement).naturalHeight ||\n        (this.source as HTMLCanvasElement).height ||\n        (this.source as HTMLVideoElement).videoHeight,\n      depth: 1,\n    }\n  }\n\n  /**\n   * Load an {@link HTMLImageElement} from a URL and create an {@link ImageBitmap} to use as a {@link source}\n   * @async\n   * @param url - URL of the image to load\n   * @returns - the newly created {@link ImageBitmap}\n   */\n  async loadImageBitmap(url: string): Promise<ImageBitmap> {\n    const res = await fetch(url)\n    const blob = await res.blob()\n    return await createImageBitmap(blob, { colorSpaceConversion: 'none' })\n  }\n\n  /**\n   * Load and create an {@link ImageBitmap} from a URL or {@link HTMLImageElement}, use it as a {@link source} and create the {@link GPUTexture}\n   * @async\n   * @param source - the image URL or {@link HTMLImageElement} to load\n   * @returns - the newly created {@link ImageBitmap}\n   */\n  async loadImage(source: string | HTMLImageElement): Promise<void> {\n    const url = typeof source === 'string' ? source : source.getAttribute('src')\n\n    this.options.source = url\n    this.options.sourceType = 'image'\n\n    const cachedTexture = this.renderer.domTextures.find((t) => t.options.source === url)\n    if (cachedTexture && cachedTexture.texture && cachedTexture.sourceUploaded) {\n      this.copy(cachedTexture)\n      return\n    }\n\n    this.sourceLoaded = false\n    this.sourceUploaded = false\n\n    this.source = await this.loadImageBitmap(this.options.source)\n\n    this.setSourceSize()\n    this.resize()\n\n    this.sourceLoaded = true\n    this.createTexture()\n  }\n\n  // weirldy enough, we don't have to do anything in that callback\n  // because the <video> is not visible in the viewport, the video playback is throttled\n  // and the rendering is janky\n  // using requestVideoFrameCallback helps preventing this but is unsupported in Firefox at the moment\n  // WebCodecs may be the way to go when time comes!\n  // https://developer.chrome.com/blog/new-in-webgpu-113/#use-webcodecs-videoframe-source-in-importexternaltexture\n  /**\n   * Set our {@link shouldUpdate} flag to true at each new video frame\n   */\n  onVideoFrameCallback() {\n    if (this.videoFrameCallbackId) {\n      this.shouldUpdate = true\n      ;(this.source as HTMLVideoElement).requestVideoFrameCallback(this.onVideoFrameCallback.bind(this))\n    }\n  }\n\n  /**\n   * Callback to run when a {@link HTMLVideoElement} has loaded (when it has enough data to play).\n   * Set the {@link HTMLVideoElement} as a {@link source} and create the {@link GPUTexture} or {@link GPUExternalTexture}\n   * @param video - the newly loaded {@link HTMLVideoElement}\n   */\n  onVideoLoaded(video: HTMLVideoElement) {\n    if (!this.sourceLoaded) {\n      this.source = video\n\n      this.setSourceSize()\n      this.resize()\n\n      if (this.options.useExternalTextures) {\n        this.options.sourceType = 'externalVideo'\n\n        // texture binding will be set when uploading external texture\n        // meanwhile, destroy previous texture\n        this.texture?.destroy()\n      } else {\n        this.options.sourceType = 'video'\n        this.createTexture()\n      }\n\n      if ('requestVideoFrameCallback' in HTMLVideoElement.prototype) {\n        this.videoFrameCallbackId = (this.source as HTMLVideoElement).requestVideoFrameCallback(\n          this.onVideoFrameCallback.bind(this)\n        )\n      }\n\n      this.sourceLoaded = true\n    }\n  }\n\n  /**\n   * Get whether the {@link source} is a video\n   * @readonly\n   */\n  get isVideoSource(): boolean {\n    return this.source && (this.options.sourceType === 'video' || this.options.sourceType === 'externalVideo')\n  }\n\n  /**\n   * Load a video from a URL or {@link HTMLVideoElement} and register {@link onVideoLoaded} callback\n   * @param source - the video URL or {@link HTMLVideoElement} to load\n   */\n  loadVideo(source: string | HTMLVideoElement) {\n    let video\n\n    if (typeof source === 'string') {\n      video = document.createElement('video')\n      video.src = source\n    } else {\n      video = source\n    }\n\n    video.preload = 'auto'\n    video.muted = true\n    video.loop = true\n    video.crossOrigin = 'anonymous'\n    video.setAttribute('playsinline', '')\n\n    this.options.source = video.src\n    this.sourceLoaded = false\n    this.sourceUploaded = false\n\n    // If the video is in the cache of the browser,\n    // the 'canplaythrough' event might have been triggered\n    // before we registered the event handler.\n    if (video.readyState >= video.HAVE_ENOUGH_DATA) {\n      this.onVideoLoaded(video)\n    } else {\n      video.addEventListener('canplaythrough', this.onVideoLoaded.bind(this, video), {\n        once: true,\n      })\n    }\n\n    // if duration is not available, should mean our video has not started loading\n    if (isNaN(video.duration)) {\n      video.load()\n    }\n  }\n\n  /**\n   * Load a {@link HTMLCanvasElement}, use it as a {@link source} and create the {@link GPUTexture}\n   * @param source - the {@link HTMLCanvasElement} to use\n   */\n  loadCanvas(source: HTMLCanvasElement) {\n    this.options.source = source\n    this.options.sourceType = 'canvas'\n    this.sourceLoaded = false\n    this.sourceUploaded = false\n\n    this.source = source\n\n    this.setSourceSize()\n    this.resize()\n\n    this.sourceLoaded = true\n    this.createTexture()\n  }\n\n  /* EVENTS */\n\n  /**\n   * Callback to run when the {@link source} has been loaded\n   * @param callback - callback to run when the {@link source} has been loaded\n   * @returns - our {@link DOMTexture}\n   */\n  onSourceLoaded(callback: () => void): DOMTexture {\n    if (callback) {\n      this._onSourceLoadedCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Callback to run when the {@link source} has been uploaded\n   * @param callback - callback to run when the {@link source} been uploaded\n   * @returns - our {@link DOMTexture}\n   */\n  onSourceUploaded(callback: () => void): DOMTexture {\n    if (callback) {\n      this._onSourceUploadedCallback = callback\n    }\n\n    return this\n  }\n\n  /* RENDER */\n\n  /**\n   * Render a {@link DOMTexture}:\n   * - Update its {@link modelMatrix} and {@link bindings} if needed\n   * - Upload the texture if it needs to be done\n   */\n  render() {\n    // update our model matrix if needed\n    this.updateMatrixStack()\n\n    // update uniforms values\n    this.textureMatrix.update()\n\n    // since external texture are destroyed as soon as JavaScript returns to the browser\n    // we need to update it at every tick, even if it hasn't changed\n    // to ensure we're not sending a stale / destroyed texture\n    // anyway, external texture are cached so it is fined to call importExternalTexture at each tick\n    if (this.options.sourceType === 'externalVideo') {\n      this.shouldUpdate = true\n    }\n\n    // if no videoFrameCallback check if the video is actually really playing\n    if (\n      this.isVideoSource &&\n      !this.videoFrameCallbackId &&\n      (this.source as HTMLVideoElement).readyState >= (this.source as HTMLVideoElement).HAVE_CURRENT_DATA &&\n      !(this.source as HTMLVideoElement).paused\n    ) {\n      this.shouldUpdate = true\n    }\n\n    if (this.shouldUpdate && this.options.sourceType && this.options.sourceType !== 'externalVideo') {\n      this.uploadTexture()\n    }\n  }\n\n  /* DESTROY */\n\n  /**\n   * Destroy the {@link DOMTexture}\n   */\n  destroy() {\n    if (this.videoFrameCallbackId) {\n      ;(this.source as HTMLVideoElement).cancelVideoFrameCallback(this.videoFrameCallbackId)\n    }\n\n    if (this.isVideoSource) {\n      ;(this.source as HTMLVideoElement).removeEventListener(\n        'canplaythrough',\n        this.onVideoLoaded.bind(this, this.source),\n        {\n          once: true,\n        } as AddEventListenerOptions & EventListenerOptions\n      )\n    }\n\n    this.renderer.removeDOMTexture(this)\n\n    this.texture?.destroy()\n    this.texture = null\n  }\n}\n","import { BindGroup } from './BindGroup'\nimport { isRenderer, Renderer } from '../renderers/utils'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { DOMTexture } from '../textures/DOMTexture'\nimport { Sampler } from '../samplers/Sampler'\nimport { BindGroupParams } from '../../types/BindGroups'\nimport { MaterialTexture } from '../../types/Materials'\n\n/**\n * An object defining all possible {@link TextureBindGroup} class instancing parameters\n */\nexport interface TextureBindGroupParams extends BindGroupParams {\n  /** array of {@link MaterialTexture | textures} to add to a {@link TextureBindGroup} */\n  textures?: MaterialTexture[]\n  /** array of {@link Sampler} to add to a {@link TextureBindGroup} */\n  samplers?: Sampler[]\n}\n\n/**\n * Used to regroup all {@link types/BindGroups.BindGroupBindingElement | bindings} related to textures (texture, texture matrices buffers and samplers) into one single specific {@link BindGroup}.\n *\n * Also responsible for uploading video textures if needed.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a texture\n * const texture = new Texture(gpuCurtains, {\n *   label: 'Input texture',\n *   name: 'inputTexture',\n * })\n *\n * // create a texture bind group using that texture\n * const textureBindGroup = new TextureBindGroup(gpuCurtains, {\n *   label: 'My texture bind group',\n *   textures: [texture],\n *   uniforms: {\n *     params: {\n *       struct: {\n *         opacity: {\n *           type: 'f32',\n *           value: 1,\n *         },\n *         mousePosition: {\n *           type: 'vec2f',\n *           value: new Vec2(),\n *         },\n *       },\n *     },\n *   },\n * })\n *\n * // create the GPU buffer, bindGroupLayout and bindGroup\n * textureBindGroup.createBindGroup()\n * ```\n */\nexport class TextureBindGroup extends BindGroup {\n  /**\n   * TextureBindGroup constructor\n   * @param  renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object\n   * @param parameters - {@link TextureBindGroupParams | parameters} used to create our {@link TextureBindGroup}\n   */\n  constructor(\n    renderer: Renderer | GPUCurtains,\n    { label, index = 0, bindings = [], uniforms, storages, textures = [], samplers = [] }: TextureBindGroupParams = {}\n  ) {\n    const type = 'TextureBindGroup'\n\n    renderer = isRenderer(renderer, type)\n\n    super(renderer, { label, index, bindings, uniforms, storages })\n\n    this.options = {\n      ...this.options,\n      // will be filled after\n      textures: [],\n      samplers: [],\n    }\n\n    // add initial textures if any\n    if (textures.length) {\n      for (const texture of textures) {\n        this.addTexture(texture)\n      }\n    }\n\n    // add initial samplers if any\n    if (samplers.length) {\n      for (const sampler of samplers) {\n        this.addSampler(sampler)\n      }\n    }\n\n    this.type = type\n  }\n\n  /**\n   * Adds a texture to the textures array and the struct\n   * @param texture - texture to add\n   */\n  addTexture(texture: MaterialTexture) {\n    this.textures.push(texture)\n    this.addBindings([...texture.bindings])\n  }\n\n  /**\n   * Get the current textures array\n   * @readonly\n   */\n  get textures(): MaterialTexture[] {\n    return this.options.textures\n  }\n\n  /**\n   * Adds a sampler to the samplers array and the struct\n   * @param sampler\n   */\n  addSampler(sampler: Sampler) {\n    this.samplers.push(sampler)\n    this.addBindings([sampler.binding])\n  }\n\n  /**\n   * Get the current samplers array\n   * @readonly\n   */\n  get samplers(): Sampler[] {\n    return this.options.samplers\n  }\n\n  /**\n   * Get whether the GPU bind group is ready to be created\n   * It can be created if it has {@link BindGroup#bindings} and has not been created yet and all GPU textures and samplers are created\n   * @readonly\n   */\n  get shouldCreateBindGroup(): boolean {\n    return (\n      !this.bindGroup &&\n      !!this.bindings.length &&\n      !this.textures.find((texture) => !(texture.texture || (texture as DOMTexture).externalTexture)) &&\n      !this.samplers.find((sampler) => !sampler.sampler)\n    )\n  }\n\n  /**\n   * Update the {@link TextureBindGroup#textures | bind group textures}:\n   * - Check if they need to copy their source texture\n   * - Upload video texture if needed\n   */\n  updateTextures() {\n    for (const texture of this.textures) {\n      // copy textures that need it on first init, but only when original texture is ready\n      if (texture instanceof DOMTexture) {\n        if (texture.options.fromTexture && texture.options.fromTexture.sourceUploaded && !texture.sourceUploaded) {\n          texture.copy(texture.options.fromTexture)\n        }\n\n        if (texture.shouldUpdate && texture.options.sourceType && texture.options.sourceType === 'externalVideo') {\n          texture.uploadVideoTexture()\n        }\n      }\n    }\n  }\n\n  /**\n   * Update the {@link TextureBindGroup}, which means update its {@link TextureBindGroup#textures | textures}, then update its {@link TextureBindGroup#bufferBindings | buffer bindings} and finally {@link TextureBindGroup#resetBindGroup | reset it} if needed\n   */\n  update() {\n    this.updateTextures()\n    super.update()\n  }\n\n  /**\n   * Destroy our {@link TextureBindGroup}\n   */\n  destroy() {\n    super.destroy()\n    this.options.textures = []\n    this.options.samplers = []\n  }\n}\n","import { Binding, BindingParams, SamplerBindingType } from './Binding'\r\n\r\n/** Defines a {@link SamplerBinding} {@link SamplerBinding#resource | resource} */\r\nexport type SamplerBindingResource = GPUSampler | null\r\n\r\n/**\r\n * An object defining all possible {@link SamplerBinding} class instancing parameters\r\n */\r\nexport interface SamplerBindingParams extends BindingParams {\r\n  /** The binding type of the {@link SamplerBinding} */\r\n  bindingType?: SamplerBindingType\r\n  /** {@link SamplerBinding} {@link GPUBindGroup | GPU bind group} resource */\r\n  sampler: SamplerBindingResource\r\n  /** The bind group layout binding {@link GPUSamplerBindingLayout#type | type} of this {@link GPUSampler | GPU sampler} */\r\n  type: GPUSamplerBindingType\r\n}\r\n\r\n/**\r\n * Used to handle GPUSampler bindings.\r\n *\r\n * Provide both {@link SamplerBinding#resourceLayout | resourceLayout} and {@link SamplerBinding#resource | resource} to the {@link GPUBindGroupLayout} and {@link GPUBindGroup}.<br>\r\n * Also create the appropriate WGSL code snippet to add to the shaders.\r\n */\r\nexport class SamplerBinding extends Binding {\r\n  /** The binding type of the {@link SamplerBinding} */\r\n  bindingType: SamplerBindingType\r\n  /** Our {@link SamplerBinding} resource, i.e. a {@link GPUSampler} */\r\n  sampler: SamplerBindingResource\r\n  /** An array of strings to append to our shaders code declaring all the WGSL variables representing this {@link SamplerBinding} */\r\n  wgslGroupFragment: string[]\r\n  /** Options used to create this {@link SamplerBinding} */\r\n  options: SamplerBindingParams\r\n\r\n  /**\r\n   * SamplerBinding constructor\r\n   * @param parameters - {@link SamplerBindingParams | parameters} used to create our SamplerBindings\r\n   */\r\n  constructor({\r\n    label = 'Sampler',\r\n    name = 'sampler',\r\n    bindingType,\r\n    visibility,\r\n    sampler,\r\n    type = 'filtering',\r\n  }: SamplerBindingParams) {\r\n    bindingType = bindingType ?? 'sampler'\r\n\r\n    super({ label, name, bindingType, visibility })\r\n\r\n    this.cacheKey += `${type},`\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      sampler,\r\n      type,\r\n    }\r\n\r\n    this.resource = sampler // should be a sampler\r\n\r\n    this.setWGSLFragment()\r\n  }\r\n\r\n  /**\r\n   * Get {@link GPUBindGroupLayoutEntry#sampler | bind group layout entry resource}\r\n   * @readonly\r\n   */\r\n  get resourceLayout(): {\r\n    /** {@link GPUBindGroupLayout | bind group layout} resource */\r\n    sampler: GPUSamplerBindingLayout\r\n  } {\r\n    return {\r\n      sampler: {\r\n        type: this.options.type, // TODO set shouldResetBindGroupLayout to true if it changes afterwards\r\n      },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the resource cache key\r\n   * @readonly\r\n   */\r\n  get resourceLayoutCacheKey(): string {\r\n    return `sampler,${this.options.type},${this.visibility},`\r\n  }\r\n\r\n  /**\r\n   * Get the {@link GPUBindGroupEntry#resource | bind group resource}\r\n   */\r\n  get resource(): SamplerBindingResource {\r\n    return this.sampler\r\n  }\r\n\r\n  /**\r\n   * Set the {@link GPUBindGroupEntry#resource | bind group resource}\r\n   * @param value - new bind group resource\r\n   */\r\n  set resource(value: SamplerBindingResource) {\r\n    // resource changed, update bind group!\r\n    if (value && this.sampler) this.shouldResetBindGroup = true\r\n    this.sampler = value\r\n  }\r\n\r\n  /**\r\n   * Set the correct WGSL code snippet.\r\n   */\r\n  setWGSLFragment() {\r\n    this.wgslGroupFragment = [\r\n      `var ${this.name}: ${this.options.type === 'comparison' ? `${this.bindingType}_comparison` : this.bindingType};`,\r\n    ]\r\n  }\r\n}\r\n","import { Mat4 } from '../../math/Mat4'\r\nimport { Object3D, Object3DMatricesType, Object3DTransformMatrix } from '../objects3D/Object3D'\r\nimport { RectSize } from '../DOM/DOMElement'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { generateUUID } from '../../utils/utils'\r\n\r\n/**\r\n * Defines Camera basic perspective options\r\n */\r\nexport interface CameraBasePerspectiveOptions {\r\n  /** {@link Camera} perspective field of view. Should be greater than 0 and lower than 180 */\r\n  fov?: number\r\n  /** {@link Camera} near plane, the closest point where a mesh vertex is drawn */\r\n  near?: number\r\n  /** {@link Camera} far plane, the farthest point where a mesh vertex is drawn */\r\n  far?: number\r\n}\r\n\r\n/**\r\n * Defines all Camera perspective options\r\n */\r\nexport interface CameraPerspectiveOptions extends CameraBasePerspectiveOptions {\r\n  /** {@link Camera} frustum width */\r\n  width?: number\r\n  /** {@link Camera} frustum height */\r\n  height?: number\r\n  /** {@link Camera} pixel ratio */\r\n  pixelRatio?: number\r\n}\r\n\r\n/**\r\n * An object defining all possible {@link Camera} class instancing parameters\r\n */\r\nexport interface CameraParams extends CameraPerspectiveOptions {\r\n  /** callback to execute when one of the {@link Camera#matrices | camera matrices} changed */\r\n  onMatricesChanged?: () => void\r\n}\r\n\r\n/** Defines all kind of possible {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D} matrix types */\r\nexport type CameraObject3DMatricesType = Object3DMatricesType | 'projection' | 'view' | 'viewProjection'\r\n/** Defines all possible {@link Object3DTransformMatrix | matrix object} used by our {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D} */\r\nexport type CameraObject3DMatrices = Record<CameraObject3DMatricesType, Object3DTransformMatrix>\r\n\r\n/**\r\n * Used to create a perspective {@link Camera} and its projection, model and view matrices.\r\n *\r\n * {@link curtains/renderers/GPUCurtainsRenderer.GPUCurtainsRenderer | GPUCurtainsRenderer} and {@link core/renderers/GPUCameraRenderer.GPUCameraRenderer | GPUCameraRenderer} automatically create their own {@link Camera} under the hood, so it is unlikely you'd have to create one by yourself.\r\n *\r\n * {@link Camera} default perspective settings are:\r\n * - {@link Camera#fov | field of view}: 50\r\n * - {@link Camera#near | near plane}: 0.01\r\n * - {@link Camera#far | far plane}: 150\r\n *\r\n * Also note that the {@link Camera} default {@link Camera#position | position} is set at `(0, 0, 10)` so the object created with a default size do not appear too big nor too small.\r\n */\r\nexport class Camera extends Object3D {\r\n  /** The universal unique id of the {@link Camera} */\r\n  uuid: string\r\n  /** {@link CameraObject3DMatrices | Matrices object} of the {@link Camera} */\r\n  matrices: CameraObject3DMatrices\r\n\r\n  /** Private {@link Camera} field of view */\r\n  #fov: number\r\n  /** Private {@link Camera} near plane */\r\n  #near: number\r\n  /** Private {@link Camera} far plane */\r\n  #far: number\r\n\r\n  /** The {@link Camera} frustum width and height */\r\n  size: RectSize\r\n  /** Private {@link Camera} pixel ratio, used in {@link CSSPerspective} calcs */\r\n  #pixelRatio: number\r\n\r\n  /** Callback to execute when one of the camera {@link matrices} changed */\r\n  onMatricesChanged?: () => void\r\n\r\n  /** A number representing what CSS perspective value (in pixel) should be used to obtain the same perspective effect as this {@link Camera} */\r\n  CSSPerspective: number\r\n  /** An object containing the visible width / height at a given z-depth from our camera parameters */\r\n  visibleSize: RectSize\r\n\r\n  /**\r\n   * Camera constructor\r\n   * @param parameters - {@link CameraParams | parameters} used to create our {@link Camera}\r\n   */\r\n  constructor(\r\n    {\r\n      fov = 50,\r\n      near = 0.1,\r\n      far = 150,\r\n      width = 1,\r\n      height = 1,\r\n      pixelRatio = 1,\r\n      onMatricesChanged = () => {\r\n        /* allow empty callback */\r\n      },\r\n    } = {} as CameraParams\r\n  ) {\r\n    // Object3D\r\n    super()\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    // camera can't be at position (0, 0, 0), it needs some recoil\r\n    // arbitrarily set to 10 so objects of default size (1, 1, 1) don't appear too big\r\n    this.position.set(0, 0, 10)\r\n\r\n    // callback to run if any of the matrices changed\r\n    this.onMatricesChanged = onMatricesChanged\r\n\r\n    // create size object, will be set right after\r\n    this.size = {\r\n      width: 1,\r\n      height: 1,\r\n    }\r\n\r\n    this.setPerspective({ fov, near, far, width, height, pixelRatio })\r\n  }\r\n\r\n  /**\r\n   * Set our transform and projection matrices\r\n   */\r\n  setMatrices() {\r\n    super.setMatrices()\r\n\r\n    this.matrices = {\r\n      ...this.matrices,\r\n      view: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: true,\r\n        onUpdate: () => {\r\n          this.viewMatrix.copy(this.worldMatrix).invert()\r\n        },\r\n      },\r\n      projection: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: true,\r\n        onUpdate: () => this.updateProjectionMatrix(),\r\n      },\r\n      viewProjection: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: true,\r\n        onUpdate: () => this.viewProjectionMatrix.multiplyMatrices(this.projectionMatrix, this.viewMatrix),\r\n      },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get our view matrix\r\n   * @readonly\r\n   */\r\n  get viewMatrix(): Mat4 {\r\n    return this.matrices.view.matrix\r\n  }\r\n\r\n  set viewMatrix(value: Mat4) {\r\n    this.matrices.view.matrix = value\r\n    this.shouldUpdateViewMatrices()\r\n  }\r\n\r\n  /**\r\n   * Get our projection matrix\r\n   * @readonly\r\n   */\r\n  get projectionMatrix(): Mat4 {\r\n    return this.matrices.projection.matrix\r\n  }\r\n\r\n  set projectionMatrix(value: Mat4) {\r\n    this.matrices.projection.matrix = value\r\n    this.shouldUpdateProjectionMatrices()\r\n  }\r\n\r\n  /**\r\n   * Get our view projection matrix\r\n   * @readonly\r\n   */\r\n  get viewProjectionMatrix(): Mat4 {\r\n    return this.matrices.viewProjection.matrix\r\n  }\r\n\r\n  /**\r\n   * Set our view dependent matrices shouldUpdate flag to true (tell it to update)\r\n   */\r\n  shouldUpdateViewMatrices() {\r\n    this.matrices.view.shouldUpdate = true\r\n    this.matrices.viewProjection.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Set our projection dependent matrices shouldUpdate flag to true (tell it to update)\r\n   */\r\n  shouldUpdateProjectionMatrices() {\r\n    this.matrices.projection.shouldUpdate = true\r\n    this.matrices.viewProjection.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Update our model matrix and tell our view matrix to update as well\r\n   */\r\n  updateModelMatrix() {\r\n    super.updateModelMatrix()\r\n    this.setVisibleSize()\r\n    this.shouldUpdateViewMatrices()\r\n  }\r\n\r\n  /**\r\n   * Update our world matrix and tell our view matrix to update as well\r\n   */\r\n  updateWorldMatrix() {\r\n    super.updateWorldMatrix()\r\n    this.shouldUpdateViewMatrices()\r\n  }\r\n\r\n  /**\r\n   * Callback to run when the camera {@link modelMatrix | model matrix} has been updated\r\n   */\r\n  updateMatrixStack() {\r\n    super.updateMatrixStack()\r\n\r\n    if (this.matricesNeedUpdate) {\r\n      this.onMatricesChanged()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Camera} {@link fov | field of view}\r\n   */\r\n  get fov(): number {\r\n    return this.#fov\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link fov | field of view}. Update the {@link projectionMatrix} only if the field of view actually changed\r\n   * @param fov - new field of view\r\n   */\r\n  set fov(fov: number) {\r\n    // clamp between 1 and 179\r\n    fov = Math.max(1, Math.min(fov ?? this.fov, 179))\r\n\r\n    if (fov !== this.fov) {\r\n      this.#fov = fov\r\n      this.shouldUpdateProjectionMatrices()\r\n    }\r\n\r\n    this.setVisibleSize()\r\n    this.setCSSPerspective()\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Camera} {@link near} plane value.\r\n   */\r\n  get near(): number {\r\n    return this.#near\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link near} plane value. Update the {@link projectionMatrix} only if the near plane actually changed\r\n   * @param near - new near plane value\r\n   */\r\n  set near(near: number) {\r\n    near = Math.max(near ?? this.near, 0.01)\r\n\r\n    if (near !== this.near) {\r\n      this.#near = near\r\n      this.shouldUpdateProjectionMatrices()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get / set the {@link Camera} {@link far} plane value.\r\n   */\r\n  get far(): number {\r\n    return this.#far\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link far} plane value. Update {@link projectionMatrix} only if the far plane actually changed\r\n   * @param far - new far plane value\r\n   */\r\n  set far(far: number) {\r\n    far = Math.max(far ?? this.far, this.near + 1)\r\n\r\n    if (far !== this.far) {\r\n      this.#far = far\r\n      this.shouldUpdateProjectionMatrices()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Camera} {@link pixelRatio} value.\r\n   */\r\n  get pixelRatio() {\r\n    return this.#pixelRatio\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link pixelRatio} value. Update the {@link CSSPerspective} only if the pixel ratio actually changed\r\n   * @param pixelRatio - new pixel ratio value\r\n   */\r\n  set pixelRatio(pixelRatio: number) {\r\n    this.#pixelRatio = pixelRatio ?? this.pixelRatio\r\n    this.setCSSPerspective()\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link width} and {@link height}. Update the {@link projectionMatrix} only if the width or height actually changed\r\n   * @param size - {@link width} and {@link height} values to use\r\n   */\r\n  setSize({ width, height }: RectSize) {\r\n    if (width !== this.size.width || height !== this.size.height) {\r\n      this.shouldUpdateProjectionMatrices()\r\n    }\r\n\r\n    this.size.width = width\r\n    this.size.height = height\r\n\r\n    this.setVisibleSize()\r\n    this.setCSSPerspective()\r\n  }\r\n\r\n  /**\r\n   * Sets the {@link Camera} perspective. Update the {@link projectionMatrix} if needed.\r\n   * @param parameters - {@link CameraPerspectiveOptions | parameters} to use for the perspective\r\n   */\r\n  setPerspective({\r\n    fov = this.fov,\r\n    near = this.near,\r\n    far = this.far,\r\n    width = this.size.width,\r\n    height = this.size.height,\r\n    pixelRatio = this.pixelRatio,\r\n  }: CameraPerspectiveOptions = {}) {\r\n    this.setSize({ width, height })\r\n    this.pixelRatio = pixelRatio\r\n    this.fov = fov\r\n    this.near = near\r\n    this.far = far\r\n  }\r\n\r\n  /**\r\n   * Sets a {@link CSSPerspective} property based on {@link size}, {@link pixelRatio} and {@link fov}.<br>\r\n   * Used to translate planes along the Z axis using pixel units as CSS would do.<br>\r\n   * {@link https://stackoverflow.com/questions/22421439/convert-field-of-view-value-to-css3d-perspective-value | See reference}\r\n   */\r\n  setCSSPerspective() {\r\n    this.CSSPerspective =\r\n      Math.pow(\r\n        Math.pow(this.size.width / (2 * this.pixelRatio), 2) + Math.pow(this.size.height / (2 * this.pixelRatio), 2),\r\n        0.5\r\n      ) / Math.tan((this.fov * 0.5 * Math.PI) / 180)\r\n  }\r\n\r\n  /**\r\n   * Get visible width / height at a given z-depth from our {@link Camera} parameters.<br>\r\n   * {@link https://discourse.threejs.org/t/functions-to-calculate-the-visible-width-height-at-a-given-z-depth-from-a-perspective-camera/269 | See reference}\r\n   * @param depth - depth to use for calculations\r\n   * @returns - visible width and height at given depth\r\n   */\r\n  getVisibleSizeAtDepth(depth = 0): RectSize {\r\n    // compensate for cameras not positioned at z=0\r\n    const cameraOffset = this.position.z\r\n    if (depth < cameraOffset) {\r\n      depth -= cameraOffset\r\n    } else {\r\n      depth += cameraOffset\r\n    }\r\n\r\n    // vertical fov in radians\r\n    const vFOV = (this.fov * Math.PI) / 180\r\n\r\n    // Math.abs to ensure the result is always positive\r\n    const height = 2 * Math.tan(vFOV / 2) * Math.abs(depth)\r\n\r\n    return {\r\n      width: (height * this.size.width) / this.size.height,\r\n      height,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sets visible width / height at a depth of 0.\r\n   */\r\n  setVisibleSize() {\r\n    this.visibleSize = this.getVisibleSizeAtDepth()\r\n  }\r\n\r\n  /**\r\n   * Rotate this {@link Camera} so it looks at the {@link Vec3 | target}\r\n   * @param target - {@link Vec3 | target} to look at\r\n   * @param position - {@link Vec3 | postion} from which to look at\r\n   */\r\n  lookAt(target: Vec3 = new Vec3(), position = this.position) {\r\n    // since we know it's a camera, inverse position and target\r\n    super.lookAt(position, target)\r\n  }\r\n\r\n  /**\r\n   * Updates the {@link Camera} {@link projectionMatrix}\r\n   */\r\n  updateProjectionMatrix() {\r\n    this.projectionMatrix.makePerspective({\r\n      fov: this.fov,\r\n      aspect: this.size.width / this.size.height,\r\n      near: this.near,\r\n      far: this.far,\r\n    })\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\nimport { SamplerBinding } from '../bindings/SamplerBinding'\nimport { generateUUID, throwWarning } from '../../utils/utils'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/** Options used to create a {@link Sampler} */\nexport interface SamplerOptions extends Partial<GPUSamplerDescriptor>, GPUSamplerBindingLayout {}\n\n/**\n * Parameters used to create a {@link Sampler}\n */\nexport interface SamplerParams extends SamplerOptions {\n  /** Name of the {@link Sampler} to use in the {@link SamplerBinding | binding} */\n  name: string\n}\n\n/**\n * Used to create a {@link GPUSampler} and its associated {@link SamplerBinding}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * const mirrorSampler = new Sampler(gpuCurtains, {\n *   label: 'Mirror sampler',\n *   name: 'mirrorSampler',\n *   addressModeU: 'mirror-repeat',\n *   addressModeV: 'mirror-repeat',\n * })\n * ```\n */\nexport class Sampler {\n  /** The type of the {@link Sampler} */\n  type: string\n  /** The universal unique id of this {@link Sampler} */\n  readonly uuid: string\n  /** {@link Renderer} used by this {@link Sampler} */\n  renderer: Renderer\n  /** The label of the {@link Sampler}, used to create the {@link GPUSampler} for debugging purpose */\n  label: string\n  /** Name of the {@link Sampler} to use in the {@link SamplerBinding | binding} */\n  name: string\n  /** Options used to create this {@link Sampler} */\n  options: SamplerOptions\n\n  /** {@link GPUSampler} */\n  sampler: GPUSampler\n  /** {@link SamplerBinding | binding} to pass to a {@link core/bindGroups/TextureBindGroup.TextureBindGroup | bind group} */\n  binding: SamplerBinding\n\n  /**\n   * Sampler constructor\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Sampler}\n   * @param parameters - {@link SamplerParams | parameters} used to create this {@link Sampler}\n   */\n  constructor(\n    renderer: GPUCurtains | Renderer,\n    {\n      label = 'Sampler',\n      name,\n      addressModeU = 'repeat',\n      addressModeV = 'repeat',\n      magFilter = 'linear',\n      minFilter = 'linear',\n      mipmapFilter = 'linear',\n      maxAnisotropy = 1,\n      type = 'filtering',\n      compare = null,\n    } = {} as SamplerParams\n  ) {\n    this.type = 'Sampler'\n    this.uuid = generateUUID()\n\n    renderer = isRenderer(renderer, label ? label + ' ' + this.type : this.type)\n\n    this.renderer = renderer\n\n    this.label = label\n\n    if (!name && !this.renderer.production) {\n      name = 'sampler' + this.renderer.samplers.length\n      throwWarning(\n        `Sampler: you are trying to create a sampler without the mandatory name parameter. A default name will be used instead: ${name}`\n      )\n    }\n\n    this.name = name\n\n    this.options = {\n      addressModeU,\n      addressModeV,\n      magFilter,\n      minFilter,\n      mipmapFilter,\n      maxAnisotropy,\n      type,\n      ...(compare !== null && { compare }),\n    } as SamplerOptions\n\n    this.createSampler()\n    this.createBinding()\n  }\n\n  /**\n   * Set the {@link GPUSampler}\n   */\n  createSampler() {\n    this.sampler = this.renderer.createSampler(this)\n  }\n\n  /**\n   * Set the {@link SamplerBinding | binding}\n   */\n  createBinding() {\n    this.binding = new SamplerBinding({\n      label: this.label,\n      name: this.name,\n      bindingType: 'sampler',\n      sampler: this.sampler,\n      type: this.options.type,\n    })\n  }\n}\n","import { generateMips, isRenderer, Renderer } from '../renderers/utils'\nimport { TextureBinding } from '../bindings/TextureBinding'\nimport { BindGroupBindingElement } from '../../types/BindGroups'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { BindingMemoryAccessType, BindingParams, TextureBindingType } from '../bindings/Binding'\nimport { generateUUID } from '../../utils/utils'\nimport { DOMTexture } from './DOMTexture'\nimport { ExternalTextureParamsBase, TextureSize } from '../../types/Textures'\nimport { getDefaultTextureUsage, getNumMipLevels, TextureUsageKeys } from './utils'\n\n/**\n * Base parameters used to create a {@link Texture}\n */\nexport interface TextureBaseParams extends ExternalTextureParamsBase {\n  /** The label of the {@link Texture}, used to create various GPU objects for debugging purpose */\n  label?: string\n  /** Name of the {@link Texture} to use in the {@link TextureBinding | texture binding} */\n  name?: string\n\n  /** Optional fixed size of the {@link Texture#texture | texture}. If set, the {@link Texture} will never be resized and always keep that size. */\n  fixedSize?: TextureSize\n\n  /** Force the texture size to be set to the given ratio of the {@link core/renderers/GPURenderer.GPURenderer#canvas | renderer canvas} size or {@link fixedSize}. Used mainly to shrink render target texture definition. */\n  qualityRatio?: number\n\n  /** Whether to use this {@link Texture} as a regular, storage or depth texture */\n  type?: TextureBindingType\n  /** Optional format of the {@link Texture#texture | texture}, mainly used for storage textures */\n  format?: GPUTextureFormat\n  /** Optional texture binding memory access type, mainly used for storage textures */\n  access?: BindingMemoryAccessType\n  /** Optional {@link Texture#texture | texture} view dimension to use */\n  viewDimension?: GPUTextureViewDimension\n  /** Sample count of the {@link Texture#texture | texture}, used for multisampling */\n  sampleCount?: GPUSize32\n  /** The {@link Texture} shaders visibility sent to the {@link Texture#textureBinding | texture binding} */\n  visibility?: BindingParams['visibility']\n  /** Allowed usages for the {@link Texture#texture | GPU texture} as an array of {@link TextureUsageKeys | texture usages names} */\n  usage?: TextureUsageKeys[]\n\n  /** Whether any {@link core/materials/Material.Material | Material} using this {@link Texture} should automatically destroy it upon destruction. Default to `true`. */\n  autoDestroy?: boolean\n}\n\n/**\n * Parameters used to create a {@link Texture}\n */\nexport interface TextureParams extends TextureBaseParams {\n  /** Optional texture to use as a copy source input. Could be a {@link Texture} or {@link DOMTexture} */\n  fromTexture?: Texture | DOMTexture | null\n}\n\n/** @const - default {@link Texture} parameters */\nconst defaultTextureParams: TextureParams = {\n  label: 'Texture',\n  name: 'renderTexture', // default to 'renderTexture' for render target usage\n  type: 'texture',\n  access: 'write',\n  fromTexture: null,\n  viewDimension: '2d',\n  sampleCount: 1,\n  qualityRatio: 1,\n  // copy external texture options\n  generateMips: false,\n  flipY: false,\n  premultipliedAlpha: false,\n  autoDestroy: true,\n}\n\n/**\n * This is the main class used to create and handle {@link GPUTexture | textures} that can be used with {@link core/computePasses/ComputePass.ComputePass | ComputePass} and/or {@link core/meshes/Mesh.Mesh | Mesh}. Also used as copy source/destination for {@link core/renderPasses/RenderPass.RenderPass | RenderPass} and {@link core/renderPasses/RenderTarget.RenderTarget | RenderTarget}.\n *\n * Basically useful for any kind of textures: for external sources (however in some cases, {@link core/textures/DOMTexture.DOMTexture | DOMTexture} might be preferred), depth, storages or to copy anything outputted to the screen at one point or another.\n *\n * Will create a {@link GPUTexture} and its associated {@link TextureBinding}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a texture\n * const texture = new Texture(gpuCurtains, {\n *   label: 'My texture',\n *   name: 'myTexture',\n * })\n * ```\n */\nexport class Texture {\n  /** {@link Renderer | renderer} used by this {@link Texture} */\n  renderer: Renderer\n  /** The type of the {@link Texture} */\n  type: string\n  /** The universal unique id of this {@link Texture} */\n  readonly uuid: string\n\n  /** The {@link GPUTexture} used */\n  texture: GPUTexture\n\n  /** Size of the {@link Texture#texture | texture} source, usually our {@link Renderer#canvas | renderer canvas} size */\n  size: TextureSize\n\n  /** Options used to create this {@link Texture} */\n  options: TextureParams\n\n  /** Array of {@link core/bindings/Binding.Binding | bindings} that will actually only hold one {@link TextureBinding | texture binding} */\n  bindings: BindGroupBindingElement[]\n\n  /** Whether this texture should be automatically resized when the {@link Renderer renderer} size changes. Default to true. */\n  #autoResize = true\n\n  /**\n   * Texture constructor\n   * @param renderer - {@link Renderer | renderer} object or {@link GPUCurtains} class object used to create this {@link Texture}\n   * @param parameters - {@link TextureParams | parameters} used to create this {@link Texture}\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters = defaultTextureParams) {\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' Texture' : 'Texture')\n\n    this.type = 'Texture'\n\n    this.renderer = renderer\n\n    this.uuid = generateUUID()\n\n    this.options = { ...defaultTextureParams, ...parameters }\n\n    if (\n      this.options.format === 'rgba32float' &&\n      !(this.renderer.deviceManager.adapter as GPUAdapter).features.has('float32-filterable')\n    ) {\n      this.options.format = 'rgba16float'\n    }\n\n    if (parameters.fromTexture) {\n      this.options.format = parameters.fromTexture.texture.format\n      this.options.sampleCount = parameters.fromTexture.texture.sampleCount\n      this.options.viewDimension = parameters.fromTexture.options.viewDimension\n    }\n\n    if (!this.options.format) {\n      this.options.format = this.renderer.options.preferredFormat\n    }\n\n    // sizes\n    this.size = this.options.fixedSize\n      ? {\n          width: this.options.fixedSize.width * this.options.qualityRatio,\n          height: this.options.fixedSize.height * this.options.qualityRatio,\n          depth: this.options.fixedSize.depth ?? this.options.viewDimension.indexOf('cube') !== -1 ? 6 : 1,\n        }\n      : {\n          width: Math.floor(this.renderer.canvas.width * this.options.qualityRatio),\n          height: Math.floor(this.renderer.canvas.height * this.options.qualityRatio),\n          depth: this.options.viewDimension.indexOf('cube') !== -1 ? 6 : 1,\n        }\n\n    if (this.options.fixedSize) {\n      this.#autoResize = false\n    }\n\n    // struct\n    this.setBindings()\n\n    // texture\n    this.renderer.addTexture(this)\n    this.createTexture()\n  }\n\n  /**\n   * Copy another {@link Texture} into this {@link Texture}\n   * @param texture - {@link Texture} to copy\n   */\n  copy(texture: Texture | DOMTexture) {\n    this.options.fromTexture = texture\n    this.createTexture()\n  }\n\n  /**\n   * Copy a {@link GPUTexture} directly into this {@link Texture}. Mainly used for depth textures.\n   * @param texture - {@link GPUTexture} to copy\n   */\n  copyGPUTexture(texture: GPUTexture) {\n    this.size = {\n      width: texture.width,\n      height: texture.height,\n      depth: texture.depthOrArrayLayers,\n    }\n\n    this.options.format = texture.format\n    this.options.sampleCount = texture.sampleCount\n\n    this.texture = texture\n\n    this.textureBinding.setFormat(this.options.format)\n    this.textureBinding.setMultisampled(this.options.sampleCount > 1)\n\n    this.textureBinding.resource = this.texture\n  }\n\n  /**\n   * Create the {@link GPUTexture | texture} (or copy it from source) and update the {@link TextureBinding#resource | binding resource}\n   */\n  createTexture() {\n    if (!this.size.width || !this.size.height) return\n\n    if (this.options.fromTexture) {\n      // copy the GPU texture\n      this.copyGPUTexture(this.options.fromTexture.texture)\n      return\n    }\n\n    this.texture?.destroy()\n\n    this.texture = this.renderer.createTexture({\n      label: this.options.label,\n      format: this.options.format,\n      size: [this.size.width, this.size.height, this.size.depth ?? 1],\n      dimensions: this.options.viewDimension,\n      sampleCount: this.options.sampleCount,\n      mipLevelCount: this.options.generateMips\n        ? getNumMipLevels(this.size.width, this.size.height, this.size.depth ?? 1)\n        : 1,\n      usage: getDefaultTextureUsage(this.options.usage, this.options.type),\n    } as GPUTextureDescriptor)\n\n    // update texture binding\n    this.textureBinding.resource = this.texture\n  }\n\n  /**\n   * Upload a source to the GPU and use it for our {@link texture}.\n   * @param parameters - parameters used to upload the source.\n   * @param parameters.source - source to use for our {@link texture}.\n   * @param parameters.width - source width.\n   * @param parameters.height - source height.\n   * @param parameters.depth - source depth.\n   * @param parameters.origin - {@link GPUOrigin3D | origin} of the source copy.\n   */\n  uploadSource({\n    source,\n    width = this.size.width,\n    height = this.size.height,\n    depth = this.size.depth,\n    origin = [0, 0, 0],\n    colorSpace = 'srgb',\n  }: {\n    source: GPUImageCopyExternalImageSource\n    width?: number\n    height?: number\n    depth?: number\n    origin?: GPUOrigin3D\n    colorSpace?: PredefinedColorSpace\n  }) {\n    this.renderer.device.queue.copyExternalImageToTexture(\n      { source: source, flipY: this.options.flipY },\n      { texture: this.texture, premultipliedAlpha: this.options.premultipliedAlpha, origin, colorSpace },\n      [width, height, depth]\n    )\n\n    if (this.texture.mipLevelCount > 1) {\n      generateMips(this.renderer.device, this.texture)\n    }\n  }\n\n  /**\n   * Use data as the {@link texture} source and upload it to the GPU.\n   * @param parameters - parameters used to upload the source.\n   * @param parameters.width - data source width.\n   * @param parameters.height - data source height.\n   * @param parameters.depth - data source depth.\n   * @param parameters.origin - {@link GPUOrigin3D | origin} of the data source copy.\n   * @param parameters.data - {@link Float32Array} data to use as source.\n   */\n  uploadData({\n    width = this.size.width,\n    height = this.size.height,\n    depth = this.size.depth,\n    origin = [0, 0, 0],\n    data = new Float32Array(width * height * 4),\n  }: {\n    width?: number\n    height?: number\n    depth?: number\n    origin?: GPUOrigin3D\n    data?: Float32Array\n  }) {\n    this.renderer.device.queue.writeTexture(\n      { texture: this.texture, origin },\n      data,\n      { bytesPerRow: width * data.BYTES_PER_ELEMENT * 4, rowsPerImage: height },\n      [width, height, depth]\n    )\n\n    if (this.texture.mipLevelCount > 1) {\n      generateMips(this.renderer.device, this.texture)\n    }\n  }\n\n  /**\n   * Set our {@link Texture#bindings | bindings}\n   */\n  setBindings() {\n    this.bindings = [\n      new TextureBinding({\n        label: this.options.label + ': ' + this.options.name + ' texture',\n        name: this.options.name,\n        bindingType: this.options.type,\n        visibility: this.options.visibility,\n        texture: this.texture,\n        format: this.options.format,\n        viewDimension: this.options.viewDimension,\n        multisampled: this.options.sampleCount > 1,\n      }),\n    ]\n  }\n\n  /**\n   * Get our {@link TextureBinding | texture binding}\n   * @readonly\n   */\n  get textureBinding(): TextureBinding {\n    return this.bindings[0] as TextureBinding\n  }\n\n  /**\n   * Resize our {@link Texture}, which means recreate it/copy it again and tell the {@link core/bindGroups/TextureBindGroup.TextureBindGroup | texture bind group} to update\n   * @param size - the optional new {@link TextureSize | size} to set\n   */\n  resize(size: TextureSize | null = null) {\n    if (!this.#autoResize) return\n\n    if (!size) {\n      size = {\n        width: Math.floor(this.renderer.canvas.width * this.options.qualityRatio),\n        height: Math.floor(this.renderer.canvas.height * this.options.qualityRatio),\n        depth: 1,\n      }\n    }\n\n    // no real resize, bail!\n    if (size.width === this.size.width && size.height === this.size.height && size.depth === this.size.depth) {\n      return\n    }\n\n    this.size = size\n    this.createTexture()\n  }\n\n  /**\n   * Destroy our {@link Texture}\n   */\n  destroy() {\n    this.renderer.removeTexture(this)\n\n    // destroy the GPU texture only if it's not a copy of another texture\n    if (!this.options.fromTexture) {\n      this.texture?.destroy()\n    }\n\n    this.texture = null\n  }\n}\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { BindGroup } from '../bindGroups/BindGroup'\r\nimport { TextureBindGroup } from '../bindGroups/TextureBindGroup'\r\nimport { Sampler } from '../samplers/Sampler'\r\nimport { AllowedPipelineEntries } from '../pipelines/PipelineManager'\r\nimport { BufferBinding, BufferBindingInput } from '../bindings/BufferBinding'\r\nimport { AllowedBindGroups, BindGroupBindingElement, BindGroupBufferBindingElement } from '../../types/BindGroups'\r\nimport { DOMTexture } from '../textures/DOMTexture'\r\nimport { FullShadersType, MaterialOptions, MaterialParams, ShaderOptions } from '../../types/Materials'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { Texture } from '../textures/Texture'\r\nimport { Binding } from '../bindings/Binding'\r\nimport { generateUUID } from '../../utils/utils'\r\nimport { BufferElement } from '../bindings/bufferElements/BufferElement'\r\nimport { Buffer } from '../buffers/Buffer'\r\n\r\n/**\r\n * Used as a base to create a {@link Material}.<br>\r\n * The purpose of {@link Material} is to create and update the {@link BindGroup | bind groups} and their bindings (GPU buffers, textures and samplers), create a {@link core/pipelines/PipelineEntry.PipelineEntry | PipelineEntry} and use them to {@link Material#render | render}.\r\n *\r\n * ## Bind groups\r\n *\r\n * A {@link Material} automatically creates a {@link TextureBindGroup}, but it is actually added to the active {@link Material#bindGroups | bind groups array} only if necessary, which means if your shaders use a {@link GPUSampler}, a {@link GPUTexture} or a {@link GPUExternalTexture}.\r\n *\r\n * Another {@link BindGroup} will be created if you pass any {@link MaterialParams#uniforms | uniforms} or {@link MaterialParams#storages | storages} parameters.\r\n *\r\n * Finally, you can also pass already created {@link BindGroup} to a {@link Material} via the {@link MaterialParams#bindGroups | bindGroups} parameter.\r\n *\r\n * ----\r\n *\r\n * Note that this class is not intended to be used as is, but as a base for {@link core/materials/ComputeMaterial.ComputeMaterial | ComputeMaterial} and {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial} classes.\r\n */\r\nexport class Material {\r\n  /** The type of the {@link Material} */\r\n  type: string\r\n  /** The universal unique id of the {@link Material} */\r\n  uuid: string\r\n  /** The {@link Renderer} used */\r\n  renderer: Renderer\r\n  /** Options used to create this {@link Material} */\r\n  options: MaterialOptions\r\n\r\n  /** Pipeline entry used by this {@link Material} */\r\n  pipelineEntry: AllowedPipelineEntries\r\n\r\n  /**\r\n   * Array of {@link BindGroup | bind groups} used by this {@link Material}\r\n   * This array respects a specific order:\r\n   * 1. The {@link texturesBindGroup | textures bind groups}\r\n   * 2. The {@link BindGroup | bind group} created using {@link types/BindGroups.BindGroupInputs#uniforms | uniforms} and {@link types/BindGroups.BindGroupInputs#storages | storages} parameters if any\r\n   * 3. Additional {@link MaterialParams#bindGroups | bind groups} parameters if any\r\n   */\r\n  bindGroups: AllowedBindGroups[]\r\n  /** Array of {@link TextureBindGroup | texture bind groups} used by this {@link Material} */\r\n  texturesBindGroups: TextureBindGroup[]\r\n  /** Array of {@link BindGroup | bind groups} created using the {@link types/BindGroups.BindGroupInputs#uniforms | uniforms} and {@link types/BindGroups.BindGroupInputs#storages | storages} parameters when instancing this {@link Material} */\r\n  inputsBindGroups: BindGroup[]\r\n  /** Array of {@link BindGroup | cloned bind groups} created by this {@link Material} */\r\n  clonedBindGroups: AllowedBindGroups[]\r\n\r\n  /** Object containing all uniforms inputs handled by this {@link Material} */\r\n  uniforms: Record<string, Record<string, BufferBindingInput>>\r\n  /** Object containing all read only or read/write storages inputs handled by this {@link Material} */\r\n  storages: Record<string, Record<string, BufferBindingInput>>\r\n\r\n  /** Map of {@link Binding | bindings} created using the {@link types/BindGroups.BindGroupInputs#uniforms | uniforms} and {@link types/BindGroups.BindGroupInputs#storages | storages} parameters when instancing this {@link Material} */\r\n  inputsBindings: Map<string, BindGroupBindingElement>\r\n\r\n  /** Array of {@link DOMTexture} handled by this {@link Material} */\r\n  domTextures: DOMTexture[]\r\n  /** Array of {@link Texture} handled by this {@link Material} */\r\n  textures: Texture[]\r\n  /** Array of {@link Sampler} handled by this {@link Material} */\r\n  samplers: Sampler[]\r\n\r\n  /**\r\n   * Material constructor\r\n   * @param renderer - our renderer class object\r\n   * @param parameters - {@link types/Materials.MaterialParams | parameters} used to create our Material\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters: MaterialParams) {\r\n    this.type = 'Material'\r\n\r\n    renderer = isRenderer(renderer, this.type)\r\n\r\n    this.renderer = renderer\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    const {\r\n      shaders,\r\n      label,\r\n      useAsyncPipeline,\r\n      uniforms,\r\n      storages,\r\n      bindings,\r\n      bindGroups,\r\n      samplers,\r\n      textures,\r\n      domTextures,\r\n    } = parameters\r\n\r\n    this.options = {\r\n      shaders,\r\n      label,\r\n      useAsyncPipeline: useAsyncPipeline === undefined ? true : useAsyncPipeline,\r\n      ...(uniforms !== undefined && { uniforms }),\r\n      ...(storages !== undefined && { storages }),\r\n      ...(bindings !== undefined && { bindings }),\r\n      ...(bindGroups !== undefined && { bindGroups }),\r\n      ...(samplers !== undefined && { samplers }),\r\n      ...(textures !== undefined && { textures }),\r\n      ...(domTextures !== undefined && { domTextures }),\r\n    }\r\n\r\n    this.bindGroups = []\r\n    this.texturesBindGroups = []\r\n    this.clonedBindGroups = []\r\n\r\n    this.setBindGroups()\r\n\r\n    this.setTextures()\r\n    this.setSamplers()\r\n  }\r\n\r\n  /**\r\n   * Check if all bind groups are ready, and create them if needed\r\n   */\r\n  compileMaterial() {\r\n    const texturesBindGroupLength = this.texturesBindGroup.bindings.length ? 1 : 0\r\n    const bindGroupsReady = this.bindGroups.length >= this.inputsBindGroups.length + texturesBindGroupLength\r\n\r\n    if (!bindGroupsReady) {\r\n      this.createBindGroups()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get whether the renderer is ready, our pipeline entry and pipeline have been created and successfully compiled\r\n   * @readonly\r\n   */\r\n  get ready(): boolean {\r\n    return !!(this.renderer.ready && this.pipelineEntry && this.pipelineEntry.pipeline && this.pipelineEntry.ready)\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.\r\n   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to render\r\n   */\r\n  loseContext() {\r\n    // start with the textures\r\n    for (const texture of this.domTextures) {\r\n      texture.texture = null\r\n      texture.sourceUploaded = false\r\n    }\r\n\r\n    for (const texture of this.textures) {\r\n      texture.texture = null\r\n    }\r\n\r\n    // then bind groups and struct\r\n    ;[...this.bindGroups, ...this.clonedBindGroups, ...this.inputsBindGroups].forEach((bindGroup) =>\r\n      bindGroup.loseContext()\r\n    )\r\n\r\n    // reset pipeline as well\r\n    this.pipelineEntry.pipeline = null\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored to recreate our samplers, textures and bind groups.\r\n   */\r\n  restoreContext() {\r\n    // start with the samplers and textures\r\n    for (const sampler of this.samplers) {\r\n      // the samplers have all been recreated by the renderer, just update the reference\r\n      sampler.createSampler()\r\n      sampler.binding.resource = sampler.sampler\r\n    }\r\n\r\n    // recreate the textures and resize them\r\n    for (const texture of this.domTextures) {\r\n      texture.createTexture()\r\n      texture.resize()\r\n    }\r\n\r\n    for (const texture of this.textures) {\r\n      texture.resize(texture.size)\r\n    }\r\n\r\n    // now the bind groups\r\n    ;[...this.bindGroups, ...this.clonedBindGroups, ...this.inputsBindGroups].forEach((bindGroup) => {\r\n      bindGroup.restoreContext()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get the complete code of a given shader including all the WGSL fragment code snippets added by the pipeline\r\n   * @param [shaderType=\"full\"] - shader to get the code from\r\n   * @returns - The corresponding shader code\r\n   */\r\n  getShaderCode(shaderType: FullShadersType = 'full'): string {\r\n    if (!this.pipelineEntry) return ''\r\n\r\n    shaderType = (() => {\r\n      switch (shaderType) {\r\n        case 'vertex':\r\n        case 'fragment':\r\n        case 'compute':\r\n        case 'full':\r\n          return shaderType\r\n        default:\r\n          return 'full'\r\n      }\r\n    })()\r\n\r\n    return this.pipelineEntry.shaders[shaderType].code\r\n  }\r\n\r\n  /**\r\n   * Get the added code of a given shader, i.e. all the WGSL fragment code snippets added by the pipeline\r\n   * @param [shaderType=\"vertex\"] - shader to get the code from\r\n   * @returns - The corresponding shader code\r\n   */\r\n  getAddedShaderCode(shaderType: FullShadersType = 'vertex'): string {\r\n    if (!this.pipelineEntry) return ''\r\n\r\n    shaderType = (() => {\r\n      switch (shaderType) {\r\n        case 'vertex':\r\n        case 'fragment':\r\n        case 'compute':\r\n          return shaderType\r\n        default:\r\n          return 'vertex'\r\n      }\r\n    })()\r\n\r\n    return this.pipelineEntry.shaders[shaderType].head\r\n  }\r\n\r\n  /* BIND GROUPS */\r\n\r\n  /**\r\n   * Prepare and set our bind groups based on inputs and bindGroups Material parameters\r\n   */\r\n  setBindGroups() {\r\n    this.uniforms = {}\r\n    this.storages = {}\r\n\r\n    this.inputsBindGroups = []\r\n    this.inputsBindings = new Map()\r\n\r\n    if (this.options.uniforms || this.options.storages || this.options.bindings) {\r\n      const inputsBindGroup = new BindGroup(this.renderer, {\r\n        label: this.options.label + ': Bindings bind group',\r\n        uniforms: this.options.uniforms,\r\n        storages: this.options.storages,\r\n        bindings: this.options.bindings,\r\n      })\r\n\r\n      this.processBindGroupBindings(inputsBindGroup)\r\n      this.inputsBindGroups.push(inputsBindGroup)\r\n      inputsBindGroup.consumers.add(this.uuid)\r\n    }\r\n\r\n    this.options.bindGroups?.forEach((bindGroup) => {\r\n      this.processBindGroupBindings(bindGroup)\r\n      this.inputsBindGroups.push(bindGroup)\r\n      bindGroup.consumers.add(this.uuid)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get the main {@link TextureBindGroup | texture bind group} created by this {@link Material} to manage all textures related struct\r\n   * @readonly\r\n   */\r\n  get texturesBindGroup(): TextureBindGroup {\r\n    return this.texturesBindGroups[0]\r\n  }\r\n\r\n  /**\r\n   * Process all {@link BindGroup} struct and add them to the corresponding objects based on their binding types. Also store them in a inputsBindings array to facilitate further access to struct.\r\n   * @param bindGroup - The {@link BindGroup} to process\r\n   */\r\n  processBindGroupBindings(bindGroup: BindGroup) {\r\n    for (const inputBinding of bindGroup.bindings) {\r\n      if (inputBinding.bindingType === 'uniform')\r\n        this.uniforms = {\r\n          ...this.uniforms,\r\n          [inputBinding.name]: (inputBinding as BindGroupBufferBindingElement).inputs,\r\n        }\r\n      if (inputBinding.bindingType === 'storage')\r\n        this.storages = {\r\n          ...this.storages,\r\n          [inputBinding.name]: (inputBinding as BindGroupBufferBindingElement).inputs,\r\n        }\r\n\r\n      this.inputsBindings.set(inputBinding.name, inputBinding)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the bind groups if they need to be created\r\n   */\r\n  createBindGroups() {\r\n    // textures first\r\n    if (this.texturesBindGroup.shouldCreateBindGroup) {\r\n      this.texturesBindGroup.setIndex(this.bindGroups.length)\r\n      this.texturesBindGroup.createBindGroup()\r\n\r\n      this.bindGroups.push(this.texturesBindGroup)\r\n    }\r\n\r\n    // then uniforms/storages inputs\r\n    for (const bindGroup of this.inputsBindGroups) {\r\n      if (bindGroup.shouldCreateBindGroup) {\r\n        bindGroup.setIndex(this.bindGroups.length)\r\n        bindGroup.createBindGroup()\r\n\r\n        this.bindGroups.push(bindGroup)\r\n      }\r\n    }\r\n\r\n    // finally, bindGroups inputs\r\n    this.options.bindGroups?.forEach((bindGroup) => {\r\n      // it has been created but not been added yet? add it!\r\n      if (!bindGroup.shouldCreateBindGroup && !this.bindGroups.find((bG) => bG.uuid === bindGroup.uuid)) {\r\n        bindGroup.setIndex(this.bindGroups.length)\r\n        this.bindGroups.push(bindGroup)\r\n      }\r\n\r\n      // add it to our textures bind groups as well if needed\r\n      if (bindGroup instanceof TextureBindGroup && !this.texturesBindGroups.find((bG) => bG.uuid === bindGroup.uuid)) {\r\n        this.texturesBindGroups.push(bindGroup)\r\n\r\n        // also add the textures?\r\n        for (const texture of bindGroup.textures) {\r\n          if (texture instanceof DOMTexture && !this.domTextures.find((t) => t.uuid === texture.uuid)) {\r\n            this.domTextures.push(texture)\r\n          } else if (texture instanceof Texture && !this.textures.find((t) => t.uuid === texture.uuid)) {\r\n            this.textures.push(texture)\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Clones a {@link BindGroup} from a list of buffers\r\n   * Useful to create a new bind group with already created buffers, but swapped\r\n   * @param parameters - parameters used to clone the {@link BindGroup | bind group}\r\n   * @param parameters.bindGroup - the BindGroup to clone\r\n   * @param parameters.bindings - our input binding buffers\r\n   * @param parameters.keepLayout - whether we should keep original bind group layout or not\r\n   * @returns - the cloned BindGroup\r\n   */\r\n  cloneBindGroup({\r\n    bindGroup,\r\n    bindings = [],\r\n    keepLayout = true,\r\n  }: {\r\n    bindGroup?: AllowedBindGroups\r\n    bindings?: BindGroupBindingElement[]\r\n    keepLayout?: boolean\r\n  }): AllowedBindGroups | null {\r\n    if (!bindGroup) return null\r\n\r\n    const clone = bindGroup.clone({ bindings, keepLayout })\r\n    this.clonedBindGroups.push(clone)\r\n\r\n    return clone\r\n  }\r\n\r\n  /**\r\n   * Get a corresponding {@link BindGroup} or {@link TextureBindGroup} from one of its binding name/key\r\n   * @param bindingName - the binding name/key to look for\r\n   * @returns - bind group found or null if not found\r\n   */\r\n  getBindGroupByBindingName(bindingName: BufferBinding['name'] = ''): AllowedBindGroups | null {\r\n    return (this.ready ? this.bindGroups : this.inputsBindGroups).find((bindGroup) => {\r\n      return bindGroup.bindings.find((binding) => binding.name === bindingName)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Destroy a bind group, only if it is not used by another object\r\n   * @param bindGroup - bind group to eventually destroy\r\n   */\r\n  destroyBindGroup(bindGroup: AllowedBindGroups) {\r\n    // remove this material as a consumer of the bind group\r\n    bindGroup.consumers.delete(this.uuid)\r\n\r\n    // if the bind group does not have another consumer\r\n    // destroy it\r\n    if (!bindGroup.consumers.size) {\r\n      bindGroup.destroy()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all bind groups\r\n   */\r\n  destroyBindGroups() {\r\n    this.bindGroups.forEach((bindGroup) => this.destroyBindGroup(bindGroup))\r\n    this.clonedBindGroups.forEach((bindGroup) => this.destroyBindGroup(bindGroup))\r\n    this.texturesBindGroups.forEach((bindGroup) => this.destroyBindGroup(bindGroup))\r\n    this.texturesBindGroups = []\r\n    this.inputsBindGroups = []\r\n    this.bindGroups = []\r\n    this.clonedBindGroups = []\r\n  }\r\n\r\n  /**\r\n   * {@link BindGroup#update | Update} all bind groups:\r\n   * - Update all {@link texturesBindGroups | textures bind groups} textures\r\n   * - Update its {@link BindGroup#bufferBindings | buffer bindings}\r\n   * - Check if it eventually needs a {@link BindGroup#resetBindGroup | reset}\r\n   * - Check if we need to flush the pipeline\r\n   */\r\n  updateBindGroups() {\r\n    // now update all bind groups in use and check if they need to flush the pipeline\r\n    for (const bindGroup of this.bindGroups) {\r\n      bindGroup.update()\r\n\r\n      // if a bind group needs to flush the pipeline\r\n      // usually happens if one of the struct bindingType has changed,\r\n      // which means the shader should be re-patched and recreated\r\n      if (bindGroup.needsPipelineFlush && this.pipelineEntry.ready) {\r\n        this.pipelineEntry.flushPipelineEntry(this.bindGroups)\r\n        bindGroup.needsPipelineFlush = false\r\n      }\r\n    }\r\n  }\r\n\r\n  /* INPUTS */\r\n\r\n  /**\r\n   * Look for a {@link BindGroupBindingElement | binding} by name in all {@link inputsBindings | input bindings}\r\n   * @param bindingName - the binding name or key\r\n   * @returns - the found binding, or null if not found\r\n   */\r\n  getBindingByName(bindingName: Binding['name'] = ''): BindGroupBindingElement | undefined {\r\n    return this.inputsBindings.get(bindingName)\r\n  }\r\n\r\n  /**\r\n   * Look for a {@link BindGroupBufferBindingElement | buffer binding} by name in all {@link inputsBindings | input bindings}\r\n   * @param bindingName - the binding name or key\r\n   * @returns - the found binding, or null if not found\r\n   */\r\n  getBufferBindingByName(bindingName: Binding['name'] = ''): BindGroupBufferBindingElement | undefined {\r\n    const bufferBinding = this.getBindingByName(bindingName)\r\n    return bufferBinding && 'buffer' in bufferBinding ? bufferBinding : undefined\r\n  }\r\n\r\n  /**\r\n   * Force setting a given {@link BufferBindingInput | buffer binding} shouldUpdate flag to `true` to update it at next render\r\n   * @param bufferBindingName - the buffer binding name\r\n   * @param bindingName - the binding name\r\n   */\r\n  shouldUpdateInputsBindings(bufferBindingName?: BufferBinding['name'], bindingName?: BufferBindingInput['name']) {\r\n    if (!bufferBindingName) return\r\n\r\n    const bufferBinding = this.getBindingByName(bufferBindingName)\r\n    if (bufferBinding) {\r\n      if (!bindingName) {\r\n        Object.keys((bufferBinding as BindGroupBufferBindingElement).inputs).forEach((bindingKey) =>\r\n          (bufferBinding as BindGroupBufferBindingElement).shouldUpdateBinding(bindingKey)\r\n        )\r\n      } else {\r\n        ;(bufferBinding as BindGroupBufferBindingElement).shouldUpdateBinding(bindingName)\r\n      }\r\n    }\r\n  }\r\n\r\n  /* SAMPLERS & TEXTURES */\r\n\r\n  /**\r\n   * Prepare our textures array and set the {@link TextureBindGroup}\r\n   */\r\n  setTextures() {\r\n    this.domTextures = []\r\n    this.textures = []\r\n    this.texturesBindGroups.push(\r\n      new TextureBindGroup(this.renderer, {\r\n        label: this.options.label + ': Textures bind group',\r\n      })\r\n    )\r\n\r\n    this.texturesBindGroup.consumers.add(this.uuid)\r\n\r\n    this.options.domTextures?.forEach((texture) => {\r\n      this.addTexture(texture)\r\n    })\r\n\r\n    this.options.textures?.forEach((texture) => {\r\n      this.addTexture(texture)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Add a texture to our array, and add it to the textures bind group only if used in the shaders (avoid binding useless data)\r\n   * @param texture - texture to add\r\n   */\r\n  addTexture(texture: DOMTexture | Texture) {\r\n    if (texture instanceof DOMTexture) {\r\n      this.domTextures.push(texture)\r\n    } else if (texture instanceof Texture) {\r\n      this.textures.push(texture)\r\n    }\r\n\r\n    // is it used in our shaders?\r\n    if (\r\n      (this.options.shaders.vertex && this.options.shaders.vertex.code.indexOf(texture.options.name) !== -1) ||\r\n      (this.options.shaders.fragment &&\r\n        (this.options.shaders.fragment as ShaderOptions).code.indexOf(texture.options.name) !== -1) ||\r\n      (this.options.shaders.compute && this.options.shaders.compute.code.indexOf(texture.options.name) !== -1)\r\n    ) {\r\n      this.texturesBindGroup.addTexture(texture)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy a {@link DOMTexture} or {@link Texture}, only if it is not used by another object or cached.\r\n   * @param texture - {@link DOMTexture} or {@link Texture} to eventually destroy\r\n   */\r\n  destroyTexture(texture: DOMTexture | Texture) {\r\n    // do not destroy a texture that must stay in cache\r\n    if ((texture as DOMTexture).options.cache) return\r\n    if (!(texture as Texture).options.autoDestroy) return\r\n\r\n    // check if this texture is used by another object before actually destroying it\r\n    const objectsUsingTexture = this.renderer.getObjectsByTexture(texture)\r\n\r\n    const shouldDestroy =\r\n      !objectsUsingTexture || !objectsUsingTexture.some((object) => object.material.uuid !== this.uuid)\r\n\r\n    if (shouldDestroy) {\r\n      texture.destroy()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy all the Material textures\r\n   */\r\n  destroyTextures() {\r\n    this.domTextures?.forEach((texture) => this.destroyTexture(texture))\r\n    this.textures?.forEach((texture) => this.destroyTexture(texture))\r\n    this.domTextures = []\r\n    this.textures = []\r\n  }\r\n\r\n  /**\r\n   * Prepare our samplers array and always add a default sampler if not already passed as parameter\r\n   */\r\n  setSamplers() {\r\n    this.samplers = []\r\n\r\n    this.options.samplers?.forEach((sampler) => {\r\n      this.addSampler(sampler)\r\n    })\r\n\r\n    // create our default sampler if needed\r\n    const hasDefaultSampler = this.samplers.find((sampler) => sampler.name === 'defaultSampler')\r\n    if (!hasDefaultSampler) {\r\n      const sampler = new Sampler(this.renderer, { label: 'Default sampler', name: 'defaultSampler' })\r\n      this.addSampler(sampler)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a sampler to our array, and add it to the textures bind group only if used in the shaders (avoid binding useless data)\r\n   * @param sampler - sampler to add\r\n   */\r\n  addSampler(sampler: Sampler) {\r\n    this.samplers.push(sampler)\r\n\r\n    // is it used in our shaders?\r\n    if (\r\n      (this.options.shaders.vertex && this.options.shaders.vertex.code.indexOf(sampler.name) !== -1) ||\r\n      (this.options.shaders.fragment &&\r\n        (this.options.shaders.fragment as ShaderOptions).code.indexOf(sampler.name) !== -1) ||\r\n      (this.options.shaders.compute && this.options.shaders.compute.code.indexOf(sampler.name) !== -1)\r\n    ) {\r\n      this.texturesBindGroup.addSampler(sampler)\r\n    }\r\n  }\r\n\r\n  /* BUFFER RESULTS */\r\n\r\n  /**\r\n   * Map a {@link Buffer#GPUBuffer | Buffer's GPU buffer} and put a copy of the data into a {@link Float32Array}\r\n   * @param buffer - {@link Buffer} to use for mapping\r\n   * @async\r\n   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data\r\n   */\r\n  async getBufferResult(buffer: Buffer): Promise<Float32Array> {\r\n    return await buffer.mapBufferAsync()\r\n  }\r\n\r\n  /**\r\n   * Map the content of a {@link BufferBinding} {@link Buffer#GPUBuffer | GPU buffer} and put a copy of the data into a {@link Float32Array}\r\n   * @param bindingName - The name of the {@link inputsBindings | input bindings} from which to map the {@link Buffer#GPUBuffer | GPU buffer}\r\n   * @async\r\n   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data\r\n   */\r\n  async getBufferBindingResultByBindingName(bindingName: Binding['name'] = ''): Promise<Float32Array> {\r\n    const binding = this.getBufferBindingByName(bindingName)\r\n    if (binding && 'buffer' in binding) {\r\n      const dstBuffer = this.renderer.copyBufferToBuffer({\r\n        srcBuffer: binding.buffer,\r\n      })\r\n\r\n      return await this.getBufferResult(dstBuffer)\r\n    } else {\r\n      return new Float32Array(0)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Map the content of a specific {@link BufferElement | buffer element} belonging to a {@link BufferBinding} {@link Buffer#GPUBuffer | GPU buffer} and put a copy of the data into a {@link Float32Array}\r\n   * @param parameters - parameters used to get the result\r\n   * @param parameters.bindingName - The name of the {@link inputsBindings | input bindings} from which to map the {@link Buffer#GPUBuffer | GPU buffer}\r\n   * @param parameters.bufferElementName - The name of the {@link BufferElement | buffer element} from which to extract the data afterwards\r\n   * @returns - {@link Float32Array} holding {@link GPUBuffer} data\r\n   */\r\n  async getBufferElementResultByNames({\r\n    bindingName,\r\n    bufferElementName,\r\n  }: {\r\n    bindingName: Binding['name']\r\n    bufferElementName: BufferElement['name']\r\n  }): Promise<Float32Array> {\r\n    const result = await this.getBufferBindingResultByBindingName(bindingName)\r\n\r\n    if (!bufferElementName || result.length) {\r\n      return result\r\n    } else {\r\n      const binding = this.getBufferBindingByName(bindingName)\r\n      if (binding) {\r\n        return binding.extractBufferElementDataFromBufferResult({ result, bufferElementName })\r\n      } else {\r\n        return result\r\n      }\r\n    }\r\n  }\r\n\r\n  /* RENDER */\r\n\r\n  /**\r\n   * Called before rendering the Material.\r\n   * First, check if we need to create our bind groups or pipeline\r\n   * Then render the {@link domTextures}\r\n   * Finally updates all the {@link bindGroups | bind groups}\r\n   */\r\n  onBeforeRender() {\r\n    // set our material if needed\r\n    this.compileMaterial()\r\n\r\n    // first what needs to be done for all textures\r\n    for (const texture of this.domTextures) {\r\n      texture.render()\r\n    }\r\n\r\n    // update bind groups\r\n    this.updateBindGroups()\r\n  }\r\n\r\n  /**\r\n   * Set the current pipeline\r\n   * @param pass - current pass encoder\r\n   */\r\n  setPipeline(pass: GPURenderPassEncoder | GPUComputePassEncoder) {\r\n    this.renderer.pipelineManager.setCurrentPipeline(pass, this.pipelineEntry)\r\n  }\r\n\r\n  /**\r\n   * Use the {@link Renderer#pipelineManager | renderer pipelineManager} to only set the bind groups that are not already set.\r\n   * @param pass - current pass encoder\r\n   */\r\n  setActiveBindGroups(pass: GPURenderPassEncoder | GPUComputePassEncoder) {\r\n    this.renderer.pipelineManager.setActiveBindGroups(pass, this.bindGroups)\r\n  }\r\n\r\n  /**\r\n   * Render the material if it is ready:\r\n   * Set the current pipeline and set the bind groups\r\n   * @param pass - current pass encoder\r\n   */\r\n  render(pass: GPURenderPassEncoder | GPUComputePassEncoder) {\r\n    // renderer or pipeline are not ready yet\r\n    // not really needed since meshes/compute passes do already check it beforehand\r\n    // mostly here as a safeguard\r\n    if (!this.ready) return\r\n\r\n    // set current pipeline\r\n    this.setPipeline(pass)\r\n\r\n    // only set the bind groups that need to be set\r\n    this.setActiveBindGroups(pass)\r\n  }\r\n\r\n  /**\r\n   * Destroy the Material\r\n   */\r\n  destroy() {\r\n    // destroy all buffers created with createBuffer\r\n    this.destroyBindGroups()\r\n    this.destroyTextures()\r\n  }\r\n}\r\n","import { Material } from './Material'\r\nimport { ComputeMaterialOptions, ComputeMaterialParams, FullShadersType } from '../../types/Materials'\r\nimport { isRenderer, Renderer } from '../renderers/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { ComputePipelineEntry } from '../pipelines/ComputePipelineEntry'\r\nimport { WritableBufferBinding } from '../bindings/WritableBufferBinding'\r\n\r\n/**\r\n * Create a {@link Material} specifically built to run computations on the GPU. Internally used by {@link core/computePasses/ComputePass.ComputePass | ComputePass}.\r\n *\r\n * ## Compute pipeline\r\n *\r\n * A {@link ComputeMaterial} automatically creates a {@link ComputePipelineEntry}. Once all the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} have been created, they are sent with the compute shader code to the {@link ComputePipelineEntry}, which is in turns responsible for creating the {@link GPUComputePipeline}.\r\n *\r\n * After the {@link GPUComputePipeline} has been successfully compiled, the {@link ComputeMaterial} is considered to be ready and it can start running the compute shader computations.\r\n *\r\n */\r\nexport class ComputeMaterial extends Material {\r\n  /** {@link ComputePipelineEntry | Compute pipeline entry} used by this {@link ComputeMaterial} */\r\n  pipelineEntry: ComputePipelineEntry\r\n  /** Options used to create this {@link ComputeMaterial} */\r\n  options: ComputeMaterialOptions\r\n\r\n  /** Default work group dispatch size to use with this {@link ComputeMaterial} */\r\n  dispatchSize?: number | number[]\r\n\r\n  /** function assigned to the {@link useCustomRender} callback */\r\n  _useCustomRenderCallback: (pass: GPUComputePassEncoder) => void\r\n\r\n  /**\r\n   * ComputeMaterial constructor\r\n   * @param renderer - our {@link Renderer} class object\r\n   * @param parameters - {@link ComputeMaterialParams | parameters} used to create our {@link ComputeMaterial}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters: ComputeMaterialParams) {\r\n    const type = 'ComputeMaterial'\r\n\r\n    renderer = isRenderer(renderer, type)\r\n\r\n    super(renderer, parameters)\r\n\r\n    this.type = type\r\n    this.renderer = renderer\r\n\r\n    let { shaders, dispatchSize } = parameters\r\n\r\n    if (!shaders || !shaders.compute) {\r\n      shaders = {\r\n        compute: {\r\n          code: '',\r\n          entryPoint: 'main',\r\n        },\r\n      }\r\n    }\r\n\r\n    if (!shaders.compute.code) {\r\n      shaders.compute.code = '@compute @workgroup_size(1) fn main(){}'\r\n    }\r\n\r\n    if (!shaders.compute.entryPoint) {\r\n      shaders.compute.entryPoint = 'main'\r\n    }\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      shaders,\r\n      ...(parameters.dispatchSize !== undefined && { dispatchSize: parameters.dispatchSize }),\r\n    }\r\n\r\n    // set default dispatch size\r\n    if (!dispatchSize) {\r\n      dispatchSize = 1\r\n    }\r\n\r\n    if (Array.isArray(dispatchSize)) {\r\n      dispatchSize[0] = Math.ceil(dispatchSize[0] ?? 1)\r\n      dispatchSize[1] = Math.ceil(dispatchSize[1] ?? 1)\r\n      dispatchSize[2] = Math.ceil(dispatchSize[2] ?? 1)\r\n    } else if (!isNaN(dispatchSize)) {\r\n      dispatchSize = [Math.ceil(dispatchSize), 1, 1]\r\n    }\r\n\r\n    this.dispatchSize = dispatchSize\r\n\r\n    // eager pipeline entry creation for compute materials\r\n    // since we do not use cache!\r\n    this.pipelineEntry = this.renderer.pipelineManager.createComputePipeline({\r\n      renderer: this.renderer,\r\n      label: this.options.label + ' compute pipeline',\r\n      shaders: this.options.shaders,\r\n      useAsync: this.options.useAsyncPipeline,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * When all bind groups are created, add them to the {@link ComputePipelineEntry}\r\n   */\r\n  setPipelineEntryProperties() {\r\n    this.pipelineEntry.setPipelineEntryProperties({\r\n      bindGroups: this.bindGroups,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Compile the {@link ComputePipelineEntry}\r\n   * @async\r\n   */\r\n  async compilePipelineEntry(): Promise<void> {\r\n    await this.pipelineEntry.compilePipelineEntry()\r\n  }\r\n\r\n  /**\r\n   * Check if all bind groups are ready, create them if needed, set {@link ComputePipelineEntry} bind group buffers and compile the pipeline\r\n   * @async\r\n   */\r\n  async compileMaterial() {\r\n    super.compileMaterial()\r\n\r\n    if (this.pipelineEntry && this.pipelineEntry.canCompile) {\r\n      this.setPipelineEntryProperties()\r\n      await this.compilePipelineEntry()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the complete code of a given shader including all the WGSL fragment code snippets added by the pipeline\r\n   * @param [shaderType=\"compute\"] - shader to get the code from\r\n   * @returns - The corresponding shader code\r\n   */\r\n  getShaderCode(shaderType: FullShadersType = 'compute'): string {\r\n    return super.getShaderCode(shaderType)\r\n  }\r\n\r\n  /**\r\n   * Get the added code of a given shader, i.e. all the WGSL fragment code snippets added by the pipeline\r\n   * @param [shaderType=\"compute\"] - shader to get the code from\r\n   * @returns - The corresponding shader code\r\n   */\r\n  getAddedShaderCode(shaderType: FullShadersType = 'compute'): string {\r\n    return super.getAddedShaderCode(shaderType)\r\n  }\r\n\r\n  /* RENDER */\r\n\r\n  /**\r\n   * If a custom render function has been defined instead of the default one, register the callback\r\n   * @param callback - callback to run instead of the default render behaviour, which is to set the {@link bindGroups | bind groups} and dispatch the work groups based on the {@link dispatchSize | default dispatch size}. This is where you will have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.\r\n   */\r\n  useCustomRender(callback: (pass: GPUComputePassEncoder) => void) {\r\n    if (callback) {\r\n      this._useCustomRenderCallback = callback\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render the material if it is ready:\r\n   * Set the current pipeline, set the bind groups and dispatch the work groups\r\n   * @param pass - current compute pass encoder\r\n   */\r\n  render(pass: GPUComputePassEncoder) {\r\n    // renderer or pipeline are not ready yet\r\n    // not really needed since compute passes do already check it beforehand\r\n    // mostly here as a safeguard\r\n    if (!this.ready) return\r\n\r\n    // set current pipeline\r\n    this.setPipeline(pass)\r\n\r\n    // if we declared a custom render function, call it\r\n    if (this._useCustomRenderCallback !== undefined) {\r\n      this._useCustomRenderCallback(pass)\r\n    } else {\r\n      // else just set our bind groups and dispatch\r\n      for (const bindGroup of this.bindGroups) {\r\n        pass.setBindGroup(bindGroup.index, bindGroup.bindGroup)\r\n      }\r\n      //this.renderer.pipelineManager.setActiveBindGroups(pass, this.bindGroups)\r\n\r\n      pass.dispatchWorkgroups(this.dispatchSize[0], this.dispatchSize[1], this.dispatchSize[2])\r\n    }\r\n  }\r\n\r\n  /* RESULT BUFFER */\r\n\r\n  /**\r\n   * Copy all writable binding buffers that need it\r\n   * @param commandEncoder - current command encoder\r\n   */\r\n  copyBufferToResult(commandEncoder: GPUCommandEncoder) {\r\n    for (const bindGroup of this.bindGroups) {\r\n      bindGroup.bufferBindings.forEach((binding: WritableBufferBinding) => {\r\n        if (binding.shouldCopyResult) {\r\n          this.renderer.copyBufferToBuffer({\r\n            srcBuffer: binding.buffer,\r\n            dstBuffer: binding.resultBuffer,\r\n            commandEncoder,\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the {@link core/bindings/WritableBufferBinding.WritableBufferBinding#resultBuffer | result GPU buffer} content by {@link core/bindings/WritableBufferBinding.WritableBufferBinding | binding} and {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} names\r\n   * @param parameters - parameters used to get the result\r\n   * @param parameters.bindingName - {@link core/bindings/WritableBufferBinding.WritableBufferBinding#name | binding name} from which to get the result\r\n   * @param parameters.bufferElementName - optional {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} (i.e. struct member) name if the result needs to be restrained to only one element\r\n   * @async\r\n   * @returns - the mapped content of the {@link GPUBuffer} as a {@link Float32Array}\r\n   */\r\n  async getComputeResult({\r\n    bindingName = '',\r\n    bufferElementName = '',\r\n  }: {\r\n    bindingName?: string\r\n    bufferElementName?: string\r\n  }): Promise<Float32Array> {\r\n    const binding = this.getBufferBindingByName(bindingName)\r\n\r\n    if (binding && 'resultBuffer' in binding) {\r\n      const result = await this.getBufferResult(binding.resultBuffer)\r\n\r\n      if (bufferElementName && result.length) {\r\n        return binding.extractBufferElementDataFromBufferResult({ result, bufferElementName })\r\n      } else {\r\n        return result\r\n      }\r\n    } else {\r\n      return new Float32Array(0)\r\n    }\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\nimport { generateUUID } from '../../utils/utils'\nimport { ComputeMaterial } from '../materials/ComputeMaterial'\nimport { ComputeMaterialParams, MaterialParams, MaterialShaders } from '../../types/Materials'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { Texture, TextureParams } from '../textures/Texture'\nimport { DOMTexture } from '../textures/DOMTexture'\nimport { ExternalTextureParams, DOMTextureParams } from '../../types/Textures'\n\n/** Defines {@link ComputePass} options */\nexport interface ComputePassOptions {\n  /** The label of the {@link ComputePass} */\n  label: string\n  /** Controls the order in which this {@link ComputePass} should be rendered by our {@link core/scenes/Scene.Scene | Scene} */\n  renderOrder?: number\n  /** Whether the {@link ComputePass} should be added to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\n  autoRender?: boolean\n  /** Compute shader passed to the {@link ComputePass} following the {@link types/Materials.ShaderOptions | shader object} notation */\n  shaders: MaterialShaders\n  /** whether the {@link core/pipelines/ComputePipelineEntry.ComputePipelineEntry#pipeline | compute pipeline} should be compiled asynchronously */\n  useAsyncPipeline?: boolean\n  /** Parameters used by this {@link ComputePass} to create a {@link DOMTexture} */\n  texturesOptions?: ExternalTextureParams\n  /** Default {@link ComputeMaterial} work group dispatch size to use with this {@link ComputePass} */\n  dispatchSize?: number | number[]\n}\n\n/**\n * An object defining all possible {@link ComputePass} class instancing parameters\n */\nexport interface ComputePassParams extends Partial<ComputePassOptions>, MaterialParams {}\n\nlet computePassIndex = 0\n\n/**\n * Used to create a {@link ComputePass}, i.e. run computations on the GPU.<br>\n * A {@link ComputePass} is basically a wrapper around a {@link ComputeMaterial} that handles most of the process.\n *\n * The default render behaviour of a {@link ComputePass} is to set its {@link core/bindGroups/BindGroup.BindGroup | bind groups} and then dispatch the workgroups based on the provided {@link ComputeMaterial#dispatchSize | dispatchSize}.<br>\n * However, most of the time you'd want a slightly more complex behaviour. The {@link ComputePass#useCustomRender | `useCustomRender` hook} lets you define a totally custom behaviour, but you'll have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // let's assume we are going to compute the positions of 100.000 particles\n * const nbParticles = 100_000\n *\n * const computePass = new ComputePass(gpuCurtains, {\n *   label: 'My compute pass',\n *   shaders: {\n *     compute: {\n *       code: computeShaderCode, // assume it is a valid WGSL compute shader\n *     },\n *   },\n *   dispatchSize: Math.ceil(nbParticles / 64),\n *   storages: {\n *     particles: {\n *       access: 'read_write',\n *       struct: {\n *         position: {\n *           type: 'array<vec4f>',\n *           value: new Float32Array(nbParticles * 4),\n *         },\n *       },\n *     },\n *   },\n * })\n * ```\n */\nexport class ComputePass {\n  /** The type of the {@link ComputePass} */\n  type: string\n  /** The universal unique id of the {@link ComputePass} */\n  uuid: string\n  /** The index of the {@link ComputePass}, incremented each time a new one is instanced */\n  index: number\n  /** The {@link Renderer} used */\n  renderer: Renderer\n  /** Controls the order in which this {@link ComputePass} should be rendered by our {@link core/scenes/Scene.Scene | Scene} */\n  renderOrder: number\n\n  /** Options used to create this {@link ComputePass} */\n  options: ComputePassOptions\n\n  /** {@link ComputeMaterial} used by this {@link ComputePass} */\n  material: ComputeMaterial\n\n  /** Flag indicating whether this {@link ComputePass} is ready to be rendered */\n  _ready: boolean\n\n  /** Empty object to store any additional data or custom properties into your {@link ComputePass} */\n  userData: Record<string, unknown>\n\n  /**\n   * Whether this {@link ComputePass} should be added to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically\n   * @private\n   */\n  #autoRender = true\n\n  // callbacks / events\n  /** function assigned to the {@link onReady} callback */\n  _onReadyCallback: () => void = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onBeforeRender} callback */\n  _onBeforeRenderCallback: () => void = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onRender} callback */\n  _onRenderCallback: () => void = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onAfterRender} callback */\n  _onAfterRenderCallback: () => void = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onAfterResize} callback */\n  _onAfterResizeCallback: () => void = () => {\n    /* allow empty callback */\n  }\n\n  /**\n   * ComputePass constructor\n   * @param renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object\n   * @param parameters - {@link ComputePassParams | parameters} used to create our {@link ComputePass}\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters: ComputePassParams = {}) {\n    const type = 'ComputePass'\n\n    renderer = isRenderer(renderer, parameters.label ? `${parameters.label} ${type}` : type)\n\n    parameters.label = parameters.label ?? 'ComputePass ' + renderer.computePasses?.length\n\n    this.renderer = renderer\n    this.type = type\n    this.uuid = generateUUID()\n    Object.defineProperty(this as ComputePass, 'index', { value: computePassIndex++ })\n\n    const {\n      label,\n      shaders,\n      renderOrder,\n      uniforms,\n      storages,\n      bindGroups,\n      samplers,\n      domTextures,\n      textures,\n      autoRender,\n      useAsyncPipeline,\n      texturesOptions,\n      dispatchSize,\n    } = parameters\n\n    this.options = {\n      label,\n      shaders,\n      ...(autoRender !== undefined && { autoRender }),\n      ...(renderOrder !== undefined && { renderOrder }),\n      ...(dispatchSize !== undefined && { dispatchSize }),\n      useAsyncPipeline: useAsyncPipeline === undefined ? true : useAsyncPipeline,\n      texturesOptions, // TODO default\n    }\n\n    this.renderOrder = renderOrder ?? 0\n\n    if (autoRender !== undefined) {\n      this.#autoRender = autoRender\n    }\n\n    this.userData = {}\n\n    this.ready = false\n\n    this.setMaterial({\n      label: this.options.label,\n      shaders: this.options.shaders,\n      uniforms,\n      storages,\n      bindGroups,\n      samplers,\n      textures,\n      domTextures,\n      useAsyncPipeline,\n      dispatchSize,\n    })\n\n    this.addToScene()\n  }\n\n  /**\n   * Get or set whether the compute pass is ready to render (the material has been successfully compiled)\n   * @readonly\n   */\n  get ready(): boolean {\n    return this._ready\n  }\n\n  set ready(value: boolean) {\n    if (value) {\n      this._onReadyCallback && this._onReadyCallback()\n    }\n    this._ready = value\n  }\n\n  /**\n   * Add our compute pass to the scene and the renderer\n   */\n  addToScene() {\n    this.renderer.computePasses.push(this)\n\n    if (this.#autoRender) {\n      this.renderer.scene.addComputePass(this)\n    }\n  }\n\n  /**\n   * Remove our compute pass from the scene and the renderer\n   */\n  removeFromScene() {\n    if (this.#autoRender) {\n      this.renderer.scene.removeComputePass(this)\n    }\n\n    this.renderer.computePasses = this.renderer.computePasses.filter((computePass) => computePass.uuid !== this.uuid)\n  }\n\n  /**\n   * Create the compute pass material\n   * @param computeParameters - {@link ComputeMaterial} parameters\n   */\n  setMaterial(computeParameters: ComputeMaterialParams) {\n    this.useMaterial(new ComputeMaterial(this.renderer, computeParameters))\n  }\n\n  /**\n   * Set or update the {@link ComputePass} {@link ComputeMaterial}\n   * @param material - new {@link ComputeMaterial} to use\n   */\n  useMaterial(material: ComputeMaterial) {\n    this.material = material\n  }\n\n  /**\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.\n   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to render\n   */\n  loseContext() {\n    this.material.loseContext()\n  }\n\n  /**\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored\n   */\n  restoreContext() {\n    this.material.restoreContext()\n  }\n\n  /* TEXTURES */\n\n  /**\n   * Get our {@link ComputeMaterial#domTextures | ComputeMaterial domTextures array}\n   * @readonly\n   */\n  get domTextures(): DOMTexture[] {\n    return this.material?.domTextures || []\n  }\n\n  /**\n   * Get our {@link ComputeMaterial#textures | ComputeMaterial textures array}\n   * @readonly\n   */\n  get textures(): Texture[] {\n    return this.material?.textures || []\n  }\n\n  /**\n   * Create a new {@link DOMTexture}\n   * @param options - {@link DOMTextureParams | DOMTexture parameters}\n   * @returns - newly created {@link DOMTexture}\n   */\n  createDOMTexture(options: DOMTextureParams): DOMTexture {\n    if (!options.name) {\n      options.name = 'texture' + (this.textures.length + this.domTextures.length)\n    }\n\n    if (!options.label) {\n      options.label = this.options.label + ' ' + options.name\n    }\n\n    const domTexture = new DOMTexture(this.renderer, { ...options, ...this.options.texturesOptions })\n\n    this.addTexture(domTexture)\n\n    return domTexture\n  }\n\n  /**\n   * Create a new {@link Texture}\n   * @param  options - {@link TextureParams | Texture parameters}\n   * @returns - newly created {@link Texture}\n   */\n  createTexture(options: TextureParams): Texture {\n    if (!options.name) {\n      options.name = 'texture' + (this.textures.length + this.domTextures.length)\n    }\n\n    const texture = new Texture(this.renderer, options)\n\n    this.addTexture(texture)\n\n    return texture\n  }\n\n  /**\n   * Add a {@link Texture} or {@link DOMTexture}\n   * @param texture - {@link Texture} to add\n   */\n  addTexture(texture: Texture | DOMTexture) {\n    this.material.addTexture(texture)\n  }\n\n  /**\n   * Get our {@link ComputeMaterial#uniforms | ComputeMaterial uniforms}\n   * @readonly\n   */\n  get uniforms(): ComputeMaterial['uniforms'] {\n    return this.material?.uniforms\n  }\n\n  /**\n   * Get our {@link ComputeMaterial#storages | ComputeMaterial storages}\n   * @readonly\n   */\n  get storages(): ComputeMaterial['storages'] {\n    return this.material?.storages\n  }\n\n  /**\n   * Called from the renderer, useful to trigger an after resize callback.\n   */\n  resize() {\n    this._onAfterResizeCallback && this._onAfterResizeCallback()\n  }\n\n  /** EVENTS **/\n\n  /**\n   * Callback to run when the {@link ComputePass} is ready\n   * @param callback - callback to run when {@link ComputePass} is ready\n   */\n  onReady(callback: () => void): ComputePass {\n    if (callback) {\n      this._onReadyCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Callback to run before the {@link ComputePass} is rendered\n   * @param callback - callback to run just before {@link ComputePass} will be rendered\n   */\n  onBeforeRender(callback: () => void): ComputePass {\n    if (callback) {\n      this._onBeforeRenderCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Callback to run when the {@link ComputePass} is rendered\n   * @param callback - callback to run when {@link ComputePass} is rendered\n   */\n  onRender(callback: () => void): ComputePass {\n    if (callback) {\n      this._onRenderCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Callback to run after the {@link ComputePass} has been rendered\n   * @param callback - callback to run just after {@link ComputePass} has been rendered\n   */\n  onAfterRender(callback: () => void): ComputePass {\n    if (callback) {\n      this._onAfterRenderCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Callback used to run a custom render function instead of the default one.\n   * @param callback - Your custom render function where you will have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.\n   */\n  useCustomRender(callback: (pass: GPUComputePassEncoder) => void): ComputePass {\n    this.material.useCustomRender(callback)\n    return this\n  }\n\n  /**\n   * Callback to run after the {@link core/renderers/GPURenderer.GPURenderer | renderer} has been resized\n   * @param callback - callback to run just after {@link core/renderers/GPURenderer.GPURenderer | renderer} has been resized\n   */\n  onAfterResize(callback: () => void): ComputePass {\n    if (callback) {\n      this._onAfterResizeCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Called before rendering the ComputePass\n   * Checks if the material is ready and eventually update its struct\n   */\n  onBeforeRenderPass() {\n    if (!this.renderer.ready) return\n\n    if (this.material && this.material.ready && !this.ready) {\n      this.ready = true\n    }\n\n    this._onBeforeRenderCallback && this._onBeforeRenderCallback()\n\n    this.material.onBeforeRender()\n  }\n\n  /**\n   * Render our {@link ComputeMaterial}\n   * @param pass - current compute pass encoder\n   */\n  onRenderPass(pass: GPUComputePassEncoder) {\n    if (!this.material.ready) return\n\n    this._onRenderCallback && this._onRenderCallback()\n\n    this.material.render(pass)\n  }\n\n  /**\n   * Called after having rendered the ComputePass\n   */\n  onAfterRenderPass() {\n    this._onAfterRenderCallback && this._onAfterRenderCallback()\n  }\n\n  /**\n   * Render our compute pass\n   * Basically just check if our {@link core/renderers/GPURenderer.GPURenderer | renderer} is ready, and then render our {@link ComputeMaterial}\n   * @param pass\n   */\n  render(pass: GPUComputePassEncoder) {\n    this.onBeforeRenderPass()\n\n    // no point to render if the WebGPU device is not ready\n    if (!this.renderer.ready) return\n\n    !this.renderer.production && pass.pushDebugGroup(this.options.label)\n\n    this.onRenderPass(pass)\n\n    !this.renderer.production && pass.popDebugGroup()\n\n    this.onAfterRenderPass()\n  }\n\n  /**\n   * Copy the result of our read/write GPUBuffer into our result binding array\n   * @param commandEncoder - current GPU command encoder\n   */\n  copyBufferToResult(commandEncoder: GPUCommandEncoder) {\n    this.material?.copyBufferToResult(commandEncoder)\n  }\n\n  /**\n   * Get the {@link core/bindings/WritableBufferBinding.WritableBufferBinding#resultBuffer | result GPU buffer} content by {@link core/bindings/WritableBufferBinding.WritableBufferBinding | binding} and {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} names\n   * @param parameters - parameters used to get the result\n   * @param parameters.bindingName - {@link core/bindings/WritableBufferBinding.WritableBufferBinding#name | binding name} from which to get the result\n   * @param parameters.bufferElementName - optional {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} (i.e. struct member) name if the result needs to be restrained to only one element\n   * @async\n   * @returns - the mapped content of the {@link GPUBuffer} as a {@link Float32Array}\n   */\n  async getComputeResult({\n    bindingName,\n    bufferElementName,\n  }: {\n    bindingName?: string\n    bufferElementName?: string\n  }): Promise<Float32Array> {\n    return await this.material?.getComputeResult({ bindingName, bufferElementName })\n  }\n\n  /**\n   * Remove the ComputePass from the scene and destroy it\n   */\n  remove() {\n    this.removeFromScene()\n    this.destroy()\n  }\n\n  /**\n   * Destroy the ComputePass\n   */\n  destroy() {\n    this.material?.destroy()\n  }\n}\n","import { Vec3 } from './Vec3'\nimport { Mat4 } from './Mat4'\n\n// declare our corners once should be enough\nconst points: Vec3[] = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()]\n\n/**\n * Used to handle bounding boxes in 3D space.\n * Basically made of two min and max {@link Vec3 | vectors} that represents the edges of the 3D bounding box.\n */\nexport class Box3 {\n  /** Min {@link Vec3 | vector} of the {@link Box3} */\n  min: Vec3\n  /** Max {@link Vec3 | vector} of the {@link Box3} */\n  max: Vec3\n\n  /**\n   * Box3 constructor\n   * @param min - min {@link Vec3 | vector} of the {@link Box3}\n   * @param max - max {@link Vec3 | vector} of the {@link Box3}\n   */\n  constructor(min: Vec3 = new Vec3(Infinity), max: Vec3 = new Vec3(-Infinity)) {\n    this.min = min\n    this.max = max\n  }\n\n  /**\n   * Set a {@link Box3} from two min and max {@link Vec3 | vectors}\n   * @param min - min {@link Vec3 | vector} of the {@link Box3}\n   * @param max - max {@link Vec3 | vector} of the {@link Box3}\n   */\n  set(min: Vec3 = new Vec3(Infinity), max: Vec3 = new Vec3(-Infinity)): Box3 {\n    this.min.copy(min)\n    this.max.copy(max)\n\n    return this\n  }\n\n  /**\n   * Check whether the {@link Box3} min and max values have actually been set\n   */\n  isEmpty() {\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z\n  }\n\n  /**\n   * Copy a {@link Box3} into this {@link Box3}.\n   * @param box - {@link Box3} to copy\n   */\n  copy(box: Box3): Box3 {\n    this.set(box.min.clone(), box.max.clone())\n    return this\n  }\n\n  /**\n   * Clone this {@link Box3}\n   * @returns - cloned {@link Box3}\n   */\n  clone(): Box3 {\n    return new Box3().copy(this)\n  }\n\n  /**\n   * Get the {@link Box3} center\n   * @readonly\n   * @returns - {@link Vec3 | center vector} of the {@link Box3}\n   */\n  get center(): Vec3 {\n    return this.max.clone().add(this.min).multiplyScalar(0.5)\n  }\n\n  /**\n   * Get the {@link Box3} size\n   * @readonly\n   * @returns - {@link Vec3 | size vector} of the {@link Box3}\n   */\n  get size(): Vec3 {\n    return this.max.clone().sub(this.min)\n  }\n\n  /**\n   * Get the {@link Box3} radius\n   * @readonly\n   * @returns - radius of the {@link Box3}\n   */\n  get radius(): number {\n    return this.max.distance(this.min) * 0.5\n  }\n\n  /**\n   * Apply a {@link Mat4 | matrix} to a {@link Box3}\n   * Useful to apply a transformation {@link Mat4 | matrix} to a {@link Box3}\n   * @param matrix - {@link Mat4 | matrix} to use\n   * @param transformedBox - {@link Box3 | transformed Box3} to set\n   * @returns - the {@link Box3 | transformed Box3} after {@link Mat4 | matrix} application\n   */\n  applyMat4(matrix: Mat4 = new Mat4(), transformedBox = new Box3()): Box3 {\n    if (this.isEmpty()) return this\n\n    const corners: Vec3[] = []\n\n    // remember we're essentially dealing with plane geometries\n    // so if min Z and max Z are equals, it's actually a plane geometry\n    // just apply the matrix to its four corners\n    if (this.min.z === this.max.z) {\n      corners[0] = points[0].set(this.min.x, this.min.y, this.min.z).applyMat4(matrix)\n      corners[1] = points[2].set(this.min.x, this.max.y, this.min.z).applyMat4(matrix)\n      corners[2] = points[4].set(this.max.x, this.min.y, this.min.z).applyMat4(matrix)\n      corners[3] = points[6].set(this.max.x, this.max.y, this.min.z).applyMat4(matrix)\n    } else {\n      corners[0] = points[0].set(this.min.x, this.min.y, this.min.z).applyMat4(matrix)\n      corners[1] = points[1].set(this.min.x, this.min.y, this.max.z).applyMat4(matrix)\n      corners[2] = points[2].set(this.min.x, this.max.y, this.min.z).applyMat4(matrix)\n      corners[3] = points[3].set(this.min.x, this.max.y, this.max.z).applyMat4(matrix)\n      corners[4] = points[4].set(this.max.x, this.min.y, this.min.z).applyMat4(matrix)\n      corners[5] = points[5].set(this.max.x, this.min.y, this.max.z).applyMat4(matrix)\n      corners[6] = points[6].set(this.max.x, this.max.y, this.min.z).applyMat4(matrix)\n      corners[7] = points[7].set(this.max.x, this.max.y, this.max.z).applyMat4(matrix)\n    }\n\n    for (let i = 0, cornersCount = corners.length; i < cornersCount; i++) {\n      transformedBox.min.min(corners[i])\n      transformedBox.max.max(corners[i])\n    }\n\n    return transformedBox\n  }\n}\n","import { Box3 } from '../../math/Box3'\nimport { Mat4 } from '../../math/Mat4'\nimport { DOMElementBoundingRect, RectCoords } from './DOMElement'\nimport { Vec3 } from '../../math/Vec3'\n\n/**\n * An object defining all possible {@link DOMFrustum} class instancing parameters\n */\nexport interface DOMFrustumParams {\n  /** our 3D Object bounding box, i.e. size in world space before any transform. Usually defined by a {@link core/geometries/Geometry.Geometry | Geometry} */\n  boundingBox?: Box3\n  /** {@link core/objects3D/ProjectedObject3D.ProjectedObject3D#modelViewProjectionMatrix | model view projection matrix} to use for frustum calculations */\n  modelViewProjectionMatrix?: Mat4\n  /** the {@link DOMElementBoundingRect | bounding rectangle} to check against */\n  containerBoundingRect?: DOMElementBoundingRect\n  /** additional margins to add to {@link containerBoundingRect} */\n  DOMFrustumMargins?: RectCoords\n  /** callback to run when the {@link DOMFrustum#projectedBoundingRect | projectedBoundingRect} reenters the view frustum */\n  onReEnterView?: () => void\n  /** callback to run when the {@link DOMFrustum#projectedBoundingRect | projectedBoundingRect} leaves the view frustum */\n  onLeaveView?: () => void\n}\n\n/** @constant {RectCoords} - default {@link DOMFrustum#DOMFrustumMargins | DOMFrustumMargins} */\nconst defaultDOMFrustumMargins: RectCoords = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n}\n\n/**\n * Used to check if a {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D} is currently contained inside a DOM bounding rectangle.\n *\n * Uses a {@link core/objects3D/ProjectedObject3D.ProjectedObject3D#modelViewProjectionMatrix | model view projection matrix} that contains both useful {@link core/objects3D/ProjectedObject3D.ProjectedObject3D#transforms | Object3D transforms} and {@link core/camera/Camera.Camera | Camera} projection information.\n * The DOM bounding rectangle to check against usually is the {@link core/renderers/GPURenderer.GPURenderer | renderer}'s {@link core/DOM/DOMElement.DOMElement | DOMElement} bounding rectangle, unless frustum margins are specified.\n */\nexport class DOMFrustum {\n  /** Our 3D Object bounding box, i.e. size in world space before any transform. Usually defined by a {@link core/geometries/Geometry.Geometry | Geometry} */\n  boundingBox: Box3\n\n  /** Oriented bounding {@link Box3} in clip space. */\n  clipSpaceOBB: Box3\n\n  /** A model view projection matrix defining transformations, usually from a {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D}, to use for frustum calculations */\n  modelViewProjectionMatrix: Mat4\n\n  /** The DOM bounding rectangle to check against, usually the renderer DOM Element bounding rectangle */\n  containerBoundingRect: DOMElementBoundingRect\n  /** Additional margins to add to {@link containerBoundingRect} */\n  DOMFrustumMargins: RectCoords\n  /** A DOM Element bounding rectangle representing the result of our {@link boundingBox} with the {@link modelViewProjectionMatrix} applied */\n  projectedBoundingRect: DOMElementBoundingRect\n\n  /** Callback to run when the {@link projectedBoundingRect} reenters the view frustum */\n  onReEnterView: () => void\n  /** Callback to run when the {@link projectedBoundingRect} leaves the view frustum */\n  onLeaveView: () => void\n\n  /** Flag to indicate whether the given {@link projectedBoundingRect} is intersecting our view frustum */\n  isIntersecting: boolean\n\n  /**\n   * DOMFrustum constructor\n   * @param {DOMFrustumParams} parameters - {@link DOMFrustumParams | parameters} used to create our {@link DOMFrustum}\n   */\n  constructor({\n    boundingBox = new Box3(),\n    modelViewProjectionMatrix = new Mat4(),\n    containerBoundingRect = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n    },\n    DOMFrustumMargins = defaultDOMFrustumMargins,\n    onReEnterView = () => {\n      /* allow empty callbacks */\n    },\n    onLeaveView = () => {\n      /* allow empty callbacks */\n    },\n  }: DOMFrustumParams) {\n    this.boundingBox = boundingBox\n    this.clipSpaceOBB = new Box3()\n    this.modelViewProjectionMatrix = modelViewProjectionMatrix\n    this.containerBoundingRect = containerBoundingRect\n    this.DOMFrustumMargins = { ...defaultDOMFrustumMargins, ...DOMFrustumMargins }\n\n    this.projectedBoundingRect = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n    }\n\n    this.onReEnterView = onReEnterView\n    this.onLeaveView = onLeaveView\n\n    this.isIntersecting = false\n  }\n\n  /**\n   * Set our {@link containerBoundingRect} (called on resize)\n   * @param boundingRect - new bounding rectangle\n   */\n  setContainerBoundingRect(boundingRect: DOMElementBoundingRect) {\n    this.containerBoundingRect = boundingRect\n  }\n\n  /**\n   * Get our DOM frustum bounding rectangle, i.e. our {@link containerBoundingRect} with the {@link DOMFrustumMargins} applied\n   * @readonly\n   */\n  get DOMFrustumBoundingRect(): RectCoords {\n    return {\n      top: this.projectedBoundingRect.top - this.DOMFrustumMargins.top,\n      right: this.projectedBoundingRect.right + this.DOMFrustumMargins.right,\n      bottom: this.projectedBoundingRect.bottom + this.DOMFrustumMargins.bottom,\n      left: this.projectedBoundingRect.left - this.DOMFrustumMargins.left,\n    }\n  }\n\n  /**\n   * Compute the oriented bounding box in clip space.\n   */\n  computeClipSpaceOBB() {\n    // reset\n    this.clipSpaceOBB.set()\n    this.boundingBox.applyMat4(this.modelViewProjectionMatrix, this.clipSpaceOBB)\n  }\n\n  /**\n   * Applies all {@link modelViewProjectionMatrix} transformations to our {@link boundingBox}, i.e. apply OBB to document coordinates and set {@link projectedBoundingRect}.\n   */\n  setDocumentCoordsFromClipSpaceOBB() {\n    this.computeClipSpaceOBB()\n\n    // normalize [-1, 1] coords to [0, 1]\n    const minX = (this.clipSpaceOBB.min.x + 1) * 0.5\n    const maxX = (this.clipSpaceOBB.max.x + 1) * 0.5\n\n    const minY = 1 - (this.clipSpaceOBB.min.y + 1) * 0.5\n    const maxY = 1 - (this.clipSpaceOBB.max.y + 1) * 0.5\n\n    const { width, height, top, left } = this.containerBoundingRect\n\n    this.projectedBoundingRect = {\n      left: minX * width + left,\n      x: minX * width + left,\n      top: maxY * height + top,\n      y: maxY * height + top,\n      right: maxX * width + left,\n      bottom: minY * height + top,\n      width: maxX * width + left - (minX * width + left),\n      height: minY * height + top - (maxY * height + top),\n    }\n  }\n\n  /**\n   * Apply the bounding sphere in clip space to document coordinates and set {@link projectedBoundingRect}.\n   * @param boundingSphere - bounding sphere in clip space.\n   */\n  setDocumentCoordsFromClipSpaceSphere(\n    boundingSphere: { center: Vec3; radius: number } = { center: new Vec3(), radius: 0 }\n  ) {\n    // normalize [-1, 1] coords to [0, 1]\n    const centerX = (boundingSphere.center.x + 1) * 0.5\n    const centerY = 1 - (boundingSphere.center.y + 1) * 0.5\n\n    const { width, height, top, left } = this.containerBoundingRect\n\n    this.projectedBoundingRect.width = boundingSphere.radius * height * 0.5\n    this.projectedBoundingRect.height = boundingSphere.radius * height * 0.5\n\n    this.projectedBoundingRect.left = centerX * width + left - this.projectedBoundingRect.width * 0.5\n    this.projectedBoundingRect.x = centerX * width + left - this.projectedBoundingRect.width * 0.5\n    this.projectedBoundingRect.top = centerY * height + top - this.projectedBoundingRect.height * 0.5\n    this.projectedBoundingRect.y = centerY * height + top - this.projectedBoundingRect.height * 0.5\n\n    this.projectedBoundingRect.right = this.projectedBoundingRect.left + this.projectedBoundingRect.width\n    this.projectedBoundingRect.bottom = this.projectedBoundingRect.top + this.projectedBoundingRect.height\n  }\n\n  /**\n   * Check whether our {@link projectedBoundingRect} intersects with our {@link DOMFrustumBoundingRect}.\n   */\n  intersectsContainer() {\n    if (\n      Math.round(this.DOMFrustumBoundingRect.right) <= this.containerBoundingRect.left ||\n      Math.round(this.DOMFrustumBoundingRect.left) >=\n        this.containerBoundingRect.left + this.containerBoundingRect.width ||\n      Math.round(this.DOMFrustumBoundingRect.bottom) <= this.containerBoundingRect.top ||\n      Math.round(this.DOMFrustumBoundingRect.top) >= this.containerBoundingRect.top + this.containerBoundingRect.height\n    ) {\n      if (this.isIntersecting) {\n        this.onLeaveView()\n      }\n\n      this.isIntersecting = false\n    } else {\n      if (!this.isIntersecting) {\n        this.onReEnterView()\n      }\n\n      this.isIntersecting = true\n    }\n  }\n}\n","import { Box3 } from '../../math/Box3'\nimport { generateUUID, throwError, throwWarning } from '../../utils/utils'\nimport {\n  GeometryBuffer,\n  GeometryOptions,\n  GeometryParams,\n  VertexBuffer,\n  VertexBufferAttribute,\n  VertexBufferAttributeParams,\n  VertexBufferParams,\n} from '../../types/Geometries'\nimport { Buffer } from '../buffers/Buffer'\nimport { Renderer } from '../renderers/utils'\nimport { TypedArrayConstructor } from '../bindings/utils'\n\n/**\n * Used to create a {@link Geometry} from given parameters like instances count or geometry attributes (vertices, uvs, normals).<br>\n * Holds all attributes arrays, bounding box and create as WGSL code snippet for the vertex shader input attributes.\n *\n * During the {@link Geometry#render | render}, the {@link Geometry} is responsible for setting the {@link Geometry#vertexBuffers | vertexBuffers} and drawing the vertices.\n *\n * @example\n * ```javascript\n * const vertices = new Float32Array([\n *   // first triangle\n *    1,  1,  0,\n *    1, -1,  0,\n *   -1, -1,  0,\n *\n *   // second triangle\n *    1,  1,  0,\n *   -1, -1,  0,\n *   -1,  1,  0\n * ])\n *\n * // create a quad geometry made of 2 triangles\n * const geometry = new Geometry()\n *\n * geometry.setAttribute({\n *   name: 'position',\n *   type: 'vec3f',\n *   bufferFormat: 'float32x3',\n *   size: 3,\n *   bufferLength: vertices.length,\n *   array: vertices,\n * })\n * ```\n */\nexport class Geometry {\n  /** Number of vertices defined by this geometry */\n  verticesCount: number\n  /** Vertices order to be drawn by the {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry | render pipeline} */\n  verticesOrder: GPUFrontFace\n  /** {@link https://www.w3.org/TR/webgpu/#enumdef-gpuprimitivetopology | Topology} to use with this {@link Geometry}, i.e. whether to draw triangles or points */\n  topology: GPUPrimitiveTopology\n  /** Number of instances of this geometry to draw */\n  instancesCount: number\n  /** Array of {@link VertexBuffer | vertex buffers} to use with this geometry */\n  vertexBuffers: VertexBuffer[]\n  /** Options used to create this geometry */\n  options: GeometryOptions\n  /** The type of the geometry */\n  type: string\n  /** The universal unique id of the geometry */\n  uuid: string\n\n  /** The bounding box of the geometry, i.e. two {@link math/Vec3.Vec3 | Vec3} defining the min and max positions to wrap this geometry in a cube */\n  boundingBox: Box3\n\n  /** A string to append to our shaders code describing the WGSL structure representing this geometry attributes */\n  wgslStructFragment: string\n\n  /** A string representing the {@link vertexBuffers} layout, used for pipelines caching */\n  layoutCacheKey: string\n\n  /** A Set to store this {@link Geometry} consumers (Mesh uuid) */\n  consumers: Set<string>\n\n  /** Whether this geometry is ready to be drawn, i.e. it has been computed and all its vertex buffers have been created */\n  ready: boolean\n\n  /**\n   * Geometry constructor\n   * @param parameters - {@link GeometryParams | parameters} used to create our Geometry\n   */\n  constructor({\n    verticesOrder = 'ccw',\n    topology = 'triangle-list',\n    instancesCount = 1,\n    vertexBuffers = [],\n    mapBuffersAtCreation = true,\n  }: GeometryParams = {}) {\n    this.verticesCount = 0\n    this.verticesOrder = verticesOrder\n    this.topology = topology\n    this.instancesCount = instancesCount\n\n    this.ready = false\n\n    this.boundingBox = new Box3()\n\n    this.type = 'Geometry'\n    this.uuid = generateUUID()\n\n    this.vertexBuffers = []\n\n    this.consumers = new Set()\n\n    this.options = {\n      verticesOrder,\n      topology,\n      instancesCount,\n      vertexBuffers,\n      mapBuffersAtCreation,\n    }\n\n    // create a default 'attributes' vertex buffer if it has not been passed as parameter\n    // should contain our vertex position / uv data at least\n    const attributesBuffer = vertexBuffers.find((vertexBuffer) => vertexBuffer.name === 'attributes')\n    if (!vertexBuffers.length || !attributesBuffer) {\n      this.addVertexBuffer({\n        name: 'attributes',\n      })\n    } else if (attributesBuffer) {\n      // always put attributes vertex buffer first\n      vertexBuffers.sort((a, b) => {\n        const aIndex = a.name !== 'attributes' ? Infinity : -1\n        const bIndex = b.name !== 'attributes' ? Infinity : -1\n\n        return aIndex - bIndex\n      })\n    }\n\n    for (const vertexBuffer of vertexBuffers) {\n      this.addVertexBuffer({\n        stepMode: vertexBuffer.stepMode ?? 'vertex',\n        name: vertexBuffer.name,\n        attributes: vertexBuffer.attributes,\n        ...(vertexBuffer.array && { array: vertexBuffer.array }),\n        ...(vertexBuffer.buffer && { buffer: vertexBuffer.buffer }),\n        ...(vertexBuffer.bufferOffset && { bufferOffset: vertexBuffer.bufferOffset }),\n        ...(vertexBuffer.bufferSize && { bufferSize: vertexBuffer.bufferSize }),\n      })\n    }\n\n    // TODO or use a param instead?\n    // remember if attributesBuffer already has an array, the geometry won't be computed\n    if (attributesBuffer) {\n      this.setWGSLFragment()\n    }\n  }\n\n  /**\n   * Reset all the {@link vertexBuffers | vertex buffers} when the device is lost\n   */\n  loseContext() {\n    this.ready = false\n\n    for (const vertexBuffer of this.vertexBuffers) {\n      vertexBuffer.buffer.destroy()\n    }\n  }\n\n  /**\n   * Restore the {@link Geometry} buffers on context restoration\n   * @param renderer - The {@link Renderer} used to recreate the buffers\n   */\n  restoreContext(renderer: Renderer) {\n    // do not try to recreate buffers of a geometry that has already been restored\n    if (this.ready) return\n\n    for (const vertexBuffer of this.vertexBuffers) {\n      // do not try to restore a buffer created elsewhere initially (a compute pass for example)\n      if (!vertexBuffer.buffer.GPUBuffer && vertexBuffer.buffer.consumers.size === 0) {\n        vertexBuffer.buffer.createBuffer(renderer)\n\n        this.uploadBuffer(renderer, vertexBuffer)\n      }\n\n      vertexBuffer.buffer.consumers.add(this.uuid)\n    }\n\n    this.ready = true\n  }\n\n  /**\n   * Add a vertex buffer to our Geometry, set its attributes and return it\n   * @param parameters - vertex buffer {@link VertexBufferParams | parameters}\n   * @returns - newly created {@link VertexBuffer | vertex buffer}\n   */\n  addVertexBuffer({\n    stepMode = 'vertex',\n    name,\n    attributes = [],\n    buffer = null,\n    array = null,\n    bufferOffset = 0,\n    bufferSize = null,\n  }: VertexBufferParams = {}): VertexBuffer {\n    buffer = buffer || new Buffer()\n\n    const vertexBuffer = {\n      name: name ?? 'attributes' + this.vertexBuffers.length,\n      stepMode,\n      arrayStride: 0,\n      bufferLength: 0,\n      attributes: [],\n      buffer,\n      array,\n      bufferOffset,\n      bufferSize,\n    }\n\n    // set attributes right away if possible\n    attributes?.forEach((attribute) => {\n      this.setAttribute({\n        vertexBuffer,\n        ...attribute,\n      } as VertexBufferAttributeParams)\n    })\n\n    this.vertexBuffers.push(vertexBuffer)\n\n    return vertexBuffer\n  }\n\n  /**\n   * Get a vertex buffer by name\n   * @param name - our vertex buffer name\n   * @returns - found {@link VertexBuffer | vertex buffer} or null if not found\n   */\n  getVertexBufferByName(name = ''): VertexBuffer | null {\n    return this.vertexBuffers.find((vertexBuffer) => vertexBuffer.name === name)\n  }\n\n  /**\n   * Set a vertex buffer attribute\n   * @param parameters - attributes {@link VertexBufferAttributeParams | parameters}\n   */\n  setAttribute({\n    vertexBuffer = this.vertexBuffers[0],\n    name,\n    type = 'vec3f',\n    bufferFormat = 'float32x3',\n    size = 3,\n    array = new Float32Array(this.verticesCount * size),\n    verticesStride = 1,\n  }: VertexBufferAttributeParams) {\n    const attributes = vertexBuffer.attributes\n    const attributesLength = attributes.length\n\n    if (!name) name = 'geometryAttribute' + attributesLength\n\n    if (name === 'position' && (type !== 'vec3f' || bufferFormat !== 'float32x3' || size !== 3)) {\n      throwWarning(\n        `Geometry 'position' attribute must have this exact properties set:\\n\\ttype: 'vec3f',\\n\\tbufferFormat: 'float32x3',\\n\\tsize: 3`\n      )\n      type = 'vec3f'\n      bufferFormat = 'float32x3'\n      size = 3\n    }\n\n    let arrayLength = array.length\n    const attributeCount = arrayLength / size\n\n    if (name === 'position') {\n      this.verticesCount = attributeCount\n    }\n\n    if (\n      vertexBuffer.stepMode === 'vertex' &&\n      this.verticesCount &&\n      this.verticesCount !== attributeCount * verticesStride\n    ) {\n      throwError(\n        `Geometry vertex attribute error. Attribute array of size ${size} must be of length: ${\n          this.verticesCount * size\n        }, current given: ${array.length}. (${this.verticesCount} vertices).`\n      )\n    } else if (vertexBuffer.stepMode === 'instance' && attributeCount !== this.instancesCount) {\n      if (vertexBuffer.buffer) {\n        arrayLength = this.instancesCount * size\n      } else {\n        throwError(\n          `Geometry instance attribute error. Attribute array of size ${size} must be of length: ${\n            this.instancesCount * size\n          }, current given: ${array.length}. (${this.instancesCount} instances).`\n        )\n      }\n    }\n\n    // TODO we could force the use of a bufferOffset to 0\n    // and use an offset inside the setVertexBuffer call instead\n    // it might be needed in some edge cases with glTF geometries\n    // see https://toji.dev/webgpu-gltf-case-study/#handling-large-attribute-offsets\n    const attribute = {\n      name,\n      type,\n      bufferFormat,\n      size,\n      bufferLength: arrayLength,\n      offset: attributesLength\n        ? attributes.reduce((accumulator: number, currentValue) => {\n            return accumulator + currentValue.bufferLength\n          }, 0)\n        : 0,\n      bufferOffset: attributesLength\n        ? attributes[attributesLength - 1].bufferOffset + attributes[attributesLength - 1].size * 4\n        : 0,\n      array,\n      verticesStride: verticesStride,\n    }\n\n    vertexBuffer.bufferLength += attribute.bufferLength * verticesStride\n    vertexBuffer.arrayStride += attribute.size\n    vertexBuffer.attributes.push(attribute)\n  }\n\n  /**\n   * Get whether this Geometry is ready to compute, i.e. if its first vertex buffer array has not been created yet\n   * @readonly\n   */\n  get shouldCompute(): boolean {\n    return this.vertexBuffers.length && !this.vertexBuffers[0].array\n  }\n\n  /**\n   * Get an attribute by name\n   * @param name - name of the attribute to find\n   * @returns - found {@link VertexBufferAttribute | attribute} or null if not found\n   */\n  getAttributeByName(name: string): VertexBufferAttribute | null {\n    let attribute\n    this.vertexBuffers.forEach((vertexBuffer) => {\n      attribute = vertexBuffer.attributes.find((attribute) => attribute.name === name)\n    })\n\n    return attribute\n  }\n\n  /**\n   * Compute a Geometry, which means iterate through all vertex buffers and create the attributes array that will be sent as buffers.\n   * Also compute the Geometry bounding box.\n   */\n  computeGeometry() {\n    if (this.ready) return\n\n    this.vertexBuffers.forEach((vertexBuffer, index) => {\n      if (index === 0) {\n        const hasPositionAttribute = vertexBuffer.attributes.find(\n          (attribute) => attribute.name === 'position'\n        ) as VertexBufferAttribute | null\n\n        if (!hasPositionAttribute) {\n          throwError(`Geometry must have a 'position' attribute`)\n        }\n\n        if (\n          hasPositionAttribute.type !== 'vec3f' ||\n          hasPositionAttribute.bufferFormat !== 'float32x3' ||\n          hasPositionAttribute.size !== 3\n        ) {\n          throwWarning(\n            `Geometry 'position' attribute must have this exact properties set:\\n\\ttype: 'vec3f',\\n\\tbufferFormat: 'float32x3',\\n\\tsize: 3`\n          )\n          hasPositionAttribute.type = 'vec3f'\n          hasPositionAttribute.bufferFormat = 'float32x3'\n          hasPositionAttribute.size = 3\n        }\n      }\n\n      vertexBuffer.array = new Float32Array(vertexBuffer.bufferLength)\n\n      let currentIndex = 0\n      let attributeIndex = 0\n      for (let i = 0; i < vertexBuffer.bufferLength; i += vertexBuffer.arrayStride) {\n        for (let j = 0; j < vertexBuffer.attributes.length; j++) {\n          const { name, size, array, verticesStride } = vertexBuffer.attributes[j]\n\n          for (let s = 0; s < size; s++) {\n            const attributeValue = array[Math.floor(attributeIndex / verticesStride) * size + s]\n            vertexBuffer.array[currentIndex] = attributeValue ?? 0\n\n            // compute bounding box\n            if (name === 'position') {\n              if (s % 3 === 0) {\n                // x\n                if (this.boundingBox.min.x > attributeValue) this.boundingBox.min.x = attributeValue\n                if (this.boundingBox.max.x < attributeValue) this.boundingBox.max.x = attributeValue\n              } else if (s % 3 === 1) {\n                // y\n                if (this.boundingBox.min.y > attributeValue) this.boundingBox.min.y = attributeValue\n                if (this.boundingBox.max.y < attributeValue) this.boundingBox.max.y = attributeValue\n              } else if (s % 3 === 2) {\n                // z\n                if (this.boundingBox.min.z > attributeValue) this.boundingBox.min.z = attributeValue\n                if (this.boundingBox.max.z < attributeValue) this.boundingBox.max.z = attributeValue\n              }\n            }\n\n            currentIndex++\n          }\n        }\n\n        attributeIndex++\n      }\n    })\n\n    if (!this.wgslStructFragment) {\n      this.setWGSLFragment()\n    }\n  }\n\n  /**\n   * Set the WGSL code snippet that will be appended to the vertex shader.\n   */\n  setWGSLFragment() {\n    let locationIndex = -1\n    this.wgslStructFragment = `struct Attributes {\\n\\t@builtin(vertex_index) vertexIndex : u32,\\n\\t@builtin(instance_index) instanceIndex : u32,${this.vertexBuffers\n      .map((vertexBuffer) => {\n        return vertexBuffer.attributes.map((attribute) => {\n          locationIndex++\n          return `\\n\\t@location(${locationIndex}) ${attribute.name}: ${attribute.type}`\n        })\n      })\n      .join(',')}\\n};`\n\n    // TODO use for pipeline caching\n    this.layoutCacheKey =\n      this.vertexBuffers\n        .map((vertexBuffer) => {\n          return (\n            vertexBuffer.name +\n            ',' +\n            vertexBuffer.attributes.map((attribute) => {\n              return `${attribute.name},${attribute.size}`\n            })\n          )\n        })\n        .join(',') + ','\n  }\n\n  /**\n   * Create the {@link Geometry} {@link vertexBuffers | vertex buffers}.\n   * @param parameters - parameters used to create the vertex buffers.\n   * @param parameters.renderer - {@link Renderer} used to create the vertex buffers.\n   * @param parameters.label - label to use for the vertex buffers.\n   */\n  createBuffers({ renderer, label = this.type }: { renderer: Renderer; label?: string }) {\n    if (this.ready) return\n\n    for (const vertexBuffer of this.vertexBuffers) {\n      if (!vertexBuffer.bufferSize) {\n        vertexBuffer.bufferSize =\n          vertexBuffer.array.length * (vertexBuffer.array.constructor as TypedArrayConstructor).BYTES_PER_ELEMENT\n      }\n\n      if (!vertexBuffer.buffer.GPUBuffer && !vertexBuffer.buffer.consumers.size) {\n        vertexBuffer.buffer.createBuffer(renderer, {\n          label: label + ': ' + vertexBuffer.name + ' buffer',\n          size: vertexBuffer.bufferSize,\n          usage: this.options.mapBuffersAtCreation ? ['vertex'] : ['copyDst', 'vertex'],\n          mappedAtCreation: this.options.mapBuffersAtCreation,\n        })\n\n        this.uploadBuffer(renderer, vertexBuffer)\n      }\n\n      vertexBuffer.buffer.consumers.add(this.uuid)\n    }\n\n    this.ready = true\n  }\n\n  /**\n   * Upload a {@link GeometryBuffer} to the GPU.\n   * @param renderer - {@link Renderer} used to upload the buffer.\n   * @param buffer - {@link GeometryBuffer} holding a {@link Buffer} and a typed array to upload.\n   */\n  uploadBuffer(renderer: Renderer, buffer: GeometryBuffer) {\n    if (this.options.mapBuffersAtCreation) {\n      new (buffer.array.constructor as TypedArrayConstructor)(buffer.buffer.GPUBuffer.getMappedRange()).set(\n        buffer.array\n      )\n\n      buffer.buffer.GPUBuffer.unmap()\n    } else {\n      renderer.queueWriteBuffer(buffer.buffer.GPUBuffer, 0, buffer.array)\n    }\n  }\n\n  /** RENDER **/\n\n  /**\n   * Set our render pass geometry vertex buffers\n   * @param pass - current render pass\n   */\n  setGeometryBuffers(pass: GPURenderPassEncoder) {\n    this.vertexBuffers.forEach((vertexBuffer, index) => {\n      pass.setVertexBuffer(index, vertexBuffer.buffer.GPUBuffer, vertexBuffer.bufferOffset, vertexBuffer.bufferSize)\n    })\n  }\n\n  /**\n   * Draw our geometry\n   * @param pass - current render pass\n   */\n  drawGeometry(pass: GPURenderPassEncoder) {\n    pass.draw(this.verticesCount, this.instancesCount)\n  }\n\n  /**\n   * Set our vertex buffers then draw the geometry\n   * @param pass - current render pass\n   */\n  render(pass: GPURenderPassEncoder) {\n    if (!this.ready) return\n\n    this.setGeometryBuffers(pass)\n    this.drawGeometry(pass)\n  }\n\n  /**\n   * Destroy our geometry vertex buffers.\n   * @param renderer - current {@link Renderer}, in case we want to remove the {@link VertexBuffer#buffer | buffers} from the cache.\n   */\n  destroy(renderer: null | Renderer = null) {\n    this.ready = false\n\n    for (const vertexBuffer of this.vertexBuffers) {\n      vertexBuffer.buffer.consumers.delete(this.uuid)\n      if (!vertexBuffer.buffer.consumers.size) {\n        vertexBuffer.buffer.destroy()\n      }\n\n      vertexBuffer.array = null\n\n      if (renderer) renderer.removeBuffer(vertexBuffer.buffer)\n    }\n  }\n}\n","import { Geometry } from './Geometry'\r\nimport { GeometryBuffer, GeometryParams } from '../../types/Geometries'\r\nimport { Buffer } from '../buffers/Buffer'\r\nimport { Renderer } from '../renderers/utils'\r\nimport { TypedArrayConstructor } from '../bindings/utils'\r\n\r\n/**\r\n * Defines the available options to create an {@link IndexedGeometry#indexBuffer | index buffer}\r\n */\r\nexport interface IndexedGeometryIndexBufferOptions extends Partial<GeometryBuffer> {\r\n  /** index buffer format */\r\n  bufferFormat?: GPUIndexFormat\r\n  /** index buffer array */\r\n  array?: Uint16Array | Uint32Array\r\n}\r\n\r\n/**\r\n * Defines an {@link IndexedGeometry#indexBuffer | index buffer}\r\n */\r\nexport interface IndexBuffer extends GeometryBuffer {\r\n  /** index buffer format */\r\n  bufferFormat: GPUIndexFormat\r\n  /** index buffer array */\r\n  array: Uint16Array | Uint32Array\r\n  /** index buffer length */\r\n  bufferLength: number\r\n}\r\n\r\n/**\r\n * Used to create an {@link IndexedGeometry} which holds an index array to use as an index buffer.\r\n *\r\n * The index array represents the order in which the attributes should be processed. This allows to create smaller vertex, uv and normal arrays.\r\n *\r\n * During the {@link IndexedGeometry#render | render}, the {@link IndexedGeometry} is responsible for setting the {@link IndexedGeometry#vertexBuffers | vertexBuffers} and drawing the indexed vertices.\r\n *\r\n * @example\r\n * ```javascript\r\n * const vertices = new Float32Array([\r\n *   -1, -1,  0,\r\n *    1, -1,  0,\r\n *   -1,  1,  0,\r\n *    1,  1,  0\r\n * ])\r\n *\r\n * // vertices index (order in which they should be drawn)\r\n * const indexArray = new Uint16Array([0, 2, 1, 1, 2, 3])\r\n *\r\n * // create an indexed quad geometry made of 4 vertices\r\n * const indexedGeometry = new IndexedGeometry()\r\n *\r\n * indexedGeometry.setAttribute({\r\n *   name: 'position',\r\n *   type: 'vec3f',\r\n *   bufferFormat: 'float32x3',\r\n *   size: 3,\r\n *   bufferLength: vertices.length,\r\n *   array: vertices,\r\n * })\r\n *\r\n * indexedGeometry.setIndexBuffer({\r\n *   array: indexArray,\r\n *   bufferFormat: 'uint16',\r\n * })\r\n * ```\r\n */\r\nexport class IndexedGeometry extends Geometry {\r\n  /** Object containing our index buffer format & length, array and GPUBuffer */\r\n  indexBuffer: IndexBuffer\r\n\r\n  /**\r\n   * IndexedGeometry constructor\r\n   * @param parameters - {@link GeometryParams | parameters} used to create our IndexedGeometry\r\n   */\r\n  constructor({\r\n    verticesOrder = 'ccw',\r\n    topology = 'triangle-list',\r\n    instancesCount = 1,\r\n    vertexBuffers = [],\r\n    mapBuffersAtCreation = true,\r\n  }: GeometryParams = {}) {\r\n    super({ verticesOrder, topology, instancesCount, vertexBuffers, mapBuffersAtCreation })\r\n\r\n    this.type = 'IndexedGeometry'\r\n  }\r\n\r\n  /**\r\n   * Reset all the {@link vertexBuffers | vertex buffers} and {@link indexBuffer | index buffer} when the device is lost\r\n   */\r\n  loseContext() {\r\n    super.loseContext()\r\n\r\n    if (this.indexBuffer) {\r\n      this.indexBuffer.buffer.destroy()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Restore the {@link IndexedGeometry} buffers on context restoration\r\n   * @param renderer - The {@link Renderer} used to recreate the buffers\r\n   */\r\n  restoreContext(renderer: Renderer) {\r\n    if (this.ready) return\r\n\r\n    if (!this.indexBuffer.buffer.GPUBuffer) {\r\n      this.indexBuffer.buffer.createBuffer(renderer)\r\n\r\n      this.uploadBuffer(renderer, this.indexBuffer)\r\n\r\n      this.indexBuffer.buffer.consumers.add(this.uuid)\r\n    }\r\n\r\n    super.restoreContext(renderer)\r\n  }\r\n\r\n  /**\r\n   * If we have less than 65.536 vertices, we should use a Uin16Array to hold our index buffer values\r\n   * @readonly\r\n   */\r\n  get useUint16IndexArray(): boolean {\r\n    return this.verticesCount < 256 * 256\r\n  }\r\n\r\n  /**\r\n   * Set our {@link indexBuffer}\r\n   * @param parameters - {@link IndexedGeometryIndexBufferOptions | parameters} used to create our index buffer\r\n   */\r\n  setIndexBuffer({\r\n    bufferFormat = 'uint32',\r\n    array = new Uint32Array(0),\r\n    buffer = new Buffer(),\r\n    bufferOffset = 0,\r\n    bufferSize = null,\r\n  }: IndexedGeometryIndexBufferOptions) {\r\n    this.indexBuffer = {\r\n      array,\r\n      bufferFormat,\r\n      bufferLength: array.length,\r\n      buffer,\r\n      bufferOffset,\r\n      bufferSize:\r\n        bufferSize !== null\r\n          ? bufferSize\r\n          : array.length * (array.constructor as TypedArrayConstructor).BYTES_PER_ELEMENT,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the {@link Geometry} {@link vertexBuffers | vertex buffers} and {@link indexBuffer | index buffer}.\r\n   * @param parameters - parameters used to create the vertex buffers.\r\n   * @param parameters.renderer - {@link Renderer} used to create the vertex buffers.\r\n   * @param parameters.label - label to use for the vertex buffers.\r\n   */\r\n  createBuffers({ renderer, label = this.type }: { renderer: Renderer; label?: string }) {\r\n    if(!this.indexBuffer.buffer.GPUBuffer) {\r\n      this.indexBuffer.buffer.createBuffer(renderer, {\r\n        label: label + ': index buffer',\r\n        size: this.indexBuffer.array.byteLength,\r\n        usage: this.options.mapBuffersAtCreation ? ['index'] : ['copyDst', 'index'],\r\n        mappedAtCreation: this.options.mapBuffersAtCreation,\r\n      })\r\n\r\n      this.uploadBuffer(renderer, this.indexBuffer)\r\n    }\r\n\r\n\r\n    this.indexBuffer.buffer.consumers.add(this.uuid)\r\n\r\n    super.createBuffers({ renderer, label })\r\n  }\r\n\r\n  /** RENDER **/\r\n\r\n  /**\r\n   * First, set our render pass geometry vertex buffers\r\n   * Then, set our render pass geometry index buffer\r\n   * @param pass - current render pass\r\n   */\r\n  setGeometryBuffers(pass: GPURenderPassEncoder) {\r\n    super.setGeometryBuffers(pass)\r\n\r\n    pass.setIndexBuffer(\r\n      this.indexBuffer.buffer.GPUBuffer,\r\n      this.indexBuffer.bufferFormat,\r\n      this.indexBuffer.bufferOffset,\r\n      this.indexBuffer.bufferSize\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Override the parentMesh draw method to draw indexed geometry\r\n   * @param pass - current render pass\r\n   */\r\n  drawGeometry(pass: GPURenderPassEncoder) {\r\n    pass.drawIndexed(this.indexBuffer.bufferLength, this.instancesCount)\r\n  }\r\n\r\n  /**\r\n   * Destroy our indexed geometry vertex buffers and index buffer.\r\n   * @param renderer - current {@link Renderer}, in case we want to remove the {@link IndexBuffer#buffer | buffer} from the cache.\r\n   */\r\n  destroy(renderer: null | Renderer = null) {\r\n    super.destroy(renderer)\r\n\r\n    if (this.indexBuffer) {\r\n      this.indexBuffer.buffer.consumers.delete(this.uuid)\r\n      this.indexBuffer.buffer.destroy()\r\n      if (renderer) renderer.removeBuffer(this.indexBuffer.buffer)\r\n    }\r\n  }\r\n}\r\n","import { IndexedGeometry } from './IndexedGeometry'\nimport { Geometry } from './Geometry'\nimport { GeometryBaseParams, VertexBufferAttributeParams } from '../../types/Geometries'\n\n/**\n * Parameters used to create a {@link PlaneGeometry}\n */\nexport interface PlaneGeometryParams extends GeometryBaseParams {\n  /** Number of segments along the X axis */\n  widthSegments?: number\n  /** Number of segments along the Y axis */\n  heightSegments?: number\n}\n\n/**\n * Used to create an indexed plane geometry based on the number of segments along the X and Y axis.\n *\n * This is how it will look for a 3x2 quad. Indexing will take care of drawing the right vertices in the right order.\n *\n * <pre>\n *  3---2---1---0\n *  |  /|  /|  /|\n *  |/  |/  |/  |\n *  7---6---5---4\n *  |  /|  /|  /|\n *  |/  |/  |/  |\n *  11--10--9---8\n * </pre>\n *\n * @example\n * ```javascript\n * const planeGeometry = new PlaneGeometry()\n * ```\n */\nexport class PlaneGeometry extends IndexedGeometry {\n  /**\n   * Defines our {@link PlaneGeometry} definition based on the provided {@link PlaneGeometryParams | parameters}\n   */\n  definition: {\n    /** unique id based on width and height segments, used to get {@link PlaneGeometry} from cache */\n    id: number\n    /** number of segments along the X axis */\n    width: number\n    /** number of segments along the Y axis */\n    height: number\n    /** total number of segments */\n    count: number\n  }\n\n  /**\n   * PlaneGeometry constructor\n   * @param parameters - {@link PlaneGeometryParams | parameters} used to create our PlaneGeometry\n   */\n  constructor({\n    widthSegments = 1,\n    heightSegments = 1,\n    instancesCount = 1,\n    vertexBuffers = [],\n    topology,\n  }: PlaneGeometryParams = {}) {\n    super({ verticesOrder: 'ccw', topology, instancesCount, vertexBuffers, mapBuffersAtCreation: true })\n\n    this.type = 'PlaneGeometry'\n\n    widthSegments = Math.floor(widthSegments)\n    heightSegments = Math.floor(heightSegments)\n\n    // unique plane geometry id based on width and height\n    // used to get a geometry from cache\n    this.definition = {\n      id: widthSegments * heightSegments + widthSegments,\n      width: widthSegments,\n      height: heightSegments,\n      count: widthSegments * heightSegments,\n    }\n\n    const verticesCount = (this.definition.width + 1) * (this.definition.height + 1)\n    const attributes = this.getIndexedVerticesAndUVs(verticesCount)\n\n    for (const attribute of Object.values(attributes)) {\n      this.setAttribute(attribute as VertexBufferAttributeParams)\n    }\n\n    this.setIndexArray()\n  }\n\n  /**\n   * Set our PlaneGeometry index array\n   */\n  setIndexArray() {\n    const indexArray = this.useUint16IndexArray\n      ? new Uint16Array(this.definition.count * 6)\n      : new Uint32Array(this.definition.count * 6)\n\n    let index = 0\n\n    for (let y = 0; y < this.definition.height; y++) {\n      for (let x = 0; x < this.definition.width; x++) {\n        indexArray[index++] = x + y * (this.definition.width + 1)\n        indexArray[index++] = this.definition.width + x + 1 + y * (this.definition.width + 1)\n        indexArray[index++] = x + 1 + y * (this.definition.width + 1)\n\n        indexArray[index++] = x + 1 + y * (this.definition.width + 1)\n        indexArray[index++] = this.definition.width + x + 1 + y * (this.definition.width + 1)\n        indexArray[index++] = this.definition.width + x + 2 + y * (this.definition.width + 1)\n      }\n    }\n\n    this.setIndexBuffer({\n      array: indexArray,\n      bufferFormat: this.useUint16IndexArray ? 'uint16' : 'uint32',\n    })\n  }\n\n  /**\n   * Compute the UV and position arrays based on our plane widthSegments and heightSegments values and return the corresponding attributes\n   * @param verticesCount - {@link Geometry#verticesCount | number of vertices} of our {@link PlaneGeometry}\n   * @returns - our position and uv {@link VertexBufferAttributeParams | attributes}\n   */\n  getIndexedVerticesAndUVs(verticesCount: Geometry['verticesCount']): Record<string, VertexBufferAttributeParams> {\n    // geometry vertices and UVs\n    const uv = {\n      name: 'uv',\n      type: 'vec2f',\n      bufferFormat: 'float32x2',\n      size: 2,\n      array: new Float32Array(verticesCount * 2),\n    }\n\n    const position = {\n      name: 'position',\n      type: 'vec3f',\n      bufferFormat: 'float32x3',\n      // nb of triangles * 3 vertices per triangle * 3 coordinates per triangle\n      size: 3,\n      array: new Float32Array(verticesCount * 3),\n    }\n\n    const normal = {\n      name: 'normal',\n      type: 'vec3f',\n      bufferFormat: 'float32x3',\n      // nb of triangles * 3 vertices per triangle * 3 coordinates per triangle\n      size: 3,\n      array: new Float32Array(verticesCount * 3),\n    }\n\n    let positionOffset = 0\n    let normalOffset = 0\n    let uvOffset = 0\n\n    // this is how it will look for a 3x2 quad\n    // indexing will take care of drawing the right vertices at the right time\n    // remember we're using counter clockwise ordering\n    // 3---2---1---0\n    // | //| //| //|\n    // |// |// |// |\n    // 7---6---5---4\n    // | //| //| //|\n    // |// |// |// |\n    // 11--10--9---8\n\n    for (let y = 0; y <= this.definition.height; y++) {\n      for (let x = 0; x <= this.definition.width; x++) {\n        // uv\n        uv.array[uvOffset++] = 1 - x / this.definition.width\n        uv.array[uvOffset++] = 1 - y / this.definition.height\n\n        // vertex position\n        position.array[positionOffset++] = 1 - (x * 2) / this.definition.width\n        position.array[positionOffset++] = (y * 2) / this.definition.height - 1\n        position.array[positionOffset++] = 0\n\n        // normals are simple\n        normal.array[normalOffset++] = 0\n        normal.array[normalOffset++] = 0\n        normal.array[normalOffset++] = 1\n      }\n    }\n\n    return { position, uv, normal } as Record<string, VertexBufferAttributeParams>\n  }\n}\n","import { RenderMaterialRenderingOptions } from '../../types/Materials'\r\n\r\n/**\r\n * Compare two sets of {@link RenderMaterialRenderingOptions | rendering options} and returns an array of different options keys if any.\r\n * @param newOptions - rendering new options to compare\r\n * @param baseOptions - rendering options to compare with\r\n * @returns - an array with the options keys that differ, if any.\r\n */\r\nexport const compareRenderingOptions = (\r\n  newOptions: Partial<RenderMaterialRenderingOptions> = {},\r\n  baseOptions: Partial<RenderMaterialRenderingOptions> = {}\r\n): Array<keyof RenderMaterialRenderingOptions> => {\r\n  return Object.keys(newOptions).filter((key) => {\r\n    if (Array.isArray(newOptions[key])) {\r\n      // 'targets' property\r\n      return JSON.stringify(newOptions[key]) !== JSON.stringify(baseOptions[key])\r\n    } else {\r\n      return newOptions[key] !== baseOptions[key]\r\n    }\r\n  }) as Array<keyof RenderMaterialRenderingOptions>\r\n}\r\n","export default /* wgsl */ `\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n  @location(1) normal: vec3f,\r\n};\r\n\r\n@vertex fn main(\r\n  attributes: Attributes,\r\n) -> VSOutput {\r\n  var vsOutput: VSOutput;\r\n\r\n  vsOutput.position = getOutputPosition(attributes.position);\r\n  vsOutput.uv = attributes.uv;\r\n  vsOutput.normal = getWorldNormal(attributes.normal);\r\n  \r\n  return vsOutput;\r\n}`\r\n","export default /* wgsl */ `\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n};\r\n\r\n@vertex fn main(\r\n  attributes: Attributes,\r\n) -> VSOutput {\r\n  var vsOutput: VSOutput;\r\n\r\n  vsOutput.position = vec4f(attributes.position, 1.0);\r\n  vsOutput.uv = attributes.uv;\r\n  \r\n  return vsOutput;\r\n}`\r\n","export default /* wgsl */ `\r\n@fragment fn main() -> @location(0) vec4f {\r\n  return vec4(0.0, 0.0, 0.0, 1.0);\r\n}`\r\n","import { Material } from './Material'\r\nimport { isRenderer, Renderer } from '../renderers/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport {\r\n  AllowedGeometries,\r\n  RenderMaterialAttributes,\r\n  RenderMaterialOptions,\r\n  RenderMaterialParams,\r\n  RenderMaterialRenderingOptions,\r\n  ShaderOptions,\r\n} from '../../types/Materials'\r\nimport { RenderPipelineEntry } from '../pipelines/RenderPipelineEntry'\r\nimport { throwWarning } from '../../utils/utils'\r\nimport { compareRenderingOptions } from './utils'\r\nimport default_projected_vsWgsl from '../shaders/chunks/default_projected_vs.wgsl'\r\nimport default_vsWgsl from '../shaders/chunks/default_vs.wgsl'\r\nimport default_fsWgsl from '../shaders/chunks/default_fs.wgsl'\r\n\r\n/**\r\n * Create a {@link Material} specifically built to draw the vertices of a {@link core/geometries/Geometry.Geometry | Geometry}. Internally used by all kind of Meshes.\r\n *\r\n * ## Render pipeline\r\n *\r\n * A {@link RenderMaterial} automatically creates a {@link RenderPipelineEntry}. Once all the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} have been created, they are sent with the shaders code and the {@link RenderMaterialOptions#rendering | rendering options} to the {@link RenderPipelineEntry}, which is in turns responsible for creating the {@link GPURenderPipeline}.\r\n *\r\n * After the {@link GPURenderPipeline} has been successfully compiled, the {@link RenderMaterial} is considered to be ready.\r\n */\r\nexport class RenderMaterial extends Material {\r\n  /** {@link RenderPipelineEntry | Render pipeline entry} used by this {@link RenderMaterial} */\r\n  pipelineEntry: RenderPipelineEntry | null\r\n  /** Mandatory {@link RenderMaterialAttributes | geometry attributes} to pass to the {@link RenderPipelineEntry | render pipeline entry} */\r\n  attributes: RenderMaterialAttributes | null\r\n  /** Options used to create this {@link RenderMaterial} */\r\n  options: RenderMaterialOptions\r\n\r\n  /**\r\n   * RenderMaterial constructor\r\n   * @param renderer - our renderer class object\r\n   * @param parameters - {@link RenderMaterialParams | parameters} used to create our RenderMaterial\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters: RenderMaterialParams) {\r\n    const type = 'RenderMaterial'\r\n\r\n    renderer = isRenderer(renderer, type)\r\n\r\n    if (!parameters.shaders) {\r\n      parameters.shaders = {}\r\n    }\r\n\r\n    if (!parameters.shaders?.vertex) {\r\n      parameters.shaders.vertex = {\r\n        code: parameters.useProjection ? default_projected_vsWgsl : default_vsWgsl,\r\n        entryPoint: 'main',\r\n      }\r\n    }\r\n\r\n    if (!parameters.shaders.vertex.entryPoint) {\r\n      parameters.shaders.vertex.entryPoint = 'main'\r\n    }\r\n\r\n    if (parameters.shaders.fragment === undefined) {\r\n      ;(parameters.shaders.fragment as ShaderOptions) = {\r\n        entryPoint: 'main',\r\n        code: default_fsWgsl,\r\n      }\r\n    }\r\n\r\n    super(renderer, parameters)\r\n\r\n    this.type = type\r\n    this.renderer = renderer\r\n\r\n    const { shaders } = parameters\r\n\r\n    // rendering options\r\n    const {\r\n      useProjection,\r\n      transparent,\r\n      depth,\r\n      depthWriteEnabled,\r\n      depthCompare,\r\n      depthFormat,\r\n      cullMode,\r\n      sampleCount,\r\n      verticesOrder,\r\n      topology,\r\n    } = parameters\r\n\r\n    let { targets } = parameters\r\n\r\n    // patch default target format if not set\r\n    if (targets === undefined) {\r\n      targets = [\r\n        {\r\n          format: this.renderer.options.preferredFormat,\r\n        },\r\n      ]\r\n    }\r\n    if (targets && targets.length && !targets[0].format) {\r\n      targets[0].format = this.renderer.options.preferredFormat\r\n    }\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      shaders,\r\n      rendering: {\r\n        useProjection,\r\n        transparent,\r\n        depth,\r\n        depthWriteEnabled,\r\n        depthCompare,\r\n        depthFormat,\r\n        cullMode,\r\n        sampleCount,\r\n        targets,\r\n        verticesOrder,\r\n        topology,\r\n      },\r\n    } as RenderMaterialOptions\r\n\r\n    this.attributes = null\r\n    // will be set at render if needed\r\n    this.pipelineEntry = null\r\n  }\r\n\r\n  /**\r\n   * Set (or reset) the current {@link pipelineEntry}. Use the {@link Renderer#pipelineManager | renderer pipelineManager} to check whether we can get an already created {@link RenderPipelineEntry} from cache or if we should create a new one.\r\n   */\r\n  setPipelineEntry() {\r\n    this.pipelineEntry = this.renderer.pipelineManager.createRenderPipeline({\r\n      renderer: this.renderer,\r\n      label: this.options.label + ' render pipeline',\r\n      shaders: this.options.shaders,\r\n      useAsync: this.options.useAsyncPipeline,\r\n      rendering: this.options.rendering,\r\n      attributes: this.attributes,\r\n      bindGroups: this.bindGroups,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Compile the {@link RenderPipelineEntry}\r\n   * @async\r\n   */\r\n  async compilePipelineEntry(): Promise<void> {\r\n    await this.pipelineEntry.compilePipelineEntry()\r\n  }\r\n\r\n  /**\r\n   * Check if attributes and all bind groups are ready, create them if needed and set {@link RenderPipelineEntry} bind group buffers and compile the pipeline\r\n   * @async\r\n   */\r\n  async compileMaterial() {\r\n    super.compileMaterial()\r\n\r\n    if (this.attributes && !this.pipelineEntry) {\r\n      this.setPipelineEntry()\r\n    }\r\n\r\n    if (this.pipelineEntry && this.pipelineEntry.canCompile) {\r\n      await this.compilePipelineEntry()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set or reset one of the {@link RenderMaterialRenderingOptions | rendering options}. Should be use with great caution, because if the {@link RenderPipelineEntry#pipeline | render pipeline} has already been compiled, it can cause a pipeline flush.\r\n   * @param renderingOptions - new {@link RenderMaterialRenderingOptions | rendering options} properties to be set\r\n   */\r\n  setRenderingOptions(renderingOptions: Partial<RenderMaterialRenderingOptions> = {}) {\r\n    const newProperties = compareRenderingOptions(renderingOptions, this.options.rendering)\r\n\r\n    const oldRenderingOptions = { ...this.options.rendering }\r\n\r\n    // apply new options\r\n    this.options.rendering = { ...this.options.rendering, ...renderingOptions }\r\n\r\n    if (this.pipelineEntry) {\r\n      if (this.pipelineEntry.ready && newProperties.length) {\r\n        if (!this.renderer.production) {\r\n          const oldProps = newProperties.map((key) => {\r\n            return {\r\n              [key]: Array.isArray(oldRenderingOptions[key])\r\n                ? (oldRenderingOptions[key] as []).map((optKey) => optKey)\r\n                : oldRenderingOptions[key],\r\n            }\r\n          })\r\n\r\n          const newProps = newProperties.map((key) => {\r\n            return {\r\n              [key]: Array.isArray(renderingOptions[key])\r\n                ? (renderingOptions[key] as []).map((optKey) => optKey)\r\n                : renderingOptions[key],\r\n            }\r\n          })\r\n\r\n          throwWarning(\r\n            `${\r\n              this.options.label\r\n            }: the change of rendering options is causing this RenderMaterial pipeline to be recompiled. This should be avoided.\\n\\nOld rendering options: ${JSON.stringify(\r\n              oldProps.reduce((acc, v) => {\r\n                return { ...acc, ...v }\r\n              }, {}),\r\n              null,\r\n              4\r\n            )}\\n\\n--------\\n\\nNew rendering options: ${JSON.stringify(\r\n              newProps.reduce((acc, v) => {\r\n                return { ...acc, ...v }\r\n              }, {}),\r\n              null,\r\n              4\r\n            )}`\r\n          )\r\n        }\r\n\r\n        // recreate the pipeline entry totally\r\n        // if we're lucky we might get one from the cache\r\n        this.setPipelineEntry()\r\n      } else {\r\n        this.pipelineEntry.options.rendering = { ...this.pipelineEntry.options.rendering, ...this.options.rendering }\r\n      }\r\n    }\r\n  }\r\n\r\n  /* ATTRIBUTES */\r\n\r\n  /**\r\n   * Compute geometry if needed and get all useful geometry properties needed to create attributes buffers\r\n   * @param geometry - the geometry to draw\r\n   */\r\n  setAttributesFromGeometry(geometry: AllowedGeometries) {\r\n    this.attributes = {\r\n      wgslStructFragment: geometry.wgslStructFragment,\r\n      vertexBuffers: geometry.vertexBuffers,\r\n      layoutCacheKey: geometry.layoutCacheKey,\r\n    }\r\n  }\r\n\r\n  /* BIND GROUPS */\r\n\r\n  /**\r\n   * Create the bind groups if they need to be created, but first add Camera bind group if needed\r\n   */\r\n  createBindGroups() {\r\n    // camera first!\r\n    if ('cameraBindGroup' in this.renderer && this.options.rendering.useProjection) {\r\n      this.bindGroups.push(this.renderer.cameraBindGroup)\r\n      this.renderer.cameraBindGroup.consumers.add(this.uuid)\r\n    }\r\n\r\n    super.createBindGroups()\r\n  }\r\n}\r\n","import { generateUUID, throwWarning } from '../../../utils/utils'\r\nimport { isRenderer, Renderer } from '../../renderers/utils'\r\nimport { RenderMaterial } from '../../materials/RenderMaterial'\r\nimport { DOMTexture } from '../../textures/DOMTexture'\r\nimport { Geometry } from '../../geometries/Geometry'\r\nimport { Texture, TextureParams } from '../../textures/Texture'\r\nimport { ExternalTextureParams, DOMTextureParams, DOMTextureParent } from '../../../types/Textures'\r\nimport { RenderTarget } from '../../renderPasses/RenderTarget'\r\nimport { GPUCurtains } from '../../../curtains/GPUCurtains'\r\nimport { ProjectedMesh, SceneStackedMesh } from '../../renderers/GPURenderer'\r\nimport { Material } from '../../materials/Material'\r\nimport { DOMElementBoundingRect } from '../../DOM/DOMElement'\r\nimport { AllowedGeometries, RenderMaterialParams, ShaderOptions } from '../../../types/Materials'\r\nimport { ProjectedMeshBaseClass } from './ProjectedMeshBaseMixin'\r\nimport default_vsWgsl from '../../shaders/chunks/default_vs.wgsl'\r\nimport default_fsWgsl from '../../shaders/chunks/default_fs.wgsl'\r\nimport { RenderPass } from '../../renderPasses/RenderPass'\r\n\r\nlet meshIndex = 0\r\n\r\n/**\r\n * Base render params used to create a Mesh\r\n */\r\nexport interface MeshBaseRenderParams extends Omit<RenderMaterialParams, 'targets'> {\r\n  /** Whether we should add this Mesh to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\r\n  autoRender?: boolean\r\n  /** Flag indicating whether to draw this Mesh or not */\r\n  visible?: boolean\r\n  /** Controls the order in which this Mesh should be rendered by our {@link core/scenes/Scene.Scene | Scene} */\r\n  renderOrder?: number\r\n  /** Optional {@link RenderTarget} to render this Mesh to instead of the canvas context. */\r\n  outputTarget?: RenderTarget\r\n  /** Parameters used by this Mesh to create a {@link DOMTexture} */\r\n  texturesOptions?: ExternalTextureParams\r\n  /** Optional {@link https://developer.mozilla.org/en-US/docs/Web/API/GPUDevice/createRenderPipeline#targets | targets} properties */\r\n  targets?: Partial<GPUColorTargetState>[]\r\n}\r\n\r\n/**\r\n * Base parameters used to create a Mesh\r\n */\r\nexport interface MeshBaseParams extends MeshBaseRenderParams {\r\n  /** Geometry to use */\r\n  geometry?: AllowedGeometries\r\n}\r\n\r\n/**\r\n *  Base options used to create this Mesh\r\n */\r\nexport interface MeshBaseOptions extends RenderMaterialParams {\r\n  /** The label of this Mesh, sent to various GPU objects for debugging purpose */\r\n  label?: MeshBaseParams['label']\r\n  /** Shaders to use by this Mesh {@link RenderMaterial} */\r\n  shaders?: MeshBaseParams['shaders']\r\n  /** Parameters used by this Mesh to create a {@link DOMTexture} */\r\n  texturesOptions?: ExternalTextureParams\r\n  /** {@link RenderTarget} to render this Mesh to instead of the canvas context, if any. */\r\n  outputTarget?: RenderTarget | null\r\n  /** Whether we should add this Mesh to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\r\n  autoRender?: boolean\r\n  /** Whether to compile this Mesh {@link RenderMaterial} {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry#pipeline | render pipeline} asynchronously or not */\r\n  useAsyncPipeline?: boolean\r\n}\r\n\r\n/** @const - Default Mesh parameters to merge with user defined parameters */\r\nconst defaultMeshBaseParams: MeshBaseParams = {\r\n  // material\r\n  autoRender: true,\r\n  useProjection: false,\r\n  useAsyncPipeline: true,\r\n  // rendering\r\n  cullMode: 'back',\r\n  depth: true,\r\n  depthWriteEnabled: true,\r\n  depthCompare: 'less',\r\n  depthFormat: 'depth24plus',\r\n  transparent: false,\r\n  visible: true,\r\n  renderOrder: 0,\r\n  // textures\r\n  texturesOptions: {},\r\n}\r\n\r\n// based on https://stackoverflow.com/a/75673107/13354068\r\n// we declare first a class, and then the mixin with a return type\r\n/**\r\n * This class describes the properties and methods to set up a basic Mesh, implemented in the {@link MeshBaseMixin}:\r\n * - Set and render the {@link Geometry} and {@link RenderMaterial}\r\n * - Add helpers to create {@link DOMTexture} and {@link Texture}\r\n * - Handle resizing, device lost/restoration and destroying the resources\r\n */\r\nexport declare class MeshBaseClass {\r\n  /** The type of the {@link MeshBaseClass} */\r\n  type: string\r\n  /** The universal unique id of the {@link MeshBaseClass} */\r\n  readonly uuid: string\r\n  /** Index of this {@link MeshBaseClass}, i.e. creation order */\r\n  readonly index: number\r\n  /** The {@link Renderer} used */\r\n  renderer: Renderer\r\n\r\n  /** Options used to create this {@link MeshBaseClass} */\r\n  options: MeshBaseOptions\r\n\r\n  /** {@link RenderMaterial} used by this {@link MeshBaseClass} */\r\n  material: RenderMaterial\r\n  /** {@link AllowedGeometries | Geometry} used by this {@link MeshBaseClass} */\r\n  geometry: MeshBaseParams['geometry']\r\n\r\n  /** {@link RenderTarget} to render this Mesh to instead of the canvas context, if any. */\r\n  outputTarget: null | RenderTarget\r\n\r\n  /** Controls the order in which this {@link MeshBaseClass} should be rendered by our {@link core/scenes/Scene.Scene | Scene} */\r\n  renderOrder: number\r\n  /** Whether this {@link MeshBaseClass} should be treated as transparent. Impacts the {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry#pipeline | render pipeline} blend properties */\r\n  _transparent: boolean\r\n\r\n  /** Flag indicating whether to draw this {@link MeshBaseClass} or not */\r\n  _visible: boolean\r\n  /** Flag indicating whether this {@link MeshBaseClass} is ready to be drawn */\r\n  _ready: boolean\r\n\r\n  /** Empty object to store any additional data or custom properties into your Mesh. */\r\n  userData: Record<string, unknown>\r\n\r\n  // callbacks\r\n  /** function assigned to the {@link onReady} callback */\r\n  _onReadyCallback: () => void\r\n  /** function assigned to the {@link onBeforeRender} callback */\r\n  _onBeforeRenderCallback: () => void\r\n  /** function assigned to the {@link onRender} callback */\r\n  _onRenderCallback: () => void\r\n  /** function assigned to the {@link onAfterRender} callback */\r\n  _onAfterRenderCallback: () => void\r\n  /** function assigned to the {@link onAfterResize} callback */\r\n  _onAfterResizeCallback: () => void\r\n\r\n  /**\r\n   * Callback to execute when a Mesh is ready - i.e. its {@link material} and {@link geometry} are ready.\r\n   * @param callback - callback to run when {@link MeshBaseClass} is ready\r\n   * @returns - our Mesh\r\n   */\r\n  onReady: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\r\n\r\n  /**\r\n   * Callback to execute before updating the {@link core/scenes/Scene.Scene | Scene} matrix stack. This means it is called early and allows to update transformations values before actually setting the Mesh matrices (if any). This also means it won't be called if the Mesh has not been added to the {@link core/scenes/Scene.Scene | Scene}. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\r\n   * @param callback - callback to run just before updating the {@link core/scenes/Scene.Scene | Scene} matrix stack.\r\n   * @returns - our Mesh\r\n   */\r\n  onBeforeRender: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\r\n\r\n  /**\r\n   * Callback to execute right before actually rendering the Mesh. Useful to update uniforms for example. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\r\n   * @param callback - callback to run just before rendering the {@link MeshBaseClass}.\r\n   * @returns - our Mesh\r\n   */\r\n  onRender: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\r\n\r\n  /**\r\n   * Callback to execute just after a Mesh has been rendered. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\r\n   * @param callback - callback to run just after {@link MeshBaseClass} has been rendered\r\n   * @returns - our Mesh\r\n   */\r\n  onAfterRender: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\r\n\r\n  /**\r\n   * Callback to execute just after a Mesh has been resized.\r\n   * @param callback - callback to run just after {@link MeshBaseClass} has been resized\r\n   * @returns - our Mesh\r\n   */\r\n  onAfterResize: (callback: () => void) => MeshBaseClass | ProjectedMeshBaseClass\r\n\r\n  /**\r\n   * {@link MeshBaseClass} constructor\r\n   * @param renderer - our {@link Renderer} class object\r\n   * @param element - a DOM HTML Element that can be bound to a Mesh\r\n   * @param parameters - {@link MeshBaseParams | Mesh base parameters}\r\n   */\r\n  constructor(renderer: Renderer, element: HTMLElement | null, parameters: MeshBaseParams)\r\n\r\n  /**\r\n   * Get private #autoRender value\r\n   * @readonly\r\n   */\r\n  get autoRender(): boolean // allow to read value from child classes\r\n\r\n  /**\r\n   * Get/set whether a Mesh is ready or not\r\n   * @readonly\r\n   */\r\n  get ready(): boolean\r\n  set ready(value: boolean)\r\n\r\n  /**\r\n   * Add a Mesh to the renderer and the {@link core/scenes/Scene.Scene | Scene}\r\n   */\r\n  addToScene(addToRenderer: boolean): void\r\n\r\n  /**\r\n   * Remove a Mesh from the renderer and the {@link core/scenes/Scene.Scene | Scene}\r\n   */\r\n  removeFromScene(removeFromRenderer: boolean): void\r\n\r\n  /**\r\n   * Set a new {@link Renderer} for this Mesh\r\n   * @param renderer - new {@link Renderer} to set\r\n   */\r\n  setRenderer(renderer: Renderer | GPUCurtains): void\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.\r\n   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to draw the Mesh\r\n   */\r\n  loseContext(): void\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored\r\n   */\r\n  restoreContext(): void\r\n\r\n  /**\r\n   * Set default shaders if one or both of them are missing\r\n   */\r\n  setShaders(): void\r\n\r\n  /**\r\n   * Set or update the Mesh {@link Geometry}\r\n   * @param geometry - new {@link Geometry} to use\r\n   */\r\n  useGeometry(geometry: Geometry): void\r\n\r\n  /**\r\n   * Compute the Mesh geometry if needed\r\n   */\r\n  computeGeometry(): void\r\n\r\n  /**\r\n   * Set our Mesh geometry: create buffers and add attributes to material\r\n   */\r\n  setGeometry(): void\r\n\r\n  /**\r\n   * Set or update the {@link RenderMaterial} {@link types/Materials.RenderMaterialRenderingOptions | rendering options} to match the {@link RenderPass#descriptor | RenderPass descriptor} used to draw this Mesh.\r\n   * @param renderPass - {@link RenderPass | RenderPass} used to draw this Mesh, default to the {@link core/renderers/GPURenderer.GPURenderer#renderPass | renderer renderPass}.\r\n   */\r\n  setRenderingOptionsForRenderPass(renderPass: RenderPass): void\r\n\r\n  /**\r\n   * Hook used to clean up parameters before sending them to the material.\r\n   * @param parameters - parameters to clean before sending them to the {@link RenderMaterial}\r\n   * @returns - cleaned parameters\r\n   */\r\n  cleanupRenderMaterialParameters(parameters: MeshBaseRenderParams): MeshBaseRenderParams\r\n\r\n  /**\r\n   * Set or update the Mesh {@link RenderMaterial}\r\n   * @param material - new {@link RenderMaterial} to use\r\n   */\r\n  useMaterial(material: RenderMaterial): void\r\n\r\n  /**\r\n   * Set a Mesh transparent property, then set its material\r\n   * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}\r\n   */\r\n  setMaterial(meshParameters: RenderMaterialParams): void\r\n\r\n  /**\r\n   * Set Mesh material attributes\r\n   */\r\n  setMaterialGeometryAttributes(): void\r\n\r\n  /**\r\n   * Get the transparent property value\r\n   */\r\n  get transparent(): boolean | undefined\r\n\r\n  /**\r\n   * Set the transparent property value. Update the {@link RenderMaterial} rendering options and {@link core/scenes/Scene.Scene | Scene} stack if needed.\r\n   * @param value - new transparency value\r\n   */\r\n  set transparent(value: boolean)\r\n\r\n  /**\r\n   * Get the visible property value\r\n   */\r\n  get visible(): boolean\r\n\r\n  /**\r\n   * Set the visible property value\r\n   * @param value - new visibility value\r\n   */\r\n  set visible(value: boolean)\r\n\r\n  /**\r\n   * Get our {@link RenderMaterial#domTextures | RenderMaterial domTextures array}\r\n   * @readonly\r\n   */\r\n  get domTextures(): DOMTexture[]\r\n\r\n  /**\r\n   * Get our {@link RenderMaterial#textures | RenderMaterial textures array}\r\n   * @readonly\r\n   */\r\n  get textures(): Texture[]\r\n\r\n  /**\r\n   * Create a new {@link DOMTexture}\r\n   * @param options - {@link DOMTextureParams | DOMTexture parameters}\r\n   * @returns - newly created DOMTexture\r\n   */\r\n  createDOMTexture(options: DOMTextureParams): DOMTexture\r\n\r\n  /**\r\n   * Add a {@link DOMTexture}\r\n   * @param domTexture - {@link DOMTexture} to add\r\n   */\r\n  addDOMTexture(domTexture: DOMTexture)\r\n\r\n  /**\r\n   * Callback run when a new {@link DOMTexture} has been created\r\n   * @param domTexture - newly created DOMTexture\r\n   */\r\n  onDOMTextureAdded(domTexture: DOMTexture): void\r\n\r\n  /**\r\n   * Create a new {@link Texture}\r\n   * @param  options - {@link TextureParams | Texture parameters}\r\n   * @returns - newly created Texture\r\n   */\r\n  createTexture(options: TextureParams): Texture\r\n\r\n  /**\r\n   * Add a {@link Texture}\r\n   * @param texture - {@link Texture} to add\r\n   */\r\n  addTexture(texture: Texture)\r\n\r\n  /**\r\n   * Assign or remove a {@link RenderTarget} to this Mesh\r\n   * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a RenderTarget as well.\r\n   * @param outputTarget - the RenderTarget to assign or null if we want to remove the current RenderTarget\r\n   */\r\n  setOutputTarget(outputTarget: RenderTarget | null): void\r\n\r\n  /**\r\n   * Get the current {@link RenderMaterial} uniforms\r\n   * @readonly\r\n   */\r\n  get uniforms(): Material['uniforms']\r\n\r\n  /**\r\n   * Get the current {@link RenderMaterial} storages\r\n   * @readonly\r\n   */\r\n  get storages(): Material['storages']\r\n\r\n  /**\r\n   * Resize the Mesh's textures\r\n   * @param boundingRect\r\n   */\r\n  resize(boundingRect?: DOMElementBoundingRect): void\r\n\r\n  /**\r\n   * Execute {@link onBeforeRender} callback if needed. Called by the {@link core/scenes/Scene.Scene | Scene} before updating the matrix stack.\r\n   */\r\n  onBeforeRenderScene(): void\r\n\r\n  /**\r\n   * Called before rendering the Mesh\r\n   * Set the geometry if needed (create buffers and add attributes to the {@link RenderMaterial})\r\n   * Then executes {@link RenderMaterial#onBeforeRender}: create its bind groups and pipeline if needed and eventually update its bindings\r\n   */\r\n  onBeforeRenderPass(): void\r\n\r\n  /**\r\n   * Render our {@link MeshBaseClass} if the {@link RenderMaterial} is ready\r\n   * @param pass - current render pass encoder\r\n   */\r\n  onRenderPass(pass: GPURenderPassEncoder): void\r\n\r\n  /**\r\n   * Called after having rendered the Mesh\r\n   */\r\n  onAfterRenderPass(): void\r\n\r\n  /**\r\n   * Render our Mesh\r\n   * - Execute {@link onBeforeRenderPass}\r\n   * - Stop here if {@link Renderer} is not ready or Mesh is not {@link visible}\r\n   * - Execute super render call if it exists\r\n   * - {@link onRenderPass | render} our {@link material} and {@link geometry}\r\n   * - Execute {@link onAfterRenderPass}\r\n   * @param pass - current render pass encoder\r\n   */\r\n  render(pass: GPURenderPassEncoder): void\r\n\r\n  /**\r\n   * Remove the Mesh from the {@link core/scenes/Scene.Scene | Scene} and destroy it\r\n   */\r\n  remove(): void\r\n\r\n  /**\r\n   * Destroy the Mesh\r\n   */\r\n  destroy(): void\r\n}\r\n\r\n/**\r\n * Constructor function, that creates a new instance of the given type.\r\n * @constructor\r\n * @template T - the base constructor\r\n * @param args - The arguments passed to the constructor.\r\n * @returns - An instance of the mixin.\r\n */\r\nexport type MixinConstructor<T = {}> = new (...args: any[]) => T\r\n\r\n/**\r\n * Used to mix the basic Mesh properties and methods defined in {@link MeshBaseClass} (basically, set a {@link Geometry} and a {@link RenderMaterial} and render them, add helpers to create {@link DOMTexture} and {@link Texture}) with a given Base of type {@link core/objects3D/Object3D.Object3D | Object3D}, {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D}, {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D} or an empty class.\r\n * @exports MeshBaseMixin\r\n * @param Base - the class to mix onto\r\n * @returns - the mixed classes, creating a basic Mesh.\r\n */\r\nfunction MeshBaseMixin<TBase extends MixinConstructor>(Base: TBase): MixinConstructor<MeshBaseClass> & TBase {\r\n  /**\r\n   * MeshBase defines our base properties and methods\r\n   */\r\n  return class MeshBase extends Base implements MeshBaseClass {\r\n    /** The type of the {@link MeshBase} */\r\n    type: string\r\n    /** The universal unique id of the {@link MeshBase} */\r\n    readonly uuid: string\r\n    /** Index of this {@link MeshBase}, i.e. creation order */\r\n    readonly index: number\r\n    /** The {@link Renderer} used */\r\n    renderer: Renderer\r\n\r\n    /** Options used to create this {@link MeshBase} */\r\n    options: MeshBaseOptions\r\n\r\n    /** {@link RenderMaterial} used by this {@link MeshBase} */\r\n    material: RenderMaterial\r\n    /** {@link AllowedGeometries | Geometry} used by this {@link MeshBase} */\r\n    geometry: MeshBaseParams['geometry']\r\n\r\n    /** {@link RenderTarget} to render this Mesh to, if any */\r\n    outputTarget: null | RenderTarget\r\n\r\n    /** Controls the order in which this {@link MeshBase} should be rendered by our {@link core/scenes/Scene.Scene | Scene} */\r\n    renderOrder: number\r\n    /** Whether this {@link MeshBase} should be treated as transparent. Impacts the {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry#pipeline | render pipeline} blend properties */\r\n    _transparent: boolean\r\n\r\n    /** Flag indicating whether to draw this {@link MeshBase} or not */\r\n    _visible: boolean\r\n    /** Flag indicating whether this {@link MeshBase} is ready to be drawn */\r\n    _ready: boolean\r\n\r\n    /** Empty object to store any additional data or custom properties into your {@link MeshBase}. */\r\n    userData: Record<string, unknown>\r\n\r\n    /** Whether we should add this {@link MeshBase} to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\r\n    #autoRender = true\r\n\r\n    // callbacks / events\r\n    /** function assigned to the {@link onReady} callback */\r\n    _onReadyCallback: () => void = () => {\r\n      /* allow empty callback */\r\n    }\r\n    /** function assigned to the {@link onBeforeRender} callback */\r\n    _onBeforeRenderCallback: () => void = () => {\r\n      /* allow empty callback */\r\n    }\r\n    /** function assigned to the {@link onRender} callback */\r\n    _onRenderCallback: () => void = () => {\r\n      /* allow empty callback */\r\n    }\r\n    /** function assigned to the {@link onAfterRender} callback */\r\n    _onAfterRenderCallback: () => void = () => {\r\n      /* allow empty callback */\r\n    }\r\n    /** function assigned to the {@link onAfterResize} callback */\r\n    _onAfterResizeCallback: () => void = () => {\r\n      /* allow empty callback */\r\n    }\r\n\r\n    /**\r\n     * MeshBase constructor\r\n     *\r\n     * @typedef MeshBaseArrayParams\r\n     * @type {array}\r\n     * @property {(Renderer|GPUCurtains)} 0 - our {@link Renderer} class object\r\n     * @property {(string|HTMLElement|null)} 1 - a DOM HTML Element that can be bound to a Mesh\r\n     * @property {MeshBaseParams} 2 - {@link MeshBaseParams | Mesh base parameters}\r\n     *\r\n     * @param {MeshBaseArrayParams} params - our MeshBaseMixin parameters\r\n     */\r\n    constructor(...params: any[]) {\r\n      super(\r\n        params[0] as Renderer | GPUCurtains,\r\n        params[1] as HTMLElement | string | null,\r\n        { ...defaultMeshBaseParams, ...params[2] } as MeshBaseParams\r\n      )\r\n\r\n      let renderer = params[0]\r\n      const parameters = { ...defaultMeshBaseParams, ...params[2] }\r\n\r\n      this.type = 'MeshBase'\r\n\r\n      this.uuid = generateUUID()\r\n      Object.defineProperty(this as MeshBase, 'index', { value: meshIndex++ })\r\n\r\n      renderer = isRenderer(renderer, parameters.label ? parameters.label + ' ' + this.type : this.type)\r\n\r\n      this.renderer = renderer\r\n\r\n      const {\r\n        label,\r\n        shaders,\r\n        geometry,\r\n        visible,\r\n        renderOrder,\r\n        outputTarget,\r\n        texturesOptions,\r\n        autoRender,\r\n        ...meshParameters\r\n      } = parameters\r\n\r\n      this.outputTarget = outputTarget ?? null\r\n\r\n      // set default sample count\r\n      meshParameters.sampleCount = !!meshParameters.sampleCount\r\n        ? meshParameters.sampleCount\r\n        : this.outputTarget\r\n        ? this.outputTarget.renderPass.options.sampleCount\r\n        : this.renderer && this.renderer.renderPass\r\n        ? this.renderer.renderPass.options.sampleCount\r\n        : 1\r\n\r\n      this.options = {\r\n        ...(this.options ?? {}), // merge possible lower options?\r\n        label: label ?? 'Mesh ' + this.renderer.meshes.length,\r\n        ...(shaders !== undefined ? { shaders } : {}),\r\n        ...(outputTarget !== undefined && { outputTarget }),\r\n        texturesOptions,\r\n        ...(autoRender !== undefined && { autoRender }),\r\n        ...meshParameters,\r\n      }\r\n\r\n      if (autoRender !== undefined) {\r\n        this.#autoRender = autoRender\r\n      }\r\n\r\n      this.visible = visible\r\n      this.renderOrder = renderOrder\r\n      this.ready = false\r\n\r\n      this.userData = {}\r\n\r\n      if (geometry) {\r\n        this.useGeometry(geometry)\r\n      }\r\n\r\n      this.setMaterial({\r\n        ...this.cleanupRenderMaterialParameters({ ...this.options }),\r\n        ...(geometry && { verticesOrder: geometry.verticesOrder, topology: geometry.topology }),\r\n      } as RenderMaterialParams)\r\n\r\n      this.addToScene(true)\r\n    }\r\n\r\n    /**\r\n     * Get private #autoRender value\r\n     * @readonly\r\n     */\r\n    get autoRender(): boolean {\r\n      return this.#autoRender\r\n    }\r\n\r\n    /**\r\n     * Get/set whether a Mesh is ready or not\r\n     * @readonly\r\n     */\r\n    get ready(): boolean {\r\n      return this._ready\r\n    }\r\n\r\n    set ready(value: boolean) {\r\n      if (value && !this._ready) {\r\n        this._onReadyCallback && this._onReadyCallback()\r\n      }\r\n      this._ready = value\r\n    }\r\n\r\n    /* SCENE */\r\n\r\n    /**\r\n     * Add a Mesh to the {@link core/scenes/Scene.Scene | Scene} and optionally to the renderer. Can patch the {@link RenderMaterial} render options to match the {@link RenderPass} used to draw this Mesh.\r\n     * @param addToRenderer - whether to add this Mesh to the {@link Renderer#meshes | Renderer meshes array}\r\n     */\r\n    addToScene(addToRenderer = false) {\r\n      if (addToRenderer) {\r\n        this.renderer.meshes.push(this as unknown as SceneStackedMesh)\r\n      }\r\n\r\n      this.setRenderingOptionsForRenderPass(this.outputTarget ? this.outputTarget.renderPass : this.renderer.renderPass)\r\n\r\n      if (this.#autoRender) {\r\n        this.renderer.scene.addMesh(this as unknown as SceneStackedMesh)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Remove a Mesh from the {@link core/scenes/Scene.Scene | Scene} and optionally from the renderer as well.\r\n     * @param removeFromRenderer - whether to remove this Mesh from the {@link Renderer#meshes | Renderer meshes array}\r\n     */\r\n    removeFromScene(removeFromRenderer = false) {\r\n      if (this.#autoRender) {\r\n        this.renderer.scene.removeMesh(this as unknown as ProjectedMesh)\r\n      }\r\n\r\n      if (removeFromRenderer) {\r\n        this.renderer.meshes = this.renderer.meshes.filter((m) => m.uuid !== this.uuid)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Set a new {@link Renderer} for this Mesh\r\n     * @param renderer - new {@link Renderer} to set\r\n     */\r\n    setRenderer(renderer: Renderer | GPUCurtains) {\r\n      // we could pass our curtains object OR our curtains renderer object\r\n      renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\r\n\r\n      if (\r\n        !renderer ||\r\n        !(\r\n          renderer.type === 'GPURenderer' ||\r\n          renderer.type === 'GPUCameraRenderer' ||\r\n          renderer.type === 'GPUCurtainsRenderer'\r\n        )\r\n      ) {\r\n        throwWarning(\r\n          `${this.options.label}: Cannot set ${renderer} as a renderer because it is not of a valid Renderer type.`\r\n        )\r\n        return\r\n      }\r\n\r\n      const oldRenderer = this.renderer\r\n      this.removeFromScene(true)\r\n      this.renderer = renderer\r\n      this.addToScene(true)\r\n\r\n      // if old renderer does not contain any meshes any more\r\n      // clear it\r\n      if (!oldRenderer.meshes.length) {\r\n        oldRenderer.onBeforeRenderScene.add(\r\n          (commandEncoder) => {\r\n            oldRenderer.forceClear(commandEncoder)\r\n          },\r\n          { once: true }\r\n        )\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Assign or remove a {@link RenderTarget} to this Mesh\r\n     * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a RenderTarget as well.\r\n     * @param outputTarget - the RenderTarget to assign or null if we want to remove the current RenderTarget\r\n     */\r\n    setOutputTarget(outputTarget: RenderTarget | null) {\r\n      if (outputTarget && outputTarget.type !== 'RenderTarget') {\r\n        throwWarning(`${this.options.label ?? this.type}: outputTarget is not a RenderTarget: ${outputTarget}`)\r\n        return\r\n      }\r\n\r\n      // ensure the mesh is in the correct scene stack\r\n      this.removeFromScene()\r\n      this.outputTarget = outputTarget\r\n      this.addToScene()\r\n    }\r\n\r\n    /**\r\n     * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.\r\n     * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to draw the Mesh\r\n     */\r\n    loseContext() {\r\n      // we're obviously not ready anymore\r\n      this.ready = false\r\n\r\n      // first the geometry\r\n      this.geometry.loseContext()\r\n\r\n      // then the material\r\n      this.material.loseContext()\r\n    }\r\n\r\n    /**\r\n     * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored\r\n     */\r\n    restoreContext() {\r\n      this.geometry.restoreContext(this.renderer)\r\n      this.material.restoreContext()\r\n    }\r\n\r\n    /* SHADERS */\r\n\r\n    /**\r\n     * Set default shaders if one or both of them are missing\r\n     */\r\n    setShaders() {\r\n      const { shaders } = this.options\r\n\r\n      if (!shaders) {\r\n        this.options.shaders = {\r\n          vertex: {\r\n            code: default_vsWgsl,\r\n            entryPoint: 'main',\r\n          },\r\n          fragment: {\r\n            code: default_fsWgsl,\r\n            entryPoint: 'main',\r\n          },\r\n        }\r\n      } else {\r\n        if (!shaders.vertex || !shaders.vertex.code) {\r\n          shaders.vertex = {\r\n            code: default_vsWgsl,\r\n            entryPoint: 'main',\r\n          }\r\n        }\r\n\r\n        if (shaders.fragment === undefined || (shaders.fragment && !(shaders.fragment as ShaderOptions).code)) {\r\n          shaders.fragment = {\r\n            code: default_fsWgsl,\r\n            entryPoint: 'main',\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /* GEOMETRY */\r\n\r\n    /**\r\n     * Set or update the Mesh {@link Geometry}\r\n     * @param geometry - new {@link Geometry} to use\r\n     */\r\n    useGeometry(geometry: Geometry) {\r\n      if (this.geometry) {\r\n        // compute right away to compare geometries\r\n        if (geometry.shouldCompute) {\r\n          geometry.computeGeometry()\r\n        }\r\n\r\n        if (this.geometry.layoutCacheKey !== geometry.layoutCacheKey) {\r\n          throwWarning(\r\n            `${this.options.label} (${this.type}): the current and new geometries do not have the same vertexBuffers layout, causing a probable pipeline recompilation. This should be avoided.\\n\\nCurrent geometry layout:\\n\\n${this.geometry.wgslStructFragment}\\n\\n--------\\n\\nNew geometry layout:\\n\\n${geometry.wgslStructFragment}`\r\n          )\r\n\r\n          this.material.setAttributesFromGeometry(geometry)\r\n          this.material.setPipelineEntry()\r\n        }\r\n\r\n        this.geometry.consumers.delete(this.uuid)\r\n      }\r\n\r\n      this.geometry = geometry\r\n      this.geometry.consumers.add(this.uuid)\r\n\r\n      this.computeGeometry()\r\n\r\n      if (this.material) {\r\n        const renderingOptions = {\r\n          ...this.material.options.rendering,\r\n          ...{ verticesOrder: geometry.verticesOrder, topology: geometry.topology },\r\n        }\r\n\r\n        this.material.setRenderingOptions(renderingOptions)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Compute the Mesh geometry if needed\r\n     */\r\n    computeGeometry() {\r\n      if (this.geometry.shouldCompute) {\r\n        this.geometry.computeGeometry()\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Set our Mesh geometry: create buffers and add attributes to material\r\n     */\r\n    setGeometry() {\r\n      if (this.geometry) {\r\n        if (!this.geometry.ready) {\r\n          this.geometry.createBuffers({\r\n            renderer: this.renderer,\r\n            label: this.options.label + ' geometry',\r\n          })\r\n        }\r\n\r\n        this.setMaterialGeometryAttributes()\r\n      }\r\n    }\r\n\r\n    /* MATERIAL */\r\n\r\n    /**\r\n     * Set or update the {@link RenderMaterial} {@link types/Materials.RenderMaterialRenderingOptions | rendering options} to match the {@link RenderPass#descriptor | RenderPass descriptor} used to draw this Mesh.\r\n     * @param renderPass - {@link RenderPass | RenderPass} used to draw this Mesh, default to the {@link core/renderers/GPURenderer.GPURenderer#renderPass | renderer renderPass}.\r\n     */\r\n    setRenderingOptionsForRenderPass(renderPass: RenderPass) {\r\n      // a Mesh render material rendering options MUST match the render pass descriptor used to draw it!\r\n      const renderingOptions = {\r\n        // transparency (blend)\r\n        transparent: this.transparent,\r\n        // sample count\r\n        sampleCount: renderPass.options.sampleCount,\r\n        // color attachments\r\n        ...(renderPass.options.colorAttachments.length && {\r\n          targets: renderPass.options.colorAttachments.map((colorAttachment, index) => {\r\n            return {\r\n              // patch format...\r\n              format: colorAttachment.targetFormat,\r\n              // ...but keep original blend values if any\r\n              ...(this.options.targets?.length &&\r\n                this.options.targets[index] &&\r\n                this.options.targets[index].blend && {\r\n                  blend: this.options.targets[index].blend,\r\n                }),\r\n            }\r\n          }),\r\n        }),\r\n        // depth\r\n        depth: renderPass.options.useDepth,\r\n        ...(renderPass.options.useDepth && {\r\n          depthFormat: renderPass.options.depthFormat,\r\n        }),\r\n      }\r\n\r\n      this.material?.setRenderingOptions(renderingOptions)\r\n    }\r\n\r\n    /**\r\n     * Hook used to clean up parameters before sending them to the {@link RenderMaterial}.\r\n     * @param parameters - parameters to clean before sending them to the {@link RenderMaterial}\r\n     * @returns - cleaned parameters\r\n     */\r\n    cleanupRenderMaterialParameters(parameters: MeshBaseRenderParams): MeshBaseRenderParams {\r\n      // patch and set options, return mesh parameters\r\n      delete parameters.texturesOptions\r\n      delete parameters.outputTarget\r\n      delete parameters.autoRender\r\n\r\n      return parameters\r\n    }\r\n\r\n    /**\r\n     * Set or update the Mesh {@link RenderMaterial}\r\n     * @param material - new {@link RenderMaterial} to use\r\n     */\r\n    useMaterial(material: RenderMaterial) {\r\n      this.material = material\r\n\r\n      // update transparent property\r\n      this.transparent = this.material.options.rendering.transparent\r\n\r\n      // add eventual textures passed as parameters\r\n      this.material.options.domTextures\r\n        ?.filter((texture) => texture instanceof DOMTexture)\r\n        .forEach((texture) => this.onDOMTextureAdded(texture))\r\n    }\r\n\r\n    /**\r\n     * Patch the shaders if needed, then set the Mesh material\r\n     * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}\r\n     */\r\n    setMaterial(meshParameters: RenderMaterialParams) {\r\n      this.setShaders()\r\n      meshParameters.shaders = this.options.shaders\r\n      meshParameters.label = meshParameters.label + ' material'\r\n\r\n      this.useMaterial(new RenderMaterial(this.renderer, meshParameters))\r\n    }\r\n\r\n    /**\r\n     * Set Mesh material attributes\r\n     */\r\n    setMaterialGeometryAttributes() {\r\n      if (this.material && !this.material.attributes) {\r\n        this.material.setAttributesFromGeometry(this.geometry)\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get the transparent property value\r\n     */\r\n    get transparent(): boolean | undefined {\r\n      return this._transparent\r\n    }\r\n\r\n    /**\r\n     * Set the transparent property value. Update the {@link RenderMaterial} rendering options and {@link core/scenes/Scene.Scene | Scene} stack if needed.\r\n     * @param value\r\n     */\r\n    set transparent(value: boolean) {\r\n      const switchTransparency = this.transparent !== undefined && value !== this.transparent\r\n\r\n      if (switchTransparency) {\r\n        this.removeFromScene()\r\n      }\r\n\r\n      this._transparent = value\r\n\r\n      if (switchTransparency) {\r\n        this.addToScene()\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get the visible property value\r\n     */\r\n    get visible(): boolean {\r\n      return this._visible\r\n    }\r\n\r\n    /**\r\n     * Set the visible property value\r\n     * @param value - new visibility value\r\n     */\r\n    set visible(value: boolean) {\r\n      this._visible = value\r\n    }\r\n\r\n    /* TEXTURES */\r\n\r\n    /**\r\n     * Get our {@link RenderMaterial#domTextures | RenderMaterial domTextures array}\r\n     * @readonly\r\n     */\r\n    get domTextures(): DOMTexture[] {\r\n      return this.material?.domTextures || []\r\n    }\r\n\r\n    /**\r\n     * Get our {@link RenderMaterial#textures | RenderMaterial textures array}\r\n     * @readonly\r\n     */\r\n    get textures(): Texture[] {\r\n      return this.material?.textures || []\r\n    }\r\n\r\n    /**\r\n     * Create a new {@link DOMTexture}\r\n     * @param options - {@link DOMTextureParams | DOMTexture parameters}\r\n     * @returns - newly created {@link DOMTexture}\r\n     */\r\n    createDOMTexture(options: DOMTextureParams): DOMTexture {\r\n      if (!options.name) {\r\n        options.name = 'texture' + (this.textures.length + this.domTextures.length)\r\n      }\r\n\r\n      if (!options.label) {\r\n        options.label = this.options.label + ' ' + options.name\r\n      }\r\n\r\n      const domTexture = new DOMTexture(this.renderer, { ...options, ...this.options.texturesOptions })\r\n\r\n      this.addDOMTexture(domTexture)\r\n\r\n      return domTexture\r\n    }\r\n\r\n    /**\r\n     * Add a {@link DOMTexture}\r\n     * @param domTexture - {@link DOMTexture} to add\r\n     */\r\n    addDOMTexture(domTexture: DOMTexture) {\r\n      this.material.addTexture(domTexture)\r\n      this.onDOMTextureAdded(domTexture)\r\n    }\r\n\r\n    /**\r\n     * Callback run when a new {@link DOMTexture} has been added\r\n     * @param domTexture - newly created DOMTexture\r\n     */\r\n    onDOMTextureAdded(domTexture: DOMTexture) {\r\n      domTexture.parentMesh = this as unknown as DOMTextureParent\r\n    }\r\n\r\n    /**\r\n     * Create a new {@link Texture}\r\n     * @param  options - {@link TextureParams | Texture parameters}\r\n     * @returns - newly created {@link Texture}\r\n     */\r\n    createTexture(options: TextureParams): Texture {\r\n      if (!options.name) {\r\n        options.name = 'texture' + (this.textures.length + this.domTextures.length)\r\n      }\r\n\r\n      const texture = new Texture(this.renderer, options)\r\n\r\n      this.addTexture(texture)\r\n\r\n      return texture\r\n    }\r\n\r\n    /**\r\n     * Add a {@link Texture}\r\n     * @param texture - {@link Texture} to add\r\n     */\r\n    addTexture(texture: Texture) {\r\n      this.material.addTexture(texture)\r\n    }\r\n\r\n    /* BINDINGS */\r\n\r\n    /**\r\n     * Get the current {@link RenderMaterial} uniforms\r\n     * @readonly\r\n     */\r\n    get uniforms(): Material['uniforms'] {\r\n      return this.material?.uniforms\r\n    }\r\n\r\n    /**\r\n     * Get the current {@link RenderMaterial} storages\r\n     * @readonly\r\n     */\r\n    get storages(): Material['storages'] {\r\n      return this.material?.storages\r\n    }\r\n\r\n    /* RESIZE */\r\n\r\n    /**\r\n     * Resize the Mesh's textures\r\n     * @param boundingRect\r\n     */\r\n    resize(boundingRect?: DOMElementBoundingRect | null) {\r\n      // @ts-ignore\r\n      if (super.resize) {\r\n        // @ts-ignore\r\n        super.resize(boundingRect)\r\n      }\r\n\r\n      this.textures?.forEach((texture) => {\r\n        // copy from original textures again if needed\r\n        if (texture.options.fromTexture) {\r\n          texture.copy(texture.options.fromTexture)\r\n        }\r\n      })\r\n\r\n      // resize textures\r\n      this.domTextures?.forEach((texture) => {\r\n        texture.resize()\r\n      })\r\n\r\n      this._onAfterResizeCallback && this._onAfterResizeCallback()\r\n    }\r\n\r\n    /* EVENTS */\r\n\r\n    /**\r\n     * Callback to execute when a Mesh is ready - i.e. its {@link material} and {@link geometry} are ready.\r\n     * @param callback - callback to run when {@link MeshBase} is ready\r\n     * @returns - our Mesh\r\n     */\r\n    onReady(callback: () => void): MeshBase | ProjectedMeshBaseClass {\r\n      if (callback) {\r\n        this._onReadyCallback = callback\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * Callback to execute before updating the {@link core/scenes/Scene.Scene | Scene} matrix stack. This means it is called early and allows to update transformations values before actually setting the Mesh matrices (if any). This also means it won't be called if the Mesh has not been added to the {@link core/scenes/Scene.Scene | Scene}. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\r\n     * @param callback - callback to run just before updating the {@link core/scenes/Scene.Scene | Scene} matrix stack.\r\n     * @returns - our Mesh\r\n     */\r\n    onBeforeRender(callback: () => void): MeshBase | ProjectedMeshBaseClass {\r\n      if (callback) {\r\n        this._onBeforeRenderCallback = callback\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * Callback to execute right before actually rendering the Mesh. Useful to update uniforms for example. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\r\n     * @param callback - callback to run just before rendering the {@link MeshBase}\r\n     * @returns - our Mesh\r\n     */\r\n    onRender(callback: () => void): MeshBase | ProjectedMeshBaseClass {\r\n      if (callback) {\r\n        this._onRenderCallback = callback\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * Callback to execute just after a Mesh has been rendered. The callback won't be called if the {@link Renderer} is not ready or the Mesh itself is neither {@link ready} nor {@link visible}.\r\n     * @param callback - callback to run just after {@link MeshBase} has been rendered\r\n     * @returns - our Mesh\r\n     */\r\n    onAfterRender(callback: () => void): MeshBase | ProjectedMeshBaseClass {\r\n      if (callback) {\r\n        this._onAfterRenderCallback = callback\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * Callback to execute just after a Mesh has been resized.\r\n     * @param callback - callback to run just after {@link MeshBase} has been resized\r\n     * @returns - our Mesh\r\n     */\r\n    onAfterResize(callback: () => void): MeshBase | ProjectedMeshBaseClass {\r\n      if (callback) {\r\n        this._onAfterResizeCallback = callback\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    /* RENDER */\r\n\r\n    /**\r\n     * Execute {@link onBeforeRender} callback if needed. Called by the {@link core/scenes/Scene.Scene | Scene} before updating the matrix stack.\r\n     */\r\n    onBeforeRenderScene() {\r\n      if (!this.renderer.ready || !this.ready || !this.visible) return\r\n\r\n      this._onBeforeRenderCallback && this._onBeforeRenderCallback()\r\n    }\r\n\r\n    /**\r\n     * Called before rendering the Mesh\r\n     * Set the geometry if needed (create buffers and add attributes to the {@link RenderMaterial})\r\n     * Then executes {@link RenderMaterial#onBeforeRender}: create its bind groups and pipeline if needed and eventually update its bindings\r\n     */\r\n    onBeforeRenderPass() {\r\n      if (!this.renderer.ready) return\r\n\r\n      this.ready = this.material && this.material.ready && this.geometry && this.geometry.ready\r\n\r\n      this.setGeometry()\r\n\r\n      this.material.onBeforeRender()\r\n    }\r\n\r\n    /**\r\n     * Render our {@link MeshBase} if the {@link RenderMaterial} is ready\r\n     * @param pass - current render pass encoder\r\n     */\r\n    onRenderPass(pass: GPURenderPassEncoder) {\r\n      if (!this.ready) return\r\n\r\n      this._onRenderCallback && this._onRenderCallback()\r\n\r\n      // render ou material\r\n      this.material.render(pass)\r\n      // then render our geometry\r\n      this.geometry.render(pass)\r\n    }\r\n\r\n    /**\r\n     * Called after having rendered the Mesh\r\n     */\r\n    onAfterRenderPass() {\r\n      this._onAfterRenderCallback && this._onAfterRenderCallback()\r\n    }\r\n\r\n    /**\r\n     * Render our Mesh\r\n     * - Execute {@link onBeforeRenderPass}\r\n     * - Stop here if {@link Renderer} is not ready or Mesh is not {@link visible}\r\n     * - Execute super render call if it exists\r\n     * - {@link onRenderPass | render} our {@link material} and {@link geometry}\r\n     * - Execute {@link onAfterRenderPass}\r\n     * @param pass - current render pass encoder\r\n     */\r\n    render(pass: GPURenderPassEncoder) {\r\n      this.onBeforeRenderPass()\r\n\r\n      // no point to render if the WebGPU device is not ready\r\n      if (!this.renderer.ready || !this.visible) return\r\n\r\n      // @ts-ignore\r\n      if (super.render) {\r\n        // @ts-ignore\r\n        super.render()\r\n      }\r\n\r\n      !this.renderer.production && pass.pushDebugGroup(this.options.label)\r\n\r\n      this.onRenderPass(pass)\r\n\r\n      !this.renderer.production && pass.popDebugGroup()\r\n\r\n      this.onAfterRenderPass()\r\n    }\r\n\r\n    /* DESTROY */\r\n\r\n    /**\r\n     * Remove the Mesh from the {@link core/scenes/Scene.Scene | Scene} and destroy it\r\n     */\r\n    remove() {\r\n      this.removeFromScene(true)\r\n      this.destroy()\r\n\r\n      // if the renderer does not contain any meshes any more\r\n      // clear it\r\n      if (!this.renderer.meshes.length) {\r\n        this.renderer.onBeforeRenderScene.add(\r\n          (commandEncoder) => {\r\n            this.renderer.forceClear(commandEncoder)\r\n          },\r\n          { once: true }\r\n        )\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Destroy the Mesh\r\n     */\r\n    destroy() {\r\n      // @ts-ignore\r\n      if (super.destroy) {\r\n        // @ts-ignore\r\n        super.destroy()\r\n      }\r\n\r\n      this.material?.destroy()\r\n\r\n      // destroy geometry and remove buffers from device cache\r\n      this.geometry.consumers.delete(this.uuid)\r\n      if (!this.geometry.consumers.size) {\r\n        this.geometry?.destroy(this.renderer)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { MeshBaseMixin }\r\n","import { PlaneGeometry } from '../core/geometries/PlaneGeometry'\n\n/**\n * Used to cache {@link PlaneGeometry} and avoid as many large array computations as possible.<br>\n * Could be improved to handle other caches.\n */\nexport class CacheManager {\n  /** Array of cached {@link PlaneGeometry} */\n  planeGeometries: PlaneGeometry[]\n\n  /**\n   * CacheManager constructor\n   */\n  constructor() {\n    this.planeGeometries = []\n  }\n\n  /**\n   * Check if a given {@link PlaneGeometry} is already cached based on its {@link PlaneGeometry#definition.id | definition id}\n   * @param planeGeometry - {@link PlaneGeometry} to check\n   * @returns - {@link PlaneGeometry} found or null if not found\n   */\n  getPlaneGeometry(planeGeometry: PlaneGeometry): PlaneGeometry | null {\n    return this.planeGeometries.find((element) => element.definition.id === planeGeometry.definition.id)\n  }\n\n  /**\n   * Check if a given {@link PlaneGeometry} is already cached based on its {@link PlaneGeometry#definition | definition id}\n   * @param planeGeometryID - {@link PlaneGeometry#definition.id | PlaneGeometry definition id}\n   * @returns - {@link PlaneGeometry} found or null if not found\n   */\n  getPlaneGeometryByID(planeGeometryID: number): PlaneGeometry | null {\n    return this.planeGeometries.find((element) => element.definition.id === planeGeometryID)\n  }\n\n  /**\n   * Add a {@link PlaneGeometry} to our cache {@link planeGeometries} array\n   * @param planeGeometry\n   */\n  addPlaneGeometry(planeGeometry: PlaneGeometry) {\n    this.planeGeometries.push(planeGeometry)\n  }\n\n  /**\n   * Destroy our {@link CacheManager}\n   */\n  destroy() {\n    this.planeGeometries = []\n  }\n}\n\n/** @exports @const cacheManager - {@link CacheManager} class object */\nexport const cacheManager = new CacheManager() as CacheManager\n","import { MeshBaseMixin, MeshBaseRenderParams } from './mixins/MeshBaseMixin'\r\nimport { isRenderer, Renderer } from '../renderers/utils'\r\nimport { PlaneGeometry } from '../geometries/PlaneGeometry'\r\nimport { DOMElementBoundingRect, RectBBox } from '../DOM/DOMElement'\r\nimport { Vec2 } from '../../math/Vec2'\r\nimport { cacheManager } from '../../utils/CacheManager'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { BufferBindingParams } from '../bindings/BufferBinding'\r\n\r\n/**\r\n * Create a 1x1 quad (or plane) covering the full viewport, useful for postprocessing or background effects.\r\n *\r\n * It consists of a {@link PlaneGeometry} and {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial} and a few utilities method to help create {@link core/textures/DOMTexture.DOMTexture | DOMTexture} and {@link core/textures/Texture.Texture | Texture}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a fullscreen plane\r\n * const fullscreenPlane = new FullscreenPlane(gpuCurtains, {\r\n *   label: 'My fullscreen plane',\r\n *   shaders: {\r\n *     fragment: {\r\n *       code: fragmentCode, // assume it is a valid WGSL fragment shader\r\n *     },\r\n *   },\r\n * })\r\n * ```\r\n */\r\nexport class FullscreenPlane extends MeshBaseMixin(class {}) {\r\n  /** The type of the {@link FullscreenPlane} */\r\n  type: string\r\n  /** Object defining the  {@link FullscreenPlane} size */\r\n  size: {\r\n    /** document HTML size */\r\n    document: RectBBox\r\n  }\r\n\r\n  /**\r\n   * FullscreenPlane constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link FullscreenPlane}\r\n   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link FullscreenPlane}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters = {} as MeshBaseRenderParams) {\r\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' FullscreenQuadMesh' : 'FullscreenQuadMesh')\r\n\r\n    // can we get a cached geometry?\r\n    let geometry = cacheManager.getPlaneGeometryByID(2) // 1 * 1 + 1\r\n\r\n    if (!geometry) {\r\n      // we need to create a new plane geometry\r\n      geometry = new PlaneGeometry({ widthSegments: 1, heightSegments: 1 })\r\n      cacheManager.addPlaneGeometry(geometry)\r\n    }\r\n\r\n    // no vertex shader? patch uniforms/storages visibility\r\n    if (!parameters.shaders || !parameters.shaders.vertex) {\r\n      ;['uniforms', 'storages'].forEach((bindingType) => {\r\n        Object.values(parameters[bindingType] ?? {}).forEach(\r\n          (binding: BufferBindingParams) => (binding.visibility = ['fragment'])\r\n        )\r\n      })\r\n    }\r\n\r\n    // we don't want to write to the depth buffer for fullscreen quads\r\n    parameters.depthWriteEnabled = false\r\n    if (!parameters.label) {\r\n      parameters.label = 'FullscreenQuadMesh'\r\n    }\r\n\r\n    // @ts-ignore\r\n    super(renderer, null, { geometry, ...parameters })\r\n\r\n    this.size = {\r\n      document: {\r\n        width: this.renderer.boundingRect.width,\r\n        height: this.renderer.boundingRect.height,\r\n        top: this.renderer.boundingRect.top,\r\n        left: this.renderer.boundingRect.left,\r\n      },\r\n    }\r\n\r\n    this.type = 'FullscreenQuadMesh'\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link FullscreenPlane}\r\n   * @param boundingRect - the new bounding rectangle\r\n   */\r\n  resize(boundingRect: DOMElementBoundingRect | null = null) {\r\n    this.size.document = boundingRect ?? this.renderer.boundingRect\r\n\r\n    super.resize(boundingRect)\r\n  }\r\n\r\n  /**\r\n   * Take the pointer {@link Vec2 | vector} position relative to the document and returns it relative to our {@link FullscreenPlane}\r\n   * It ranges from -1 to 1 on both axis\r\n   * @param mouseCoords - pointer {@link Vec2 | vector} coordinates\r\n   * @returns - the mapped {@link Vec2 | vector} coordinates in the [-1, 1] range\r\n   */\r\n  mouseToPlaneCoords(mouseCoords: Vec2 = new Vec2()): Vec2 {\r\n    // mouse position conversion from document to plane space\r\n    return new Vec2(\r\n      ((mouseCoords.x - this.size.document.left) / this.size.document.width) * 2 - 1,\r\n      1 - ((mouseCoords.y - this.size.document.top) / this.size.document.height) * 2\r\n    )\r\n  }\r\n}\r\n","import { Mat4 } from './Mat4'\r\n\r\n/**\r\n * Basic 3x3 matrix class used for matrix calculations.\r\n *\r\n * Note that like three.js, the constructor and {@link set} method take arguments in row-major order, while internally they are stored in the {@link elements} array in column-major order.\r\n *\r\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix3.js\r\n * @see http://glmatrix.net/docs/mat3.js.html\r\n */\r\nexport class Mat3 {\r\n  /** The type of the {@link Mat3} */\r\n  type: string\r\n  /** Our matrix array */\r\n  elements: Float32Array\r\n\r\n  // prettier-ignore\r\n  /**\r\n   * Mat3 constructor\r\n   * @param elements - initial array to use, default to identity matrix\r\n   */\r\n  constructor(elements: Float32Array = new Float32Array([\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n  ])) {\r\n    this.type = 'Mat3'\r\n    this.elements = elements\r\n  }\r\n\r\n  /**\r\n   * Sets the matrix from 9 numbers\r\n   *\r\n   * @param n11 - number\r\n   * @param n12 - number\r\n   * @param n13 - number\r\n   * @param n21 - number\r\n   * @param n22 - number\r\n   * @param n23 - number\r\n   * @param n31 - number\r\n   * @param n32 - number\r\n   * @param n33 - number\r\n   * @returns - this {@link Mat3} after being set\r\n   */\r\n  set(\r\n    n11: number,\r\n    n12: number,\r\n    n13: number,\r\n    n21: number,\r\n    n22: number,\r\n    n23: number,\r\n    n31: number,\r\n    n32: number,\r\n    n33: number\r\n  ): Mat3 {\r\n    const te = this.elements\r\n\r\n    te[0] = n11\r\n    te[1] = n21\r\n    te[2] = n31\r\n    te[3] = n12\r\n    te[4] = n22\r\n    te[5] = n32\r\n    te[6] = n13\r\n    te[7] = n23\r\n    te[8] = n33\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Sets the {@link Mat3} to an identity matrix\r\n   * @returns - this {@link Mat3} after being set\r\n   */\r\n  identity(): Mat3 {\r\n    this.set(1, 0, 0, 0, 1, 0, 0, 0, 1)\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Sets the {@link Mat3} values from an array\r\n   * @param array - array to use\r\n   * @returns - this {@link Mat3} after being set\r\n   */\r\n  // prettier-ignore\r\n  setFromArray(array: Float32Array | number[] = new Float32Array([\r\n    1, 0, 0,\r\n    0, 1, 0,\r\n    0, 0, 1,\r\n  ])): Mat3 {\r\n    for (let i = 0; i < this.elements.length; i++) {\r\n      this.elements[i] = array[i]\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Copy another {@link Mat3}\r\n   * @param matrix - matrix to copy\r\n   * @returns - this {@link Mat3} after being set\r\n   */\r\n  copy(matrix: Mat3 = new Mat3()): Mat3 {\r\n    const array = matrix.elements\r\n    this.elements[0] = array[0]\r\n    this.elements[1] = array[1]\r\n    this.elements[2] = array[2]\r\n    this.elements[3] = array[3]\r\n    this.elements[4] = array[4]\r\n    this.elements[5] = array[5]\r\n    this.elements[6] = array[6]\r\n    this.elements[7] = array[7]\r\n    this.elements[8] = array[8]\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Clone a {@link Mat3}\r\n   * @returns - cloned {@link Mat3}\r\n   */\r\n  clone(): Mat3 {\r\n    return new Mat3().copy(this)\r\n  }\r\n\r\n  /**\r\n   * Set a {@link Mat3} from a {@link Mat4}.\r\n   * @param matrix - {@link Mat4} to use.\r\n   * @returns - this {@link Mat3} after being set.\r\n   */\r\n  setFromMat4(matrix: Mat4 = new Mat4()) {\r\n    const me = matrix.elements\r\n\r\n    this.set(me[0], me[4], me[8], me[1], me[5], me[9], me[2], me[6], me[10])\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Multiply this {@link Mat3} with another {@link Mat3}\r\n   * @param matrix - {@link Mat3} to multiply with\r\n   * @returns - this {@link Mat3} after multiplication\r\n   */\r\n  multiply(matrix: Mat3 = new Mat3()): Mat3 {\r\n    return this.multiplyMatrices(this, matrix)\r\n  }\r\n\r\n  /**\r\n   * Multiply another {@link Mat3} with this {@link Mat3}\r\n   * @param matrix - {@link Mat3} to multiply with\r\n   * @returns - this {@link Mat3} after multiplication\r\n   */\r\n  premultiply(matrix: Mat3 = new Mat3()): Mat3 {\r\n    return this.multiplyMatrices(matrix, this)\r\n  }\r\n\r\n  /**\r\n   * Multiply two {@link Mat3}\r\n   * @param a - first {@link Mat3}\r\n   * @param b - second {@link Mat3}\r\n   * @returns - {@link Mat3} resulting from the multiplication\r\n   */\r\n  multiplyMatrices(a: Mat3 = new Mat3(), b: Mat3 = new Mat3()): Mat3 {\r\n    const ae = a.elements\r\n    const be = b.elements\r\n    const te = this.elements\r\n\r\n    const a11 = ae[0],\r\n      a12 = ae[3],\r\n      a13 = ae[6]\r\n    const a21 = ae[1],\r\n      a22 = ae[4],\r\n      a23 = ae[7]\r\n    const a31 = ae[2],\r\n      a32 = ae[5],\r\n      a33 = ae[8]\r\n\r\n    const b11 = be[0],\r\n      b12 = be[3],\r\n      b13 = be[6]\r\n    const b21 = be[1],\r\n      b22 = be[4],\r\n      b23 = be[7]\r\n    const b31 = be[2],\r\n      b32 = be[5],\r\n      b33 = be[8]\r\n\r\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31\r\n    te[3] = a11 * b12 + a12 * b22 + a13 * b32\r\n    te[6] = a11 * b13 + a12 * b23 + a13 * b33\r\n\r\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31\r\n    te[4] = a21 * b12 + a22 * b22 + a23 * b32\r\n    te[7] = a21 * b13 + a22 * b23 + a23 * b33\r\n\r\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31\r\n    te[5] = a31 * b12 + a32 * b22 + a33 * b32\r\n    te[8] = a31 * b13 + a32 * b23 + a33 * b33\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Invert this {@link Mat3}.\r\n   * @returns - this {@link Mat3} after being inverted\r\n   */\r\n  invert(): Mat3 {\r\n    const te = this.elements,\r\n      n11 = te[0],\r\n      n21 = te[1],\r\n      n31 = te[2],\r\n      n12 = te[3],\r\n      n22 = te[4],\r\n      n32 = te[5],\r\n      n13 = te[6],\r\n      n23 = te[7],\r\n      n33 = te[8],\r\n      t11 = n33 * n22 - n32 * n23,\r\n      t12 = n32 * n13 - n33 * n12,\r\n      t13 = n23 * n12 - n22 * n13,\r\n      det = n11 * t11 + n21 * t12 + n31 * t13\r\n\r\n    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0)\r\n\r\n    const detInv = 1 / det\r\n\r\n    te[0] = t11 * detInv\r\n    te[1] = (n31 * n23 - n33 * n21) * detInv\r\n    te[2] = (n32 * n21 - n31 * n22) * detInv\r\n\r\n    te[3] = t12 * detInv\r\n    te[4] = (n33 * n11 - n31 * n13) * detInv\r\n    te[5] = (n31 * n12 - n32 * n11) * detInv\r\n\r\n    te[6] = t13 * detInv\r\n    te[7] = (n21 * n13 - n23 * n11) * detInv\r\n    te[8] = (n22 * n11 - n21 * n12) * detInv\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Transpose this {@link Mat3}.\r\n   * @returns - this {@link Mat3} after being transposed\r\n   */\r\n  transpose(): Mat3 {\r\n    let tmp\r\n    const m = this.elements\r\n\r\n    tmp = m[1]\r\n    m[1] = m[3]\r\n    m[3] = tmp\r\n    tmp = m[2]\r\n    m[2] = m[6]\r\n    m[6] = tmp\r\n    tmp = m[5]\r\n    m[5] = m[7]\r\n    m[7] = tmp\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Compute a normal {@link Mat3} matrix from a {@link Mat4} transformation matrix.\r\n   * @param matrix - {@link Mat4} transformation matrix\r\n   * @returns - this {@link Mat3} after being inverted and transposed\r\n   */\r\n  getNormalMatrix(matrix: Mat4 = new Mat4()): Mat3 {\r\n    return this.setFromMat4(matrix).invert().transpose()\r\n  }\r\n}\r\n","import { Object3D, Object3DMatricesType, Object3DTransformMatrix } from './Object3D'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { CameraRenderer, isCameraRenderer } from '../renderers/utils'\nimport { Mat4 } from '../../math/Mat4'\nimport { Camera } from '../camera/Camera'\nimport { Mat3 } from '../../math/Mat3'\n\n/**\n * Defines an {@link Object3D} normal matrix object\n */\nexport interface Object3DNormalMatrix {\n  /** The {@link Mat3} matrix used */\n  matrix: Mat3\n  /** Whether we should update the {@link Mat3} matrix */\n  shouldUpdate: boolean\n  /** Function to update our {@link Mat3} matrix */\n  onUpdate: () => void\n}\n\n/** Defines all kind of possible {@link ProjectedObject3D} matrix types */\nexport type ProjectedObject3DMatricesType = Object3DMatricesType | 'modelView' | 'modelViewProjection'\n/** Defines the special {@link ProjectedObject3D} normal matrix type */\nexport type ProjectedObject3DNormalMatrix = Record<'normal', Object3DNormalMatrix>\n\n/** Defines all possible {@link Object3DTransformMatrix | matrix object} used by our {@link ProjectedObject3D} */\nexport type ProjectedObject3DMatrices =\n  | Record<ProjectedObject3DMatricesType, Object3DTransformMatrix> & ProjectedObject3DNormalMatrix\n\n/**\n * Used to apply the {@link Camera#projectionMatrix | projection} and {@link Camera#viewMatrix | view} matrices of a {@link Camera} to an {@link Object3D}, in order to compute {@link ProjectedObject3D#modelViewMatrix | modelView} and {@link ProjectedObject3D#modelViewProjectionMatrix | modelViewProjection} matrices.\n */\nexport class ProjectedObject3D extends Object3D {\n  /** {@link Camera | Camera} object used to compute {@link ProjectedObject3D#modelViewMatrix | model view} and {@link ProjectedObject3D#modelViewProjectionMatrix | model view projection} matrices */\n  camera: Camera\n\n  /** {@link ProjectedObject3DMatrices | Matrices object} of the {@link ProjectedObject3D} */\n  matrices: ProjectedObject3DMatrices\n\n  /**\n   * ProjectedObject3D constructor\n   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link ProjectedObject3D}\n   */\n  constructor(renderer: CameraRenderer | GPUCurtains) {\n    super()\n\n    renderer = isCameraRenderer(renderer, 'ProjectedObject3D')\n\n    this.camera = renderer.camera\n  }\n\n  /**\n   * Tell our projection matrix stack to update\n   */\n  applyPosition() {\n    super.applyPosition()\n    this.shouldUpdateProjectionMatrixStack()\n  }\n\n  /**\n   * Tell our projection matrix stack to update\n   */\n  applyRotation() {\n    super.applyRotation()\n    this.shouldUpdateProjectionMatrixStack()\n  }\n\n  /**\n   * Tell our projection matrix stack to update\n   */\n  applyScale() {\n    super.applyScale()\n    this.shouldUpdateProjectionMatrixStack()\n  }\n\n  /**\n   * Tell our projection matrix stack to update\n   */\n  applyTransformOrigin() {\n    super.applyTransformOrigin()\n    this.shouldUpdateProjectionMatrixStack()\n  }\n\n  /**\n   * Set our transform and projection matrices\n   */\n  setMatrices() {\n    super.setMatrices()\n\n    this.matrices = {\n      ...this.matrices,\n      modelView: {\n        matrix: new Mat4(),\n        shouldUpdate: true,\n        onUpdate: () => {\n          // our model view matrix is our model matrix multiplied with our camera view matrix\n          this.modelViewMatrix.multiplyMatrices(this.viewMatrix, this.worldMatrix)\n        },\n      },\n      modelViewProjection: {\n        matrix: new Mat4(),\n        shouldUpdate: true,\n        onUpdate: () => {\n          //console.log(this.projectionMatrix.elements)\n          // our modelViewProjection matrix, useful for bounding box calculations and frustum culling\n          // this is the result of our projection matrix multiplied by our modelView matrix\n          this.modelViewProjectionMatrix.multiplyMatrices(this.projectionMatrix, this.modelViewMatrix)\n        },\n      },\n      normal: {\n        matrix: new Mat3(),\n        shouldUpdate: true,\n        onUpdate: () => {\n          // or normal matrix is the inverse transpose of the world matrix\n          this.normalMatrix.getNormalMatrix(this.worldMatrix)\n        },\n      },\n    }\n  }\n\n  /**\n   * Get our {@link modelViewMatrix | model view matrix}\n   */\n  get modelViewMatrix(): Mat4 {\n    return this.matrices.modelView.matrix\n  }\n\n  /**\n   * Set our {@link modelViewMatrix | model view matrix}\n   * @param value - new {@link modelViewMatrix | model view matrix}\n   */\n  set modelViewMatrix(value: Mat4) {\n    this.matrices.modelView.matrix = value\n    this.matrices.modelView.shouldUpdate = true\n  }\n\n  /**\n   * Get our {@link Camera#viewMatrix | camera view matrix}\n   * @readonly\n   */\n  get viewMatrix(): Mat4 {\n    return this.camera.viewMatrix\n  }\n\n  /**\n   * Get our {@link Camera#projectionMatrix | camera projection matrix}\n   * @readonly\n   */\n  get projectionMatrix(): Mat4 {\n    return this.camera.projectionMatrix\n  }\n\n  /**\n   * Get our {@link modelViewProjectionMatrix | model view projection matrix}\n   */\n  get modelViewProjectionMatrix(): Mat4 {\n    return this.matrices.modelViewProjection.matrix\n  }\n\n  /**\n   * Set our {@link modelViewProjectionMatrix | model view projection matrix}\n   * @param value - new {@link modelViewProjectionMatrix | model view projection matrix}s\n   */\n  set modelViewProjectionMatrix(value: Mat4) {\n    this.matrices.modelViewProjection.matrix = value\n    this.matrices.modelViewProjection.shouldUpdate = true\n  }\n\n  /**\n   * Get our {@link normalMatrix | normal matrix}\n   */\n  get normalMatrix(): Mat3 {\n    return this.matrices.normal.matrix\n  }\n\n  /**\n   * Set our {@link normalMatrix | normal matrix}\n   * @param value - new {@link normalMatrix | normal matrix}\n   */\n  set normalMatrix(value: Mat3) {\n    this.matrices.normal.matrix = value\n    this.matrices.normal.shouldUpdate = true\n  }\n\n  /**\n   * Set our projection matrices shouldUpdate flags to true (tell them to update)\n   */\n  shouldUpdateProjectionMatrixStack() {\n    this.matrices.modelView.shouldUpdate = true\n    this.matrices.modelViewProjection.shouldUpdate = true\n  }\n\n  /**\n   * When the world matrix update, tell our projection matrix to update as well\n   */\n  shouldUpdateWorldMatrix() {\n    super.shouldUpdateWorldMatrix()\n    this.shouldUpdateProjectionMatrixStack()\n    this.matrices.normal.shouldUpdate = true\n  }\n\n  /**\n   * Tell all our matrices to update\n   */\n  shouldUpdateMatrixStack() {\n    this.shouldUpdateModelMatrix()\n    this.shouldUpdateProjectionMatrixStack()\n  }\n}\n","export default /* wgsl */ `\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n  @location(1) normal: vec3f,\r\n};\r\n\r\n@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {\r\n  // normals\r\n  return vec4(normalize(fsInput.normal) * 0.5 + 0.5, 1.0);\r\n}`\r\n","import { CameraRenderer, isCameraRenderer } from '../../renderers/utils'\r\nimport { DOMFrustum } from '../../DOM/DOMFrustum'\r\nimport {\r\n  MeshBaseClass,\r\n  MeshBaseMixin,\r\n  MeshBaseOptions,\r\n  MeshBaseParams,\r\n  MeshBaseRenderParams,\r\n  MixinConstructor,\r\n} from './MeshBaseMixin'\r\nimport { GPUCurtains } from '../../../curtains/GPUCurtains'\r\nimport { DOMElementBoundingRect, RectCoords } from '../../DOM/DOMElement'\r\nimport { RenderMaterialParams, ShaderOptions } from '../../../types/Materials'\r\nimport { ProjectedObject3D } from '../../objects3D/ProjectedObject3D'\r\nimport default_projected_vsWgsl from '../../shaders/chunks/default_projected_vs.wgsl'\r\nimport default_normal_fsWgsl from '../../shaders/chunks/default_normal_fs.wgsl'\r\nimport { BufferBindingParams } from '../../bindings/BufferBinding'\r\nimport { Vec3 } from '../../../math/Vec3'\r\n\r\n/** Define all possible frustum culling checks. */\r\nexport type FrustumCullingCheck = 'OBB' | 'sphere' | boolean\r\n\r\n/**\r\n * Base parameters used to create a ProjectedMesh\r\n */\r\nexport interface ProjectedMeshBaseParams {\r\n  /** Frustum culling check to use. Accepts `OBB`, `sphere` or a boolean. Default to `OBB`. When set to `true`, `OBB` is used. */\r\n  frustumCulling?: FrustumCullingCheck\r\n  /** Margins (in pixels) to applied to the {@link ProjectedMeshBaseClass#domFrustum | DOM Frustum} to determine if this ProjectedMesh should be frustum culled or not */\r\n  DOMFrustumMargins?: RectCoords\r\n}\r\n\r\n/** Parameters used to create a ProjectedMesh */\r\nexport interface ProjectedMeshParameters extends MeshBaseParams, ProjectedMeshBaseParams {}\r\n\r\n/** Parameters used to create a Projected Render Material */\r\nexport interface ProjectedRenderMaterialParams extends RenderMaterialParams, ProjectedMeshBaseParams {}\r\n\r\n/** @const - Default ProjectedMesh parameters to merge with user defined parameters */\r\nconst defaultProjectedMeshParams: ProjectedMeshBaseParams = {\r\n  // frustum culling and visibility\r\n  frustumCulling: 'OBB',\r\n  DOMFrustumMargins: {\r\n    top: 0,\r\n    right: 0,\r\n    bottom: 0,\r\n    left: 0,\r\n  },\r\n}\r\n\r\n/** Base options used to create this ProjectedMesh */\r\nexport interface ProjectedMeshBaseOptions extends MeshBaseOptions, ProjectedMeshBaseParams {}\r\n\r\n/**\r\n * This class describes the properties and methods to set up a Projected Mesh (i.e. a basic {@link MeshBaseClass | Mesh} with {@link ProjectedObject3D} transformations matrices and a {@link core/camera/Camera.Camera | Camera} to use for projection), implemented in the {@link ProjectedMeshBaseMixin}:\r\n * - Handle the frustum culling (check if the {@link ProjectedObject3D} currently lies inside the {@link core/camera/Camera.Camera | Camera} frustum)\r\n * - Add callbacks for when the Mesh enters or leaves the {@link core/camera/Camera.Camera | Camera} frustum\r\n */\r\nexport declare class ProjectedMeshBaseClass extends MeshBaseClass {\r\n  /** The {@link CameraRenderer} used */\r\n  renderer: CameraRenderer\r\n  /** The ProjectedMesh {@link DOMFrustum} class object */\r\n  domFrustum: DOMFrustum\r\n  /** Frustum culling check to use. Accepts `OBB`, `sphere` or a boolean. Default to `OBB`. When set to `true`, `OBB` is used. */\r\n  frustumCulling: FrustumCullingCheck\r\n  /** Margins (in pixels) to applied to the {@link ProjectedMeshBaseClass#domFrustum | DOM Frustum} to determine if this ProjectedMesh should be frustum culled or not */\r\n  DOMFrustumMargins: RectCoords\r\n\r\n  /** Options used to create this {@link ProjectedMeshBaseClass} */\r\n  options: ProjectedMeshBaseOptions\r\n\r\n  // callbacks\r\n  /** function assigned to the {@link onReEnterView} callback */\r\n  _onReEnterViewCallback: () => void\r\n  /** function assigned to the {@link onLeaveView} callback */\r\n  _onLeaveViewCallback: () => void\r\n\r\n  /**\r\n   * {@link ProjectedMeshBaseClass} constructor\r\n   * @param renderer - our {@link CameraRenderer} class object\r\n   * @param element - a DOM HTML Element that can be bound to a Mesh\r\n   * @param parameters - {@link ProjectedMeshParameters | Projected Mesh base parameters}\r\n   */\r\n  constructor(renderer: CameraRenderer, element: HTMLElement | null, parameters: ProjectedMeshParameters)\r\n\r\n  /**\r\n   * Set default shaders if one or both of them are missing\r\n   */\r\n  setShaders(): void\r\n\r\n  /**\r\n   * Set a Mesh matrices uniforms inputs then call {@link MeshBaseClass} super method\r\n   * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}\r\n   */\r\n  setMaterial(meshParameters: ProjectedRenderMaterialParams): void\r\n\r\n  /**\r\n   * Get the visible property value\r\n   */\r\n  get visible(): boolean\r\n\r\n  /**\r\n   * Set the visible property value\r\n   * @param value - new visibility value\r\n   */\r\n  set visible(value: boolean)\r\n\r\n  /**\r\n   * Resize our Mesh\r\n   * @param boundingRect - the new bounding rectangle\r\n   */\r\n  resize(boundingRect: DOMElementBoundingRect | null): void\r\n\r\n  /**\r\n   * Apply scale and resize textures\r\n   */\r\n  applyScale(): void\r\n\r\n  /**\r\n   * Get our {@link DOMFrustum} projected bounding rectangle\r\n   * @readonly\r\n   */\r\n  get projectedBoundingRect(): DOMElementBoundingRect\r\n\r\n  /**\r\n   * Callback to execute when a Mesh is reentering the view frustum.\r\n   * @param callback - callback to run when {@link ProjectedMeshBaseClass} is reentering the view frustum\r\n   * @returns - our Mesh\r\n   */\r\n  onReEnterView: (callback: () => void) => ProjectedMeshBaseClass\r\n\r\n  /**\r\n   * Callback to execute when a Mesh is leaving the view frustum.\r\n   * @param callback - callback to run when {@link ProjectedMeshBaseClass} is leaving the view frustum\r\n   * @returns - our Mesh\r\n   */\r\n  onLeaveView: (callback: () => void) => ProjectedMeshBaseClass\r\n\r\n  /**\r\n   * Get the geometry bounding sphere in clip space.\r\n   * @readonly\r\n   */\r\n  get clipSpaceBoundingSphere(): {\r\n    /** Center of the bounding sphere. */\r\n    center: Vec3\r\n    /** Radius of the bounding sphere. */\r\n    radius: number\r\n  }\r\n\r\n  /**\r\n   * Check if the Mesh lies inside the {@link CameraRenderer#camera | camera} view frustum or not.\r\n   */\r\n  checkFrustumCulling(): void\r\n\r\n  /**\r\n   * Tell our matrices bindings to update if needed and call {@link MeshBaseClass#onBeforeRenderPass | Mesh base onBeforeRenderPass} super.\r\n   */\r\n  onBeforeRenderPass(): void\r\n\r\n  /**\r\n   * Only render the Mesh if it is in view frustum.\r\n   * Since render() is actually called before onRenderPass(), we are sure to have fresh frustum bounding rectangle values here.\r\n   * @param pass - current render pass\r\n   */\r\n  onRenderPass(pass: GPURenderPassEncoder): void\r\n}\r\n\r\n/**\r\n * Used to add the properties and methods defined in {@link ProjectedMeshBaseClass} to the {@link MeshBaseClass} and mix it with a given Base of type {@link ProjectedObject3D} or {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D}.\r\n * @exports\r\n * @param Base - the class to mix onto, should be of {@link ProjectedObject3D} or {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D} type\r\n * @returns - the mixed classes, creating a Projected Mesh.\r\n */\r\nfunction ProjectedMeshBaseMixin<TBase extends MixinConstructor<ProjectedObject3D>>(\r\n  Base: TBase\r\n): MixinConstructor<ProjectedMeshBaseClass> & TBase {\r\n  /**\r\n   * ProjectedMeshBase defines our base properties and methods\r\n   */\r\n  return class ProjectedMeshBase extends MeshBaseMixin(Base) {\r\n    /** The {@link CameraRenderer} used */\r\n    renderer: CameraRenderer\r\n    /** The ProjectedMesh {@link DOMFrustum} class object */\r\n    domFrustum: DOMFrustum\r\n    /** Frustum culling check to use. Accepts `OBB`, `sphere` or a boolean. Default to `OBB`. When set to `true`, `OBB` is used. */\r\n    frustumCulling: FrustumCullingCheck\r\n    /** Margins (in pixels) to applied to the {@link ProjectedMeshBaseClass#domFrustum | DOM Frustum} to determine if this ProjectedMesh should be frustum culled or not */\r\n    DOMFrustumMargins: RectCoords\r\n\r\n    /** Options used to create this {@link ProjectedMeshBaseClass} */\r\n    options: ProjectedMeshBaseOptions\r\n\r\n    // callbacks / events\r\n    /** function assigned to the {@link onReEnterView} callback */\r\n    _onReEnterViewCallback: () => void = () => {\r\n      /* allow empty callback */\r\n    }\r\n    /** function assigned to the {@link onLeaveView} callback */\r\n    _onLeaveViewCallback: () => void = () => {\r\n      /* allow empty callback */\r\n    }\r\n\r\n    /**\r\n     * ProjectedMeshBase constructor\r\n     *\r\n     * @typedef MeshBaseArrayParams\r\n     * @type {array}\r\n     * @property {(CameraRenderer|GPUCurtains)} 0 - our renderer class object\r\n     * @property {(string|HTMLElement|null)} 1 - the DOM HTML Element that can be bound to a Mesh\r\n     * @property {ProjectedMeshParameters} 2 - Projected Mesh parameters\r\n     *\r\n     * @param {MeshBaseArrayParams} params - our MeshBaseMixin parameters\r\n     */\r\n    constructor(...params: any[]) {\r\n      super(\r\n        params[0] as CameraRenderer | GPUCurtains,\r\n        params[1] as HTMLElement | string,\r\n        { ...defaultProjectedMeshParams, ...params[2], ...{ useProjection: true } } as ProjectedMeshParameters\r\n      )\r\n\r\n      let renderer = params[0]\r\n\r\n      // force this mesh to use projection!\r\n      const parameters = {\r\n        ...defaultProjectedMeshParams,\r\n        ...params[2],\r\n        ...{ useProjection: true },\r\n      } as ProjectedMeshParameters\r\n\r\n      this.type = 'MeshTransformed'\r\n\r\n      renderer = isCameraRenderer(renderer, parameters.label ? parameters.label + ' ' + this.type : this.type)\r\n\r\n      this.renderer = renderer\r\n\r\n      const { frustumCulling, DOMFrustumMargins } = parameters\r\n\r\n      this.options = {\r\n        ...(this.options ?? {}), // merge possible lower options?\r\n        frustumCulling,\r\n        DOMFrustumMargins,\r\n      }\r\n\r\n      this.setDOMFrustum()\r\n    }\r\n\r\n    /* SHADERS */\r\n\r\n    /**\r\n     * Set default shaders if one or both of them are missing\r\n     */\r\n    setShaders() {\r\n      const { shaders } = this.options\r\n\r\n      if (!shaders) {\r\n        this.options.shaders = {\r\n          vertex: {\r\n            code: default_projected_vsWgsl,\r\n            entryPoint: 'main',\r\n          },\r\n          fragment: {\r\n            code: default_normal_fsWgsl,\r\n            entryPoint: 'main',\r\n          },\r\n        }\r\n      } else {\r\n        if (!shaders.vertex || !shaders.vertex.code) {\r\n          shaders.vertex = {\r\n            code: default_projected_vsWgsl,\r\n            entryPoint: 'main',\r\n          }\r\n        }\r\n\r\n        if (shaders.fragment === undefined || (shaders.fragment && !(shaders.fragment as ShaderOptions).code)) {\r\n          shaders.fragment = {\r\n            code: default_normal_fsWgsl,\r\n            entryPoint: 'main',\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    /* GEOMETRY */\r\n\r\n    /**\r\n     * Set or update the Projected Mesh {@link Geometry}\r\n     * @param geometry - new {@link Geometry} to use\r\n     */\r\n    useGeometry(geometry) {\r\n      super.useGeometry(geometry)\r\n\r\n      // update DOM Frustum bounding box\r\n      if (this.domFrustum) {\r\n        this.domFrustum.boundingBox = this.geometry.boundingBox\r\n      }\r\n\r\n      // tell the model and projection matrices to update right away\r\n      this.shouldUpdateMatrixStack()\r\n    }\r\n\r\n    /**\r\n     * Set the Mesh frustum culling\r\n     */\r\n    setDOMFrustum() {\r\n      this.domFrustum = new DOMFrustum({\r\n        boundingBox: this.geometry?.boundingBox,\r\n        modelViewProjectionMatrix: this.modelViewProjectionMatrix,\r\n        containerBoundingRect: this.renderer.boundingRect,\r\n        DOMFrustumMargins: this.options.DOMFrustumMargins,\r\n        onReEnterView: () => {\r\n          this._onReEnterViewCallback && this._onReEnterViewCallback()\r\n        },\r\n        onLeaveView: () => {\r\n          this._onLeaveViewCallback && this._onLeaveViewCallback()\r\n        },\r\n      })\r\n\r\n      this.DOMFrustumMargins = this.domFrustum.DOMFrustumMargins\r\n      this.frustumCulling = this.options.frustumCulling\r\n    }\r\n\r\n    /* MATERIAL */\r\n\r\n    /**\r\n     * Hook used to clean up parameters before sending them to the material.\r\n     * @param parameters - parameters to clean before sending them to the {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}\r\n     * @returns - cleaned parameters\r\n     */\r\n    cleanupRenderMaterialParameters(parameters: ProjectedRenderMaterialParams): MeshBaseRenderParams {\r\n      // patch mesh parameters\r\n      delete parameters.frustumCulling\r\n      delete parameters.DOMFrustumMargins\r\n\r\n      super.cleanupRenderMaterialParameters(parameters)\r\n\r\n      return parameters\r\n    }\r\n\r\n    /**\r\n     * Set a Mesh matrices uniforms inputs then call {@link MeshBaseClass} super method\r\n     * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}\r\n     */\r\n    setMaterial(meshParameters: RenderMaterialParams) {\r\n      // add matrices uniforms\r\n      // https://threejs.org/docs/#api/en/renderers/webgl/WebGLProgram\r\n      // https://doc.babylonjs.com/features/featuresDeepDive/materials/shaders/introToShaders#built-in-variables\r\n      const matricesUniforms: BufferBindingParams = {\r\n        label: 'Matrices',\r\n        visibility: ['vertex'],\r\n        struct: {\r\n          model: {\r\n            type: 'mat4x4f',\r\n            value: this.worldMatrix,\r\n          },\r\n          modelView: {\r\n            // model view matrix (world matrix multiplied by camera view matrix)\r\n            type: 'mat4x4f',\r\n            value: this.modelViewMatrix,\r\n          },\r\n          normal: {\r\n            // normal matrix\r\n            type: 'mat3x3f',\r\n            value: this.normalMatrix,\r\n          },\r\n          // modelViewProjection: {\r\n          //   type: 'mat4x4f',\r\n          //   value: this.modelViewProjectionMatrix,\r\n          // },\r\n        },\r\n      }\r\n\r\n      if (!meshParameters.uniforms) meshParameters.uniforms = {}\r\n      meshParameters.uniforms = { matrices: matricesUniforms, ...meshParameters.uniforms }\r\n\r\n      super.setMaterial(meshParameters)\r\n    }\r\n\r\n    /**\r\n     * Get the visible property value\r\n     */\r\n    get visible(): boolean {\r\n      return this._visible\r\n    }\r\n\r\n    /**\r\n     * Set the visible property value\r\n     * @param value - new visibility value\r\n     */\r\n    set visible(value: boolean) {\r\n      this.shouldUpdateMatrixStack()\r\n      this._visible = value\r\n    }\r\n\r\n    /* SIZE & TRANSFORMS */\r\n\r\n    /**\r\n     * Resize our {@link ProjectedMeshBaseClass}\r\n     * @param boundingRect - the new bounding rectangle\r\n     */\r\n    resize(boundingRect?: DOMElementBoundingRect | null) {\r\n      if (this.domFrustum) this.domFrustum.setContainerBoundingRect(this.renderer.boundingRect)\r\n\r\n      super.resize(boundingRect)\r\n    }\r\n\r\n    /**\r\n     * Apply scale and resize textures\r\n     */\r\n    applyScale() {\r\n      super.applyScale()\r\n\r\n      // resize textures on scale change!\r\n      for (const texture of this.domTextures) {\r\n        texture.resize()\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Get our {@link DOMFrustum} projected bounding rectangle\r\n     * @readonly\r\n     */\r\n    get projectedBoundingRect(): DOMElementBoundingRect {\r\n      return this.domFrustum?.projectedBoundingRect\r\n    }\r\n\r\n    /* EVENTS */\r\n\r\n    /**\r\n     * Assign a callback function to _onReEnterViewCallback\r\n     * @param callback - callback to run when {@link ProjectedMeshBaseClass} is reentering the view frustum\r\n     * @returns - our Mesh\r\n     */\r\n    onReEnterView(callback: () => void): ProjectedMeshBaseClass {\r\n      if (callback) {\r\n        this._onReEnterViewCallback = callback\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    /**\r\n     * Assign a callback function to _onLeaveViewCallback\r\n     * @param callback - callback to run when {@link ProjectedMeshBaseClass} is leaving the view frustum\r\n     * @returns - our Mesh\r\n     */\r\n    onLeaveView(callback: () => void): ProjectedMeshBaseClass {\r\n      if (callback) {\r\n        this._onLeaveViewCallback = callback\r\n      }\r\n\r\n      return this\r\n    }\r\n\r\n    /* RENDER */\r\n\r\n    /**\r\n     * Get the geometry bounding sphere in clip space.\r\n     * @readonly\r\n     */\r\n    get clipSpaceBoundingSphere(): {\r\n      /** Center of the bounding sphere. */\r\n      center: Vec3\r\n      /** Radius of the bounding sphere. */\r\n      radius: number\r\n    } {\r\n      const { center, radius, min, max } = this.geometry.boundingBox\r\n\r\n      // get actual translation and max scale\r\n      const translation = this.worldMatrix.getTranslation()\r\n      const maxWorldRadius = radius * this.worldMatrix.getMaxScaleOnAxis()\r\n\r\n      // get the center on the back face\r\n      const cMin = center.clone().add(translation)\r\n      cMin.z += min.z\r\n\r\n      // get the center on the front face\r\n      const cMax = center.clone().add(translation)\r\n      cMax.z += max.z\r\n\r\n      // get a point on the back face sphere\r\n      // use Y because the projection is dependent of the Y axis\r\n      const sMin = cMin.clone()\r\n      sMin.y += maxWorldRadius\r\n\r\n      // get a point on the front face sphere\r\n      const sMax = cMax.clone()\r\n      sMax.y += maxWorldRadius\r\n\r\n      // apply view projection matrix\r\n      cMin.applyMat4(this.camera.viewProjectionMatrix)\r\n      cMax.applyMat4(this.camera.viewProjectionMatrix)\r\n      sMin.applyMat4(this.camera.viewProjectionMatrix)\r\n      sMax.applyMat4(this.camera.viewProjectionMatrix)\r\n\r\n      // now get the bounding rectangle of the back and front face rectangles\r\n      const rMin = cMin.distance(sMin)\r\n      const rMax = cMax.distance(sMax)\r\n\r\n      const rectMin = {\r\n        xMin: cMin.x - rMin,\r\n        xMax: cMin.x + rMin,\r\n        yMin: cMin.y - rMin,\r\n        yMax: cMin.y + rMin,\r\n      }\r\n\r\n      const rectMax = {\r\n        xMin: cMax.x - rMax,\r\n        xMax: cMax.x + rMax,\r\n        yMin: cMax.y - rMax,\r\n        yMax: cMax.y + rMax,\r\n      }\r\n\r\n      // compute final rectangle\r\n      const rect = {\r\n        xMin: Math.min(rectMin.xMin, rectMax.xMin),\r\n        yMin: Math.min(rectMin.yMin, rectMax.yMin),\r\n        xMax: Math.max(rectMin.xMax, rectMax.xMax),\r\n        yMax: Math.max(rectMin.yMax, rectMax.yMax),\r\n      }\r\n\r\n      // get sphere center\r\n      const sphereCenter = cMax.add(cMin).multiplyScalar(0.5).clone()\r\n      sphereCenter.x = (rect.xMax + rect.xMin) / 2\r\n      sphereCenter.y = (rect.yMax + rect.yMin) / 2\r\n\r\n      // get sphere radius\r\n      const sphereRadius = Math.max(rect.xMax - rect.xMin, rect.yMax - rect.yMin)\r\n\r\n      return {\r\n        center: sphereCenter,\r\n        radius: sphereRadius,\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Check if the Mesh lies inside the {@link camera} view frustum or not using the test defined by {@link frustumCulling}.\r\n     */\r\n    checkFrustumCulling() {\r\n      if (this.matricesNeedUpdate) {\r\n        if (this.domFrustum && this.frustumCulling) {\r\n          if (this.frustumCulling === 'sphere') {\r\n            this.domFrustum.setDocumentCoordsFromClipSpaceSphere(this.clipSpaceBoundingSphere)\r\n          } else {\r\n            this.domFrustum.setDocumentCoordsFromClipSpaceOBB()\r\n          }\r\n\r\n          this.domFrustum.intersectsContainer()\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Tell our matrices bindings to update if needed and call {@link MeshBaseClass#onBeforeRenderPass | Mesh base onBeforeRenderPass} super.\r\n     */\r\n    onBeforeRenderPass() {\r\n      if (this.material && this.matricesNeedUpdate) {\r\n        this.material.shouldUpdateInputsBindings('matrices')\r\n      }\r\n\r\n      super.onBeforeRenderPass()\r\n    }\r\n\r\n    /**\r\n     * Render our Mesh if the {@link RenderMaterial} is ready and if it is not frustum culled.\r\n     * @param pass - current render pass\r\n     */\r\n    onRenderPass(pass: GPURenderPassEncoder) {\r\n      if (!this.ready) return\r\n\r\n      this._onRenderCallback && this._onRenderCallback()\r\n\r\n      if ((this.domFrustum && this.domFrustum.isIntersecting) || !this.frustumCulling) {\r\n        // render our material\r\n        this.material.render(pass)\r\n        // then render our geometry\r\n        this.geometry.render(pass)\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport { ProjectedMeshBaseMixin }\r\n","import { CameraRenderer, isCameraRenderer } from '../renderers/utils'\r\nimport { ProjectedObject3D } from '../objects3D/ProjectedObject3D'\r\nimport { ProjectedMeshBaseMixin, ProjectedMeshParameters } from './mixins/ProjectedMeshBaseMixin'\r\nimport { MeshBaseParams } from './mixins/MeshBaseMixin'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\n\r\n/**\r\n * Create a 3D Mesh.\r\n *\r\n * A 3D Mesh is a basically a {@link ProjectedObject3D} with a {@link core/geometries/Geometry.Geometry | Geometry} and a {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}.\r\n *\r\n * You need to pass at least a valid {@link core/geometries/Geometry.Geometry | Geometry} as parameter.<br>\r\n * If no shaders are provided, it will use the normals colors as default shading.\r\n *\r\n * ## Shaders bindings and default attributes and uniforms\r\n *\r\n * The shaders are automatically patched with the input {@link core/bindGroups/BindGroup.BindGroup | bind groups} and {@link core/bindings/BufferBinding.BufferBinding | bindings} defined in your parameters object, as well as some default attributes and uniforms (see {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry | RenderPipelineEntry}).\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a mesh with a box geometry\r\n * // will use the normals colors as default shading\r\n * const mesh = new Mesh(gpuCurtains, {\r\n *   label: 'My mesh',\r\n *   geometry: new BoxGeometry(),\r\n * })\r\n * ```\r\n */\r\nexport class Mesh extends ProjectedMeshBaseMixin(ProjectedObject3D) {\r\n  /**\r\n   * Mesh constructor\r\n   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link Mesh}\r\n   * @param parameters - {@link MeshBaseParams | parameters} use to create this {@link Mesh}\r\n   */\r\n  constructor(renderer: CameraRenderer | GPUCurtains, parameters: ProjectedMeshParameters = {}) {\r\n    // we could pass our curtains object OR our curtains renderer object\r\n    renderer = isCameraRenderer(renderer, parameters.label ? parameters.label + ' Mesh' : 'Mesh')\r\n\r\n    // @ts-ignore\r\n    super(renderer, null, parameters)\r\n\r\n    this.type = 'Mesh'\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { PipelineEntryOptions, PipelineEntryParams, PipelineEntryStatus } from '../../types/PipelineEntries'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { AllowedBindGroups } from '../../types/BindGroups'\r\nimport { MaterialShadersType } from '../../types/Materials'\r\n\r\nlet pipelineId = 0\r\n\r\n/**\r\n * Used as a base class to create a pipeline entry.<br>\r\n * {@link PipelineEntry} roles are:\r\n * - Patch the given {@link core/materials/Material.Material | Material} shaders code and create the corresponding {@link GPUShaderModule}.\r\n * - Create a {@link GPUPipelineLayout | pipeline layout} with the given {@link core/materials/Material.Material#bindGroups | bind groups}\r\n * - Create a GPU pipeline\r\n */\r\nexport class PipelineEntry {\r\n  /** The type of the {@link PipelineEntry} */\r\n  type: string\r\n  /** The {@link Renderer} used to create this {@link PipelineEntry} */\r\n  renderer: Renderer\r\n  /** Index of this {@link PipelineEntry}, i.e. creation order */\r\n  readonly index: number\r\n  /** {@link GPUPipelineLayout | Pipeline layout} created based on the given {@link bindGroups | bind groups} */\r\n  layout: GPUPipelineLayout | null\r\n  /** The GPU pipeline */\r\n  pipeline: GPURenderPipeline | GPUComputePipeline | null\r\n  /** The pipeline {@link PipelineEntryStatus | compilation status} */\r\n  status: PipelineEntryStatus\r\n  /** Options used to create this {@link PipelineEntry} */\r\n  options: PipelineEntryOptions\r\n\r\n  /** {@link core/materials/Material.Material#bindGroups | bind groups} used to patch the shaders and create the {@link PipelineEntry#layout | pipeline layout} */\r\n  bindGroups: AllowedBindGroups[]\r\n\r\n  /**\r\n   * PipelineEntry constructor\r\n   * @param parameters - {@link PipelineEntryParams | parameters} used to create this {@link PipelineEntry}\r\n   */\r\n  constructor(parameters: PipelineEntryParams) {\r\n    this.type = 'PipelineEntry'\r\n\r\n    let { renderer } = parameters\r\n    const { label, shaders, useAsync } = parameters\r\n\r\n    renderer = isRenderer(renderer, label ? label + ' ' + this.type : this.type)\r\n\r\n    this.renderer = renderer\r\n\r\n    Object.defineProperty(this as PipelineEntry, 'index', { value: pipelineId++ })\r\n\r\n    this.layout = null\r\n    this.pipeline = null\r\n\r\n    this.status = {\r\n      compiling: false,\r\n      compiled: false,\r\n      error: null,\r\n    }\r\n\r\n    this.options = {\r\n      label,\r\n      shaders,\r\n      useAsync: useAsync !== undefined ? useAsync : true,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get whether the {@link pipeline} is ready, i.e. successfully compiled\r\n   * @readonly\r\n   */\r\n  get ready(): boolean {\r\n    return !this.status.compiling && this.status.compiled && !this.status.error\r\n  }\r\n\r\n  /**\r\n   * Get whether the {@link pipeline} is ready to be compiled, i.e. we have not already tried to compile it, and it's not currently compiling neither\r\n   * @readonly\r\n   */\r\n  get canCompile(): boolean {\r\n    return !this.status.compiling && !this.status.compiled && !this.status.error\r\n  }\r\n\r\n  /**\r\n   * Set our {@link PipelineEntry#bindGroups | pipeline entry bind groups}\r\n   * @param bindGroups - {@link core/materials/Material.Material#bindGroups | bind groups} to use with this {@link PipelineEntry}\r\n   */\r\n  setPipelineEntryBindGroups(bindGroups: AllowedBindGroups[]) {\r\n    this.bindGroups = bindGroups\r\n  }\r\n\r\n  /* SHADERS */\r\n\r\n  /**\r\n   * Create a {@link GPUShaderModule}\r\n   * @param parameters - Parameters used\r\n   * @param parameters.code - patched WGSL code string\r\n   * @param parameters.type - {@link MaterialShadersType | shader type}\r\n   * @returns - compiled {@link GPUShaderModule} if successful\r\n   */\r\n  createShaderModule({ code = '', type = 'vertex' }: { code: string; type: MaterialShadersType }): GPUShaderModule {\r\n    const shaderModule = this.renderer.createShaderModule({\r\n      label: this.options.label + ': ' + type + ' shader module',\r\n      code,\r\n    })\r\n\r\n    if ('getCompilationInfo' in shaderModule && !this.renderer.production) {\r\n      shaderModule.getCompilationInfo().then((compilationInfo) => {\r\n        for (const message of compilationInfo.messages) {\r\n          let formattedMessage = ''\r\n          if (message.lineNum) {\r\n            formattedMessage += `Line ${message.lineNum}:${message.linePos} - ${code.substring(\r\n              message.offset,\r\n              message.offset + message.length\r\n            )}\\n`\r\n          }\r\n          formattedMessage += message.message\r\n\r\n          switch (message.type) {\r\n            case 'error':\r\n              // TODO mesh onError?\r\n              console.error(`${this.options.label} compilation error:\\n${formattedMessage}`)\r\n              break\r\n            case 'warning':\r\n              console.warn(`${this.options.label} compilation warning:\\n${formattedMessage}`)\r\n              break\r\n            case 'info':\r\n              console.log(`${this.options.label} compilation information:\\n${formattedMessage}`)\r\n              break\r\n          }\r\n        }\r\n      })\r\n    }\r\n\r\n    return shaderModule\r\n  }\r\n\r\n  /* SETUP */\r\n\r\n  /**\r\n   * Create the {@link PipelineEntry} shaders\r\n   */\r\n  createShaders() {\r\n    /* will be overriden */\r\n  }\r\n\r\n  /**\r\n   * Create the pipeline entry {@link layout}\r\n   */\r\n  createPipelineLayout() {\r\n    this.layout = this.renderer.createPipelineLayout({\r\n      label: this.options.label + ' layout',\r\n      bindGroupLayouts: this.bindGroups.map((bindGroup) => bindGroup.bindGroupLayout),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create the {@link PipelineEntry} descriptor\r\n   */\r\n  createPipelineDescriptor() {\r\n    /* will be overriden */\r\n  }\r\n\r\n  /**\r\n   * Flush a {@link PipelineEntry}, i.e. reset its {@link bindGroups | bind groups}, {@link layout} and descriptor and recompile the {@link pipeline}\r\n   * Used when one of the bind group or rendering property has changed\r\n   * @param newBindGroups - new {@link bindGroups | bind groups} in case they have changed\r\n   */\r\n  flushPipelineEntry(newBindGroups: AllowedBindGroups[] = []) {\r\n    this.status.compiling = false\r\n    this.status.compiled = false\r\n    this.status.error = null\r\n\r\n    this.setPipelineEntryBindGroups(newBindGroups)\r\n    this.compilePipelineEntry()\r\n  }\r\n\r\n  /**\r\n   * Set up a {@link pipeline} by creating the shaders, the {@link layout} and the descriptor\r\n   */\r\n  compilePipelineEntry() {\r\n    this.status.compiling = true\r\n\r\n    this.createShaders()\r\n    this.createPipelineLayout()\r\n    this.createPipelineDescriptor()\r\n  }\r\n}\r\n","export default /* wgsl */ `\r\nfn getOutputPosition(position: vec3f) -> vec4f {\r\n  return camera.projection * matrices.modelView * vec4f(position, 1.0);\r\n}`\r\n","export default /* wgsl */ `\r\nfn getWorldNormal(normal: vec3f) -> vec3f {\r\n  return normalize(matrices.normal * normal);\r\n}\r\n\r\nfn getViewNormal(normal: vec3f) -> vec3f {\r\n  return normalize((camera.view * vec4(matrices.normal * normal, 0.0)).xyz);\r\n}`\r\n","export default /* wgsl */ `\r\nfn getUVCover(uv: vec2f, textureMatrix: mat4x4f) -> vec2f {\r\n  return (textureMatrix * vec4f(uv, 0.0, 1.0)).xy;\r\n}`\r\n","export default /* wgsl */ `\r\nfn getVertex2DToUVCoords(vertex: vec2f) -> vec2f {\r\n  return vec2(\r\n    vertex.x * 0.5 + 0.5,\r\n    0.5 - vertex.y * 0.5\r\n  );\r\n}\r\n\r\nfn getVertex3DToUVCoords(vertex: vec3f) -> vec2f {\r\n  return getVertex2DToUVCoords( vec2(vertex.x, vertex.y) );\r\n}\r\n`\r\n","import { RenderMaterialShadersType } from '../../types/Materials'\r\nimport get_output_position from './chunks/get_output_position.wgsl'\r\nimport get_normals from './chunks/get_normals.wgsl'\r\nimport get_uv_cover from './chunks/get_uv_cover.wgsl'\r\nimport get_vertex_to_uv_coords from './chunks/get_vertex_to_uv_coords.wgsl'\r\n\r\n/** Defines {@link ShaderChunks} object structure */\r\nexport type ShaderChunks = Record<RenderMaterialShadersType, Record<string, string>>\r\n/** Defines {@link ProjectedShaderChunks} object structure */\r\nexport type ProjectedShaderChunks = Record<RenderMaterialShadersType, Record<string, string>>\r\n\r\n/**\r\n * Useful WGSL code chunks added to the vertex and/or fragment shaders\r\n */\r\nexport const ShaderChunks = {\r\n  /** WGSL code chunks added to the vertex shader */\r\n  vertex: {\r\n    /** Applies given texture matrix to given uv coordinates */\r\n    get_uv_cover,\r\n  },\r\n  /** WGSL code chunks added to the fragment shader */\r\n  fragment: {\r\n    /** Applies given texture matrix to given uv coordinates */\r\n    get_uv_cover,\r\n    /** Convert vertex position to uv coordinates */\r\n    get_vertex_to_uv_coords,\r\n  },\r\n} as ShaderChunks\r\n\r\n/**\r\n * Useful WGSL code chunks added to the projected Meshes vertex and/or fragment shaders\r\n */\r\nexport const ProjectedShaderChunks = {\r\n  /** WGSL code chunks added to the vertex shader */\r\n  vertex: {\r\n    /** Get output vec4f position vector by applying model view projection matrix to vec3f attribute position vector */\r\n    get_output_position,\r\n    /** Get vec3f normals in world or view space */\r\n    get_normals,\r\n  },\r\n  /** WGSL code chunks added to the fragment shader */\r\n  fragment: {},\r\n} as ProjectedShaderChunks\r\n","import { PipelineEntry } from './PipelineEntry'\nimport { ProjectedShaderChunks, ShaderChunks } from '../shaders/ShaderChunks'\nimport { isRenderer, Renderer } from '../renderers/utils'\nimport { throwError } from '../../utils/utils'\nimport {\n  PipelineEntryShaders,\n  RenderPipelineEntryOptions,\n  RenderPipelineEntryParams,\n  RenderPipelineEntryPropertiesParams,\n} from '../../types/PipelineEntries'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { AllowedBindGroups, BindGroupBufferBindingElement } from '../../types/BindGroups'\nimport { RenderMaterialAttributes, ShaderOptions } from '../../types/Materials'\n\n/**\n * Used to create a {@link PipelineEntry} specifically designed to handle {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}.\n *\n * ## Shaders patching\n *\n * The {@link RenderPipelineEntry} uses each of its {@link RenderPipelineEntry#bindGroups | bind groups} {@link core/bindings/Binding.Binding | Binding} to patch the given vertex and fragment shaders before creating the {@link GPUShaderModule}.<br>\n * It will prepend every {@link core/bindings/Binding.Binding | Binding} WGSL code snippets (or fragments) with the correct bind group and bindings indices.\n *\n * ## Pipeline compilation\n *\n * The {@link RenderPipelineEntry} will then create a {@link GPURenderPipeline} (asynchronously by default).\n *\n * ## Default attributes and uniforms\n *\n * ### Attributes\n *\n * Attributes are only added to the vertex shaders. They are generated based on the {@link core/geometries/Geometry.Geometry | Geometry} used and may vary in case you're using a geometry with custom attributes. Here are the default ones:\n *\n * ```wgsl\n * struct Attributes {\n *  @builtin(vertex_index) vertexIndex : u32,\n *  @builtin(instance_index) instanceIndex : u32,\n *  @location(0) position: vec3f,\n *  @location(1) uv: vec2f,\n *  @location(2) normal: vec3f\n * };\n *\n * // you can safely access them in your vertex shader\n * // using attributes.position or attributes.uv for example\n * ```\n *\n * ### Uniforms\n *\n * If the Mesh is one of {@link core/meshes/Mesh.Mesh | Mesh}, {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh} or {@link curtains/meshes/Plane.Plane | Plane}, some additional uniforms are added to the shaders.\n *\n * #### Vertex shaders\n *\n * ```wgsl\n * struct Matrices {\n * \tmodel: mat4x4f,\n * \tmodelView: mat4x4f,\n * \tnormal: mat3x3f\n * };\n *\n * struct Camera {\n * \tview: mat4x4f,\n * \tprojection: mat4x4f,\n * \tposition: vec3f\n * };\n *\n * @group(0) @binding(0) var<uniform> camera: Camera;\n *\n * // note that matrices uniform @group index might change depending on use cases\n * @group(1) @binding(0) var<uniform> matrices: Matrices;\n *\n * // you can safely access these uniforms in your vertex shader\n * // using matrices.modelView or camera.projection for example\n * ```\n *\n * #### Fragment shaders\n *\n * ```wgsl\n * struct Matrices {\n * \tmodel: mat4x4f,\n * \tmodelView: mat4x4f,\n * \tnormal: mat3x3f\n * };\n *\n * // note that matrices uniform @group index might change depending on use cases\n * @group(1) @binding(0) var<uniform> matrices: Matrices;\n *\n * // you can safely access these uniforms in your fragment shader\n * // using matrices.model or matrices.modelView for example\n * ```\n *\n * ### Helpers\n *\n * Finally, some helpers functions are added to the shaders as well.\n *\n * #### Vertex and fragment shaders\n *\n * To help you compute scaled UV based on a texture matrix, this function is always added to both vertex and fragment shaders:\n *\n * ```wgsl\n * fn getUVCover(uv: vec2f, textureMatrix: mat4x4f) -> vec2f {\n *   return (textureMatrix * vec4f(uv, 0.0, 1.0)).xy;\n * }\n * ```\n *\n * #### Vertex shaders\n *\n * If the Mesh is one of {@link core/meshes/Mesh.Mesh | Mesh}, {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh} or {@link curtains/meshes/Plane.Plane | Plane}, some functions are added to the vertex shader to help you compute the vertices positions and normals.\n *\n * ##### Position\n *\n * Position helper function:\n *\n * ```wgsl\n * fn getOutputPosition(position: vec3f) -> vec4f {\n *   return camera.projection * matrices.modelView * vec4f(position, 1.0);\n * }\n * ```\n *\n * Note that it is not mandatory to use it. If you want to do these computations yourself, you are free to do it the way you like most. You could for example use this formula instead:\n *\n * ```wgsl\n * var transformed: vec3f = camera.projection * camera.view * matrices.model * vec4f(position, 1.0);\n * ```\n *\n * ##### Normal\n *\n * The normal matrix provided, available as `matrices.normal`, is computed in world space (i.e. it is the inverse transpose of the world matrix). A couple helpers functions are added to help you compute the normals in the right space:\n *\n * ```wgsl\n * fn getWorldNormal(normal: vec3f) -> vec3f {\n *   return normalize(matrices.normal * normal);\n * }\n *\n * fn getViewNormal(normal: vec3f) -> vec3f {\n *   return normalize((camera.view * vec4(matrices.normal * normal, 0.0)).xyz);\n * }\n * ```\n *\n * #### Fragment shaders\n *\n * Last but not least, those couple functions are added to the fragment shaders to help you convert vertex positions to UV coordinates:\n *\n * ```wgsl\n * fn getVertex2DToUVCoords(vertex: vec2f) -> vec2f {\n *   return vec2(\n *     vertex.x * 0.5 + 0.5,\n *     0.5 - vertex.y * 0.5\n *   );\n * }\n *\n * fn getVertex3DToUVCoords(vertex: vec3f) -> vec2f {\n *   return getVertex2DToUVCoords( vec2(vertex.x, vertex.y) );\n * }\n * ```\n */\nexport class RenderPipelineEntry extends PipelineEntry {\n  /** Shaders to use with this {@link RenderPipelineEntry} */\n  shaders: PipelineEntryShaders\n  /** {@link RenderMaterialAttributes | Geometry attributes} sent to the {@link RenderPipelineEntry} */\n  attributes: RenderMaterialAttributes\n  /** {@link GPURenderPipelineDescriptor | Render pipeline descriptor} based on {@link layout} and {@link shaders} */\n  descriptor: GPURenderPipelineDescriptor | null\n  /** Options used to create this {@link RenderPipelineEntry} */\n  options: RenderPipelineEntryOptions\n\n  /**\n   * RenderPipelineEntry constructor\n   * @param parameters - {@link RenderPipelineEntryParams | parameters} used to create this {@link RenderPipelineEntry}\n   */\n  constructor(parameters: RenderPipelineEntryParams) {\n    // eslint-disable-next-line prefer-const\n    let { renderer, ...pipelineParams } = parameters\n    const { label, attributes, bindGroups, cacheKey, ...renderingOptions } = pipelineParams\n\n    const type = 'RenderPipelineEntry'\n\n    isRenderer(renderer, label ? label + ' ' + type : type)\n\n    super(parameters)\n\n    this.type = type\n\n    this.shaders = {\n      vertex: {\n        head: '',\n        code: '',\n        module: null,\n      },\n      fragment: {\n        head: '',\n        code: '',\n        module: null,\n      },\n      full: {\n        head: '',\n        code: '',\n        module: null,\n      },\n    }\n\n    this.descriptor = null\n\n    this.options = {\n      ...this.options,\n      attributes,\n      bindGroups,\n      cacheKey,\n      ...renderingOptions,\n    }\n\n    this.setPipelineEntryProperties({ attributes, bindGroups })\n  }\n\n  /**\n   * Set {@link RenderPipelineEntry} properties (in this case the {@link bindGroups | bind groups} and {@link attributes})\n   * @param parameters - the {@link core/materials/RenderMaterial.RenderMaterial#bindGroups | bind groups} and {@link core/materials/RenderMaterial.RenderMaterial#attributes | attributes} to use\n   */\n  setPipelineEntryProperties(parameters: RenderPipelineEntryPropertiesParams) {\n    const { attributes, bindGroups } = parameters\n\n    this.attributes = attributes\n\n    this.setPipelineEntryBindGroups(bindGroups)\n  }\n\n  /* SHADERS */\n\n  /**\n   * Patch the shaders by appending all the necessary shader chunks, {@link bindGroups | bind groups}) and {@link attributes} WGSL code fragments to the given {@link types/PipelineEntries.PipelineEntryParams#shaders | parameter shader code}\n   */\n  patchShaders() {\n    this.shaders.vertex.head = ''\n    this.shaders.vertex.code = ''\n    this.shaders.fragment.head = ''\n    this.shaders.fragment.code = ''\n    this.shaders.full.head = ''\n    this.shaders.full.code = ''\n\n    // first add chunks\n    for (const chunk in ShaderChunks.vertex) {\n      this.shaders.vertex.head = `${ShaderChunks.vertex[chunk]}\\n${this.shaders.vertex.head}`\n      this.shaders.full.head = `${ShaderChunks.vertex[chunk]}\\n${this.shaders.full.head}`\n    }\n\n    if (this.options.shaders.fragment) {\n      for (const chunk in ShaderChunks.fragment) {\n        this.shaders.fragment.head = `${ShaderChunks.fragment[chunk]}\\n${this.shaders.fragment.head}`\n\n        if (this.shaders.full.head.indexOf(ShaderChunks.fragment[chunk]) === -1) {\n          this.shaders.full.head = `${ShaderChunks.fragment[chunk]}\\n${this.shaders.full.head}`\n        }\n      }\n    }\n\n    if (this.options.rendering.useProjection) {\n      for (const chunk in ProjectedShaderChunks.vertex) {\n        this.shaders.vertex.head = `${ProjectedShaderChunks.vertex[chunk]}\\n${this.shaders.vertex.head}`\n        this.shaders.full.head = `${ProjectedShaderChunks.vertex[chunk]}\\n${this.shaders.full.head}`\n      }\n\n      if (this.options.shaders.fragment) {\n        for (const chunk in ProjectedShaderChunks.fragment) {\n          this.shaders.fragment.head = `${ProjectedShaderChunks.fragment[chunk]}\\n${this.shaders.fragment.head}`\n\n          if (this.shaders.full.head.indexOf(ProjectedShaderChunks.fragment[chunk]) === -1) {\n            this.shaders.full.head = `${ProjectedShaderChunks.fragment[chunk]}\\n${this.shaders.full.head}`\n          }\n        }\n      }\n    }\n\n    const groupsBindings = []\n    for (const bindGroup of this.bindGroups) {\n      let bindIndex = 0\n      bindGroup.bindings.forEach((binding, bindingIndex) => {\n        binding.wgslGroupFragment.forEach((groupFragment, groupFragmentIndex) => {\n          groupsBindings.push({\n            groupIndex: bindGroup.index,\n            visibility: binding.options.visibility,\n            bindIndex,\n            wgslStructFragment: (binding as BindGroupBufferBindingElement).wgslStructFragment,\n            wgslGroupFragment: groupFragment,\n            newLine:\n              bindingIndex === bindGroup.bindings.length - 1 &&\n              groupFragmentIndex === binding.wgslGroupFragment.length - 1,\n          })\n\n          bindIndex++\n        })\n      })\n    }\n\n    for (const groupBinding of groupsBindings) {\n      if (groupBinding.visibility.includes('vertex')) {\n        // do not duplicate structs\n        if (\n          groupBinding.wgslStructFragment &&\n          this.shaders.vertex.head.indexOf(groupBinding.wgslStructFragment) === -1\n        ) {\n          this.shaders.vertex.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.vertex.head}`\n        }\n\n        // do not duplicate struct var as well\n        if (this.shaders.vertex.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n          this.shaders.vertex.head = `${this.shaders.vertex.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n\n          if (groupBinding.newLine) this.shaders.vertex.head += `\\n`\n        }\n      }\n\n      if (this.options.shaders.fragment && groupBinding.visibility.includes('fragment')) {\n        // do not duplicate structs\n        if (\n          groupBinding.wgslStructFragment &&\n          this.shaders.fragment.head.indexOf(groupBinding.wgslStructFragment) === -1\n        ) {\n          this.shaders.fragment.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.fragment.head}`\n        }\n\n        // do not duplicate struct var as well\n        if (this.shaders.fragment.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n          this.shaders.fragment.head = `${this.shaders.fragment.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n\n          if (groupBinding.newLine) this.shaders.fragment.head += `\\n`\n        }\n      }\n\n      if (groupBinding.wgslStructFragment && this.shaders.full.head.indexOf(groupBinding.wgslStructFragment) === -1) {\n        this.shaders.full.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.full.head}`\n      }\n\n      if (this.shaders.full.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n        this.shaders.full.head = `${this.shaders.full.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n\n        if (groupBinding.newLine) this.shaders.full.head += `\\n`\n      }\n    }\n\n    // add attributes to vertex shader only\n    this.shaders.vertex.head = `${this.attributes.wgslStructFragment}\\n${this.shaders.vertex.head}`\n    this.shaders.full.head = `${this.attributes.wgslStructFragment}\\n${this.shaders.full.head}`\n\n    this.shaders.vertex.code = this.shaders.vertex.head + this.options.shaders.vertex.code\n\n    if (typeof this.options.shaders.fragment === 'object')\n      this.shaders.fragment.code = this.shaders.fragment.head + this.options.shaders.fragment.code\n\n    // check if its one shader string with different entry points\n    if (typeof this.options.shaders.fragment === 'object') {\n      if (\n        this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint &&\n        this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0\n      ) {\n        this.shaders.full.code = this.shaders.full.head + this.options.shaders.vertex.code\n      } else {\n        this.shaders.full.code =\n          this.shaders.full.head + this.options.shaders.vertex.code + this.options.shaders.fragment.code\n      }\n    }\n  }\n\n  /* SETUP */\n\n  /**\n   * Get whether the shaders modules have been created\n   * @readonly\n   */\n  get shadersModulesReady(): boolean {\n    return !(!this.shaders.vertex.module || (this.options.shaders.fragment && !this.shaders.fragment.module))\n  }\n\n  /**\n   * Create the {@link shaders}: patch them and create the {@link GPUShaderModule}\n   */\n  createShaders() {\n    this.patchShaders()\n\n    const isSameShader =\n      typeof this.options.shaders.fragment === 'object' &&\n      this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint &&\n      this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0\n\n    this.shaders.vertex.module = this.createShaderModule({\n      code: this.shaders[isSameShader ? 'full' : 'vertex'].code,\n      type: 'vertex',\n    })\n\n    if (this.options.shaders.fragment) {\n      this.shaders.fragment.module = this.createShaderModule({\n        code: this.shaders[isSameShader ? 'full' : 'fragment'].code,\n        type: 'fragment',\n      })\n    }\n  }\n\n  /**\n   * Create the render pipeline {@link descriptor}\n   */\n  createPipelineDescriptor() {\n    if (!this.shadersModulesReady) return\n\n    let vertexLocationIndex = -1\n\n    if (this.options.rendering.targets.length) {\n      // we will assume our renderer alphaMode is set to 'premultiplied'\n      // we either disable blending if mesh if opaque\n      // use a custom blending if set\n      // or use this blend equation if mesh is transparent (see https://limnu.com/webgl-blending-youre-probably-wrong/)\n      if (this.options.rendering.transparent) {\n        this.options.rendering.targets[0].blend = this.options.rendering.targets[0].blend\n          ? this.options.rendering.targets[0].blend\n          : {\n              color: {\n                srcFactor: 'src-alpha',\n                dstFactor: 'one-minus-src-alpha',\n              },\n              alpha: {\n                srcFactor: 'one',\n                dstFactor: 'one-minus-src-alpha',\n              },\n            }\n      }\n    } else {\n      this.options.rendering.targets = []\n    }\n\n    this.descriptor = {\n      label: this.options.label,\n      layout: this.layout,\n      vertex: {\n        module: this.shaders.vertex.module,\n        entryPoint: this.options.shaders.vertex.entryPoint,\n        buffers: this.attributes.vertexBuffers.map((vertexBuffer) => {\n          return {\n            stepMode: vertexBuffer.stepMode,\n            arrayStride: vertexBuffer.arrayStride * 4, // 4 bytes each\n            attributes: vertexBuffer.attributes.map((attribute) => {\n              vertexLocationIndex++\n              return {\n                shaderLocation: vertexLocationIndex,\n                offset: attribute.bufferOffset, // previous attribute size * 4\n                format: attribute.bufferFormat,\n              }\n            }),\n          }\n        }),\n      },\n      ...(this.options.shaders.fragment && {\n        fragment: {\n          module: this.shaders.fragment.module,\n          entryPoint: (this.options.shaders.fragment as ShaderOptions).entryPoint,\n          targets: this.options.rendering.targets,\n        },\n      }),\n      primitive: {\n        topology: this.options.rendering.topology,\n        frontFace: this.options.rendering.verticesOrder,\n        cullMode: this.options.rendering.cullMode,\n      },\n      ...(this.options.rendering.depth && {\n        depthStencil: {\n          depthWriteEnabled: this.options.rendering.depthWriteEnabled,\n          depthCompare: this.options.rendering.depthCompare,\n          format: this.options.rendering.depthFormat,\n        },\n      }),\n      ...(this.options.rendering.sampleCount > 1 && {\n        multisample: {\n          count: this.options.rendering.sampleCount,\n        },\n      }),\n    } as GPURenderPipelineDescriptor\n  }\n\n  /**\n   * Create the render {@link pipeline}\n   */\n  createRenderPipeline() {\n    if (!this.shadersModulesReady) return\n\n    try {\n      this.pipeline = this.renderer.createRenderPipeline(this.descriptor)\n    } catch (error) {\n      this.status.error = error\n      throwError(error)\n    }\n  }\n\n  /**\n   * Asynchronously create the render {@link pipeline}\n   * @async\n   * @returns - void promise result\n   */\n  async createRenderPipelineAsync(): Promise<void> {\n    if (!this.shadersModulesReady) return\n\n    try {\n      this.pipeline = await this.renderer.createRenderPipelineAsync(this.descriptor)\n      this.status.compiled = true\n      this.status.compiling = false\n      this.status.error = null\n    } catch (error) {\n      this.status.error = error\n      throwError(error)\n    }\n  }\n\n  /**\n   * Call {@link PipelineEntry#compilePipelineEntry | PipelineEntry compilePipelineEntry} method, then create our render {@link pipeline}\n   * @async\n   */\n  async compilePipelineEntry(): Promise<void> {\n    super.compilePipelineEntry()\n\n    if (this.options.useAsync) {\n      await this.createRenderPipelineAsync()\n    } else {\n      this.createRenderPipeline()\n      this.status.compiled = true\n      this.status.compiling = false\n      this.status.error = null\n    }\n  }\n}\n","import { PipelineEntry } from './PipelineEntry'\nimport { isRenderer, Renderer } from '../renderers/utils'\nimport { throwError } from '../../utils/utils'\nimport { PipelineEntryParams, PipelineEntryPropertiesParams, PipelineEntryShaders } from '../../types/PipelineEntries'\nimport { BindGroupBufferBindingElement } from '../../types/BindGroups'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/**\n * Used to create a {@link PipelineEntry} specifically designed to handle {@link core/materials/ComputeMaterial.ComputeMaterial | ComputeMaterial}.\n *\n * ## Shaders patching\n *\n * The {@link ComputePipelineEntry} uses each of its {@link ComputePipelineEntry#bindGroups | bind groups} {@link core/bindings/Binding.Binding | Binding} to patch the given compute shader before creating the {@link GPUShaderModule}.<br>\n * It will prepend every {@link core/bindings/Binding.Binding | Binding} WGSL code snippets (or fragments) with the correct bind group and bindings indices.\n *\n * ## Pipeline compilation\n *\n * The {@link ComputePipelineEntry} will then create a {@link GPUComputePipeline} (asynchronously by default).\n */\nexport class ComputePipelineEntry extends PipelineEntry {\n  /** Shaders to use with this {@link ComputePipelineEntry} */\n  shaders: PipelineEntryShaders\n  /** {@link GPUComputePipelineDescriptor | Compute pipeline descriptor} based on {@link layout} and {@link shaders} */\n  descriptor: GPUComputePipelineDescriptor | null\n\n  /**\n   * ComputePipelineEntry constructor\n   * @param parameters - {@link PipelineEntryParams | parameters} used to create this {@link ComputePipelineEntry}\n   */\n  constructor(parameters: PipelineEntryParams) {\n    const { renderer } = parameters\n    const { label } = parameters\n\n    const type = 'ComputePipelineEntry'\n\n    isRenderer(renderer, label ? label + ' ' + type : type)\n\n    super(parameters)\n\n    this.type = type\n\n    this.shaders = {\n      compute: {\n        head: '',\n        code: '',\n        module: null,\n      },\n    }\n\n    this.descriptor = null\n  }\n\n  /**\n   * Set {@link ComputePipelineEntry} properties (in this case the {@link bindGroups | bind groups})\n   * @param parameters - the {@link core/materials/ComputeMaterial.ComputeMaterial#bindGroups | bind groups} to use\n   */\n  setPipelineEntryProperties(parameters: PipelineEntryPropertiesParams) {\n    const { bindGroups } = parameters\n\n    this.setPipelineEntryBindGroups(bindGroups)\n  }\n\n  /* SHADERS */\n\n  /**\n   * Patch the shaders by appending all the {@link bindGroups | bind groups}) WGSL code fragments to the given {@link PipelineEntryParams#shaders | parameter shader code}\n   */\n  patchShaders() {\n    this.shaders.compute.head = ''\n    this.shaders.compute.code = ''\n\n    const groupsBindings = []\n    for (const bindGroup of this.bindGroups) {\n      let bindIndex = 0\n      bindGroup.bindings.forEach((binding, bindingIndex) => {\n        binding.wgslGroupFragment.forEach((groupFragment, groupFragmentIndex) => {\n          groupsBindings.push({\n            groupIndex: bindGroup.index,\n            bindIndex,\n            wgslStructFragment: (binding as BindGroupBufferBindingElement).wgslStructFragment,\n            wgslGroupFragment: groupFragment,\n            newLine:\n              bindingIndex === bindGroup.bindings.length - 1 &&\n              groupFragmentIndex === binding.wgslGroupFragment.length - 1,\n          })\n\n          bindIndex++\n        })\n      })\n    }\n\n    for (const groupBinding of groupsBindings) {\n      // do not duplicate structs\n      if (\n        groupBinding.wgslStructFragment &&\n        this.shaders.compute.head.indexOf(groupBinding.wgslStructFragment) === -1\n      ) {\n        this.shaders.compute.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.compute.head}`\n      }\n\n      // do not duplicate struct var as well\n      if (this.shaders.compute.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n        this.shaders.compute.head = `${this.shaders.compute.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n      }\n\n      if (groupBinding.newLine) this.shaders.compute.head += `\\n`\n    }\n\n    this.shaders.compute.code = this.shaders.compute.head + this.options.shaders.compute.code\n  }\n\n  /* SETUP */\n\n  /**\n   * Create the {@link shaders}: patch them and create the {@link GPUShaderModule}\n   */\n  createShaders() {\n    this.patchShaders()\n\n    this.shaders.compute.module = this.createShaderModule({\n      code: this.shaders.compute.code,\n      type: 'compute',\n    })\n  }\n\n  /**\n   * Create the compute pipeline {@link descriptor}\n   */\n  createPipelineDescriptor() {\n    if (!this.shaders.compute.module) return\n\n    this.descriptor = {\n      label: this.options.label,\n      layout: this.layout,\n      compute: {\n        module: this.shaders.compute.module,\n        entryPoint: this.options.shaders.compute.entryPoint,\n      },\n    }\n  }\n\n  /**\n   * Create the compute {@link pipeline}\n   */\n  createComputePipeline() {\n    if (!this.shaders.compute.module) return\n\n    try {\n      this.pipeline = this.renderer.createComputePipeline(this.descriptor)\n    } catch (error) {\n      this.status.error = error\n      throwError(error)\n    }\n  }\n\n  /**\n   * Asynchronously create the compute {@link pipeline}\n   * @async\n   * @returns - void promise result\n   */\n  async createComputePipelineAsync(): Promise<void> {\n    if (!this.shaders.compute.module) return\n\n    try {\n      this.pipeline = await this.renderer.createComputePipelineAsync(this.descriptor)\n      this.status.compiled = true\n      this.status.compiling = false\n      this.status.error = null\n    } catch (error) {\n      this.status.error = error\n      throwError(error)\n    }\n  }\n\n  /**\n   * Call {@link PipelineEntry#compilePipelineEntry | PipelineEntry compilePipelineEntry} method, then create our compute {@link pipeline}\n   * @async\n   */\n  async compilePipelineEntry(): Promise<void> {\n    super.compilePipelineEntry()\n\n    if (this.options.useAsync) {\n      await this.createComputePipelineAsync()\n    } else {\n      this.createComputePipeline()\n      this.status.compiled = true\n      this.status.compiling = false\n      this.status.error = null\n    }\n  }\n}\n","import { RenderPipelineEntry } from './RenderPipelineEntry'\r\nimport { ComputePipelineEntry } from './ComputePipelineEntry'\r\nimport {\r\n  PipelineEntryParams,\r\n  PipelineManagerRenderPipelineEntryParams,\r\n  RenderPipelineEntryParams,\r\n} from '../../types/PipelineEntries'\r\nimport { ShaderOptions } from '../../types/Materials'\r\nimport { compareRenderingOptions } from '../materials/utils'\r\nimport { BindGroup } from '../bindGroups/BindGroup'\r\n\r\n/** Defines all types of allowed {@link core/pipelines/PipelineEntry.PipelineEntry | PipelineEntry} class objects */\r\nexport type AllowedPipelineEntries = RenderPipelineEntry | ComputePipelineEntry\r\n\r\n/**\r\n * Used to create and keep track of both {@link ComputePipelineEntry} and {@link RenderPipelineEntry}.<br>\r\n * Perform checks to eventually use a cached pipeline entry instead of creating a new one.<br>\r\n * The end goal is to cache pipelines and reuse them (as well as bind groups).<br>\r\n * Also responsible for setting the current pass encoder pipeline in order to avoid redundant setPipeline calls.<br>\r\n * Created internally by the {@link core/renderers/GPUDeviceManager.GPUDeviceManager | GPUDeviceManager}.<br>\r\n * @see {@link https://toji.dev/webgpu-best-practices/bind-groups#grouping-resources-based-on-frequency-of-change | WebGPU Bind Group best practices}\r\n */\r\nexport class PipelineManager {\r\n  /** The type of the {@link PipelineManager} */\r\n  type: string\r\n  /** Keep track of the current bound pipeline in order to avoid redundant setPipeline calls */\r\n  currentPipelineIndex: number | null\r\n  /** Array of already created {@link ComputePipelineEntry} and {@link RenderPipelineEntry} */\r\n  pipelineEntries: AllowedPipelineEntries[]\r\n  /** Array of current pass (used by {@link GPURenderPassEncoder} at the moment, but can be extended to {@link GPUComputePassEncoder} as well) already set {@link core/bindGroups/BindGroup.BindGroup | bind groups}. */\r\n  activeBindGroups: BindGroup[]\r\n\r\n  constructor() {\r\n    this.type = 'PipelineManager'\r\n\r\n    this.currentPipelineIndex = null\r\n    this.pipelineEntries = []\r\n    this.activeBindGroups = []\r\n  }\r\n\r\n  /**\r\n   * Compare two {@link ShaderOptions | shader objects}\r\n   * @param shaderA - first {@link ShaderOptions | shader object} to compare\r\n   * @param shaderB - second {@link ShaderOptions | shader object} to compare\r\n   * @returns - whether the two {@link ShaderOptions | shader objects} code and entryPoint match\r\n   */\r\n  compareShaders(shaderA: ShaderOptions, shaderB: ShaderOptions): boolean {\r\n    // store shader code in a Set map?\r\n    // https://www.measurethat.net/Benchmarks/Show/30363/0/shaders-strings-comparisons\r\n    return shaderA.code === shaderB.code && shaderA.entryPoint === shaderB.entryPoint\r\n    //return shaderA.code?.localeCompare(shaderB.code) === 0 && shaderA.entryPoint === shaderB.entryPoint\r\n  }\r\n\r\n  /**\r\n   * Checks if the provided {@link RenderPipelineEntryParams | RenderPipelineEntry parameters} belongs to an already created {@link RenderPipelineEntry}.\r\n   * @param parameters - {@link RenderPipelineEntryParams | RenderPipelineEntry parameters}\r\n   * @returns - the found {@link RenderPipelineEntry}, or null if not found\r\n   */\r\n  isSameRenderPipeline(parameters: RenderPipelineEntryParams): RenderPipelineEntry | null {\r\n    return this.pipelineEntries\r\n      .filter((pipelineEntry) => pipelineEntry instanceof RenderPipelineEntry)\r\n      .find((pipelineEntry: RenderPipelineEntry) => {\r\n        const { options } = pipelineEntry\r\n        const { shaders, rendering, cacheKey } = parameters\r\n\r\n        const sameCacheKey = cacheKey === options.cacheKey\r\n\r\n        const sameVertexShader = this.compareShaders(shaders.vertex, options.shaders.vertex)\r\n        const sameFragmentShader =\r\n          (!shaders.fragment && !options.shaders.fragment) ||\r\n          this.compareShaders(shaders.fragment as ShaderOptions, options.shaders.fragment as ShaderOptions)\r\n\r\n        const differentParams = compareRenderingOptions(rendering, options.rendering)\r\n\r\n        return sameCacheKey && !differentParams.length && sameVertexShader && sameFragmentShader\r\n      }) as RenderPipelineEntry | null\r\n  }\r\n\r\n  /**\r\n   * Check if a {@link RenderPipelineEntry} has already been created with the given {@link RenderPipelineEntryParams | parameters}.\r\n   * Use it if found, else create a new one and add it to the {@link pipelineEntries} array.\r\n   * @param parameters - {@link RenderPipelineEntryParams | RenderPipelineEntry parameters}\r\n   * @returns - {@link RenderPipelineEntry}, either from cache or newly created\r\n   */\r\n  createRenderPipeline(parameters: PipelineManagerRenderPipelineEntryParams): RenderPipelineEntry {\r\n    const { attributes, bindGroups } = parameters\r\n    let cacheKey = attributes.layoutCacheKey\r\n    bindGroups.forEach((bindGroup) => {\r\n      bindGroup.bindings.forEach((binding) => {\r\n        cacheKey += binding.name + ','\r\n      })\r\n      cacheKey += bindGroup.pipelineCacheKey\r\n    })\r\n\r\n    // render pipeline cache is based on 3 things:\r\n    // 1. geometry and bind groups buffers layout comparison, via the cacheKey\r\n    // 2. same rendering options via compareRenderingOptions()\r\n    // 3. same vertex and fragment shaders code and entry points\r\n    // see https://toji.dev/webgpu-gltf-case-study/#part-3-pipeline-caching\r\n    const existingPipelineEntry = this.isSameRenderPipeline({ ...parameters, cacheKey })\r\n\r\n    if (existingPipelineEntry) {\r\n      return existingPipelineEntry\r\n    } else {\r\n      const pipelineEntry = new RenderPipelineEntry({ ...parameters, cacheKey })\r\n\r\n      this.pipelineEntries.push(pipelineEntry)\r\n\r\n      return pipelineEntry\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if a {@link ComputePipelineEntry} has already been created with the given {@link PipelineEntryParams | parameters}.\r\n   * Use it if found, else create a new one and add it to the {@link pipelineEntries} array.\r\n   * @param parameters - {@link PipelineEntryParams | PipelineEntry parameters}\r\n   * @returns - newly created {@link ComputePipelineEntry}\r\n   */\r\n  createComputePipeline(parameters: PipelineEntryParams): ComputePipelineEntry {\r\n    const pipelineEntry = new ComputePipelineEntry(parameters)\r\n\r\n    this.pipelineEntries.push(pipelineEntry)\r\n\r\n    return pipelineEntry\r\n  }\r\n\r\n  /**\r\n   * Check if the given {@link AllowedPipelineEntries | PipelineEntry} is already set, if not set it\r\n   * @param pass - current pass encoder\r\n   * @param pipelineEntry - the {@link AllowedPipelineEntries | PipelineEntry} to set\r\n   */\r\n  setCurrentPipeline(pass: GPURenderPassEncoder | GPUComputePassEncoder, pipelineEntry: AllowedPipelineEntries) {\r\n    if (pipelineEntry.index !== this.currentPipelineIndex) {\r\n      pass.setPipeline(pipelineEntry.pipeline as GPURenderPipeline & GPUComputePipeline)\r\n      this.currentPipelineIndex = pipelineEntry.index\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track the active/already set {@link core/bindGroups/BindGroup.BindGroup | bind groups} to avoid `setBindGroup()` redundant calls.\r\n   * @param pass - current pass encoder.\r\n   * @param bindGroups - array {@link core/bindGroups/BindGroup.BindGroup | bind groups} passed by the {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}.\r\n   */\r\n  setActiveBindGroups(pass: GPURenderPassEncoder | GPUComputePassEncoder, bindGroups: BindGroup[]) {\r\n    bindGroups.forEach((bindGroup, index) => {\r\n      if (\r\n        !this.activeBindGroups[index] ||\r\n        this.activeBindGroups[index].uuid !== bindGroup.uuid ||\r\n        this.activeBindGroups[index].index !== bindGroup.index // the same bind group might be used at different indices\r\n      ) {\r\n        this.activeBindGroups[index] = bindGroup\r\n        pass.setBindGroup(bindGroup.index, bindGroup.bindGroup)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Reset the {@link PipelineManager#currentPipelineIndex | current pipeline index} and {@link activeBindGroups} so the next {@link AllowedPipelineEntries | PipelineEntry} will be set for sure\r\n   */\r\n  resetCurrentPipeline() {\r\n    this.currentPipelineIndex = null\r\n    this.activeBindGroups = []\r\n  }\r\n}\r\n","import { DOMElement } from '../core/DOM/DOMElement'\n\n/**\n * Defines a {@link ResizeManager} entry\n */\nexport interface ResizeManagerEntry {\n  /** {@link HTMLElement} to track */\n  element: DOMElement['element'] | Element\n  /** Priority in which to call the callback function */\n  priority?: number\n  /** Function to execute when the {@link element} is resized */\n  callback: () => void | null\n}\n\n/**\n * Tiny wrapper around {@link ResizeObserver} used to execute callbacks when given {@link HTMLElement} size changes.\n */\nexport class ResizeManager {\n  /** Whether we should add elements to our {@link resizeObserver} or not */\n  shouldWatch: boolean\n  /** Array of {@link ResizeManagerEntry | entries} */\n  entries: ResizeManagerEntry[]\n  /** {@link ResizeObserver} used */\n  resizeObserver: ResizeObserver | undefined\n\n  /**\n   * ResizeManager constructor\n   */\n  constructor() {\n    // default to true\n    this.shouldWatch = true\n\n    this.entries = []\n\n    // do not throw an error if we're using the lib inside a worker\n    if (typeof window === 'object' && 'ResizeObserver' in window) {\n      this.resizeObserver = new ResizeObserver((observedEntries) => {\n        // get all entries corresponding to that element, and sort them by priority\n        const allEntries = observedEntries\n          .map((observedEntry) => {\n            return this.entries.filter((e) => e.element.isSameNode(observedEntry.target))\n          })\n          .flat()\n          .sort((a, b) => b.priority - a.priority)\n\n        allEntries?.forEach((entry) => {\n          if (entry && entry.callback) {\n            entry.callback()\n          }\n        })\n      })\n    }\n  }\n\n  /**\n   * Set {@link shouldWatch}\n   * @param shouldWatch - whether to watch or not\n   */\n  useObserver(shouldWatch = true) {\n    this.shouldWatch = shouldWatch\n  }\n\n  /**\n   * Track an {@link HTMLElement} size change and execute a callback function when it happens\n   * @param entry - {@link ResizeManagerEntry | entry} to watch\n   */\n  observe({ element, priority, callback }: ResizeManagerEntry) {\n    if (!element || !this.shouldWatch) return\n\n    this.resizeObserver?.observe(element)\n\n    const entry = {\n      element,\n      priority,\n      callback,\n    }\n\n    this.entries.push(entry)\n  }\n\n  /**\n   * Unobserve an {@link HTMLElement} and remove it from our {@link entries} array\n   * @param element - {@link HTMLElement} to unobserve\n   */\n  unobserve(element: DOMElement['element'] | Element) {\n    this.resizeObserver?.unobserve(element)\n    this.entries = this.entries.filter((e) => !e.element.isSameNode(element))\n  }\n\n  /**\n   * Destroy our {@link ResizeManager}\n   */\n  destroy() {\n    this.resizeObserver?.disconnect()\n  }\n}\n\n/** @exports @const resizeManager - {@link ResizeManager} class object */\nexport const resizeManager = new ResizeManager() as ResizeManager\n","import { resizeManager, ResizeManager, ResizeManagerEntry } from '../../utils/ResizeManager'\nimport { throwError } from '../../utils/utils'\n\n/**\n * Defines a rectangular coordinates object\n */\nexport interface RectCoords {\n  /** top position */\n  top: number\n  /** right position */\n  right: number\n  /** bottom position */\n  bottom: number\n  /** left position */\n  left: number\n}\n\n/**\n * Defines a size object\n */\nexport interface RectSize {\n  /** width of the rectangle */\n  width: number\n  /** height of the rectangle */\n  height: number\n}\n\n/**\n * Defines a rectangular bounding box object\n */\nexport interface RectBBox extends RectSize {\n  /** top position of the bounding box */\n  top: number\n  /** left position of the bounding box */\n  left: number\n}\n\n/**\n * Defines a DOM position object\n */\nexport interface DOMPosition {\n  /** X position */\n  x: number\n  /** Y position */\n  y: number\n}\n\n/**\n * Defines a complete DOM Element bounding rect object, similar to a {@link DOMRect}\n */\nexport interface DOMElementBoundingRect extends RectCoords, RectBBox, DOMPosition {}\n\n/**\n * Parameters used to create a {@link DOMElement}\n */\nexport interface DOMElementParams {\n  /** {@link HTMLElement} or string representing an {@link HTMLElement} selector of the element the resize observer should track */\n  element?: string | Element\n  /** Order in which the {@link resizeManager} callback is executed */\n  priority?: ResizeManagerEntry['priority']\n  /** Callback to tun when the {@link DOMElement#element | element} size changed */\n  onSizeChanged?: (boundingRect: DOMElementBoundingRect | null) => void | null\n  /** Callback to tun when the {@link DOMElement#element | element} position changed */\n  onPositionChanged?: (boundingRect: DOMElementBoundingRect | null) => void | null\n}\n\n/**\n * Used to track a DOM Element size and position by using a resize observer provided by {@link ResizeManager}.<br>\n * Execute callbacks when the bounding rectangle of the DOM Element changes, which means when its size and/or position change.\n */\nexport class DOMElement {\n  /** The HTML element to track */\n  element: HTMLElement\n  /** Priority at which this element {@link onSizeChanged} function must be called */\n  priority: ResizeManagerEntry['priority']\n  /** Flag indicating whether the timeout is still running and we should avoid a new computation */\n  isResizing: boolean\n  /** Callback to run whenever the {@link element} size changed */\n  onSizeChanged: (boundingRect: DOMElementBoundingRect | null) => void | null\n  /** Callback to run whenever the {@link element} position changed */\n  onPositionChanged: (boundingRect: DOMElementBoundingRect | null) => void | null\n  /** The {@link ResizeManager} used, basically a wrapper around a {@link ResizeObserver} */\n  resizeManager: ResizeManager\n  /** Current  {@link element} bounding rectangle */\n  _boundingRect: DOMElementBoundingRect\n\n  /**\n   * DOMElement constructor\n   * @param parameters - {@link DOMElementParams | parameters} used to create our DOMElement\n   */\n  constructor(\n    {\n      element = document.body,\n      priority = 1,\n      onSizeChanged = (boundingRect = null) => {\n        /* allow empty callback */\n      },\n      onPositionChanged = (boundingRect = null) => {\n        /* allow empty callback */\n      },\n    } = {} as DOMElementParams\n  ) {\n    if (typeof element === 'string') {\n      this.element = document.querySelector(element)\n\n      if (!this.element) {\n        const notFoundEl = typeof element === 'string' ? `'${element}' selector` : `${element} HTMLElement`\n        throwError(`DOMElement: corresponding ${notFoundEl} not found.`)\n      }\n    } else {\n      this.element = element as HTMLElement\n    }\n\n    this.priority = priority\n\n    this.isResizing = false\n\n    this.onSizeChanged = onSizeChanged\n    this.onPositionChanged = onPositionChanged\n\n    this.resizeManager = resizeManager\n\n    this.resizeManager.observe({\n      element: this.element,\n      priority: this.priority,\n      callback: () => {\n        this.setSize()\n      },\n    })\n\n    // set size right away on init\n    this.setSize()\n  }\n\n  /**\n   * Check whether 2 bounding rectangles are equals\n   * @param rect1 - first bounding rectangle\n   * @param rect2 - second bounding rectangle\n   * @returns - whether the rectangles are equals or not\n   */\n  compareBoundingRect(rect1: DOMRect | DOMElementBoundingRect, rect2: DOMRect | DOMElementBoundingRect): boolean {\n    return !['x', 'y', 'left', 'top', 'right', 'bottom', 'width', 'height'].some((k) => rect1[k] !== rect2[k])\n  }\n\n  /**\n   * Get our element bounding rectangle\n   */\n  get boundingRect(): DOMElementBoundingRect {\n    return this._boundingRect\n  }\n\n  /**\n   * Set our element bounding rectangle\n   * @param boundingRect - new bounding rectangle\n   */\n  set boundingRect(boundingRect: DOMElementBoundingRect) {\n    const isSameRect = !!this.boundingRect && this.compareBoundingRect(boundingRect, this.boundingRect)\n\n    this._boundingRect = {\n      top: boundingRect.top,\n      right: boundingRect.right,\n      bottom: boundingRect.bottom,\n      left: boundingRect.left,\n      width: boundingRect.width,\n      height: boundingRect.height,\n      x: boundingRect.x,\n      y: boundingRect.y,\n    }\n\n    if (!isSameRect) {\n      this.onSizeChanged(this.boundingRect)\n    }\n  }\n\n  /**\n   * Update our element bounding rectangle because the scroll position has changed\n   * @param delta - scroll delta values along X and Y axis\n   */\n  updateScrollPosition(delta: DOMPosition = { x: 0, y: 0 }) {\n    if (this.isResizing) return\n\n    this._boundingRect.top += delta.y\n    this._boundingRect.left += delta.x\n\n    if (delta.x || delta.y) {\n      this.onPositionChanged(this.boundingRect)\n    }\n  }\n\n  /**\n   * Set our element bounding rectangle, either by a value or a getBoundingClientRect call\n   * @param boundingRect - new bounding rectangle\n   */\n  setSize(boundingRect: DOMElementBoundingRect | null = null) {\n    if (!this.element || this.isResizing) return\n\n    this.isResizing = true\n\n    this.boundingRect = boundingRect ?? this.element.getBoundingClientRect()\n\n    setTimeout(() => {\n      this.isResizing = false\n    }, 10)\n  }\n\n  /**\n   * Destroy our DOMElement - remove from resize observer and clear throttle timeout\n   */\n  destroy() {\n    this.resizeManager.unobserve(this.element)\n  }\n}\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { SceneStackedMesh, RenderedMesh, ProjectedMesh } from '../renderers/GPURenderer'\r\nimport { ShaderPass } from '../renderPasses/ShaderPass'\r\nimport { PingPongPlane } from '../../extras/meshes/PingPongPlane'\r\nimport { ComputePass } from '../computePasses/ComputePass'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { RenderTarget } from '../renderPasses/RenderTarget'\r\nimport { RenderPass } from '../renderPasses/RenderPass'\r\nimport { Texture } from '../textures/Texture'\r\nimport { Object3D } from '../objects3D/Object3D'\r\nimport { Vec3 } from '../../math/Vec3'\r\n\r\n// used to sort transparent meshes\r\nconst camPosA = new Vec3()\r\nconst camPosB = new Vec3()\r\nconst posA = new Vec3()\r\nconst posB = new Vec3()\r\n\r\n/**\r\n * Meshes rendering order is dependant of their transparency setting\r\n */\r\nexport interface ProjectionStack {\r\n  /** opaque Meshes will be drawn first */\r\n  opaque: SceneStackedMesh[]\r\n  /** transparent Meshes will be drawn last */\r\n  transparent: SceneStackedMesh[]\r\n}\r\n\r\n/** Meshes will be stacked in 2 different objects whether they are projected (use a {@link core/camera/Camera.Camera | Camera}) or not */\r\nexport type ProjectionType = 'unProjected' | 'projected'\r\n\r\n/**\r\n * Meshes will be put into two stacks of projected/unprojected transparent and opaques meshes arrays\r\n */\r\nexport type Stack = Record<ProjectionType, ProjectionStack>\r\n\r\n/**\r\n * A RenderPassEntry object is used to group Meshes based on their rendering target\r\n */\r\nexport interface RenderPassEntry {\r\n  /** {@link RenderPass} target used onto which render */\r\n  renderPass: RenderPass\r\n  /** {@link Texture} to render to if any (if not specified then this {@link RenderPassEntry} Meshes will be rendered directly to screen) */\r\n  renderTexture: Texture | null\r\n  /** Optional function to execute just before rendering the Meshes, useful for eventual texture copy */\r\n  onBeforeRenderPass: ((commandEncoder?: GPUCommandEncoder, swapChainTexture?: GPUTexture) => void) | null\r\n  /** Optional function to execute just after rendering the Meshes, useful for eventual texture copy */\r\n  onAfterRenderPass: ((commandEncoder?: GPUCommandEncoder, swapChainTexture?: GPUTexture) => void) | null\r\n  /** If this {@link RenderPassEntry} needs to render only one Mesh */\r\n  element: PingPongPlane | ShaderPass | null\r\n  /** If this {@link RenderPassEntry} needs to render multiple Meshes, then use a {@link Stack} object */\r\n  stack: Stack | null\r\n}\r\n\r\n/** Defines all our possible render targets */\r\nexport type RenderPassEntriesType = 'pingPong' | 'renderTarget' | 'screen'\r\n/** Defines our render pass entries object */\r\nexport type RenderPassEntries = Record<RenderPassEntriesType, RenderPassEntry[]>\r\n\r\n/**\r\n * Used to by the {@link Renderer} render everything that needs to be rendered (compute passes and meshes) in the right order with the right pass descriptors and target textures, perform textures copy at the right time, etc.\r\n *\r\n * ## Render order\r\n *\r\n * - Run all the {@link ComputePass} first, sorted by their {@link ComputePass#renderOrder | renderOrder}\r\n * - Then render all {@link renderPassEntries} pingPong entries Meshes, sorted by their {@link PingPongPlane#renderOrder | renderOrder}\r\n * - Then all Meshes that need to be rendered into specific {@link renderPassEntries} outputTarget entries:\r\n *   - First, the opaque unprojected Meshes (i.e. opaque {@link core/meshes/FullscreenPlane.FullscreenPlane | FullscreenPlane}, if any), sorted by their {@link core/meshes/FullscreenPlane.FullscreenPlane#renderOrder | renderOrder}\r\n *   - Then, the transparent unprojected Meshes (i.e. transparent {@link core/meshes/FullscreenPlane.FullscreenPlane | FullscreenPlane}, if any), sorted by their {@link core/meshes/FullscreenPlane.FullscreenPlane#renderOrder | renderOrder}\r\n *   - Then, the opaque projected Meshes (i.e. opaque {@link core/meshes/Mesh.Mesh | Mesh}, {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh} or {@link curtains/meshes/Plane.Plane | Plane}), sorted by their {@link core/meshes/Mesh.Mesh#renderOrder | renderOrder}\r\n *   - Finally, the transparent projected Meshes (i.e. transparent {@link core/meshes/Mesh.Mesh | Mesh}, {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh} or {@link curtains/meshes/Plane.Plane | Plane}), sorted by their Z position and then their {@link core/meshes/Mesh.Mesh#renderOrder | renderOrder}\r\n * - Finally all Meshes that need to be rendered directly to the {@link renderPassEntries} screen (the {@link Renderer} current texture), in the same order than above.\r\n */\r\nexport class Scene extends Object3D {\r\n  /** {@link Renderer} used by this {@link Scene} */\r\n  renderer: Renderer\r\n  /** Array of {@link ComputePass} to render, ordered by {@link ComputePass#renderOrder | renderOrder} */\r\n  computePassEntries: ComputePass[]\r\n  /**\r\n   * A {@link RenderPassEntries} object that will contain every Meshes that need to be drawn, put inside each one of our three entries type arrays: 'pingPong', 'outputTarget' and 'screen'.\r\n   * - The {@link Scene} will first render all {@link renderPassEntries} pingPong entries Meshes\r\n   * - Then all Meshes that need to be rendered into specific {@link renderPassEntries} outputTarget entries\r\n   * - Finally all Meshes that need to be rendered to the {@link renderPassEntries} screen\r\n   */\r\n  renderPassEntries: RenderPassEntries\r\n\r\n  /**\r\n   * Scene constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Scene}\r\n   */\r\n  constructor({ renderer }: { renderer: Renderer | GPUCurtains }) {\r\n    super()\r\n\r\n    renderer = isRenderer(renderer, 'Scene')\r\n\r\n    this.renderer = renderer\r\n\r\n    this.computePassEntries = []\r\n\r\n    this.renderPassEntries = {\r\n      /** Array of {@link RenderPassEntry} that will handle {@link PingPongPlane}. Each {@link PingPongPlane} will be added as a distinct {@link RenderPassEntry} here */\r\n      pingPong: [] as RenderPassEntry[],\r\n      /** Array of {@link RenderPassEntry} that will render to a specific {@link RenderTarget}. Each {@link RenderTarget} will be added as a distinct {@link RenderPassEntry} here */\r\n      renderTarget: [] as RenderPassEntry[],\r\n      /** Array of {@link RenderPassEntry} that will render directly to the screen. Our first entry will contain all the Meshes that do not have any {@link RenderTarget} assigned. Following entries will be created for every global {@link ShaderPass} */\r\n      screen: [] as RenderPassEntry[],\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the main {@link Renderer} render pass entry.\r\n   */\r\n  setMainRenderPassEntry() {\r\n    // add our basic scene entry\r\n    this.renderPassEntries.screen.push({\r\n      renderPass: this.renderer.renderPass,\r\n      renderTexture: null,\r\n      onBeforeRenderPass: null,\r\n      onAfterRenderPass: null,\r\n      element: null, // explicitly set to null\r\n      stack: {\r\n        unProjected: {\r\n          opaque: [],\r\n          transparent: [],\r\n        },\r\n        projected: {\r\n          opaque: [],\r\n          transparent: [],\r\n        },\r\n      },\r\n    } as RenderPassEntry)\r\n  }\r\n\r\n  /**\r\n   * Get the number of meshes a {@link RenderPassEntry | render pass entry} should draw.\r\n   * @param renderPassEntry - The {@link RenderPassEntry | render pass entry} to test\r\n   */\r\n  getRenderPassEntryLength(renderPassEntry: RenderPassEntry): number {\r\n    if (!renderPassEntry) {\r\n      return 0\r\n    } else {\r\n      return renderPassEntry.element\r\n        ? renderPassEntry.element.visible\r\n          ? 1\r\n          : 0\r\n        : renderPassEntry.stack.unProjected.opaque.length +\r\n            renderPassEntry.stack.unProjected.transparent.length +\r\n            renderPassEntry.stack.projected.opaque.length +\r\n            renderPassEntry.stack.projected.transparent.length\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a {@link ComputePass} to our scene {@link computePassEntries} array\r\n   * @param computePass - {@link ComputePass} to add\r\n   */\r\n  addComputePass(computePass: ComputePass) {\r\n    this.computePassEntries.push(computePass)\r\n    this.computePassEntries.sort((a, b) => {\r\n      if (a.renderOrder !== b.renderOrder) {\r\n        return a.renderOrder - b.renderOrder\r\n      } else {\r\n        return a.index - b.index\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link ComputePass} from our scene {@link computePassEntries} array\r\n   * @param computePass - {@link ComputePass} to remove\r\n   */\r\n  removeComputePass(computePass: ComputePass) {\r\n    this.computePassEntries = this.computePassEntries.filter((cP) => cP.uuid !== computePass.uuid)\r\n  }\r\n\r\n  /**\r\n   * Add a {@link RenderTarget} to our scene {@link renderPassEntries} outputTarget array.\r\n   * Every Meshes later added to this {@link RenderTarget} will be rendered to the {@link RenderTarget#renderTexture | RenderTarget Texture} using the {@link RenderTarget#renderPass.descriptor | RenderTarget RenderPass descriptor}\r\n   * @param renderTarget - {@link RenderTarget} to add\r\n   */\r\n  addRenderTarget(renderTarget: RenderTarget) {\r\n    // if RT is not already in the render pass entries\r\n    if (!this.renderPassEntries.renderTarget.find((entry) => entry.renderPass.uuid === renderTarget.renderPass.uuid))\r\n      this.renderPassEntries.renderTarget.push({\r\n        renderPass: renderTarget.renderPass,\r\n        renderTexture: renderTarget.renderTexture,\r\n        onBeforeRenderPass: null,\r\n        onAfterRenderPass: null,\r\n        element: null, // explicitly set to null\r\n        stack: {\r\n          unProjected: {\r\n            opaque: [],\r\n            transparent: [],\r\n          },\r\n          projected: {\r\n            opaque: [],\r\n            transparent: [],\r\n          },\r\n        },\r\n      } as RenderPassEntry)\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link RenderTarget} from our scene {@link renderPassEntries} outputTarget array.\r\n   * @param renderTarget - {@link RenderTarget} to add\r\n   */\r\n  removeRenderTarget(renderTarget: RenderTarget) {\r\n    this.renderPassEntries.renderTarget = this.renderPassEntries.renderTarget.filter(\r\n      (entry) => entry.renderPass.uuid !== renderTarget.renderPass.uuid\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Get the correct {@link renderPassEntries | render pass entry} (either {@link renderPassEntries} outputTarget or {@link renderPassEntries} screen) {@link Stack} onto which this Mesh should be added, depending on whether it's projected or not\r\n   * @param mesh - Mesh to check\r\n   * @returns - the corresponding render pass entry {@link Stack}\r\n   */\r\n  getMeshProjectionStack(mesh: SceneStackedMesh): ProjectionStack {\r\n    // first get correct render pass enty and stack\r\n    const renderPassEntry = mesh.outputTarget\r\n      ? this.renderPassEntries.renderTarget.find(\r\n          (passEntry) => passEntry.renderPass.uuid === mesh.outputTarget.renderPass.uuid\r\n        )\r\n      : this.renderPassEntries.screen[0]\r\n\r\n    const { stack } = renderPassEntry\r\n\r\n    return mesh.material.options.rendering.useProjection ? stack.projected : stack.unProjected\r\n  }\r\n\r\n  /**\r\n   * Add a Mesh to the correct {@link renderPassEntries | render pass entry} {@link Stack} array.\r\n   * Meshes are then ordered by their {@link core/meshes/mixins/MeshBaseMixin.MeshBaseClass#index | indexes (order of creation]}, {@link core/pipelines/RenderPipelineEntry.RenderPipelineEntry#index | pipeline entry indexes} and then {@link core/meshes/mixins/MeshBaseMixin.MeshBaseClass#renderOrder | renderOrder}\r\n   * @param mesh - Mesh to add\r\n   */\r\n  addMesh(mesh: SceneStackedMesh) {\r\n    const projectionStack = this.getMeshProjectionStack(mesh)\r\n\r\n    // rebuild stack\r\n    const similarMeshes = mesh.transparent ? projectionStack.transparent : projectionStack.opaque\r\n\r\n    similarMeshes.push(mesh)\r\n\r\n    // sort by their render order, pipeline index or natural index\r\n    similarMeshes.sort((a, b) => {\r\n      return (\r\n        a.renderOrder - b.renderOrder ||\r\n        //a.material.pipelineEntry.index - b.material.pipelineEntry.index ||\r\n        a.index - b.index\r\n      )\r\n    })\r\n\r\n    if ('parent' in mesh && !mesh.parent && mesh.material.options.rendering.useProjection) {\r\n      mesh.parent = this\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a Mesh from our {@link Scene}\r\n   * @param mesh - Mesh to remove\r\n   */\r\n  removeMesh(mesh: SceneStackedMesh) {\r\n    const projectionStack = this.getMeshProjectionStack(mesh)\r\n\r\n    if (mesh.transparent) {\r\n      projectionStack.transparent = projectionStack.transparent.filter((m) => m.uuid !== mesh.uuid)\r\n    } else {\r\n      projectionStack.opaque = projectionStack.opaque.filter((m) => m.uuid !== mesh.uuid)\r\n    }\r\n\r\n    if ('parent' in mesh && mesh.parent && mesh.parent.object3DIndex === this.object3DIndex) {\r\n      mesh.parent = null\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add a {@link ShaderPass} to our scene {@link renderPassEntries} screen array.\r\n   * Before rendering the {@link ShaderPass}, we will copy the correct input texture into its {@link ShaderPass#renderTexture | renderTexture}\r\n   * This also handles the {@link renderPassEntries} screen array entries order: We will first draw selective passes, then our main screen pass and finally global post processing passes.\r\n   * @see {@link https://codesandbox.io/p/sandbox/webgpu-render-to-2-textures-without-texture-copy-c4sx4s?file=%2Fsrc%2Findex.js%3A10%2C4 | minimal code example}\r\n   * @param shaderPass - {@link ShaderPass} to add\r\n   */\r\n  addShaderPass(shaderPass: ShaderPass) {\r\n    const onBeforeRenderPass =\r\n      shaderPass.inputTarget || shaderPass.outputTarget\r\n        ? null\r\n        : (commandEncoder, swapChainTexture) => {\r\n            // draw the content into our render texture\r\n            // if it's a global postprocessing pass, copy the context current texture into its renderTexture\r\n            // we don't need to do that if it has an inputTarget\r\n            // because in this case its renderTexture is already a copy of the render target content\r\n            if (shaderPass.renderTexture && swapChainTexture) {\r\n              commandEncoder.copyTextureToTexture(\r\n                {\r\n                  texture: swapChainTexture,\r\n                },\r\n                {\r\n                  texture: shaderPass.renderTexture.texture,\r\n                },\r\n                [shaderPass.renderTexture.size.width, shaderPass.renderTexture.size.height]\r\n              )\r\n            }\r\n\r\n            // if we want to post process the whole scene, clear render pass content\r\n            this.renderer.postProcessingPass.setLoadOp('clear')\r\n          }\r\n\r\n    const onAfterRenderPass =\r\n      !shaderPass.outputTarget && shaderPass.options.copyOutputToRenderTexture\r\n        ? (commandEncoder, swapChainTexture) => {\r\n            // if we rendered to the screen,\r\n            // copy the context current texture result back into the shaderPass renderTexture\r\n            if (shaderPass.renderTexture && swapChainTexture) {\r\n              commandEncoder.copyTextureToTexture(\r\n                {\r\n                  texture: swapChainTexture,\r\n                },\r\n                {\r\n                  texture: shaderPass.renderTexture.texture,\r\n                },\r\n                [shaderPass.renderTexture.size.width, shaderPass.renderTexture.size.height]\r\n              )\r\n            }\r\n          }\r\n        : null\r\n\r\n    const shaderPassEntry = {\r\n      // use output target or postprocessing render pass\r\n      renderPass: shaderPass.outputTarget ? shaderPass.outputTarget.renderPass : this.renderer.postProcessingPass,\r\n      // render to output target renderTexture or directly to screen\r\n      renderTexture: shaderPass.outputTarget ? shaderPass.outputTarget.renderTexture : null,\r\n      onBeforeRenderPass,\r\n      onAfterRenderPass,\r\n      element: shaderPass,\r\n      stack: null, // explicitly set to null\r\n    }\r\n\r\n    this.renderPassEntries.screen.push(shaderPassEntry)\r\n\r\n    // screen passes are sorted by 2 criteria\r\n    // first we draw render passes that have an output target OR our main render pass, ordered by renderOrder\r\n    // then we draw our full postprocessing pass, ordered by renderOrder\r\n    this.renderPassEntries.screen.sort((a, b) => {\r\n      const isPostProA = a.element && !a.element.outputTarget\r\n      const renderOrderA = a.element ? a.element.renderOrder : 0\r\n      const indexA = a.element ? a.element.index : 0\r\n\r\n      const isPostProB = b.element && !b.element.outputTarget\r\n      const renderOrderB = b.element ? b.element.renderOrder : 0\r\n      const indexB = b.element ? b.element.index : 0\r\n\r\n      if (isPostProA && !isPostProB) {\r\n        return 1\r\n      } else if (!isPostProA && isPostProB) {\r\n        return -1\r\n      } else if (renderOrderA !== renderOrderB) {\r\n        return renderOrderA - renderOrderB\r\n      } else {\r\n        return indexA - indexB\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link ShaderPass} from our scene {@link renderPassEntries} screen array\r\n   * @param shaderPass - {@link ShaderPass} to remove\r\n   */\r\n  removeShaderPass(shaderPass: ShaderPass) {\r\n    this.renderPassEntries.screen = this.renderPassEntries.screen.filter(\r\n      (entry) => !entry.element || entry.element.uuid !== shaderPass.uuid\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Add a {@link PingPongPlane} to our scene {@link renderPassEntries} pingPong array.\r\n   * After rendering the {@link PingPongPlane}, we will copy the context current texture into its {@link PingPongPlane#renderTexture | renderTexture} so we'll be able to use it as an input for the next pass\r\n   * @see {@link https://codesandbox.io/p/sandbox/webgpu-render-ping-pong-to-texture-use-in-quad-gwjx9p | minimal code example}\r\n   * @param pingPongPlane\r\n   */\r\n  addPingPongPlane(pingPongPlane: PingPongPlane) {\r\n    this.renderPassEntries.pingPong.push({\r\n      renderPass: pingPongPlane.outputTarget.renderPass,\r\n      renderTexture: pingPongPlane.outputTarget.renderTexture,\r\n      onBeforeRenderPass: null,\r\n      onAfterRenderPass: (commandEncoder, swapChainTexture) => {\r\n        // Copy the rendering results from the swapChainTexture into our |pingPongPlane texture|.\r\n        commandEncoder.copyTextureToTexture(\r\n          {\r\n            texture: swapChainTexture,\r\n          },\r\n          {\r\n            texture: pingPongPlane.renderTexture.texture,\r\n          },\r\n          [pingPongPlane.renderTexture.size.width, pingPongPlane.renderTexture.size.height]\r\n        )\r\n      },\r\n      element: pingPongPlane,\r\n      stack: null, // explicitly set to null\r\n    } as RenderPassEntry)\r\n\r\n    // sort by their render order\r\n    this.renderPassEntries.pingPong.sort((a, b) => a.element.renderOrder - b.element.renderOrder)\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link PingPongPlane} from our scene {@link renderPassEntries} pingPong array.\r\n   * @param pingPongPlane - {@link PingPongPlane} to remove\r\n   */\r\n  removePingPongPlane(pingPongPlane: PingPongPlane) {\r\n    this.renderPassEntries.pingPong = this.renderPassEntries.pingPong.filter(\r\n      (entry) => entry.element.uuid !== pingPongPlane.uuid\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Get any rendered object or {@link RenderTarget} {@link RenderPassEntry}. Useful to override a {@link RenderPassEntry#onBeforeRenderPass | RenderPassEntry onBeforeRenderPass} or {@link RenderPassEntry#onAfterRenderPass | RenderPassEntry onAfterRenderPass} default behavior.\r\n   * @param object - The object from which we want to get the parentMesh {@link RenderPassEntry}\r\n   * @returns - the {@link RenderPassEntry} if found\r\n   */\r\n  getObjectRenderPassEntry(object: RenderedMesh | RenderTarget): RenderPassEntry | undefined {\r\n    if (object.type === 'RenderTarget') {\r\n      return this.renderPassEntries.renderTarget.find(\r\n        (entry) => entry.renderPass.uuid === (object as RenderTarget).renderPass.uuid\r\n      )\r\n    } else if (object.type === 'PingPongPlane') {\r\n      return this.renderPassEntries.pingPong.find((entry) => entry.element.uuid === object.uuid)\r\n    } else if (object.type === 'ShaderPass') {\r\n      return this.renderPassEntries.screen.find((entry) => entry.element?.uuid === object.uuid)\r\n    } else {\r\n      const entryType = (object as RenderedMesh).outputTarget ? 'renderTarget' : 'screen'\r\n      return this.renderPassEntries[entryType].find((entry) => {\r\n        return [\r\n          ...entry.stack.unProjected.opaque,\r\n          ...entry.stack.unProjected.transparent,\r\n          ...entry.stack.projected.opaque,\r\n          ...entry.stack.projected.transparent,\r\n        ].some((mesh) => mesh.uuid === object.uuid)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sort transparent projected meshes by their render order or distance to the camera (farther meshes should be drawn first).\r\n   * @param meshes - transparent projected meshes array to sort\r\n   */\r\n  sortTransparentMeshes(meshes: ProjectedMesh[]) {\r\n    meshes.sort((meshA, meshB) => {\r\n      if (meshA.renderOrder !== meshB.renderOrder) {\r\n        return meshA.renderOrder - meshB.renderOrder\r\n      }\r\n\r\n      // apply world matrices to objects\r\n      meshA.geometry\r\n        ? posA.copy(meshA.geometry.boundingBox.center).applyMat4(meshA.worldMatrix)\r\n        : meshA.worldMatrix.getTranslation(posA)\r\n\r\n      meshB.geometry\r\n        ? posB.copy(meshB.geometry.boundingBox.center).applyMat4(meshB.worldMatrix)\r\n        : meshB.worldMatrix.getTranslation(posB)\r\n\r\n      // apply scale to bounding sphere radius\r\n      const radiusA = meshA.geometry ? meshA.geometry.boundingBox.radius * meshA.worldMatrix.getMaxScaleOnAxis() : 0\r\n      const radiusB = meshB.geometry ? meshB.geometry.boundingBox.radius * meshB.worldMatrix.getMaxScaleOnAxis() : 0\r\n\r\n      return (\r\n        meshB.camera.worldMatrix.getTranslation(camPosB).distance(posB) -\r\n        radiusB -\r\n        (meshA.camera.worldMatrix.getTranslation(camPosA).distance(posA) - radiusA)\r\n      )\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Here we render a {@link RenderPassEntry}:\r\n   * - Set its {@link RenderPass#descriptor | renderPass descriptor} view or resolveTarget and get it at as swap chain texture\r\n   * - Execute {@link RenderPassEntry#onBeforeRenderPass | onBeforeRenderPass} callback if specified\r\n   * - Begin the {@link GPURenderPassEncoder | GPU render pass encoder} using our {@link RenderPass#descriptor | renderPass descriptor}\r\n   * - Render the single element if specified or the render pass entry {@link Stack}: draw unprojected opaque / transparent meshes first, then set the {@link core/renderers/GPUCameraRenderer.GPUCameraRenderer#cameraBindGroup | camera bind group} and draw projected opaque / transparent meshes\r\n   * - End the {@link GPURenderPassEncoder | GPU render pass encoder}\r\n   * - Execute {@link RenderPassEntry#onAfterRenderPass | onAfterRenderPass} callback if specified\r\n   * - Reset {@link core/pipelines/PipelineManager.PipelineManager#currentPipelineIndex | pipeline manager current pipeline}\r\n   * @param commandEncoder - current {@link GPUCommandEncoder}\r\n   * @param renderPassEntry - {@link RenderPassEntry} to render\r\n   */\r\n  renderSinglePassEntry(commandEncoder: GPUCommandEncoder, renderPassEntry: RenderPassEntry) {\r\n    // set the pass texture to render to\r\n    const swapChainTexture = renderPassEntry.renderPass.updateView(renderPassEntry.renderTexture?.texture)\r\n\r\n    renderPassEntry.onBeforeRenderPass && renderPassEntry.onBeforeRenderPass(commandEncoder, swapChainTexture)\r\n\r\n    // now begin our actual render pass\r\n    const pass = commandEncoder.beginRenderPass(renderPassEntry.renderPass.descriptor)\r\n    !this.renderer.production &&\r\n      pass.pushDebugGroup(\r\n        renderPassEntry.element\r\n          ? `${renderPassEntry.element.options.label} render pass using ${renderPassEntry.renderPass.options.label} descriptor`\r\n          : `Render stack pass using ${renderPassEntry.renderPass.options.label}${\r\n              renderPassEntry.renderTexture ? ' onto ' + renderPassEntry.renderTexture.options.label : ''\r\n            }`\r\n      )\r\n\r\n    // pass entries can have a single element or a stack\r\n    if (renderPassEntry.element) {\r\n      renderPassEntry.element.render(pass)\r\n    } else if (renderPassEntry.stack) {\r\n      // draw unProjected regular meshes\r\n      for (const mesh of renderPassEntry.stack.unProjected.opaque) {\r\n        mesh.render(pass)\r\n      }\r\n      for (const mesh of renderPassEntry.stack.unProjected.transparent) {\r\n        mesh.render(pass)\r\n      }\r\n\r\n      // then draw projected meshes\r\n      if (renderPassEntry.stack.projected.opaque.length || renderPassEntry.stack.projected.transparent.length) {\r\n        for (const mesh of renderPassEntry.stack.projected.opaque) {\r\n          mesh.render(pass)\r\n        }\r\n\r\n        this.sortTransparentMeshes(renderPassEntry.stack.projected.transparent as ProjectedMesh[])\r\n\r\n        for (const mesh of renderPassEntry.stack.projected.transparent) {\r\n          mesh.render(pass)\r\n        }\r\n      }\r\n    }\r\n\r\n    !this.renderer.production && pass.popDebugGroup()\r\n    pass.end()\r\n\r\n    renderPassEntry.onAfterRenderPass && renderPassEntry.onAfterRenderPass(commandEncoder, swapChainTexture)\r\n\r\n    this.renderer.pipelineManager.resetCurrentPipeline()\r\n  }\r\n\r\n  /**\r\n   * Before actually rendering the scene, update matrix stack and frustum culling checks. Batching these calls greatly improve performance.\r\n   */\r\n  onBeforeRender() {\r\n    // execute meshes onBeforeRender callback if needed\r\n    for (let i = 0, l = this.renderer.meshes.length; i < l; i++) {\r\n      this.renderer.meshes[i].onBeforeRenderScene()\r\n    }\r\n\r\n    // update matrices\r\n    this.updateMatrixStack()\r\n\r\n    // TODO store projected meshes only?\r\n    // frustum culling check if needed\r\n    for (const mesh of this.renderer.meshes) {\r\n      if ('checkFrustumCulling' in mesh && mesh.visible) {\r\n        mesh.checkFrustumCulling()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Render our {@link Scene}\r\n   * - Execute {@link onBeforeRender} first\r\n   * - Then render {@link computePassEntries}\r\n   * - And finally render our {@link renderPassEntries}\r\n   * @param commandEncoder - current {@link GPUCommandEncoder}\r\n   */\r\n  render(commandEncoder: GPUCommandEncoder) {\r\n    this.onBeforeRender()\r\n\r\n    for (const computePass of this.computePassEntries) {\r\n      const pass = commandEncoder.beginComputePass()\r\n      computePass.render(pass)\r\n      pass.end()\r\n\r\n      computePass.copyBufferToResult(commandEncoder)\r\n\r\n      this.renderer.pipelineManager.resetCurrentPipeline()\r\n    }\r\n\r\n    for (const renderPassEntryType in this.renderPassEntries) {\r\n      let passDrawnCount = 0\r\n\r\n      this.renderPassEntries[renderPassEntryType].forEach((renderPassEntry) => {\r\n        // early bail if there's nothing to draw\r\n        if (!this.getRenderPassEntryLength(renderPassEntry)) return\r\n\r\n        // if we're drawing to screen and it's not our first pass, load result from previous passes\r\n        // post processing scene pass will clear content inside onBeforeRenderPass anyway\r\n        renderPassEntry.renderPass.setLoadOp(\r\n          renderPassEntryType === 'screen' && passDrawnCount !== 0 ? 'load' : 'clear'\r\n        )\r\n\r\n        passDrawnCount++\r\n\r\n        this.renderSinglePassEntry(commandEncoder, renderPassEntry)\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { generateUUID } from '../../utils/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { Texture } from '../textures/Texture'\r\n\r\n/** Define the parameters of a color attachment */\r\nexport interface ColorAttachmentParams {\r\n  /** The {@link GPULoadOp | load operation} to perform while drawing this {@link RenderPass} */\r\n  loadOp?: GPULoadOp\r\n  /** The {@link GPUStoreOp | store operation} to perform while drawing this {@link RenderPass} */\r\n  storeOp?: GPUStoreOp\r\n  /** The {@link GPUColor | color values} to clear to before drawing this {@link RenderPass} */\r\n  clearValue?: GPUColor\r\n  /** Optional format of the color attachment texture */\r\n  targetFormat: GPUTextureFormat\r\n}\r\n\r\n/**\r\n * Parameters used to create this {@link RenderPass}\r\n */\r\nexport interface RenderPassParams {\r\n  /** The label of the {@link RenderPass}, sent to various GPU objects for debugging purpose */\r\n  label?: string\r\n\r\n  /** Whether the {@link RenderPass | view and depth textures} should use multisampling or not */\r\n  sampleCount?: GPUSize32\r\n\r\n  /** Force all the {@link RenderPass} textures size to be set to the given ratio of the {@link core/renderers/GPURenderer.GPURenderer#canvas | renderer canvas} size. Used mainly to lower the rendered definition. */\r\n  qualityRatio?: number\r\n\r\n  /** Whether this {@link RenderPass} should handle a view texture */\r\n  useColorAttachments?: boolean\r\n\r\n  /** Whether the main (first {@link colorAttachments}) view texture should use the content of the swap chain and render to it each frame */\r\n  renderToSwapChain?: boolean\r\n\r\n  /** Array of one or multiple (Multiple Render Targets) color attachments parameters. */\r\n  colorAttachments?: ColorAttachmentParams[]\r\n\r\n  /** Whether this {@link RenderPass} should handle a depth texture */\r\n  useDepth?: boolean\r\n  /** Whether this {@link RenderPass} should use an already created depth texture */\r\n  depthTexture?: Texture\r\n  /** The {@link GPULoadOp | depth load operation} to perform while drawing this {@link RenderPass} */\r\n  depthLoadOp?: GPULoadOp\r\n  /** The {@link GPUStoreOp | depth store operation} to perform while drawing this {@link RenderPass} */\r\n  depthStoreOp?: GPUStoreOp\r\n  /** The depth clear value to clear to before drawing this {@link RenderPass} */\r\n  depthClearValue?: number\r\n  /** Optional format of the depth texture */\r\n  depthFormat?: GPUTextureFormat\r\n}\r\n\r\n/**\r\n * Used by {@link core/renderPasses/RenderTarget.RenderTarget | RenderTarget} and the {@link Renderer} to render to one or multiple {@link RenderPass#viewTextures | view textures} (and optionally a {@link RenderPass#depthTexture | depth texture}), using a specific {@link GPURenderPassDescriptor | render pass descriptor}.\r\n */\r\nexport class RenderPass {\r\n  /** {@link Renderer} used by this {@link RenderPass} */\r\n  renderer: Renderer\r\n  /** The type of the {@link RenderPass} */\r\n  type: string\r\n  /** The universal unique id of this {@link RenderPass} */\r\n  readonly uuid: string\r\n\r\n  /** Options used to create this {@link RenderPass} */\r\n  options: RenderPassParams\r\n\r\n  /** Depth {@link Texture} to use with this {@link RenderPass} if it should handle depth */\r\n  depthTexture: Texture | undefined\r\n\r\n  /** Array of {@link Texture} used for this {@link RenderPass} color attachments view textures */\r\n  viewTextures: Texture[]\r\n\r\n  /** Array of {@link Texture} used for this {@link RenderPass} color attachments resolve textures */\r\n  resolveTargets: Array<null | Texture>\r\n\r\n  /** The {@link RenderPass} {@link GPURenderPassDescriptor | descriptor} */\r\n  descriptor: GPURenderPassDescriptor\r\n\r\n  /**\r\n   * RenderPass constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link RenderPass}\r\n   * @param parameters - {@link RenderPassParams | parameters} used to create this {@link RenderPass}\r\n   */\r\n  constructor(\r\n    renderer: Renderer | GPUCurtains,\r\n    {\r\n      label = 'Render Pass',\r\n      sampleCount = 4,\r\n      qualityRatio = 1,\r\n      // color\r\n      useColorAttachments = true,\r\n      renderToSwapChain = true,\r\n      colorAttachments = [],\r\n      // depth\r\n      useDepth = true,\r\n      depthTexture = null,\r\n      depthLoadOp = 'clear' as GPULoadOp,\r\n      depthStoreOp = 'store' as GPUStoreOp,\r\n      depthClearValue = 1,\r\n      depthFormat = 'depth24plus' as GPUTextureFormat,\r\n    } = {} as RenderPassParams\r\n  ) {\r\n    renderer = isRenderer(renderer, 'RenderPass')\r\n\r\n    this.type = 'RenderPass'\r\n    this.uuid = generateUUID()\r\n\r\n    this.renderer = renderer\r\n\r\n    if (useColorAttachments) {\r\n      const defaultColorAttachment = {\r\n        loadOp: 'clear' as GPULoadOp,\r\n        storeOp: 'store' as GPUStoreOp,\r\n        clearValue: [0, 0, 0, 0] as GPUColor,\r\n        targetFormat: this.renderer.options.preferredFormat,\r\n      }\r\n\r\n      if (!colorAttachments.length) {\r\n        colorAttachments = [defaultColorAttachment]\r\n      } else {\r\n        colorAttachments = colorAttachments.map((colorAttachment) => {\r\n          return { ...defaultColorAttachment, ...colorAttachment }\r\n        })\r\n      }\r\n    }\r\n\r\n    this.options = {\r\n      label,\r\n      sampleCount,\r\n      qualityRatio,\r\n      // color\r\n      useColorAttachments,\r\n      renderToSwapChain,\r\n      colorAttachments,\r\n      // depth\r\n      useDepth,\r\n      ...(depthTexture !== undefined && { depthTexture }),\r\n      depthLoadOp,\r\n      depthStoreOp,\r\n      depthClearValue,\r\n      depthFormat,\r\n    }\r\n\r\n    // if needed, create a depth texture before our descriptor\r\n    if (this.options.useDepth) {\r\n      this.createDepthTexture()\r\n    }\r\n\r\n    // if needed, create a view texture before our descriptor\r\n    this.viewTextures = []\r\n    this.resolveTargets = []\r\n    if (this.options.useColorAttachments && (!this.options.renderToSwapChain || this.options.sampleCount > 1)) {\r\n      this.createViewTextures()\r\n      this.createResolveTargets()\r\n    }\r\n\r\n    this.setRenderPassDescriptor()\r\n  }\r\n\r\n  /**\r\n   * Create and set our {@link depthTexture | depth texture}\r\n   */\r\n  createDepthTexture() {\r\n    if (this.options.depthTexture) {\r\n      this.depthTexture = this.options.depthTexture\r\n      // adjust depth format as well\r\n      this.options.depthFormat = this.options.depthTexture.options.format\r\n    } else {\r\n      this.depthTexture = new Texture(this.renderer, {\r\n        label: this.options.label + ' depth texture',\r\n        name: 'depthTexture',\r\n        format: this.options.depthFormat,\r\n        sampleCount: this.options.sampleCount,\r\n        qualityRatio: this.options.qualityRatio,\r\n        type: 'depth',\r\n        usage: ['renderAttachment', 'textureBinding'],\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create and set our {@link viewTextures | view textures}\r\n   */\r\n  createViewTextures() {\r\n    this.options.colorAttachments.forEach((colorAttachment, index) => {\r\n      this.viewTextures.push(\r\n        new Texture(this.renderer, {\r\n          label: `${this.options.label} colorAttachment[${index}] view texture`,\r\n          name: `colorAttachment${index}ViewTexture`,\r\n          format: colorAttachment.targetFormat,\r\n          sampleCount: this.options.sampleCount,\r\n          qualityRatio: this.options.qualityRatio,\r\n          type: 'texture',\r\n          usage: ['copySrc', 'copyDst', 'renderAttachment', 'textureBinding'],\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Create and set our {@link resolveTargets | resolve targets} in case the {@link viewTextures} are multisampled.\r\n   *\r\n   * Note that if this {@link RenderPass} should {@link RenderPassParams#renderToSwapChain | render to the swap chain}, the first resolve target will be set to `null` as the current swap chain texture will be used anyway in the render loop (see {@link updateView}).\r\n   */\r\n  createResolveTargets() {\r\n    if (this.options.sampleCount > 1) {\r\n      this.options.colorAttachments.forEach((colorAttachment, index) => {\r\n        this.resolveTargets.push(\r\n          this.options.renderToSwapChain && index === 0\r\n            ? null\r\n            : new Texture(this.renderer, {\r\n                label: `${this.options.label} resolve target[${index}] texture`,\r\n                name: `resolveTarget${index}Texture`,\r\n                format: colorAttachment.targetFormat,\r\n                sampleCount: 1,\r\n                qualityRatio: this.options.qualityRatio,\r\n                type: 'texture',\r\n              })\r\n        )\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the textures outputted by this {@link RenderPass}, which means the {@link viewTextures} if not multisampled, or their {@link resolveTargets} else (beware that the first resolve target might be `null` if this {@link RenderPass} should {@link RenderPassParams#renderToSwapChain | render to the swap chain}).\r\n   *\r\n   * @readonly\r\n   */\r\n  get outputTextures(): Texture[] {\r\n    return this.options.sampleCount > 1 ? this.resolveTargets : this.viewTextures\r\n  }\r\n\r\n  /**\r\n   * Set our render pass {@link descriptor}\r\n   */\r\n  setRenderPassDescriptor() {\r\n    this.descriptor = {\r\n      label: this.options.label + ' descriptor',\r\n      colorAttachments: this.options.colorAttachments.map((colorAttachment, index) => {\r\n        return {\r\n          // view\r\n          view: this.viewTextures[index]?.texture.createView({\r\n            label: this.viewTextures[index]?.texture.label + ' view',\r\n          }),\r\n          ...(this.resolveTargets.length && {\r\n            resolveTarget: this.resolveTargets[index]?.texture.createView({\r\n              label: this.resolveTargets[index]?.texture.label + ' view',\r\n            }),\r\n          }),\r\n          // clear values\r\n          clearValue: colorAttachment.clearValue,\r\n          // loadOp: 'clear' specifies to clear the texture to the clear value before drawing\r\n          // The other option is 'load' which means load the existing contents of the texture into the GPU so we can draw over what's already there.\r\n          loadOp: colorAttachment.loadOp,\r\n          // storeOp: 'store' means store the result of what we draw.\r\n          // We could also pass 'discard' which would throw away what we draw.\r\n          // see https://webgpufundamentals.org/webgpu/lessons/webgpu-multisampling.html\r\n          storeOp: colorAttachment.storeOp,\r\n        }\r\n      }),\r\n\r\n      ...(this.options.useDepth && {\r\n        depthStencilAttachment: {\r\n          view: this.depthTexture.texture.createView({\r\n            label: this.depthTexture.texture.label + ' view',\r\n          }),\r\n          depthClearValue: this.options.depthClearValue,\r\n          // the same way loadOp is working, we can specify if we want to clear or load the previous depth buffer result\r\n          depthLoadOp: this.options.depthLoadOp,\r\n          depthStoreOp: this.options.depthStoreOp,\r\n        },\r\n      }),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link RenderPass}: reset its {@link Texture}\r\n   */\r\n  resize() {\r\n    // reassign textures\r\n    if (this.options.useDepth) {\r\n      this.descriptor.depthStencilAttachment.view = this.depthTexture.texture.createView({\r\n        label: this.depthTexture.options.label + ' view',\r\n      })\r\n    }\r\n\r\n    this.viewTextures.forEach((viewTexture, index) => {\r\n      this.descriptor.colorAttachments[index].view = viewTexture.texture.createView({\r\n        label: viewTexture.options.label + ' view',\r\n      })\r\n    })\r\n\r\n    this.resolveTargets.forEach((resolveTarget, index) => {\r\n      if (resolveTarget) {\r\n        this.descriptor.colorAttachments[index].resolveTarget = resolveTarget.texture.createView({\r\n          label: resolveTarget.options.label + ' view',\r\n        })\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set the {@link descriptor} {@link GPULoadOp | load operation}\r\n   * @param loadOp - new {@link GPULoadOp | load operation} to use\r\n   * @param colorAttachmentIndex - index of the color attachment for which to use this load operation\r\n   */\r\n  setLoadOp(loadOp: GPULoadOp = 'clear', colorAttachmentIndex = 0) {\r\n    if (this.options.useColorAttachments) {\r\n      if (this.options.colorAttachments[colorAttachmentIndex]) {\r\n        this.options.colorAttachments[colorAttachmentIndex].loadOp = loadOp\r\n      }\r\n\r\n      if (this.descriptor) {\r\n        if (this.descriptor.colorAttachments && this.descriptor.colorAttachments[colorAttachmentIndex]) {\r\n          this.descriptor.colorAttachments[colorAttachmentIndex].loadOp = loadOp\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the {@link descriptor} {@link GPULoadOp | depth load operation}\r\n   * @param depthLoadOp - new {@link GPULoadOp | depth load operation} to use\r\n   */\r\n  setDepthLoadOp(depthLoadOp: GPULoadOp = 'clear') {\r\n    this.options.depthLoadOp = depthLoadOp\r\n    if (this.options.useDepth && this.descriptor.depthStencilAttachment) {\r\n      this.descriptor.depthStencilAttachment.depthLoadOp = depthLoadOp\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set our {@link GPUColor | clear colors value}.<br>\r\n   * Beware that if the {@link renderer} is using {@link core/renderers/GPURenderer.GPURenderer#alphaMode | premultiplied alpha mode}, your R, G and B channels should be premultiplied by your alpha channel.\r\n   * @param clearValue - new {@link GPUColor | clear colors value} to use\r\n   * @param colorAttachmentIndex - index of the color attachment for which to use this clear value\r\n   */\r\n  setClearValue(clearValue: GPUColor = [0, 0, 0, 0], colorAttachmentIndex = 0) {\r\n    if (this.options.useColorAttachments) {\r\n      if (this.renderer.alphaMode === 'premultiplied') {\r\n        const alpha = clearValue[3]\r\n        clearValue[0] = Math.min(clearValue[0], alpha)\r\n        clearValue[1] = Math.min(clearValue[1], alpha)\r\n        clearValue[2] = Math.min(clearValue[2], alpha)\r\n      }\r\n\r\n      if (this.options.colorAttachments[colorAttachmentIndex]) {\r\n        this.options.colorAttachments[colorAttachmentIndex].clearValue = clearValue\r\n      }\r\n\r\n      if (this.descriptor) {\r\n        if (this.descriptor.colorAttachments && this.descriptor.colorAttachments[colorAttachmentIndex]) {\r\n          this.descriptor.colorAttachments[colorAttachmentIndex].clearValue = clearValue\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the current {@link descriptor} texture {@link GPURenderPassColorAttachment#view | view} and {@link GPURenderPassColorAttachment#resolveTarget | resolveTarget} (depending on whether we're using multisampling)\r\n   * @param renderTexture - {@link GPUTexture} to use, or the {@link core/renderers/GPURenderer.GPURenderer#context | context} {@link GPUTexture | current texture} if null.\r\n   * @returns - the {@link GPUTexture | texture} to render to.\r\n   */\r\n  updateView(renderTexture: GPUTexture | null = null): GPUTexture | null {\r\n    if (!this.options.colorAttachments.length || !this.options.renderToSwapChain) {\r\n      return renderTexture\r\n    }\r\n\r\n    if (!renderTexture) {\r\n      renderTexture = this.renderer.context.getCurrentTexture()\r\n      renderTexture.label = `${this.renderer.type} context current texture`\r\n    }\r\n\r\n    if (this.options.sampleCount > 1) {\r\n      this.descriptor.colorAttachments[0].view = this.viewTextures[0].texture.createView({\r\n        label: this.viewTextures[0].options.label + ' view',\r\n      })\r\n      this.descriptor.colorAttachments[0].resolveTarget = renderTexture.createView({\r\n        label: renderTexture.label + ' resolve target view',\r\n      })\r\n    } else {\r\n      this.descriptor.colorAttachments[0].view = renderTexture.createView({\r\n        label: renderTexture.label + ' view',\r\n      })\r\n    }\r\n\r\n    return renderTexture\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link RenderPass}\r\n   */\r\n  destroy() {\r\n    this.viewTextures.forEach((viewTexture) => viewTexture.destroy())\r\n    this.resolveTargets.forEach((resolveTarget) => resolveTarget?.destroy())\r\n\r\n    if (!this.options.depthTexture && this.depthTexture) {\r\n      this.depthTexture.destroy()\r\n    }\r\n  }\r\n}\r\n","/** Defines a task queue item */\nexport interface TaskQueueItem {\n  /** Unique id of the task queue item */\n  id: number\n  /** Priority order in the {@link TasksQueueManager#queue | tasks queue array} */\n  order: number\n  /** Callback to execute */\n  callback: (args?: any) => void\n  /** Whether to execute the task only once and them automatically remove it from the {@link TasksQueueManager#queue | tasks queue array} */\n  once: boolean\n}\n\n/** Parameters used to add a task to the {@link TasksQueueManager#queue | tasks queue array} */\nexport type TaskQueueItemParams = Partial<Omit<TaskQueueItem, 'id' | 'callback'>>\n\n/**\n * Used to keep track of a bunch of callbacks and execute them in the right order when needed\n */\nexport class TasksQueueManager {\n  /** Array of {@link TaskQueueItem | task queue item} to execute */\n  queue: TaskQueueItem[]\n  /** Private number to assign a unique id to each {@link TaskQueueItem | task queue item} */\n  #taskCount = 0\n\n  /**\n   * TaskQueueManager constructor\n   */\n  constructor() {\n    this.queue = []\n  }\n\n  /**\n   * Add a {@link TaskQueueItem | task queue item} to the queue\n   * @param callback - callback to add to the {@link TaskQueueItem | task queue item}\n   * @param parameters - {@link TaskQueueItemParams | parameters} of the {@link TaskQueueItem | task queue item} to add\n   * @returns - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item}, useful to later remove the task if needed\n   */\n  add(\n    callback: TaskQueueItem['callback'] = (args?: any) => {\n      /* allow empty callbacks */\n    },\n    { order = this.queue.length, once = false } = {} as TaskQueueItemParams\n  ): TaskQueueItem['id'] {\n    const task = {\n      callback,\n      order,\n      once,\n      id: this.#taskCount,\n    }\n\n    // increment id\n    this.#taskCount++\n\n    this.queue.push(task)\n    this.queue.sort((a, b) => {\n      return a.order - b.order\n    })\n\n    return task.id\n  }\n\n  /**\n   * Remove a {@link TaskQueueItem | task queue item} from the queue\n   * @param taskId - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item} to remove\n   */\n  remove(taskId = 0) {\n    this.queue = this.queue.filter((task) => task.id !== taskId)\n  }\n\n  /**\n   * Execute the {@link TasksQueueManager#queue | tasks queue array}\n   */\n  execute(args?: any) {\n    this.queue.forEach((task) => {\n      task.callback(args)\n\n      // if it was a one time callback, remove it\n      if (task.once) {\n        this.remove(task.id)\n      }\n    })\n  }\n}\n","import { PipelineManager } from '../pipelines/PipelineManager'\r\nimport { DOMElement, DOMElementBoundingRect, RectBBox, RectSize } from '../DOM/DOMElement'\r\nimport { Scene } from '../scenes/Scene'\r\nimport { RenderPass, RenderPassParams } from '../renderPasses/RenderPass'\r\nimport { generateUUID, throwError, throwWarning } from '../../utils/utils'\r\n\r\nimport { ComputePass } from '../computePasses/ComputePass'\r\nimport { PingPongPlane } from '../../extras/meshes/PingPongPlane'\r\nimport { ShaderPass } from '../renderPasses/ShaderPass'\r\nimport { RenderTarget } from '../renderPasses/RenderTarget'\r\nimport { DOMTexture } from '../textures/DOMTexture'\r\nimport { Sampler } from '../samplers/Sampler'\r\n\r\nimport { DOMMesh } from '../../curtains/meshes/DOMMesh'\r\nimport { Plane } from '../../curtains/meshes/Plane'\r\nimport { Mesh } from '../meshes/Mesh'\r\nimport { TasksQueueManager } from '../../utils/TasksQueueManager'\r\nimport { AllowedBindGroups } from '../../types/BindGroups'\r\nimport { Texture } from '../textures/Texture'\r\nimport { GPUDeviceManager } from './GPUDeviceManager'\r\nimport { FullscreenPlane } from '../meshes/FullscreenPlane'\r\nimport { Buffer } from '../buffers/Buffer'\r\n\r\n/**\r\n * Parameters used to create a {@link GPURenderer}\r\n */\r\nexport interface GPURendererParams {\r\n  /** The {@link GPUDeviceManager} used to create this {@link GPURenderer} */\r\n  deviceManager: GPUDeviceManager\r\n\r\n  /** Optional label of this {@link GPURenderer} */\r\n  label?: string\r\n  /** {@link HTMLElement} or selector used as a container for our {@link GPURenderer#canvas | canvas}. Could also be directly a {@link HTMLCanvasElement | canvas element}. */\r\n  container: string | HTMLElement\r\n  /** Pixel ratio to use for rendering */\r\n  pixelRatio?: number\r\n\r\n  /** Whether to auto resize the renderer each time its {@link GPURenderer#domElement} size changes or not. It is advised to set this parameter to `false` if the provided {@link container} is a {@link HTMLCanvasElement | canvas element}, and handle {@link GPURenderer#resize | resizing} by yourself. */\r\n  autoResize?: boolean\r\n  /** Texture rendering {@link GPUTextureFormat | preferred format} */\r\n  preferredFormat?: GPUTextureFormat\r\n  /** Set the {@link GPUCanvasContext | context} alpha mode */\r\n  alphaMode?: GPUCanvasAlphaMode\r\n\r\n  /** The {@link GPURenderer#renderPass | renderer RenderPass} parameters */\r\n  renderPass?: {\r\n    /** Whether the {@link GPURenderer#renderPass | renderer RenderPass} should handle depth. Default to `true` */\r\n    useDepth: RenderPassParams['useDepth']\r\n    /** The {@link GPURenderer#renderPass | renderer RenderPass} sample count (i.e. whether it should use multisampled antialiasing). Default to `4` */\r\n    sampleCount: RenderPassParams['sampleCount']\r\n    /** The {@link GPUColor | color values} to clear to before drawing the {@link GPURenderer#renderPass | renderer RenderPass}. Default to `[0, 0, 0, 0]` */\r\n    clearValue: GPUColor\r\n  }\r\n}\r\n\r\n/** Any Mesh that is bound to a DOM Element */\r\nexport type DOMProjectedMesh = DOMMesh | Plane\r\n/** Any Mesh that is projected (i.e use a {@link core/camera/Camera.Camera | Camera} to compute a model view projection matrix) */\r\nexport type ProjectedMesh = Mesh | DOMProjectedMesh\r\n/** Any Mesh that can be drawn (including fullscreen quad meshes) and that will be put in the {@link Scene} meshes stacks */\r\nexport type SceneStackedMesh = ProjectedMesh | FullscreenPlane\r\n/** Any Mesh that can be drawn, including fullscreen quad meshes used for post processing and {@link PingPongPlane} */\r\nexport type RenderedMesh = SceneStackedMesh | PingPongPlane | ShaderPass\r\n/** Any Mesh or Compute pass */\r\nexport type SceneObject = RenderedMesh | ComputePass\r\n\r\n/**\r\n * Base renderer class, that could technically be used to render compute passes and draw fullscreen quads, even tho it is strongly advised to use at least the {@link core/renderers/GPUCameraRenderer.GPUCameraRenderer | GPUCameraRenderer} class instead.\r\n * A renderer is responsible for:\r\n * - Setting a {@link GPUCanvasContext | context}\r\n * - Handling the {@link HTMLCanvasElement | canvas} onto everything is drawn\r\n * - Creating a {@link RenderPass} that will handle our render and depth textures and the render pass descriptor\r\n * - Keeping track of every specific class objects created relative to computing and rendering\r\n * - Creating a {@link Scene} class that will take care of the rendering process of all previously mentioned objects\r\n */\r\nexport class GPURenderer {\r\n  /** The type of the {@link GPURenderer} */\r\n  type: string\r\n  /** The universal unique id of this {@link GPURenderer} */\r\n  readonly uuid: string\r\n\r\n  /** The {@link GPUDeviceManager} used to create this {@link GPURenderer} */\r\n  deviceManager: GPUDeviceManager\r\n\r\n  /** {@link HTMLCanvasElement} onto everything is drawn */\r\n  canvas: HTMLCanvasElement\r\n  /** The WebGPU {@link GPUCanvasContext | context} used */\r\n  context: null | GPUCanvasContext\r\n  /** Set the {@link GPUCanvasContext | context} alpha mode */\r\n  alphaMode?: GPUCanvasAlphaMode\r\n\r\n  /** Options used to create this {@link GPURenderer} */\r\n  options: GPURendererParams\r\n\r\n  /** The {@link RenderPass | render pass} used to render our result to screen */\r\n  renderPass: RenderPass\r\n  /** Additional {@link RenderPass | render pass} used by {@link ShaderPass} for compositing / post processing. Does not handle depth */\r\n  postProcessingPass: RenderPass\r\n\r\n  /** The {@link Scene} used */\r\n  scene: Scene\r\n\r\n  /** Whether we should render our {@link GPURenderer} or not. If set to `false`, the render hooks {@link onBeforeCommandEncoderCreation}, {@link onBeforeRenderScene}, {@link onAfterRenderScene} and {@link onAfterCommandEncoderSubmission} won't be called, the scene graph will not be updated and the scene will not be rendered, completely pausing the renderer. Default to `true`. */\r\n  shouldRender: boolean\r\n\r\n  /** Whether we should explicitly update our {@link Scene} or not. If set to `false`, the scene graph will not be updated and the scene will not be rendered. Default to `true`. */\r\n  shouldRenderScene: boolean\r\n\r\n  /** An array containing all our created {@link ComputePass} */\r\n  computePasses: ComputePass[]\r\n  /** An array containing all our created {@link PingPongPlane} */\r\n  pingPongPlanes: PingPongPlane[]\r\n  /** An array containing all our created {@link ShaderPass} */\r\n  shaderPasses: ShaderPass[]\r\n  /** An array containing all our created {@link RenderTarget} */\r\n  renderTargets: RenderTarget[]\r\n  /** An array containing all our created {@link SceneStackedMesh | meshes} */\r\n  meshes: SceneStackedMesh[]\r\n  /** An array containing all our created {@link Texture} */\r\n  textures: Texture[]\r\n\r\n  /** Pixel ratio to use for rendering */\r\n  pixelRatio: number\r\n  /** An object defining the width, height, top and left position of the canvas. Mainly used internally. If you need to get the renderer dimensions, use {@link boundingRect} instead. */\r\n  rectBBox: RectBBox\r\n\r\n  /** {@link DOMElement} that will track our canvas container size */\r\n  domElement: DOMElement | undefined\r\n\r\n  /** Allow to add callbacks to be executed at each render before the {@link GPUCommandEncoder} is created */\r\n  onBeforeCommandEncoderCreation: TasksQueueManager\r\n  /** Allow to add callbacks to be executed at each render after the {@link GPUCommandEncoder} has been created but before the {@link Scene} is rendered */\r\n  onBeforeRenderScene: TasksQueueManager\r\n  /** Allow to add callbacks to be executed at each render after the {@link GPUCommandEncoder} has been created and after the {@link Scene} has been rendered */\r\n  onAfterRenderScene: TasksQueueManager\r\n  /** Allow to add callbacks to be executed at each render after the {@link Scene} has been rendered and the {@link GPUCommandEncoder} has been submitted */\r\n  onAfterCommandEncoderSubmission: TasksQueueManager\r\n\r\n  // callbacks / events\r\n  /** function assigned to the {@link onBeforeRender} callback */\r\n  _onBeforeRenderCallback = (commandEncoder: GPUCommandEncoder) => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onAfterRender} callback */\r\n  _onAfterRenderCallback = (commandEncoder: GPUCommandEncoder) => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link resizeObjects} callback */\r\n  _onResizeCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onAfterResize} callback */\r\n  _onAfterResizeCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n\r\n  /**\r\n   * GPURenderer constructor\r\n   * @param parameters - {@link GPURendererParams | parameters} used to create this {@link GPURenderer}\r\n   */\r\n  constructor({\r\n    deviceManager,\r\n    label = 'Main renderer',\r\n    container,\r\n    pixelRatio = 1,\r\n    autoResize = true,\r\n    preferredFormat,\r\n    alphaMode = 'premultiplied',\r\n    renderPass,\r\n  }: GPURendererParams) {\r\n    this.type = 'GPURenderer'\r\n    this.uuid = generateUUID()\r\n\r\n    if (!deviceManager) {\r\n      throwError(`GPURenderer (${label}): no device manager provided: ${deviceManager}`)\r\n    }\r\n\r\n    this.deviceManager = deviceManager\r\n    this.deviceManager.addRenderer(this)\r\n\r\n    this.shouldRender = true\r\n    this.shouldRenderScene = true\r\n\r\n    // render pass default values\r\n    renderPass = { ...{ useDepth: true, sampleCount: 4, clearValue: [0, 0, 0, 0] }, ...renderPass }\r\n    preferredFormat = preferredFormat ?? this.deviceManager.gpu?.getPreferredCanvasFormat()\r\n\r\n    this.options = {\r\n      deviceManager,\r\n      label,\r\n      container,\r\n      pixelRatio,\r\n      autoResize,\r\n      preferredFormat,\r\n      alphaMode,\r\n      renderPass,\r\n    }\r\n\r\n    this.pixelRatio = pixelRatio ?? window.devicePixelRatio ?? 1\r\n    this.alphaMode = alphaMode\r\n\r\n    // create the canvas\r\n    const isOffscreenCanvas = container instanceof OffscreenCanvas\r\n    const isContainerCanvas = isOffscreenCanvas || container instanceof HTMLCanvasElement\r\n    this.canvas = isContainerCanvas ? (container as HTMLCanvasElement) : document.createElement('canvas')\r\n\r\n    // set default size\r\n    const { width, height } = this.canvas\r\n    this.rectBBox = {\r\n      width,\r\n      height,\r\n      top: 0,\r\n      left: 0,\r\n    }\r\n\r\n    this.setScene()\r\n    this.setTasksQueues()\r\n    this.setRendererObjects()\r\n\r\n    if (!isOffscreenCanvas) {\r\n      // needed to get container bounding box\r\n      this.domElement = new DOMElement({\r\n        element: container,\r\n        priority: 5, // renderer callback need to be called first\r\n        onSizeChanged: () => {\r\n          if (this.options.autoResize) this.resize()\r\n        },\r\n      })\r\n\r\n      // now that we have a domElement, resize right away\r\n      this.resize()\r\n\r\n      if (!isContainerCanvas) {\r\n        // append the canvas\r\n        this.domElement.element.appendChild(this.canvas)\r\n      }\r\n    }\r\n\r\n    // device is already available? create the context!\r\n    if (this.deviceManager.device) {\r\n      this.setContext()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the renderer {@link RectBBox} and canvas sizes\r\n   * @param rectBBox - the optional new {@link canvas} {@link RectBBox} to set\r\n   */\r\n  setSize(rectBBox: Partial<RectBBox> | null = null) {\r\n    // patch rect bbox with missing values from bounding rect if needed\r\n    rectBBox = {\r\n      ...{\r\n        width: Math.max(1, this.boundingRect.width),\r\n        height: Math.max(1, this.boundingRect.height),\r\n        top: this.boundingRect.top,\r\n        left: this.boundingRect.left,\r\n      },\r\n      ...rectBBox,\r\n    }\r\n\r\n    this.rectBBox = rectBBox as RectBBox\r\n\r\n    const renderingSize = {\r\n      width: this.rectBBox.width,\r\n      height: this.rectBBox.height,\r\n    }\r\n\r\n    renderingSize.width *= this.pixelRatio\r\n    renderingSize.height *= this.pixelRatio\r\n\r\n    this.clampToMaxDimension(renderingSize)\r\n\r\n    // canvas rendering size\r\n    this.canvas.width = Math.floor(renderingSize.width)\r\n    this.canvas.height = Math.floor(renderingSize.height)\r\n\r\n    // canvas display size\r\n    if (this.canvas.style) {\r\n      this.canvas.style.width = this.rectBBox.width + 'px'\r\n      this.canvas.style.height = this.rectBBox.height + 'px'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the renderer {@link pixelRatio | pixel ratio} and {@link resize} it\r\n   * @param pixelRatio - new pixel ratio to use\r\n   */\r\n  setPixelRatio(pixelRatio: number = 1) {\r\n    this.pixelRatio = pixelRatio\r\n    this.resize(this.rectBBox)\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link GPURenderer}\r\n   * @param rectBBox - the optional new {@link canvas} {@link RectBBox} to set\r\n   */\r\n  resize(rectBBox: RectBBox | null = null) {\r\n    this.setSize(rectBBox)\r\n\r\n    this._onResizeCallback && this._onResizeCallback()\r\n\r\n    this.resizeObjects()\r\n\r\n    this._onAfterResizeCallback && this._onAfterResizeCallback()\r\n  }\r\n\r\n  /**\r\n   * Resize all tracked objects ({@link Texture | textures}, {@link RenderPass | render passes}, {@link RenderTarget | render targets}, {@link ComputePass | compute passes} and meshes).\r\n   */\r\n  resizeObjects() {\r\n    // resize textures first\r\n    this.textures.forEach((texture) => {\r\n      texture.resize()\r\n    })\r\n\r\n    // resize render & shader passes\r\n    this.renderPass?.resize()\r\n    this.postProcessingPass?.resize()\r\n\r\n    this.renderTargets.forEach((renderTarget) => renderTarget.resize())\r\n\r\n    // force compute passes onAfterResize callback\r\n    this.computePasses.forEach((computePass) => computePass.resize())\r\n\r\n    // now resize meshes that are bound to the renderer size\r\n    // especially useful to resize textures\r\n    this.pingPongPlanes.forEach((pingPongPlane) => pingPongPlane.resize(this.boundingRect))\r\n    this.shaderPasses.forEach((shaderPass) => shaderPass.resize(this.boundingRect))\r\n    this.resizeMeshes()\r\n  }\r\n\r\n  /**\r\n   * Resize the {@link meshes}.\r\n   */\r\n  resizeMeshes() {\r\n    this.meshes.forEach((mesh) => {\r\n      mesh.resize(this.boundingRect)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get our {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}. If there's no {@link domElement | DOM Element} (like when using an offscreen canvas for example), the {@link rectBBox} values are used.\r\n   */\r\n  get boundingRect(): DOMElementBoundingRect {\r\n    if (!!this.domElement && !!this.domElement.boundingRect) {\r\n      return this.domElement.boundingRect\r\n    } else if (!!this.domElement) {\r\n      const boundingRect = this.domElement.element?.getBoundingClientRect()\r\n      return {\r\n        top: boundingRect.top,\r\n        right: boundingRect.right,\r\n        bottom: boundingRect.bottom,\r\n        left: boundingRect.left,\r\n        width: boundingRect.width,\r\n        height: boundingRect.height,\r\n        x: boundingRect.x,\r\n        y: boundingRect.y,\r\n      }\r\n    } else {\r\n      return {\r\n        top: this.rectBBox.top,\r\n        right: this.rectBBox.left + this.rectBBox.width,\r\n        bottom: this.rectBBox.top + this.rectBBox.height,\r\n        left: this.rectBBox.left,\r\n        width: this.rectBBox.width,\r\n        height: this.rectBBox.height,\r\n        x: this.rectBBox.left,\r\n        y: this.rectBBox.top,\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clamp to max WebGPU texture dimensions\r\n   * @param dimension - width and height dimensions to clamp\r\n   */\r\n  clampToMaxDimension(dimension: RectSize | DOMElementBoundingRect) {\r\n    if (this.device) {\r\n      dimension.width = Math.min(this.device.limits.maxTextureDimension2D, dimension.width)\r\n      dimension.height = Math.min(this.device.limits.maxTextureDimension2D, dimension.height)\r\n    }\r\n  }\r\n\r\n  /* USEFUL DEVICE MANAGER OBJECTS */\r\n\r\n  /**\r\n   * Get our {@link GPUDeviceManager#device | device}\r\n   * @readonly\r\n   */\r\n  get device(): GPUDevice | undefined {\r\n    return this.deviceManager.device\r\n  }\r\n\r\n  /**\r\n   * Get whether our {@link GPUDeviceManager} is ready (i.e. its {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device} are set) its {@link context} is set and its size is set\r\n   * @readonly\r\n   */\r\n  get ready(): boolean {\r\n    return this.deviceManager.ready && !!this.context && !!this.canvas.width && !!this.canvas.height\r\n  }\r\n\r\n  /**\r\n   * Get our {@link GPUDeviceManager#production | GPUDeviceManager production flag}\r\n   * @readonly\r\n   */\r\n  get production(): boolean {\r\n    return this.deviceManager.production\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link GPUDeviceManager#samplers | samplers}\r\n   * @readonly\r\n   */\r\n  get samplers(): Sampler[] {\r\n    return this.deviceManager.samplers\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link GPUDeviceManager#buffers | GPU buffers}\r\n   * @readonly\r\n   */\r\n  get buffers(): Map<string, Buffer> {\r\n    return this.deviceManager.buffers\r\n  }\r\n\r\n  /**\r\n   * Get the {@link GPUDeviceManager#pipelineManager | pipeline manager}\r\n   * @readonly\r\n   */\r\n  get pipelineManager(): PipelineManager {\r\n    return this.deviceManager.pipelineManager\r\n  }\r\n\r\n  /**\r\n   * Get all the rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes) created by the {@link GPUDeviceManager}\r\n   * @readonly\r\n   */\r\n  get deviceRenderedObjects(): SceneObject[] {\r\n    return this.deviceManager.deviceRenderedObjects\r\n  }\r\n\r\n  /**\r\n   * Configure our {@link context} with the given options\r\n   */\r\n  configureContext() {\r\n    this.context.configure({\r\n      device: this.device,\r\n      format: this.options.preferredFormat,\r\n      alphaMode: this.alphaMode,\r\n      // needed so we can copy textures for post processing usage\r\n      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST,\r\n      //viewFormats: []\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our {@link context} if possible and set {@link renderPass | main render pass} and {@link scene}\r\n   */\r\n  setContext() {\r\n    this.context = this.canvas.getContext('webgpu')\r\n\r\n    if (this.device) {\r\n      this.configureContext()\r\n\r\n      this.setMainRenderPasses()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link GPUDeviceManager#device | device} is lost.\r\n   * Force all our scene objects to lose context.\r\n   */\r\n  loseContext() {\r\n    // force all our scene objects to lose context\r\n    this.renderedObjects.forEach((sceneObject) => sceneObject.loseContext())\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link GPUDeviceManager#device | device} should be restored.\r\n   * Configure the context again, resize the {@link RenderTarget | render targets} and {@link Texture | textures}, restore our {@link renderedObjects | rendered objects} context.\r\n   * @async\r\n   */\r\n  restoreContext() {\r\n    this.configureContext()\r\n\r\n    // recreate all textures first\r\n    this.textures.forEach((texture) => {\r\n      texture.createTexture()\r\n    })\r\n\r\n    // resize render passes/recreate their textures\r\n    this.renderPass?.resize()\r\n    this.postProcessingPass?.resize()\r\n\r\n    this.renderTargets.forEach((renderTarget) => renderTarget.resize())\r\n\r\n    // restore context of all our scene objects\r\n    this.renderedObjects.forEach((sceneObject) => sceneObject.restoreContext())\r\n  }\r\n\r\n  /* PIPELINES, SCENE & MAIN RENDER PASS */\r\n\r\n  /**\r\n   * Set our {@link renderPass | main render pass} that will be used to render the result of our draw commands back to the screen and our {@link postProcessingPass | postprocessing pass} that will be used for any additional postprocessing render passes.\r\n   */\r\n  setMainRenderPasses() {\r\n    this.renderPass = new RenderPass(this, {\r\n      label: this.options.label + ' render pass',\r\n      ...this.options.renderPass,\r\n    } as RenderPassParams)\r\n\r\n    // add to the scene stack\r\n    this.scene.setMainRenderPassEntry()\r\n\r\n    this.postProcessingPass = new RenderPass(this, {\r\n      label: this.options.label + ' post processing render pass',\r\n      // no need to handle depth or perform MSAA on a fullscreen quad\r\n      useDepth: false,\r\n      sampleCount: 1,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our {@link scene}\r\n   */\r\n  setScene() {\r\n    this.scene = new Scene({ renderer: this })\r\n  }\r\n\r\n  /* BUFFERS & BINDINGS */\r\n\r\n  /**\r\n   * Create a {@link GPUBuffer}\r\n   * @param buffer - {@link Buffer} to use for buffer creation\r\n   * @returns - newly created {@link GPUBuffer}\r\n   */\r\n  createBuffer(buffer: Buffer): GPUBuffer {\r\n    const GPUBuffer = this.deviceManager.device?.createBuffer(buffer.options)\r\n    this.deviceManager.addBuffer(buffer)\r\n    return GPUBuffer\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link Buffer} from our {@link GPUDeviceManager#buffers | buffers Map}\r\n   * @param buffer - {@link Buffer} to remove\r\n   */\r\n  removeBuffer(buffer: Buffer) {\r\n    this.deviceManager.removeBuffer(buffer)\r\n  }\r\n\r\n  /**\r\n   * Write to a {@link GPUBuffer}\r\n   * @param buffer - {@link GPUBuffer} to write to\r\n   * @param bufferOffset - {@link GPUSize64 | buffer offset}\r\n   * @param data - {@link BufferSource | data} to write\r\n   */\r\n  queueWriteBuffer(buffer: GPUBuffer, bufferOffset: GPUSize64, data: BufferSource) {\r\n    this.deviceManager.device?.queue.writeBuffer(buffer, bufferOffset, data)\r\n  }\r\n\r\n  /**\r\n   * Copy a source {@link Buffer#GPUBuffer | Buffer GPUBuffer} into a destination {@link Buffer#GPUBuffer | Buffer GPUBuffer}\r\n   * @param parameters - parameters used to realize the copy\r\n   * @param parameters.srcBuffer - source {@link Buffer}\r\n   * @param [parameters.dstBuffer] - destination {@link Buffer}. Will create a new one if none provided.\r\n   * @param [parameters.commandEncoder] - {@link GPUCommandEncoder} to use for the copy. Will create a new one and submit the command buffer if none provided.\r\n   * @returns - destination {@link Buffer} after copy\r\n   */\r\n  copyBufferToBuffer({\r\n    srcBuffer,\r\n    dstBuffer,\r\n    commandEncoder,\r\n  }: {\r\n    srcBuffer: Buffer\r\n    dstBuffer?: Buffer\r\n    commandEncoder?: GPUCommandEncoder\r\n  }): Buffer | null {\r\n    if (!srcBuffer || !srcBuffer.GPUBuffer) {\r\n      throwWarning(\r\n        `${this.type} (${this.options.label}): cannot copy to buffer because the source buffer has not been provided`\r\n      )\r\n      return null\r\n    }\r\n\r\n    if (!dstBuffer) {\r\n      dstBuffer = new Buffer()\r\n    }\r\n\r\n    if (!dstBuffer.GPUBuffer) {\r\n      dstBuffer.createBuffer(this, {\r\n        label: `GPURenderer (${this.options.label}): destination copy buffer from: ${srcBuffer.options.label}`,\r\n        size: srcBuffer.GPUBuffer.size,\r\n        //usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST,\r\n        usage: ['copyDst', 'mapRead'],\r\n      })\r\n    }\r\n\r\n    if (srcBuffer.GPUBuffer.mapState !== 'unmapped') {\r\n      throwWarning(\r\n        `${this.type} (${this.options.label}): Cannot copy from ${srcBuffer.GPUBuffer} because it is currently mapped`\r\n      )\r\n      return\r\n    }\r\n    if (dstBuffer.GPUBuffer.mapState !== 'unmapped') {\r\n      throwWarning(\r\n        `${this.type} (${this.options.label}): Cannot copy from ${dstBuffer.GPUBuffer} because it is currently mapped`\r\n      )\r\n      return\r\n    }\r\n\r\n    // if there's no command encoder provided, we'll have to create one and submit it after the copy process\r\n    const hasCommandEncoder = !!commandEncoder\r\n\r\n    if (!hasCommandEncoder) {\r\n      commandEncoder = this.deviceManager.device?.createCommandEncoder({\r\n        label: `${this.type} (${this.options.label}): Copy buffer command encoder`,\r\n      })\r\n      !this.production &&\r\n        commandEncoder.pushDebugGroup(`${this.type} (${this.options.label}): Copy buffer command encoder`)\r\n    }\r\n\r\n    commandEncoder.copyBufferToBuffer(srcBuffer.GPUBuffer, 0, dstBuffer.GPUBuffer, 0, dstBuffer.GPUBuffer.size)\r\n\r\n    if (!hasCommandEncoder) {\r\n      !this.production && commandEncoder.popDebugGroup()\r\n      const commandBuffer = commandEncoder.finish()\r\n      this.deviceManager.device?.queue.submit([commandBuffer])\r\n    }\r\n\r\n    return dstBuffer\r\n  }\r\n\r\n  /* BIND GROUPS & LAYOUTS */\r\n\r\n  /**\r\n   * Get all created {@link AllowedBindGroups | bind group} tracked by our {@link GPUDeviceManager}\r\n   * @readonly\r\n   */\r\n  get bindGroups(): Map<string, AllowedBindGroups> {\r\n    return this.deviceManager.bindGroups\r\n  }\r\n\r\n  /**\r\n   * Add a {@link AllowedBindGroups | bind group} to our {@link GPUDeviceManager#bindGroups | bind groups array}\r\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to add\r\n   */\r\n  addBindGroup(bindGroup: AllowedBindGroups) {\r\n    this.deviceManager.addBindGroup(bindGroup)\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link AllowedBindGroups | bind group} from our {@link GPUDeviceManager#bindGroups | bind groups array}\r\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to remove\r\n   */\r\n  removeBindGroup(bindGroup: AllowedBindGroups) {\r\n    this.deviceManager.removeBindGroup(bindGroup)\r\n  }\r\n\r\n  /**\r\n   * Create a {@link GPUBindGroupLayout}\r\n   * @param bindGroupLayoutDescriptor - {@link GPUBindGroupLayoutDescriptor | GPU bind group layout descriptor}\r\n   * @returns - newly created {@link GPUBindGroupLayout}\r\n   */\r\n  createBindGroupLayout(bindGroupLayoutDescriptor: GPUBindGroupLayoutDescriptor): GPUBindGroupLayout {\r\n    return this.deviceManager.device?.createBindGroupLayout(bindGroupLayoutDescriptor)\r\n  }\r\n\r\n  /**\r\n   * Create a {@link GPUBindGroup}\r\n   * @param bindGroupDescriptor - {@link GPUBindGroupDescriptor | GPU bind group descriptor}\r\n   * @returns - newly created {@link GPUBindGroup}\r\n   */\r\n  createBindGroup(bindGroupDescriptor: GPUBindGroupDescriptor): GPUBindGroup {\r\n    return this.deviceManager.device?.createBindGroup(bindGroupDescriptor)\r\n  }\r\n\r\n  /* SHADERS & PIPELINES */\r\n\r\n  /**\r\n   * Create a {@link GPUShaderModule}\r\n   * @param shaderModuleDescriptor - {@link shaderModuleDescriptor | shader module descriptor}\r\n   * @returns - newly created {@link GPUShaderModule}\r\n   */\r\n  createShaderModule(shaderModuleDescriptor: GPUShaderModuleDescriptor): GPUShaderModule {\r\n    return this.device?.createShaderModule(shaderModuleDescriptor)\r\n  }\r\n\r\n  /**\r\n   * Create a {@link GPUPipelineLayout}\r\n   * @param pipelineLayoutDescriptor - {@link GPUPipelineLayoutDescriptor | GPU pipeline layout descriptor}\r\n   * @returns - newly created {@link GPUPipelineLayout}\r\n   */\r\n  createPipelineLayout(pipelineLayoutDescriptor: GPUPipelineLayoutDescriptor): GPUPipelineLayout {\r\n    return this.device?.createPipelineLayout(pipelineLayoutDescriptor)\r\n  }\r\n\r\n  /**\r\n   * Create a {@link GPURenderPipeline}\r\n   * @param pipelineDescriptor - {@link GPURenderPipelineDescriptor | GPU render pipeline descriptor}\r\n   * @returns - newly created {@link GPURenderPipeline}\r\n   */\r\n  createRenderPipeline(pipelineDescriptor: GPURenderPipelineDescriptor): GPURenderPipeline {\r\n    return this.device?.createRenderPipeline(pipelineDescriptor)\r\n  }\r\n\r\n  /**\r\n   * Asynchronously create a {@link GPURenderPipeline}\r\n   * @async\r\n   * @param pipelineDescriptor - {@link GPURenderPipelineDescriptor | GPU render pipeline descriptor}\r\n   * @returns - newly created {@link GPURenderPipeline}\r\n   */\r\n  async createRenderPipelineAsync(pipelineDescriptor: GPURenderPipelineDescriptor): Promise<GPURenderPipeline> {\r\n    return await this.device?.createRenderPipelineAsync(pipelineDescriptor)\r\n  }\r\n\r\n  /**\r\n   * Create a {@link GPUComputePipeline}\r\n   * @param pipelineDescriptor - {@link GPUComputePipelineDescriptor | GPU compute pipeline descriptor}\r\n   * @returns - newly created {@link GPUComputePipeline}\r\n   */\r\n  createComputePipeline(pipelineDescriptor: GPUComputePipelineDescriptor): GPUComputePipeline {\r\n    return this.device?.createComputePipeline(pipelineDescriptor)\r\n  }\r\n\r\n  /**\r\n   * Asynchronously create a {@link GPUComputePipeline}\r\n   * @async\r\n   * @param pipelineDescriptor - {@link GPUComputePipelineDescriptor | GPU compute pipeline descriptor}\r\n   * @returns - newly created {@link GPUComputePipeline}\r\n   */\r\n  async createComputePipelineAsync(pipelineDescriptor: GPUComputePipelineDescriptor): Promise<GPUComputePipeline> {\r\n    return await this.device?.createComputePipelineAsync(pipelineDescriptor)\r\n  }\r\n\r\n  /* TEXTURES */\r\n\r\n  /**\r\n   * Get all created {@link DOMTexture} tracked by our {@link GPUDeviceManager}\r\n   * @readonly\r\n   */\r\n  get domTextures(): DOMTexture[] {\r\n    return this.deviceManager.domTextures\r\n  }\r\n\r\n  /**\r\n   * Add a {@link DOMTexture} to our {@link GPUDeviceManager#domTextures | textures array}\r\n   * @param texture - {@link DOMTexture} to add\r\n   */\r\n  addDOMTexture(texture: DOMTexture) {\r\n    this.deviceManager.addDOMTexture(texture)\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link DOMTexture} from our {@link GPUDeviceManager#domTextures | textures array}\r\n   * @param texture - {@link DOMTexture} to remove\r\n   */\r\n  removeDOMTexture(texture: DOMTexture) {\r\n    this.deviceManager.removeDOMTexture(texture)\r\n  }\r\n\r\n  /**\r\n   * Add a {@link Texture} to our {@link textures} array\r\n   * @param texture - {@link Texture} to add\r\n   */\r\n  addTexture(texture: Texture) {\r\n    this.textures.push(texture)\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link Texture} from our {@link textures} array\r\n   * @param texture - {@link Texture} to remove\r\n   */\r\n  removeTexture(texture: Texture) {\r\n    this.textures = this.textures.filter((t) => t.uuid !== texture.uuid)\r\n  }\r\n\r\n  /**\r\n   * Create a {@link GPUTexture}\r\n   * @param textureDescriptor - {@link GPUTextureDescriptor | GPU texture descriptor}\r\n   * @returns - newly created {@link GPUTexture}\r\n   */\r\n  createTexture(textureDescriptor: GPUTextureDescriptor): GPUTexture {\r\n    return this.deviceManager.device?.createTexture(textureDescriptor)\r\n  }\r\n\r\n  /**\r\n   * Upload a {@linkDOMTexture#texture | texture} to the GPU\r\n   * @param texture - {@link DOMTexture} class object with the {@link DOMTexture#texture | texture} to upload\r\n   */\r\n  uploadTexture(texture: DOMTexture) {\r\n    this.deviceManager.uploadTexture(texture)\r\n  }\r\n\r\n  /**\r\n   * Import a {@link GPUExternalTexture}\r\n   * @param video - {@link HTMLVideoElement} source\r\n   * @returns - {@link GPUExternalTexture}\r\n   */\r\n  importExternalTexture(video: HTMLVideoElement): GPUExternalTexture {\r\n    // TODO WebCodecs may be the way to go when time comes!\r\n    // https://developer.chrome.com/blog/new-in-webgpu-113/#use-webcodecs-videoframe-source-in-importexternaltexture\r\n    // see onVideoFrameCallback method in DOMTexture class\r\n    // const videoFrame = new VideoFrame(video)\r\n    // return this.deviceManager.device?.importExternalTexture({ source: videoFrame })\r\n    return this.deviceManager.device?.importExternalTexture({ source: video })\r\n  }\r\n\r\n  /**\r\n   * Check if a {@link Sampler} has already been created with the same {@link Sampler#options | parameters}.\r\n   * Use it if found, else create a new one and add it to the {@link GPUDeviceManager#samplers | samplers array}.\r\n   * @param sampler - {@link Sampler} to create\r\n   * @returns - the {@link GPUSampler}\r\n   */\r\n  createSampler(sampler: Sampler): GPUSampler {\r\n    const existingSampler = this.samplers.find((existingSampler) => {\r\n      return JSON.stringify(existingSampler.options) === JSON.stringify(sampler.options) && existingSampler.sampler\r\n    })\r\n\r\n    if (existingSampler) {\r\n      return existingSampler.sampler\r\n    } else {\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n      const { type, ...samplerOptions } = sampler.options\r\n      const gpuSampler: GPUSampler = this.deviceManager.device?.createSampler({\r\n        label: sampler.label,\r\n        ...samplerOptions,\r\n      })\r\n\r\n      this.deviceManager.addSampler(sampler)\r\n\r\n      return gpuSampler\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link Sampler} from our {@link GPUDeviceManager#samplers | samplers array}\r\n   * @param sampler - {@link Sampler} to remove\r\n   */\r\n  removeSampler(sampler: Sampler) {\r\n    this.deviceManager.removeSampler(sampler)\r\n  }\r\n\r\n  /* OBJECTS & TASKS */\r\n\r\n  /**\r\n   * Set different tasks queue managers to execute callbacks at different phases of our render call:\r\n   * - {@link onBeforeCommandEncoderCreation}: callbacks executed before the creation of the command encoder\r\n   * - {@link onBeforeRenderScene}: callbacks executed after the creation of the command encoder and before rendering the {@link Scene}\r\n   * - {@link onAfterRenderScene}: callbacks executed after the creation of the command encoder and after rendering the {@link Scene}\r\n   * - {@link onAfterCommandEncoderSubmission}: callbacks executed after the submission of the command encoder\r\n   */\r\n  setTasksQueues() {\r\n    this.onBeforeCommandEncoderCreation = new TasksQueueManager()\r\n    this.onBeforeRenderScene = new TasksQueueManager()\r\n    this.onAfterRenderScene = new TasksQueueManager()\r\n    this.onAfterCommandEncoderSubmission = new TasksQueueManager()\r\n  }\r\n\r\n  /**\r\n   * Set all objects arrays that we'll keep track of\r\n   */\r\n  setRendererObjects() {\r\n    // keep track of compute passes, meshes, etc.\r\n    this.computePasses = []\r\n    this.pingPongPlanes = []\r\n    this.shaderPasses = []\r\n    this.renderTargets = []\r\n    this.meshes = []\r\n    this.textures = []\r\n  }\r\n\r\n  /**\r\n   * Get all this {@link GPURenderer} rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes)\r\n   * @readonly\r\n   */\r\n  get renderedObjects(): SceneObject[] {\r\n    return [...this.computePasses, ...this.meshes, ...this.shaderPasses, ...this.pingPongPlanes]\r\n  }\r\n\r\n  /**\r\n   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link ComputePass | compute passes}) using a given {@link AllowedBindGroups | bind group}.\r\n   * Useful (but slow) to know if a resource is used by multiple objects and if it is safe to destroy it or not.\r\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to check\r\n   */\r\n  getObjectsByBindGroup(bindGroup: AllowedBindGroups): undefined | SceneObject[] {\r\n    return this.deviceRenderedObjects.filter((object) => {\r\n      return [\r\n        ...object.material.bindGroups,\r\n        ...object.material.inputsBindGroups,\r\n        ...object.material.clonedBindGroups,\r\n      ].some((bG) => bG.uuid === bindGroup.uuid)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link ComputePass | compute passes}) using a given {@link DOMTexture} or {@link Texture}.\r\n   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.\r\n   * @param texture - {@link DOMTexture} or {@link Texture} to check\r\n   */\r\n  getObjectsByTexture(texture: DOMTexture | Texture): undefined | SceneObject[] {\r\n    return this.deviceRenderedObjects.filter((object) => {\r\n      return [...object.material.domTextures, ...object.material.textures].some((t) => t.uuid === texture.uuid)\r\n    })\r\n  }\r\n\r\n  /* EVENTS */\r\n\r\n  /**\r\n   * Assign a callback function to _onBeforeRenderCallback\r\n   * @param callback - callback to run just before the {@link render} method will be executed\r\n   * @returns - our {@link GPURenderer}\r\n   */\r\n  onBeforeRender(callback: (commandEncoder?: GPUCommandEncoder) => void) {\r\n    if (callback) {\r\n      this._onBeforeRenderCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Assign a callback function to _onAfterRenderCallback\r\n   * @param callback - callback to run just after the {@link render} method has been executed\r\n   * @returns - our {@link GPURenderer}\r\n   */\r\n  onAfterRender(callback: (commandEncoder?: GPUCommandEncoder) => void) {\r\n    if (callback) {\r\n      this._onAfterRenderCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Callback to run after the {@link GPURenderer} has been resized but before the {@link resizeObjects} method has been executed (before the {@link Texture | textures}, {@link RenderPass | render passes}, {@link RenderTarget | render targets}, {@link ComputePass | compute passes} and meshes are resized).\r\n   * @param callback - callback to execute.\r\n   * @returns - our {@link GPURenderer}\r\n   */\r\n  onResize(callback: (commandEncoder?: GPUCommandEncoder) => void) {\r\n    if (callback) {\r\n      this._onResizeCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Callback to run after the {@link GPURenderer} has been resized and after the {@link resizeObjects} method has been executed (after the {@link Texture | textures}, {@link RenderPass | render passes}, {@link RenderTarget | render targets}, {@link ComputePass | compute passes} and meshes have been resized).\r\n   * @param callback - callback to execute.\r\n   * @returns - our {@link GPURenderer}\r\n   */\r\n  onAfterResize(callback: (commandEncoder?: GPUCommandEncoder) => void) {\r\n    if (callback) {\r\n      this._onAfterResizeCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /* RENDER */\r\n\r\n  /**\r\n   * Render a single {@link ComputePass}\r\n   * @param commandEncoder - current {@link GPUCommandEncoder}\r\n   * @param computePass - {@link ComputePass}\r\n   */\r\n  renderSingleComputePass(commandEncoder: GPUCommandEncoder, computePass: ComputePass) {\r\n    const pass = commandEncoder.beginComputePass()\r\n    computePass.render(pass)\r\n    pass.end()\r\n\r\n    computePass.copyBufferToResult(commandEncoder)\r\n  }\r\n\r\n  /**\r\n   * Render a single {@link RenderedMesh | Mesh}\r\n   * @param commandEncoder - current {@link GPUCommandEncoder}\r\n   * @param mesh - {@link RenderedMesh | Mesh} to render\r\n   */\r\n  renderSingleMesh(commandEncoder: GPUCommandEncoder, mesh: RenderedMesh) {\r\n    const pass = commandEncoder.beginRenderPass(this.renderPass.descriptor)\r\n    mesh.render(pass)\r\n    pass.end()\r\n  }\r\n\r\n  /**\r\n   * Render an array of objects (either {@link RenderedMesh | Meshes} or {@link ComputePass}) once. This method won't call any of the renderer render hooks like {@link onBeforeRender}, {@link onAfterRender}\r\n   * @param objects - Array of {@link RenderedMesh | Meshes} or {@link ComputePass} to render\r\n   */\r\n  renderOnce(objects: SceneObject[]) {\r\n    const commandEncoder = this.device?.createCommandEncoder({\r\n      label: 'Render once command encoder',\r\n    })\r\n    !this.production && commandEncoder.pushDebugGroup('Render once command encoder')\r\n\r\n    this.pipelineManager.resetCurrentPipeline()\r\n\r\n    objects.forEach((object) => {\r\n      if (object.type === 'ComputePass') {\r\n        this.renderSingleComputePass(commandEncoder, object as ComputePass)\r\n      } else {\r\n        this.renderSingleMesh(commandEncoder, object as RenderedMesh)\r\n      }\r\n    })\r\n\r\n    !this.production && commandEncoder.popDebugGroup()\r\n    const commandBuffer = commandEncoder.finish()\r\n    this.device?.queue.submit([commandBuffer])\r\n\r\n    this.pipelineManager.resetCurrentPipeline()\r\n  }\r\n\r\n  /**\r\n   * Force to clear a {@link GPURenderer} content to its {@link RenderPass#options.clearValue | clear value} by rendering and empty pass.\r\n   * @param commandEncoder\r\n   */\r\n  forceClear(commandEncoder?: GPUCommandEncoder) {\r\n    // if there's no command encoder provided, we'll have to create one and submit it after the copy process\r\n    const hasCommandEncoder = !!commandEncoder\r\n\r\n    if (!hasCommandEncoder) {\r\n      commandEncoder = this.device?.createCommandEncoder({\r\n        label: `${this.type} (${this.options.label}): Force clear command encoder`,\r\n      })\r\n      !this.production &&\r\n        commandEncoder.pushDebugGroup(`${this.type} (${this.options.label}): Force clear command encoder`)\r\n    }\r\n\r\n    this.renderPass.updateView()\r\n    const pass = commandEncoder.beginRenderPass(this.renderPass.descriptor)\r\n    pass.end()\r\n\r\n    if (!hasCommandEncoder) {\r\n      !this.production && commandEncoder.popDebugGroup()\r\n      const commandBuffer = commandEncoder.finish()\r\n      this.device?.queue.submit([commandBuffer])\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called by the {@link GPUDeviceManager#render | GPUDeviceManager render method} before the {@link GPUCommandEncoder} has been created\r\n   */\r\n  onBeforeCommandEncoder() {\r\n    if (!this.ready) return\r\n    // now render!\r\n    this.onBeforeCommandEncoderCreation.execute()\r\n  }\r\n\r\n  /**\r\n   * Called by the {@link GPUDeviceManager#render | GPUDeviceManager render method} after the {@link GPUCommandEncoder} has been created.\r\n   */\r\n  onAfterCommandEncoder() {\r\n    if (!this.ready) return\r\n\r\n    this.onAfterCommandEncoderSubmission.execute()\r\n  }\r\n\r\n  /**\r\n   * Called at each draw call to render our scene and its content\r\n   * @param commandEncoder - current {@link GPUCommandEncoder}\r\n   */\r\n  render(commandEncoder: GPUCommandEncoder) {\r\n    if (!this.ready || !this.shouldRender) return\r\n\r\n    this._onBeforeRenderCallback && this._onBeforeRenderCallback(commandEncoder)\r\n    this.onBeforeRenderScene.execute(commandEncoder)\r\n\r\n    if (this.shouldRenderScene) this.scene?.render(commandEncoder)\r\n\r\n    this._onAfterRenderCallback && this._onAfterRenderCallback(commandEncoder)\r\n    this.onAfterRenderScene.execute(commandEncoder)\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link GPURenderer} and everything that needs to be destroyed as well\r\n   */\r\n  destroy() {\r\n    this.deviceManager.renderers = this.deviceManager.renderers.filter((renderer) => renderer.uuid !== this.uuid)\r\n\r\n    this.domElement?.destroy()\r\n\r\n    // destroy render passes\r\n    this.renderPass?.destroy()\r\n    this.postProcessingPass?.destroy()\r\n\r\n    this.renderTargets.forEach((renderTarget) => renderTarget.destroy())\r\n    this.renderedObjects.forEach((sceneObject) => sceneObject.remove())\r\n\r\n    this.textures.forEach((texture) => texture.destroy())\r\n\r\n    this.context?.unconfigure()\r\n  }\r\n}\r\n","import { GPURenderer, GPURendererParams, ProjectedMesh, RenderedMesh, SceneObject } from './GPURenderer'\r\nimport { Camera, CameraBasePerspectiveOptions } from '../camera/Camera'\r\nimport { BufferBinding } from '../bindings/BufferBinding'\r\nimport { BindGroup } from '../bindGroups/BindGroup'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { AllowedBindGroups } from '../../types/BindGroups'\r\nimport { RectBBox } from '../DOM/DOMElement'\r\n\r\n/**\r\n * Parameters used to create a {@link GPUCameraRenderer}\r\n */\r\nexport interface GPUCameraRendererParams extends GPURendererParams {\r\n  /** An object defining {@link CameraBasePerspectiveOptions | camera perspective parameters} */\r\n  camera: CameraBasePerspectiveOptions\r\n}\r\n\r\n/**\r\n * This renderer also creates a {@link Camera} and its associated {@link cameraBufferBinding | binding} and {@link cameraBindGroup | bind group}.<br>\r\n * Can be safely used to render compute passes and meshes if they do not need to be tied to the DOM.\r\n *\r\n * @example\r\n * ```javascript\r\n * // first, we need a WebGPU device, that's what GPUDeviceManager is for\r\n * const gpuDeviceManager = new GPUDeviceManager({\r\n *   label: 'Custom device manager',\r\n * })\r\n *\r\n * // we need to wait for the WebGPU device to be created\r\n * await gpuDeviceManager.init()\r\n *\r\n * // then we can create a camera renderer\r\n * const gpuCameraRenderer = new GPUCameraRenderer({\r\n *   deviceManager: gpuDeviceManager, // we need the WebGPU device to create the renderer context\r\n *   container: document.querySelector('#canvas'),\r\n * })\r\n * ```\r\n */\r\nexport class GPUCameraRenderer extends GPURenderer {\r\n  /** {@link Camera} used by this {@link GPUCameraRenderer} */\r\n  camera: Camera\r\n  /** {@link BufferBinding | binding} handling the {@link camera} matrices */\r\n  cameraBufferBinding: BufferBinding\r\n  /** {@link BindGroup | bind group} handling the {@link cameraBufferBinding | camera buffer binding} */\r\n  cameraBindGroup: BindGroup\r\n\r\n  /** Options used to create this {@link GPUCameraRenderer} */\r\n  options: GPUCameraRendererParams\r\n\r\n  /**\r\n   * GPUCameraRenderer constructor\r\n   * @param parameters - {@link GPUCameraRendererParams | parameters} used to create this {@link GPUCameraRenderer}\r\n   */\r\n  constructor({\r\n    deviceManager,\r\n    label,\r\n    container,\r\n    pixelRatio = 1,\r\n    autoResize = true,\r\n    preferredFormat,\r\n    alphaMode = 'premultiplied',\r\n    renderPass,\r\n    camera = {},\r\n  }: GPUCameraRendererParams) {\r\n    super({\r\n      deviceManager,\r\n      label,\r\n      container,\r\n      pixelRatio,\r\n      autoResize,\r\n      preferredFormat,\r\n      alphaMode,\r\n      renderPass,\r\n    })\r\n\r\n    this.type = 'GPUCameraRenderer'\r\n\r\n    camera = { ...{ fov: 50, near: 0.1, far: 1000 }, ...camera }\r\n\r\n    this.options = {\r\n      ...this.options,\r\n      camera,\r\n    }\r\n\r\n    this.setCamera(camera)\r\n\r\n    this.setCameraBindGroupAndBinding()\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} is lost.\r\n   * Reset all our samplers, force all our scene objects and camera bind group to lose context.\r\n   */\r\n  loseContext() {\r\n    super.loseContext()\r\n    // lose camera bind group context as well\r\n    this.cameraBindGroup.loseContext()\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored.\r\n   * Configure the context again, resize the {@link core/renderPasses/RenderTarget.RenderTarget | render targets} and {@link core/textures/Texture.Texture | textures}, restore our {@link renderedObjects | rendered objects} context, re-write our {@link cameraBufferBinding | camera buffer binding}.\r\n   * @async\r\n   */\r\n  restoreContext() {\r\n    super.restoreContext()\r\n    this.cameraBindGroup?.restoreContext()\r\n    this.updateCameraBindings()\r\n  }\r\n\r\n  /**\r\n   * Set the {@link camera}\r\n   * @param cameraParameters - {@link CameraBasePerspectiveOptions | parameters} used to create the {@link camera}\r\n   */\r\n  setCamera(cameraParameters: CameraBasePerspectiveOptions) {\r\n    const { width, height } = this.rectBBox\r\n\r\n    this.useCamera(\r\n      new Camera({\r\n        fov: cameraParameters.fov,\r\n        near: cameraParameters.near,\r\n        far: cameraParameters.far,\r\n        width,\r\n        height,\r\n        pixelRatio: this.pixelRatio,\r\n        onMatricesChanged: () => {\r\n          this.onCameraMatricesChanged()\r\n        },\r\n      })\r\n    )\r\n  }\r\n\r\n  /**\r\n   * Tell our {@link GPUCameraRenderer} to use this {@link Camera}. If a {@link camera} has already been set, reset the {@link cameraBufferBinding} inputs view values and the {@link meshes} {@link Camera} object.\r\n   * @param camera - new {@link Camera} to use.\r\n   */\r\n  useCamera(camera: Camera) {\r\n    if (this.camera && camera && this.camera.uuid === camera.uuid) return\r\n\r\n    if (this.camera) {\r\n      this.camera.parent = null\r\n      this.camera.onMatricesChanged = () => {}\r\n    }\r\n\r\n    this.camera = camera\r\n    this.camera.parent = this.scene\r\n\r\n    if (this.cameraBufferBinding) {\r\n      this.camera.onMatricesChanged = () => this.onCameraMatricesChanged()\r\n\r\n      // replace the 2 matrices inputs view values\r\n      // position will be computed before updating the binding anyway\r\n      this.cameraBufferBinding.inputs.view.value = this.camera.viewMatrix\r\n      this.cameraBufferBinding.inputs.projection.value = this.camera.projectionMatrix\r\n\r\n      for (const mesh of this.meshes) {\r\n        if ('modelViewMatrix' in mesh) {\r\n          mesh.camera = this.camera\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the {@link ProjectedMesh | projected meshes} sizes and positions when the {@link camera} {@link Camera#position | position} changes\r\n   */\r\n  onCameraMatricesChanged() {\r\n    this.updateCameraBindings()\r\n\r\n    for (const mesh of this.meshes) {\r\n      if ('modelViewMatrix' in mesh) {\r\n        mesh.shouldUpdateMatrixStack()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the {@link cameraBufferBinding | camera buffer binding} and {@link cameraBindGroup | camera bind group}\r\n   */\r\n  setCameraBindGroupAndBinding() {\r\n    // TODO add world matrix / inverseViewMatrix?\r\n    this.cameraBufferBinding = new BufferBinding({\r\n      label: 'Camera',\r\n      name: 'camera',\r\n      visibility: ['vertex'],\r\n      struct: {\r\n        view: {\r\n          // camera view matrix\r\n          type: 'mat4x4f',\r\n          value: this.camera.viewMatrix,\r\n        },\r\n        projection: {\r\n          // camera projection matrix\r\n          type: 'mat4x4f',\r\n          value: this.camera.projectionMatrix,\r\n        },\r\n        position: {\r\n          // camera world position\r\n          type: 'vec3f',\r\n          value: this.camera.position.clone().setFromMatrixPosition(this.camera.worldMatrix),\r\n          onBeforeUpdate: () => {\r\n            ;(this.cameraBufferBinding.inputs.position.value as Vec3)\r\n              .copy(this.camera.position)\r\n              .setFromMatrixPosition(this.camera.worldMatrix)\r\n          },\r\n        },\r\n      },\r\n    })\r\n\r\n    // now initialize bind group\r\n    this.cameraBindGroup = new BindGroup(this, {\r\n      label: 'Camera Uniform bind group',\r\n      bindings: [this.cameraBufferBinding],\r\n    })\r\n\r\n    this.cameraBindGroup.consumers.add(this.uuid)\r\n  }\r\n\r\n  /**\r\n   * Create the {@link cameraBindGroup | camera bind group} buffers\r\n   */\r\n  setCameraBindGroup() {\r\n    if (this.cameraBindGroup && this.cameraBindGroup.shouldCreateBindGroup) {\r\n      this.cameraBindGroup.setIndex(0)\r\n      this.cameraBindGroup.createBindGroup()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Tell our {@link cameraBufferBinding | camera buffer binding} that we should update its bindings and update the bind group. Called each time the camera matrices change.\r\n   */\r\n  updateCameraBindings() {\r\n    this.cameraBufferBinding?.shouldUpdateBinding('view')\r\n    this.cameraBufferBinding?.shouldUpdateBinding('projection')\r\n    this.cameraBufferBinding?.shouldUpdateBinding('position')\r\n\r\n    // update buffers immediately\r\n    this.cameraBindGroup?.update()\r\n  }\r\n\r\n  /**\r\n   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link core/computePasses/ComputePass.ComputePass | compute passes}) using a given {@link AllowedBindGroups | bind group}, including {@link cameraBindGroup | camera bind group}.\r\n   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.\r\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to check\r\n   */\r\n  getObjectsByBindGroup(bindGroup: AllowedBindGroups): undefined | SceneObject[] {\r\n    return this.deviceRenderedObjects.filter((object) => {\r\n      return [\r\n        ...object.material.bindGroups,\r\n        ...object.material.inputsBindGroups,\r\n        ...object.material.clonedBindGroups,\r\n        this.cameraBindGroup,\r\n      ].some((bG) => bG.uuid === bindGroup.uuid)\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our {@link camera} perspective matrix new parameters (fov, near plane and far plane)\r\n   * @param parameters - {@link CameraBasePerspectiveOptions | parameters} to use for the perspective\r\n   */\r\n  setPerspective({ fov, near, far }: CameraBasePerspectiveOptions = {}) {\r\n    this.camera?.setPerspective({\r\n      fov,\r\n      near,\r\n      far,\r\n      width: this.rectBBox.width,\r\n      height: this.rectBBox.height,\r\n      pixelRatio: this.pixelRatio,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our {@link camera} {@link Camera#position | position}\r\n   * @param position - new {@link Camera#position | position}\r\n   */\r\n  setCameraPosition(position: Vec3 = new Vec3(0, 0, 1)) {\r\n    this.camera.position.copy(position)\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link GPUCameraRenderer} and resize our {@link camera} before anything else.\r\n   * @param rectBBox - the optional new {@link canvas} {@link RectBBox} to set\r\n   */\r\n  resize(rectBBox: RectBBox | null = null) {\r\n    this.setSize(rectBBox)\r\n\r\n    this.setPerspective()\r\n\r\n    this._onResizeCallback && this._onResizeCallback()\r\n\r\n    this.resizeObjects()\r\n\r\n    this._onAfterResizeCallback && this._onAfterResizeCallback()\r\n  }\r\n\r\n  /* RENDER */\r\n\r\n  /**\r\n   * {@link setCameraBindGroup | Set the camera bind group if needed} and then call our {@link GPURenderer#render | GPURenderer render method}\r\n   * @param commandEncoder - current {@link GPUCommandEncoder}\r\n   */\r\n  render(commandEncoder: GPUCommandEncoder) {\r\n    if (!this.ready) return\r\n\r\n    this.setCameraBindGroup()\r\n    super.render(commandEncoder)\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link GPUCameraRenderer}\r\n   */\r\n  destroy() {\r\n    this.cameraBindGroup?.destroy()\r\n    super.destroy()\r\n  }\r\n}\r\n","import { throwError, throwWarning } from '../../utils/utils'\r\nimport { generateMips, Renderer } from './utils'\r\nimport { Sampler } from '../samplers/Sampler'\r\nimport { PipelineManager } from '../pipelines/PipelineManager'\r\nimport { SceneObject } from './GPURenderer'\r\nimport { DOMTexture } from '../textures/DOMTexture'\r\nimport { AllowedBindGroups } from '../../types/BindGroups'\r\nimport { Buffer } from '../buffers/Buffer'\r\nimport { BufferBinding } from '../bindings/BufferBinding'\r\n\r\n/**\r\n * Base parameters used to create a {@link GPUDeviceManager}\r\n */\r\nexport interface GPUDeviceManagerBaseParams {\r\n  /** Flag indicating whether we're running the production mode or not. If not, useful warnings could be logged to the console */\r\n  production?: boolean\r\n  /** Additional options to use when requesting an {@link GPUAdapter | adapter} */\r\n  adapterOptions?: GPURequestAdapterOptions\r\n}\r\n\r\n/**\r\n * Parameters used to create a {@link GPUDeviceManager}\r\n */\r\nexport interface GPUDeviceManagerParams extends GPUDeviceManagerBaseParams {\r\n  /** The label of the {@link GPUDeviceManager}, used to create the {@link GPUDevice} for debugging purpose */\r\n  label?: string\r\n  /** Callback to run if there's any error while trying to set up the {@link GPUAdapter | adapter} or {@link GPUDevice | device} */\r\n  onError?: () => void\r\n  /** Callback to run whenever the {@link GPUDeviceManager#device | device} is lost */\r\n  onDeviceLost?: (info?: GPUDeviceLostInfo) => void\r\n}\r\n\r\n/** Optional parameters used to set up/init a {@link GPUAdapter} and {@link GPUDevice} */\r\nexport interface GPUDeviceManagerSetupParams {\r\n  /** {@link GPUAdapter} to use if set */\r\n  adapter?: GPUAdapter | null\r\n  /** {@link GPUDevice} to use if set */\r\n  device?: GPUDevice | null\r\n}\r\n\r\n/**\r\n * Responsible for the WebGPU {@link GPUAdapter | adapter} and {@link GPUDevice | device} creations, losing and restoration.\r\n *\r\n * It will create all the GPU objects that need a {@link GPUDevice | device} to do so, as well as a {@link PipelineManager}. It will also keep a track of all the {@link Renderer}, {@link AllowedBindGroups | bind groups}, {@link Sampler}, {@link DOMTexture} and {@link GPUBuffer | GPU buffers} created.\r\n *\r\n * The {@link GPUDeviceManager} is also responsible for creating the {@link GPUCommandBuffer}, rendering all the {@link Renderer} and then submitting the {@link GPUCommandBuffer} at each {@link GPUDeviceManager#render | render} calls.\r\n */\r\nexport class GPUDeviceManager {\r\n  /** Number of times a {@link GPUDevice} has been created */\r\n  index: number\r\n  /** The label of the {@link GPUDeviceManager}, used to create the {@link GPUDevice} for debugging purpose */\r\n  label: string\r\n\r\n  /** Flag indicating whether we're running the production mode or not. If not, useful warnings could be logged to the console */\r\n  production: boolean\r\n\r\n  /** The navigator {@link GPU} object */\r\n  gpu: GPU | undefined\r\n  /** The WebGPU {@link GPUAdapter | adapter} used */\r\n  adapter: GPUAdapter | void\r\n  /** Additional options to use when requesting an {@link GPUAdapter | adapter} */\r\n  adapterOptions: GPURequestAdapterOptions\r\n  /** The WebGPU {@link GPUAdapter | adapter} informations */\r\n  adapterInfos: GPUAdapterInfo | undefined\r\n  /** The WebGPU {@link GPUDevice | device} used */\r\n  device: GPUDevice | undefined\r\n  /** Flag indicating whether the {@link GPUDeviceManager} is ready, i.e. its {@link adapter} and {@link device} have been successfully created */\r\n  ready: boolean\r\n\r\n  /** The {@link PipelineManager} used to cache {@link GPURenderPipeline} and {@link GPUComputePipeline} and set them only when appropriate */\r\n  pipelineManager: PipelineManager\r\n\r\n  /** Array of {@link Renderer | renderers} using that {@link GPUDeviceManager} */\r\n  renderers: Renderer[]\r\n  /** A Map containing all our created {@link AllowedBindGroups} */\r\n  bindGroups: Map<string, AllowedBindGroups>\r\n  /** An array containing all our created {@link GPUBuffer} */\r\n  buffers: Map<string, Buffer>\r\n\r\n  /** A Map containing all our created {@link GPUBindGroupLayout} indexed by cache keys */\r\n  bindGroupLayouts: Map<string, GPUBindGroupLayout>\r\n  /** A Map containing all our created {@link BufferBinding} indexed by cache keys */\r\n  bufferBindings: Map<string, BufferBinding>\r\n\r\n  /** An array containing all our created {@link Sampler} */\r\n  samplers: Sampler[]\r\n  /** An array containing all our created {@link DOMTexture} */\r\n  domTextures: DOMTexture[]\r\n  /** An array to keep track of the newly uploaded {@link DOMTexture} and set their {@link DOMTexture#sourceUploaded | sourceUploaded} property */\r\n  texturesQueue: DOMTexture[]\r\n\r\n  /** Callback to run if there's any error while trying to set up the {@link GPUAdapter | adapter} or {@link GPUDevice | device} */\r\n  onError: () => void\r\n  /** Callback to run whenever the {@link device} is lost */\r\n  onDeviceLost: (info?: GPUDeviceLostInfo) => void\r\n\r\n  /**\r\n   * GPUDeviceManager constructor\r\n   * @param parameters - {@link GPUDeviceManagerParams | parameters} used to create this {@link GPUDeviceManager}\r\n   */\r\n  constructor({\r\n    label,\r\n    production = false,\r\n    adapterOptions = {},\r\n    onError = () => {\r\n      /* allow empty callbacks */\r\n    },\r\n    onDeviceLost = (info?: GPUDeviceLostInfo) => {\r\n      /* allow empty callbacks */\r\n    },\r\n  }: GPUDeviceManagerParams = {}) {\r\n    this.index = 0\r\n    this.label = label ?? 'GPUDeviceManager instance'\r\n    this.production = production\r\n    this.ready = false\r\n\r\n    this.adapterOptions = adapterOptions\r\n\r\n    this.onError = onError\r\n    this.onDeviceLost = onDeviceLost\r\n\r\n    this.gpu = navigator.gpu\r\n\r\n    this.setPipelineManager()\r\n    this.setDeviceObjects()\r\n  }\r\n\r\n  /**\r\n   * Set our {@link adapter} and {@link device} if possible.\r\n   * @param parameters - {@link GPUAdapter} and/or {@link GPUDevice} to use if set.\r\n   */\r\n  async setAdapterAndDevice({ adapter = null, device = null }: GPUDeviceManagerSetupParams = {}) {\r\n    await this.setAdapter(adapter)\r\n    await this.setDevice(device)\r\n  }\r\n\r\n  /**\r\n   * Set up our {@link adapter} and {@link device} and all the already created {@link renderers} contexts\r\n   * @param parameters - {@link GPUAdapter} and/or {@link GPUDevice} to use if set.\r\n   */\r\n  async init({ adapter = null, device = null }: GPUDeviceManagerSetupParams = {}) {\r\n    await this.setAdapterAndDevice({ adapter, device })\r\n\r\n    // set context\r\n    if (this.device) {\r\n      for (const renderer of this.renderers) {\r\n        if (!renderer.context) {\r\n          renderer.setContext()\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set our {@link adapter} if possible.\r\n   * The adapter represents a specific GPU. Some devices have multiple GPUs.\r\n   * @async\r\n   * @param adapter - {@link GPUAdapter} to use if set.\r\n   */\r\n  async setAdapter(adapter: GPUAdapter | null = null) {\r\n    if (!this.gpu) {\r\n      this.onError()\r\n      throwError(\"GPUDeviceManager: WebGPU is not supported on your browser/OS. No 'gpu' object in 'navigator'.\")\r\n    }\r\n\r\n    if (adapter) {\r\n      this.adapter = adapter\r\n    } else {\r\n      try {\r\n        this.adapter = await this.gpu?.requestAdapter(this.adapterOptions)\r\n\r\n        if (!this.adapter) {\r\n          this.onError()\r\n          throwError(\"GPUDeviceManager: WebGPU is not supported on your browser/OS. 'requestAdapter' failed.\")\r\n        }\r\n      } catch (e) {\r\n        this.onError()\r\n        throwError('GPUDeviceManager: ' + e.message)\r\n      }\r\n    }\r\n\r\n    ;(this.adapter as GPUAdapter)?.requestAdapterInfo().then((infos) => {\r\n      this.adapterInfos = infos\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our {@link device}.\r\n   * @async\r\n   * @param device - {@link GPUDevice} to use if set.\r\n   */\r\n  async setDevice(device: GPUDevice | null = null) {\r\n    if (device) {\r\n      this.device = device\r\n      this.ready = true\r\n      this.index++\r\n    } else {\r\n      try {\r\n        const requiredFeatures = [] as GPUFeatureName[]\r\n\r\n        if ((this.adapter as GPUAdapter).features.has('float32-filterable')) {\r\n          requiredFeatures.push('float32-filterable')\r\n        }\r\n\r\n        this.device = await (this.adapter as GPUAdapter)?.requestDevice({\r\n          label: this.label + ' ' + this.index,\r\n          requiredFeatures,\r\n        })\r\n\r\n        if (this.device) {\r\n          this.ready = true\r\n          this.index++\r\n        }\r\n      } catch (error) {\r\n        this.onError()\r\n        throwError(`${this.label}: WebGPU is not supported on your browser/OS. 'requestDevice' failed: ${error}`)\r\n      }\r\n    }\r\n\r\n    this.device?.lost.then((info) => {\r\n      throwWarning(`${this.label}: WebGPU device was lost: ${info.message}`)\r\n\r\n      this.loseDevice()\r\n\r\n      // do not call onDeviceLost event if the device was intentionally destroyed\r\n      if (info.reason !== 'destroyed') {\r\n        this.onDeviceLost(info)\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our {@link pipelineManager | pipeline manager}\r\n   */\r\n  setPipelineManager() {\r\n    this.pipelineManager = new PipelineManager()\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link device} is lost.\r\n   * Reset all our renderers\r\n   */\r\n  loseDevice() {\r\n    this.ready = false\r\n\r\n    this.pipelineManager.resetCurrentPipeline()\r\n\r\n    // first clean all samplers\r\n    this.samplers.forEach((sampler) => (sampler.sampler = null))\r\n\r\n    this.renderers.forEach((renderer) => renderer.loseContext())\r\n\r\n    this.bindGroupLayouts.clear()\r\n\r\n    // reset the buffers array, it would eventually be repopulated while restoring the device\r\n    this.buffers.clear()\r\n  }\r\n\r\n  /**\r\n   * Called when the {@link device} should be restored.\r\n   * Restore all our renderers.\r\n   * @async\r\n   * @param parameters - {@link GPUAdapter} and/or {@link GPUDevice} to use if set.\r\n   */\r\n  async restoreDevice({ adapter = null, device = null }: GPUDeviceManagerSetupParams = {}) {\r\n    await this.setAdapterAndDevice({ adapter, device })\r\n\r\n    if (this.device) {\r\n      // now recreate all the samplers\r\n      this.samplers.forEach((sampler) => {\r\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n        const { type, ...samplerOptions } = sampler.options\r\n        sampler.sampler = this.device.createSampler({\r\n          label: sampler.label,\r\n          ...samplerOptions,\r\n        })\r\n      })\r\n\r\n      // then the renderers\r\n      this.renderers.forEach((renderer) => renderer.restoreContext())\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set all objects arrays that we'll keep track of\r\n   */\r\n  setDeviceObjects() {\r\n    // keep track of renderers, bind groups, buffers, samplers, textures\r\n    this.renderers = []\r\n    this.bindGroups = new Map()\r\n    this.buffers = new Map()\r\n    this.bindGroupLayouts = new Map()\r\n    this.bufferBindings = new Map()\r\n    this.samplers = []\r\n    this.domTextures = []\r\n\r\n    // keep track of all textures that are being uploaded\r\n    this.texturesQueue = []\r\n  }\r\n\r\n  /**\r\n   * Add a {@link Renderer} to our {@link renderers} array\r\n   * @param renderer - {@link Renderer} to add\r\n   */\r\n  addRenderer(renderer: Renderer) {\r\n    this.renderers.push(renderer)\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link Renderer} from our {@link renderers} array\r\n   * @param renderer - {@link Renderer} to remove\r\n   */\r\n  removeRenderer(renderer: Renderer) {\r\n    this.renderers = this.renderers.filter((r) => r.uuid !== renderer.uuid)\r\n  }\r\n\r\n  /**\r\n   * Get all the rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes) created by this {@link GPUDeviceManager}\r\n   * @readonly\r\n   */\r\n  get deviceRenderedObjects(): SceneObject[] {\r\n    return this.renderers.map((renderer) => renderer.renderedObjects).flat()\r\n  }\r\n\r\n  /**\r\n   * Add a {@link AllowedBindGroups | bind group} to our {@link bindGroups | bind groups array}\r\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to add\r\n   */\r\n  addBindGroup(bindGroup: AllowedBindGroups) {\r\n    this.bindGroups.set(bindGroup.uuid, bindGroup)\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link AllowedBindGroups | bind group} from our {@link bindGroups | bind groups array}\r\n   * @param bindGroup - {@link AllowedBindGroups | bind group} to remove\r\n   */\r\n  removeBindGroup(bindGroup: AllowedBindGroups) {\r\n    this.bindGroups.delete(bindGroup.uuid)\r\n  }\r\n\r\n  /**\r\n   * Add a {@link GPUBuffer} to our our {@link buffers} array\r\n   * @param buffer - {@link Buffer} to add\r\n   */\r\n  addBuffer(buffer: Buffer) {\r\n    this.buffers.set(buffer.uuid, buffer)\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link Buffer} from our {@link buffers} Map\r\n   * @param buffer - {@link Buffer} to remove\r\n   */\r\n  removeBuffer(buffer: Buffer) {\r\n    this.buffers.delete(buffer?.uuid)\r\n  }\r\n\r\n  /**\r\n   * Add a {@link Sampler} to our {@link samplers} array\r\n   * @param sampler - {@link Sampler} to add\r\n   */\r\n  addSampler(sampler: Sampler) {\r\n    this.samplers.push(sampler)\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link Sampler} from our {@link samplers} array\r\n   * @param sampler - {@link Sampler} to remove\r\n   */\r\n  removeSampler(sampler: Sampler) {\r\n    this.samplers = this.samplers.filter((s) => s.uuid !== sampler.uuid)\r\n  }\r\n\r\n  /**\r\n   * Add a {@link DOMTexture} to our {@link domTextures} array\r\n   * @param texture - {@link DOMTexture} to add\r\n   */\r\n  addDOMTexture(texture: DOMTexture) {\r\n    this.domTextures.push(texture)\r\n  }\r\n\r\n  /**\r\n   * Upload a {@link DOMTexture#texture | texture} to the GPU\r\n   * @param texture - {@link DOMTexture} class object with the {@link DOMTexture#texture | texture} to upload\r\n   */\r\n  uploadTexture(texture: DOMTexture) {\r\n    if (texture.source) {\r\n      try {\r\n        this.device?.queue.copyExternalImageToTexture(\r\n          {\r\n            source: texture.source as GPUImageCopyExternalImageSource,\r\n            flipY: texture.options.flipY,\r\n          } as GPUImageCopyExternalImage,\r\n          { texture: texture.texture as GPUTexture, premultipliedAlpha: texture.options.premultipliedAlpha },\r\n          { width: texture.size.width, height: texture.size.height }\r\n        )\r\n\r\n        if ((texture.texture as GPUTexture).mipLevelCount > 1) {\r\n          generateMips(this.device, texture.texture as GPUTexture)\r\n        }\r\n\r\n        // add to our textures queue array to track when it has been uploaded\r\n        this.texturesQueue.push(texture)\r\n      } catch ({ message }) {\r\n        throwError(`GPUDeviceManager: could not upload texture: ${texture.options.name} because: ${message}`)\r\n      }\r\n    } else {\r\n      this.device?.queue.writeTexture(\r\n        { texture: texture.texture as GPUTexture },\r\n        new Uint8Array(texture.options.placeholderColor),\r\n        { bytesPerRow: texture.size.width * 4 },\r\n        { width: texture.size.width, height: texture.size.height }\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove a {@link DOMTexture} from our {@link domTextures} array\r\n   * @param texture - {@link DOMTexture} to remove\r\n   */\r\n  removeDOMTexture(texture: DOMTexture) {\r\n    this.domTextures = this.domTextures.filter((t) => t.uuid !== texture.uuid)\r\n  }\r\n\r\n  /**\r\n   * Render everything:\r\n   * - call all our {@link renderers} {@link core/renderers/GPURenderer.GPURenderer#onBeforeCommandEncoder | onBeforeCommandEncoder} callbacks\r\n   * - create a {@link GPUCommandEncoder}\r\n   * - render all our {@link renderers}\r\n   * - submit our {@link GPUCommandBuffer}\r\n   * - upload {@link DOMTexture#texture | DOMTexture textures} that do not have a parentMesh\r\n   * - empty our {@link texturesQueue} array\r\n   * - call all our {@link renderers} {@link core/renderers/GPURenderer.GPURenderer#onAfterCommandEncoder | onAfterCommandEncoder} callbacks\r\n   */\r\n  render() {\r\n    if (!this.ready) return\r\n\r\n    for (const renderer of this.renderers) {\r\n      if (renderer.shouldRender) renderer.onBeforeCommandEncoder()\r\n    }\r\n\r\n    const commandEncoder = this.device?.createCommandEncoder({ label: this.label + ' command encoder' })\r\n    !this.production && commandEncoder.pushDebugGroup(this.label + ' command encoder: main render loop')\r\n\r\n    this.renderers.forEach((renderer) => renderer.render(commandEncoder))\r\n\r\n    !this.production && commandEncoder.popDebugGroup()\r\n    const commandBuffer = commandEncoder.finish()\r\n    this.device?.queue.submit([commandBuffer])\r\n\r\n    // handle textures\r\n    // first check if media textures without parentMesh need to be uploaded\r\n    this.domTextures\r\n      .filter((texture) => !texture.parentMesh && texture.sourceLoaded && !texture.sourceUploaded)\r\n      .forEach((texture) => this.uploadTexture(texture))\r\n\r\n    // no need to use device.queue.onSubmittedWorkDone\r\n    // as [Kai Ninomiya](https://github.com/kainino0x) stated:\r\n    // \"Anything you submit() after the copyExternalImageToTexture() is guaranteed to see the result of that call.\"\r\n    for (const texture of this.texturesQueue) {\r\n      texture.sourceUploaded = true\r\n    }\r\n\r\n    // clear texture queue\r\n    this.texturesQueue = []\r\n\r\n    for (const renderer of this.renderers) {\r\n      if (renderer.shouldRender) renderer.onAfterCommandEncoder()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Destroy the {@link GPUDeviceManager} and its {@link renderers}\r\n   */\r\n  destroy() {\r\n    this.device?.destroy()\r\n    this.device = null\r\n\r\n    this.renderers.forEach((renderer) => renderer.destroy())\r\n\r\n    // now clear everything that could have been left behind\r\n    this.bindGroups.forEach((bindGroup) => bindGroup.destroy())\r\n    this.buffers.forEach((buffer) => buffer?.destroy())\r\n\r\n    this.domTextures.forEach((texture) => texture.destroy())\r\n\r\n    this.setDeviceObjects()\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../renderers/utils'\nimport { RenderPass, RenderPassParams } from './RenderPass'\nimport { Texture } from '../textures/Texture'\nimport { generateUUID } from '../../utils/utils'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/**\n * Parameters used to create a {@link RenderTarget}\n */\nexport interface RenderTargetParams extends RenderPassParams {\n  /** Whether we should add this {@link RenderTarget} to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\n  autoRender?: boolean\n}\n\n/**\n * Used to draw to {@link RenderPass#viewTextures | RenderPass view textures} (and eventually {@link RenderPass#depthTexture | depth texture}) instead of directly to screen.\n *\n * The meshes assigned to a {@link RenderTarget} will be drawn before the other objects in the {@link core/scenes/Scene.Scene | Scene} rendering loop.\n *\n * Can also be assigned as ShaderPass {@link core/renderPasses/ShaderPass.ShaderPass#inputTarget | input} or {@link core/renderPasses/ShaderPass.ShaderPass#outputTarget | output} targets.\n *\n * If the {@link RenderPass} created handle color attachments, then a {@link RenderTarget#renderTexture | Texture} will be created to update and/or resolve the content of the current view. This {@link RenderTarget#renderTexture | Texture} could therefore usually be used to access the current content of this {@link RenderTarget}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * const outputTarget = new RenderTarget(gpuCurtains, {\n *   label: 'My render target',\n * })\n * ```\n */\nexport class RenderTarget {\n  /** {@link Renderer} used by this {@link RenderTarget} */\n  renderer: Renderer\n  /** The type of the {@link RenderTarget} */\n  type: string\n  /** The universal unique id of this {@link RenderTarget} */\n  readonly uuid: string\n\n  /** Options used to create this {@link RenderTarget} */\n  options: RenderTargetParams\n\n  /** {@link RenderPass} used by this {@link RenderTarget} */\n  renderPass: RenderPass\n  /** {@link Texture} that will be resolved by the {@link renderPass} when {@link RenderPass#updateView | setting the current texture} */\n  renderTexture?: Texture\n\n  /** Whether we should add this {@link RenderTarget} to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */\n  #autoRender = true\n\n  /**\n   * RenderTarget constructor\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link RenderTarget}\n   * @param parameters - {@link RenderTargetParams | parameters} use to create this {@link RenderTarget}\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters = {} as RenderTargetParams) {\n    renderer = isRenderer(renderer, 'RenderTarget')\n\n    this.type = 'RenderTarget'\n    this.renderer = renderer\n    this.uuid = generateUUID()\n\n    const { label, colorAttachments, depthTexture, autoRender, ...renderPassParams } = parameters\n\n    // use depth texture from params\n    // OR renderer render pass depth texture if sample counts match\n    const depthTextureToUse = !!depthTexture\n      ? depthTexture\n      : this.renderer.renderPass.options.sampleCount === (parameters.sampleCount ?? 4)\n      ? this.renderer.renderPass.depthTexture\n      : null\n\n    this.options = {\n      label,\n      ...renderPassParams,\n      ...(depthTextureToUse && { depthTexture: depthTextureToUse }),\n      ...(colorAttachments && { colorAttachments }),\n      autoRender: autoRender === undefined ? true : autoRender,\n    } as RenderTargetParams\n\n    if (autoRender !== undefined) {\n      this.#autoRender = autoRender\n    }\n\n    this.renderPass = new RenderPass(this.renderer, {\n      label: this.options.label ? `${this.options.label} Render Pass` : 'Render Target Render Pass',\n      ...(colorAttachments && { colorAttachments }),\n      depthTexture: this.options.depthTexture,\n      ...renderPassParams,\n    })\n\n    if (renderPassParams.useColorAttachments !== false) {\n      // this is the texture that will be resolved when setting the current render pass texture\n      this.renderTexture = new Texture(this.renderer, {\n        label: this.options.label ? `${this.options.label} Render Texture` : 'Render Target render texture',\n        name: 'renderTexture',\n        format:\n          colorAttachments && colorAttachments.length && colorAttachments[0].targetFormat\n            ? colorAttachments[0].targetFormat\n            : this.renderer.options.preferredFormat,\n        ...(this.options.qualityRatio !== undefined && { qualityRatio: this.options.qualityRatio }),\n        usage: ['copySrc', 'renderAttachment', 'textureBinding'],\n      })\n    }\n\n    this.addToScene()\n  }\n\n  /**\n   * Get the textures outputted by the {@link renderPass} if any, which means its {@link RenderPass.viewTextures | viewTextures} if not multisampled, or the {@link RenderPass.resolveTargets | resolveTargets} else.\n   *\n   * Since some {@link RenderPass} might not have any view textures (or in case the first resolve target is `null`), the first element can be the {@link RenderTarget.renderTexture | RenderTarget renderTexture} itself.\n   *\n   * @readonly\n   */\n  get outputTextures(): Texture[] {\n    return !this.renderPass.outputTextures.length\n      ? !this.renderTexture\n        ? []\n        : [this.renderTexture]\n      : this.renderPass.outputTextures.map((texture, index) => {\n          return index === 0 && this.renderPass.options.renderToSwapChain ? this.renderTexture : texture\n        })\n  }\n\n  /**\n   * Add the {@link RenderTarget} to the renderer and the {@link core/scenes/Scene.Scene | Scene}\n   */\n  addToScene() {\n    this.renderer.renderTargets.push(this)\n\n    if (this.#autoRender) {\n      this.renderer.scene.addRenderTarget(this)\n    }\n  }\n\n  /**\n   * Remove the {@link RenderTarget} from the renderer and the {@link core/scenes/Scene.Scene | Scene}\n   */\n  removeFromScene() {\n    if (this.#autoRender) {\n      this.renderer.scene.removeRenderTarget(this)\n    }\n\n    this.renderer.renderTargets = this.renderer.renderTargets.filter((renderTarget) => renderTarget.uuid !== this.uuid)\n  }\n\n  /**\n   * Resize our {@link renderPass}\n   */\n  resize() {\n    // reset the newly created depth texture\n    if (this.options.depthTexture) {\n      this.renderPass.options.depthTexture.texture = this.options.depthTexture.texture\n    }\n\n    this.renderPass?.resize()\n  }\n\n  /**\n   * Remove our {@link RenderTarget}. Alias of {@link RenderTarget#destroy}\n   */\n  remove() {\n    this.destroy()\n  }\n\n  /**\n   * Destroy our {@link RenderTarget}\n   */\n  destroy() {\n    // release mesh struct\n    this.renderer.meshes.forEach((mesh) => {\n      if (mesh.outputTarget && mesh.outputTarget.uuid === this.uuid) {\n        mesh.setOutputTarget(null)\n      }\n    })\n\n    // release shader passes struct\n    this.renderer.shaderPasses.forEach((shaderPass) => {\n      if (shaderPass.outputTarget && shaderPass.outputTarget.uuid === this.uuid) {\n        // force render target to null before removing / re-adding to scene\n        shaderPass.outputTarget = null\n        shaderPass.setOutputTarget(null)\n      }\n    })\n\n    // remove from scene and renderer array\n    this.removeFromScene()\n\n    this.renderPass?.destroy()\n    this.renderTexture?.destroy()\n  }\n}\n","export default /* wgsl */ `\r\nstruct VSOutput {\r\n  @builtin(position) position: vec4f,\r\n  @location(0) uv: vec2f,\r\n};\r\n\r\n@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {\r\n  return textureSample(renderTexture, defaultSampler, fsInput.uv);\r\n}`\r\n","import { FullscreenPlane } from '../meshes/FullscreenPlane'\r\nimport { isRenderer, Renderer } from '../renderers/utils'\r\nimport { RenderTarget } from './RenderTarget'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { MeshBaseOptions, MeshBaseRenderParams } from '../meshes/mixins/MeshBaseMixin'\r\nimport { Texture } from '../textures/Texture'\r\nimport default_pass_fsWGSl from '../shaders/chunks/default_pass_fs.wgsl'\r\nimport { throwWarning } from '../../utils/utils'\r\n\r\n/**\r\n * Parameters used to create a {@link ShaderPass}\r\n */\r\nexport interface ShaderPassParams extends MeshBaseRenderParams {\r\n  /** Optional input {@link RenderTarget} to assign to the {@link ShaderPass}. Used to automatically copy the content of the given {@link RenderTarget} texture into the {@link ShaderPass#renderTexture | ShaderPass renderTexture}. */\r\n  inputTarget?: RenderTarget\r\n\r\n  /** Whether the result of this {@link ShaderPass} should be copied to the {@link ShaderPass#renderTexture | renderTexture} after each render. Default to false. */\r\n  copyOutputToRenderTexture?: boolean\r\n}\r\n\r\nexport interface ShaderPassOptions extends MeshBaseOptions {\r\n  /** Whether the result of this {@link ShaderPass} should be copied to the {@link ShaderPass#renderTexture | renderTexture} after each render. Default to false. */\r\n  copyOutputToRenderTexture?: boolean\r\n}\r\n\r\n/**\r\n * Used to apply postprocessing, i.e. draw meshes to a {@link Texture} and then draw a {@link FullscreenPlane} using that texture as an input.\r\n *\r\n * A ShaderPass could either post process the whole scene or just a bunch of meshes using a specific {@link RenderTarget}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a ShaderPass\r\n * const shaderPass = new ShaderPass(gpuCurtain, {\r\n *   label: 'My shader pass',\r\n *   shaders: {\r\n *     fragment: {\r\n *       code: shaderPassCode, // assume it is a valid WGSL fragment shader\r\n *     },\r\n *   },\r\n * })\r\n * ```\r\n */\r\nexport class ShaderPass extends FullscreenPlane {\r\n  /** Optional input {@link RenderTarget} to assign to the {@link ShaderPass}. Used to automatically copy the content of the given {@link RenderTarget} texture into the {@link ShaderPass#renderTexture | ShaderPass renderTexture}. */\r\n  inputTarget: RenderTarget | undefined\r\n\r\n  /** Options used to create this {@link ShaderPass} */\r\n  options: ShaderPassOptions\r\n\r\n  /**\r\n   * ShaderPass constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link ShaderPass}\r\n   * @param parameters - {@link ShaderPassParams | parameters} use to create this {@link ShaderPass}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters: ShaderPassParams = {}) {\r\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' ShaderPass' : 'ShaderPass')\r\n\r\n    // disable depth for postprocessing passes\r\n    parameters.depth = false\r\n\r\n    // blend equation specific to shader passes\r\n    const defaultBlend: GPUBlendState = {\r\n      color: {\r\n        srcFactor: 'one',\r\n        dstFactor: 'one-minus-src-alpha',\r\n      },\r\n      alpha: {\r\n        srcFactor: 'one',\r\n        dstFactor: 'one-minus-src-alpha',\r\n      },\r\n    }\r\n\r\n    if (!parameters.targets) {\r\n      parameters.targets = [\r\n        {\r\n          blend: defaultBlend,\r\n        },\r\n      ]\r\n    } else if (parameters.targets && parameters.targets.length && !parameters.targets[0].blend) {\r\n      parameters.targets[0].blend = defaultBlend\r\n    }\r\n\r\n    parameters.label = parameters.label ?? 'ShaderPass ' + renderer.shaderPasses?.length\r\n\r\n    // set default sample count to post processing render pass\r\n    parameters.sampleCount = !!parameters.sampleCount\r\n      ? parameters.sampleCount\r\n      : renderer && renderer.postProcessingPass\r\n      ? renderer && renderer.postProcessingPass.options.sampleCount\r\n      : 1\r\n\r\n    if (!parameters.shaders) {\r\n      parameters.shaders = {}\r\n    }\r\n\r\n    if (!parameters.shaders.fragment) {\r\n      parameters.shaders.fragment = {\r\n        code: default_pass_fsWGSl,\r\n        entryPoint: 'main',\r\n      }\r\n    }\r\n\r\n    // force the postprocessing passes to not use depth\r\n    parameters.depth = false\r\n\r\n    super(renderer, parameters)\r\n\r\n    if (parameters.inputTarget) {\r\n      this.setInputTarget(parameters.inputTarget)\r\n    }\r\n\r\n    if (this.outputTarget) {\r\n      // patch to match outputTarget if needed\r\n      this.setRenderingOptionsForRenderPass(this.outputTarget.renderPass)\r\n    }\r\n\r\n    this.type = 'ShaderPass'\r\n\r\n    this.createTexture({\r\n      label: parameters.label ? `${parameters.label} render texture` : 'Shader pass render texture',\r\n      name: 'renderTexture',\r\n      fromTexture: this.inputTarget ? this.inputTarget.renderTexture : null,\r\n      usage: ['copySrc', 'copyDst', 'textureBinding'],\r\n      ...(this.outputTarget &&\r\n        this.outputTarget.options.qualityRatio && { qualityRatio: this.outputTarget.options.qualityRatio }),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Hook used to clean up parameters before sending them to the material.\r\n   * @param parameters - parameters to clean before sending them to the {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}\r\n   * @returns - cleaned parameters\r\n   */\r\n  cleanupRenderMaterialParameters(parameters: ShaderPassParams): MeshBaseRenderParams {\r\n    // patch mesh parameters\r\n    delete parameters.copyOutputToRenderTexture\r\n    delete parameters.inputTarget\r\n\r\n    super.cleanupRenderMaterialParameters(parameters)\r\n\r\n    return parameters\r\n  }\r\n\r\n  /**\r\n   * Get our main {@link Texture} that contains the input content to be used by the {@link ShaderPass}. Can also contain the ouputted content if {@link ShaderPassOptions#copyOutputToRenderTexture | copyOutputToRenderTexture} is set to true.\r\n   * @readonly\r\n   */\r\n  get renderTexture(): Texture | undefined {\r\n    return this.textures.find((texture) => texture.options.name === 'renderTexture')\r\n  }\r\n\r\n  /**\r\n   * Assign or remove an input {@link RenderTarget} to this {@link ShaderPass}, which can be different from what has just been drawn to the {@link core/renderers/GPURenderer.GPURenderer#context | context} current texture.\r\n   *\r\n   * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a RenderTarget as well.\r\n   * Also copy or remove the {@link RenderTarget#renderTexture | render target render texture} into the {@link ShaderPass} {@link renderTexture}\r\n   * @param inputTarget - the {@link RenderTarget} to assign or null if we want to remove the current {@link RenderTarget}\r\n   */\r\n  setInputTarget(inputTarget: RenderTarget | null) {\r\n    if (inputTarget && inputTarget.type !== 'RenderTarget') {\r\n      throwWarning(`${this.options.label ?? this.type}: inputTarget is not a RenderTarget: ${inputTarget}`)\r\n      return\r\n    }\r\n\r\n    // ensure the mesh is in the correct scene stack\r\n    this.removeFromScene()\r\n    this.inputTarget = inputTarget\r\n    this.addToScene()\r\n\r\n    // it might not have been created yet\r\n    if (this.renderTexture) {\r\n      if (inputTarget) {\r\n        this.renderTexture.copy(this.inputTarget.renderTexture)\r\n      } else {\r\n        this.renderTexture.options.fromTexture = null\r\n        this.renderTexture.createTexture()\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add the {@link ShaderPass} to the {@link core/scenes/Scene.Scene | Scene} and optionally to the renderer as well.\r\n   * @param addToRenderer - whether to add this {@link ShaderPass} to the {@link Renderer#shaderPasses | Renderer shaderPasses array}\r\n   */\r\n  addToScene(addToRenderer = false) {\r\n    if (addToRenderer) {\r\n      this.renderer.shaderPasses.push(this)\r\n    }\r\n\r\n    this.setRenderingOptionsForRenderPass(\r\n      this.outputTarget ? this.outputTarget.renderPass : this.renderer.postProcessingPass\r\n    )\r\n\r\n    if (this.autoRender) {\r\n      this.renderer.scene.addShaderPass(this)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the {@link ShaderPass} from the {@link core/scenes/Scene.Scene | Scene} and optionally from the renderer as well.\r\n   * @param removeFromRenderer - whether to remove this {@link ShaderPass} from the {@link Renderer#shaderPasses | Renderer shaderPasses array}\r\n   */\r\n  removeFromScene(removeFromRenderer = false) {\r\n    if (this.outputTarget) {\r\n      this.outputTarget.destroy()\r\n    }\r\n\r\n    if (this.autoRender) {\r\n      this.renderer.scene.removeShaderPass(this)\r\n    }\r\n\r\n    if (removeFromRenderer) {\r\n      this.renderer.shaderPasses = this.renderer.shaderPasses.filter((sP) => sP.uuid !== this.uuid)\r\n    }\r\n  }\r\n}\r\n","import { ProjectedObject3D } from '../../core/objects3D/ProjectedObject3D'\nimport { GPUCurtainsRenderer } from '../renderers/GPUCurtainsRenderer'\nimport { GPUCurtains } from '../GPUCurtains'\nimport { isCurtainsRenderer } from '../../core/renderers/utils'\nimport { DOMElement, DOMElementBoundingRect, DOMElementParams, DOMPosition, RectBBox } from '../../core/DOM/DOMElement'\nimport { Vec2 } from '../../math/Vec2'\nimport { Vec3 } from '../../math/Vec3'\nimport { Object3DTransforms } from '../../core/objects3D/Object3D'\nimport { Box3 } from '../../math/Box3'\n\n/** Defines the {@link DOMObject3D} bounding boxes in both document and world spaces */\nexport interface DOMObject3DSize {\n  /** Whether we should update the computed sizes before updating the matrices. */\n  shouldUpdate: boolean\n  /** Normalized world size represent the size ratio of the DOM element compared to its container (the renderer DOM element). */\n  normalizedWorld: {\n    /** 2D size of the {@link DOMObject3D} relative to the document, in the [0, 1] range. */\n    size: Vec2\n    /** 2D position of the {@link DOMObject3D} relative to the document, in the [-1, 1] range, [0, 0] being at the container center. */\n    position: Vec2\n  }\n  /** Camera world size and position are the {@link normalizedWorld} size and positions accounting for camera screen ratio (visible height / width in world unit) */\n  cameraWorld: {\n    /** 2D size of the {@link DOMObject3D} relative to the camera field of view and size. */\n    size: Vec2\n  }\n  /** Scaled world size and position are the {@link cameraWorld} size and position scaled by the geometry bounding box, because the geometry vertices are not always in the [-1, 1] range. */\n  scaledWorld: {\n    /** 3D size of the {@link DOMObject3D} relative to the camera field of view and size and the geometry bounding box. */\n    size: Vec3\n    /** 3D position of the {@link DOMObject3D} relative to the camera field of view and size and the normalized coordinates. */\n    position: Vec3\n  }\n}\n\n/**\n * Defines all necessary {@link Vec3 | vectors}/{@link math/Quat.Quat | quaternions} to compute a 3D {@link math/Mat4.Mat4 | model matrix} based on a DOM {@link HTMLElement}\n */\nexport interface DOMObject3DTransforms extends Omit<Object3DTransforms, 'origin' | 'position'> {\n  /** Transformation origin object */\n  origin: {\n    /** Transformation origin {@link Vec3 | vector} relative to the {@link DOMObject3D} */\n    model: Vec3\n    /** Transformation origin {@link Vec3 | vector} relative to the 3D world */\n    world: Vec3\n  }\n  /** Position object */\n  position: {\n    /** Position {@link Vec3 | vector} relative to the 3D world */\n    world: Vec3\n    /** Additional translation {@link Vec3 | vector} relative to the DOM document */\n    document: Vec3\n  }\n}\n\n/**\n * Parameters used to create a {@link DOMObject3D}\n */\nexport interface DOMObject3DParams {\n  /** Whether to automatically update the {@link DOMObject3D} document and world positions on scroll */\n  watchScroll?: boolean\n}\n\n/**\n * This special kind of {@link ProjectedObject3D} uses an {@link HTMLElement} to convert the corresponding X and Y {@link DOMObject3D#scale | scale} and {@link DOMObject3D#position | position} relative to the 3D world space.\n *\n * Internally used by the {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh} and {@link curtains/meshes/Plane.Plane | Plane}, but can also be used as any {@link core/meshes/Mesh.Mesh | Mesh} {@link parent} to map it with an {@link HTMLElement} size and position values.\n */\nexport class DOMObject3D extends ProjectedObject3D {\n  /** {@link GPUCurtainsRenderer} used to create this {@link DOMObject3D} */\n  renderer: GPUCurtainsRenderer\n\n  /** Defines the {@link DOMObject3D} bounding boxes in both document and world spaces */\n  size: DOMObject3DSize\n  /** {@link DOMElement} used to track the given {@link HTMLElement} size change */\n  domElement: DOMElement\n\n  /** Whether to automatically update the {@link DOMObject3D} document and world positions on scroll */\n  watchScroll: boolean\n\n  /** {@link DOMObject3DTransforms | Transformation object} of the {@link DOMObject3D} */\n  transforms: DOMObject3DTransforms\n\n  /** Private {@link Vec3 | vector} used to keep track of the actual {@link DOMObject3DTransforms#position.world | world position} accounting the {@link DOMObject3DTransforms#position.document | additional document translation} converted into world space */\n  #DOMObjectWorldPosition: Vec3 = new Vec3()\n  /** Private {@link Vec3 | vector} used to keep track of the actual {@link DOMObject3D} world scale accounting the {@link DOMObject3D#size.world | DOMObject3D world size} */\n  #DOMObjectWorldScale: Vec3 = new Vec3(1)\n  /** Private number representing the scale ratio of the {@link DOMObject3D} along Z axis to apply. Since it can be difficult to guess the most accurate scale along the Z axis of an object mapped to 2D coordinates, this helps with adjusting the scale along the Z axis. */\n  #DOMObjectDepthScaleRatio: number = 1\n\n  /** Helper {@link Box3 | bounding box} used to map the 3D object onto the 2D DOM element. */\n  boundingBox: Box3 = new Box3(new Vec3(-1), new Vec3(1))\n\n  /** function assigned to the {@link onAfterDOMElementResize} callback */\n  _onAfterDOMElementResizeCallback: () => void = () => {\n    /* allow empty callback */\n  }\n\n  /**\n   * DOMObject3D constructor\n   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link DOMObject3D}\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link DOMObject3D}\n   * @param parameters - {@link DOMObject3DParams | parameters} used to create this {@link DOMObject3D}\n   */\n  constructor(\n    renderer: GPUCurtainsRenderer | GPUCurtains,\n    element: DOMElementParams['element'],\n    parameters: DOMObject3DParams = {}\n  ) {\n    super(renderer)\n\n    renderer = isCurtainsRenderer(renderer, 'DOM3DObject')\n\n    this.renderer = renderer\n\n    this.size = {\n      shouldUpdate: true,\n      normalizedWorld: {\n        size: new Vec2(1),\n        position: new Vec2(),\n      },\n      cameraWorld: {\n        size: new Vec2(1),\n      },\n      scaledWorld: {\n        size: new Vec3(1),\n        position: new Vec3(),\n      },\n    }\n\n    this.watchScroll = parameters.watchScroll\n\n    this.camera = this.renderer.camera\n\n    this.boundingBox.min.onChange(() => this.shouldUpdateComputedSizes())\n    this.boundingBox.max.onChange(() => this.shouldUpdateComputedSizes())\n\n    this.setDOMElement(element)\n    ;(this.renderer as GPUCurtainsRenderer).domObjects.push(this)\n  }\n\n  /**\n   * Set the {@link domElement | DOM Element}\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\n   */\n  setDOMElement(element: DOMElementParams['element']) {\n    this.domElement = new DOMElement({\n      element,\n      onSizeChanged: (boundingRect) => this.resize(boundingRect),\n      onPositionChanged: () => this.onPositionChanged(),\n    })\n\n    // eagerly set size and position\n    this.updateSizeAndPosition()\n  }\n\n  /**\n   * Update size and position when the {@link domElement | DOM Element} position changed\n   */\n  onPositionChanged() {\n    if (this.watchScroll) {\n      this.shouldUpdateComputedSizes()\n    }\n  }\n\n  /**\n   * Reset the {@link domElement | DOMElement}\n   * @param element - the new {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\n   */\n  resetDOMElement(element: string | HTMLElement) {\n    if (this.domElement) {\n      this.domElement.destroy()\n    }\n\n    this.setDOMElement(element)\n  }\n\n  /**\n   * Resize the {@link DOMObject3D}\n   * @param boundingRect - new {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}\n   */\n  resize(boundingRect: DOMElementBoundingRect | null = null) {\n    if (!boundingRect && (!this.domElement || this.domElement?.isResizing)) return\n\n    // update size and position eagerly on resize\n    // so we have new values in the callbacks\n    this.updateSizeAndPosition()\n\n    this._onAfterDOMElementResizeCallback && this._onAfterDOMElementResizeCallback()\n  }\n\n  /* BOUNDING BOXES GETTERS */\n\n  /**\n   * Get the {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}\n   * @readonly\n   */\n  get boundingRect(): DOMElementBoundingRect {\n    return (\n      this.domElement?.boundingRect ?? {\n        width: 1,\n        height: 1,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n        x: 0,\n        y: 0,\n      }\n    )\n  }\n\n  /* TRANSFOMS */\n\n  /**\n   * Set our transforms properties and {@link Vec3#onChange | onChange vector} callbacks\n   */\n  setTransforms() {\n    super.setTransforms()\n\n    // reset our model transform origin to reflect CSS transform origins\n    this.transforms.origin.model.set(0.5, 0.5, 0)\n\n    this.transforms.origin.world = new Vec3()\n    this.transforms.position.document = new Vec3()\n\n    this.documentPosition.onChange(() => this.applyPosition())\n    this.transformOrigin.onChange(() => this.setWorldTransformOrigin())\n  }\n\n  /**\n   * Get the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}\n   */\n  get documentPosition(): Vec3 {\n    return this.transforms.position.document\n  }\n\n  /**\n   * Set the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}\n   * @param value - additional translation relative to the document to apply\n   */\n  set documentPosition(value: Vec3) {\n    this.transforms.position.document = value\n    this.applyPosition()\n  }\n\n  /**\n   * Get the {@link domElement | DOM element} scale in world space\n   * @readonly\n   */\n  get DOMObjectWorldScale(): Vec3 {\n    return this.#DOMObjectWorldScale.clone()\n  }\n\n  /**\n   * Get the {@link DOMObject3D} scale in world space (accounting for {@link scale})\n   * @readonly\n   */\n  get worldScale(): Vec3 {\n    return this.DOMObjectWorldScale.multiply(this.scale)\n  }\n\n  /**\n   * Get the {@link DOMObject3D} position in world space\n   * @readonly\n   */\n  get worldPosition(): Vec3 {\n    return this.#DOMObjectWorldPosition.clone()\n  }\n\n  /**\n   * Get the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}\n   */\n  get transformOrigin(): Vec3 {\n    return this.transforms.origin.model\n  }\n\n  /**\n   * Set the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}\n   * @param value - new transform origin\n   */\n  set transformOrigin(value: Vec3) {\n    this.transforms.origin.model = value\n    this.setWorldTransformOrigin()\n  }\n\n  /**\n   * Get the {@link DOMObject3D} transform origin in world space\n   */\n  get worldTransformOrigin(): Vec3 {\n    return this.transforms.origin.world\n  }\n\n  /**\n   * Set the {@link DOMObject3D} transform origin in world space\n   * @param value - new world space transform origin\n   */\n  set worldTransformOrigin(value: Vec3) {\n    this.transforms.origin.world = value\n  }\n\n  /**\n   * Check whether at least one of the matrix should be updated\n   */\n  shouldUpdateMatrices() {\n    super.shouldUpdateMatrices()\n\n    if (this.matricesNeedUpdate || this.size.shouldUpdate) {\n      this.updateSizeAndPosition()\n      this.matricesNeedUpdate = true\n    }\n\n    this.size.shouldUpdate = false\n  }\n\n  /**\n   * Set the {@link DOMObject3D#size.shouldUpdate | size shouldUpdate} flag to true to compute the new sizes before next matrices calculations.\n   */\n  shouldUpdateComputedSizes() {\n    this.size.shouldUpdate = true\n  }\n\n  /**\n   * Update the {@link DOMObject3D} sizes and position\n   */\n  updateSizeAndPosition() {\n    this.setWorldSizes()\n    this.applyDocumentPosition()\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Compute the {@link DOMObject3D} world position using its world position and document translation converted to world space\n   */\n  applyDocumentPosition() {\n    // avoid unnecessary calculations if we don't have a users set relative position\n    let worldPosition = new Vec3(0, 0, 0)\n    if (!this.documentPosition.equals(worldPosition)) {\n      worldPosition = this.documentToWorldSpace(this.documentPosition)\n    }\n\n    this.#DOMObjectWorldPosition.set(\n      this.position.x + this.size.scaledWorld.position.x + worldPosition.x,\n      this.position.y + this.size.scaledWorld.position.y + worldPosition.y,\n      this.position.z + this.size.scaledWorld.position.z + this.documentPosition.z / this.camera.CSSPerspective\n    )\n  }\n\n  /**\n   * Apply the transform origin and set the {@link DOMObject3D} world transform origin\n   */\n  applyTransformOrigin() {\n    if (!this.size) return\n\n    this.setWorldTransformOrigin()\n\n    super.applyTransformOrigin()\n  }\n\n  /* MATRICES */\n\n  /**\n   * Update the {@link modelMatrix | model matrix} accounting the {@link DOMObject3D} world position and {@link DOMObject3D} world scale\n   */\n  updateModelMatrix() {\n    // override for this special case\n    // compose our model transformation matrix from custom origin\n    this.modelMatrix.composeFromOrigin(\n      this.#DOMObjectWorldPosition,\n      this.quaternion,\n      this.scale,\n      this.worldTransformOrigin\n    )\n\n    // we need to scale our meshes at least on X and Y axis, from a square to a right sized rectangle\n    // we're doing this after our transformation matrix because this scale transformation always have the same origin\n    this.modelMatrix.scale(this.DOMObjectWorldScale)\n\n    this.shouldUpdateWorldMatrix()\n  }\n\n  /**\n   * Convert a document position {@link Vec3 | vector} to a world position {@link Vec3 | vector}\n   * @param vector - document position {@link Vec3 | vector} converted to world space\n   */\n  documentToWorldSpace(vector: Vec3 = new Vec3()): Vec3 {\n    return new Vec3(\n      ((vector.x * this.renderer.pixelRatio) / this.renderer.boundingRect.width) * this.camera.visibleSize.width,\n      -((vector.y * this.renderer.pixelRatio) / this.renderer.boundingRect.height) * this.camera.visibleSize.height,\n      vector.z\n    )\n  }\n\n  /**\n   * Compute the {@link DOMObject3D#size | world sizes}\n   */\n  computeWorldSizes() {\n    const containerBoundingRect = this.renderer.boundingRect\n\n    // dimensions and positions of our plane in the document and clip spaces\n    // don't forget positions in webgl space are referring to the center of our plane and canvas\n    const planeCenter = {\n      x: this.boundingRect.width / 2 + this.boundingRect.left,\n      y: this.boundingRect.height / 2 + this.boundingRect.top,\n    }\n\n    const containerCenter = {\n      x: containerBoundingRect.width / 2 + containerBoundingRect.left,\n      y: containerBoundingRect.height / 2 + containerBoundingRect.top,\n    }\n\n    // not always ranging from -1 to 1!\n    const { size, center } = this.boundingBox\n    if (size.x !== 0 && size.y !== 0 && size.z !== 0) {\n      center.divide(size)\n    }\n\n    // normalized world size represent the size ratio of the DOM element compared to its container (the renderer DOM element)\n    // in the [0, 1] range\n    this.size.normalizedWorld.size.set(\n      this.boundingRect.width / containerBoundingRect.width,\n      this.boundingRect.height / containerBoundingRect.height\n    )\n\n    // normalized world position represent the position of the DOM element compared to its container (the renderer DOM element)\n    // in the [-1, 1] range, [0, 0] being the center of the container\n    this.size.normalizedWorld.position.set(\n      (planeCenter.x - containerCenter.x) / containerBoundingRect.width,\n      (containerCenter.y - planeCenter.y) / containerBoundingRect.height\n    )\n\n    // camera world size and position are the normalized world size and positions accounting for camera screen ratio (visible height / width in world unit).\n    this.size.cameraWorld.size.set(\n      this.size.normalizedWorld.size.x * this.camera.visibleSize.width,\n      this.size.normalizedWorld.size.y * this.camera.visibleSize.height\n    )\n\n    // scaled world size and position are the camera world size and position scaled by the geometry bounding box\n    // because the geometry vertices do not always have a [-1, 1] range\n    this.size.scaledWorld.size.set(this.size.cameraWorld.size.x / size.x, this.size.cameraWorld.size.y / size.y, 1)\n\n    // Z size is based on Y component, because with a perspective camera, the width is based upon the height\n    // we could still adjust with #DOMObjectDepthScaleRatio\n    this.size.scaledWorld.size.z =\n      this.size.scaledWorld.size.y * (size.x / size.y / (this.boundingRect.width / this.boundingRect.height))\n\n    // our scaled world position is the normalized position multiplied by the camera screen ratio\n    this.size.scaledWorld.position.set(\n      this.size.normalizedWorld.position.x * this.camera.visibleSize.width,\n      this.size.normalizedWorld.position.y * this.camera.visibleSize.height,\n      0\n    )\n  }\n\n  /**\n   * Compute and set the {@link DOMObject3D#size.world | world size} and set the {@link DOMObject3D} world transform origin\n   */\n  setWorldSizes() {\n    this.computeWorldSizes()\n    this.setWorldScale()\n    this.setWorldTransformOrigin()\n  }\n\n  /**\n   * Set the {@link worldScale} accounting for scaled world size and {@link DOMObjectDepthScaleRatio}\n   */\n  setWorldScale() {\n    this.#DOMObjectWorldScale.set(\n      this.size.scaledWorld.size.x,\n      this.size.scaledWorld.size.y,\n      this.size.scaledWorld.size.z * this.#DOMObjectDepthScaleRatio\n    )\n\n    this.shouldUpdateMatrixStack()\n  }\n\n  /**\n   * Set {@link DOMObjectDepthScaleRatio}. Since it can be difficult to guess the most accurate scale along the Z axis of an object mapped to 2D coordinates, this helps with adjusting the scale along the Z axis.\n   * @param value - depth scale ratio value to use\n   */\n  set DOMObjectDepthScaleRatio(value: number) {\n    this.#DOMObjectDepthScaleRatio = value\n\n    this.setWorldScale()\n  }\n\n  /**\n   * Set the {@link DOMObject3D} world transform origin and tell the matrices to update\n   */\n  setWorldTransformOrigin() {\n    // set transformation origin relative to world space as well\n    this.transforms.origin.world = new Vec3(\n      (this.transformOrigin.x * 2 - 1) * // between -1 and 1\n        this.#DOMObjectWorldScale.x,\n      -(this.transformOrigin.y * 2 - 1) * // between -1 and 1\n        this.#DOMObjectWorldScale.y,\n      this.transformOrigin.z * this.#DOMObjectWorldScale.z\n    )\n\n    this.shouldUpdateMatrixStack()\n  }\n\n  /**\n   * Update the {@link domElement | DOM Element} scroll position\n   * @param delta - last {@link utils/ScrollManager.ScrollManager.delta | scroll delta values}\n   */\n  updateScrollPosition(delta: DOMPosition = { x: 0, y: 0 }) {\n    // actually update the plane position only if last X delta or last Y delta is not equal to 0\n    if (delta.x || delta.y) {\n      // set new positions based on our delta without triggering reflow\n      this.domElement.updateScrollPosition(delta)\n    }\n  }\n\n  /**\n   * Callback to execute just after the {@link domElement} has been resized.\n   * @param callback - callback to run just after {@link domElement} has been resized\n   * @returns - our {@link DOMObject3D}\n   */\n  onAfterDOMElementResize(callback: () => void): DOMObject3D {\n    if (callback) {\n      this._onAfterDOMElementResizeCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Destroy our {@link DOMObject3D}\n   */\n  destroy() {\n    super.destroy()\n    this.domElement?.destroy()\n  }\n}\n","import { DOMObject3D } from '../objects3D/DOMObject3D'\nimport { isCurtainsRenderer } from '../../core/renderers/utils'\nimport { ProjectedMeshBaseMixin } from '../../core/meshes/mixins/ProjectedMeshBaseMixin'\nimport { MeshBaseRenderParams } from '../../core/meshes/mixins/MeshBaseMixin'\nimport { throwWarning } from '../../utils/utils'\nimport { GPUCurtainsRenderer } from '../renderers/GPUCurtainsRenderer'\nimport { GPUCurtains } from '../GPUCurtains'\nimport { DOMTexture } from '../../core/textures/DOMTexture'\nimport { AllowedGeometries } from '../../types/Materials'\nimport { DOMElementBoundingRect, DOMElementParams } from '../../core/DOM/DOMElement'\nimport { Vec3 } from '../../math/Vec3'\n\n/**\n * Base parameters to create a {@link DOMMesh}\n */\nexport interface DOMMeshBaseParams extends MeshBaseRenderParams {\n  /** Whether to automatically create a {@link DOMTexture} for all {@link HTMLImageElement}, {@link HTMLVideoElement} and {@link HTMLCanvasElement} child of the specified {@link DOMMesh} {@link HTMLElement} */\n  autoloadSources?: boolean\n  /** Whether to automatically update the {@link DOMMesh} position on scroll */\n  watchScroll?: boolean\n}\n\n/**\n * Parameters to create a {@link DOMMesh}\n */\nexport interface DOMMeshParams extends DOMMeshBaseParams {\n  /** {@link core/geometries/Geometry.Geometry | Geometry} to use with the {@link DOMMesh} */\n  geometry: AllowedGeometries\n}\n\n/** @const - default {@link DOMMesh} parameters */\nconst defaultDOMMeshParams = {\n  autoloadSources: true,\n  watchScroll: true,\n} as DOMMeshBaseParams\n\n/**\n * Create a {@link core/meshes/Mesh.Mesh | Mesh} based on a {@link DOMObject3D}, which allow the {@link core/meshes/Mesh.Mesh | Mesh} to be scaled and positioned based on a {@link HTMLElement} {@link DOMElementBoundingRect | bounding rectangle}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a DOMMesh with a box geometry,\n * // assuming there's a HTML element with the \"mesh\" ID in the DOM\n * // will use the normals colors as default shading\n * const domMesh = new DOMMesh(gpuCurtains, '#mesh', {\n *   label: 'My DOM Mesh',\n *   geometry: new BoxGeometry(),\n * })\n * ```\n */\nexport class DOMMesh extends ProjectedMeshBaseMixin(DOMObject3D) {\n  /** {@link GPUCurtainsRenderer} used to create this {@link DOMObject3D} */\n  renderer: GPUCurtainsRenderer\n  /** Whether to automatically create a {@link DOMTexture} for all {@link HTMLImageElement}, {@link HTMLVideoElement} and {@link HTMLCanvasElement} child of the specified {@link DOMMesh} {@link HTMLElement} */\n  autoloadSources: boolean\n  /** Whether all the sources have been successfully loaded */\n  _sourcesReady: boolean\n\n  // callbacks / events\n  /** function assigned to the {@link onLoading} callback */\n  _onLoadingCallback = (texture: DOMTexture): void => {\n    /* allow empty callback */\n  }\n\n  /**\n   * DOMMesh constructor\n   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link DOMMesh}\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link DOMMesh}\n   * @param parameters - {@link DOMMeshParams | parameters} used to create this {@link DOMMesh}\n   */\n  constructor(\n    renderer: GPUCurtainsRenderer | GPUCurtains,\n    element: DOMElementParams['element'],\n    parameters: DOMMeshParams\n  ) {\n    super(renderer, element, { ...defaultDOMMeshParams, ...parameters })\n\n    parameters = { ...defaultDOMMeshParams, ...parameters }\n\n    isCurtainsRenderer(renderer, parameters.label ? parameters.label + ' DOMMesh' : 'DOMMesh')\n\n    this.type = 'DOMMesh'\n\n    const { autoloadSources } = parameters\n\n    this.autoloadSources = autoloadSources\n\n    this.sourcesReady = false\n    this.setInitSources()\n  }\n\n  /**\n   * Get/set whether our {@link material} and {@link geometry} are ready\n   * @readonly\n   */\n  get ready(): boolean {\n    return this._ready\n  }\n\n  set ready(value: boolean) {\n    if (value && !this._ready && this.sourcesReady) {\n      this._onReadyCallback && this._onReadyCallback()\n    }\n\n    this._ready = value\n  }\n\n  /**\n   * Get/set whether all the initial {@link DOMMesh} sources have been successfully loaded\n   * @readonly\n   */\n  get sourcesReady(): boolean {\n    return this._sourcesReady\n  }\n\n  set sourcesReady(value: boolean) {\n    if (value && !this._sourcesReady && this.ready) {\n      this._onReadyCallback && this._onReadyCallback()\n    }\n\n    this._sourcesReady = value\n  }\n\n  /**\n   * Add a {@link DOMMesh} to the {@link core/scenes/Scene.Scene | Scene} and optionally to the renderer.\n   * @param addToRenderer - whether to add this {@link DOMMesh} to the {@link GPUCurtainsRenderer#meshes | renderer meshes array} and {@link GPUCurtainsRenderer#domMeshes | renderer domMeshes array}\n   */\n  addToScene(addToRenderer = false) {\n    super.addToScene(addToRenderer)\n\n    if (addToRenderer) {\n      ;(this.renderer as GPUCurtainsRenderer).domMeshes.push(this)\n    }\n  }\n\n  /**\n   * Remove a {@link DOMMesh} from the {@link core/scenes/Scene.Scene | Scene} and optionally from the renderer as well.\n   * @param removeFromRenderer - whether to remove this {@link DOMMesh} from the {@link GPUCurtainsRenderer#meshes | renderer meshes array} and {@link GPUCurtainsRenderer#domMeshes | renderer domMeshes array}\n   */\n  removeFromScene(removeFromRenderer = false) {\n    super.removeFromScene(removeFromRenderer)\n\n    if (removeFromRenderer) {\n      ;(this.renderer as GPUCurtainsRenderer).domMeshes = (this.renderer as GPUCurtainsRenderer).domMeshes.filter(\n        (m) => m.uuid !== this.uuid\n      )\n    }\n  }\n\n  /**\n   * Load initial {@link DOMMesh} sources if needed and create associated {@link DOMTexture}\n   */\n  setInitSources() {\n    let loaderSize = 0\n    let sourcesLoaded = 0\n\n    if (this.autoloadSources) {\n      const images = this.domElement.element.querySelectorAll('img')\n      const videos = this.domElement.element.querySelectorAll('video')\n      const canvases = this.domElement.element.querySelectorAll('canvas')\n\n      loaderSize = images.length + videos.length + canvases.length\n\n      const onSourceUploaded = (texture) => {\n        sourcesLoaded++\n\n        this._onLoadingCallback && this._onLoadingCallback(texture)\n\n        if (sourcesLoaded === loaderSize) {\n          this.sourcesReady = true\n        }\n      }\n\n      if (!loaderSize) {\n        this.sourcesReady = true\n      }\n\n      // load images\n      if (images.length) {\n        images.forEach((image) => {\n          const texture = this.createDOMTexture({\n            name: image.getAttribute('data-texture-name') ?? 'texture' + this.domTextures.length,\n          })\n\n          texture.onSourceUploaded(() => onSourceUploaded(texture)).loadImage(image.src)\n        })\n      }\n\n      // load videos\n      if (videos.length) {\n        videos.forEach((video) => {\n          const texture = this.createDOMTexture({\n            name: video.getAttribute('data-texture-name') ?? 'texture' + this.domTextures.length,\n          })\n\n          texture.onSourceUploaded(() => onSourceUploaded(texture)).loadVideo(video)\n        })\n      }\n\n      // load canvases\n      if (canvases.length) {\n        canvases.forEach((canvas) => {\n          const texture = this.createDOMTexture({\n            name: canvas.getAttribute('data-texture-name') ?? 'texture' + this.domTextures.length,\n          })\n\n          texture.onSourceUploaded(() => onSourceUploaded(texture)).loadCanvas(canvas)\n        })\n      }\n    } else {\n      this.sourcesReady = true\n    }\n  }\n\n  /**\n   * Reset/change the {@link domElement | DOM Element}\n   * @param element - new {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\n   */\n  resetDOMElement(element: string | HTMLElement) {\n    if (!!element) {\n      super.resetDOMElement(element)\n    } else if (!element && !this.renderer.production) {\n      throwWarning(\n        `${this.options.label}: You are trying to reset a ${this.type} with a HTML element that does not exist. The old HTML element will be kept instead.`\n      )\n    }\n  }\n\n  /**\n   * Get our {@link DOMMesh#domElement | DOM Element} {@link core/DOM/DOMElement.DOMElement#boundingRect | bounding rectangle} accounting for current {@link core/renderers/GPURenderer.GPURenderer#pixelRatio | renderer pixel ratio}\n   */\n  get pixelRatioBoundingRect(): DOMElementBoundingRect {\n    const devicePixelRatio = window.devicePixelRatio ?? 1\n    const scaleBoundingRect = this.renderer.pixelRatio / devicePixelRatio\n\n    return Object.keys(this.domElement.boundingRect).reduce(\n      (a, key) => ({ ...a, [key]: this.domElement.boundingRect[key] * scaleBoundingRect }),\n      {\n        x: 0,\n        y: 0,\n        width: 0,\n        height: 0,\n        top: 0,\n        right: 0,\n        bottom: 0,\n        left: 0,\n      }\n    )\n  }\n\n  /**\n   * Compute the Mesh geometry if needed\n   */\n  computeGeometry() {\n    super.computeGeometry()\n    this.boundingBox.copy(this.geometry.boundingBox)\n  }\n\n  /* EVENTS */\n\n  /**\n   * Called each time one of the initial sources associated {@link DOMTexture#texture | GPU texture} has been uploaded to the GPU\n   * @param callback - callback to call each time a {@link DOMTexture#texture | GPU texture} has been uploaded to the GPU\n   * @returns - our {@link DOMMesh}\n   */\n  onLoading(callback: (texture: DOMTexture) => void): DOMMesh {\n    if (callback) {\n      this._onLoadingCallback = callback\n    }\n\n    return this\n  }\n}\n","import { isCurtainsRenderer } from '../../core/renderers/utils'\nimport { PlaneGeometry, PlaneGeometryParams } from '../../core/geometries/PlaneGeometry'\nimport { DOMMesh, DOMMeshBaseParams, DOMMeshParams } from './DOMMesh'\nimport { Vec3 } from '../../math/Vec3'\nimport { Vec2 } from '../../math/Vec2'\nimport { cacheManager } from '../../utils/CacheManager'\nimport { GPUCurtainsRenderer } from '../renderers/GPUCurtainsRenderer'\nimport { GPUCurtains } from '../GPUCurtains'\nimport { DOMElementParams } from '../../core/DOM/DOMElement'\n\n/**\n * Parameters used to create a {@link Plane}\n */\nexport interface PlaneParams extends DOMMeshBaseParams, PlaneGeometryParams {\n  /** Optional {@link PlaneGeometry} to use */\n  geometry?: PlaneGeometry\n}\n\n/** @const - default {@link Plane} parameters */\nconst defaultPlaneParams = {\n  label: 'Plane',\n\n  // geometry\n  instancesCount: 1,\n  vertexBuffers: [],\n} as PlaneParams\n\n/**\n * Used to create a special {@link DOMMesh} class object using a {@link PlaneGeometry}.\n * This means a quad that looks like an ordinary {@link HTMLElement} but with WebGPU rendering capabilities.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a Plane,\n * // assuming there's a HTML element with the \"plane\" ID in the DOM\n * // will use the normals colors as default shading\n * const plane = new Plane(gpuCurtains, '#plane', {\n *   label: 'My plane',\n * })\n * ```\n */\nexport class Plane extends DOMMesh {\n  /**\n   * Plane constructor\n   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link Plane}\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link Plane}\n   * @param parameters - {@link PlaneParams | parameters} used to create this {@link Plane}\n   */\n  constructor(\n    renderer: GPUCurtainsRenderer | GPUCurtains,\n    element: DOMElementParams['element'],\n    parameters = {} as PlaneParams\n  ) {\n    renderer = isCurtainsRenderer(renderer, parameters.label ? parameters.label + ' Plane' : 'Plane')\n\n    // assign default params if needed\n    const params = { ...defaultPlaneParams, ...parameters }\n\n    let { geometry, widthSegments, heightSegments, ...DOMMeshParams } = params\n    const { instancesCount, vertexBuffers, ...materialParams } = DOMMeshParams\n\n    // can we get a cached geometry?\n    if (!geometry || geometry.type !== 'PlaneGeometry') {\n      widthSegments = widthSegments ?? 1\n      heightSegments = heightSegments ?? 1\n\n      const geometryID = widthSegments * heightSegments + widthSegments\n\n      // if there's no additional vertex buffers, try to get a geometry from cache\n      if (!vertexBuffers.length) {\n        geometry = cacheManager.getPlaneGeometryByID(geometryID)\n      }\n\n      if (!geometry) {\n        // no cached plane geometry, we need to create a new one\n        geometry = new PlaneGeometry({ widthSegments, heightSegments, instancesCount, vertexBuffers })\n        cacheManager.addPlaneGeometry(geometry as PlaneGeometry)\n      } else {\n        // if geometry comes from cache, force instances count\n        geometry.instancesCount = instancesCount\n      }\n    }\n\n    // get DOMMesh params\n    super(renderer, element, { geometry, ...materialParams } as DOMMeshParams)\n\n    this.type = 'Plane'\n  }\n\n  /**\n   * Take the pointer {@link Vec2 | vector} position relative to the document and returns it relative to our {@link Plane}\n   * It ranges from -1 to 1 on both axis\n   * @param mouseCoords - pointer {@link Vec2 | vector} coordinates\n   * @returns - raycasted {@link Vec2 | vector} coordinates relative to the {@link Plane}\n   */\n  mouseToPlaneCoords(mouseCoords: Vec2 = new Vec2()): Vec2 {\n    // TODO simplify if no rotation set?\n    // raycasting\n    // based on https://people.cs.clemson.edu/~dhouse/courses/405/notes/raycast.pdf\n\n    // convert mouse position to 3d normalised device coordinates (from [-1, -1] to [1, 1])\n    const worldMouse = {\n      x: 2 * (mouseCoords.x / this.renderer.boundingRect.width) - 1,\n      y: 2 * (1 - mouseCoords.y / this.renderer.boundingRect.height) - 1,\n    }\n\n    const rayOrigin = this.camera.position.clone()\n\n    // ray direction based on normalised coordinates and plane translation\n    const rayDirection = new Vec3(worldMouse.x, worldMouse.y, -0.5)\n\n    // unproject ray direction\n    rayDirection.unproject(this.camera)\n    rayDirection.sub(rayOrigin).normalize()\n\n    // plane normals (could also be [0, 0, -1], makes no difference, raycasting lands the same result for both face)\n    const planeNormals = new Vec3(0, 0, 1)\n\n    // apply plane quaternion to plane normals\n    planeNormals.applyQuat(this.quaternion).normalize()\n\n    const result = new Vec3(0, 0, 0)\n\n    const denominator = planeNormals.dot(rayDirection)\n\n    if (Math.abs(denominator) >= 0.0001) {\n      const inverseViewMatrix = this.worldMatrix.getInverse().premultiply(this.camera.viewMatrix)\n\n      // get the plane's center coordinates\n      // start with our transform origin point\n      const planeOrigin = this.worldTransformOrigin.clone().add(this.worldPosition)\n\n      // rotate our transform origin about world center\n      const rotatedOrigin = new Vec3(\n        this.worldPosition.x - planeOrigin.x,\n        this.worldPosition.y - planeOrigin.y,\n        this.worldPosition.z - planeOrigin.z\n      )\n      rotatedOrigin.applyQuat(this.quaternion)\n\n      // add it to our plane origin\n      planeOrigin.add(rotatedOrigin)\n\n      // distance from ray origin to plane\n      const distance = planeNormals.dot(planeOrigin.clone().sub(rayOrigin)) / denominator\n      result.copy(rayOrigin.add(rayDirection.multiplyScalar(distance)))\n\n      result.applyMat4(inverseViewMatrix)\n    } else {\n      // no intersection!\n      result.set(Infinity, Infinity, Infinity)\n    }\n\n    return new Vec2(result.x, result.y)\n  }\n}\n","import { GPUCameraRenderer, GPUCameraRendererParams } from '../../core/renderers/GPUCameraRenderer'\r\nimport { DOMProjectedMesh } from '../../core/renderers/GPURenderer'\r\nimport { DOMObject3D } from '../objects3D/DOMObject3D'\r\n\r\n/**\r\n * This renderer just extends the {@link GPUCameraRenderer} by keeping track of all the created {@link curtains/meshes/DOMMesh.DOMMesh | DOM Meshes}\r\n *\r\n * @example\r\n * ```javascript\r\n * // first, we need a WebGPU device, that's what GPUDeviceManager is for\r\n * const gpuDeviceManager = new GPUDeviceManager({\r\n *   label: 'Custom device manager',\r\n * })\r\n *\r\n * // we need to wait for the WebGPU device to be created\r\n * await gpuDeviceManager.init()\r\n *\r\n * // then we can create a curtains renderer\r\n * const gpuCurtainsRenderer = new GPUCurtainsRenderer({\r\n *   deviceManager: gpuDeviceManager, // we need the WebGPU device to create the renderer context\r\n *   container: document.querySelector('#canvas'),\r\n * })\r\n * ```\r\n */\r\nexport class GPUCurtainsRenderer extends GPUCameraRenderer {\r\n  /** All created {@link curtains/meshes/DOMMesh.DOMMesh | DOM Meshes} and {@link curtains/meshes/Plane.Plane | planes} */\r\n  domMeshes: DOMProjectedMesh[]\r\n  /** All created {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D} which position should be updated on scroll. */\r\n  domObjects: DOMObject3D[]\r\n\r\n  /**\r\n   * GPUCurtainsRenderer constructor\r\n   * @param parameters - {@link GPUCameraRendererParams | parameters} used to create this {@link GPUCurtainsRenderer}\r\n   */\r\n  constructor({\r\n    deviceManager,\r\n    label,\r\n    container,\r\n    pixelRatio = 1,\r\n    autoResize = true,\r\n    preferredFormat,\r\n    alphaMode = 'premultiplied',\r\n    renderPass,\r\n    camera,\r\n  }: GPUCameraRendererParams) {\r\n    super({\r\n      deviceManager,\r\n      label,\r\n      container,\r\n      pixelRatio,\r\n      autoResize,\r\n      preferredFormat,\r\n      alphaMode,\r\n      renderPass,\r\n      camera,\r\n    } as GPUCameraRendererParams)\r\n\r\n    this.type = 'GPUCurtainsRenderer'\r\n  }\r\n\r\n  /**\r\n   * Add the {@link GPUCurtainsRenderer#domMeshes | domMeshes} to our tracked elements\r\n   */\r\n  setRendererObjects() {\r\n    super.setRendererObjects()\r\n\r\n    this.domMeshes = []\r\n    this.domObjects = []\r\n  }\r\n\r\n  /**\r\n   * Update the {@link domObjects} sizes and positions when the {@link camera} {@link core/camera/Camera.Camera#position | position} or {@link core/camera/Camera.Camera#size | size} change.\r\n   */\r\n  onCameraMatricesChanged() {\r\n    super.onCameraMatricesChanged()\r\n\r\n    this.domObjects.forEach((domObject) => {\r\n      domObject.updateSizeAndPosition()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Resize the {@link meshes}.\r\n   */\r\n  resizeMeshes() {\r\n    this.meshes.forEach((mesh) => {\r\n      if (!('domElement' in mesh)) {\r\n        // resize meshes that do not have a bound DOM element\r\n        mesh.resize(this.boundingRect)\r\n      }\r\n    })\r\n\r\n    // resize dom objects as well\r\n    this.domObjects.forEach((domObject) => {\r\n      // update position for DOM objects only if they're not currently being resized\r\n      if (!domObject.domElement.isResizing) {\r\n        domObject.domElement.setSize()\r\n      }\r\n    })\r\n  }\r\n}\r\n","import { DOMPosition } from '../core/DOM/DOMElement'\n\n/**\n * Parameters used to create a {@link ScrollManager}\n */\nexport interface ScrollManagerParams {\n  /** Current scroll position */\n  scroll?: DOMPosition\n  /** Last scroll deltas */\n  delta?: DOMPosition\n  /** Whether the {@link ScrollManager} should listen to the window scroll event or not */\n  shouldWatch?: boolean\n  /** Callback to execute each time the {@link ScrollManager#scroll | scroll} values change */\n  onScroll?: (delta?: DOMPosition) => void\n}\n\n/**\n * Used to keep track of our scroll position, scroll deltas and trigger an onScroll callback.<br>\n * Could either listen to the native scroll event or be hooked to any scroll (natural or virtual) scroll event\n */\nexport class ScrollManager {\n  /** Current scroll position */\n  scroll: DOMPosition\n  /** Last scroll deltas */\n  delta: DOMPosition\n  /** Whether the {@link ScrollManager} should listen to the window scroll event or not */\n  shouldWatch: boolean\n  /** Callback to execute each time the {@link scroll} values change */\n  onScroll: (delta?: DOMPosition) => void\n\n  /**\n   * ScrollManager constructor\n   * @param parameters - {@link ScrollManagerParams | parameters} used to create this {@link ScrollManager}\n   */\n  constructor({\n    scroll = { x: 0, y: 0 },\n    delta = { x: 0, y: 0 },\n    shouldWatch = true,\n    onScroll = (delta: DOMPosition = { x: 0, y: 0 }) => {\n      /* allow empty callback */\n    },\n  }: ScrollManagerParams = {}) {\n    this.scroll = scroll\n    this.delta = delta\n\n    this.shouldWatch = shouldWatch\n\n    this.onScroll = onScroll\n\n    if (this.shouldWatch) {\n      window.addEventListener('scroll', this.setScroll.bind(this), { passive: true })\n    }\n  }\n\n  /**\n   * Called by the scroll event listener\n   */\n  setScroll() {\n    this.updateScrollValues({ x: window.pageXOffset, y: window.pageYOffset })\n  }\n\n  /**\n   * Updates the scroll manager X and Y scroll values as well as last X and Y deltas\n   * Internally called by the scroll event listener\n   * Could be called externally as well if the user wants to handle the scroll by himself\n   * @param parameters - {@link core/DOM/DOMElement.DOMPosition | scroll values}\n   */\n  updateScrollValues({ x, y }: DOMPosition) {\n    // get our scroll delta values\n    const lastScroll = this.scroll\n    this.scroll = { x, y }\n    this.delta = {\n      x: lastScroll.x - this.scroll.x,\n      y: lastScroll.y - this.scroll.y,\n    }\n\n    if (this.onScroll) {\n      this.onScroll(this.delta)\n    }\n  }\n\n  /**\n   * Destroy our scroll manager (just remove our event listner if it had been added previously)\n   */\n  destroy() {\n    if (this.shouldWatch) {\n      // passive triggers a typescript error\n      // https://github.com/microsoft/TypeScript/issues/32912#issuecomment-522142969\n      window.removeEventListener('scroll', this.setScroll.bind(this), { passive: true } as AddEventListenerOptions &\n        EventListenerOptions)\n    }\n  }\n}\n","import { GPUCurtainsRenderer } from './renderers/GPUCurtainsRenderer'\r\nimport { ScrollManager } from '../utils/ScrollManager'\r\nimport { resizeManager } from '../utils/ResizeManager'\r\nimport { Vec3 } from '../math/Vec3'\r\nimport { PingPongPlane } from '../extras/meshes/PingPongPlane'\r\nimport { ShaderPass } from '../core/renderPasses/ShaderPass'\r\nimport { GPURenderer, GPURendererParams, SceneStackedMesh } from '../core/renderers/GPURenderer'\r\nimport { DOMMesh } from './meshes/DOMMesh'\r\nimport { Plane } from './meshes/Plane'\r\nimport { ComputePass } from '../core/computePasses/ComputePass'\r\nimport { Camera, CameraBasePerspectiveOptions } from '../core/camera/Camera'\r\nimport { DOMElementBoundingRect, DOMElementParams, DOMPosition } from '../core/DOM/DOMElement'\r\nimport { GPUCameraRenderer, GPUCameraRendererParams } from '../core/renderers/GPUCameraRenderer'\r\nimport {\r\n  GPUDeviceManager,\r\n  GPUDeviceManagerBaseParams,\r\n  GPUDeviceManagerSetupParams,\r\n} from '../core/renderers/GPUDeviceManager'\r\nimport { Renderer } from '../core/renderers/utils'\r\nimport { DOMObject3D } from './objects3D/DOMObject3D'\r\n\r\n/**\r\n * Options used to create a {@link GPUCurtains}\r\n */\r\nexport interface GPUCurtainsOptions extends Omit<GPUCameraRendererParams, 'deviceManager'>, GPUDeviceManagerBaseParams {\r\n  /** Whether {@link GPUCurtains} should create its own requestAnimationFrame loop to render or not */\r\n  autoRender?: boolean\r\n  /** Whether {@link GPUCurtains} should handle all resizing by itself or not */\r\n  autoResize?: boolean\r\n  /** Whether {@link GPUCurtains} should listen to scroll event or not */\r\n  watchScroll?: boolean\r\n}\r\n\r\n/**\r\n * Parameters used to create a {@link GPUCurtains}\r\n */\r\nexport interface GPUCurtainsParams extends Partial<Omit<GPUCurtainsOptions, 'container'>> {\r\n  /** {@link HTMLElement} or string representing an {@link HTMLElement} selector that will hold the WebGPU {@link HTMLCanvasElement}. Could be set later if not specified. */\r\n  container?: string | HTMLElement | null\r\n}\r\n\r\n/**\r\n * Used as a global class to create a {@link GPUCurtainsRenderer}, create all objects that need a reference to a renderer, listen to various events such as scroll and resize and render.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n * ```\r\n */\r\nexport class GPUCurtains {\r\n  /** The type of this {@link GPUCurtains} */\r\n  type: string\r\n  /** Options used to create this {@link GPUCurtains} */\r\n  options: GPUCurtainsOptions\r\n  /** {@link HTMLElement} that will hold the WebGPU {@link HTMLCanvasElement} */\r\n  container: HTMLElement\r\n\r\n  /** {@link GPUDeviceManager} used to handle the {@link GPUAdapter} and {@link GPUDevice} */\r\n  deviceManager: GPUDeviceManager\r\n\r\n  /** Tiny scroll event listener wrapper */\r\n  scrollManager: ScrollManager\r\n\r\n  /** Request animation frame callback returned id if used */\r\n  animationFrameID: null | number\r\n\r\n  // callbacks / events\r\n  /** function assigned to the {@link onRender} callback */\r\n  _onRenderCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onScroll} callback */\r\n  _onScrollCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onError} callback */\r\n  _onErrorCallback: () => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n  /** function assigned to the {@link onContextLost} callback */\r\n  _onContextLostCallback: (info?: GPUDeviceLostInfo) => void = () => {\r\n    /* allow empty callback */\r\n  }\r\n\r\n  /**\r\n   * GPUCurtains constructor\r\n   * @param parameters - {@link GPUCurtainsParams | parameters} used to create this {@link GPUCurtains}\r\n   */\r\n  constructor({\r\n    container,\r\n    label,\r\n    pixelRatio = window.devicePixelRatio ?? 1,\r\n    preferredFormat,\r\n    alphaMode = 'premultiplied',\r\n    production = false,\r\n    adapterOptions = {},\r\n    renderPass,\r\n    camera,\r\n    autoRender = true,\r\n    autoResize = true,\r\n    watchScroll = true,\r\n  }: GPUCurtainsParams = {}) {\r\n    this.type = 'CurtainsGPU'\r\n\r\n    this.options = {\r\n      container,\r\n      label,\r\n      pixelRatio,\r\n      camera,\r\n      production,\r\n      adapterOptions,\r\n      preferredFormat,\r\n      alphaMode,\r\n      renderPass,\r\n      autoRender,\r\n      autoResize,\r\n      watchScroll,\r\n    }\r\n\r\n    this.setDeviceManager()\r\n\r\n    if (container) {\r\n      this.setContainer(container)\r\n    }\r\n\r\n    this.initEvents()\r\n\r\n    // only if auto render\r\n    if (this.options.autoRender) {\r\n      this.animate()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the {@link container}\r\n   * @param container - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\r\n   */\r\n  setContainer(container: DOMElementParams['element']) {\r\n    if (!container) {\r\n      const container = document.createElement('div')\r\n      container.setAttribute('id', 'curtains-gpu-canvas')\r\n      document.body.appendChild(container)\r\n      this.options.container = container\r\n    } else {\r\n      if (typeof container === 'string') {\r\n        container = document.querySelector(container)\r\n\r\n        if (!container) {\r\n          const container = document.createElement('div')\r\n          container.setAttribute('id', 'curtains-gpu-canvas')\r\n          document.body.appendChild(container)\r\n          this.options.container = container\r\n        } else {\r\n          this.options.container = container as HTMLElement\r\n        }\r\n      } else if (container instanceof Element) {\r\n        this.options.container = container as HTMLElement\r\n      }\r\n    }\r\n\r\n    this.container = this.options.container as HTMLElement\r\n\r\n    this.setMainRenderer()\r\n  }\r\n\r\n  /**\r\n   * Set the default {@link GPUCurtainsRenderer | renderer}\r\n   */\r\n  setMainRenderer() {\r\n    this.createCurtainsRenderer({\r\n      deviceManager: this.deviceManager,\r\n      // TODO ...this.options?\r\n      label: this.options.label,\r\n      container: this.options.container,\r\n      pixelRatio: this.options.pixelRatio,\r\n      autoResize: this.options.autoResize,\r\n      preferredFormat: this.options.preferredFormat,\r\n      alphaMode: this.options.alphaMode,\r\n      renderPass: this.options.renderPass,\r\n      camera: this.options.camera,\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Patch the options with default values before creating a {@link Renderer}\r\n   * @param parameters - parameters to patch\r\n   */\r\n  patchRendererOptions<T extends GPURendererParams | GPUCameraRendererParams>(parameters: T): T {\r\n    if (parameters.pixelRatio === undefined) parameters.pixelRatio = this.options.pixelRatio\r\n    if (parameters.autoResize === undefined) parameters.autoResize = this.options.autoResize\r\n\r\n    return parameters\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link GPURenderer} instance\r\n   * @param parameters - {@link GPURendererParams | parameters} to use\r\n   */\r\n  createRenderer(parameters: GPURendererParams): GPURenderer {\r\n    parameters = this.patchRendererOptions(parameters)\r\n\r\n    return new GPURenderer({ ...parameters, deviceManager: this.deviceManager })\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link GPUCameraRenderer} instance\r\n   * @param parameters - {@link GPUCameraRendererParams | parameters} to use\r\n   */\r\n  createCameraRenderer(parameters: GPUCameraRendererParams): GPUCameraRenderer {\r\n    parameters = this.patchRendererOptions(parameters)\r\n\r\n    return new GPUCameraRenderer({ ...parameters, deviceManager: this.deviceManager })\r\n  }\r\n\r\n  /**\r\n   * Create a new {@link GPUCurtainsRenderer} instance\r\n   * @param parameters - {@link GPUCameraRendererParams | parameters} to use\r\n   */\r\n  createCurtainsRenderer(parameters: GPUCameraRendererParams): GPUCurtainsRenderer {\r\n    parameters = this.patchRendererOptions(parameters)\r\n\r\n    return new GPUCurtainsRenderer({ ...parameters, deviceManager: this.deviceManager })\r\n  }\r\n\r\n  /**\r\n   * Set our {@link GPUDeviceManager}\r\n   */\r\n  setDeviceManager() {\r\n    this.deviceManager = new GPUDeviceManager({\r\n      label: 'GPUCurtains default device',\r\n      production: this.options.production,\r\n      adapterOptions: this.options.adapterOptions,\r\n      onError: () =>\r\n        setTimeout(() => {\r\n          this._onErrorCallback && this._onErrorCallback()\r\n        }, 0),\r\n      onDeviceLost: (info) => this._onContextLostCallback && this._onContextLostCallback(info),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Get all created {@link Renderer}\r\n   * @readonly\r\n   */\r\n  get renderers(): Renderer[] {\r\n    return this.deviceManager.renderers\r\n  }\r\n\r\n  /**\r\n   * Get the first created {@link Renderer} if any\r\n   * @readonly\r\n   */\r\n  get renderer(): Renderer | undefined {\r\n    return this.renderers[0]\r\n  }\r\n\r\n  /**\r\n   * Set the {@link GPUDeviceManager} {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device} if possible, then set all created {@link Renderer} contexts.\r\n   * @async\r\n   * @param parameters - {@link GPUAdapter} and/or {@link GPUDevice} to use if set.\r\n   */\r\n  async setDevice({ adapter = null, device = null }: GPUDeviceManagerSetupParams = {}) {\r\n    await this.deviceManager.init({ adapter, device })\r\n  }\r\n\r\n  /**\r\n   * Restore the {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device}\r\n   * @async\r\n   */\r\n  async restoreContext() {\r\n    await this.deviceManager.restoreDevice()\r\n  }\r\n\r\n  /* RENDERER TRACKED OBJECTS */\r\n\r\n  /**\r\n   * Get all the created {@link PingPongPlane}\r\n   * @readonly\r\n   */\r\n  get pingPongPlanes(): PingPongPlane[] {\r\n    return this.renderers?.map((renderer) => renderer.pingPongPlanes).flat()\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link ShaderPass}\r\n   * @readonly\r\n   */\r\n  get shaderPasses(): ShaderPass[] {\r\n    return this.renderers?.map((renderer) => renderer.shaderPasses).flat()\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link SceneStackedMesh | meshes}\r\n   * @readonly\r\n   */\r\n  get meshes(): SceneStackedMesh[] {\r\n    return this.renderers?.map((renderer) => renderer.meshes).flat()\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link DOMMesh | DOM Meshes} (including {@link Plane | planes})\r\n   * @readonly\r\n   */\r\n  get domMeshes(): DOMMesh[] {\r\n    return this.renderers\r\n      ?.filter((renderer) => renderer instanceof GPUCurtainsRenderer)\r\n      .map((renderer: GPUCurtainsRenderer) => renderer.domMeshes)\r\n      .flat()\r\n  }\r\n\r\n  /**\r\n   * Get all created {@link curtains/objects3D/DOMObject3D.DOMObject3D | DOMObject3D} which position should be updated on scroll.\r\n   * @readonly\r\n   */\r\n  get domObjects(): DOMObject3D[] {\r\n    return this.renderers\r\n      ?.filter((renderer) => renderer instanceof GPUCurtainsRenderer)\r\n      .map((renderer: GPUCurtainsRenderer) => renderer.domObjects)\r\n      .flat()\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link Plane | planes}\r\n   * @readonly\r\n   */\r\n  get planes(): Plane[] {\r\n    return this.domMeshes.filter((domMesh) => domMesh instanceof Plane) as Plane[]\r\n  }\r\n\r\n  /**\r\n   * Get all the created {@link ComputePass | compute passes}\r\n   * @readonly\r\n   */\r\n  get computePasses(): ComputePass[] {\r\n    return this.renderers?.map((renderer) => renderer.computePasses).flat()\r\n  }\r\n\r\n  /**\r\n   * Get our {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer bounding rectangle}\r\n   */\r\n  get boundingRect(): DOMElementBoundingRect {\r\n    return this.renderer?.boundingRect\r\n  }\r\n\r\n  /* SCROLL */\r\n\r\n  /**\r\n   * Set the {@link scrollManager}\r\n   */\r\n  initScroll() {\r\n    this.scrollManager = new ScrollManager({\r\n      // init values\r\n      scroll: {\r\n        x: window.pageXOffset,\r\n        y: window.pageYOffset,\r\n      },\r\n      delta: {\r\n        x: 0,\r\n        y: 0,\r\n      },\r\n      shouldWatch: this.options.watchScroll,\r\n      onScroll: (delta) => this.updateScroll(delta),\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Update all {@link DOMMesh#updateScrollPosition | DOMMesh scroll positions}\r\n   * @param delta - last {@link ScrollManager#delta | scroll delta values}\r\n   */\r\n  updateScroll(delta: DOMPosition = { x: 0, y: 0 }) {\r\n    this.domObjects.forEach((domObject) => {\r\n      if (domObject.domElement && domObject.watchScroll) {\r\n        domObject.updateScrollPosition(delta)\r\n      }\r\n    })\r\n\r\n    this._onScrollCallback && this._onScrollCallback()\r\n  }\r\n\r\n  /**\r\n   * Update our {@link ScrollManager#scroll | scrollManager scroll values}. Called each time the scroll has changed if {@link GPUCurtains#options.watchScroll | watchScroll option} is set to true. Could be called externally as well.\r\n   * @param scroll - new {@link DOMPosition | scroll values}\r\n   */\r\n  updateScrollValues(scroll: DOMPosition = { x: 0, y: 0 }) {\r\n    this.scrollManager.updateScrollValues(scroll)\r\n  }\r\n\r\n  /**\r\n   * Get our {@link ScrollManager#delta | scrollManager delta values}\r\n   * @readonly\r\n   */\r\n  get scrollDelta(): DOMPosition {\r\n    return this.scrollManager.delta\r\n  }\r\n\r\n  /**\r\n   * Get our {@link ScrollManager#scroll | scrollManager scroll values}\r\n   * @readonly\r\n   */\r\n  get scrollValues(): DOMPosition {\r\n    return this.scrollManager.scroll\r\n  }\r\n\r\n  /* EVENT LISTENERS */\r\n\r\n  /**\r\n   * Set the resize and scroll event listeners\r\n   */\r\n  initEvents() {\r\n    resizeManager.useObserver(this.options.autoResize)\r\n\r\n    this.initScroll()\r\n  }\r\n\r\n  /* EVENTS */\r\n\r\n  /**\r\n   * Called at each render frame\r\n   * @param callback - callback to run at each render\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onRender(callback: () => void): GPUCurtains {\r\n    if (callback) {\r\n      this._onRenderCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Called each time the {@link ScrollManager#scroll | scrollManager scroll values} changed\r\n   * @param callback - callback to run each time the {@link ScrollManager#scroll | scrollManager scroll values} changed\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onScroll(callback: () => void): GPUCurtains {\r\n    if (callback) {\r\n      this._onScrollCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Called if there's been an error while trying to create the {@link GPUDeviceManager#device | device}\r\n   * @param callback - callback to run if there's been an error while trying to create the {@link GPUDeviceManager#device | device}\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onError(callback: () => void): GPUCurtains {\r\n    if (callback) {\r\n      this._onErrorCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Called whenever the {@link GPUDeviceManager#device | device} is lost\r\n   * @param callback - callback to run whenever the {@link GPUDeviceManager#device | device} is lost\r\n   * @returns - our {@link GPUCurtains}\r\n   */\r\n  onContextLost(callback: (info?: GPUDeviceLostInfo) => void): GPUCurtains {\r\n    if (callback) {\r\n      this._onContextLostCallback = callback\r\n    }\r\n\r\n    return this\r\n  }\r\n\r\n  /**\r\n   * Create a requestAnimationFrame loop and run it\r\n   */\r\n  animate() {\r\n    this.render()\r\n    this.animationFrameID = window.requestAnimationFrame(this.animate.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Render our {@link GPUDeviceManager}\r\n   */\r\n  render() {\r\n    this._onRenderCallback && this._onRenderCallback()\r\n\r\n    this.deviceManager.render()\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link GPUCurtains} and {@link GPUDeviceManager}\r\n   */\r\n  destroy() {\r\n    if (this.animationFrameID) {\r\n      window.cancelAnimationFrame(this.animationFrameID)\r\n    }\r\n\r\n    this.deviceManager.destroy()\r\n    this.scrollManager?.destroy()\r\n    resizeManager.destroy()\r\n  }\r\n}\r\n","import { CameraRenderer } from '../../core/renderers/utils'\r\nimport { Camera } from '../../core/camera/Camera'\r\nimport { Object3D } from '../../core/objects3D/Object3D'\r\nimport { Vec2 } from '../../math/Vec2'\r\n\r\n// port of https://github.com/toji/webgpu-gltf-case-study/blob/main/samples/js/tiny-webgpu-demo.js#L312\r\n\r\n/**\r\n * Helper to create orbit camera controls (sometimes called arcball camera).\r\n *\r\n * @example\r\n * ```javascript\r\n * const orbitControls = new OrbitControl(renderer)\r\n * ```\r\n */\r\nexport class OrbitControls extends Object3D {\r\n  /** {@link CameraRenderer} used to get the {@link core/scenes/Scene.Scene | Scene} object to use as {@link Object3D#parent | parent}, and eventually the {@link CameraRenderer#camera | Camera} as well. */\r\n  renderer: CameraRenderer\r\n  /** {@link Camera} to use with this {@link OrbitControls}. */\r\n  camera: Camera\r\n\r\n  /**\r\n   * Last pointer {@link Vec2 | position}, used internally for orbiting delta calculations.\r\n   * @private\r\n   */\r\n  #lastPosition = new Vec2()\r\n  /**\r\n   * Whether the {@link OrbitControls} are currently orbiting.\r\n   * @private\r\n   */\r\n  #isOrbiting = false\r\n\r\n  /** Whether to constrain the orbit controls along X axis or not. */\r\n  constrainXOrbit = true\r\n  /** Whether to constrain the orbit controls along Y axis or not. */\r\n  constrainYOrbit = false\r\n\r\n  /** Minimum orbit values to apply along both axis if constrained. */\r\n  minOrbit = new Vec2(-Math.PI * 0.5, -Math.PI)\r\n  /** Maximum orbit values to apply along both axis if constrained. */\r\n  maxOrbit = new Vec2(Math.PI * 0.5, Math.PI)\r\n  /** Orbit step (speed) values to use. */\r\n  orbitStep = new Vec2(0.025)\r\n\r\n  /** Whether to constrain the zoom or not. */\r\n  constrainZoom = true\r\n  /** Minimum zoom value to apply if constrained (can be negative). */\r\n  minZoom = 0\r\n  /** Maximum zoom value to apply if constrained. */\r\n  maxZoom = 20\r\n  /** Zoom step (speed) value to use. */\r\n  zoomStep = 0.005\r\n\r\n  /**\r\n   * {@link HTMLElement} (or {@link Window} element) to use for event listeners.\r\n   * @private\r\n   */\r\n  #element = null\r\n\r\n  /**\r\n   * OrbitControls constructor\r\n   * @param renderer - {@link CameraRenderer} used to get the {@link core/scenes/Scene.Scene | Scene} object to use as {@link Object3D#parent | parent}, and eventually the {@link CameraRenderer#camera | Camera} as well.\r\n   * @param parameters - optional parameters.\r\n   * @param parameters.camera - optional {@link Camera} to use.\r\n   * @param parameters.element - optional {@link HTMLElement} (or {@link Window} element) to use for event listeners.\r\n   */\r\n  constructor(\r\n    renderer: CameraRenderer,\r\n    { camera = null, element = null }: { camera?: Camera; element?: HTMLElement | Window } = {}\r\n  ) {\r\n    super()\r\n\r\n    this.renderer = renderer\r\n    this.parent = this.renderer.scene\r\n\r\n    this.quaternion.setAxisOrder('YXZ')\r\n\r\n    this.camera = camera || this.renderer.camera\r\n    this.camera.parent = this\r\n\r\n    this.element = element ?? this.renderer.domElement.element\r\n  }\r\n\r\n  /**\r\n   * Set the element to use for event listeners. Can remove previous event listeners first if needed.\r\n   * @param value - {@link HTMLElement} (or {@link Window} element) to use.\r\n   */\r\n  set element(value: HTMLElement | Window | null) {\r\n    if (this.#element && (!value || this.#element !== value)) {\r\n      this.removeEvents()\r\n    }\r\n\r\n    this.#element = value\r\n\r\n    if (value) {\r\n      this.addEvents()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get our element to use for event listeners.\r\n   * @returns - {@link HTMLElement} (or {@link Window} element) used.\r\n   */\r\n  get element() {\r\n    return this.#element\r\n  }\r\n\r\n  /**\r\n   * Add the event listeners.\r\n   */\r\n  addEvents() {\r\n    this.#element.addEventListener('pointerdown', this.onPointerDown.bind(this))\r\n    this.#element.addEventListener('pointermove', this.onPointerMove.bind(this))\r\n    this.#element.addEventListener('pointerup', this.onPointerUp.bind(this))\r\n    this.#element.addEventListener('wheel', this.onMouseWheel.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Remove the event listeners.\r\n   */\r\n  removeEvents() {\r\n    this.#element.removeEventListener('pointerdown', this.onPointerDown.bind(this))\r\n    this.#element.removeEventListener('pointermove', this.onPointerMove.bind(this))\r\n    this.#element.removeEventListener('pointerup', this.onPointerUp.bind(this))\r\n    this.#element.removeEventListener('wheel', this.onMouseWheel.bind(this))\r\n  }\r\n\r\n  /**\r\n   * Callback executed on pointer down event.\r\n   * @param e - {@link PointerEvent}.\r\n   */\r\n  onPointerDown(e: PointerEvent) {\r\n    if (e.isPrimary) {\r\n      this.#isOrbiting = true\r\n    }\r\n\r\n    this.#lastPosition.set(e.pageX, e.pageY)\r\n  }\r\n\r\n  /**\r\n   * Callback executed on pointer move event.\r\n   * @param e - {@link PointerEvent}.\r\n   */\r\n  onPointerMove(e: PointerEvent) {\r\n    let xDelta, yDelta\r\n\r\n    // TODO PointerLock API?\r\n    // https://developer.mozilla.org/en-US/docs/Web/API/Pointer_Lock_API\r\n    if (document.pointerLockElement) {\r\n      xDelta = e.movementX\r\n      yDelta = e.movementY\r\n      this.orbit(xDelta * this.orbitStep.x, yDelta * this.orbitStep.y)\r\n    } else if (this.#isOrbiting) {\r\n      xDelta = e.pageX - this.#lastPosition.x\r\n      yDelta = e.pageY - this.#lastPosition.y\r\n      this.#lastPosition.set(e.pageX, e.pageY)\r\n      this.orbit(xDelta * this.orbitStep.x, yDelta * this.orbitStep.y)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback executed on pointer up event.\r\n   * @param e - {@link PointerEvent}.\r\n   */\r\n  onPointerUp(e: PointerEvent) {\r\n    if (e.isPrimary) {\r\n      this.#isOrbiting = false\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Callback executed on wheel event.\r\n   * @param e - {@link WheelEvent}.\r\n   */\r\n  onMouseWheel(e: WheelEvent) {\r\n    this.zoom(this.position.z + e.deltaY * this.zoomStep)\r\n    e.preventDefault()\r\n  }\r\n\r\n  /**\r\n   * Reset the {@link OrbitControls} {@link position} and {@link rotation} values.\r\n   */\r\n  reset() {\r\n    this.position.set(0)\r\n    this.rotation.set(0)\r\n  }\r\n\r\n  /**\r\n   * Update the {@link OrbitControls} {@link rotation} based on deltas.\r\n   * @param xDelta - delta along the X axis.\r\n   * @param yDelta - delta along the Y axis.\r\n   */\r\n  orbit(xDelta: number, yDelta: number) {\r\n    if (xDelta || yDelta) {\r\n      this.rotation.y -= xDelta\r\n      if (this.constrainYOrbit) {\r\n        this.rotation.y = Math.min(Math.max(this.rotation.y, this.minOrbit.y), this.maxOrbit.y)\r\n      } else {\r\n        while (this.rotation.y < -Math.PI) {\r\n          this.rotation.y += Math.PI * 2\r\n        }\r\n        while (this.rotation.y >= Math.PI) {\r\n          this.rotation.y -= Math.PI * 2\r\n        }\r\n      }\r\n\r\n      this.rotation.x -= yDelta\r\n      if (this.constrainXOrbit) {\r\n        this.rotation.x = Math.min(Math.max(this.rotation.x, this.minOrbit.x), this.maxOrbit.x)\r\n      } else {\r\n        while (this.rotation.x < -Math.PI) {\r\n          this.rotation.x += Math.PI * 2\r\n        }\r\n        while (this.rotation.x >= Math.PI) {\r\n          this.rotation.x -= Math.PI * 2\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update the {@link OrbitControls} {@link position} Z component based on the new distance.\r\n   * @param distance - new distance to use.\r\n   */\r\n  zoom(distance: number) {\r\n    this.position.z = distance\r\n    if (this.constrainZoom) {\r\n      this.position.z = Math.min(Math.max(this.position.z, this.minZoom), this.maxZoom)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Override {@link Object3D#updateModelMatrix | updateModelMatrix} method to compose the {@link modelMatrix}.\r\n   */\r\n  updateModelMatrix() {\r\n    // compose our model transformation matrix from rotation and translation in the right order\r\n    this.modelMatrix.identity().rotateFromQuaternion(this.quaternion).translate(this.position)\r\n\r\n    // tell our world matrix to update\r\n    this.shouldUpdateWorldMatrix()\r\n  }\r\n\r\n  /**\r\n   * Destroy the {@link OrbitControls}.\r\n   */\r\n  destroy() {\r\n    this.camera.parent = this.renderer.scene\r\n    this.parent = null\r\n\r\n    this.element = null\r\n  }\r\n}\r\n","import { IndexedGeometry } from '../../core/geometries/IndexedGeometry'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { GeometryBaseParams } from '../../types/Geometries'\r\n\r\n/**\r\n * Parameters used to create a {@link BoxGeometry}\r\n */\r\nexport interface BoxGeometryParams extends GeometryBaseParams {\r\n  /** Number of segments along the X axis */\r\n  widthSegments?: number\r\n  /** Number of segments along the Y axis */\r\n  heightSegments?: number\r\n  /** Number of segments along the Z axis */\r\n  depthSegments?: number\r\n}\r\n\r\n/**\r\n * Helper to easily create 3D box indexed geometries.\r\n *\r\n * @example\r\n * ```javascript\r\n * const boxGeometry = new BoxGeometry()\r\n * ```\r\n */\r\nexport class BoxGeometry extends IndexedGeometry {\r\n  constructor(\r\n    {\r\n      instancesCount = 1,\r\n      vertexBuffers = [],\r\n      topology,\r\n      mapBuffersAtCreation = true,\r\n      widthSegments = 1,\r\n      heightSegments = 1,\r\n      depthSegments = 1,\r\n    } = {} as BoxGeometryParams\r\n  ) {\r\n    super({ verticesOrder: 'ccw', topology, instancesCount, vertexBuffers, mapBuffersAtCreation })\r\n\r\n    this.type = 'BoxGeometry'\r\n\r\n    // taken from threejs\r\n    // https://github.com/mrdoob/three.js/blob/dev/src/geometries/BoxGeometry.js\r\n    widthSegments = Math.floor(widthSegments)\r\n    heightSegments = Math.floor(heightSegments)\r\n    depthSegments = Math.floor(depthSegments)\r\n\r\n    const vertices = []\r\n    const uvs = []\r\n    const normals = []\r\n    const indices = []\r\n\r\n    let numberOfVertices = 0\r\n\r\n    const buildPlane = (u, v, w, udir, vdir, width, height, depth, gridX, gridY) => {\r\n      const segmentWidth = width / gridX\r\n      const segmentHeight = height / gridY\r\n\r\n      const widthHalf = width / 2\r\n      const heightHalf = height / 2\r\n      const depthHalf = depth / 2\r\n\r\n      const gridX1 = gridX + 1\r\n      const gridY1 = gridY + 1\r\n\r\n      let vertexCounter = 0\r\n\r\n      const vector = new Vec3()\r\n\r\n      // generate vertices, normals and uvs\r\n\r\n      for (let iy = 0; iy < gridY1; iy++) {\r\n        const y = iy * segmentHeight - heightHalf\r\n\r\n        for (let ix = 0; ix < gridX1; ix++) {\r\n          const x = ix * segmentWidth - widthHalf\r\n\r\n          // set values to correct vector component\r\n\r\n          vector[u] = x * udir\r\n          vector[v] = y * vdir\r\n          vector[w] = depthHalf\r\n\r\n          // now apply vector to vertex buffer\r\n\r\n          vertices.push(vector.x, vector.y, vector.z)\r\n\r\n          // set values to correct vector component\r\n\r\n          vector[u] = 0\r\n          vector[v] = 0\r\n          vector[w] = depth > 0 ? 1 : -1\r\n\r\n          // now apply vector to normal buffer\r\n\r\n          normals.push(vector.x, vector.y, vector.z)\r\n\r\n          // uvs\r\n\r\n          uvs.push(ix / gridX)\r\n          uvs.push(iy / gridY)\r\n\r\n          // counters\r\n\r\n          vertexCounter += 1\r\n        }\r\n      }\r\n\r\n      // indices\r\n\r\n      // 1. you need three indices to draw a single face\r\n      // 2. a single segment consists of two faces\r\n      // 3. so we need to generate six (2*3) indices per segment\r\n\r\n      for (let iy = 0; iy < gridY; iy++) {\r\n        for (let ix = 0; ix < gridX; ix++) {\r\n          const a = numberOfVertices + ix + gridX1 * iy\r\n          const b = numberOfVertices + ix + gridX1 * (iy + 1)\r\n          const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1)\r\n          const d = numberOfVertices + (ix + 1) + gridX1 * iy\r\n\r\n          // faces\r\n\r\n          indices.push(a, b, d)\r\n          indices.push(b, c, d)\r\n\r\n          // update total number of vertices\r\n\r\n          numberOfVertices += vertexCounter\r\n        }\r\n      }\r\n    }\r\n\r\n    buildPlane('z', 'y', 'x', -1, -1, 2, 2, 2, depthSegments, heightSegments) // px\r\n    buildPlane('z', 'y', 'x', 1, -1, 2, 2, -2, depthSegments, heightSegments) // nx\r\n    buildPlane('x', 'z', 'y', 1, 1, 2, 2, 2, widthSegments, depthSegments) // py\r\n    buildPlane('x', 'z', 'y', 1, -1, 2, 2, -2, widthSegments, depthSegments) // ny\r\n    buildPlane('x', 'y', 'z', 1, -1, 2, 2, 2, widthSegments, heightSegments) // pz\r\n    buildPlane('x', 'y', 'z', -1, -1, 2, 2, -2, widthSegments, heightSegments) // nz\r\n\r\n    this.setAttribute({\r\n      name: 'position',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      size: 3,\r\n      array: new Float32Array(vertices),\r\n    })\r\n\r\n    this.setAttribute({\r\n      name: 'uv',\r\n      type: 'vec2f',\r\n      bufferFormat: 'float32x2',\r\n      size: 2,\r\n      array: new Float32Array(uvs),\r\n    })\r\n\r\n    this.setAttribute({\r\n      name: 'normal',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      size: 3,\r\n      array: new Float32Array(normals),\r\n    })\r\n\r\n    this.setIndexBuffer({\r\n      array: this.useUint16IndexArray ? new Uint16Array(indices) : new Uint32Array(indices),\r\n      bufferFormat: this.useUint16IndexArray ? 'uint16' : 'uint32',\r\n    })\r\n  }\r\n}\r\n","import { IndexedGeometry } from '../../core/geometries/IndexedGeometry'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { GeometryBaseParams } from '../../types/Geometries'\r\n\r\n/**\r\n * Parameters used to create a {@link SphereGeometry}\r\n */\r\nexport interface SphereGeometryParams extends GeometryBaseParams {\r\n  /** Number of horizontal segments */\r\n  widthSegments?: number\r\n  /** Number of vertical segments */\r\n  heightSegments?: number\r\n  /** Horizontal starting angle */\r\n  phiStart?: number\r\n  /** Horizontal sweep angle size */\r\n  phiLength?: number\r\n  /** Vertical starting angle */\r\n  thetaStart?: number\r\n  /** Vertical sweep angle size */\r\n  thetaLength?: number\r\n}\r\n\r\n/**\r\n * Helper to easily create 3D sphere indexed geometries.\r\n *\r\n * @example\r\n * ```javascript\r\n * const sphereGeometry = new SphereGeometry()\r\n * ```\r\n */\r\nexport class SphereGeometry extends IndexedGeometry {\r\n  constructor(\r\n    {\r\n      topology,\r\n      instancesCount = 1,\r\n      vertexBuffers = [],\r\n      mapBuffersAtCreation = true,\r\n      widthSegments = 32,\r\n      heightSegments = 16,\r\n      phiStart = 0,\r\n      phiLength = Math.PI * 2,\r\n      thetaStart = 0,\r\n      thetaLength = Math.PI,\r\n    } = {} as SphereGeometryParams\r\n  ) {\r\n    super({ verticesOrder: 'ccw', topology, instancesCount, vertexBuffers, mapBuffersAtCreation })\r\n\r\n    this.type = 'SphereGeometry'\r\n\r\n    // taken from threejs\r\n    // https://github.com/mrdoob/three.js/blob/dev/src/geometries/SphereGeometry.js\r\n    widthSegments = Math.max(3, Math.floor(widthSegments))\r\n    heightSegments = Math.max(2, Math.floor(heightSegments))\r\n\r\n    const radius = 1\r\n    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI)\r\n\r\n    let index = 0\r\n    const grid = []\r\n\r\n    const vertex = new Vec3()\r\n    const normal = new Vec3()\r\n\r\n    // buffers\r\n\r\n    const indices = []\r\n    const vertices = []\r\n    const normals = []\r\n    const uvs = []\r\n\r\n    // generate vertices, normals and uvs\r\n\r\n    for (let iy = 0; iy <= heightSegments; iy++) {\r\n      const verticesRow = []\r\n\r\n      const v = iy / heightSegments\r\n\r\n      // special case for the poles\r\n\r\n      let uOffset = 0\r\n\r\n      if (iy === 0 && thetaStart === 0) {\r\n        uOffset = 0.5 / widthSegments\r\n      } else if (iy === heightSegments && thetaEnd === Math.PI) {\r\n        uOffset = -0.5 / widthSegments\r\n      }\r\n\r\n      for (let ix = 0; ix <= widthSegments; ix++) {\r\n        const u = ix / widthSegments\r\n\r\n        // vertex\r\n\r\n        vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\r\n        vertex.y = radius * Math.cos(thetaStart + v * thetaLength)\r\n        vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\r\n\r\n        vertices.push(vertex.x, vertex.y, vertex.z)\r\n\r\n        // normal\r\n\r\n        normal.copy(vertex).normalize()\r\n        normals.push(normal.x, normal.y, normal.z)\r\n\r\n        // uv\r\n\r\n        uvs.push(u + uOffset, v)\r\n\r\n        verticesRow.push(index++)\r\n      }\r\n\r\n      grid.push(verticesRow)\r\n    }\r\n\r\n    // indices\r\n\r\n    for (let iy = 0; iy < heightSegments; iy++) {\r\n      for (let ix = 0; ix < widthSegments; ix++) {\r\n        const a = grid[iy][ix + 1]\r\n        const b = grid[iy][ix]\r\n        const c = grid[iy + 1][ix]\r\n        const d = grid[iy + 1][ix + 1]\r\n\r\n        if (iy !== 0 || thetaStart > 0) indices.push(a, b, d)\r\n        if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d)\r\n      }\r\n    }\r\n\r\n    this.setAttribute({\r\n      name: 'position',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      size: 3,\r\n      array: new Float32Array(vertices),\r\n    })\r\n\r\n    this.setAttribute({\r\n      name: 'uv',\r\n      type: 'vec2f',\r\n      bufferFormat: 'float32x2',\r\n      size: 2,\r\n      array: new Float32Array(uvs),\r\n    })\r\n\r\n    this.setAttribute({\r\n      name: 'normal',\r\n      type: 'vec3f',\r\n      bufferFormat: 'float32x3',\r\n      size: 3,\r\n      array: new Float32Array(normals),\r\n    })\r\n\r\n    this.setIndexBuffer({\r\n      array: this.useUint16IndexArray ? new Uint16Array(indices) : new Uint32Array(indices),\r\n      bufferFormat: this.useUint16IndexArray ? 'uint16' : 'uint32',\r\n    })\r\n  }\r\n}\r\n","import { isRenderer, Renderer } from '../../core/renderers/utils'\nimport { RenderTarget } from '../../core/renderPasses/RenderTarget'\nimport { FullscreenPlane } from '../../core/meshes/FullscreenPlane'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { Texture, TextureParams } from '../../core/textures/Texture'\nimport { MeshBaseRenderParams } from '../../core/meshes/mixins/MeshBaseMixin'\n\n/**\n * Used to create a special type of {@link FullscreenPlane} that allows to use the previous frame fragment shader output as an input texture.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a PingPongPlane\n * const shaderPass = new PingPongPlane(gpuCurtain, {\n *   label: 'My ping pong plane',\n *   shaders: {\n *     fragment: {\n *       code: pingPongCode, // assume it is a valid WGSL fragment shader\n *     },\n *   },\n * })\n * ```\n */\nexport class PingPongPlane extends FullscreenPlane {\n  /** {@link RenderTarget} content to use as an input */\n  outputTarget: RenderTarget\n\n  /**\n   * PingPongPlane constructor\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link PingPongPlane}\n   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link PingPongPlane}\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters = {} as MeshBaseRenderParams) {\n    renderer = isRenderer(renderer, parameters.label ? parameters.label + ' PingPongPlane' : 'PingPongPlane')\n\n    const colorAttachments =\n      parameters.targets &&\n      parameters.targets.length &&\n      parameters.targets.map((target) => {\n        return {\n          targetFormat: target.format,\n        }\n      })\n\n    // we will render into a separate texture\n    parameters.outputTarget = new RenderTarget(renderer, {\n      label: parameters.label ? parameters.label + ' render target' : 'Ping Pong render target',\n      useDepth: false,\n      ...(colorAttachments && { colorAttachments }),\n    })\n\n    // no blending and depth for ping pong planes\n    parameters.transparent = false\n    parameters.depth = false\n\n    parameters.label = parameters.label ?? 'PingPongPlane ' + renderer.pingPongPlanes?.length\n\n    super(renderer, parameters)\n\n    this.type = 'PingPongPlane'\n\n    this.createTexture({\n      label: parameters.label ? `${parameters.label} render texture` : 'PingPongPlane render texture',\n      name: 'renderTexture',\n      ...(parameters.targets && parameters.targets.length && { format: parameters.targets[0].format }),\n      usage: ['copyDst', 'textureBinding'],\n    } as TextureParams)\n  }\n\n  /**\n   * Get our main {@link Texture}, the one that contains our ping pong content\n   * @readonly\n   */\n  get renderTexture(): Texture | undefined {\n    return this.textures.find((texture) => texture.options.name === 'renderTexture')\n  }\n\n  /**\n   * Add the {@link PingPongPlane} to the {@link core/scenes/Scene.Scene | Scene} and optionally to the renderer.\n   * @param addToRenderer - whether to add this {@link PingPongPlane} to the {@link Renderer#pingPongPlanes | Renderer pingPongPlanes array}\n   */\n  addToScene(addToRenderer = false) {\n    if (addToRenderer) {\n      this.renderer.pingPongPlanes.push(this)\n    }\n\n    if (this.autoRender) {\n      this.renderer.scene.addPingPongPlane(this)\n    }\n  }\n\n  /**\n   * Remove the {@link PingPongPlane} from the {@link core/scenes/Scene.Scene | Scene} and optionally from the renderer as well.\n   * @param removeFromRenderer - whether to remove this {@link PingPongPlane} from the {@link Renderer#pingPongPlanes | Renderer pingPongPlanes array}\n   */\n  removeFromScene(removeFromRenderer = false) {\n    if (this.outputTarget) {\n      this.outputTarget.destroy()\n    }\n\n    if (this.autoRender) {\n      this.renderer.scene.removePingPongPlane(this)\n    }\n\n    if (removeFromRenderer) {\n      this.renderer.pingPongPlanes = this.renderer.pingPongPlanes.filter((pPP) => pPP.uuid !== this.uuid)\n    }\n  }\n}\n","import { GLTF } from '../../types/gltf/GLTF'\r\n\r\n/**\r\n * Defined the structure of the parsed result from the glTF json object.\r\n */\r\nexport interface GPUCurtainsGLTF extends GLTF.IGLTF {\r\n  /** Array of {@link ArrayBuffer} used by the glTF. */\r\n  arrayBuffers: ArrayBuffer[]\r\n  /** Array of created {@link ImageBitmap}. */\r\n  imagesBitmaps: ImageBitmap[]\r\n}\r\n\r\n// largely based on\r\n// https://toji.dev/webgpu-gltf-case-study/\r\n// https://github.com/toji/webgpu-gltf-case-study/blob/main/samples/js/tiny-gltf.js\r\n\r\n// also see glTF specs\r\n// https://registry.khronos.org/glTF/specs/2.0/glTF-2.0.html\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\r\n// To make it easier to reference the WebGL enums that glTF uses.\r\nconst GL = WebGLRenderingContext\r\n\r\nconst GLB_MAGIC = 0x46546c67\r\nconst CHUNK_TYPE = {\r\n  JSON: 0x4e4f534a,\r\n  BIN: 0x004e4942,\r\n}\r\n\r\nconst DEFAULT_TRANSLATION = [0, 0, 0]\r\nconst DEFAULT_ROTATION = [0, 0, 0, 1]\r\nconst DEFAULT_SCALE = [1, 1, 1]\r\n\r\nconst absUriRegEx =\r\n  (typeof window !== 'undefined' && new RegExp(`^${window.location.protocol}`, 'i')) || RegExp(`^(http|https):`, 'i')\r\nconst dataUriRegEx = /^data:/\r\n\r\n/**\r\n * Basic glTF loader class.\r\n *\r\n * Allow to load a glTF from an URI and create the associated {@link ArrayBuffer} and {@link ImageBitmap}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const gltfLoader = new GLTFLoader()\r\n * const gltf = await gltfLoader.loadFromUrl('path/to/model.gltf')\r\n *\r\n * // create a gltfScenesManager from the resulting 'gltf' object\r\n * // assuming 'renderer' is a valid camera or curtains renderer\r\n * const gltfScenesManager = new GLTFScenesManager({ renderer, gltf })\r\n * gltfScenesManager.addMeshes()\r\n * ```\r\n */\r\nexport class GLTFLoader {\r\n  /** The {@link GPUCurtainsGLTF} object result. */\r\n  gltf: GPUCurtainsGLTF | null\r\n\r\n  /**\r\n   * {@link GLTFLoader} constructor.\r\n   */\r\n  constructor() {\r\n    this.gltf = null\r\n  }\r\n\r\n  /**\r\n   * Build the absolute uri of the resource\r\n   * @param uri - uri of the resource\r\n   * @param baseUrl - base url from which to get all the other assets.\r\n   * @returns - absolute uri of the resource\r\n   */\r\n  static resolveUri(uri: string, baseUrl: string): string {\r\n    if (!!uri.match(absUriRegEx) || !!uri.match(dataUriRegEx)) {\r\n      return uri\r\n    }\r\n    return baseUrl + uri\r\n  }\r\n\r\n  /**\r\n   * Load a glTF from the given url.\r\n   * @param url - url of the glTF.\r\n   * @returns - the {@link GPUCurtainsGLTF} created.\r\n   * @async\r\n   */\r\n  async loadFromUrl(url: string): Promise<GPUCurtainsGLTF> {\r\n    const i = url.lastIndexOf('/')\r\n    const baseUrl = i !== 0 ? url.substring(0, i + 1) : ''\r\n    const response = await fetch(url)\r\n\r\n    if (url.endsWith('.gltf')) {\r\n      return this.loadFromJson(await response.json(), baseUrl)\r\n    } else if (url.endsWith('.glb')) {\r\n      return this.loadFromBinary(await response.arrayBuffer(), baseUrl)\r\n    } else {\r\n      throw new Error('Unrecognized file extension')\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Parse a {@link GLTF.IGLTF | glTF json} and create our {@link gltf} base object.\r\n   * @param json - already parsed JSON content.\r\n   * @param baseUrl - base url from which to get all the other assets.\r\n   * @param binaryChunk - optional binary chunks.\r\n   * @returns - {@link gltf} base object.\r\n   * @async\r\n   */\r\n  async loadFromJsonBase(\r\n    json: GLTF.IGLTF,\r\n    baseUrl: string,\r\n    binaryChunk: Record<string, ArrayBuffer> = null\r\n  ): Promise<GPUCurtainsGLTF> {\r\n    if (!baseUrl) {\r\n      throw new Error('baseUrl must be specified.')\r\n    }\r\n\r\n    if (!json.asset) {\r\n      throw new Error('Missing asset description.')\r\n    }\r\n\r\n    if (json.asset.minVersion !== '2.0' && json.asset.version !== '2.0') {\r\n      throw new Error('Incompatible asset version.')\r\n    }\r\n\r\n    // Resolve defaults for as many properties as we can.\r\n    for (const accessor of json.accessors) {\r\n      accessor.byteOffset = accessor.byteOffset ?? 0\r\n      accessor.normalized = accessor.normalized ?? false\r\n    }\r\n\r\n    for (const bufferView of json.bufferViews) {\r\n      bufferView.byteOffset = bufferView.byteOffset ?? 0\r\n    }\r\n\r\n    for (const node of json.nodes) {\r\n      if (!node.matrix) {\r\n        node.rotation = node.rotation ?? DEFAULT_ROTATION\r\n        node.scale = node.scale ?? DEFAULT_SCALE\r\n        node.translation = node.translation ?? DEFAULT_TRANSLATION\r\n      }\r\n    }\r\n\r\n    if (json.samplers) {\r\n      for (const sampler of json.samplers) {\r\n        sampler.wrapS = sampler.wrapS ?? GL.REPEAT\r\n        sampler.wrapT = sampler.wrapT ?? GL.REPEAT\r\n      }\r\n    }\r\n\r\n    // Resolve buffers and images first, since these are the only external resources that the file\r\n    // might reference.\r\n    // Buffers will be exposed as ArrayBuffers.\r\n    // Images will be exposed as ImageBitmaps.\r\n\r\n    // Buffers\r\n    const pendingBuffers = []\r\n    if (binaryChunk) {\r\n      pendingBuffers.push(Promise.resolve(binaryChunk))\r\n    } else {\r\n      for (const index in json.buffers) {\r\n        const buffer = json.buffers[index]\r\n        const uri = GLTFLoader.resolveUri(buffer.uri, baseUrl)\r\n        pendingBuffers[index] = fetch(uri).then((response) => response.arrayBuffer())\r\n      }\r\n    }\r\n\r\n    // Images\r\n    const pendingImages = []\r\n    for (let index = 0; index < json.images?.length || 0; ++index) {\r\n      const image = json.images[index]\r\n      if (image.uri) {\r\n        pendingImages[index] = fetch(GLTFLoader.resolveUri(image.uri, baseUrl)).then(async (response) => {\r\n          return createImageBitmap(await response.blob())\r\n        })\r\n      } else {\r\n        const bufferView = json.bufferViews[image.bufferView]\r\n        pendingImages[index] = pendingBuffers[bufferView.buffer].then((buffer) => {\r\n          const blob = new Blob([new Uint8Array(buffer, bufferView.byteOffset, bufferView.byteLength)], {\r\n            type: image.mimeType,\r\n          })\r\n          return createImageBitmap(blob)\r\n        })\r\n      }\r\n    }\r\n\r\n    return {\r\n      ...json,\r\n      arrayBuffers: await Promise.all(pendingBuffers),\r\n      imagesBitmaps: await Promise.all(pendingImages),\r\n    } as GPUCurtainsGLTF\r\n  }\r\n\r\n  /**\r\n   * Load a glTF from a .glb file.\r\n   * @param arrayBuffer - {@link ArrayBuffer} containing the data.\r\n   * @param baseUrl - base url from which to get all the other assets.\r\n   * @returns - the {@link GPUCurtainsGLTF} created.\r\n   * @async\r\n   */\r\n  async loadFromBinary(arrayBuffer: ArrayBuffer, baseUrl: string): Promise<GPUCurtainsGLTF> {\r\n    const headerView = new DataView(arrayBuffer, 0, 12)\r\n    const magic = headerView.getUint32(0, true)\r\n    const version = headerView.getUint32(4, true)\r\n    const length = headerView.getUint32(8, true)\r\n\r\n    if (magic !== GLB_MAGIC) {\r\n      throw new Error('Invalid magic string in binary header.')\r\n    }\r\n\r\n    if (version !== 2) {\r\n      throw new Error('Incompatible version in binary header.')\r\n    }\r\n\r\n    const chunks = {}\r\n    let chunkOffset = 12\r\n    while (chunkOffset < length) {\r\n      const chunkHeaderView = new DataView(arrayBuffer, chunkOffset, 8)\r\n      const chunkLength = chunkHeaderView.getUint32(0, true)\r\n      const chunkType = chunkHeaderView.getUint32(4, true)\r\n      chunks[chunkType] = arrayBuffer.slice(chunkOffset + 8, chunkOffset + 8 + chunkLength)\r\n      chunkOffset += chunkLength + 8\r\n    }\r\n\r\n    if (!chunks[CHUNK_TYPE.JSON]) {\r\n      throw new Error('File contained no json chunk.')\r\n    }\r\n\r\n    const decoder = new TextDecoder('utf-8')\r\n    const jsonString = decoder.decode(chunks[CHUNK_TYPE.JSON])\r\n    return this.loadFromJson(JSON.parse(jsonString), baseUrl, chunks[CHUNK_TYPE.BIN])\r\n  }\r\n\r\n  /**\r\n   * Load the glTF json, parse the data and create our {@link GPUCurtainsGLTF} object.\r\n   * @param json - already parsed JSON content.\r\n   * @param baseUrl - base url from which to get all the other assets.\r\n   * @param binaryChunk - optional binary chunks.\r\n   * @returns - the {@link GPUCurtainsGLTF} created.\r\n   * @async\r\n   */\r\n  async loadFromJson(\r\n    json: GLTF.IGLTF,\r\n    baseUrl: string,\r\n    binaryChunk: Record<string, ArrayBuffer> = null\r\n  ): Promise<GPUCurtainsGLTF> {\r\n    // Load the glTF file\r\n    this.gltf = await this.loadFromJsonBase(json, baseUrl, binaryChunk)\r\n    return this.gltf\r\n  }\r\n}\r\n","import { CameraRenderer, isCameraRenderer } from '../../core/renderers/utils'\r\nimport { GLTF } from '../../types/gltf/GLTF'\r\nimport { GLTFLoader } from './GLTFLoader'\r\nimport { Sampler, SamplerParams } from '../../core/samplers/Sampler'\r\nimport { Texture } from '../../core/textures/Texture'\r\nimport { Object3D } from '../../core/objects3D/Object3D'\r\nimport { Box3 } from '../../math/Box3'\r\nimport { Vec3 } from '../../math/Vec3'\r\nimport { Mat4 } from '../../math/Mat4'\r\nimport { Geometry } from '../../core/geometries/Geometry'\r\nimport { IndexedGeometry } from '../../core/geometries/IndexedGeometry'\r\nimport { Mesh } from '../../core/meshes/Mesh'\r\nimport { TypedArray, TypedArrayConstructor } from '../../core/bindings/utils'\r\nimport { GeometryParams, VertexBufferAttribute } from '../../types/Geometries'\r\nimport { ChildDescriptor, MeshDescriptor, PrimitiveInstances, ScenesManager } from '../../types/gltf/GLTFScenesManager'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { Quat } from '../../math/Quat'\r\n\r\n// TODO limitations, example...\r\n// use a list like: https://github.com/warrenm/GLTFKit2?tab=readme-ov-file#status-and-conformance\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API/Constants\r\n// To make it easier to reference the WebGL enums that glTF uses.\r\nconst GL = WebGLRenderingContext\r\n\r\n// one normal matrix to handle them all\r\nconst _normalMatrix = new Mat4()\r\n\r\n/**\r\n * Used to create a {@link GLTFScenesManager} from a given {@link GLTFLoader.gltf | gltf} object.\r\n *\r\n * Parse the {@link GLTFLoader.gltf | gltf} object, create all the {@link Sampler} and {@link Texture}, create all the {@link Object3D} nodes to compute the correct transformations and parent -> child relationships, create all the needed {@link MeshDescriptor} containing the {@link Geometry}, {@link Mesh} parameters and so on.\r\n *\r\n * ## Loading Features\r\n *\r\n * - [x] Accessors\r\n *   - [ ] Sparse accessors\r\n * - [x] Buffers\r\n * - [x] BufferViews\r\n * - [x] Images\r\n * - [x] Meshes\r\n * - [x] Nodes\r\n * - [x] Primitives\r\n * - [x] Samplers\r\n * - [x] Textures\r\n * - [ ] Animations\r\n * - [ ] Cameras\r\n * - [x] Materials\r\n * - [ ] Skins\r\n *\r\n * @example\r\n * ```javascript\r\n * const gltfLoader = new GLTFLoader()\r\n * const gltf = await gltfLoader.loadFromUrl('path/to/model.gltf')\r\n *\r\n * // create a gltfScenesManager from the resulting 'gltf' object\r\n * // assuming 'renderer' is a valid camera or curtains renderer\r\n * const gltfScenesManager = new GLTFScenesManager({ renderer, gltf })\r\n * gltfScenesManager.addMeshes()\r\n * ```\r\n */\r\nexport class GLTFScenesManager {\r\n  /** The {@link CameraRenderer} used. */\r\n  renderer: CameraRenderer\r\n  /** The {@link GLTFLoader.gltf | gltf} object used. */\r\n  gltf: GLTFLoader['gltf']\r\n  /** The {@link ScenesManager} containing all the useful data. */\r\n  scenesManager: ScenesManager\r\n  /** The {@link PrimitiveInstances} Map, to group similar {@link Mesh} by instances. */\r\n  #primitiveInstances: PrimitiveInstances\r\n\r\n  /**\r\n   * {@link GLTFScenesManager} constructor.\r\n   * @param parameters - parameters used to create our {@link GLTFScenesManager}.\r\n   * @param parameters.renderer - our {@link CameraRenderer} class object.\r\n   * @param parameters.gltf - The {@link GLTFLoader.gltf | gltf} object used.\r\n   */\r\n  constructor({ renderer, gltf }) {\r\n    renderer = isCameraRenderer(renderer, 'GLTFScenesManager')\r\n\r\n    this.renderer = renderer\r\n    this.gltf = gltf\r\n\r\n    this.#primitiveInstances = new Map()\r\n\r\n    const traverseChildren = (child) => {\r\n      return [\r\n        child.node,\r\n        ...child.children\r\n          ?.map((c) => {\r\n            return [...traverseChildren(c)]\r\n          })\r\n          .flat(),\r\n      ].flat()\r\n    }\r\n\r\n    this.scenesManager = {\r\n      node: new Object3D(),\r\n      boundingBox: new Box3(),\r\n      samplers: [],\r\n      materialsTextures: [],\r\n      scenes: [],\r\n      meshes: [],\r\n      meshesDescriptors: [],\r\n      getScenesNodes: () => {\r\n        return this.scenesManager.scenes\r\n          .map((scene) => {\r\n            return traverseChildren(scene)\r\n          })\r\n          .flat()\r\n      },\r\n    }\r\n\r\n    this.createSamplers()\r\n    this.createMaterialTextures()\r\n    this.createScenes()\r\n  }\r\n\r\n  /**\r\n   * Get an attribute type, bufferFormat and size from its {@link GLTF.AccessorType | accessor type}.\r\n   * @param type - {@link GLTF.AccessorType | accessor type} to use.\r\n   * @returns - corresponding type, bufferFormat and size.\r\n   */\r\n  static getVertexAttributeParamsFromType(type: GLTF.AccessorType): {\r\n    /** Corresponding attribute type */\r\n    type: VertexBufferAttribute['type']\r\n    /** Corresponding attribute bufferFormat */\r\n    bufferFormat: VertexBufferAttribute['bufferFormat']\r\n    /** Corresponding attribute size */\r\n    size: VertexBufferAttribute['size']\r\n  } {\r\n    switch (type) {\r\n      case 'VEC2':\r\n        return {\r\n          type: 'vec2f',\r\n          bufferFormat: 'float32x2',\r\n          size: 2,\r\n        }\r\n      case 'VEC3':\r\n        return {\r\n          type: 'vec3f',\r\n          bufferFormat: 'float32x3',\r\n          size: 3,\r\n        }\r\n      case 'VEC4':\r\n        return {\r\n          type: 'vec4f',\r\n          bufferFormat: 'float32x4',\r\n          size: 4,\r\n        }\r\n      case 'SCALAR':\r\n      default: // treat default as f32\r\n        return {\r\n          type: 'f32',\r\n          bufferFormat: 'float32',\r\n          size: 1,\r\n        }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the corresponding typed array constructor based on the {@link GLTF.AccessorComponentType | accessor component type}.\r\n   * @param componentType - {@link GLTF.AccessorComponentType | accessor component type} to use.\r\n   * @returns - corresponding typed array constructor.\r\n   */\r\n  static getTypedArrayConstructorFromComponentType(componentType: GLTF.AccessorComponentType): TypedArrayConstructor {\r\n    switch (componentType) {\r\n      case GL.BYTE: // GL.BYTE\r\n        return Int8Array\r\n      case GL.UNSIGNED_BYTE: // GL.UNSIGNED_BYTE\r\n        return Uint8Array\r\n      case GL.SHORT: // GL.SHORT\r\n        return Int16Array\r\n      case GL.UNSIGNED_SHORT: // GL.UNSIGNED_SHORT\r\n        return Uint16Array\r\n      case GL.UNSIGNED_INT: // GL.UNSIGNED_INT\r\n        return Uint32Array\r\n      case GL.FLOAT: // GL.FLOAT\r\n      default:\r\n        return Float32Array\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the {@link GPUPrimitiveTopology} based on the {@link GLTF.MeshPrimitiveMode | WebGL primitive mode}.\r\n   * @param mode - {@link GLTF.MeshPrimitiveMode | WebGL primitive mode} to use.\r\n   * @returns - corresponding {@link GPUPrimitiveTopology}.\r\n   */\r\n  static gpuPrimitiveTopologyForMode(mode: GLTF.MeshPrimitiveMode): GPUPrimitiveTopology {\r\n    switch (mode) {\r\n      case GL.TRIANGLES: // GL.TRIANGLES\r\n        return 'triangle-list'\r\n      case GL.TRIANGLE_STRIP: // GL.TRIANGLE_STRIP\r\n        return 'triangle-strip'\r\n      case GL.LINES: // GL.LINES\r\n        return 'line-list'\r\n      case GL.LINE_STRIP: // GL.LINE_STRIP\r\n        return 'line-strip'\r\n      case GL.POINTS: // GL.POINTS\r\n        return 'point-list'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the {@link GPUAddressMode} based on the {@link GLTF.TextureWrapMode | WebGL texture wrap mode}.\r\n   * @param wrap - {@link GLTF.TextureWrapMode | WebGL texture wrap mode} to use.\r\n   * @returns - corresponding {@link GPUAddressMode}.\r\n   */\r\n  static gpuAddressModeForWrap(wrap: GLTF.TextureWrapMode): GPUAddressMode {\r\n    switch (wrap) {\r\n      case GL.CLAMP_TO_EDGE:\r\n        return 'clamp-to-edge'\r\n      case GL.MIRRORED_REPEAT:\r\n        return 'mirror-repeat'\r\n      default:\r\n        return 'repeat'\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the {@link Sampler} and add them to the {@link ScenesManager.samplers | scenesManager samplers array}.\r\n   */\r\n  createSamplers() {\r\n    if (this.gltf.samplers) {\r\n      for (const [index, sampler] of Object.entries(this.gltf.samplers)) {\r\n        const descriptor = {\r\n          label: 'glTF sampler ' + index,\r\n          name: 'gltfSampler' + index, // TODO better name?\r\n          addressModeU: GLTFScenesManager.gpuAddressModeForWrap(sampler.wrapS),\r\n          addressModeV: GLTFScenesManager.gpuAddressModeForWrap(sampler.wrapT),\r\n        } as SamplerParams\r\n\r\n        // WebGPU's default min/mag/mipmap filtering is nearest, se we only have to override it if we\r\n        // want linear filtering for some aspect.\r\n        if (!sampler.magFilter || sampler.magFilter === GL.LINEAR) {\r\n          descriptor.magFilter = 'linear'\r\n        }\r\n\r\n        switch (sampler.minFilter) {\r\n          case GL.NEAREST:\r\n            break\r\n          case GL.LINEAR:\r\n          case GL.LINEAR_MIPMAP_NEAREST:\r\n            descriptor.minFilter = 'linear'\r\n            break\r\n          case GL.NEAREST_MIPMAP_LINEAR:\r\n            descriptor.mipmapFilter = 'linear'\r\n            break\r\n          case GL.LINEAR_MIPMAP_LINEAR:\r\n          default:\r\n            descriptor.minFilter = 'linear'\r\n            descriptor.mipmapFilter = 'linear'\r\n            break\r\n        }\r\n\r\n        this.scenesManager.samplers.push(new Sampler(this.renderer, descriptor))\r\n      }\r\n    } else {\r\n      // create a default sampler\r\n      this.scenesManager.samplers.push(\r\n        new Sampler(this.renderer, {\r\n          label: 'Default sampler',\r\n          name: 'defaultSampler',\r\n          magFilter: 'linear',\r\n          minFilter: 'linear',\r\n          mipmapFilter: 'linear',\r\n        })\r\n      )\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a {@link Texture} based on the options.\r\n   * @param material - material using that texture.\r\n   * @param image - image source of the texture.\r\n   * @param name - name of the texture.\r\n   * @returns - newly created {@link Texture}.\r\n   */\r\n  createTexture(material: GLTF.IMaterial, image: ImageBitmap, name: string): Texture {\r\n    const format = (() => {\r\n      switch (name) {\r\n        case 'baseColorTexture':\r\n        case 'emissiveTexture':\r\n          return 'bgra8unorm-srgb'\r\n        case 'occlusionTexture':\r\n          return 'r8unorm'\r\n        default:\r\n          return 'bgra8unorm'\r\n      }\r\n    })()\r\n\r\n    const texture = new Texture(this.renderer, {\r\n      label: material.name ? material.name + ': ' + name : name,\r\n      name,\r\n      format,\r\n      visibility: ['fragment'],\r\n      generateMips: true, // generate mips by default\r\n      fixedSize: {\r\n        width: image.width,\r\n        height: image.height,\r\n      },\r\n    })\r\n\r\n    texture.uploadSource({\r\n      source: image,\r\n    })\r\n\r\n    return texture\r\n  }\r\n\r\n  /**\r\n   * Create the {ScenesManager.materialsTextures | scenesManager materialsTextures array} and each associated {@link types/gltf/GLTFScenesManager.MaterialTexture | MaterialTexture} and their respective {@link Texture}.\r\n   */\r\n  createMaterialTextures() {\r\n    this.scenesManager.materialsTextures = []\r\n\r\n    if (this.gltf.materials) {\r\n      for (const [materialIndex, material] of Object.entries(this.gltf.materials)) {\r\n        // TODO handle custom/additional UV attributes\r\n        const materialTextures = {\r\n          material: materialIndex,\r\n          texturesDescriptors: [],\r\n        }\r\n\r\n        const getUVAttributeName = (texture) => {\r\n          if (!texture.texCoord) return 'uv'\r\n\r\n          return texture.texCoord !== 0 ? 'uv' + texture.texCoord : 'uv'\r\n        }\r\n\r\n        this.scenesManager.materialsTextures[materialIndex] = materialTextures\r\n\r\n        if (material.pbrMetallicRoughness) {\r\n          if (\r\n            material.pbrMetallicRoughness.baseColorTexture &&\r\n            material.pbrMetallicRoughness.baseColorTexture.index !== undefined\r\n          ) {\r\n            const index = material.pbrMetallicRoughness.baseColorTexture.index\r\n            const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\r\n\r\n            const texture = this.createTexture(material, image, 'baseColorTexture')\r\n            const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\r\n\r\n            materialTextures.texturesDescriptors.push({\r\n              texture,\r\n              sampler: this.scenesManager.samplers[samplerIndex ?? 0],\r\n              texCoordAttributeName: getUVAttributeName(material.pbrMetallicRoughness.baseColorTexture),\r\n            })\r\n          }\r\n\r\n          if (\r\n            material.pbrMetallicRoughness.metallicRoughnessTexture &&\r\n            material.pbrMetallicRoughness.metallicRoughnessTexture.index !== undefined\r\n          ) {\r\n            const index = material.pbrMetallicRoughness.metallicRoughnessTexture.index\r\n            const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\r\n\r\n            const texture = this.createTexture(material, image, 'metallicRoughnessTexture')\r\n            const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\r\n\r\n            materialTextures.texturesDescriptors.push({\r\n              texture,\r\n              sampler: this.scenesManager.samplers[samplerIndex ?? 0],\r\n              texCoordAttributeName: getUVAttributeName(material.pbrMetallicRoughness.metallicRoughnessTexture),\r\n            })\r\n          }\r\n        }\r\n\r\n        if (material.normalTexture && material.normalTexture.index !== undefined) {\r\n          const index = material.normalTexture.index\r\n          const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\r\n\r\n          const texture = this.createTexture(material, image, 'normalTexture')\r\n          const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\r\n\r\n          materialTextures.texturesDescriptors.push({\r\n            texture,\r\n            sampler: this.scenesManager.samplers[samplerIndex ?? 0],\r\n            texCoordAttributeName: getUVAttributeName(material.normalTexture),\r\n          })\r\n        }\r\n\r\n        if (material.occlusionTexture && material.occlusionTexture.index !== undefined) {\r\n          const index = material.occlusionTexture.index\r\n          const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\r\n\r\n          const texture = this.createTexture(material, image, 'occlusionTexture')\r\n          const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\r\n\r\n          materialTextures.texturesDescriptors.push({\r\n            texture,\r\n            sampler: this.scenesManager.samplers[samplerIndex ?? 0],\r\n            texCoordAttributeName: getUVAttributeName(material.occlusionTexture),\r\n          })\r\n        }\r\n\r\n        if (material.emissiveTexture && material.emissiveTexture.index !== undefined) {\r\n          const index = material.emissiveTexture.index\r\n          const image = this.gltf.imagesBitmaps[this.gltf.textures[index].source]\r\n\r\n          const texture = this.createTexture(material, image, 'emissiveTexture')\r\n          const samplerIndex = this.gltf.textures.find((t) => t.source === index)?.sampler\r\n\r\n          materialTextures.texturesDescriptors.push({\r\n            texture,\r\n            sampler: this.scenesManager.samplers[samplerIndex ?? 0],\r\n            texCoordAttributeName: getUVAttributeName(material.emissiveTexture),\r\n          })\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create a {@link ChildDescriptor} from a parent {@link ChildDescriptor} and a {@link GLTF.INode | GLTF Node}\r\n   * @param parent - parent {@link ChildDescriptor} to use.\r\n   * @param node - {@link GLTF.INode | GLTF Node} to use.\r\n   */\r\n  createNode(parent: ChildDescriptor, node: GLTF.INode) {\r\n    if (node.camera !== undefined) return\r\n\r\n    const child: ChildDescriptor = {\r\n      name: node.name,\r\n      node: new Object3D(),\r\n      children: [],\r\n    }\r\n\r\n    parent.children.push(child)\r\n\r\n    child.node.parent = parent.node\r\n\r\n    if (node.matrix) {\r\n      child.node.modelMatrix.setFromArray(new Float32Array(node.matrix))\r\n      // avoid overriding the matrix with empty position/scale/rotation\r\n      child.node.matrices.model.shouldUpdate = false\r\n    } else {\r\n      if (node.translation) child.node.position.set(node.translation[0], node.translation[1], node.translation[2])\r\n      if (node.scale) child.node.scale.set(node.scale[0], node.scale[1], node.scale[2])\r\n      if (node.rotation) child.node.quaternion.setFromArray(new Float32Array(node.rotation))\r\n    }\r\n\r\n    const mesh = this.gltf.meshes[node.mesh]\r\n\r\n    if (node.children) {\r\n      node.children.forEach((childNodeIndex) => {\r\n        const childNode = this.gltf.nodes[childNodeIndex]\r\n        this.createNode(child, childNode)\r\n      })\r\n    }\r\n\r\n    if (mesh) {\r\n      // each primitive is in fact a mesh\r\n      mesh.primitives.forEach((primitive, index) => {\r\n        const meshDescriptor: MeshDescriptor = {\r\n          parent: child.node,\r\n          attributes: [],\r\n          textures: [],\r\n          parameters: {\r\n            label: mesh.name ? mesh.name + ' ' + index : 'glTF mesh ' + index,\r\n          },\r\n          nodes: [],\r\n        }\r\n\r\n        let instancesDescriptor = this.#primitiveInstances.get(primitive)\r\n        if (!instancesDescriptor) {\r\n          instancesDescriptor = {\r\n            instances: [], // instances\r\n            nodes: [], // node transform\r\n            meshDescriptor,\r\n          }\r\n\r\n          this.#primitiveInstances.set(primitive, instancesDescriptor)\r\n        }\r\n\r\n        instancesDescriptor.instances.push(node)\r\n        instancesDescriptor.nodes.push(child.node)\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create the {@link ScenesManager#scenes | ScenesManager scenes} based on the {@link gltf} object.\r\n   */\r\n  createScenes() {\r\n    this.scenesManager.node.parent = this.renderer.scene\r\n\r\n    this.gltf.scenes.forEach((childScene) => {\r\n      const sceneDescriptor = {\r\n        name: childScene.name,\r\n        children: [],\r\n        node: new Object3D(),\r\n      }\r\n\r\n      sceneDescriptor.node.parent = this.scenesManager.node\r\n\r\n      this.scenesManager.scenes.push(sceneDescriptor)\r\n\r\n      childScene.nodes.forEach((nodeIndex) => {\r\n        const node = this.gltf.nodes[nodeIndex]\r\n        this.createNode(sceneDescriptor, node)\r\n      })\r\n    })\r\n\r\n    // now that we created all our nodes, update all the matrices\r\n    this.scenesManager.scenes.forEach((childScene) => {\r\n      childScene.node.shouldUpdateModelMatrix()\r\n      childScene.node.updateMatrixStack()\r\n    })\r\n\r\n    for (const [primitive, primitiveInstance] of this.#primitiveInstances) {\r\n      const { instances, nodes, meshDescriptor } = primitiveInstance\r\n\r\n      const instancesCount = instances.length\r\n\r\n      meshDescriptor.nodes = nodes\r\n\r\n      this.scenesManager.meshesDescriptors.push(meshDescriptor)\r\n\r\n      // ------------------------------------\r\n      // GEOMETRY\r\n      // ------------------------------------\r\n\r\n      const geometryBBox = new Box3()\r\n\r\n      // TODO should we pass an already created buffer to the geometry main vertex and index buffers if possible?\r\n      // and use bufferOffset and bufferSize parameters\r\n      // if the accessors byteOffset is large enough,\r\n      // it means we have an array that is not interleaved (with each vertexBuffer attributes bufferOffset = 0)\r\n      // but we can deal with the actual offset in the geometry setVertexBuffer call!\r\n      // see https://toji.dev/webgpu-gltf-case-study/#handling-large-attribute-offsets\r\n\r\n      const defaultAttributes = []\r\n\r\n      // check whether the buffer view is already interleaved\r\n      let interleavedArray = null\r\n      let interleavedBufferView = null\r\n      let maxByteOffset = 0\r\n\r\n      // prepare default attributes\r\n      for (const [attribName, accessorIndex] of Object.entries(primitive.attributes)) {\r\n        const accessor = this.gltf.accessors[accessorIndex as number]\r\n\r\n        const constructor = GLTFScenesManager.getTypedArrayConstructorFromComponentType(accessor.componentType)\r\n\r\n        const bufferView = this.gltf.bufferViews[accessor.bufferView]\r\n\r\n        // clean attributes names\r\n        const name =\r\n          attribName === 'TEXCOORD_0' ? 'uv' : attribName.replace('_', '').replace('TEXCOORD', 'uv').toLowerCase()\r\n\r\n        const byteStride = bufferView.byteStride || 0\r\n        const accessorByteOffset = accessor.byteOffset || 0\r\n        if (byteStride && accessorByteOffset && accessorByteOffset < byteStride) {\r\n          maxByteOffset = Math.max(accessorByteOffset, maxByteOffset)\r\n        } else {\r\n          maxByteOffset = 0\r\n        }\r\n\r\n        // custom bbox\r\n        // glTF specs says: \"vertex position attribute accessors MUST have accessor.min and accessor.max defined\"\r\n        if (name === 'position') {\r\n          geometryBBox.min.min(new Vec3(accessor.min[0], accessor.min[1], accessor.min[2]))\r\n          geometryBBox.max.max(new Vec3(accessor.max[0], accessor.max[1], accessor.max[2]))\r\n\r\n          interleavedBufferView = bufferView\r\n        }\r\n\r\n        const attributeParams = GLTFScenesManager.getVertexAttributeParamsFromType(accessor.type)\r\n\r\n        const attribute = {\r\n          name,\r\n          ...attributeParams,\r\n          array: new constructor(\r\n            this.gltf.arrayBuffers[bufferView.buffer],\r\n            accessor.byteOffset + bufferView.byteOffset,\r\n            accessor.count * attributeParams.size\r\n          ),\r\n        }\r\n\r\n        defaultAttributes.push(attribute)\r\n        meshDescriptor.attributes.push({\r\n          name: attribute.name,\r\n          type: attribute.type,\r\n        })\r\n      }\r\n\r\n      if (maxByteOffset > 0) {\r\n        // check they are all really interleaved\r\n        const accessorsBufferViews = Object.values(primitive.attributes).map(\r\n          (accessorIndex) => this.gltf.accessors[accessorIndex as number].bufferView\r\n        )\r\n\r\n        if (!accessorsBufferViews.every((val) => val === accessorsBufferViews[0])) {\r\n          // we're not that lucky since we have interleaved values coming from different positions of our main buffer\r\n          // we'll have to rebuild an interleaved array ourselves\r\n          let totalStride = 0\r\n          const mainBufferStrides = {}\r\n          const arrayLength = Object.values(primitive.attributes).reduce(\r\n            (acc: number, accessorIndex: number): number => {\r\n              const accessor = this.gltf.accessors[accessorIndex]\r\n\r\n              const attrSize = GLTFScenesManager.getVertexAttributeParamsFromType(accessor.type).size\r\n\r\n              if (!mainBufferStrides[accessor.bufferView]) {\r\n                mainBufferStrides[accessor.bufferView] = 0\r\n              }\r\n\r\n              mainBufferStrides[accessor.bufferView] = Math.max(\r\n                mainBufferStrides[accessor.bufferView],\r\n                accessor.byteOffset + attrSize * Float32Array.BYTES_PER_ELEMENT\r\n              )\r\n\r\n              totalStride += attrSize * Float32Array.BYTES_PER_ELEMENT\r\n\r\n              return acc + accessor.count * attrSize\r\n            },\r\n            0\r\n          ) as number\r\n\r\n          interleavedArray = new Float32Array(Math.ceil(arrayLength / 4) * 4)\r\n\r\n          Object.values(primitive.attributes).forEach((accessorIndex: number) => {\r\n            const accessor = this.gltf.accessors[accessorIndex]\r\n            const bufferView = this.gltf.bufferViews[accessor.bufferView]\r\n\r\n            const attrSize = GLTFScenesManager.getVertexAttributeParamsFromType(accessor.type).size\r\n\r\n            for (let i = 0; i < accessor.count; i++) {\r\n              const startOffset =\r\n                accessor.byteOffset / Float32Array.BYTES_PER_ELEMENT +\r\n                (i * totalStride) / Float32Array.BYTES_PER_ELEMENT\r\n\r\n              interleavedArray\r\n                .subarray(startOffset, startOffset + attrSize)\r\n                .set(\r\n                  new Float32Array(\r\n                    this.gltf.arrayBuffers[bufferView.buffer],\r\n                    bufferView.byteOffset + accessor.byteOffset + i * mainBufferStrides[accessor.bufferView],\r\n                    attrSize\r\n                  )\r\n                )\r\n            }\r\n          })\r\n        } else {\r\n          // we're lucky to have an interleaved array!\r\n          // we won't have to compute our geometry!\r\n          interleavedArray = new Float32Array(\r\n            this.gltf.arrayBuffers[interleavedBufferView.buffer],\r\n            interleavedBufferView.byteOffset,\r\n            (Math.ceil(interleavedBufferView.byteLength / 4) * 4) / Float32Array.BYTES_PER_ELEMENT\r\n          )\r\n        }\r\n      } else {\r\n        // not interleaved?\r\n        // let's try to reorder the attributes so we might benefit from pipeline cache\r\n        const attribOrder = ['position', 'uv', 'normal']\r\n\r\n        defaultAttributes.sort((a, b) => {\r\n          let aIndex = attribOrder.findIndex((attrName) => attrName === a.name)\r\n          aIndex = aIndex === -1 ? Infinity : aIndex\r\n\r\n          let bIndex = attribOrder.findIndex((attrName) => attrName === b.name)\r\n          bIndex = bIndex === -1 ? Infinity : bIndex\r\n\r\n          return aIndex - bIndex\r\n        })\r\n      }\r\n\r\n      const geometryAttributes: GeometryParams = {\r\n        instancesCount,\r\n        topology: GLTFScenesManager.gpuPrimitiveTopologyForMode(primitive.mode),\r\n        vertexBuffers: [\r\n          {\r\n            name: 'attributes',\r\n            stepMode: 'vertex', // explicitly set the stepMode even if not mandatory\r\n            attributes: defaultAttributes,\r\n            ...(interleavedArray && { array: interleavedArray }), // interleaved array!\r\n          },\r\n        ],\r\n      }\r\n\r\n      const isIndexedGeometry = 'indices' in primitive\r\n      const GeometryConstructor = isIndexedGeometry ? IndexedGeometry : Geometry\r\n\r\n      meshDescriptor.parameters.geometry = new GeometryConstructor(geometryAttributes)\r\n      //meshDescriptor.parameters.geometry.boundingBox.copy(geometryBBox)\r\n      meshDescriptor.parameters.geometry.boundingBox = geometryBBox\r\n\r\n      if (isIndexedGeometry) {\r\n        const accessor = this.gltf.accessors[primitive.indices]\r\n        const bufferView = this.gltf.bufferViews[accessor.bufferView]\r\n\r\n        const constructor = GLTFScenesManager.getTypedArrayConstructorFromComponentType(accessor.componentType) as\r\n          | Uint32ArrayConstructor\r\n          | Uint16ArrayConstructor\r\n\r\n        const arrayOffset = accessor.byteOffset + bufferView.byteOffset\r\n        const arrayBuffer = this.gltf.arrayBuffers[bufferView.buffer]\r\n        const arrayLength = Math.min(\r\n          (arrayBuffer.byteLength - arrayOffset) / constructor.BYTES_PER_ELEMENT,\r\n          Math.ceil(accessor.count / 4) * 4\r\n        )\r\n\r\n        // do not allow Uint8Array arrays\r\n        const array =\r\n          constructor.name === 'Uint8Array'\r\n            ? Uint16Array.from(new constructor(arrayBuffer, arrayOffset, arrayLength))\r\n            : new constructor(arrayBuffer, arrayOffset, arrayLength)\r\n\r\n        ;(meshDescriptor.parameters.geometry as IndexedGeometry).setIndexBuffer({\r\n          bufferFormat: constructor.name === 'Uint32Array' ? 'uint32' : 'uint16',\r\n          array,\r\n        })\r\n      }\r\n\r\n      // ------------------------------------\r\n      // MATERIAL\r\n      // ------------------------------------\r\n\r\n      const materialTextures = this.scenesManager.materialsTextures[primitive.material]\r\n\r\n      meshDescriptor.parameters.samplers = []\r\n      meshDescriptor.parameters.textures = []\r\n\r\n      materialTextures?.texturesDescriptors.forEach((t) => {\r\n        meshDescriptor.textures.push({\r\n          texture: t.texture.options.name,\r\n          sampler: t.sampler.name,\r\n          texCoordAttributeName: t.texCoordAttributeName,\r\n        })\r\n\r\n        const samplerExists = meshDescriptor.parameters.samplers.find((s) => s.uuid === t.sampler.uuid)\r\n\r\n        if (!samplerExists) {\r\n          meshDescriptor.parameters.samplers.push(t.sampler)\r\n        }\r\n\r\n        meshDescriptor.parameters.textures.push(t.texture)\r\n      })\r\n\r\n      const material = (this.gltf.materials && this.gltf.materials[primitive.material]) || {}\r\n\r\n      meshDescriptor.parameters.cullMode = material.doubleSided ? 'none' : 'back'\r\n\r\n      // transparency\r\n      if (material.alphaMode === 'BLEND' || (material.extensions && material.extensions.KHR_materials_transmission)) {\r\n        meshDescriptor.parameters.transparent = true\r\n        meshDescriptor.parameters.targets = [\r\n          {\r\n            blend: {\r\n              color: {\r\n                srcFactor: 'src-alpha',\r\n                dstFactor: 'one-minus-src-alpha',\r\n              },\r\n              alpha: {\r\n                // This just prevents the canvas from having alpha \"holes\" in it.\r\n                srcFactor: 'one',\r\n                dstFactor: 'one',\r\n              },\r\n            },\r\n          },\r\n        ]\r\n      }\r\n\r\n      // uniforms\r\n      const materialUniformStruct = {\r\n        baseColorFactor: {\r\n          type: 'vec4f',\r\n          value: material.pbrMetallicRoughness?.baseColorFactor || [1, 1, 1, 1],\r\n        },\r\n        alphaCutoff: {\r\n          type: 'f32',\r\n          value: material.alphaCutoff !== undefined ? material.alphaCutoff : material.alphaMode === 'MASK' ? 0.5 : 0,\r\n        },\r\n        metallicFactor: {\r\n          type: 'f32',\r\n          value:\r\n            material.pbrMetallicRoughness?.metallicFactor === undefined\r\n              ? 1\r\n              : material.pbrMetallicRoughness.metallicFactor,\r\n        },\r\n        roughnessFactor: {\r\n          type: 'f32',\r\n          value:\r\n            material.pbrMetallicRoughness?.roughnessFactor === undefined\r\n              ? 1\r\n              : material.pbrMetallicRoughness.roughnessFactor,\r\n        },\r\n        normalMapScale: {\r\n          type: 'f32',\r\n          value: material.normalTexture?.scale === undefined ? 1 : material.normalTexture.scale,\r\n        },\r\n        occlusionStrength: {\r\n          type: 'f32',\r\n          value: material.occlusionTexture?.strength === undefined ? 1 : material.occlusionTexture.strength,\r\n        },\r\n        emissiveFactor: {\r\n          type: 'vec3f',\r\n          value: material.emissiveFactor !== undefined ? material.emissiveFactor : [1, 1, 1],\r\n        },\r\n      }\r\n\r\n      if (Object.keys(materialUniformStruct).length) {\r\n        meshDescriptor.parameters.uniforms = {\r\n          material: {\r\n            visibility: ['vertex', 'fragment'],\r\n            struct: materialUniformStruct,\r\n          },\r\n        }\r\n      }\r\n\r\n      // instances matrices storage\r\n      if (instancesCount > 1) {\r\n        const worldMatrices = new Float32Array(instancesCount * 16)\r\n        const normalMatrices = new Float32Array(instancesCount * 16)\r\n\r\n        for (let i = 0; i < instancesCount; ++i) {\r\n          worldMatrices.set(nodes[i].worldMatrix.elements, i * 16)\r\n\r\n          _normalMatrix.copy(nodes[i].worldMatrix).invert().transpose()\r\n          normalMatrices.set(_normalMatrix.elements, i * 16)\r\n        }\r\n\r\n        meshDescriptor.parameters.storages = {\r\n          instances: {\r\n            visibility: ['vertex', 'fragment'],\r\n            struct: {\r\n              modelMatrix: {\r\n                type: 'array<mat4x4f>',\r\n                value: worldMatrices,\r\n              },\r\n              normalMatrix: {\r\n                type: 'array<mat4x4f>',\r\n                value: normalMatrices,\r\n              },\r\n            },\r\n          },\r\n        }\r\n      }\r\n\r\n      // computed transformed bbox\r\n      for (let i = 0; i < nodes.length; i++) {\r\n        const tempBbox = geometryBBox.clone()\r\n        const transformedBbox = tempBbox.applyMat4(meshDescriptor.nodes[i].worldMatrix)\r\n\r\n        this.scenesManager.boundingBox.min.min(transformedBbox.min)\r\n        this.scenesManager.boundingBox.max.max(transformedBbox.max)\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add all the needed {@link Mesh} based on the {@link ScenesManager#meshesDescriptors | ScenesManager meshesDescriptors} array.\r\n   * @param patchMeshesParameters - allow to optionally patch the {@link Mesh} parameters before creating it (can be used to add custom shaders, uniforms or storages, change rendering options, etc.)\r\n   * @returns - Array of created {@link Mesh}.\r\n   */\r\n  addMeshes(patchMeshesParameters = (meshDescriptor: MeshDescriptor) => {}): Mesh[] {\r\n    return this.scenesManager.meshesDescriptors.map((meshDescriptor) => {\r\n      if (meshDescriptor.parameters.geometry) {\r\n        // patch the parameters\r\n        patchMeshesParameters(meshDescriptor)\r\n\r\n        const mesh = new Mesh(this.renderer, {\r\n          ...meshDescriptor.parameters,\r\n        })\r\n\r\n        if (meshDescriptor.nodes.length > 1) {\r\n          // if we're dealing with instances\r\n          // we must patch the mesh updateWorldMatrix method\r\n          // in order to update the instanceMatrix binding each time the mesh world matrix change\r\n\r\n          const _updateWorldMatrix = mesh.updateWorldMatrix.bind(mesh)\r\n          mesh.updateWorldMatrix = () => {\r\n            _updateWorldMatrix()\r\n\r\n            meshDescriptor.nodes.forEach((node, i) => {\r\n              ;(mesh.storages.instances.modelMatrix.value as TypedArray).set(node.worldMatrix.elements, i * 16)\r\n\r\n              _normalMatrix.copy(node.worldMatrix).invert().transpose()\r\n              ;(mesh.storages.instances.normalMatrix.value as TypedArray).set(_normalMatrix.elements, i * 16)\r\n            })\r\n\r\n            mesh.storages.instances.modelMatrix.shouldUpdate = true\r\n            mesh.storages.instances.normalMatrix.shouldUpdate = true\r\n          }\r\n\r\n          // be sure to have fresh model matrices\r\n          // TODO shouldn't be needed?\r\n          this.renderer.onAfterRenderScene.add(\r\n            () => {\r\n              mesh.shouldUpdateModelMatrix()\r\n            },\r\n            { once: true }\r\n          )\r\n        }\r\n\r\n        mesh.parent = meshDescriptor.parent\r\n\r\n        this.scenesManager.meshes.push(mesh)\r\n\r\n        return mesh\r\n      }\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Destroy the current {@link ScenesManager} by removing all created {@link ScenesManager#meshes | meshes} and destroying all the {@link Object3D} nodes.\r\n   */\r\n  destroy() {\r\n    this.scenesManager.meshes.forEach((mesh) => mesh.remove())\r\n    this.scenesManager.meshes = []\r\n\r\n    const nodes = this.scenesManager.getScenesNodes()\r\n    nodes.forEach((node) => {\r\n      node.destroy()\r\n    })\r\n\r\n    this.scenesManager.node.destroy()\r\n  }\r\n}\r\n","import { MaterialTextureDescriptor, MeshDescriptor } from '../../types/gltf/GLTFScenesManager'\r\nimport { ShaderOptions } from '../../types/Materials'\r\nimport { Texture } from '../../core/textures/Texture'\r\nimport { Sampler } from '../../core/samplers/Sampler'\r\nimport { ComputePass, ComputePassParams } from '../../core/computePasses/ComputePass'\r\nimport { Renderer } from '../../core/renderers/utils'\r\nimport { throwWarning } from '../../utils/utils'\r\n\r\n/**\r\n * Parameters used to build the shaders\r\n */\r\nexport interface ShaderBuilderParameters {\r\n  /** Additional WGSL chunks to add to the shaders. */\r\n  chunks?: {\r\n    /** Additional WGSL chunk to add to the fragment shader head. */\r\n    additionalFragmentHead?: string\r\n    /** Preliminary modification to apply to the fragment shader `color` `vec4f` variable before applying any lightning calculations. */\r\n    preliminaryColorContribution?: string\r\n    /** Ambient light contribution to apply to the fragment shader `lightContribution.ambient` `vec3f` variable. Default is `vec3(1.0)`. */\r\n    ambientContribution?: string\r\n    /** Light contribution to apply to the fragment shader `lightContribution.diffuse` `vec3f` and `lightContribution.specular` `vec3f` variables. Default is `vec3(0.0)` for both. */\r\n    lightContribution?: string\r\n    /** Additional modification to apply to the fragment shader `color` `vec4f` variable before returning it. */\r\n    additionalColorContribution?: string\r\n  }\r\n}\r\n\r\n/** Shaders returned by the shaders builder function. */\r\nexport interface BuiltShaders {\r\n  /** Vertex shader returned by the PBR shader builder. */\r\n  vertex: ShaderOptions\r\n  /** Fragment shader returned by the PBR shader builder. */\r\n  fragment: ShaderOptions\r\n}\r\n\r\n// helper to build vertex and fragment shaders based on our meshDescriptor object\r\n/**\r\n * Build shaders based on a {@link MeshDescriptor} and optional {@link ShaderBuilderParameters | shader parameters}.\r\n *\r\n * The shaders built by this function allow you to access a bunch of variables inside your fragment shader that you can use in your {@link ShaderBuilderParameters | shader parameters} chunks:\r\n *\r\n * - `geometryNormal: vec3f`: the normalized geometry normals.\r\n * - `normal: vec3f` or `N: vec3f`: the computed normalized normals accounting for the `normalTexture` and `tangent` attributes is defined, the `geometryNormal` else.\r\n * - `worldPosition: vec3f`: the world position.\r\n * - `viewDirection: vec3f`: the view direction in world space (camera position minus world position).\r\n * - `V: vec3f`: the normalized view direction in world space (camera position minus world position).\r\n * - `NdotV: f32`: the clamped dot product of `N` and `V`.\r\n * - `metallic: f32`: the metallic value. Default to `1.0`.\r\n * - `roughness: f32`: the roughness value. Default to `1.0`.\r\n * - `f0: vec3f`: the fresnel reflectance.\r\n * - `emissive: vec3f`: the emissive color value. Default to `vec3(0.0)`.\r\n * - `occlusion: f32`: the occlusion value. Default to `1.0`.\r\n * - `lightContribution: LightContribution`: the final light contribution to use. You should add your respective lightning calculations to this variable components, defined as follows:<br>\r\n * ```wgsl\r\n * struct LightContribution {\r\n *   ambient: vec3f, // default to vec3(1.0)\r\n *   diffuse: vec3f, // default to vec3(0.0)\r\n *   specular: vec3f, // default to vec3(0.0)\r\n * };\r\n * ```\r\n * - `color: vec4f`: the color that will be outputted. You can manipulate it with the `preliminaryColorContribution` (applied before lightning calculations) and `additionalColorContribution` (applied after lightning calculations).\r\n *\r\n * @param meshDescriptor - {@link MeshDescriptor} built by the {@link extras/gltf/GLTFScenesManager.GLTFScenesManager | GLTFScenesManager}\r\n * @param shaderParameters - {@link ShaderBuilderParameters | shader parameters} to use.\r\n * @returns - object containing the shaders\r\n */\r\nexport const buildShaders = (\r\n  meshDescriptor: MeshDescriptor,\r\n  shaderParameters: ShaderBuilderParameters = null\r\n): BuiltShaders => {\r\n  // textures check\r\n  const baseColorTexture = meshDescriptor.textures.find((t) => t.texture === 'baseColorTexture')\r\n  const normalTexture = meshDescriptor.textures.find((t) => t.texture === 'normalTexture')\r\n  const emissiveTexture = meshDescriptor.textures.find((t) => t.texture === 'emissiveTexture')\r\n  const occlusionTexture = meshDescriptor.textures.find((t) => t.texture === 'occlusionTexture')\r\n  const metallicRoughnessTexture = meshDescriptor.textures.find((t) => t.texture === 'metallicRoughnessTexture')\r\n\r\n  const facultativeAttributes = meshDescriptor.attributes.filter((attribute) => attribute.name !== 'position')\r\n\r\n  const structAttributes = facultativeAttributes\r\n    .map((attribute, index) => {\r\n      return `@location(${index}) ${attribute.name}: ${attribute.type},`\r\n    })\r\n    .join('\\n\\t')\r\n\r\n  let outputPositions = /* wgsl */ `\r\n    let worldPos = matrices.model * vec4(attributes.position, 1.0);\r\n    vsOutput.position = camera.projection * camera.view * worldPos;\r\n    vsOutput.worldPosition = worldPos.xyz / worldPos.w;\r\n    vsOutput.viewDirection = camera.position - vsOutput.worldPosition.xyz;\r\n  `\r\n  let outputNormal = facultativeAttributes.find((attr) => attr.name === 'normal')\r\n    ? 'vsOutput.normal = getWorldNormal(attributes.normal);'\r\n    : ''\r\n\r\n  if (meshDescriptor.parameters.storages && meshDescriptor.parameters.storages.instances) {\r\n    outputPositions = /* wgsl */ `\r\n      let worldPos: vec4f = instances[attributes.instanceIndex].modelMatrix * vec4f(attributes.position, 1.0);\r\n      vsOutput.position = camera.projection * camera.view * worldPos;\r\n      vsOutput.worldPosition = worldPos.xyz;\r\n      vsOutput.viewDirection = camera.position - vsOutput.worldPosition;\r\n      `\r\n\r\n    outputNormal = `vsOutput.normal = normalize((instances[attributes.instanceIndex].normalMatrix * vec4(attributes.normal, 0.0)).xyz);`\r\n  }\r\n\r\n  const outputAttributes = facultativeAttributes\r\n    .filter((attr) => attr.name !== 'normal')\r\n    .map((attribute) => {\r\n      return `vsOutput.${attribute.name} = attributes.${attribute.name};`\r\n    })\r\n    .join('\\n\\t')\r\n\r\n  let vertexOutputContent = `\r\n      @builtin(position) position: vec4f,\r\n      @location(${facultativeAttributes.length}) viewDirection: vec3f,\r\n      @location(${facultativeAttributes.length + 1}) worldPosition: vec3f,\r\n      ${structAttributes}\r\n  `\r\n\r\n  let outputNormalMap = ''\r\n  const tangentAttribute = facultativeAttributes.find((attr) => attr.name === 'tangent')\r\n  const useNormalMap = !!(normalTexture && tangentAttribute)\r\n\r\n  if (useNormalMap) {\r\n    vertexOutputContent += `\r\n      @location(${facultativeAttributes.length + 2}) bitangent: vec3f,\r\n      `\r\n\r\n    outputNormalMap = `\r\n        vsOutput.tangent = normalize(matrices.model * attributes.tangent);\r\n        vsOutput.bitangent = cross(vsOutput.normal, vsOutput.tangent.xyz) * attributes.tangent.w;\r\n      `\r\n  }\r\n\r\n  const vertexOutput = /*wgsl */ `\r\n    struct VSOutput {\r\n      ${vertexOutputContent}\r\n    };`\r\n\r\n  const fragmentInput = /*wgsl */ `\r\n    struct VSOutput {\r\n      @builtin(front_facing) frontFacing: bool,\r\n      ${vertexOutputContent}\r\n    };`\r\n\r\n  const vs = /* wgsl */ `\r\n    ${vertexOutput}\r\n    \r\n    @vertex fn main(\r\n      attributes: Attributes,\r\n    ) -> VSOutput {\r\n      var vsOutput: VSOutput;\r\n    \r\n      ${outputPositions}\r\n      ${outputNormal}\r\n      ${outputAttributes}\r\n      \r\n      ${outputNormalMap}\r\n\r\n      return vsOutput;\r\n    }\r\n  `\r\n\r\n  // not a PBR material for now, as it does not use roughness/metalness\r\n  // we might want to implement it later\r\n  // see https://github.com/oframe/ogl/blob/master/examples/load-gltf.html#L133\r\n  const initColor = /* wgsl */ 'var color: vec4f = vec4();'\r\n  const returnColor = /* wgsl */ `\r\n      return vec4(\r\n        linearTosRGB(\r\n          toneMapKhronosPbrNeutral(\r\n            color.rgb\r\n          )\r\n        ),\r\n        color.a\r\n      );\r\n  `\r\n\r\n  // start with the base color\r\n  // use vertex color 0 if defined\r\n  const vertexColor = meshDescriptor.attributes.find((attr) => attr.name === 'color0')\r\n  let baseColor = /* wgsl */ !!vertexColor\r\n    ? vertexColor.type === 'vec3f'\r\n      ? 'var baseColor: vec4f = vec4(fsInput.color0, 1.0) * material.baseColorFactor;'\r\n      : 'var baseColor: vec4f = fsInput.color0 * material.baseColorFactor;'\r\n    : 'var baseColor: vec4f = material.baseColorFactor;'\r\n\r\n  if (baseColorTexture) {\r\n    baseColor = /* wgsl */ `\r\n      var baseColor: vec4f = textureSample(baseColorTexture, ${baseColorTexture.sampler}, fsInput.${baseColorTexture.texCoordAttributeName}) * material.baseColorFactor;\r\n      \r\n      if (baseColor.a < material.alphaCutoff) {\r\n        discard;\r\n      }\r\n    `\r\n  }\r\n\r\n  baseColor += /* wgsl */ `\r\n      color = baseColor;\r\n  `\r\n\r\n  // normal map\r\n\r\n  let normalMap = meshDescriptor.attributes.find((attribute) => attribute.name === 'normal')\r\n    ? /* wgsl */ `\r\n      let faceDirection = select(-1.0, 1.0, fsInput.frontFacing);\r\n      let geometryNormal: vec3f = normalize(faceDirection * fsInput.normal);\r\n    `\r\n    : /* wgsl */ `let geometryNormal: vec3f = normalize(vec3(0.0, 0.0, 1.0));`\r\n\r\n  if (useNormalMap) {\r\n    normalMap += /* wgsl */ `\r\n      let tbn = mat3x3<f32>(normalize(fsInput.tangent.xyz), normalize(fsInput.bitangent), geometryNormal);\r\n      let normalMap = textureSample(normalTexture, ${normalTexture.sampler}, fsInput.${normalTexture.texCoordAttributeName}).rgb;\r\n      let normal = normalize(tbn * (2.0 * normalMap - vec3(material.normalMapScale, material.normalMapScale, 1.0)));\r\n    `\r\n  } else {\r\n    normalMap += /* wgsl */ `\r\n      let normal = geometryNormal;\r\n    `\r\n  }\r\n\r\n  normalMap += /* wgsl */ `\r\n      let worldPosition: vec3f = fsInput.worldPosition;\r\n      let viewDirection: vec3f = fsInput.viewDirection;\r\n      let N: vec3f = normal;\r\n      let V: vec3f = normalize(viewDirection);\r\n      let NdotV: f32 = clamp(dot(N, V), 0.0, 1.0);\r\n  `\r\n\r\n  // metallic roughness\r\n  let metallicRoughness = /*  wgsl */ `\r\n      var metallic = material.metallicFactor;\r\n      var roughness = material.roughnessFactor;\r\n  `\r\n\r\n  if (metallicRoughnessTexture) {\r\n    metallicRoughness += /* wgsl */ `\r\n      let metallicRoughness = textureSample(metallicRoughnessTexture, ${metallicRoughnessTexture.sampler}, fsInput.${metallicRoughnessTexture.texCoordAttributeName});\r\n      \r\n      metallic = clamp(metallic * metallicRoughness.b, 0.0, 1.0);\r\n      roughness = clamp(roughness * metallicRoughness.g, 0.0, 1.0);\r\n    `\r\n  }\r\n\r\n  const f0 = /* wgsl */ `\r\n      let f0: vec3f = mix(vec3(0.04), color.rgb, vec3(metallic));\r\n  `\r\n\r\n  // emissive and occlusion\r\n  let emissiveOcclusion = /* wgsl */ `\r\n      var emissive: vec3f = vec3(0.0);\r\n      var occlusion: f32 = 1.0;\r\n  `\r\n\r\n  if (emissiveTexture) {\r\n    emissiveOcclusion += /* wgsl */ `\r\n      emissive = textureSample(emissiveTexture, ${emissiveTexture.sampler}, fsInput.${emissiveTexture.texCoordAttributeName}).rgb;\r\n      \r\n      emissive *= material.emissiveFactor;\r\n      `\r\n    if (occlusionTexture) {\r\n      emissiveOcclusion += /* wgsl */ `\r\n      occlusion = textureSample(occlusionTexture, ${occlusionTexture.sampler}, fsInput.${occlusionTexture.texCoordAttributeName}).r;\r\n      `\r\n    }\r\n  }\r\n\r\n  emissiveOcclusion += /* wgsl */ `\r\n      occlusion = 1.0 + material.occlusionStrength * (occlusion - 1.0);\r\n  `\r\n\r\n  // add lightning\r\n  const initLightShading = /* wgsl */ `\r\n      var lightContribution: LightContribution;\r\n      \r\n      lightContribution.ambient = vec3(1.0);\r\n      lightContribution.diffuse = vec3(0.0);\r\n      lightContribution.specular = vec3(0.0);\r\n  `\r\n\r\n  // user defined chunks\r\n  const defaultAdditionalHead = ''\r\n  const defaultPreliminaryColor = ''\r\n  const defaultAdditionalColor = ''\r\n  const defaultAmbientContribution = ''\r\n  const defaultLightContribution = ''\r\n\r\n  shaderParameters = shaderParameters ?? {}\r\n\r\n  let chunks = shaderParameters.chunks\r\n\r\n  if (!chunks) {\r\n    chunks = {\r\n      additionalFragmentHead: defaultAdditionalHead,\r\n      ambientContribution: defaultAmbientContribution,\r\n      preliminaryColorContribution: defaultPreliminaryColor,\r\n      lightContribution: defaultLightContribution,\r\n      additionalColorContribution: defaultAdditionalColor,\r\n    }\r\n  } else {\r\n    if (!chunks.additionalFragmentHead) chunks.additionalFragmentHead = defaultAdditionalHead\r\n    if (!chunks.preliminaryColorContribution) chunks.preliminaryColorContribution = defaultPreliminaryColor\r\n    if (!chunks.ambientContribution) chunks.ambientContribution = defaultAmbientContribution\r\n    if (!chunks.lightContribution) chunks.lightContribution = defaultLightContribution\r\n    if (!chunks.additionalColorContribution) chunks.additionalColorContribution = defaultAdditionalColor\r\n  }\r\n\r\n  const applyLightShading = /* wgsl */ `\r\n      // apply color to ambient    \r\n      lightContribution.ambient *= color.rgb;\r\n      \r\n      // apply color based on metallic to diffuse\r\n      lightContribution.diffuse *= mix(color.rgb, vec3(0.0), vec3(metallic));\r\n      \r\n      let totalLight: vec3f = lightContribution.ambient + lightContribution.diffuse + lightContribution.specular;\r\n      \r\n      color = vec4(\r\n        totalLight * occlusion + emissive,\r\n        color.a\r\n      );\r\n  `\r\n\r\n  const fs = /* wgsl */ `\r\n    // Light\r\n    struct LightContribution {\r\n      ambient: vec3f,\r\n      diffuse: vec3f,\r\n      specular: vec3f,\r\n    };\r\n  \r\n    // PBR\r\n    const PI = ${Math.PI};\r\n    \r\n    // tone maping\r\n    fn toneMapKhronosPbrNeutral( color: vec3f ) -> vec3f {\r\n      var toneMapColor = color; \r\n      const startCompression: f32 = 0.8 - 0.04;\r\n      const desaturation: f32 = 0.15;\r\n      var x: f32 = min(toneMapColor.r, min(toneMapColor.g, toneMapColor.b));\r\n      var offset: f32 = select(0.04, x - 6.25 * x * x, x < 0.08);\r\n      toneMapColor = toneMapColor - offset;\r\n      var peak: f32 = max(toneMapColor.r, max(toneMapColor.g, toneMapColor.b));\r\n      if (peak < startCompression) {\r\n        return toneMapColor;\r\n      }\r\n      const d: f32 = 1. - startCompression;\r\n      let newPeak: f32 = 1. - d * d / (peak + d - startCompression);\r\n      toneMapColor *= newPeak / peak;\r\n      let g: f32 = 1. - 1. / (desaturation * (peak - newPeak) + 1.);\r\n      return mix(toneMapColor, newPeak * vec3(1, 1, 1), g);\r\n    }\r\n    \r\n  \r\n    // linear <-> sRGB conversions\r\n    fn linearTosRGB(linear: vec3f) -> vec3f {\r\n      if (all(linear <= vec3(0.0031308))) {\r\n        return linear * 12.92;\r\n      }\r\n      return (pow(abs(linear), vec3(1.0/2.4)) * 1.055) - vec3(0.055);\r\n    }\r\n  \r\n    fn sRGBToLinear(srgb: vec3f) -> vec3f {\r\n      if (all(srgb <= vec3(0.04045))) {\r\n        return srgb / vec3(12.92);\r\n      }\r\n      return pow((srgb + vec3(0.055)) / vec3(1.055), vec3(2.4));\r\n    }\r\n    \r\n    ${chunks.additionalFragmentHead}\r\n  \r\n    ${fragmentInput}\r\n  \r\n    @fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {       \r\n      ${initColor}\r\n      ${baseColor}\r\n\r\n      ${normalMap}\r\n      ${metallicRoughness}  \r\n      ${initLightShading}  \r\n      \r\n      // user defined preliminary color contribution\r\n      ${chunks.preliminaryColorContribution}\r\n        \r\n      ${f0}\r\n      ${emissiveOcclusion}\r\n      \r\n      // user defined lightning\r\n      ${chunks.ambientContribution}\r\n      ${chunks.lightContribution}\r\n      \r\n      ${applyLightShading}\r\n      \r\n      // user defined additional color contribution\r\n      ${chunks.additionalColorContribution}\r\n      \r\n      ${returnColor}\r\n    }\r\n  `\r\n\r\n  return {\r\n    vertex: {\r\n      code: vs,\r\n      entryPoint: 'main',\r\n    },\r\n    fragment: {\r\n      code: fs,\r\n      entryPoint: 'main',\r\n    },\r\n  }\r\n}\r\n\r\n// helper to build PBR vertex and fragment shaders based on our meshDescriptor object\r\n// see https://github.com/toji/webgpu-clustered-shading/blob/main/js/webgpu-renderer/shaders/pbr.js\r\n/**\r\n * Build Physically Based Rendering shaders based on a {@link MeshDescriptor} and optional {@link ShaderBuilderParameters | PBR shader parameters}.\r\n * @param meshDescriptor - {@link MeshDescriptor} built by the {extras/gltf/GLTFScenesManager.GLTFScenesManager | GLTFScenesManager}\r\n * @param shaderParameters - {@link ShaderBuilderParameters | PBR shader parameters} to use.\r\n * @returns - object containing the shaders\r\n */\r\nexport const buildPBRShaders = (\r\n  meshDescriptor: MeshDescriptor,\r\n  shaderParameters: ShaderBuilderParameters = null\r\n): BuiltShaders => {\r\n  let chunks = shaderParameters?.chunks\r\n\r\n  const pbrAdditionalFragmentHead = /* wgsl */ `\r\n    fn FresnelSchlick(cosTheta: f32, f0: vec3f) -> vec3f {\r\n      return f0 + (vec3(1.0) - f0) * pow(1.0 - cosTheta, 5.0);\r\n    }\r\n    \r\n    fn DistributionGGX(NdotH: f32, roughness: f32) -> f32 {\r\n      let a: f32 = roughness * roughness;\r\n      let a2: f32 = a * a;\r\n      let NdotH2: f32 = NdotH * NdotH;\r\n    \r\n      let num: f32 = a2;\r\n      let denom: f32 = (NdotH2 * (a2 - 1.0) + 1.0);\r\n    \r\n      return num / (PI * denom * denom);\r\n    }\r\n    \r\n    fn GeometrySchlickGGX(NdotV : f32, roughness: f32) -> f32 {\r\n      let r: f32 = (roughness + 1.0);\r\n      let k: f32 = (r * r) / 8.0;\r\n    \r\n      let num: f32 = NdotV;\r\n      let denom: f32 = NdotV * (1.0 - k) + k;\r\n    \r\n      return num / denom;\r\n    }\r\n    \r\n    fn GeometrySmith(NdotL: f32, NdotV: f32, roughness: f32) -> f32 {\r\n      let ggx2: f32 = GeometrySchlickGGX(NdotV, roughness);\r\n      let ggx1: f32 = GeometrySchlickGGX(NdotL, roughness);\r\n    \r\n      return ggx1 * ggx2;\r\n    }\r\n  `\r\n\r\n  if (!chunks) {\r\n    chunks = {\r\n      additionalFragmentHead: pbrAdditionalFragmentHead,\r\n    }\r\n  } else {\r\n    if (!chunks.additionalFragmentHead) {\r\n      chunks.additionalFragmentHead = pbrAdditionalFragmentHead\r\n    } else {\r\n      chunks.additionalFragmentHead += pbrAdditionalFragmentHead\r\n    }\r\n  }\r\n\r\n  return buildShaders(meshDescriptor, shaderParameters)\r\n}\r\n\r\n/**\r\n * Parameters to use for IBL textures\r\n */\r\nexport interface IBLShaderTextureParams {\r\n  /** {@link Texture} to use. */\r\n  texture: Texture\r\n  /** {@link Sampler#name | Sampler name} to use. */\r\n  samplerName?: Sampler['name']\r\n}\r\n\r\n/**\r\n * Parameters used to build the shaders\r\n */\r\nexport interface IBLShaderBuilderParameters extends ShaderBuilderParameters {\r\n  /** Additional IBL parameters to pass as uniform and textures. */\r\n  iblParameters?: {\r\n    /** Environment diffuse strength. Default to `0.5`. */\r\n    diffuseStrength?: number\r\n    /** Environment specular strength. Default to `0.5`. */\r\n    specularStrength?: number\r\n    /** Look Up Table texture parameters to use for IBL. */\r\n    lutTexture?: IBLShaderTextureParams\r\n    /** Environment diffuse texture parameters to use for IBL. */\r\n    envDiffuseTexture?: IBLShaderTextureParams\r\n    /** Environment specular texture parameters to use for IBL. */\r\n    envSpecularTexture?: IBLShaderTextureParams\r\n  }\r\n}\r\n\r\n// based on https://github.khronos.org/glTF-Sample-Viewer-Release/\r\n/**\r\n * Build Image Based Lightning shaders based on a {@link MeshDescriptor} and optional {@link ShaderBuilderParameters | IBL shader parameters}.\r\n * @param meshDescriptor - {@link MeshDescriptor} built by the {extras/gltf/GLTFScenesManager.GLTFScenesManager | GLTFScenesManager}\r\n * @param shaderParameters - {@link ShaderBuilderParameters | IBL shader parameters} to use.\r\n * @returns - object containing the shaders\r\n */\r\nexport const buildIBLShaders = (\r\n  meshDescriptor: MeshDescriptor,\r\n  shaderParameters: IBLShaderBuilderParameters = null\r\n): BuiltShaders => {\r\n  shaderParameters = shaderParameters || {}\r\n  const iblParameters = shaderParameters?.iblParameters\r\n\r\n  // add lights & ibl uniforms\r\n  meshDescriptor.parameters.uniforms = {\r\n    ...meshDescriptor.parameters.uniforms,\r\n    ...{\r\n      ibl: {\r\n        struct: {\r\n          diffuseStrength: {\r\n            type: 'f32',\r\n            value: iblParameters?.diffuseStrength ?? 0.5,\r\n          },\r\n          specularStrength: {\r\n            type: 'f32',\r\n            value: iblParameters?.specularStrength ?? 0.5,\r\n          },\r\n        },\r\n      },\r\n    },\r\n  }\r\n\r\n  // IBL\r\n  const { lutTexture, envDiffuseTexture, envSpecularTexture } = iblParameters || {}\r\n\r\n  const useIBLContribution =\r\n    envDiffuseTexture &&\r\n    envDiffuseTexture.texture &&\r\n    envSpecularTexture &&\r\n    envSpecularTexture.texture &&\r\n    lutTexture &&\r\n    lutTexture.texture\r\n\r\n  let iblContributionHead = ''\r\n  let iblLightContribution = ''\r\n\r\n  if (useIBLContribution) {\r\n    meshDescriptor.parameters.textures = [\r\n      ...meshDescriptor.parameters.textures,\r\n      lutTexture.texture,\r\n      envDiffuseTexture.texture,\r\n      envSpecularTexture.texture,\r\n    ]\r\n\r\n    lutTexture.samplerName = lutTexture.samplerName || 'defaultSampler'\r\n    envDiffuseTexture.samplerName = envDiffuseTexture.samplerName || 'defaultSampler'\r\n    envSpecularTexture.samplerName = envSpecularTexture.samplerName || 'defaultSampler'\r\n\r\n    iblContributionHead = /* wgsl */ `  \r\n    const RECIPROCAL_PI = ${1 / Math.PI};\r\n    const RECIPROCAL_PI2 = ${0.5 / Math.PI};\r\n    \r\n    fn cartesianToPolar(n: vec3f) -> vec2f {\r\n      var uv: vec2f;\r\n      uv.x = atan2(n.z, n.x) * RECIPROCAL_PI2 + 0.5;\r\n      uv.y = asin(n.y) * RECIPROCAL_PI + 0.5;\r\n      return uv;\r\n    }\r\n    \r\n    struct IBLContribution {\r\n      diffuse: vec3f,\r\n      specular: vec3f,\r\n    };\r\n    \r\n    fn getIBLContribution(NdotV: f32, roughness: f32, normal: vec3f, reflection: vec3f, diffuseColor: vec3f, f0: vec3f) -> IBLContribution {\r\n      var iblContribution: IBLContribution;\r\n    \r\n      let brdfSamplePoint: vec2f = clamp(vec2(NdotV, roughness), vec2(0.0), vec2(1.0));\r\n      \r\n      let brdf: vec3f = textureSample(\r\n        ${lutTexture.texture.options.name},\r\n        ${lutTexture.samplerName},\r\n        brdfSamplePoint\r\n      ).rgb;\r\n    \r\n      let Fr: vec3f = max(vec3(1.0 - roughness), f0) - f0;\r\n      let k_S: vec3f = f0 + Fr * pow(1.0 - NdotV, 5.0);\r\n      var FssEss: vec3f = k_S * brdf.x + brdf.y;\r\n      \r\n      // IBL specular\r\n      let lod: f32 = roughness * f32(textureNumLevels(${envSpecularTexture.texture.options.name}) - 1);\r\n      \r\n      let specularLight: vec4f = textureSampleLevel(\r\n        ${envSpecularTexture.texture.options.name},\r\n        ${envSpecularTexture.samplerName},\r\n        ${envSpecularTexture.texture.options.viewDimension === 'cube' ? 'reflection' : 'cartesianToPolar(reflection)'},\r\n        lod\r\n      );\r\n      \r\n      iblContribution.specular = specularLight.rgb * FssEss * ibl.specularStrength;\r\n      \r\n      // IBL diffuse\r\n      let diffuseLight: vec4f = textureSample(\r\n        ${envDiffuseTexture.texture.options.name},\r\n        ${envDiffuseTexture.samplerName},\r\n        ${envDiffuseTexture.texture.options.viewDimension === 'cube' ? 'normal' : 'cartesianToPolar(normal)'}\r\n      );\r\n      \r\n      // product of specularFactor and specularTexture.a\r\n      let specularWeight: f32 = 1.0;\r\n            \r\n      FssEss = specularWeight * k_S * brdf.x + brdf.y;\r\n      \r\n      let Ems: f32 = (1.0 - (brdf.x + brdf.y));\r\n      let F_avg: vec3f = specularWeight * (f0 + (1.0 - f0) / 21.0);\r\n      let FmsEms: vec3f = Ems * FssEss * F_avg / (1.0 - F_avg * Ems);\r\n      let k_D: vec3f = diffuseColor * (1.0 - FssEss + FmsEms);\r\n      \r\n      iblContribution.diffuse = (FmsEms + k_D) * diffuseLight.rgb * ibl.diffuseStrength;\r\n      \r\n      return iblContribution;\r\n    }\r\n    `\r\n\r\n    iblLightContribution = /* wgsl */ `\r\n      let reflection: vec3f = normalize(reflect(-V, N));\r\n      \r\n      let iblDiffuseColor: vec3f = mix(color.rgb, vec3(0.0), vec3(metallic));\r\n    \r\n      let iblContribution = getIBLContribution(NdotV, roughness, N, reflection, iblDiffuseColor, f0);\r\n      \r\n      lightContribution.diffuse += iblContribution.diffuse;\r\n      lightContribution.specular += iblContribution.specular;\r\n    `\r\n  }\r\n\r\n  let chunks = shaderParameters?.chunks\r\n\r\n  if (!chunks) {\r\n    chunks = {\r\n      additionalFragmentHead: iblContributionHead,\r\n      lightContribution: iblLightContribution,\r\n    }\r\n  } else {\r\n    if (!chunks.additionalFragmentHead) {\r\n      chunks.additionalFragmentHead = iblContributionHead\r\n    } else {\r\n      chunks.additionalFragmentHead += iblContributionHead\r\n    }\r\n\r\n    if (!chunks.lightContribution) {\r\n      chunks.lightContribution = iblLightContribution\r\n    } else {\r\n      chunks.lightContribution = iblLightContribution + chunks.lightContribution\r\n    }\r\n\r\n    // remove ambient contribution if it's not defined but IBL is applied\r\n    if (!chunks.ambientContribution && useIBLContribution) {\r\n      chunks.ambientContribution = 'lightContribution.ambient = vec3(0.0);'\r\n    }\r\n  }\r\n\r\n  shaderParameters.chunks = chunks\r\n\r\n  return buildPBRShaders(meshDescriptor, shaderParameters)\r\n}\r\n\r\n/**\r\n * Compute a diffuse cube map from a specular cube map using a {@link ComputePass} and copy the result into the diffuse texture {@link GPUTexture}.\r\n * @param renderer - {@link Renderer} to use.\r\n * @param diffuseTexture - diffuse cube map texture onto which the result of the {@link ComputePass} should be copied.\r\n * @param specularTexture - specular cube map texture to use as a source.\r\n */\r\nexport const computeDiffuseFromSpecular = async (\r\n  renderer: Renderer,\r\n  diffuseTexture: Texture,\r\n  specularTexture: Texture\r\n) => {\r\n  if (specularTexture.options.viewDimension !== 'cube') {\r\n    throwWarning(\r\n      'Could not compute the diffuse texture because the specular texture is not a cube map:' +\r\n        specularTexture.options.viewDimension\r\n    )\r\n    return\r\n  }\r\n\r\n  // ported from https://github.com/KhronosGroup/glTF-Sample-Viewer/blob/9940e4b4f4a2a296351bcd35035cc518deadc298/source/shaders/ibl_filtering.frag\r\n  const computeDiffuseShader = `    \r\n    fn radicalInverse_VdC(inputBits: u32) -> f32 {\r\n        var bits: u32 = inputBits;\r\n        bits = (bits << 16u) | (bits >> 16u);\r\n        bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);\r\n        bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);\r\n        bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);\r\n        bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);\r\n        return f32(bits) * 2.3283064365386963e-10; // / 0x100000000\r\n    }\r\n    \r\n    // hammersley2d describes a sequence of points in the 2d unit square [0,1)^2\r\n    // that can be used for quasi Monte Carlo integration\r\n    fn hammersley2d(i: u32, N: u32) -> vec2f {\r\n        return vec2(f32(i) / f32(N), radicalInverse_VdC(i));\r\n    }\r\n    \r\n    // TBN generates a tangent bitangent normal coordinate frame from the normal\r\n    // (the normal must be normalized)\r\n    fn generateTBN(normal: vec3f) -> mat3x3f {\r\n      var bitangent: vec3f = vec3(0.0, 1.0, 0.0);\r\n  \r\n      let NdotUp: f32 = dot(normal, vec3(0.0, 1.0, 0.0));\r\n      let epsilon: f32 = 0.0000001;\r\n      \r\n      if (1.0 - abs(NdotUp) <= epsilon) {\r\n        // Sampling +Y or -Y, so we need a more robust bitangent.\r\n        if (NdotUp > 0.0) {\r\n          bitangent = vec3(0.0, 0.0, 1.0);\r\n        }\r\n        else {\r\n          bitangent = vec3(0.0, 0.0, -1.0);\r\n        }\r\n      }\r\n  \r\n      let tangent: vec3f = normalize(cross(bitangent, normal));\r\n      bitangent = cross(normal, tangent);\r\n  \r\n      return mat3x3f(tangent, bitangent, normal);\r\n    }\r\n    \r\n    // Mipmap Filtered Samples (GPU Gems 3, 20.4)\r\n    // https://developer.nvidia.com/gpugems/gpugems3/part-iii-rendering/chapter-20-gpu-based-importance-sampling\r\n    // https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf\r\n    fn computeLod(pdf: f32) -> f32 {\r\n      // https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf\r\n      return 0.5 * log2( 6.0 * f32(params.faceSize) * f32(params.faceSize) / (f32(params.sampleCount) * pdf));\r\n    }\r\n    \r\n    fn transformDirection(face: u32, uv: vec2f) -> vec3f {\r\n      // Transform the direction based on the cubemap face\r\n      switch (face) {\r\n        case 0u {\r\n          // +X\r\n          return vec3f( 1.0,  uv.y, -uv.x);\r\n        }\r\n        case 1u {\r\n          // -X\r\n          return vec3f(-1.0,  uv.y,  uv.x);\r\n        }\r\n        case 2u {\r\n          // +Y\r\n          return vec3f( uv.x,  -1.0, uv.y);\r\n        }\r\n        case 3u {\r\n          // -Y\r\n          return vec3f( uv.x, 1.0,  -uv.y);\r\n        }\r\n        case 4u {\r\n          // +Z\r\n          return vec3f( uv.x,  uv.y,  1.0);\r\n        }\r\n        case 5u {\r\n          // -Z\r\n          return vec3f(-uv.x,  uv.y, -1.0);\r\n        }\r\n        default {\r\n          return vec3f(0.0, 0.0, 0.0);\r\n        }\r\n      }\r\n    }\r\n    \r\n    const PI = ${Math.PI};\r\n\r\n    @compute @workgroup_size(8, 8, 1) fn main(\r\n      @builtin(global_invocation_id) GlobalInvocationID: vec3u,\r\n    ) {\r\n      let faceSize: u32 = params.faceSize;\r\n      let sampleCount: u32 = params.sampleCount;\r\n      \r\n      let face: u32 = GlobalInvocationID.z;\r\n      let x: u32 = GlobalInvocationID.x;\r\n      let y: u32 = GlobalInvocationID.y;\r\n  \r\n      if (x >= faceSize || y >= faceSize) {\r\n          return;\r\n      }\r\n  \r\n      let texelSize: f32 = 1.0 / f32(faceSize);\r\n      let halfTexel: f32 = texelSize * 0.5;\r\n      \r\n      var uv: vec2f = vec2(\r\n        (f32(x) + halfTexel) * texelSize,\r\n        (f32(y) + halfTexel) * texelSize\r\n      );\r\n      \r\n      uv = uv * 2.0 - 1.0;\r\n  \r\n      let normal: vec3<f32> = transformDirection(face, uv);\r\n      \r\n      var irradiance: vec3f = vec3f(0.0, 0.0, 0.0);\r\n  \r\n      for (var i: u32 = 0; i < sampleCount; i++) {\r\n        // generate a quasi monte carlo point in the unit square [0.1)^2\r\n        let xi: vec2f = hammersley2d(i, sampleCount);\r\n        \r\n        let cosTheta: f32 = sqrt(1.0 - xi.y);\r\n        let sinTheta: f32 = sqrt(1.0 - cosTheta * cosTheta);\r\n        let phi: f32 = 2.0 * PI * xi.x;\r\n        let pdf: f32 = cosTheta / PI; // evaluation for solid angle, therefore drop the sinTheta\r\n\r\n        let sampleVec: vec3f = vec3f(\r\n            sinTheta * cos(phi),\r\n            sinTheta * sin(phi),\r\n            cosTheta\r\n        );\r\n        \r\n        let TBN: mat3x3f = generateTBN(normalize(normal));\r\n        \r\n        var direction: vec3f = TBN * sampleVec;\r\n        \r\n        // invert along Y axis\r\n        direction.y *= -1.0;\r\n        \r\n        let lod: f32 = computeLod(pdf);\r\n\r\n        // Convert sampleVec to texture coordinates of the specular env map\r\n        irradiance += textureSampleLevel(\r\n          envSpecularTexture,\r\n          specularSampler,\r\n          direction,\r\n          min(lod, f32(params.maxMipLevel))\r\n        ).rgb;\r\n      }\r\n  \r\n      irradiance /= f32(sampleCount);\r\n\r\n      textureStore(diffuseEnvMap, vec2(x, y), face, vec4f(irradiance, 1.0));\r\n    }\r\n  `\r\n\r\n  let diffuseStorageTexture = new Texture(renderer, {\r\n    label: 'Diffuse storage cubemap',\r\n    name: 'diffuseEnvMap',\r\n    format: 'rgba32float',\r\n    visibility: ['compute'],\r\n    usage: ['copySrc', 'storageBinding'],\r\n    type: 'storage',\r\n    fixedSize: {\r\n      width: specularTexture.size.width,\r\n      height: specularTexture.size.height,\r\n      depth: 6,\r\n    },\r\n    viewDimension: '2d-array',\r\n  })\r\n\r\n  const sampler = new Sampler(renderer, {\r\n    label: 'Compute diffuse sampler',\r\n    name: 'specularSampler',\r\n    addressModeU: 'clamp-to-edge',\r\n    addressModeV: 'clamp-to-edge',\r\n    minFilter: 'linear',\r\n    magFilter: 'linear',\r\n  })\r\n\r\n  let computeDiffusePass = new ComputePass(renderer, {\r\n    autoRender: false, // we're going to render only on demand\r\n    dispatchSize: [Math.ceil(specularTexture.size.width / 8), Math.ceil(specularTexture.size.height / 8), 6],\r\n    shaders: {\r\n      compute: {\r\n        code: computeDiffuseShader,\r\n      },\r\n    },\r\n    uniforms: {\r\n      params: {\r\n        struct: {\r\n          faceSize: {\r\n            type: 'u32',\r\n            value: specularTexture.size.width,\r\n          },\r\n          maxMipLevel: {\r\n            type: 'u32',\r\n            value: specularTexture.texture.mipLevelCount,\r\n          },\r\n          sampleCount: {\r\n            type: 'u32',\r\n            value: 2048,\r\n          },\r\n        },\r\n      },\r\n    },\r\n    samplers: [sampler],\r\n    textures: [specularTexture, diffuseStorageTexture],\r\n  })\r\n\r\n  await computeDiffusePass.material.compileMaterial()\r\n\r\n  renderer.onBeforeRenderScene.add(\r\n    (commandEncoder) => {\r\n      // run the compute pass just once\r\n      renderer.renderSingleComputePass(commandEncoder, computeDiffusePass)\r\n\r\n      // copy the result to our diffuse texture\r\n      commandEncoder.copyTextureToTexture(\r\n        {\r\n          texture: diffuseStorageTexture.texture,\r\n        },\r\n        {\r\n          texture: diffuseTexture.texture,\r\n        },\r\n        [diffuseTexture.texture.width, diffuseTexture.texture.height, diffuseTexture.texture.depthOrArrayLayers]\r\n      )\r\n    },\r\n    { once: true }\r\n  )\r\n\r\n  renderer.onAfterCommandEncoderSubmission.add(\r\n    () => {\r\n      // once command encoder has been submitted, free the resources\r\n      computeDiffusePass.destroy()\r\n      diffuseStorageTexture.destroy()\r\n      diffuseStorageTexture = null\r\n      computeDiffusePass = null\r\n    },\r\n    { once: true }\r\n  )\r\n}\r\n","// ported from https://github.com/DerSchmale/io-rgbe/tree/main\n\n/**\n * HDRImageData contains all decompressed image data.\n */\nexport interface HDRImageData {\n  /** Width of the HDR image */\n  width: number\n  /** Height of the HDR image */\n  height: number\n  /** Exposure of the HDR image */\n  exposure: number\n  /** Gamma of the HDR image */\n  gamma: number\n  /** {@link Float32Array} holding the HDR image data */\n  data: Float32Array\n}\n\n/**\n * @ignore\n */\ntype Header = {\n  width: number\n  height: number\n  gamma: number\n  exposure: number\n  colorCorr: number[]\n  flipX: boolean\n  flipY: boolean\n}\n\n/**\n * @ignore\n */\ntype DataStream = {\n  offset: number\n  data: DataView\n}\n\n/**\n * Basic glTF loader class.\n *\n * Allow to load an HDR file from an URI and returns a {@link HDRImageData} object containing the {@link Float32Array} data alongside width, height and other useful information.\n *\n * @example\n * ```javascript\n * const hdrLoader = new HDRLoader()\n * const hdr = await hdrLoader.loadFromUrl('path/to/environment.hdr')\n *\n * // assuming `renderer` is a valid Renderer\n * const envTexture = new Texture(renderer, {\n *   label: 'Environment texture',\n *   name: 'envTexture',\n *   visibility: ['fragment'],\n *   format: 'rgba16float',\n *   generateMips: true,\n *   fixedSize: {\n *     width: hdr.width,\n *     height: hdr.height,\n *   },\n * })\n *\n * envTexture.uploadData({\n *   data: hdr.data,\n * })\n * ```\n */\nexport class HDRLoader {\n  /**\n   * Load and decode RGBE-encoded data to a flat list of floating point pixel data (RGBA).\n   * @param url -  The url of the .hdr file to load\n   * @returns - The {@link HDRImageData}\n   */\n  async loadFromUrl(url: string): Promise<HDRImageData> {\n    const buffer = await (await fetch(url)).arrayBuffer()\n\n    return this.#decodeRGBE(new DataView(buffer))\n  }\n\n  /**\n   * @ignore\n   */\n  #decodeRGBE(data: DataView): HDRImageData {\n    const stream = {\n      data,\n      offset: 0,\n    }\n\n    const header = this.#parseHeader(stream)\n\n    return {\n      width: header.width,\n      height: header.height,\n      exposure: header.exposure,\n      gamma: header.gamma,\n      data: this.#parseData(stream, header),\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  #parseHeader(stream: DataStream): Header {\n    let line = this.#readLine(stream)\n    const header = {\n      colorCorr: [1, 1, 1],\n      exposure: 1,\n      gamma: 1,\n      width: 0,\n      height: 0,\n      flipX: false,\n      flipY: false,\n    }\n\n    if (line !== '#?RADIANCE' && line !== '#?RGBE') throw new Error('Incorrect file format!')\n\n    while (line !== '') {\n      // empty line means there's only 1 line left, containing size info:\n      line = this.#readLine(stream)\n      const parts = line.split('=')\n      switch (parts[0]) {\n        case 'GAMMA':\n          header.gamma = parseFloat(parts[1])\n          break\n        case 'FORMAT':\n          if (parts[1] !== '32-bit_rle_rgbe' && parts[1] !== '32-bit_rle_xyze')\n            throw new Error('Incorrect encoding format!')\n          break\n        case 'EXPOSURE':\n          header.exposure = parseFloat(parts[1])\n          break\n        case 'COLORCORR':\n          header.colorCorr = parts[1]\n            .replace(/^\\s+|\\s+$/g, '')\n            .split(' ')\n            .map((m) => parseFloat(m))\n          break\n      }\n    }\n\n    line = this.#readLine(stream)\n\n    const parts = line.split(' ')\n    this.#parseSize(parts[0], parseInt(parts[1]), header)\n    this.#parseSize(parts[2], parseInt(parts[3]), header)\n\n    return header\n  }\n\n  /**\n   * @ignore\n   */\n  #parseSize(label: string, value: number, header: Header) {\n    switch (label) {\n      case '+X':\n        header.width = value\n        break\n      case '-X':\n        header.width = value\n        header.flipX = true\n        console.warn('Flipping horizontal orientation not currently supported')\n        break\n      case '-Y':\n        header.height = value\n        header.flipY = true // WebGPU flipY default is false\n        break\n      case '+Y':\n        header.height = value\n        break\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  #readLine(stream: DataStream): string {\n    let ch,\n      str = ''\n\n    while ((ch = stream.data.getUint8(stream.offset++)) !== 0x0a) str += String.fromCharCode(ch)\n\n    return str\n  }\n\n  /**\n   * @ignore\n   */\n  #parseData(stream: DataStream, header: Header): Float32Array {\n    const hash = stream.data.getUint16(stream.offset)\n    let data\n\n    if (hash === 0x0202) {\n      data = this.#parseNewRLE(stream, header)\n      if (header.flipX) this.#flipX(data, header)\n      if (header.flipY) this.#flipY(data, header)\n    } else {\n      throw new Error('Obsolete HDR file version!')\n    }\n\n    return data\n  }\n\n  /**\n   * @ignore\n   */\n  #parseNewRLE(stream: DataStream, header: Header): Float32Array {\n    const { width, height, colorCorr } = header\n    const tgt = new Float32Array(width * height * 4)\n    let i = 0\n    let { offset, data } = stream\n\n    for (let y = 0; y < height; ++y) {\n      if (data.getUint16(offset) !== 0x0202) throw new Error('Incorrect scanline start hash')\n\n      if (data.getUint16(offset + 2) !== width) throw new Error(\"Scanline doesn't match picture dimension!\")\n\n      offset += 4\n      const numComps = width * 4\n\n      // read individual RLE components\n      const comps = []\n      let x = 0\n\n      while (x < numComps) {\n        let value = data.getUint8(offset++)\n        if (value > 128) {\n          // RLE:\n          const len = value - 128\n          value = data.getUint8(offset++)\n          for (let rle = 0; rle < len; ++rle) {\n            comps[x++] = value\n          }\n        } else {\n          for (let n = 0; n < value; ++n) {\n            comps[x++] = data.getUint8(offset++)\n          }\n        }\n      }\n\n      for (x = 0; x < width; ++x) {\n        const r = comps[x]\n        const g = comps[x + width]\n        const b = comps[x + width * 2]\n        let e = comps[x + width * 3]\n\n        // NOT -128 but -136!!! This allows encoding smaller values rather than higher ones (as you'd expect).\n        e = e ? Math.pow(2.0, e - 136) : 0\n\n        tgt[i++] = r * e * colorCorr[0]\n        tgt[i++] = g * e * colorCorr[1]\n        tgt[i++] = b * e * colorCorr[2]\n        tgt[i++] = e\n      }\n    }\n\n    return tgt\n  }\n\n  /**\n   * @ignore\n   */\n  #swap(data: Float32Array, i1: number, i2: number) {\n    i1 *= 4\n    i2 *= 4\n\n    for (let i = 0; i < 4; ++i) {\n      const tmp = data[i1 + i]\n      data[i1 + i] = data[i2 + i]\n      data[i2 + i] = tmp\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  #flipX(data: Float32Array, header: Header) {\n    const { width, height } = header\n    const hw = width >> 1\n\n    for (let y = 0; y < height; ++y) {\n      // selects the current row\n      const b = y * width\n      for (let x = 0; x < hw; ++x) {\n        // add the mirrored columns\n        const i1 = b + x\n        const i2 = b + width - 1 - x\n        this.#swap(data, i1, i2)\n      }\n    }\n  }\n\n  /**\n   * @ignore\n   */\n  #flipY(data: Float32Array, header: Header) {\n    const { width, height } = header\n    const hh = height >> 1\n\n    for (let y = 0; y < hh; ++y) {\n      // selects the mirrored rows\n      const b1 = y * width\n      const b2 = (height - 1 - y) * width\n\n      for (let x = 0; x < width; ++x) {\n        // adds the column\n        this.#swap(data, b1 + x, b2 + x)\n      }\n    }\n  }\n\n  /**\n   * Convert an equirectangular {@link HDRImageData} to 6 {@link HDRImageData} cube map faces. Works but can display artifacts at the poles.\n   * @param parsedHdr - equirectangular {@link HDRImageData} to use.\n   * @returns - 6 {@link HDRImageData} cube map faces\n   */\n  equirectangularToCubeMap(parsedHdr: HDRImageData): HDRImageData[] {\n    const faceSize = Math.max(parsedHdr.width / 4, parsedHdr.height / 2)\n\n    const faces = {\n      posX: new Float32Array(faceSize * faceSize * 4),\n      negX: new Float32Array(faceSize * faceSize * 4),\n      posY: new Float32Array(faceSize * faceSize * 4),\n      negY: new Float32Array(faceSize * faceSize * 4),\n      posZ: new Float32Array(faceSize * faceSize * 4),\n      negZ: new Float32Array(faceSize * faceSize * 4),\n    }\n\n    function getPixel(u, v) {\n      const x = Math.floor(u * parsedHdr.width)\n      const y = Math.floor(v * parsedHdr.height)\n\n      const index = (y * parsedHdr.width + x) * 4\n      return [parsedHdr.data[index], parsedHdr.data[index + 1], parsedHdr.data[index + 2], parsedHdr.data[index + 3]]\n    }\n\n    function setPixel(face, x, y, pixel) {\n      const index = (y * faceSize + x) * 4\n      faces[face][index] = pixel[0]\n      faces[face][index + 1] = pixel[1]\n      faces[face][index + 2] = pixel[2]\n      faces[face][index + 3] = pixel[3]\n    }\n\n    function mapDirection(face, x, y) {\n      const a = (2 * (x + 0.5)) / faceSize - 1\n      const b = (2 * (y + 0.5)) / faceSize - 1\n      switch (face) {\n        case 'posX':\n          return [a, -1, -b]\n        case 'negX':\n          return [-a, 1, -b]\n        case 'posY':\n          return [-b, -a, 1]\n        case 'negY':\n          return [b, -a, -1]\n        case 'posZ':\n          return [-1, -a, -b]\n        case 'negZ':\n          return [1, a, -b]\n      }\n    }\n\n    function directionToUV(direction) {\n      const [x, y, z] = direction\n      const r = Math.sqrt(x * x + y * y)\n      //const theta = mod(Math.atan2(y, x), 2 * Math.PI)\n      const theta = Math.atan2(y, x)\n      const phi = Math.atan2(z, r)\n      const u = (theta + Math.PI) / (2 * Math.PI)\n      const v = (phi + Math.PI / 2) / Math.PI\n      return [u, v]\n    }\n\n    for (const face in faces) {\n      for (let y = 0; y < faceSize; y++) {\n        for (let x = 0; x < faceSize; x++) {\n          const direction = mapDirection(face, x, y)\n          const [u, v] = directionToUV(direction)\n          const pixel = getPixel(u, v)\n          setPixel(face, x, y, pixel)\n        }\n      }\n    }\n\n    const facesData = [faces.posX, faces.negX, faces.posY, faces.negY, faces.posZ, faces.negZ]\n\n    return facesData.map((faceData) => {\n      return {\n        data: faceData,\n        width: faceSize,\n        height: faceSize,\n        exposure: parsedHdr.exposure,\n        gamma: parsedHdr.gamma,\n      }\n    })\n  }\n}\n","import { WritableBufferBinding } from '../core/bindings/WritableBufferBinding'\nimport { Renderer } from '../core/renderers/utils'\n\n/**\n * Logs all the main commands executed during each {@link core/scenes/Scene.Scene#render | Scene render} calls.\n */\nexport const logSceneCommands = (renderer: Renderer) => {\n  const { scene } = renderer\n\n  if (!scene) return\n\n  const renderCommands = []\n\n  scene.computePassEntries.forEach((computePass) => {\n    renderCommands.push({\n      command: 'Render ComputePass',\n      content: computePass.options.label,\n    })\n\n    computePass.material.bindGroups.forEach((bindGroup) => {\n      bindGroup.bufferBindings.forEach((binding: WritableBufferBinding) => {\n        if (binding.shouldCopyResult) {\n          renderCommands.push({\n            command: `Copy buffer to buffer`,\n            source: `${binding.name} buffer`,\n            destination: `${binding.name} result buffer`,\n          })\n        }\n      })\n    })\n  })\n\n  for (const renderPassEntryType in scene.renderPassEntries) {\n    let passDrawnCount = 0\n\n    scene.renderPassEntries[renderPassEntryType].forEach((renderPassEntry) => {\n      // early bail if there's nothing to draw\n      if (!scene.getRenderPassEntryLength(renderPassEntry)) return\n\n      const destination = !renderPassEntry.renderPass.options.useColorAttachments\n        ? undefined\n        : renderPassEntry.renderPass.options.colorAttachments.length === 0 &&\n          renderPassEntry.renderPass.options.useDepth\n        ? `${renderPassEntry.renderTexture.options.label} depth pass`\n        : renderPassEntry.renderPass.options.colorAttachments.length > 1\n        ? `${renderPassEntry.renderTexture.options.label} multiple targets`\n        : renderPassEntry.renderTexture\n        ? `${renderPassEntry.renderTexture.options.label}`\n        : 'Context current texture'\n\n      let descriptor = renderPassEntry.renderPass.options.label\n\n      const operations = {\n        loadOp: renderPassEntry.renderPass.options.useColorAttachments\n          ? renderPassEntryType === 'screen' && passDrawnCount > 0\n            ? 'load'\n            : renderPassEntry.renderPass.options.loadOp\n          : undefined,\n        depthLoadOp: undefined,\n        sampleCount: renderPassEntry.renderPass.options.sampleCount,\n        ...(renderPassEntry.renderPass.options.qualityRatio !== 1 && {\n          qualityRatio: renderPassEntry.renderPass.options.qualityRatio,\n        }),\n      }\n\n      if (renderPassEntry.renderPass.options.useDepth) {\n        operations.depthLoadOp = renderPassEntry.renderPass.options.depthLoadOp\n      }\n\n      passDrawnCount++\n\n      if (renderPassEntry.element) {\n        if (\n          renderPassEntry.element.type === 'ShaderPass' &&\n          !(renderPassEntry.element.inputTarget || renderPassEntry.element.outputTarget)\n        ) {\n          renderCommands.push({\n            command: `Copy texture to texture`,\n            source: destination,\n            destination: `${renderPassEntry.element.options.label} renderTexture`,\n          })\n\n          operations.loadOp = 'clear'\n        }\n\n        descriptor += ' ' + JSON.stringify(operations)\n\n        renderCommands.push({\n          command: `Render ${renderPassEntry.element.type}`,\n          source: renderPassEntry.element.options.label,\n          destination,\n          descriptor,\n        })\n\n        if (\n          renderPassEntry.element.type === 'ShaderPass' &&\n          !renderPassEntry.element.outputTarget &&\n          renderPassEntry.element.options.copyOutputToRenderTexture\n        ) {\n          renderCommands.push({\n            command: `Copy texture to texture`,\n            source: destination,\n            destination: `${renderPassEntry.element.options.label} renderTexture`,\n          })\n        } else if (renderPassEntry.element.type === 'PingPongPlane') {\n          renderCommands.push({\n            command: `Copy texture to texture`,\n            source: destination,\n            destination: `${renderPassEntry.element.renderTexture.options.label}`,\n          })\n        }\n      } else if (renderPassEntry.stack) {\n        descriptor += ' ' + JSON.stringify(operations)\n\n        for (const stackType in renderPassEntry.stack) {\n          for (const objectType in renderPassEntry.stack[stackType]) {\n            if (renderPassEntry.stack[stackType][objectType].length) {\n              renderCommands.push({\n                command: `Render stack (${stackType} ${objectType} objects)`,\n                source: renderPassEntry.stack[stackType][objectType],\n                destination,\n                descriptor,\n              })\n            }\n          }\n        }\n      }\n    })\n  }\n\n  console.table(renderCommands)\n}\n"],"names":["generateUUID","c","r","toCamelCase","string","ltr","idx","toKebabCase","camelCase","warningThrown","throwWarning","warning","throwError","error","formatRendererError","renderer","rendererType","type","isRenderer","isCameraRenderer","isCurtainsRenderer","generateMips","sampler","module","pipelineByFormat","device","texture","pipeline","encoder","width","height","baseMipLevel","layer","bindGroup","renderPassDescriptor","pass","commandBuffer","bindingVisibilities","getBindingVisibility","visibilities","acc","v","bufferLayouts","getBufferLayout","bufferType","getBindingWGSLVarType","binding","getTextureBindingWGSLVarType","getBindGroupLayoutBindingType","getBindGroupLayoutTextureBindingType","getBindGroupLayoutTextureBindingCacheKey","Binding","label","name","bindingType","visibility","Vec2","x","y","value","changed","callback","vector","min","max","len","alpha","Quat","elements","axisOrder","array","quaternion","ax","ay","az","cosx","cosy","cosz","sinx","siny","sinz","axis","angle","halfAngle","s","matrix","te","m11","m12","m13","m21","m22","m23","m31","m32","m33","trace","Vec3","z","a","b","bx","by","bz","mArray","w","e","qx","qy","qz","qw","ix","iy","iz","iw","camera","slotsPerRow","bytesPerSlot","bytesPerRow","BufferElement","key","offset","position","overflow","p1","p2","nextPositionAvailable","alignment","size","align","startOffset","arrayBuffer","arrayView","i","j","result","BufferArrayElement","arrayLength","nextAlignment","valueIndex","viewLength","stride","BufferInterleavedArrayElement","subarray","startByteOffset","index","interleavedResult","resultOffset","bufferUsages","getBufferUsages","usages","Buffer","usage","mappedAtCreation","options","staticOptions","GPUBuffer","buffer","destroyPreviousBuffer","BufferBinding","useStruct","access","struct","params","defaultParams","bufferBindingCopy","bufferElement","newBufferElement","bindings","bindingKey","_onChangeCallback","orderedBindings","arrayBindings","bindingKeyA","bindingKeyB","isBindingAArray","isBindingBArray","bufferElementOptions","isArray","bufferLayout","interleavedBufferElements","tempBufferElements","totalStride","kebabCaseLabel","bufferElements","interleavedBufferStructDeclaration","varType","bindingName","inputs","bufferEl","bufferElementName","WritableBufferBinding","shouldCopyResult","BindGroup","uniforms","storages","inputKey","bindingParams","cachedBinding","BufferBindingConstructor","bufferBinding","bindGroupLayout","needBindGroupReset","needBindGroupLayoutReset","keepLayout","bindGroupCopy","bindingsRef","TextureBinding","format","viewDimension","multisampled","isNewFormat","isNewMultisampled","xAxis","yAxis","zAxis","Mat4","n11","n12","n13","n14","n21","n22","n23","n24","n31","n32","n33","n34","n41","n42","n43","n44","ae","be","a11","a12","a13","a14","a21","a22","a23","a24","a31","a32","a33","a34","a41","a42","a43","a44","b11","b12","b13","b14","b21","b22","b23","b24","b31","b32","b33","b34","b41","b42","b43","b44","t11","t12","t13","t14","det","detInv","t","x2","y2","z2","xx","xy","xz","yy","yz","zz","wx","wy","wz","scaleXSq","scaleYSq","scaleZSq","translation","scale","sx","sy","sz","origin","ox","oy","oz","out0","out1","out2","out4","out5","out6","out8","out9","out10","eye","target","up","left","right","bottom","top","near","far","fov","aspect","d","objectIndex","tempMatrix","Object3D","child","rotationMatrix","l","matrixName","textureUsages","getTextureUsages","getDefaultTextureUsage","textureType","getNumMipLevels","sizes","maxSize","_parentRatio","_sourceRatio","_coverScale","_rotationMatrix","defaultDOMTextureParams","DOMTexture","parameters","__privateAdd","defaultOptions","parentScale","parentWidth","parentHeight","parentRatio","sourceRatio","__privateGet","coverRatio","url","blob","source","cachedTexture","video","TextureBindGroup","textures","samplers","SamplerBinding","_fov","_near","_far","_pixelRatio","Camera","pixelRatio","onMatricesChanged","__privateSet","depth","cameraOffset","vFOV","Sampler","addressModeU","addressModeV","magFilter","minFilter","mipmapFilter","maxAnisotropy","compare","_autoResize","defaultTextureParams","Texture","colorSpace","data","Material","shaders","useAsyncPipeline","bindGroups","domTextures","texturesBindGroupLength","shaderType","inputsBindGroup","inputBinding","bG","clone","bufferBindingName","objectsUsingTexture","object","dstBuffer","ComputeMaterial","dispatchSize","commandEncoder","_autoRender","computePassIndex","ComputePass","renderOrder","autoRender","texturesOptions","computePass","computeParameters","material","domTexture","_autoRender$1","points","Box3","box","transformedBox","corners","cornersCount","defaultDOMFrustumMargins","DOMFrustum","boundingBox","modelViewProjectionMatrix","containerBoundingRect","DOMFrustumMargins","onReEnterView","onLeaveView","boundingRect","minX","maxX","minY","maxY","boundingSphere","centerX","centerY","Geometry","verticesOrder","topology","instancesCount","vertexBuffers","mapBuffersAtCreation","attributesBuffer","vertexBuffer","aIndex","bIndex","stepMode","attributes","bufferOffset","bufferSize","attribute","bufferFormat","verticesStride","attributesLength","attributeCount","accumulator","currentValue","hasPositionAttribute","currentIndex","attributeIndex","attributeValue","locationIndex","IndexedGeometry","PlaneGeometry","widthSegments","heightSegments","verticesCount","indexArray","uv","normal","positionOffset","normalOffset","uvOffset","compareRenderingOptions","newOptions","baseOptions","default_projected_vsWgsl","default_vsWgsl","default_fsWgsl","RenderMaterial","useProjection","transparent","depthWriteEnabled","depthCompare","depthFormat","cullMode","sampleCount","targets","renderingOptions","newProperties","oldRenderingOptions","oldProps","optKey","newProps","geometry","meshIndex","defaultMeshBaseParams","MeshBaseMixin","Base","_a","visible","outputTarget","meshParameters","addToRenderer","removeFromRenderer","m","oldRenderer","renderPass","colorAttachment","switchTransparency","CacheManager","planeGeometry","element","planeGeometryID","cacheManager","FullscreenPlane","mouseCoords","Mat3","me","tmp","ProjectedObject3D","default_normal_fsWgsl","defaultProjectedMeshParams","ProjectedMeshBaseMixin","frustumCulling","matricesUniforms","center","radius","maxWorldRadius","cMin","cMax","sMin","sMax","rMin","rMax","rectMin","rectMax","rect","sphereCenter","sphereRadius","Mesh","pipelineId","PipelineEntry","useAsync","code","shaderModule","compilationInfo","message","formattedMessage","newBindGroups","get_output_position","get_normals","get_uv_cover","get_vertex_to_uv_coords","ShaderChunks","ProjectedShaderChunks","RenderPipelineEntry","pipelineParams","cacheKey","chunk","groupsBindings","bindIndex","bindingIndex","groupFragment","groupFragmentIndex","groupBinding","isSameShader","vertexLocationIndex","ComputePipelineEntry","PipelineManager","shaderA","shaderB","pipelineEntry","rendering","sameCacheKey","sameVertexShader","sameFragmentShader","differentParams","existingPipelineEntry","ResizeManager","observedEntries","observedEntry","entry","shouldWatch","priority","resizeManager","DOMElement","onSizeChanged","onPositionChanged","notFoundEl","rect1","rect2","k","isSameRect","delta","camPosA","camPosB","posA","posB","Scene","renderPassEntry","cP","renderTarget","mesh","passEntry","stack","projectionStack","similarMeshes","shaderPass","onBeforeRenderPass","swapChainTexture","onAfterRenderPass","shaderPassEntry","isPostProA","renderOrderA","indexA","isPostProB","renderOrderB","indexB","pingPongPlane","entryType","meshes","meshA","meshB","radiusA","radiusB","renderPassEntryType","passDrawnCount","RenderPass","qualityRatio","useColorAttachments","renderToSwapChain","colorAttachments","useDepth","depthTexture","depthLoadOp","depthStoreOp","depthClearValue","defaultColorAttachment","viewTexture","resolveTarget","loadOp","colorAttachmentIndex","clearValue","renderTexture","_taskCount","TasksQueueManager","args","order","once","task","__privateWrapper","taskId","GPURenderer","deviceManager","container","autoResize","preferredFormat","alphaMode","isOffscreenCanvas","isContainerCanvas","rectBBox","renderingSize","dimension","sceneObject","srcBuffer","hasCommandEncoder","bindGroupLayoutDescriptor","bindGroupDescriptor","shaderModuleDescriptor","pipelineLayoutDescriptor","pipelineDescriptor","textureDescriptor","existingSampler","samplerOptions","gpuSampler","objects","GPUCameraRenderer","cameraParameters","GPUDeviceManager","production","adapterOptions","onError","onDeviceLost","info","adapter","infos","requiredFeatures","RenderTarget","renderPassParams","depthTextureToUse","default_pass_fsWGSl","ShaderPass","defaultBlend","inputTarget","sP","_DOMObjectWorldPosition","_DOMObjectWorldScale","_DOMObjectDepthScaleRatio","DOMObject3D","worldPosition","planeCenter","containerCenter","defaultDOMMeshParams","DOMMesh","autoloadSources","loaderSize","sourcesLoaded","images","videos","canvases","onSourceUploaded","image","canvas","devicePixelRatio","scaleBoundingRect","defaultPlaneParams","Plane","DOMMeshParams","materialParams","geometryID","worldMouse","rayOrigin","rayDirection","planeNormals","denominator","inverseViewMatrix","planeOrigin","rotatedOrigin","distance","GPUCurtainsRenderer","domObject","ScrollManager","scroll","onScroll","lastScroll","GPUCurtains","watchScroll","domMesh","_lastPosition","_isOrbiting","_element","OrbitControls","xDelta","yDelta","BoxGeometry","depthSegments","vertices","uvs","normals","indices","numberOfVertices","buildPlane","u","udir","vdir","gridX","gridY","segmentWidth","segmentHeight","widthHalf","heightHalf","depthHalf","gridX1","gridY1","vertexCounter","SphereGeometry","phiStart","phiLength","thetaStart","thetaLength","thetaEnd","grid","vertex","verticesRow","uOffset","PingPongPlane","pPP","GL","GLB_MAGIC","CHUNK_TYPE","DEFAULT_TRANSLATION","DEFAULT_ROTATION","DEFAULT_SCALE","absUriRegEx","dataUriRegEx","GLTFLoader","uri","baseUrl","response","json","binaryChunk","accessor","bufferView","node","pendingBuffers","pendingImages","headerView","magic","version","length","chunks","chunkOffset","chunkHeaderView","chunkLength","chunkType","jsonString","_primitiveInstances","_normalMatrix","_GLTFScenesManager","gltf","traverseChildren","scene","componentType","mode","wrap","descriptor","materialIndex","materialTextures","getUVAttributeName","samplerIndex","parent","childNodeIndex","childNode","primitive","meshDescriptor","instancesDescriptor","childScene","sceneDescriptor","nodeIndex","primitiveInstance","instances","nodes","geometryBBox","defaultAttributes","interleavedArray","interleavedBufferView","maxByteOffset","attribName","accessorIndex","constructor","byteStride","accessorByteOffset","attributeParams","accessorsBufferViews","val","mainBufferStrides","attrSize","attribOrder","attrName","geometryAttributes","isIndexedGeometry","GeometryConstructor","arrayOffset","materialUniformStruct","worldMatrices","normalMatrices","transformedBbox","patchMeshesParameters","_updateWorldMatrix","GLTFScenesManager","buildShaders","shaderParameters","baseColorTexture","normalTexture","emissiveTexture","occlusionTexture","metallicRoughnessTexture","facultativeAttributes","structAttributes","outputPositions","outputNormal","attr","outputAttributes","vertexOutputContent","outputNormalMap","tangentAttribute","useNormalMap","vertexOutput","fragmentInput","vs","initColor","returnColor","vertexColor","baseColor","normalMap","metallicRoughness","f0","emissiveOcclusion","initLightShading","defaultAdditionalHead","defaultPreliminaryColor","defaultAdditionalColor","defaultAmbientContribution","defaultLightContribution","fs","buildPBRShaders","pbrAdditionalFragmentHead","buildIBLShaders","iblParameters","lutTexture","envDiffuseTexture","envSpecularTexture","useIBLContribution","iblContributionHead","iblLightContribution","computeDiffuseFromSpecular","diffuseTexture","specularTexture","computeDiffuseShader","diffuseStorageTexture","computeDiffusePass","_decodeRGBE","decodeRGBE_fn","_parseHeader","parseHeader_fn","_parseSize","parseSize_fn","_readLine","readLine_fn","_parseData","parseData_fn","_parseNewRLE","parseNewRLE_fn","_swap","swap_fn","_flipX","flipX_fn","_flipY","flipY_fn","HDRLoader","__privateMethod","parsedHdr","faceSize","faces","getPixel","setPixel","face","pixel","mapDirection","directionToUV","direction","theta","phi","faceData","stream","header","line","parts","ch","str","hash","colorCorr","tgt","numComps","comps","rle","n","i1","i2","hw","hh","b1","b2","logSceneCommands","renderCommands","destination","operations","stackType","objectType"],"mappings":"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"}