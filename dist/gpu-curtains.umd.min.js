var ba=Object.defineProperty;var l=(v,W)=>ba(v,"name",{value:W,configurable:!0});(function(v,W){typeof exports=="object"&&typeof module<"u"?W(exports):typeof define=="function"&&define.amd?define(["exports"],W):(v=typeof globalThis<"u"?globalThis:v||self,W(v.window=v.window||{}))})(this,function(v){"use strict";const W=l(()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,n=>{const e=Math.random()*16|0;return(n==="x"?e:e&3|8).toString(16).toUpperCase()}),"generateUUID"),nt=l(n=>n.replace(/(?:^\w|[A-Z]|\b\w)/g,(e,t)=>t===0?e.toLowerCase():e.toUpperCase()).replace(/\s+/g,""),"toCamelCase"),ot=l(n=>{const e=nt(n);return e.charAt(0).toUpperCase()+e.slice(1)},"toKebabCase");let Gi=0;const _=l(n=>{Gi>100||(console.warn(Gi===100?"GPUCurtains: too many warnings thrown, stop logging.":n),Gi++)},"throwWarning"),ie=l(n=>{throw new Error(n)},"throwError"),Ai=l((n,e="GPURenderer",t)=>{const i=t?`Unable to create ${t} because the ${e} is not defined: ${n}`:`The ${e} is not defined: ${n}`;ie(i)},"formatRendererError"),I=l((n,e)=>(n=n&&n.renderer||n,n&&(n.type==="GPURenderer"||n.type==="GPUCameraRenderer"||n.type==="GPUCurtainsRenderer")||Ai(n,"GPURenderer",e),n),"isRenderer"),Oe=l((n,e)=>(n=n&&n.renderer||n,n&&(n.type==="GPUCameraRenderer"||n.type==="GPUCurtainsRenderer")||Ai(n,"GPUCameraRenderer",e),n),"isCameraRenderer"),Di=l((n,e)=>(n=n&&n.renderer||n,n&&n.type==="GPUCurtainsRenderer"||Ai(n,"GPUCurtainsRenderer",e),n),"isCurtainsRenderer"),_n=l(n=>n.constructor.name==="Mesh"||n.constructor.name==="DOMMesh"||n.constructor.name==="Plane"?n:!1,"isProjectedMesh"),_t=(()=>{let n,e;const t={};return l(function(s,r){e||(e=s.createShaderModule({label:"textured quad shaders for mip level generation",code:`
            struct VSOutput {
              @builtin(position) position: vec4f,
              @location(0) texcoord: vec2f,
            };

            @vertex fn vs(
              @builtin(vertex_index) vertexIndex : u32
            ) -> VSOutput {
              let pos = array(

                vec2f( 0.0,  0.0),  // center
                vec2f( 1.0,  0.0),  // right, center
                vec2f( 0.0,  1.0),  // center, top

                // 2st triangle
                vec2f( 0.0,  1.0),  // center, top
                vec2f( 1.0,  0.0),  // right, center
                vec2f( 1.0,  1.0),  // right, top
              );

              var vsOutput: VSOutput;
              let xy = pos[vertexIndex];
              vsOutput.position = vec4f(xy * 2.0 - 1.0, 0.0, 1.0);
              vsOutput.texcoord = vec2f(xy.x, 1.0 - xy.y);
              return vsOutput;
            }

            @group(0) @binding(0) var ourSampler: sampler;
            @group(0) @binding(1) var ourTexture: texture_2d<f32>;

            @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {
              return textureSample(ourTexture, ourSampler, fsInput.texcoord);
            }
          `}),n=s.createSampler({minFilter:"linear",magFilter:"linear"})),t[r.format]||(t[r.format]=s.createRenderPipeline({label:"Mip level generator pipeline",layout:"auto",vertex:{module:e},fragment:{module:e,targets:[{format:r.format}]}}));const o=t[r.format],a=s.createCommandEncoder({label:"Mip gen encoder"});let h=r.width,u=r.height,d=0;for(;h>1||u>1;){h=Math.max(1,h/2|0),u=Math.max(1,u/2|0);for(let f=0;f<r.depthOrArrayLayers;++f){const p=s.createBindGroup({layout:o.getBindGroupLayout(0),entries:[{binding:0,resource:n},{binding:1,resource:r.createView({dimension:"2d",baseMipLevel:d,mipLevelCount:1,baseArrayLayer:f,arrayLayerCount:1})}]}),g={label:"Mip generation render pass",colorAttachments:[{view:r.createView({dimension:"2d",baseMipLevel:d+1,mipLevelCount:1,baseArrayLayer:f,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},y=a.beginRenderPass(g);y.setPipeline(o),y.setBindGroup(0,p),y.draw(6),y.end()}++d}const c=a.finish();s.queue.submit([c])},"generateMips2")})(),Oi=typeof GPUShaderStage<"u"?GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},be=typeof GPUBufferUsage<"u"?GPUBufferUsage:{MAP_READ:1,MAP_WRITE:2,COPY_SRC:4,COPY_DST:8,INDEX:16,VERTEX:32,UNIFORM:64,STORAGE:128,INDIRECT:256,QUERY_RESOLVE:512},at=typeof GPUTextureUsage<"u"?GPUTextureUsage:{COPY_SRC:1,COPY_DST:2,TEXTURE_BINDING:4,STORAGE_BINDING:8,RENDER_ATTACHMENT:16},Gn=new Map([["vertex",Oi.VERTEX],["fragment",Oi.FRAGMENT],["compute",Oi.COMPUTE]]),An=l((n=[])=>n.reduce((e,t)=>e|Gn.get(t),0),"getBindingVisibility"),Dn={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array}},Ks=l(n=>Dn[n],"getBufferLayout"),Gt=l(n=>(()=>{switch(n.bindingType){case"storage":return`var<${n.bindingType}, ${n.options.access}>`;case"uniform":default:return"var<uniform>"}})(),"getBindingWGSLVarType"),On=l(n=>n.bindingType==="externalTexture"?`var ${n.name}: texture_external;`:n.bindingType==="storage"?`var ${n.name}: texture_storage_${n.options.viewDimension.replace("-","_")}<${n.options.format}, ${n.options.access}>;`:n.bindingType==="depth"?`var ${n.name}: texture_depth${n.options.multisampled?"_multisampled":""}_${n.options.viewDimension.replace("-","_")};`:`var ${n.name}: texture${n.options.multisampled?"_multisampled":""}_${n.options.viewDimension.replace("-","_")}<f32>;`,"getTextureBindingWGSLVarType"),Zs=l(n=>n.bindingType==="storage"&&n.options.access==="read_write"?"storage":n.bindingType==="storage"?"read-only-storage":"uniform","getBindGroupLayoutBindingType"),Fn=l(n=>(()=>{switch(n.bindingType){case"externalTexture":return{externalTexture:{}};case"storage":return{storageTexture:{format:n.options.format,viewDimension:n.options.viewDimension}};case"texture":return{texture:{multisampled:n.options.multisampled,viewDimension:n.options.viewDimension,sampleType:n.options.multisampled?"unfilterable-float":"float"}};case"depth":return{texture:{multisampled:n.options.multisampled,viewDimension:n.options.viewDimension,sampleType:"depth"}};default:return null}})(),"getBindGroupLayoutTextureBindingType"),$n=l(n=>(()=>{switch(n.bindingType){case"externalTexture":return`externalTexture,${n.visibility},`;case"storage":return`storageTexture,${n.options.format},${n.options.viewDimension},${n.visibility},`;case"texture":return`texture,${n.options.multisampled},${n.options.viewDimension},${n.options.multisampled?"unfilterable-float":"float"},${n.visibility},`;case"depth":return`depthTexture,${n.options.format},${n.options.viewDimension},${n.visibility},`;default:return`${n.visibility},`}})(),"getBindGroupLayoutTextureBindingCacheKey");class At{static{l(this,"Binding")}constructor({label:e="Uniform",name:t="uniform",bindingType:i="uniform",visibility:s=["vertex","fragment","compute"]}){this.label=e,this.name=nt(t),this.bindingType=i,this.visibility=An(s),this.options={label:e,name:t,bindingType:i,visibility:s},this.shouldResetBindGroup=!1,this.shouldResetBindGroupLayout=!1,this.cacheKey=`${i},${this.visibility},`}}class G{static{l(this,"Vec2")}constructor(e=0,t=e){this.type="Vec2",this._x=e,this._y=t}get x(){return this._x}set x(e){const t=e!==this._x;this._x=e,t&&this._onChangeCallback&&this._onChangeCallback()}get y(){return this._y}set y(e){const t=e!==this._y;this._y=e,t&&this._onChangeCallback&&this._onChangeCallback()}onChange(e){return e&&(this._onChangeCallback=e),this}set(e=0,t=e){return this.x=e,this.y=t,this}add(e=new G){return this.x+=e.x,this.y+=e.y,this}addScalar(e=0){return this.x+=e,this.y+=e,this}sub(e=new G){return this.x-=e.x,this.y-=e.y,this}subScalar(e=0){return this.x-=e,this.y-=e,this}multiply(e=new G(1)){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e=1){return this.x*=e,this.y*=e,this}divide(e=new G(1)){return this.x/=e.x,this.y/=e.y,this}divideScalar(e=1){return this.x/=e,this.y/=e,this}copy(e=new G){return this.x=e.x,this.y=e.y,this}clone(){return new G(this.x,this.y)}max(e=new G){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}min(e=new G){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}clamp(e=new G,t=new G){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}equals(e=new G){return this.x===e.x&&this.y===e.y}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.lengthSq())}normalize(){let e=this.x*this.x+this.y*this.y;return e>0&&(e=1/Math.sqrt(e)),this.x*=e,this.y*=e,this}dot(e=new G){return this.x*e.x+this.y*e.y}lerp(e=new G,t=1){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}}class pe{static{l(this,"Quat")}constructor(e=new Float32Array([0,0,0,1]),t="XYZ"){this.type="Quat",this.elements=e,this.axisOrder=t}setFromArray(e=new Float32Array([0,0,0,1])){return this.elements[0]=e[0],this.elements[1]=e[1],this.elements[2]=e[2],this.elements[3]=e[3],this}setAxisOrder(e="XYZ"){switch(e=e.toUpperCase(),e){case"XYZ":case"YXZ":case"ZXY":case"ZYX":case"YZX":case"XZY":this.axisOrder=e;break;default:this.axisOrder="XYZ"}return this}copy(e=new pe){return this.elements=e.elements,this.axisOrder=e.axisOrder,this}clone(){return new pe().copy(this)}equals(e=new pe){return this.elements[0]===e.elements[0]&&this.elements[1]===e.elements[1]&&this.elements[2]===e.elements[2]&&this.elements[3]===e.elements[3]&&this.axisOrder===e.axisOrder}setFromVec3(e){const t=e.x*.5,i=e.y*.5,s=e.z*.5,r=Math.cos(t),o=Math.cos(i),a=Math.cos(s),h=Math.sin(t),u=Math.sin(i),d=Math.sin(s);return this.axisOrder==="XYZ"?(this.elements[0]=h*o*a+r*u*d,this.elements[1]=r*u*a-h*o*d,this.elements[2]=r*o*d+h*u*a,this.elements[3]=r*o*a-h*u*d):this.axisOrder==="YXZ"?(this.elements[0]=h*o*a+r*u*d,this.elements[1]=r*u*a-h*o*d,this.elements[2]=r*o*d-h*u*a,this.elements[3]=r*o*a+h*u*d):this.axisOrder==="ZXY"?(this.elements[0]=h*o*a-r*u*d,this.elements[1]=r*u*a+h*o*d,this.elements[2]=r*o*d+h*u*a,this.elements[3]=r*o*a-h*u*d):this.axisOrder==="ZYX"?(this.elements[0]=h*o*a-r*u*d,this.elements[1]=r*u*a+h*o*d,this.elements[2]=r*o*d-h*u*a,this.elements[3]=r*o*a+h*u*d):this.axisOrder==="YZX"?(this.elements[0]=h*o*a+r*u*d,this.elements[1]=r*u*a+h*o*d,this.elements[2]=r*o*d-h*u*a,this.elements[3]=r*o*a-h*u*d):this.axisOrder==="XZY"&&(this.elements[0]=h*o*a-r*u*d,this.elements[1]=r*u*a-h*o*d,this.elements[2]=r*o*d+h*u*a,this.elements[3]=r*o*a+h*u*d),this}setFromAxisAngle(e,t=0){const i=t/2,s=Math.sin(i);return this.elements[0]=e.x*s,this.elements[1]=e.y*s,this.elements[2]=e.z*s,this.elements[3]=Math.cos(i),this}setFromRotationMatrix(e){const t=e.elements,i=t[0],s=t[4],r=t[8],o=t[1],a=t[5],h=t[9],u=t[2],d=t[6],c=t[10],f=i+a+c;if(f>0){const p=.5/Math.sqrt(f+1);this.elements[3]=.25/p,this.elements[0]=(d-h)*p,this.elements[1]=(r-u)*p,this.elements[2]=(o-s)*p}else if(i>a&&i>c){const p=2*Math.sqrt(1+i-a-c);this.elements[3]=(d-h)/p,this.elements[0]=.25*p,this.elements[1]=(s+o)/p,this.elements[2]=(r+u)/p}else if(a>c){const p=2*Math.sqrt(1+a-i-c);this.elements[3]=(r-u)/p,this.elements[0]=(s+o)/p,this.elements[1]=.25*p,this.elements[2]=(h+d)/p}else{const p=2*Math.sqrt(1+c-i-a);this.elements[3]=(o-s)/p,this.elements[0]=(r+u)/p,this.elements[1]=(h+d)/p,this.elements[2]=.25*p}return this}}class m{static{l(this,"Vec3")}constructor(e=0,t=e,i=e){this.type="Vec3",this._x=e,this._y=t,this._z=i}get x(){return this._x}set x(e){const t=e!==this._x;this._x=e,t&&this._onChangeCallback&&this._onChangeCallback()}get y(){return this._y}set y(e){const t=e!==this._y;this._y=e,t&&this._onChangeCallback&&this._onChangeCallback()}get z(){return this._z}set z(e){const t=e!==this._z;this._z=e,t&&this._onChangeCallback&&this._onChangeCallback()}onChange(e){return e&&(this._onChangeCallback=e),this}set(e=0,t=e,i=e){return this.x=e,this.y=t,this.z=i,this}add(e=new m){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e=0){return this.x+=e,this.y+=e,this.z+=e,this}sub(e=new m){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e=0){return this.x-=e,this.y-=e,this.z-=e,this}multiply(e=new m(1)){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e=1){return this.x*=e,this.y*=e,this.z*=e,this}divide(e=new m(1)){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e=1){return this.x/=e,this.y/=e,this.z/=e,this}copy(e=new m){return this.x=e.x,this.y=e.y,this.z=e.z,this}clone(){return new m(this.x,this.y,this.z)}max(e=new m){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}min(e=new m){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}clamp(e=new m,t=new m){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}equals(e=new m){return this.x===e.x&&this.y===e.y&&this.z===e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.lengthSq())}distance(e=new m){return Math.hypot(e.x-this.x,e.y-this.y,e.z-this.z)}normalize(){let e=this.lengthSq();return e>0&&(e=1/Math.sqrt(e)),this.x*=e,this.y*=e,this.z*=e,this}dot(e=new m){return this.x*e.x+this.y*e.y+this.z*e.z}cross(e=new m){return this.crossVectors(this,e)}crossVectors(e=new m,t=new m){const i=e.x,s=e.y,r=e.z,o=t.x,a=t.y,h=t.z;return this.x=s*h-r*a,this.y=r*o-i*h,this.z=i*a-s*o,this}lerp(e=new m,t=1){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}applyMat4(e){const t=this._x,i=this._y,s=this._z,r=e.elements;let o=r[3]*t+r[7]*i+r[11]*s+r[15];return o=o||1,this.x=(r[0]*t+r[4]*i+r[8]*s+r[12])/o,this.y=(r[1]*t+r[5]*i+r[9]*s+r[13])/o,this.z=(r[2]*t+r[6]*i+r[10]*s+r[14])/o,this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}applyQuat(e=new pe){const t=this.x,i=this.y,s=this.z,r=e.elements[0],o=e.elements[1],a=e.elements[2],h=e.elements[3],u=h*t+o*s-a*i,d=h*i+a*t-r*s,c=h*s+r*i-o*t,f=-r*t-o*i-a*s;return this.x=u*h+f*-r+d*-a-c*-o,this.y=d*h+f*-o+c*-r-u*-a,this.z=c*h+f*-a+u*-o-d*-r,this}applyAxisAngle(e=new m,t=0,i=new pe){return this.applyQuat(i.setFromAxisAngle(e,t))}transformDirection(e){const t=this.x,i=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[4]*i+r[8]*s,this.y=r[1]*t+r[5]*i+r[9]*s,this.z=r[2]*t+r[6]*i+r[10]*s,this.normalize()}project(e){return this.applyMat4(e.viewMatrix).applyMat4(e.projectionMatrix),this}unproject(e){return this.applyMat4(e.projectionMatrix.getInverse()).applyMat4(e.modelMatrix),this}}const Un=4,Dt=4,J=Un*Dt;class fe{static{l(this,"BufferElement")}constructor({name:e,key:t,type:i="f32"}){this.name=e,this.key=t,this.type=i,this.baseType=fe.getBaseType(this.type),this.bufferLayout=Ks(this.baseType),this.alignment={start:{row:0,byte:0},end:{row:0,byte:0}},this.setValue=null}static getType(e){return e.replace("array","").replace("<","").replace(">","")}static getBaseType(e){return fe.getType(e.replace("atomic","").replace("array","").replaceAll("<","").replaceAll(">",""))}get rowCount(){return this.alignment.end.row-this.alignment.start.row+1}get byteCount(){return Math.abs(this.endOffset-this.startOffset)+1}get paddedByteCount(){return(this.alignment.end.row+1)*J}get startOffset(){return this.getByteCountAtPosition(this.alignment.start)}get startOffsetToIndex(){return this.startOffset/Dt}get endOffset(){return this.getByteCountAtPosition(this.alignment.end)}get endOffsetToIndex(){return Math.floor(this.endOffset/Dt)}getPositionAtOffset(e=0){return{row:Math.floor(e/J),byte:e%J}}getByteCountAtPosition(e={row:0,byte:0}){return e.row*J+e.byte}applyOverflowToPosition(e={row:0,byte:0}){if(e.byte>J-1){const t=e.byte%J;e.row+=Math.floor(e.byte/J),e.byte=t}return e}getByteCountBetweenPositions(e={row:0,byte:0},t={row:0,byte:0}){return Math.abs(this.getByteCountAtPosition(t)-this.getByteCountAtPosition(e))}getElementAlignment(e={row:0,byte:0}){const t={start:e,end:e},{size:i,align:s}=this.bufferLayout;return e.byte%s!==0&&(e.byte+=e.byte%s),(i<=J&&e.byte+i>J||i>J&&(e.byte>J||e.byte>0))&&(e.row+=1,e.byte=0),t.end={row:e.row+Math.ceil(i/J)-1,byte:e.byte+(i%J===0?J-1:i%J-1)},t.end=this.applyOverflowToPosition(t.end),t}setAlignmentFromPosition(e={row:0,byte:0}){this.alignment=this.getElementAlignment(e)}setAlignment(e=0){this.setAlignmentFromPosition(this.getPositionAtOffset(e))}setView(e,t){this.view=new this.bufferLayout.View(e,this.startOffset,this.byteCount/this.bufferLayout.View.BYTES_PER_ELEMENT)}setValueFromNumber(e){this.view[0]=e}setValueFromVec2(e){this.view[0]=e.x??e[0]??0,this.view[1]=e.y??e[1]??0}setValueFromVec3(e){this.view[0]=e.x??e[0]??0,this.view[1]=e.y??e[1]??0,this.view[2]=e.z??e[2]??0}setValueFromMat4OrQuat(e){this.view.set(e.elements)}setValueFromMat3(e){this.setValueFromArrayWithPad(e.elements)}setValueFromArray(e){this.view.set(e)}setValueFromArrayWithPad(e){for(let t=0,i=0;t<this.view.length;t+=this.bufferLayout.pad[0]+this.bufferLayout.pad[1],i++)for(let s=0;s<this.bufferLayout.pad[0];s++)this.view[t+s]=e[t+s-i]}update(e){this.setValue||(this.setValue=(t=>{if(typeof t=="number")return this.setValueFromNumber;if(this.type==="vec2f")return this.setValueFromVec2;if(this.type==="vec3f")return this.setValueFromVec3;if(this.type==="mat3x3f")return t.elements?this.setValueFromMat3:this.setValueFromArrayWithPad;if(t.elements)return this.setValueFromMat4OrQuat;if(ArrayBuffer.isView(t)||Array.isArray(t))return this.bufferLayout.pad?this.setValueFromArrayWithPad:this.setValueFromArray;_(`${this.constructor.name}: value passed to ${this.name} cannot be used: ${t}`)})(e)),this.setValue(e)}extractDataFromBufferResult(e){return e.slice(this.startOffsetToIndex,this.endOffsetToIndex)}}class Js extends fe{static{l(this,"BufferArrayElement")}constructor({name:e,key:t,type:i="f32",arrayLength:s=1}){super({name:e,key:t,type:i}),this.arrayLength=s,this.numElements=Math.ceil(this.arrayLength/this.bufferLayout.numElements)}get arrayStrideToIndex(){return this.arrayStride/Dt}setAlignment(e=0){super.setAlignment(e);const t=this.getElementAlignment(this.getPositionAtOffset(this.endOffset+1));this.arrayStride=this.getByteCountBetweenPositions(this.alignment.end,t.end),this.alignment.end=this.getPositionAtOffset(this.endOffset+this.arrayStride*(this.numElements-1))}setValueFromArray(e){let t=0;const i=this.byteCount/this.bufferLayout.View.BYTES_PER_ELEMENT,s=Math.ceil(i/this.numElements);for(let r=0;r<this.numElements;r++)for(let o=0;o<this.bufferLayout.numElements;o++)this.view[o+r*s]=e[t],t++}}class Fi extends Js{static{l(this,"BufferInterleavedArrayElement")}constructor({name:e,key:t,type:i="f32",arrayLength:s=1}){super({name:e,key:t,type:i,arrayLength:s}),this.arrayStride=1,this.arrayLength=s,this.numElements=Math.ceil(this.arrayLength/this.bufferLayout.numElements)}get byteCount(){return this.bufferLayout.size*this.numElements}setAlignment(e=0,t=0){this.alignment=this.getElementAlignment(this.getPositionAtOffset(e)),this.arrayStride=t,this.alignment.end=this.getPositionAtOffset(this.endOffset+t*(this.numElements-1))}setView(e,t){this.view=new this.bufferLayout.View(this.bufferLayout.numElements*this.numElements),this.viewSetFunction=(i=>{switch(this.bufferLayout.View){case Int32Array:return i.setInt32.bind(i);case Uint16Array:return i.setUint16.bind(i);case Uint32Array:return i.setUint32.bind(i);case Float32Array:default:return i.setFloat32.bind(i)}})(t)}update(e){super.update(e);for(let t=0;t<this.numElements;t++){const i=this.view.subarray(t*this.bufferLayout.numElements,t*this.bufferLayout.numElements+this.bufferLayout.numElements),s=this.startOffset+t*this.arrayStride;i.forEach((r,o)=>{this.viewSetFunction(s+o*this.bufferLayout.View.BYTES_PER_ELEMENT,r,!0)})}}extractDataFromBufferResult(e){const t=new Float32Array(this.arrayLength);for(let i=0;i<this.numElements;i++){const s=this.startOffsetToIndex+i*this.arrayStrideToIndex;for(let r=0;r<this.bufferLayout.numElements;r++)t[i*this.bufferLayout.numElements+r]=e[s+r]}return t}}const kn=new Map([["copySrc",be.COPY_SRC],["copyDst",be.COPY_DST],["index",be.INDEX],["indirect",be.INDIRECT],["mapRead",be.MAP_READ],["mapWrite",be.MAP_WRITE],["queryResolve",be.QUERY_RESOLVE],["storage",be.STORAGE],["uniform",be.UNIFORM],["vertex",be.VERTEX]]),Qs=l((n=[])=>n.reduce((e,t)=>e|kn.get(t),0),"getBufferUsages");class Fe{static{l(this,"Buffer")}constructor({label:e="Buffer",size:t=0,usage:i=["copySrc","copyDst"],mappedAtCreation:s=!1}={}){this.type="Buffer",this.reset(),this.uuid=W(),this.consumers=new Set,this.options={label:e,size:t,usage:Qs(i),mappedAtCreation:s}}reset(){this.GPUBuffer=null}set size(e){this.options.size=e}createBuffer(e,t={}){const{usage:i,...s}=t;this.options={...this.options,...s,...i!==void 0&&{usage:Qs(i)}},this.setBuffer(e.createBuffer(this))}setBuffer(e){this.GPUBuffer=e}copy(e,t=!1){t&&this.destroy(),this.options=e.options,this.GPUBuffer=e.GPUBuffer,this.consumers=new Set([...this.consumers,...e.consumers])}async mapBufferAsync(){if(!this.GPUBuffer||this.GPUBuffer.mapState!=="unmapped")return new Float32Array(0);await this.GPUBuffer.mapAsync(GPUMapMode.READ);const e=new Float32Array(this.GPUBuffer.getMappedRange().slice(0));return this.GPUBuffer.unmap(),e}destroy(){this.GPUBuffer?.destroy(),this.reset(),this.consumers.clear()}}var er=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$l"),In=l((n,e,t)=>(er(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$i"),Vn=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$l"),Nn=l((n,e,t,i)=>(er(n,e,"write to private field"),e.set(n,t),t),"__privateSet$h"),Ot;const Wn=class _i extends At{static{l(this,"_BufferBinding")}constructor({label:e="Uniform",name:t="uniform",bindingType:i,visibility:s,useStruct:r=!0,access:o="read",usage:a=[],struct:h={},childrenBindings:u=[],buffer:d=null,parent:c=null,minOffset:f=256,offset:p=0}){i=i??"uniform",super({label:e,name:t,bindingType:i,visibility:s}),Vn(this,Ot,void 0),this.options={...this.options,useStruct:r,access:o,usage:a,struct:h,childrenBindings:u,buffer:d,parent:c,minOffset:f,offset:p},this.cacheKey+=`${r},${o},`,this.arrayBufferSize=0,this.shouldUpdate=!1,this.useStruct=r,this.bufferElements=[],this.inputs={},this.buffer=this.options.buffer??new Fe,Object.keys(h).length&&(this.setBindings(h),this.setInputsAlignment()),this.setChildrenBindings(u),(Object.keys(h).length||this.childrenBindings.length)&&(this.setBufferAttributes(),this.setWGSLFragment()),this.parent=c}static cloneStruct(e){return Object.keys(e).reduce((t,i)=>{const s=e[i];let r;return Array.isArray(s.value)||ArrayBuffer.isView(s.value)?r=new s.value.constructor(s.value.length):typeof s.value=="number"?r=0:r=new s.value.constructor,{...t,[i]:{type:s.type,value:r}}},{})}get parent(){return In(this,Ot)}set parent(e){if(e){this.parentView=new DataView(e.arrayBuffer,this.offset,this.getMinOffsetSize(this.arrayBufferSize));const t=l(s=>[...l(o=>o.bufferElements,"getBufferElements")(s),s.childrenBindings.map(o=>t(o)).flat()].flat(),"getAllBufferElements"),i=t(this);this.parentViewSetBufferEls=i.map(s=>{switch(s.bufferLayout.View){case Int32Array:return{bufferElement:s,viewSetFunction:this.parentView.setInt32.bind(this.parentView)};case Uint16Array:return{bufferElement:s,viewSetFunction:this.parentView.setUint16.bind(this.parentView)};case Uint32Array:return{bufferElement:s,viewSetFunction:this.parentView.setUint32.bind(this.parentView)};case Float32Array:default:return{bufferElement:s,viewSetFunction:this.parentView.setFloat32.bind(this.parentView)}}}),!this.parent&&this.buffer.GPUBuffer&&!this.options.buffer&&this.buffer.destroy()}else this.parentView=null,this.parentViewSetBufferEls=null;Nn(this,Ot,e)}getMinOffsetSize(e){return Math.ceil(e/this.options.minOffset)*this.options.minOffset}get offset(){return this.getMinOffsetSize(this.options.offset*this.getMinOffsetSize(this.arrayBufferSize))}get resourceLayout(){return{buffer:{type:Zs(this)},...this.parent&&{offset:this.offset,size:this.arrayBufferSize}}}get resourceLayoutCacheKey(){return`buffer,${Zs(this)},${this.visibility},`}get resource(){return{buffer:this.parent?this.parent.buffer.GPUBuffer:this.buffer.GPUBuffer,...this.parent&&{offset:this.offset,size:this.arrayBufferSize}}}clone(e={}){let{struct:t,childrenBindings:i,parent:s,...r}=e;const{label:o,name:a,bindingType:h,visibility:u,useStruct:d,access:c,usage:f}=this.options;r={label:o,name:a,bindingType:h,visibility:u,useStruct:d,access:c,usage:f,...r};const p=new this.constructor(r);return t=t||_i.cloneStruct(this.options.struct),p.options.struct=t,p.setBindings(t),p.arrayBufferSize=this.arrayBufferSize,p.arrayBuffer=new ArrayBuffer(p.arrayBufferSize),p.arrayView=new DataView(p.arrayBuffer,0,p.arrayBuffer.byteLength),p.options.buffer||(p.buffer.size=p.arrayBuffer.byteLength),this.bufferElements.forEach(g=>{const y=new g.constructor({name:g.name,key:g.key,type:g.type,...g.arrayLength&&{arrayLength:g.arrayLength}});y.alignment=JSON.parse(JSON.stringify(g.alignment)),g.arrayStride&&(y.arrayStride=g.arrayStride),y.setView(p.arrayBuffer,p.arrayView),p.bufferElements.push(y)}),this.options.childrenBindings&&(p.options.childrenBindings=this.options.childrenBindings,p.options.childrenBindings.forEach(g=>{const y=g.count?Math.max(1,g.count):1;p.cacheKey+=`child(count:${y}):${g.binding.cacheKey}`}),p.options.childrenBindings.forEach(g=>{p.childrenBindings=[...p.childrenBindings,Array.from(Array(Math.max(1,g.count||1)).keys()).map(y=>g.binding.clone({...g.binding.options,struct:_i.cloneStruct(g.binding.options.struct)}))].flat()}),p.childrenBindings.forEach((g,y)=>{let x=this.arrayView.byteLength;for(let b=0;b<y;b++)x+=this.childrenBindings[b].arrayBuffer.byteLength;g.bufferElements.forEach((b,C)=>{b.alignment.start.row=this.childrenBindings[y].bufferElements[C].alignment.start.row,b.alignment.end.row=this.childrenBindings[y].bufferElements[C].alignment.end.row}),g.arrayView=new DataView(p.arrayBuffer,x,g.arrayBuffer.byteLength);for(const b of g.bufferElements)b.setView(p.arrayBuffer,g.arrayView)})),p.setWGSLFragment(),s&&(p.parent=s),p.shouldUpdate=p.arrayBufferSize>0,p}setBindings(e){for(const t of Object.keys(e)){const i={};for(const s in e[t])s!=="value"&&(i[s]=e[t][s]);if(i.name=t,Object.defineProperty(i,"value",{get(){return i._value},set(s){i._value=s,i.shouldUpdate=!0}}),i.value=e[t].value,i.value instanceof G||i.value instanceof m){const s=i.value._onChangeCallback;i.value._onChangeCallback=()=>{s&&s(),i.shouldUpdate=!0}}this.inputs[t]=i,this.cacheKey+=`${t},${e[t].type},`}}setChildrenBindings(e){if(this.childrenBindings=[],e&&e.length){const t=[];e.sort((i,s)=>{const r=i.count?Math.max(i.count):i.forceArray?1:0,o=s.count?Math.max(s.count):s.forceArray?1:0;return r-o}).forEach(i=>{(i.count&&i.count>1||i.forceArray)&&t.push(i.binding)}),t.length>1&&(t.shift(),_(`BufferBinding: "${this.label}" contains multiple children bindings arrays. These children bindings cannot be added to the BufferBinding: "${t.map(i=>i.label).join(", ")}"`),t.forEach(i=>{e=e.filter(s=>s.binding.name!==i.name)})),this.options.childrenBindings=e,e.forEach(i=>{const s=i.count?Math.max(1,i.count):1;this.cacheKey+=`child(count:${s}):${i.binding.cacheKey}`,this.childrenBindings=[...this.childrenBindings,Array.from(Array(s).keys()).map(r=>i.binding.clone({...i.binding.options,struct:_i.cloneStruct(i.binding.options.struct)}))].flat()})}}setInputsAlignment(){let e=Object.keys(this.inputs);const t=e.filter(i=>this.inputs[i].type.includes("array"));t.length&&(e.sort((i,s)=>{const r=Math.min(0,this.inputs[i].type.indexOf("array")),o=Math.min(0,this.inputs[s].type.indexOf("array"));return r-o}),t.length>1&&(e=e.filter(i=>!t.includes(i))));for(const i of e){const s=this.inputs[i],r={name:nt(s.name??i),key:i,type:s.type},o=s.type.includes("array")&&(Array.isArray(s.value)||ArrayBuffer.isView(s.value));this.bufferElements.push(o?new Js({...r,arrayLength:s.value.length}):new fe(r))}if(this.bufferElements.forEach((i,s)=>{const r=s===0?0:this.bufferElements[s-1].endOffset+1;i.setAlignment(r)}),t.length>1)if(t.map(r=>{const o=this.inputs[r],a=Ks(fe.getBaseType(o.type));return Math.ceil(o.value.length/a.numElements)}).every((r,o,a)=>r===a[0])){const r=t.map(h=>{const u=this.inputs[h];return new Fi({name:nt(u.name??h),key:h,type:u.type,arrayLength:u.value.length})}),o=t.map(h=>{const u=this.inputs[h];return new fe({name:nt(u.name??h),key:h,type:fe.getType(u.type)})});o.forEach((h,u)=>{u===0?this.bufferElements.length?h.setAlignmentFromPosition({row:this.bufferElements[this.bufferElements.length-1].alignment.end.row+1,byte:0}):h.setAlignment(0):h.setAlignment(o[u-1].endOffset+1)});const a=o[o.length-1].endOffset+1-o[0].startOffset;r.forEach((h,u)=>{h.setAlignment(o[u].startOffset,Math.ceil(a/J)*J)}),this.bufferElements=[...this.bufferElements,...r]}else _(`BufferBinding: "${this.label}" contains multiple array inputs that should use an interleaved array, but their sizes do not match. These inputs cannot be added to the BufferBinding: "${t.join(", ")}"`)}setBufferAttributes(){const e=this.bufferElements.length?this.bufferElements[this.bufferElements.length-1].paddedByteCount:0;this.arrayBufferSize=e,this.childrenBindings.forEach(t=>{this.arrayBufferSize+=t.arrayBufferSize}),this.arrayBuffer=new ArrayBuffer(this.arrayBufferSize),this.arrayView=new DataView(this.arrayBuffer,0,e),this.childrenBindings.forEach((t,i)=>{let s=e;for(let a=0;a<i;a++)s+=this.childrenBindings[a].arrayBuffer.byteLength;const r=this.bufferElements.length?this.bufferElements[this.bufferElements.length-1].alignment.end.row+1:0,o=i>0&&this.childrenBindings[i-1].bufferElements.length?this.childrenBindings[i-1].bufferElements[this.childrenBindings[i-1].bufferElements.length-1].alignment.end.row+1:0;t.bufferElements.forEach(a=>{const h=i===0?r+o:o;a.alignment.start.row+=h,a.alignment.end.row+=h}),t.arrayView=new DataView(this.arrayBuffer,s,t.arrayBuffer.byteLength);for(const a of t.bufferElements)a.setView(this.arrayBuffer,t.arrayView)}),this.options.buffer||(this.buffer.size=this.arrayBuffer.byteLength);for(const t of this.bufferElements)t.setView(this.arrayBuffer,this.arrayView);this.shouldUpdate=this.arrayBufferSize>0}setWGSLFragment(){if(!this.bufferElements.length&&!this.childrenBindings.length)return;const e=ot(this.label);if(this.useStruct){const t={};t[e]={};const i=this.bufferElements.filter(o=>!(o instanceof Fi)),s=this.bufferElements.filter(o=>o instanceof Fi);if(s.length){const o=this.bindingType==="uniform"?`, ${s[0].numElements}`:"";if(i.length){t[`${e}Element`]={},s.forEach(u=>{t[`${e}Element`][u.name]=fe.getType(u.type)}),i.forEach(u=>{t[e][u.name]=u.type});const a=this.bufferElements.find(u=>u.name==="elements")?`${this.name}Elements`:"elements";t[e][a]=`array<${e}Element${o}>`;const h=Gt(this);this.wgslGroupFragment=[`${h} ${this.name}: ${e};`]}else{this.bufferElements.forEach(h=>{t[e][h.name]=fe.getType(h.type)});const a=Gt(this);this.wgslGroupFragment=[`${a} ${this.name}: array<${e}${o}>;`]}}else{i.forEach(a=>{const h=this.bindingType==="uniform"&&"numElements"in a?`array<${fe.getType(a.type)}, ${a.numElements}>`:a.type;t[e][a.name]=h});const o=Gt(this);this.wgslGroupFragment=[`${o} ${this.name}: ${e};`]}this.childrenBindings.length&&this.options.childrenBindings.forEach(o=>{t[e][o.binding.name]=o.count&&o.count>1||o.forceArray?`array<${ot(o.binding.label)}>`:ot(o.binding.label)});const r=this.childrenBindings.length?this.options.childrenBindings.map(o=>o.binding.wgslStructFragment).join(`

`)+`

`:"";this.wgslStructFragment=r+Object.keys(t).reverse().map(o=>`struct ${o} {
	${Object.keys(t[o]).map(a=>`${a}: ${t[o][a]}`).join(`,
	`)}
};`).join(`

`)}else this.wgslStructFragment="",this.wgslGroupFragment=this.bufferElements.map(t=>`${Gt(this)} ${t.name}: ${t.type};`)}shouldUpdateBinding(e=""){this.inputs[e]&&(this.inputs[e].shouldUpdate=!0)}update(){if(this.options.buffer){this.shouldUpdate=!1;return}const e=Object.values(this.inputs);for(const t of e){const i=this.bufferElements.find(s=>s.key===t.name);t.shouldUpdate&&i&&(t.onBeforeUpdate&&t.onBeforeUpdate(),i.update(t.value),this.shouldUpdate=!0,t.shouldUpdate=!1)}if(this.childrenBindings.forEach(t=>{t.update(),t.shouldUpdate&&(this.shouldUpdate=!0),t.shouldUpdate=!1}),this.shouldUpdate&&this.parent&&this.parentViewSetBufferEls){let t=0;this.parentViewSetBufferEls.forEach((i,s)=>{const{bufferElement:r,viewSetFunction:o}=i;r.view.forEach(a=>{o(t*r.view.BYTES_PER_ELEMENT,a,!0),t++})}),this.parent.shouldUpdate=!0,this.shouldUpdate=!1}}extractBufferElementDataFromBufferResult({result:e,bufferElementName:t}){const i=this.bufferElements.find(s=>s.name===t);return i?i.extractDataFromBufferResult(e):e}};Ot=new WeakMap;let me=Wn;class $i extends me{static{l(this,"WritableBufferBinding")}constructor({label:e="Work",name:t="work",bindingType:i,visibility:s,useStruct:r=!0,access:o="read_write",usage:a=[],struct:h={},childrenBindings:u=[],buffer:d=null,parent:c=null,minOffset:f=256,offset:p=0,shouldCopyResult:g=!1}){i="storage",s=["compute"],super({label:e,name:t,bindingType:i,visibility:s,useStruct:r,access:o,usage:a,struct:h,childrenBindings:u,buffer:d,parent:c,minOffset:f,offset:p}),this.options={...this.options,shouldCopyResult:g},this.shouldCopyResult=g,this.cacheKey+=`${g},`,this.resultBuffer=new Fe}}class Ft{static{l(this,"BindGroup")}constructor(e,{label:t="BindGroup",index:i=0,bindings:s=[],uniforms:r,storages:o}={}){this.type="BindGroup",e=I(e,this.type),this.renderer=e,this.options={label:t,index:i,bindings:s,...r&&{uniforms:r},...o&&{storages:o}},this.index=i,this.uuid=W(),this.bindings=[],s.length&&this.addBindings(s),(this.options.uniforms||this.options.storages)&&this.setInputBindings(),this.layoutCacheKey="",this.pipelineCacheKey="",this.resetEntries(),this.bindGroupLayout=null,this.bindGroup=null,this.needsPipelineFlush=!1,this.consumers=new Set;for(const a of this.bufferBindings)"buffer"in a&&(a.parent?a.parent.buffer.consumers.add(this.uuid):a.buffer.consumers.add(this.uuid)),"resultBuffer"in a&&a.resultBuffer.consumers.add(this.uuid);this.renderer.addBindGroup(this)}setIndex(e){this.index=e}addBindings(e=[]){e.forEach(t=>{"buffer"in t&&(t.parent?(this.renderer.deviceManager.bufferBindings.set(t.parent.cacheKey,t.parent),t.parent.buffer.consumers.add(this.uuid)):(this.renderer.deviceManager.bufferBindings.set(t.cacheKey,t),t.buffer.consumers.add(this.uuid)))}),this.bindings=[...this.bindings,...e]}addBinding(e){this.bindings.push(e)}destroyBufferBinding(e){"buffer"in e&&(this.renderer.removeBuffer(e.buffer),e.buffer.consumers.delete(this.uuid),e.buffer.consumers.size||e.buffer.destroy(),e.parent&&(e.parent.buffer.consumers.delete(this.uuid),e.parent.buffer.consumers.size||(this.renderer.removeBuffer(e.parent.buffer),e.parent.buffer.destroy()))),"resultBuffer"in e&&(this.renderer.removeBuffer(e.resultBuffer),e.resultBuffer.consumers.delete(this.uuid),e.resultBuffer.consumers.size||e.resultBuffer.destroy())}createInputBindings(e="uniform",t={}){let i=[...Object.keys(t).map(s=>{const r=t[s];if(!r.struct)return;const o={label:ot(r.label||s),name:s,bindingType:e,visibility:r.access==="read_write"?["compute"]:r.visibility,useStruct:!0,access:r.access??"read",...r.usage&&{usage:r.usage},struct:r.struct,...r.shouldCopyResult!==void 0&&{shouldCopyResult:r.shouldCopyResult}};if(r.useStruct!==!1){let h=`${e},${r.visibility===void 0?"all":r.access==="read_write"?"compute":r.visibility},true,${r.access??"read"},`;Object.keys(r.struct).forEach(d=>{h+=`${d},${r.struct[d].type},`}),r.shouldCopyResult!==void 0&&(h+=`${r.shouldCopyResult},`);const u=this.renderer.deviceManager.bufferBindings.get(h);if(u)return u.clone(o)}const a=o.access==="read_write"?$i:me;return r.useStruct!==!1?new a(o):Object.keys(r.struct).map(h=>(o.label=ot(r.label?r.label+h:s+h),o.name=s+h,o.useStruct=!1,o.struct={[h]:r.struct[h]},new a(o)))})].flat();return i=i.filter(Boolean),i.forEach(s=>{this.renderer.deviceManager.bufferBindings.set(s.cacheKey,s)}),i}setInputBindings(){this.addBindings([...this.createInputBindings("uniform",this.options.uniforms),...this.createInputBindings("storage",this.options.storages)])}get shouldCreateBindGroup(){return!this.bindGroup&&!!this.bindings.length}resetEntries(){this.entries={bindGroupLayout:[],bindGroup:[]}}createBindGroup(){this.fillEntries(),this.setBindGroupLayout(),this.setBindGroup()}resetBindGroup(){this.entries.bindGroup=[],this.pipelineCacheKey="";for(const e of this.bindings)this.addBindGroupEntry(e);this.setBindGroup()}addBindGroupEntry(e){this.entries.bindGroup.push({binding:this.entries.bindGroup.length,resource:e.resource}),this.pipelineCacheKey+=e.cacheKey}resetBindGroupLayout(){this.entries.bindGroupLayout=[],this.layoutCacheKey="";for(const e of this.bindings)this.addBindGroupLayoutEntry(e);this.setBindGroupLayout()}addBindGroupLayoutEntry(e){this.entries.bindGroupLayout.push({binding:this.entries.bindGroupLayout.length,...e.resourceLayout,visibility:e.visibility}),this.layoutCacheKey+=e.resourceLayoutCacheKey}loseContext(){this.resetEntries();for(const e of this.bufferBindings)e.buffer.reset(),e.parent&&e.parent.buffer.reset(),"resultBuffer"in e&&e.resultBuffer.reset();this.bindGroup=null,this.bindGroupLayout=null,this.needsPipelineFlush=!0}restoreContext(){this.shouldCreateBindGroup&&this.createBindGroup();for(const e of this.bufferBindings)e.shouldUpdate=!0}get bufferBindings(){return this.bindings.filter(e=>e instanceof me||e instanceof $i)}createBindingBuffer(e,t=null){e.buffer.createBuffer(this.renderer,{label:t||this.options.label+": "+e.bindingType+" buffer from: "+e.label,usage:["copySrc","copyDst",e.bindingType,...e.options.usage]}),"resultBuffer"in e&&e.resultBuffer.createBuffer(this.renderer,{label:this.options.label+": Result buffer from: "+e.label,size:e.arrayBuffer.byteLength,usage:["copyDst","mapRead"]})}fillEntries(){for(const e of this.bindings)e.visibility||(e.visibility=GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE),"buffer"in e&&(e.parent&&!e.parent.buffer.GPUBuffer?this.createBindingBuffer(e.parent,e.parent.options.label):!e.buffer.GPUBuffer&&!e.parent&&this.createBindingBuffer(e)),this.addBindGroupLayoutEntry(e),this.addBindGroupEntry(e)}getBindingByName(e=""){return this.bindings.find(t=>t.name===e)}setBindGroupLayout(){const e=this.renderer.deviceManager.bindGroupLayouts.get(this.layoutCacheKey);e?this.bindGroupLayout=e:(this.bindGroupLayout=this.renderer.createBindGroupLayout({label:this.options.label+" layout",entries:this.entries.bindGroupLayout}),this.renderer.deviceManager.bindGroupLayouts.set(this.layoutCacheKey,this.bindGroupLayout))}setBindGroup(){this.bindGroup=this.renderer.createBindGroup({label:this.options.label,layout:this.bindGroupLayout,entries:this.entries.bindGroup})}updateBufferBindings(){this.bindings.forEach((e,t)=>{"buffer"in e&&(e.update(),e.shouldUpdate&&e.buffer.GPUBuffer&&(!e.useStruct&&e.bufferElements.length>1?this.renderer.queueWriteBuffer(e.buffer.GPUBuffer,0,e.bufferElements[t].view):this.renderer.queueWriteBuffer(e.buffer.GPUBuffer,0,e.arrayBuffer),e.shouldUpdate=!1))})}update(){this.updateBufferBindings();const e=this.bindings.some(i=>i.shouldResetBindGroup),t=this.bindings.some(i=>i.shouldResetBindGroupLayout);(e||t)&&this.renderer.onAfterCommandEncoderSubmission.add(()=>{for(const i of this.bindings)i.shouldResetBindGroup=!1,i.shouldResetBindGroupLayout=!1},{once:!0}),t&&(this.resetBindGroupLayout(),this.needsPipelineFlush=!0),e&&this.resetBindGroup()}clone({bindings:e=[],keepLayout:t=!1}={}){const i={...this.options};i.label+=" (copy)";const s=new this.constructor(this.renderer,{label:i.label});s.setIndex(this.index),s.options=i;const r=e.length?e:this.bindings;for(const o of r)s.addBinding(o),"buffer"in o&&(o.parent&&!o.parent.buffer.GPUBuffer?(this.createBindingBuffer(o.parent,o.parent.options.label),o.parent.buffer.consumers.add(s.uuid)):!o.buffer.GPUBuffer&&!o.parent&&this.createBindingBuffer(o),"resultBuffer"in o&&o.resultBuffer.consumers.add(s.uuid)),t||s.addBindGroupLayoutEntry(o),s.addBindGroupEntry(o);return t&&(s.entries.bindGroupLayout=[...this.entries.bindGroupLayout],s.layoutCacheKey=this.layoutCacheKey),s.setBindGroupLayout(),s.setBindGroup(),s}destroy(){this.renderer.removeBindGroup(this);for(const e of this.bufferBindings)this.destroyBufferBinding(e);this.bindings=[],this.bindGroupLayout=null,this.bindGroup=null,this.resetEntries()}}class Ui extends At{static{l(this,"TextureBinding")}constructor({label:e="Texture",name:t="texture",bindingType:i,visibility:s,texture:r,format:o="rgba8unorm",access:a="write",viewDimension:h="2d",multisampled:u=!1}){i=i??"texture",i==="storage"&&(s=["compute"]),super({label:e,name:t,bindingType:i,visibility:s}),this.options={...this.options,texture:r,format:o,access:a,viewDimension:h,multisampled:u},this.cacheKey+=`${o},${a},${h},${u},`,this.resource=r,this.setWGSLFragment()}get resourceLayout(){return Fn(this)}get resourceLayoutCacheKey(){return $n(this)}get resource(){return this.texture instanceof GPUTexture?this.texture.createView({label:this.options.label+" view",dimension:this.options.viewDimension}):this.texture instanceof GPUExternalTexture?this.texture:null}set resource(e){(e||this.texture)&&(this.shouldResetBindGroup=!0),this.texture=e}setBindingType(e){e!==this.bindingType&&(e&&(this.shouldResetBindGroupLayout=!0),this.bindingType=e,this.cacheKey=`${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`,this.setWGSLFragment())}setFormat(e){const t=e!==this.options.format;this.options.format=e,t&&this.bindingType==="storage"&&(this.setWGSLFragment(),this.shouldResetBindGroupLayout=!0,this.cacheKey=`${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`)}setMultisampled(e){const t=e!==this.options.multisampled;this.options.multisampled=e,t&&this.bindingType!=="storage"&&(this.setWGSLFragment(),this.shouldResetBindGroupLayout=!0,this.cacheKey=`${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`)}setWGSLFragment(){this.wgslGroupFragment=[`${On(this)}`]}}const ee=new m,ge=new m,j=new m;class O{static{l(this,"Mat4")}constructor(e=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])){this.type="Mat4",this.elements=e}set(e,t,i,s,r,o,a,h,u,d,c,f,p,g,y,x){const b=this.elements;return b[0]=e,b[1]=t,b[2]=i,b[3]=s,b[4]=r,b[5]=o,b[6]=a,b[7]=h,b[8]=u,b[9]=d,b[10]=c,b[11]=f,b[12]=p,b[13]=g,b[14]=y,b[15]=x,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}setFromArray(e=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])){for(let t=0;t<this.elements.length;t++)this.elements[t]=e[t];return this}copy(e=new O){const t=e.elements;return this.elements[0]=t[0],this.elements[1]=t[1],this.elements[2]=t[2],this.elements[3]=t[3],this.elements[4]=t[4],this.elements[5]=t[5],this.elements[6]=t[6],this.elements[7]=t[7],this.elements[8]=t[8],this.elements[9]=t[9],this.elements[10]=t[10],this.elements[11]=t[11],this.elements[12]=t[12],this.elements[13]=t[13],this.elements[14]=t[14],this.elements[15]=t[15],this}clone(){return new O().copy(this)}multiply(e=new O){return this.multiplyMatrices(this,e)}premultiply(e=new O){return this.multiplyMatrices(e,this)}multiplyMatrices(e=new O,t=new O){const i=e.elements,s=t.elements,r=this.elements,o=i[0],a=i[4],h=i[8],u=i[12],d=i[1],c=i[5],f=i[9],p=i[13],g=i[2],y=i[6],x=i[10],b=i[14],C=i[3],R=i[7],B=i[11],T=i[15],S=s[0],w=s[4],z=s[8],L=s[12],E=s[1],$=s[5],F=s[9],Q=s[13],H=s[2],se=s[6],k=s[10],N=s[14],X=s[3],te=s[7],le=s[11],De=s[15];return r[0]=o*S+a*E+h*H+u*X,r[4]=o*w+a*$+h*se+u*te,r[8]=o*z+a*F+h*k+u*le,r[12]=o*L+a*Q+h*N+u*De,r[1]=d*S+c*E+f*H+p*X,r[5]=d*w+c*$+f*se+p*te,r[9]=d*z+c*F+f*k+p*le,r[13]=d*L+c*Q+f*N+p*De,r[2]=g*S+y*E+x*H+b*X,r[6]=g*w+y*$+x*se+b*te,r[10]=g*z+y*F+x*k+b*le,r[14]=g*L+y*Q+x*N+b*De,r[3]=C*S+R*E+B*H+T*X,r[7]=C*w+R*$+B*se+T*te,r[11]=C*z+R*F+B*k+T*le,r[15]=C*L+R*Q+B*N+T*De,this}premultiplyTranslate(e=new m){const o=e.x,a=e.y,h=e.z,u=this.elements,d=this.elements,c=u[0],f=u[4],p=u[8],g=u[12],y=u[1],x=u[5],b=u[9],C=u[13],R=u[2],B=u[6],T=u[10],S=u[14],w=u[3],z=u[7],L=u[11],E=u[15];return d[0]=1*c+o*w,d[4]=1*f+o*z,d[8]=1*p+o*L,d[12]=1*g+o*E,d[1]=1*y+a*w,d[5]=1*x+a*z,d[9]=1*b+a*L,d[13]=1*C+a*E,d[2]=1*R+h*w,d[6]=1*B+h*z,d[10]=1*T+h*L,d[14]=1*S+h*E,d[3]=1*w,d[7]=1*z,d[11]=1*L,d[15]=1*E,this}premultiplyScale(e=new m){const t=this.elements,i=this.elements,s=e.x,r=e.y,o=e.z,a=1,h=t[0],u=t[4],d=t[8],c=t[12],f=t[1],p=t[5],g=t[9],y=t[13],x=t[2],b=t[6],C=t[10],R=t[14],B=t[3],T=t[7],S=t[11],w=t[15];return i[0]=s*h,i[4]=s*u,i[8]=s*d,i[12]=s*c,i[1]=r*f,i[5]=r*p,i[9]=r*g,i[13]=r*y,i[2]=o*x,i[6]=o*b,i[10]=o*C,i[14]=o*R,i[3]=a*B,i[7]=a*T,i[11]=a*S,i[15]=a*w,this}invert(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],o=e[4],a=e[5],h=e[6],u=e[7],d=e[8],c=e[9],f=e[10],p=e[11],g=e[12],y=e[13],x=e[14],b=e[15],C=c*x*u-y*f*u+y*h*p-a*x*p-c*h*b+a*f*b,R=g*f*u-d*x*u-g*h*p+o*x*p+d*h*b-o*f*b,B=d*y*u-g*c*u+g*a*p-o*y*p-d*a*b+o*c*b,T=g*c*h-d*y*h-g*a*f+o*y*f+d*a*x-o*c*x,S=t*C+i*R+s*B+r*T;if(S===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const w=1/S;return e[0]=C*w,e[1]=(y*f*r-c*x*r-y*s*p+i*x*p+c*s*b-i*f*b)*w,e[2]=(a*x*r-y*h*r+y*s*u-i*x*u-a*s*b+i*h*b)*w,e[3]=(c*h*r-a*f*r-c*s*u+i*f*u+a*s*p-i*h*p)*w,e[4]=R*w,e[5]=(d*x*r-g*f*r+g*s*p-t*x*p-d*s*b+t*f*b)*w,e[6]=(g*h*r-o*x*r-g*s*u+t*x*u+o*s*b-t*h*b)*w,e[7]=(o*f*r-d*h*r+d*s*u-t*f*u-o*s*p+t*h*p)*w,e[8]=B*w,e[9]=(g*c*r-d*y*r-g*i*p+t*y*p+d*i*b-t*c*b)*w,e[10]=(o*y*r-g*a*r+g*i*u-t*y*u-o*i*b+t*a*b)*w,e[11]=(d*a*r-o*c*r-d*i*u+t*c*u+o*i*p-t*a*p)*w,e[12]=T*w,e[13]=(d*y*s-g*c*s+g*i*f-t*y*f-d*i*x+t*c*x)*w,e[14]=(g*a*s-o*y*s-g*i*h+t*y*h+o*i*x-t*a*x)*w,e[15]=(o*c*s-d*a*s+d*i*h-t*c*h-o*i*f+t*a*f)*w,this}getInverse(){return this.clone().invert()}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}translate(e=new m){const t=this.elements;return t[12]=t[0]*e.x+t[4]*e.y+t[8]*e.z+t[12],t[13]=t[1]*e.x+t[5]*e.y+t[9]*e.z+t[13],t[14]=t[2]*e.x+t[6]*e.y+t[10]*e.z+t[14],t[15]=t[3]*e.x+t[7]*e.y+t[11]*e.z+t[15],this}getTranslation(e=new m){return e.set(this.elements[12],this.elements[13],this.elements[14])}scale(e=new m){const t=this.elements;return t[0]*=e.x,t[1]*=e.x,t[2]*=e.x,t[3]*=e.x,t[4]*=e.y,t[5]*=e.y,t[6]*=e.y,t[7]*=e.y,t[8]*=e.z,t[9]*=e.z,t[10]*=e.z,t[11]*=e.z,this}rotateFromQuaternion(e=new pe){const t=this.elements,i=e.elements[0],s=e.elements[1],r=e.elements[2],o=e.elements[3],a=i+i,h=s+s,u=r+r,d=i*a,c=i*h,f=i*u,p=s*h,g=s*u,y=r*u,x=o*a,b=o*h,C=o*u;return t[0]=1-(p+y),t[4]=c-C,t[8]=f+b,t[1]=c+C,t[5]=1-(d+y),t[9]=g-x,t[2]=f-b,t[6]=g+x,t[10]=1-(d+p),this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],i=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,i,s))}compose(e=new m,t=new pe,i=new m(1)){const s=this.elements,r=t.elements[0],o=t.elements[1],a=t.elements[2],h=t.elements[3],u=r+r,d=o+o,c=a+a,f=r*u,p=r*d,g=r*c,y=o*d,x=o*c,b=a*c,C=h*u,R=h*d,B=h*c,T=i.x,S=i.y,w=i.z;return s[0]=(1-(y+b))*T,s[1]=(p+B)*T,s[2]=(g-R)*T,s[3]=0,s[4]=(p-B)*S,s[5]=(1-(f+b))*S,s[6]=(x+C)*S,s[7]=0,s[8]=(g+R)*w,s[9]=(x-C)*w,s[10]=(1-(f+y))*w,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}composeFromOrigin(e=new m,t=new pe,i=new m(1),s=new m){const r=this.elements,o=t.elements[0],a=t.elements[1],h=t.elements[2],u=t.elements[3],d=o+o,c=a+a,f=h+h,p=o*d,g=o*c,y=o*f,x=a*c,b=a*f,C=h*f,R=u*d,B=u*c,T=u*f,S=i.x,w=i.y,z=i.z,L=s.x,E=s.y,$=s.z,F=(1-(x+C))*S,Q=(g+T)*S,H=(y-B)*S,se=(g-T)*w,k=(1-(p+C))*w,N=(b+R)*w,X=(y+B)*z,te=(b-R)*z,le=(1-(p+x))*z;return r[0]=F,r[1]=Q,r[2]=H,r[3]=0,r[4]=se,r[5]=k,r[6]=N,r[7]=0,r[8]=X,r[9]=te,r[10]=le,r[11]=0,r[12]=e.x+L-(F*L+se*E+X*$),r[13]=e.y+E-(Q*L+k*E+te*$),r[14]=e.z+$-(H*L+N*E+le*$),r[15]=1,this}lookAt(e=new m,t=new m,i=new m(0,1,0)){const s=this.elements;return j.copy(e).sub(t),j.lengthSq()===0&&(j.z=1),j.normalize(),ee.crossVectors(i,j),ee.lengthSq()===0&&(Math.abs(i.z)===1?j.x+=1e-4:j.z+=1e-4,j.normalize(),ee.crossVectors(i,j)),ee.normalize(),ge.crossVectors(j,ee),s[0]=ee.x,s[1]=ee.y,s[2]=ee.z,s[3]=0,s[4]=ge.x,s[5]=ge.y,s[6]=ge.z,s[7]=0,s[8]=j.x,s[9]=j.y,s[10]=j.z,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}makeView(e=new m,t=new m,i=new m(0,1,0)){const s=this.elements;return j.copy(e).sub(t).normalize(),ee.crossVectors(i,j).normalize(),ge.crossVectors(j,ee).normalize(),s[0]=ee.x,s[1]=ge.x,s[2]=j.x,s[3]=0,s[4]=ee.y,s[5]=ge.y,s[6]=j.y,s[7]=0,s[8]=ee.z,s[9]=ge.z,s[10]=j.z,s[11]=0,s[12]=-(ee.x*e.x+ee.y*e.y+ee.z*e.z),s[13]=-(ge.x*e.x+ge.y*e.y+ge.z*e.z),s[14]=-(j.x*e.x+j.y*e.y+j.z*e.z),s[15]=1,this}makeOrthographic({left:e=-5,right:t=5,bottom:i=-5,top:s=5,near:r=.1,far:o=50}){const a=this.elements;return a[0]=2/(t-e),a[1]=0,a[2]=0,a[3]=0,a[4]=0,a[5]=2/(s-i),a[6]=0,a[7]=0,a[8]=0,a[9]=0,a[10]=1/(r-o),a[11]=0,a[12]=(t+e)/(e-t),a[13]=(s+i)/(i-s),a[14]=r/(r-o),a[15]=1,this}makePerspective({fov:e=90,aspect:t=1,near:i=.1,far:s=150}){const r=i*Math.tan(Math.PI/180*.5*e),o=2*r,a=t*o,h=-.5*a,u=h+a,d=r-o,c=2*i/(u-h),f=2*i/(r-d),p=(u+h)/(u-h),g=(r+d)/(r-d),y=-s/(s-i),x=-s*i/(s-i);return this.set(c,0,0,0,0,f,0,0,p,g,y,-1,0,0,x,0),this}}let jn=0;const qn=new O;class we{static{l(this,"Object3D")}constructor(){this._parent=null,this.children=[],this.matricesNeedUpdate=!1,Object.defineProperty(this,"object3DIndex",{value:jn++}),this.setMatrices(),this.setTransforms()}get parent(){return this._parent}set parent(e){this._parent&&e&&this._parent.object3DIndex===e.object3DIndex||(this._parent&&(this._parent.children=this._parent.children.filter(t=>t.object3DIndex!==this.object3DIndex)),e&&this.shouldUpdateWorldMatrix(),this._parent=e,this._parent?.children.push(this))}setTransforms(){this.transforms={origin:{model:new m},quaternion:new pe,rotation:new m,position:{world:new m},scale:new m(1)},this.rotation.onChange(()=>this.applyRotation()),this.position.onChange(()=>this.applyPosition()),this.scale.onChange(()=>this.applyScale()),this.transformOrigin.onChange(()=>this.applyTransformOrigin())}get rotation(){return this.transforms.rotation}set rotation(e){this.transforms.rotation=e,this.applyRotation()}get quaternion(){return this.transforms.quaternion}set quaternion(e){this.transforms.quaternion=e}get position(){return this.transforms.position.world}set position(e){this.transforms.position.world=e}get scale(){return this.transforms.scale}set scale(e){this.transforms.scale=e,this.applyScale()}get transformOrigin(){return this.transforms.origin.model}set transformOrigin(e){this.transforms.origin.model=e}applyRotation(){this.quaternion.setFromVec3(this.rotation),this.shouldUpdateModelMatrix()}applyPosition(){this.shouldUpdateModelMatrix()}applyScale(){this.shouldUpdateModelMatrix()}applyTransformOrigin(){this.shouldUpdateModelMatrix()}setMatrices(){this.matrices={model:{matrix:new O,shouldUpdate:!0,onUpdate:()=>this.updateModelMatrix()},world:{matrix:new O,shouldUpdate:!0,onUpdate:()=>this.updateWorldMatrix()}}}get modelMatrix(){return this.matrices.model.matrix}set modelMatrix(e){this.matrices.model.matrix=e,this.shouldUpdateModelMatrix()}shouldUpdateModelMatrix(){this.matrices.model.shouldUpdate=!0,this.shouldUpdateWorldMatrix()}get worldMatrix(){return this.matrices.world.matrix}set worldMatrix(e){this.matrices.world.matrix=e,this.shouldUpdateWorldMatrix()}shouldUpdateWorldMatrix(){this.matrices.world.shouldUpdate=!0}lookAt(e=new m,t=this.position,i=new m(0,1,0)){const s=qn.lookAt(e,t,i);this.quaternion.setFromRotationMatrix(s),this.shouldUpdateModelMatrix()}updateModelMatrix(){this.modelMatrix=this.modelMatrix.composeFromOrigin(this.position,this.quaternion,this.scale,this.transformOrigin),this.shouldUpdateWorldMatrix()}updateWorldMatrix(){this.parent?this.worldMatrix.multiplyMatrices(this.parent.worldMatrix,this.modelMatrix):this.worldMatrix.copy(this.modelMatrix);for(let e=0,t=this.children.length;e<t;e++)this.children[e].shouldUpdateWorldMatrix()}shouldUpdateMatrices(){this.matricesNeedUpdate=!!Object.values(this.matrices).find(e=>e.shouldUpdate)}updateMatrixStack(){if(this.shouldUpdateMatrices(),this.matricesNeedUpdate)for(const e in this.matrices)this.matrices[e].shouldUpdate&&(this.matrices[e].onUpdate(),this.matrices[e].shouldUpdate=!1);for(let e=0,t=this.children.length;e<t;e++)this.children[e].updateMatrixStack()}destroy(){for(let e=0,t=this.children.length;e<t;e++)this.children[e]&&(this.children[e].parent=null);this.parent=null}}const Yn=new Map([["copySrc",at.COPY_SRC],["copyDst",at.COPY_DST],["renderAttachment",at.RENDER_ATTACHMENT],["storageBinding",at.STORAGE_BINDING],["textureBinding",at.TEXTURE_BINDING]]),Hn=l((n=[])=>n.reduce((e,t)=>e|Yn.get(t),0),"getTextureUsages"),Xn=l((n=[],e)=>n.length?Hn(n):e!=="storage"?GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,"getDefaultTextureUsage"),tr=l((...n)=>{const e=Math.max(...n);return 1+Math.log2(e)|0},"getNumMipLevels");var Kn=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$k"),re=l((n,e,t)=>(Kn(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$h"),$t=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$k"),$e,Ue,Ut,kt;const ir={name:"texture",generateMips:!1,flipY:!1,format:"rgba8unorm",premultipliedAlpha:!1,placeholderColor:[0,0,0,255],useExternalTextures:!0,fromTexture:null,viewDimension:"2d",visibility:["fragment"],cache:!0};class ke extends we{static{l(this,"DOMTexture")}constructor(e,t=ir){super(),$t(this,$e,new m(1)),$t(this,Ue,new m(1)),$t(this,Ut,new m(1)),$t(this,kt,new O),this._onSourceLoadedCallback=()=>{},this._onSourceUploadedCallback=()=>{},this.type="Texture",e=I(e,t.label?t.label+" "+this.type:this.type),this.renderer=e,this.uuid=W();const i={...ir,source:t.fromTexture?t.fromTexture.options.source:null,sourceType:t.fromTexture?t.fromTexture.options.sourceType:null};this.options={...i,...t},this.options.label=this.options.label??this.options.name,this.texture=null,this.externalTexture=null,this.source=null,this.size={width:1,height:1,depth:1},this.textureMatrix=new me({label:this.options.label+": model matrix",name:this.options.name+"Matrix",useStruct:!1,struct:{[this.options.name+"Matrix"]:{type:"mat4x4f",value:this.modelMatrix}}}),this.renderer.deviceManager.bufferBindings.set(this.textureMatrix.cacheKey,this.textureMatrix),this.setBindings(),this._parentMesh=null,this.sourceLoaded=!1,this.sourceUploaded=!1,this.shouldUpdate=!1,this.renderer.addDOMTexture(this),this.createTexture()}setBindings(){this.bindings=[new Ui({label:this.options.label+": texture",name:this.options.name,bindingType:this.options.sourceType==="externalVideo"?"externalTexture":"texture",visibility:this.options.visibility,texture:this.options.sourceType==="externalVideo"?this.externalTexture:this.texture,viewDimension:this.options.viewDimension}),this.textureMatrix]}get textureBinding(){return this.bindings[0]}get parentMesh(){return this._parentMesh}set parentMesh(e){this._parentMesh=e,this.resize()}get sourceLoaded(){return this._sourceLoaded}set sourceLoaded(e){e&&!this.sourceLoaded&&this._onSourceLoadedCallback&&this._onSourceLoadedCallback(),this._sourceLoaded=e}get sourceUploaded(){return this._sourceUploaded}set sourceUploaded(e){e&&!this.sourceUploaded&&this._onSourceUploadedCallback&&this._onSourceUploadedCallback(),this._sourceUploaded=e}setTransforms(){super.setTransforms(),this.transforms.quaternion.setAxisOrder("ZXY"),this.transforms.origin.model.set(.5,.5,0)}updateModelMatrix(){if(!this.parentMesh)return;const e=this.parentMesh.scale?this.parentMesh.scale:new m(1,1,1),t=this.parentMesh.boundingRect?this.parentMesh.boundingRect.width*e.x:this.size.width,i=this.parentMesh.boundingRect?this.parentMesh.boundingRect.height*e.y:this.size.height,s=t/i,r=this.size.width/this.size.height;t>i?(re(this,$e).set(s,1,1),re(this,Ue).set(1/r,1,1)):(re(this,$e).set(1,1/s,1),re(this,Ue).set(1,r,1));const o=s>r!=t>i?1:t>i?re(this,$e).x*re(this,Ue).x:re(this,Ue).y*re(this,$e).y;re(this,Ut).set(1/(o*this.scale.x),1/(o*this.scale.y),1),re(this,kt).rotateFromQuaternion(this.quaternion),this.modelMatrix.identity().premultiplyTranslate(this.transformOrigin.clone().multiplyScalar(-1)).premultiplyScale(re(this,Ut)).premultiplyScale(re(this,$e)).premultiply(re(this,kt)).premultiplyScale(re(this,Ue)).premultiplyTranslate(this.transformOrigin).translate(this.position)}updateMatrixStack(){super.updateMatrixStack(),this.matricesNeedUpdate&&this.textureMatrix.shouldUpdateBinding(this.options.name+"Matrix")}resize(){this.source&&this.source instanceof HTMLCanvasElement&&(this.source.width!==this.size.width||this.source.height!==this.size.height)&&(this.setSourceSize(),this.createTexture()),this.shouldUpdateModelMatrix()}uploadTexture(){this.renderer.uploadTexture(this),this.shouldUpdate=!1}uploadVideoTexture(){this.externalTexture=this.renderer.importExternalTexture(this.source),this.textureBinding.resource=this.externalTexture,this.textureBinding.setBindingType("externalTexture"),this.shouldUpdate=!1,this.sourceUploaded=!0}copy(e){if(this.options.sourceType==="externalVideo"&&e.options.sourceType!=="externalVideo"){_(`${this.options.label}: cannot copy a GPUTexture to a GPUExternalTexture`);return}else if(this.options.sourceType!=="externalVideo"&&e.options.sourceType==="externalVideo"){_(`${this.options.label}: cannot copy a GPUExternalTexture to a GPUTexture`);return}this.options.fromTexture=e,this.options.sourceType=e.options.sourceType,this.options.generateMips=e.options.generateMips,this.options.flipY=e.options.flipY,this.options.format=e.options.format,this.options.premultipliedAlpha=e.options.premultipliedAlpha,this.options.placeholderColor=e.options.placeholderColor,this.options.useExternalTextures=e.options.useExternalTextures,this.sourceLoaded=e.sourceLoaded,this.sourceUploaded=e.sourceUploaded,e.texture&&(e.sourceLoaded&&(this.size=e.size,this.source=e.source,this.resize()),e.sourceUploaded?(this.texture=e.texture,this.textureBinding.resource=this.texture):this.createTexture())}createTexture(){const e={label:this.options.label,format:this.options.format,size:[this.size.width,this.size.height,this.size.depth],dimensions:this.options.viewDimension==="1d"?"1d":this.options.viewDimension==="3d"?"3d":"2d",usage:this.source?GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST};this.options.sourceType!=="externalVideo"&&(e.mipLevelCount=this.options.generateMips?tr(this.size.width,this.size.height):1,this.texture?.destroy(),this.texture=this.renderer.createTexture(e),this.textureBinding.resource=this.texture),this.shouldUpdate=!0}setSourceSize(){this.size={width:this.source.naturalWidth||this.source.width||this.source.videoWidth,height:this.source.naturalHeight||this.source.height||this.source.videoHeight,depth:1}}async loadImageBitmap(e){const i=await(await fetch(e)).blob();return await createImageBitmap(i,{colorSpaceConversion:"none"})}async loadImage(e){const t=typeof e=="string"?e:e.getAttribute("src");this.options.source=t,this.options.sourceType="image";const i=this.renderer.domTextures.find(s=>s.options.source===t);if(i&&i.texture&&i.sourceUploaded){this.copy(i);return}this.sourceLoaded=!1,this.sourceUploaded=!1,this.source=await this.loadImageBitmap(this.options.source),this.setSourceSize(),this.resize(),this.sourceLoaded=!0,this.createTexture()}onVideoFrameCallback(){this.videoFrameCallbackId&&(this.shouldUpdate=!0,this.source.requestVideoFrameCallback(this.onVideoFrameCallback.bind(this)))}onVideoLoaded(e){this.sourceLoaded||(this.source=e,this.setSourceSize(),this.resize(),this.options.useExternalTextures?(this.options.sourceType="externalVideo",this.texture?.destroy()):(this.options.sourceType="video",this.createTexture()),"requestVideoFrameCallback"in HTMLVideoElement.prototype&&(this.videoFrameCallbackId=this.source.requestVideoFrameCallback(this.onVideoFrameCallback.bind(this))),this.sourceLoaded=!0)}get isVideoSource(){return this.source&&(this.options.sourceType==="video"||this.options.sourceType==="externalVideo")}loadVideo(e){let t;typeof e=="string"?(t=document.createElement("video"),t.src=e):t=e,t.preload="auto",t.muted=!0,t.loop=!0,t.crossOrigin="anonymous",t.setAttribute("playsinline",""),this.options.source=t.src,this.sourceLoaded=!1,this.sourceUploaded=!1,t.readyState>=t.HAVE_ENOUGH_DATA?this.onVideoLoaded(t):t.addEventListener("canplaythrough",this.onVideoLoaded.bind(this,t),{once:!0}),isNaN(t.duration)&&t.load()}loadCanvas(e){this.options.source=e,this.options.sourceType="canvas",this.sourceLoaded=!1,this.sourceUploaded=!1,this.source=e,this.setSourceSize(),this.resize(),this.sourceLoaded=!0,this.createTexture()}onSourceLoaded(e){return e&&(this._onSourceLoadedCallback=e),this}onSourceUploaded(e){return e&&(this._onSourceUploadedCallback=e),this}render(){this.updateMatrixStack(),this.textureMatrix.update(),this.options.sourceType==="externalVideo"&&(this.shouldUpdate=!0),this.isVideoSource&&!this.videoFrameCallbackId&&this.source.readyState>=this.source.HAVE_CURRENT_DATA&&!this.source.paused&&(this.shouldUpdate=!0),this.shouldUpdate&&this.options.sourceType&&this.options.sourceType!=="externalVideo"&&this.uploadTexture()}destroy(){this.videoFrameCallbackId&&this.source.cancelVideoFrameCallback(this.videoFrameCallbackId),this.isVideoSource&&this.source.removeEventListener("canplaythrough",this.onVideoLoaded.bind(this,this.source),{once:!0}),this.renderer.removeDOMTexture(this),this.texture?.destroy(),this.texture=null}}$e=new WeakMap,Ue=new WeakMap,Ut=new WeakMap,kt=new WeakMap;class ki extends Ft{static{l(this,"TextureBindGroup")}constructor(e,{label:t,index:i=0,bindings:s=[],uniforms:r,storages:o,textures:a=[],samplers:h=[]}={}){const u="TextureBindGroup";if(e=I(e,u),super(e,{label:t,index:i,bindings:s,uniforms:r,storages:o}),this.options={...this.options,textures:[],samplers:[]},a.length)for(const d of a)this.addTexture(d);if(h.length)for(const d of h)this.addSampler(d);this.type=u}addTexture(e){this.textures.push(e),this.addBindings([...e.bindings])}get textures(){return this.options.textures}addSampler(e){this.samplers.push(e),this.addBindings([e.binding])}get samplers(){return this.options.samplers}get shouldCreateBindGroup(){return!this.bindGroup&&!!this.bindings.length&&!this.textures.find(e=>!(e.texture||e.externalTexture))&&!this.samplers.find(e=>!e.sampler)}updateTextures(){for(const e of this.textures)e instanceof ke&&(e.options.fromTexture&&e.options.fromTexture.sourceUploaded&&!e.sourceUploaded&&e.copy(e.options.fromTexture),e.shouldUpdate&&e.options.sourceType&&e.options.sourceType==="externalVideo"&&e.uploadVideoTexture())}update(){this.updateTextures(),super.update()}destroy(){super.destroy(),this.options.textures=[],this.options.samplers=[]}}class sr extends At{static{l(this,"SamplerBinding")}constructor({label:e="Sampler",name:t="sampler",bindingType:i,visibility:s,sampler:r,type:o="filtering"}){i=i??"sampler",super({label:e,name:t,bindingType:i,visibility:s}),this.cacheKey+=`${o},`,this.options={...this.options,sampler:r,type:o},this.resource=r,this.setWGSLFragment()}get resourceLayout(){return{sampler:{type:this.options.type}}}get resourceLayoutCacheKey(){return`sampler,${this.options.type},${this.visibility},`}get resource(){return this.sampler}set resource(e){e&&this.sampler&&(this.shouldResetBindGroup=!0),this.sampler=e}setWGSLFragment(){this.wgslGroupFragment=[`var ${this.name}: ${this.options.type==="comparison"?`${this.bindingType}_comparison`:this.bindingType};`]}}var rr=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$j"),It=l((n,e,t)=>(rr(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$g"),Vt=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$j"),Nt=l((n,e,t,i)=>(rr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$g"),Wt,jt,qt,Yt;class nr extends we{static{l(this,"Camera")}constructor({fov:e=50,near:t=.1,far:i=150,width:s=1,height:r=1,pixelRatio:o=1,onMatricesChanged:a=l(()=>{},"onMatricesChanged")}={}){super(),Vt(this,Wt,void 0),Vt(this,jt,void 0),Vt(this,qt,void 0),Vt(this,Yt,void 0),this.uuid=W(),this.position.set(0,0,10),this.up=new m(0,1,0),this.onMatricesChanged=a,this.size={width:1,height:1},this.setPerspective({fov:e,near:t,far:i,width:s,height:r,pixelRatio:o})}setMatrices(){super.setMatrices(),this.matrices={...this.matrices,view:{matrix:new O,shouldUpdate:!0,onUpdate:()=>{this.viewMatrix.copy(this.worldMatrix).invert()}},projection:{matrix:new O,shouldUpdate:!0,onUpdate:()=>this.updateProjectionMatrix()},viewProjection:{matrix:new O,shouldUpdate:!0,onUpdate:()=>this.viewProjectionMatrix.multiplyMatrices(this.projectionMatrix,this.viewMatrix)}}}get viewMatrix(){return this.matrices.view.matrix}set viewMatrix(e){this.matrices.view.matrix=e,this.shouldUpdateViewMatrices()}get projectionMatrix(){return this.matrices.projection.matrix}set projectionMatrix(e){this.matrices.projection.matrix=e,this.shouldUpdateProjectionMatrices()}get viewProjectionMatrix(){return this.matrices.viewProjection.matrix}shouldUpdateViewMatrices(){this.matrices.view.shouldUpdate=!0,this.matrices.viewProjection.shouldUpdate=!0}shouldUpdateProjectionMatrices(){this.matrices.projection.shouldUpdate=!0,this.matrices.viewProjection.shouldUpdate=!0}updateModelMatrix(){super.updateModelMatrix(),this.setVisibleSize(),this.shouldUpdateViewMatrices()}updateWorldMatrix(){super.updateWorldMatrix(),this.shouldUpdateViewMatrices()}updateMatrixStack(){super.updateMatrixStack(),this.matricesNeedUpdate&&this.onMatricesChanged()}get fov(){return It(this,Wt)}set fov(e){e=Math.max(1,Math.min(e??this.fov,179)),e!==this.fov&&(Nt(this,Wt,e),this.shouldUpdateProjectionMatrices()),this.setVisibleSize(),this.setCSSPerspective()}get near(){return It(this,jt)}set near(e){e=Math.max(e??this.near,.01),e!==this.near&&(Nt(this,jt,e),this.shouldUpdateProjectionMatrices())}get far(){return It(this,qt)}set far(e){e=Math.max(e??this.far,this.near+1),e!==this.far&&(Nt(this,qt,e),this.shouldUpdateProjectionMatrices())}get pixelRatio(){return It(this,Yt)}set pixelRatio(e){Nt(this,Yt,e??this.pixelRatio),this.setCSSPerspective()}setSize({width:e,height:t}){(e!==this.size.width||t!==this.size.height)&&this.shouldUpdateProjectionMatrices(),this.size.width=e,this.size.height=t,this.setVisibleSize(),this.setCSSPerspective()}setPerspective({fov:e=this.fov,near:t=this.near,far:i=this.far,width:s=this.size.width,height:r=this.size.height,pixelRatio:o=this.pixelRatio}={}){this.setSize({width:s,height:r}),this.pixelRatio=o,this.fov=e,this.near=t,this.far=i}setCSSPerspective(){this.CSSPerspective=Math.pow(Math.pow(this.size.width/(2*this.pixelRatio),2)+Math.pow(this.size.height/(2*this.pixelRatio),2),.5)/Math.tan(this.fov*.5*Math.PI/180)}getVisibleSizeAtDepth(e=0){const t=this.position.z;e<t?e-=t:e+=t;const i=this.fov*Math.PI/180,s=2*Math.tan(i/2)*Math.abs(e);return{width:s*this.size.width/this.size.height,height:s}}setVisibleSize(){this.visibleSize=this.getVisibleSizeAtDepth()}lookAt(e=new m,t=this.position){super.lookAt(t,e,this.up)}updateProjectionMatrix(){this.projectionMatrix.makePerspective({fov:this.fov,aspect:this.size.width/this.size.height,near:this.near,far:this.far})}get frustumPlanes(){const e=new O,t=new m;e.copy(this.projectionMatrix).multiply(this.viewMatrix);const{elements:i}=e,s=[new Float32Array(4),new Float32Array(4),new Float32Array(4),new Float32Array(4),new Float32Array(4),new Float32Array(4)];t.set(i[3]+i[0],i[7]+i[4],i[11]+i[8]);let r=t.length();return s[0][0]=t.x/r,s[0][1]=t.y/r,s[0][2]=t.z/r,s[0][3]=(i[15]+i[12])/r,t.set(i[3]-i[0],i[7]-i[4],i[11]-i[8]),r=t.length(),s[1][0]=t.x/r,s[1][1]=t.y/r,s[1][2]=t.z/r,s[1][3]=(i[15]-i[12])/r,t.set(i[3]-i[1],i[7]-i[5],i[11]-i[9]),r=t.length(),s[2][0]=t.x/r,s[2][1]=t.y/r,s[2][2]=t.z/r,s[2][3]=(i[15]-i[13])/r,t.set(i[3]+i[1],i[7]+i[5],i[11]+i[9]),r=t.length(),s[3][0]=t.x/r,s[3][1]=t.y/r,s[3][2]=t.z/r,s[3][3]=(i[15]+i[13])/r,t.set(i[2],i[6],i[10]),r=t.length(),s[4][0]=t.x/r,s[4][1]=t.y/r,s[4][2]=t.z/r,s[4][3]=i[14]/r,t.set(i[3]-i[2],i[7]-i[6],i[11]-i[10]),r=t.length(),s[5][0]=t.x/r,s[5][1]=t.y/r,s[5][2]=t.z/r,s[5][3]=(i[15]-i[14])/r,s}}Wt=new WeakMap,jt=new WeakMap,qt=new WeakMap,Yt=new WeakMap;class je{static{l(this,"Sampler")}constructor(e,{label:t="Sampler",name:i,addressModeU:s="repeat",addressModeV:r="repeat",magFilter:o="linear",minFilter:a="linear",mipmapFilter:h="linear",maxAnisotropy:u=1,type:d="filtering",compare:c=null}={}){this.type="Sampler",this.uuid=W(),e=I(e,t?t+" "+this.type:this.type),this.renderer=e,this.label=t,!i&&!this.renderer.production&&(i="sampler"+this.renderer.samplers.length,_(`Sampler: you are trying to create a sampler without the mandatory name parameter. A default name will be used instead: ${i}`)),this.name=i,this.options={addressModeU:s,addressModeV:r,magFilter:o,minFilter:a,mipmapFilter:h,maxAnisotropy:u,type:d,...c!==null&&{compare:c}},this.createSampler(),this.createBinding()}createSampler(){this.sampler=this.renderer.createSampler(this)}createBinding(){this.binding=new sr({label:this.label,name:this.name,bindingType:"sampler",sampler:this.sampler,type:this.options.type})}}var or=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$i"),Zn=l((n,e,t)=>(or(n,e,"read from private field"),e.get(n)),"__privateGet$f"),Jn=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$i"),Qn=l((n,e,t,i)=>(or(n,e,"write to private field"),e.set(n,t),t),"__privateSet$f"),Ht;const ar={label:"Texture",name:"renderTexture",type:"texture",access:"write",fromTexture:null,viewDimension:"2d",sampleCount:1,qualityRatio:1,generateMips:!1,flipY:!1,premultipliedAlpha:!1,autoDestroy:!0};class Z{static{l(this,"Texture")}constructor(e,t=ar){Jn(this,Ht,!0),e=I(e,t.label?t.label+" Texture":"Texture"),this.type="Texture",this.renderer=e,this.uuid=W(),this.options={...ar,...t},this.options.format==="rgba32float"&&!this.renderer.deviceManager.adapter.features.has("float32-filterable")&&(this.options.format="rgba16float"),t.fromTexture&&(this.options.format=t.fromTexture.texture.format,this.options.sampleCount=t.fromTexture.texture.sampleCount,this.options.viewDimension=t.fromTexture.options.viewDimension),this.options.format||(this.options.format=this.renderer.options.context.format),this.size=this.options.fixedSize?{width:this.options.fixedSize.width*this.options.qualityRatio,height:this.options.fixedSize.height*this.options.qualityRatio,depth:this.options.fixedSize.depth??this.options.viewDimension.indexOf("cube")!==-1?6:1}:{width:Math.floor(this.renderer.canvas.width*this.options.qualityRatio),height:Math.floor(this.renderer.canvas.height*this.options.qualityRatio),depth:this.options.viewDimension.indexOf("cube")!==-1?6:1},this.options.fixedSize&&Qn(this,Ht,!1),this.setBindings(),this.renderer.addTexture(this),this.createTexture()}copy(e){this.options.fromTexture=e,this.createTexture()}copyGPUTexture(e){this.size={width:e.width,height:e.height,depth:e.depthOrArrayLayers},this.options.format=e.format,this.options.sampleCount=e.sampleCount,this.texture=e,this.textureBinding.setFormat(this.options.format),this.textureBinding.setMultisampled(this.options.sampleCount>1),this.textureBinding.resource=this.texture}createTexture(){if(!(!this.size.width||!this.size.height)){if(this.options.fromTexture){this.copyGPUTexture(this.options.fromTexture.texture);return}this.texture?.destroy(),this.texture=this.renderer.createTexture({label:this.options.label,format:this.options.format,size:[this.size.width,this.size.height,this.size.depth??1],dimensions:this.options.viewDimension,sampleCount:this.options.sampleCount,mipLevelCount:this.options.generateMips?tr(this.size.width,this.size.height,this.size.depth??1):1,usage:Xn(this.options.usage,this.options.type)}),this.textureBinding.resource=this.texture}}uploadSource({source:e,width:t=this.size.width,height:i=this.size.height,depth:s=this.size.depth,origin:r=[0,0,0],colorSpace:o="srgb"}){this.renderer.device.queue.copyExternalImageToTexture({source:e,flipY:this.options.flipY},{texture:this.texture,premultipliedAlpha:this.options.premultipliedAlpha,origin:r,colorSpace:o},[t,i,s]),this.texture.mipLevelCount>1&&_t(this.renderer.device,this.texture)}uploadData({width:e=this.size.width,height:t=this.size.height,depth:i=this.size.depth,origin:s=[0,0,0],data:r=new Float32Array(e*t*4)}){this.renderer.device.queue.writeTexture({texture:this.texture,origin:s},r,{bytesPerRow:e*r.BYTES_PER_ELEMENT*4,rowsPerImage:t},[e,t,i]),this.texture.mipLevelCount>1&&_t(this.renderer.device,this.texture)}setBindings(){this.bindings=[new Ui({label:this.options.label+": "+this.options.name+" texture",name:this.options.name,bindingType:this.options.type,visibility:this.options.visibility,texture:this.texture,format:this.options.format,viewDimension:this.options.viewDimension,multisampled:this.options.sampleCount>1})]}get textureBinding(){return this.bindings[0]}resize(e=null){Zn(this,Ht)&&(e||(e={width:Math.floor(this.renderer.canvas.width*this.options.qualityRatio),height:Math.floor(this.renderer.canvas.height*this.options.qualityRatio),depth:1}),!(e.width===this.size.width&&e.height===this.size.height&&e.depth===this.size.depth)&&(this.size=e,this.createTexture()))}destroy(){this.renderer.removeTexture(this),this.options.fromTexture||this.texture?.destroy(),this.texture=null}}Ht=new WeakMap;class Ii{static{l(this,"Material")}constructor(e,t){this.type="Material",e=I(e,this.type),this.renderer=e,this.uuid=W();const{shaders:i,label:s,useAsyncPipeline:r,uniforms:o,storages:a,bindings:h,bindGroups:u,samplers:d,textures:c,domTextures:f}=t;this.options={shaders:i,label:s||this.constructor.name,useAsyncPipeline:r===void 0?!0:r,...o!==void 0&&{uniforms:o},...a!==void 0&&{storages:a},...h!==void 0&&{bindings:h},...u!==void 0&&{bindGroups:u},...d!==void 0&&{samplers:d},...c!==void 0&&{textures:c},...f!==void 0&&{domTextures:f}},this.bindGroups=[],this.texturesBindGroups=[],this.clonedBindGroups=[],this.setBindGroups(),this.setTextures(),this.setSamplers()}setRenderer(e){e=I(e,this.type),this.renderer=e}compileMaterial(){const e=this.texturesBindGroup.bindings.length?1:0;this.bindGroups.length>=this.inputsBindGroups.length+e||this.createBindGroups()}get ready(){return!!(this.renderer.ready&&this.pipelineEntry&&this.pipelineEntry.pipeline&&this.pipelineEntry.ready)}get cacheKey(){let e="";return this.bindGroups.forEach(t=>{t.bindings.forEach(i=>{e+=i.name+","}),e+=t.pipelineCacheKey}),e}loseContext(){for(const e of this.domTextures)e.texture=null,e.sourceUploaded=!1;for(const e of this.textures)e.texture=null;[...this.bindGroups,...this.clonedBindGroups,...this.inputsBindGroups].forEach(e=>e.loseContext()),this.pipelineEntry.pipeline=null}restoreContext(){for(const e of this.samplers)e.createSampler(),e.binding.resource=e.sampler;for(const e of this.domTextures)e.createTexture(),e.resize();for(const e of this.textures)e.resize(e.size);[...this.bindGroups,...this.clonedBindGroups,...this.inputsBindGroups].forEach(e=>{e.restoreContext()})}getShaderCode(e="full"){return this.pipelineEntry?(e=(()=>{switch(e){case"vertex":case"fragment":case"compute":case"full":return e;default:return"full"}})(),this.pipelineEntry.shaders[e].code):""}getAddedShaderCode(e="vertex"){return this.pipelineEntry?(e=(()=>{switch(e){case"vertex":case"fragment":case"compute":return e;default:return"vertex"}})(),this.pipelineEntry.shaders[e].head):""}setBindGroups(){if(this.uniforms={},this.storages={},this.inputsBindGroups=[],this.inputsBindings=new Map,this.options.uniforms||this.options.storages||this.options.bindings){const e=new Ft(this.renderer,{label:this.options.label+": Bindings bind group",uniforms:this.options.uniforms,storages:this.options.storages,bindings:this.options.bindings});this.processBindGroupBindings(e),this.inputsBindGroups.push(e),e.consumers.add(this.uuid)}this.options.bindGroups?.forEach(e=>{this.processBindGroupBindings(e),this.inputsBindGroups.push(e),e.consumers.add(this.uuid)})}get texturesBindGroup(){return this.texturesBindGroups[0]}processBindGroupBindings(e){for(const t of e.bindings)t.bindingType==="uniform"&&(this.uniforms={...this.uniforms,[t.name]:t.inputs}),t.bindingType==="storage"&&(this.storages={...this.storages,[t.name]:t.inputs}),this.inputsBindings.set(t.name,t)}createBindGroups(){this.texturesBindGroup.shouldCreateBindGroup&&(this.texturesBindGroup.setIndex(this.bindGroups.length),this.texturesBindGroup.createBindGroup(),this.bindGroups.push(this.texturesBindGroup));for(const e of this.inputsBindGroups)e.shouldCreateBindGroup&&(e.setIndex(this.bindGroups.length),e.createBindGroup(),this.bindGroups.push(e));this.options.bindGroups?.forEach(e=>{if(!e.shouldCreateBindGroup&&!this.bindGroups.find(t=>t.uuid===e.uuid)&&(e.setIndex(this.bindGroups.length),this.bindGroups.push(e)),e instanceof ki&&!this.texturesBindGroups.find(t=>t.uuid===e.uuid)){this.texturesBindGroups.push(e);for(const t of e.textures)t instanceof ke&&!this.domTextures.find(i=>i.uuid===t.uuid)?this.domTextures.push(t):t instanceof Z&&!this.textures.find(i=>i.uuid===t.uuid)&&this.textures.push(t)}})}cloneBindGroup({bindGroup:e,bindings:t=[],keepLayout:i=!0}){if(!e)return null;const s=e.clone({bindings:t,keepLayout:i});return this.clonedBindGroups.push(s),s}getBindGroupByBindingName(e=""){return(this.ready?this.bindGroups:this.inputsBindGroups).find(t=>t.bindings.find(i=>i.name===e))}destroyBindGroup(e){e.consumers.delete(this.uuid),e.consumers.size||e.destroy()}destroyBindGroups(){this.bindGroups.forEach(e=>this.destroyBindGroup(e)),this.clonedBindGroups.forEach(e=>this.destroyBindGroup(e)),this.texturesBindGroups.forEach(e=>this.destroyBindGroup(e)),this.texturesBindGroups=[],this.inputsBindGroups=[],this.bindGroups=[],this.clonedBindGroups=[]}updateBindGroups(){for(const e of this.bindGroups)this.updateBindGroup(e)}updateBindGroup(e){e.update(),e.needsPipelineFlush&&this.pipelineEntry.ready&&(this.pipelineEntry.flushPipelineEntry(this.bindGroups),e.needsPipelineFlush=!1)}getBindingByName(e=""){return this.inputsBindings.get(e)}getBufferBindingByName(e=""){const t=this.getBindingByName(e);return t&&"buffer"in t?t:void 0}shouldUpdateInputsBindings(e,t){if(!e)return;const i=this.getBindingByName(e);i&&(t?i.shouldUpdateBinding(t):Object.keys(i.inputs).forEach(s=>i.shouldUpdateBinding(s)))}setTextures(){this.domTextures=[],this.textures=[],this.texturesBindGroups.push(new ki(this.renderer,{label:this.options.label+": Textures bind group"})),this.texturesBindGroup.consumers.add(this.uuid),this.options.domTextures?.forEach(e=>{this.addTexture(e)}),this.options.textures?.forEach(e=>{this.addTexture(e)})}addTexture(e){e instanceof ke?this.domTextures.push(e):e instanceof Z&&this.textures.push(e),(this.options.shaders.vertex&&this.options.shaders.vertex.code.indexOf(e.options.name)!==-1||this.options.shaders.fragment&&this.options.shaders.fragment.code.indexOf(e.options.name)!==-1||this.options.shaders.compute&&this.options.shaders.compute.code.indexOf(e.options.name)!==-1)&&this.texturesBindGroup.addTexture(e)}destroyTexture(e){if(e.options.cache||!e.options.autoDestroy)return;const t=this.renderer.getObjectsByTexture(e);(!t||!t.some(s=>s.material.uuid!==this.uuid))&&e.destroy()}destroyTextures(){this.domTextures?.forEach(e=>this.destroyTexture(e)),this.textures?.forEach(e=>this.destroyTexture(e)),this.domTextures=[],this.textures=[]}setSamplers(){if(this.samplers=[],this.options.samplers?.forEach(t=>{this.addSampler(t)}),!this.samplers.find(t=>t.name==="defaultSampler")){const t=new je(this.renderer,{label:"Default sampler",name:"defaultSampler"});this.addSampler(t)}}addSampler(e){this.samplers.push(e),(this.options.shaders.vertex&&this.options.shaders.vertex.code.indexOf(e.name)!==-1||this.options.shaders.fragment&&this.options.shaders.fragment.code.indexOf(e.name)!==-1||this.options.shaders.compute&&this.options.shaders.compute.code.indexOf(e.name)!==-1)&&this.texturesBindGroup.addSampler(e)}async getBufferResult(e){return await e.mapBufferAsync()}async getBufferBindingResultByBindingName(e=""){const t=this.getBufferBindingByName(e);if(t&&"buffer"in t){const i=this.renderer.copyBufferToBuffer({srcBuffer:t.buffer});return await this.getBufferResult(i)}else return new Float32Array(0)}async getBufferElementResultByNames({bindingName:e,bufferElementName:t}){const i=await this.getBufferBindingResultByBindingName(e);if(!t||i.length)return i;{const s=this.getBufferBindingByName(e);return s?s.extractBufferElementDataFromBufferResult({result:i,bufferElementName:t}):i}}onBeforeRender(){this.compileMaterial();for(const e of this.domTextures)e.render();this.updateBindGroups()}setPipeline(e){this.renderer.pipelineManager.setCurrentPipeline(e,this.pipelineEntry)}setActiveBindGroups(e){this.renderer.pipelineManager.setActiveBindGroups(e,this.bindGroups)}render(e){this.ready&&(this.setPipeline(e),this.setActiveBindGroups(e))}destroy(){this.destroyBindGroups(),this.destroyTextures()}}class hr extends Ii{static{l(this,"ComputeMaterial")}constructor(e,t){const i="ComputeMaterial";e=I(e,i),super(e,t),this.type=i,this.renderer=e;let{shaders:s,dispatchSize:r}=t;(!s||!s.compute)&&(s={compute:{code:"",entryPoint:"main"}}),s.compute.code||(s.compute.code="@compute @workgroup_size(1) fn main(){}"),s.compute.entryPoint||(s.compute.entryPoint="main"),this.options={...this.options,shaders:s,...t.dispatchSize!==void 0&&{dispatchSize:t.dispatchSize}},r||(r=1),Array.isArray(r)?(r[0]=Math.ceil(r[0]??1),r[1]=Math.ceil(r[1]??1),r[2]=Math.ceil(r[2]??1)):isNaN(r)||(r=[Math.ceil(r),1,1]),this.dispatchSize=r}setPipelineEntry(){this.pipelineEntry=this.renderer.pipelineManager.createComputePipeline(this)}async compilePipelineEntry(){await this.pipelineEntry.compilePipelineEntry()}async compileMaterial(){this.ready||(super.compileMaterial(),this.pipelineEntry||this.setPipelineEntry(),this.pipelineEntry&&this.pipelineEntry.canCompile&&await this.compilePipelineEntry())}getShaderCode(e="compute"){return super.getShaderCode(e)}getAddedShaderCode(e="compute"){return super.getAddedShaderCode(e)}useCustomRender(e){e&&(this._useCustomRenderCallback=e)}render(e){if(this.ready)if(this.setPipeline(e),this._useCustomRenderCallback!==void 0)this._useCustomRenderCallback(e);else{for(const t of this.bindGroups)e.setBindGroup(t.index,t.bindGroup);e.dispatchWorkgroups(this.dispatchSize[0],this.dispatchSize[1],this.dispatchSize[2])}}copyBufferToResult(e){for(const t of this.bindGroups)t.bufferBindings.forEach(i=>{i.shouldCopyResult&&this.renderer.copyBufferToBuffer({srcBuffer:i.buffer,dstBuffer:i.resultBuffer,commandEncoder:e})})}async getComputeResult({bindingName:e="",bufferElementName:t=""}){const i=this.getBufferBindingByName(e);if(i&&"resultBuffer"in i){const s=await this.getBufferResult(i.resultBuffer);return t&&s.length?i.extractBufferElementDataFromBufferResult({result:s,bufferElementName:t}):s}else return new Float32Array(0)}}var ur=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$h"),lr=l((n,e,t)=>(ur(n,e,"read from private field"),e.get(n)),"__privateGet$e"),eo=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$h"),to=l((n,e,t,i)=>(ur(n,e,"write to private field"),e.set(n,t),t),"__privateSet$e"),ht;let io=0;class Xt{static{l(this,"ComputePass")}constructor(e,t={}){eo(this,ht,!0),this._onReadyCallback=()=>{},this._onBeforeRenderCallback=()=>{},this._onRenderCallback=()=>{},this._onAfterRenderCallback=()=>{},this._onAfterResizeCallback=()=>{};const i="ComputePass";e=I(e,t.label?`${t.label} ${i}`:i),t.label=t.label??"ComputePass "+e.computePasses?.length,this.renderer=e,this.type=i,this.uuid=W(),Object.defineProperty(this,"index",{value:io++});const{label:s,shaders:r,renderOrder:o,uniforms:a,storages:h,bindings:u,bindGroups:d,samplers:c,domTextures:f,textures:p,autoRender:g,useAsyncPipeline:y,texturesOptions:x,dispatchSize:b}=t;this.options={label:s,shaders:r,...g!==void 0&&{autoRender:g},...o!==void 0&&{renderOrder:o},...b!==void 0&&{dispatchSize:b},useAsyncPipeline:y===void 0?!0:y,texturesOptions:x},this.renderOrder=o??0,g!==void 0&&to(this,ht,g),this.userData={},this.ready=!1,this.setMaterial({label:this.options.label,shaders:this.options.shaders,uniforms:a,storages:h,bindings:u,bindGroups:d,samplers:c,textures:p,domTextures:f,useAsyncPipeline:y,dispatchSize:b}),this.addToScene(!0)}get ready(){return this._ready}set ready(e){e&&this._onReadyCallback&&this._onReadyCallback(),this._ready=e}addToScene(e=!1){e&&this.renderer.computePasses.push(this),lr(this,ht)&&this.renderer.scene.addComputePass(this)}removeFromScene(e=!1){lr(this,ht)&&this.renderer.scene.removeComputePass(this),e&&(this.renderer.computePasses=this.renderer.computePasses.filter(t=>t.uuid!==this.uuid))}setRenderer(e){if(e=e&&e.renderer||e,!e||!(e.type==="GPURenderer"||e.type==="GPUCameraRenderer"||e.type==="GPUCurtainsRenderer")){_(`${this.options.label}: Cannot set ${e} as a renderer because it is not of a valid Renderer type.`);return}this.material?.setRenderer(e),this.removeFromScene(!0),this.renderer=e,this.addToScene(!0)}setMaterial(e){this.useMaterial(new hr(this.renderer,e))}useMaterial(e){this.material=e}loseContext(){this.material.loseContext()}restoreContext(){this.material.restoreContext()}get domTextures(){return this.material?.domTextures||[]}get textures(){return this.material?.textures||[]}createDOMTexture(e){e.name||(e.name="texture"+(this.textures.length+this.domTextures.length)),e.label||(e.label=this.options.label+" "+e.name);const t=new ke(this.renderer,{...e,...this.options.texturesOptions});return this.addTexture(t),t}createTexture(e){e.name||(e.name="texture"+(this.textures.length+this.domTextures.length));const t=new Z(this.renderer,e);return this.addTexture(t),t}addTexture(e){this.material.addTexture(e)}get uniforms(){return this.material?.uniforms}get storages(){return this.material?.storages}resize(){this._onAfterResizeCallback&&this._onAfterResizeCallback()}onReady(e){return e&&(this._onReadyCallback=e),this}onBeforeRender(e){return e&&(this._onBeforeRenderCallback=e),this}onRender(e){return e&&(this._onRenderCallback=e),this}onAfterRender(e){return e&&(this._onAfterRenderCallback=e),this}useCustomRender(e){return this.material.useCustomRender(e),this}onAfterResize(e){return e&&(this._onAfterResizeCallback=e),this}onBeforeRenderPass(){this.renderer.ready&&(this._onBeforeRenderCallback&&this._onBeforeRenderCallback(),this.material.onBeforeRender(),this.material&&this.material.ready&&!this.ready&&(this.ready=!0))}onRenderPass(e){this.material.ready&&(this._onRenderCallback&&this._onRenderCallback(),this.material.render(e))}onAfterRenderPass(){this._onAfterRenderCallback&&this._onAfterRenderCallback()}render(e){this.onBeforeRenderPass(),this.renderer.ready&&(!this.renderer.production&&e.pushDebugGroup(this.options.label),this.onRenderPass(e),!this.renderer.production&&e.popDebugGroup(),this.onAfterRenderPass())}copyBufferToResult(e){this.material?.copyBufferToResult(e)}async getComputeResult({bindingName:e,bufferElementName:t}){return await this.material?.getComputeResult({bindingName:e,bufferElementName:t})}remove(){this.removeFromScene(!0),this.destroy()}destroy(){this.material?.destroy()}}ht=new WeakMap;const de=[new m,new m,new m,new m,new m,new m,new m,new m];class Be{static{l(this,"Box3")}constructor(e=new m(1/0),t=new m(-1/0)){this.min=e,this.max=t}set(e=new m(1/0),t=new m(-1/0)){return this.min.copy(e),this.max.copy(t),this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}copy(e){return this.set(e.min.clone(),e.max.clone()),this}clone(){return new Be().copy(this)}get center(){return this.max.clone().add(this.min).multiplyScalar(.5)}get size(){return this.max.clone().sub(this.min)}get radius(){return this.max.distance(this.min)*.5}applyMat4(e=new O,t=new Be){if(this.isEmpty())return this;const i=[];this.min.z===this.max.z?(i[0]=de[0].set(this.min.x,this.min.y,this.min.z).applyMat4(e),i[1]=de[2].set(this.min.x,this.max.y,this.min.z).applyMat4(e),i[2]=de[4].set(this.max.x,this.min.y,this.min.z).applyMat4(e),i[3]=de[6].set(this.max.x,this.max.y,this.min.z).applyMat4(e)):(i[0]=de[0].set(this.min.x,this.min.y,this.min.z).applyMat4(e),i[1]=de[1].set(this.min.x,this.min.y,this.max.z).applyMat4(e),i[2]=de[2].set(this.min.x,this.max.y,this.min.z).applyMat4(e),i[3]=de[3].set(this.min.x,this.max.y,this.max.z).applyMat4(e),i[4]=de[4].set(this.max.x,this.min.y,this.min.z).applyMat4(e),i[5]=de[5].set(this.max.x,this.min.y,this.max.z).applyMat4(e),i[6]=de[6].set(this.max.x,this.max.y,this.min.z).applyMat4(e),i[7]=de[7].set(this.max.x,this.max.y,this.max.z).applyMat4(e));for(let s=0,r=i.length;s<r;s++)t.min.min(i[s]),t.max.max(i[s]);return t}}const dr={top:0,right:0,bottom:0,left:0};class cr{static{l(this,"DOMFrustum")}constructor({boundingBox:e=new Be,modelViewProjectionMatrix:t=new O,containerBoundingRect:i={top:0,right:0,bottom:0,left:0,width:0,height:0,x:0,y:0},DOMFrustumMargins:s=dr,onReEnterView:r=l(()=>{},"onReEnterView"),onLeaveView:o=l(()=>{},"onLeaveView")}){this.boundingBox=e,this.clipSpaceOBB=new Be,this.modelViewProjectionMatrix=t,this.containerBoundingRect=i,this.DOMFrustumMargins={...dr,...s},this.clipSpaceBoundingRect={top:0,left:0,width:0,height:0},this.projectedBoundingRect={top:0,right:0,bottom:0,left:0,width:0,height:0,x:0,y:0},this.onReEnterView=r,this.onLeaveView=o,this.isIntersecting=!1}setContainerBoundingRect(e){this.containerBoundingRect=e}get DOMFrustumBoundingRect(){return{top:this.projectedBoundingRect.top-this.DOMFrustumMargins.top,right:this.projectedBoundingRect.right+this.DOMFrustumMargins.right,bottom:this.projectedBoundingRect.bottom+this.DOMFrustumMargins.bottom,left:this.projectedBoundingRect.left-this.DOMFrustumMargins.left}}computeClipSpaceOBB(){this.clipSpaceOBB.set(),this.boundingBox.applyMat4(this.modelViewProjectionMatrix,this.clipSpaceOBB)}setDocumentCoordsFromClipSpaceOBB(){this.computeClipSpaceOBB(),this.clipSpaceBoundingRect={top:this.clipSpaceOBB.max.y,left:this.clipSpaceOBB.min.x,width:this.clipSpaceOBB.max.x-this.clipSpaceOBB.min.x,height:this.clipSpaceOBB.max.y-this.clipSpaceOBB.min.y};const e=(this.clipSpaceOBB.min.x+1)*.5,t=(this.clipSpaceOBB.max.x+1)*.5,i=1-(this.clipSpaceOBB.min.y+1)*.5,s=1-(this.clipSpaceOBB.max.y+1)*.5,{width:r,height:o,top:a,left:h}=this.containerBoundingRect;this.projectedBoundingRect={left:e*r+h,x:e*r+h,top:s*o+a,y:s*o+a,right:t*r+h,bottom:i*o+a,width:t*r+h-(e*r+h),height:i*o+a-(s*o+a)}}setDocumentCoordsFromClipSpaceSphere(e={center:new m,radius:0}){this.clipSpaceBoundingRect={top:e.center.y+e.radius,left:e.center.x-e.radius,width:e.radius*2,height:e.radius*2};const t=(e.center.x+1)*.5,i=1-(e.center.y+1)*.5,{width:s,height:r,top:o,left:a}=this.containerBoundingRect;this.projectedBoundingRect.width=e.radius*r,this.projectedBoundingRect.height=e.radius*r,this.projectedBoundingRect.left=t*s+a-this.projectedBoundingRect.width*.5,this.projectedBoundingRect.x=this.projectedBoundingRect.left,this.projectedBoundingRect.top=i*r+o-this.projectedBoundingRect.height*.5,this.projectedBoundingRect.y=this.projectedBoundingRect.top,this.projectedBoundingRect.right=this.projectedBoundingRect.left+this.projectedBoundingRect.width,this.projectedBoundingRect.bottom=this.projectedBoundingRect.top+this.projectedBoundingRect.height}intersectsContainer(){Math.round(this.DOMFrustumBoundingRect.right)<=this.containerBoundingRect.left||Math.round(this.DOMFrustumBoundingRect.left)>=this.containerBoundingRect.left+this.containerBoundingRect.width||Math.round(this.DOMFrustumBoundingRect.bottom)<=this.containerBoundingRect.top||Math.round(this.DOMFrustumBoundingRect.top)>=this.containerBoundingRect.top+this.containerBoundingRect.height?(this.isIntersecting&&this.onLeaveView(),this.isIntersecting=!1):(this.isIntersecting||this.onReEnterView(),this.isIntersecting=!0)}}class Vi{static{l(this,"Geometry")}constructor({verticesOrder:e="ccw",topology:t="triangle-list",instancesCount:i=1,vertexBuffers:s=[],mapBuffersAtCreation:r=!0}={}){this.verticesCount=0,this.verticesOrder=e,this.topology=t,this.instancesCount=i,this.ready=!1,this.boundingBox=new Be,this.type="Geometry",this.uuid=W(),this.indirectDraw=null,this.vertexBuffers=[],this.consumers=new Set,this.options={verticesOrder:e,topology:t,instancesCount:i,vertexBuffers:s,mapBuffersAtCreation:r};const o=s.find(a=>a.name==="attributes");!s.length||!o?this.addVertexBuffer({name:"attributes"}):o&&s.sort((a,h)=>{const u=a.name!=="attributes"?1/0:-1,d=h.name!=="attributes"?1/0:-1;return u-d});for(const a of s)this.addVertexBuffer({stepMode:a.stepMode??"vertex",name:a.name,attributes:a.attributes,...a.array&&{array:a.array},...a.buffer&&{buffer:a.buffer},...a.bufferOffset&&{bufferOffset:a.bufferOffset},...a.bufferSize&&{bufferSize:a.bufferSize}});o&&this.setWGSLFragment()}loseContext(){this.ready=!1;for(const e of this.vertexBuffers)e.buffer.destroy()}restoreContext(e){if(!this.ready){for(const t of this.vertexBuffers)!t.buffer.GPUBuffer&&t.buffer.consumers.size===0&&(t.buffer.createBuffer(e),this.uploadBuffer(e,t)),t.buffer.consumers.add(this.uuid);this.ready=!0}}addVertexBuffer({stepMode:e="vertex",name:t,attributes:i=[],buffer:s=null,array:r=null,bufferOffset:o=0,bufferSize:a=null}={}){s=s||new Fe;const h={name:t??"attributes"+this.vertexBuffers.length,stepMode:e,arrayStride:0,bufferLength:0,attributes:[],buffer:s,array:r,bufferOffset:o,bufferSize:a};return i?.forEach(u=>{this.setAttribute({vertexBuffer:h,...u})}),this.vertexBuffers.push(h),h}getVertexBufferByName(e=""){return this.vertexBuffers.find(t=>t.name===e)}setAttribute({vertexBuffer:e=this.vertexBuffers[0],name:t,type:i="vec3f",bufferFormat:s="float32x3",size:r=3,array:o=new Float32Array(this.verticesCount*r),verticesStride:a=1}){const h=e.attributes,u=h.length;t||(t="geometryAttribute"+u),t==="position"&&(i!=="vec3f"||s!=="float32x3"||r!==3)&&(_(`Geometry 'position' attribute must have this exact properties set:
	type: 'vec3f',
	bufferFormat: 'float32x3',
	size: 3`),i="vec3f",s="float32x3",r=3);let d=o.length;const c=d/r;t==="position"&&(this.verticesCount=c),e.stepMode==="vertex"&&this.verticesCount&&this.verticesCount!==c*a?ie(`Geometry vertex attribute error. Attribute array of size ${r} must be of length: ${this.verticesCount*r}, current given: ${o.length}. (${this.verticesCount} vertices).`):e.stepMode==="instance"&&c!==this.instancesCount&&(e.buffer?d=this.instancesCount*r:ie(`Geometry instance attribute error. Attribute array of size ${r} must be of length: ${this.instancesCount*r}, current given: ${o.length}. (${this.instancesCount} instances).`));const f={name:t,type:i,bufferFormat:s,size:r,bufferLength:d,offset:u?h.reduce((p,g)=>p+g.bufferLength,0):0,bufferOffset:u?h[u-1].bufferOffset+h[u-1].size*4:0,array:o,verticesStride:a};e.bufferLength+=f.bufferLength*a,e.arrayStride+=f.size,e.attributes.push(f)}get shouldCompute(){return this.vertexBuffers.length&&!this.vertexBuffers[0].array}getAttributeByName(e){let t;for(const i of this.vertexBuffers)if(t=i.attributes.find(s=>s.name===e),t)break;return t}computeGeometry(){this.ready||(this.vertexBuffers.forEach((e,t)=>{if(t===0){const r=e.attributes.find(o=>o.name==="position");r||ie("Geometry must have a 'position' attribute"),(r.type!=="vec3f"||r.bufferFormat!=="float32x3"||r.size!==3)&&(_(`Geometry 'position' attribute must have this exact properties set:
	type: 'vec3f',
	bufferFormat: 'float32x3',
	size: 3`),r.type="vec3f",r.bufferFormat="float32x3",r.size=3)}e.array=new Float32Array(e.bufferLength);let i=0,s=0;for(let r=0;r<e.bufferLength;r+=e.arrayStride){for(let o=0;o<e.attributes.length;o++){const{name:a,size:h,array:u,verticesStride:d}=e.attributes[o];for(let c=0;c<h;c++){const f=u[Math.floor(s/d)*h+c];e.array[i]=f??0,a==="position"&&(c%3===0?(this.boundingBox.min.x>f&&(this.boundingBox.min.x=f),this.boundingBox.max.x<f&&(this.boundingBox.max.x=f)):c%3===1?(this.boundingBox.min.y>f&&(this.boundingBox.min.y=f),this.boundingBox.max.y<f&&(this.boundingBox.max.y=f)):c%3===2&&(this.boundingBox.min.z>f&&(this.boundingBox.min.z=f),this.boundingBox.max.z<f&&(this.boundingBox.max.z=f))),i++}}s++}}),this.wgslStructFragment||this.setWGSLFragment())}setWGSLFragment(){let e=-1;this.wgslStructFragment=`struct Attributes {
	@builtin(vertex_index) vertexIndex : u32,
	@builtin(instance_index) instanceIndex : u32,${this.vertexBuffers.map(t=>t.attributes.map(i=>(e++,`
	@location(${e}) ${i.name}: ${i.type}`))).join(",")}
};`,this.layoutCacheKey=this.vertexBuffers.map(t=>t.name+","+t.attributes.map(i=>`${i.name},${i.size}`)).join(",")+","}createBuffers({renderer:e,label:t=this.type}){if(!this.ready){for(const i of this.vertexBuffers)i.bufferSize||(i.bufferSize=i.array.length*i.array.constructor.BYTES_PER_ELEMENT),!i.buffer.GPUBuffer&&!i.buffer.consumers.size&&(i.buffer.createBuffer(e,{label:t+": "+i.name+" buffer",size:i.bufferSize,usage:this.options.mapBuffersAtCreation?["vertex"]:["copyDst","vertex"],mappedAtCreation:this.options.mapBuffersAtCreation}),this.uploadBuffer(e,i)),i.buffer.consumers.add(this.uuid);this.ready=!0}}uploadBuffer(e,t){this.options.mapBuffersAtCreation?(new t.array.constructor(t.buffer.GPUBuffer.getMappedRange()).set(t.array),t.buffer.GPUBuffer.unmap()):e.queueWriteBuffer(t.buffer.GPUBuffer,0,t.array)}useIndirectBuffer({buffer:e,offset:t=0}){this.indirectDraw={buffer:e,offset:t}}setGeometryBuffers(e){this.vertexBuffers.forEach((t,i)=>{e.setVertexBuffer(i,t.buffer.GPUBuffer,t.bufferOffset,t.bufferSize)})}drawGeometry(e){this.indirectDraw&&this.indirectDraw.buffer&&this.indirectDraw.buffer.GPUBuffer?e.drawIndirect(this.indirectDraw.buffer.GPUBuffer,this.indirectDraw.offset):e.draw(this.verticesCount,this.instancesCount)}render(e){this.ready&&(this.setGeometryBuffers(e),this.drawGeometry(e))}destroy(e=null){this.ready=!1;for(const t of this.vertexBuffers)t.buffer.consumers.delete(this.uuid),t.buffer.consumers.size||t.buffer.destroy(),t.array=null,e&&e.removeBuffer(t.buffer)}}class ut extends Vi{static{l(this,"IndexedGeometry")}constructor({verticesOrder:e="ccw",topology:t="triangle-list",instancesCount:i=1,vertexBuffers:s=[],mapBuffersAtCreation:r=!0}={}){super({verticesOrder:e,topology:t,instancesCount:i,vertexBuffers:s,mapBuffersAtCreation:r}),this.type="IndexedGeometry"}loseContext(){super.loseContext(),this.indexBuffer&&this.indexBuffer.buffer.destroy()}restoreContext(e){this.ready||(this.indexBuffer.buffer.GPUBuffer||(this.indexBuffer.buffer.createBuffer(e),this.uploadBuffer(e,this.indexBuffer),this.indexBuffer.buffer.consumers.add(this.uuid)),super.restoreContext(e))}get useUint16IndexArray(){return this.verticesCount<256*256}setIndexBuffer({bufferFormat:e="uint32",array:t=new Uint32Array(0),buffer:i=new Fe,bufferOffset:s=0,bufferSize:r=null}){this.indexBuffer={array:t,bufferFormat:e,bufferLength:t.length,buffer:i,bufferOffset:s,bufferSize:r!==null?r:t.length*t.constructor.BYTES_PER_ELEMENT}}createBuffers({renderer:e,label:t=this.type}){this.indexBuffer.buffer.GPUBuffer||(this.indexBuffer.buffer.createBuffer(e,{label:t+": index buffer",size:this.indexBuffer.array.byteLength,usage:this.options.mapBuffersAtCreation?["index"]:["copyDst","index"],mappedAtCreation:this.options.mapBuffersAtCreation}),this.uploadBuffer(e,this.indexBuffer)),this.indexBuffer.buffer.consumers.add(this.uuid),super.createBuffers({renderer:e,label:t})}setGeometryBuffers(e){super.setGeometryBuffers(e),e.setIndexBuffer(this.indexBuffer.buffer.GPUBuffer,this.indexBuffer.bufferFormat,this.indexBuffer.bufferOffset,this.indexBuffer.bufferSize)}drawGeometry(e){this.indirectDraw&&this.indirectDraw.buffer&&this.indirectDraw.buffer.GPUBuffer?e.drawIndexedIndirect(this.indirectDraw.buffer.GPUBuffer,this.indirectDraw.offset):e.drawIndexed(this.indexBuffer.bufferLength,this.instancesCount)}destroy(e=null){super.destroy(e),this.indexBuffer&&(this.indexBuffer.buffer.consumers.delete(this.uuid),this.indexBuffer.buffer.destroy(),e&&e.removeBuffer(this.indexBuffer.buffer))}}class Ni extends ut{static{l(this,"PlaneGeometry")}constructor({widthSegments:e=1,heightSegments:t=1,instancesCount:i=1,vertexBuffers:s=[],topology:r}={}){super({verticesOrder:"ccw",topology:r,instancesCount:i,vertexBuffers:s,mapBuffersAtCreation:!0}),this.type="PlaneGeometry",e=Math.floor(e),t=Math.floor(t),this.definition={id:e*t+e,width:e,height:t,count:e*t};const o=(this.definition.width+1)*(this.definition.height+1),a=this.getIndexedVerticesAndUVs(o);for(const h of Object.values(a))this.setAttribute(h);this.setIndexArray()}setIndexArray(){const e=this.useUint16IndexArray?new Uint16Array(this.definition.count*6):new Uint32Array(this.definition.count*6);let t=0;for(let i=0;i<this.definition.height;i++)for(let s=0;s<this.definition.width;s++)e[t++]=s+i*(this.definition.width+1),e[t++]=this.definition.width+s+1+i*(this.definition.width+1),e[t++]=s+1+i*(this.definition.width+1),e[t++]=s+1+i*(this.definition.width+1),e[t++]=this.definition.width+s+1+i*(this.definition.width+1),e[t++]=this.definition.width+s+2+i*(this.definition.width+1);this.setIndexBuffer({array:e,bufferFormat:this.useUint16IndexArray?"uint16":"uint32"})}getIndexedVerticesAndUVs(e){const t={name:"uv",type:"vec2f",bufferFormat:"float32x2",size:2,array:new Float32Array(e*2)},i={name:"position",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(e*3)},s={name:"normal",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(e*3)};let r=0,o=0,a=0;for(let h=0;h<=this.definition.height;h++)for(let u=0;u<=this.definition.width;u++)t.array[a++]=1-u/this.definition.width,t.array[a++]=1-h/this.definition.height,i.array[r++]=1-u*2/this.definition.width,i.array[r++]=h*2/this.definition.height-1,i.array[r++]=0,s.array[o++]=0,s.array[o++]=0,s.array[o++]=1;return{position:i,uv:t,normal:s}}}var pr=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$g"),Kt=l((n,e,t)=>(pr(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$d"),fr=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$g"),mr=l((n,e,t,i)=>(pr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$d"),Zt,qe;class Wi extends we{static{l(this,"Light")}constructor(e,{color:t=new m(1),intensity:i=1,type:s="lights"}={}){super(),fr(this,Zt,void 0),fr(this,qe,void 0),this.type=s,this.setRenderer(e),this.uuid=W(),this.options={color:t,intensity:i},this.color=t,mr(this,qe,this.color.clone()),this.color.onChange(()=>this.onPropertyChanged("color",Kt(this,qe).copy(this.color).multiplyScalar(this.intensity))),this.intensity=i}setRenderer(e){const t=!!this.renderer;this.renderer&&this.renderer.removeLight(this),e=Oe(e,this.constructor.name),this.renderer=e,this.index=this.renderer.lights.filter(i=>i.type===this.type).length,this.index+1>this.renderer.lightsBindingParams[this.type].max&&this.onMaxLightOverflow(this.type),this.renderer.addLight(this),this.setRendererBinding(),t&&this.reset()}setRendererBinding(){this.renderer.bindings[this.type]&&(this.rendererBinding=this.renderer.bindings[this.type])}reset(){this.setRendererBinding(),this.onPropertyChanged("color",Kt(this,qe).copy(this.color).multiplyScalar(this.intensity))}get intensity(){return Kt(this,Zt)}set intensity(e){mr(this,Zt,e),this.onPropertyChanged("color",Kt(this,qe).copy(this.color).multiplyScalar(this.intensity))}onPropertyChanged(e,t){this.rendererBinding&&this.rendererBinding.inputs[e]&&(t instanceof m?(this.rendererBinding.inputs[e].value[this.index*3]=t.x,this.rendererBinding.inputs[e].value[this.index*3+1]=t.y,this.rendererBinding.inputs[e].value[this.index*3+2]=t.z):this.rendererBinding.inputs[e].value[this.index]=t,this.rendererBinding.inputs[e].shouldUpdate=!0,this.renderer.shouldUpdateCameraLightsBindGroup())}onMaxLightOverflow(e){this.renderer.onMaxLightOverflow(e),this.rendererBinding&&(this.rendererBinding=this.renderer.bindings[e])}remove(){this.renderer.removeLight(this),this.destroy()}destroy(){super.destroy()}}Zt=new WeakMap,qe=new WeakMap;class so extends Wi{static{l(this,"AmbientLight")}constructor(e,{color:t=new m(1),intensity:i=.1}={}){super(e,{color:t,intensity:i,type:"ambientLights"})}applyRotation(){}applyPosition(){}applyScale(){}applyTransformOrigin(){}}class Jt{static{l(this,"RenderPass")}constructor(e,{label:t="Render Pass",sampleCount:i=4,qualityRatio:s=1,useColorAttachments:r=!0,renderToSwapChain:o=!0,colorAttachments:a=[],useDepth:h=!0,depthTexture:u=null,depthLoadOp:d="clear",depthStoreOp:c="store",depthClearValue:f=1,depthFormat:p="depth24plus"}={}){if(e=I(e,"RenderPass"),this.type="RenderPass",this.uuid=W(),this.renderer=e,r){const g={loadOp:"clear",storeOp:"store",clearValue:[0,0,0,0],targetFormat:this.renderer.options.context.format};a.length?a=a.map(y=>({...g,...y})):a=[g]}this.options={label:t,sampleCount:i,qualityRatio:s,useColorAttachments:r,renderToSwapChain:o,colorAttachments:a,useDepth:h,...u!==void 0&&{depthTexture:u},depthLoadOp:d,depthStoreOp:c,depthClearValue:f,depthFormat:p},this.options.useDepth&&this.createDepthTexture(),this.viewTextures=[],this.resolveTargets=[],this.options.useColorAttachments&&(!this.options.renderToSwapChain||this.options.sampleCount>1)&&(this.createViewTextures(),this.createResolveTargets()),this.setRenderPassDescriptor()}createDepthTexture(){this.options.depthTexture?(this.depthTexture=this.options.depthTexture,this.options.depthFormat=this.options.depthTexture.options.format):this.depthTexture=new Z(this.renderer,{label:this.options.label+" depth texture",name:"depthTexture",format:this.options.depthFormat,sampleCount:this.options.sampleCount,qualityRatio:this.options.qualityRatio,type:"depth",usage:["renderAttachment","textureBinding"]})}createViewTextures(){this.options.colorAttachments.forEach((e,t)=>{this.viewTextures.push(new Z(this.renderer,{label:`${this.options.label} colorAttachment[${t}] view texture`,name:`colorAttachment${t}ViewTexture`,format:e.targetFormat,sampleCount:this.options.sampleCount,qualityRatio:this.options.qualityRatio,type:"texture",usage:["copySrc","copyDst","renderAttachment","textureBinding"]}))})}createResolveTargets(){this.options.sampleCount>1&&this.options.colorAttachments.forEach((e,t)=>{this.resolveTargets.push(this.options.renderToSwapChain&&t===0?null:new Z(this.renderer,{label:`${this.options.label} resolve target[${t}] texture`,name:`resolveTarget${t}Texture`,format:e.targetFormat,sampleCount:1,qualityRatio:this.options.qualityRatio,type:"texture"}))})}get outputTextures(){return this.options.sampleCount>1?this.resolveTargets:this.viewTextures}setRenderPassDescriptor(e=null){this.descriptor={label:this.options.label+" descriptor",colorAttachments:this.options.colorAttachments.map((t,i)=>({view:this.viewTextures[i]?.texture.createView({label:this.viewTextures[i]?.texture.label+" view"}),...this.resolveTargets.length&&{resolveTarget:this.resolveTargets[i]?.texture.createView({label:this.resolveTargets[i]?.texture.label+" view"})},clearValue:t.clearValue,loadOp:t.loadOp,storeOp:t.storeOp})),...this.options.useDepth&&{depthStencilAttachment:{view:e||this.depthTexture.texture.createView({label:this.depthTexture.texture.label+" view"}),depthClearValue:this.options.depthClearValue,depthLoadOp:this.options.depthLoadOp,depthStoreOp:this.options.depthStoreOp}}}}resize(){this.options.useDepth&&(this.descriptor.depthStencilAttachment.view=this.depthTexture.texture.createView({label:this.depthTexture.options.label+" view"})),this.viewTextures.forEach((e,t)=>{this.descriptor.colorAttachments[t].view=e.texture.createView({label:e.options.label+" view"})}),this.resolveTargets.forEach((e,t)=>{e&&(this.descriptor.colorAttachments[t].resolveTarget=e.texture.createView({label:e.options.label+" view"}))})}setLoadOp(e="clear",t=0){this.options.useColorAttachments&&(this.options.colorAttachments[t]&&(this.options.colorAttachments[t].loadOp=e),this.descriptor&&this.descriptor.colorAttachments&&this.descriptor.colorAttachments[t]&&(this.descriptor.colorAttachments[t].loadOp=e))}setDepthLoadOp(e="clear"){this.options.depthLoadOp=e,this.options.useDepth&&this.descriptor.depthStencilAttachment&&(this.descriptor.depthStencilAttachment.depthLoadOp=e)}setClearValue(e=[0,0,0,0],t=0){if(this.options.useColorAttachments){if(this.renderer.options.context.alphaMode==="premultiplied"){const i=e[3];e[0]=Math.min(e[0],i),e[1]=Math.min(e[1],i),e[2]=Math.min(e[2],i)}this.options.colorAttachments[t]&&(this.options.colorAttachments[t].clearValue=e),this.descriptor&&this.descriptor.colorAttachments&&this.descriptor.colorAttachments[t]&&(this.descriptor.colorAttachments[t].clearValue=e)}}updateView(e=null){return!this.options.colorAttachments.length||!this.options.renderToSwapChain||(e||(e=this.renderer.context.getCurrentTexture(),e.label=`${this.renderer.type} context current texture`),this.options.sampleCount>1?(this.descriptor.colorAttachments[0].view=this.viewTextures[0].texture.createView({label:this.viewTextures[0].options.label+" view"}),this.descriptor.colorAttachments[0].resolveTarget=e.createView({label:e.label+" resolve target view"})):this.descriptor.colorAttachments[0].view=e.createView({label:e.label+" view"})),e}destroy(){this.viewTextures.forEach(e=>e.destroy()),this.resolveTargets.forEach(e=>e?.destroy()),!this.options.depthTexture&&this.depthTexture&&this.depthTexture.destroy()}}var gr=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$f"),yr=l((n,e,t)=>(gr(n,e,"read from private field"),e.get(n)),"__privateGet$c"),ro=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$f"),no=l((n,e,t,i)=>(gr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$c"),lt;class ji{static{l(this,"RenderTarget")}constructor(e,t={}){ro(this,lt,!0),e=I(e,"RenderTarget"),this.type="RenderTarget",this.renderer=e,this.uuid=W();const{label:i,colorAttachments:s,depthTexture:r,autoRender:o,...a}=t,h=r||(this.renderer.renderPass.options.sampleCount===(t.sampleCount??4)?this.renderer.renderPass.depthTexture:null);this.options={label:i,...a,...h&&{depthTexture:h},...s&&{colorAttachments:s},autoRender:o===void 0?!0:o},o!==void 0&&no(this,lt,o),this.renderPass=new Jt(this.renderer,{label:this.options.label?`${this.options.label} Render Pass`:"Render Target Render Pass",...s&&{colorAttachments:s},depthTexture:this.options.depthTexture,...a}),a.useColorAttachments!==!1&&(this.renderTexture=new Z(this.renderer,{label:this.options.label?`${this.options.label} Render Texture`:"Render Target render texture",name:"renderTexture",format:s&&s.length&&s[0].targetFormat?s[0].targetFormat:this.renderer.options.context.format,...this.options.qualityRatio!==void 0&&{qualityRatio:this.options.qualityRatio},usage:["copySrc","renderAttachment","textureBinding"]})),this.addToScene()}get outputTextures(){return this.renderPass.outputTextures.length?this.renderPass.outputTextures.map((e,t)=>t===0&&this.renderPass.options.renderToSwapChain?this.renderTexture:e):this.renderTexture?[this.renderTexture]:[]}addToScene(){this.renderer.renderTargets.push(this),yr(this,lt)&&this.renderer.scene.addRenderTarget(this)}removeFromScene(){yr(this,lt)&&this.renderer.scene.removeRenderTarget(this),this.renderer.renderTargets=this.renderer.renderTargets.filter(e=>e.uuid!==this.uuid)}resize(){this.options.depthTexture&&(this.renderPass.options.depthTexture.texture=this.options.depthTexture.texture),this.renderPass?.resize()}remove(){this.destroy()}destroy(){this.renderer.meshes.forEach(e=>{e.outputTarget&&e.outputTarget.uuid===this.uuid&&e.setOutputTarget(null)}),this.renderer.shaderPasses.forEach(e=>{e.outputTarget&&e.outputTarget.uuid===this.uuid&&(e.outputTarget=null,e.setOutputTarget(null))}),this.removeFromScene(),this.renderPass?.destroy(),this.renderTexture?.destroy()}}lt=new WeakMap;let oo=0;class qi{static{l(this,"PipelineEntry")}constructor(e){this.type="PipelineEntry";let{renderer:t}=e;const{label:i,shaders:s,useAsync:r,bindGroups:o,cacheKey:a}=e;t=I(t,i?i+" "+this.type:this.type),this.renderer=t,Object.defineProperty(this,"index",{value:oo++}),this.layout=null,this.pipeline=null,this.status={compiling:!1,compiled:!1,error:null},this.options={label:i,shaders:s,useAsync:r!==void 0?r:!0,bindGroups:o,cacheKey:a},this.bindGroups=o}get ready(){return!this.status.compiling&&this.status.compiled&&!this.status.error}get canCompile(){return!this.status.compiling&&!this.status.compiled&&!this.status.error}createShaderModule({code:e="",type:t="vertex"}){const i=this.renderer.createShaderModule({label:this.options.label+": "+t+" shader module",code:e});return"getCompilationInfo"in i&&!this.renderer.production&&i.getCompilationInfo().then(s=>{for(const r of s.messages){let o="";switch(r.lineNum&&(o+=`Line ${r.lineNum}:${r.linePos} - ${e.substring(r.offset,r.offset+r.length)}
`),o+=r.message,r.type){case"error":console.error(`${this.options.label} compilation error:
${o}`);break;case"warning":console.warn(`${this.options.label} compilation warning:
${o}`);break;case"info":console.log(`${this.options.label} compilation information:
${o}`);break}}}),i}createShaders(){}createPipelineLayout(){this.layout=this.renderer.createPipelineLayout({label:this.options.label+" layout",bindGroupLayouts:this.bindGroups.map(e=>e.bindGroupLayout)})}createPipelineDescriptor(){}flushPipelineEntry(e=[]){this.status.compiling=!1,this.status.compiled=!1,this.status.error=null,this.bindGroups=e,this.compilePipelineEntry()}compilePipelineEntry(){this.status.compiling=!0,this.createShaders(),this.createPipelineLayout(),this.createPipelineDescriptor()}}var ao=`
fn getWorldPosition(position: vec3f) -> vec4f {
  return matrices.model * vec4f(position, 1.0);
}

fn getOutputPosition(position: vec3f) -> vec4f {
  return camera.projection * matrices.modelView * vec4f(position, 1.0);
}`,ho=`
fn getWorldNormal(normal: vec3f) -> vec3f {
  return normalize(matrices.normal * normal);
}

fn getViewNormal(normal: vec3f) -> vec3f {
  return normalize((camera.view * vec4(matrices.normal * normal, 0.0)).xyz);
}`,xr=`
fn getUVCover(uv: vec2f, textureMatrix: mat4x4f) -> vec2f {
  return (textureMatrix * vec4f(uv, 0.0, 1.0)).xy;
}`,uo=`
fn getVertex2DToUVCoords(vertex: vec2f) -> vec2f {
  return vec2(
    vertex.x * 0.5 + 0.5,
    0.5 - vertex.y * 0.5
  );
}

fn getVertex3DToUVCoords(vertex: vec3f) -> vec2f {
  return getVertex2DToUVCoords( vec2(vertex.x, vertex.y) );
}
`;const Ie={vertex:{get_uv_cover:xr},fragment:{get_uv_cover:xr,get_vertex_to_uv_coords:uo}},Ve={vertex:{get_output_position:ao,get_normals:ho},fragment:{}};class Ye extends qi{static{l(this,"RenderPipelineEntry")}constructor(e){let{renderer:t,...i}=e;const{label:s,attributes:r,bindGroups:o,cacheKey:a,...h}=i,u="RenderPipelineEntry";I(t,s?s+" "+u:u),super(e),this.type=u,this.shaders={vertex:{head:"",code:"",module:null},fragment:{head:"",code:"",module:null},full:{head:"",code:"",module:null}},this.descriptor=null,this.options={...this.options,attributes:r,...h},this.attributes=r}patchShaders(){this.shaders.vertex.head="",this.shaders.vertex.code="",this.shaders.fragment.head="",this.shaders.fragment.code="",this.shaders.full.head="",this.shaders.full.code="";for(const t in Ie.vertex)this.shaders.vertex.head=`${Ie.vertex[t]}
${this.shaders.vertex.head}`,this.shaders.full.head=`${Ie.vertex[t]}
${this.shaders.full.head}`;if(this.options.shaders.fragment)for(const t in Ie.fragment)this.shaders.fragment.head=`${Ie.fragment[t]}
${this.shaders.fragment.head}`,this.shaders.full.head.indexOf(Ie.fragment[t])===-1&&(this.shaders.full.head=`${Ie.fragment[t]}
${this.shaders.full.head}`);if(this.options.rendering.useProjection){for(const t in Ve.vertex)this.shaders.vertex.head=`${Ve.vertex[t]}
${this.shaders.vertex.head}`,this.shaders.full.head=`${Ve.vertex[t]}
${this.shaders.full.head}`;if(this.options.shaders.fragment)for(const t in Ve.fragment)this.shaders.fragment.head=`${Ve.fragment[t]}
${this.shaders.fragment.head}`,this.shaders.full.head.indexOf(Ve.fragment[t])===-1&&(this.shaders.full.head=`${Ve.fragment[t]}
${this.shaders.full.head}`)}const e=[];for(const t of this.bindGroups){let i=0;t.bindings.forEach((s,r)=>{s.wgslGroupFragment.forEach((o,a)=>{e.push({groupIndex:t.index,visibility:s.options.visibility,bindIndex:i,wgslStructFragment:s.wgslStructFragment,wgslGroupFragment:o,newLine:r===t.bindings.length-1&&a===s.wgslGroupFragment.length-1}),i++})})}for(const t of e)t.visibility.includes("vertex")&&(t.wgslStructFragment&&this.shaders.vertex.head.indexOf(t.wgslStructFragment)===-1&&(this.shaders.vertex.head=`
${t.wgslStructFragment}
${this.shaders.vertex.head}`),this.shaders.vertex.head.indexOf(t.wgslGroupFragment)===-1&&(this.shaders.vertex.head=`${this.shaders.vertex.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`,t.newLine&&(this.shaders.vertex.head+=`
`))),this.options.shaders.fragment&&t.visibility.includes("fragment")&&(t.wgslStructFragment&&this.shaders.fragment.head.indexOf(t.wgslStructFragment)===-1&&(this.shaders.fragment.head=`
${t.wgslStructFragment}
${this.shaders.fragment.head}`),this.shaders.fragment.head.indexOf(t.wgslGroupFragment)===-1&&(this.shaders.fragment.head=`${this.shaders.fragment.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`,t.newLine&&(this.shaders.fragment.head+=`
`))),t.wgslStructFragment&&this.shaders.full.head.indexOf(t.wgslStructFragment)===-1&&(this.shaders.full.head=`
${t.wgslStructFragment}
${this.shaders.full.head}`),this.shaders.full.head.indexOf(t.wgslGroupFragment)===-1&&(this.shaders.full.head=`${this.shaders.full.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`,t.newLine&&(this.shaders.full.head+=`
`));this.shaders.vertex.head=`${this.attributes.wgslStructFragment}
${this.shaders.vertex.head}`,this.shaders.full.head=`${this.attributes.wgslStructFragment}
${this.shaders.full.head}`,this.shaders.vertex.code=this.shaders.vertex.head+this.options.shaders.vertex.code,typeof this.options.shaders.fragment=="object"&&(this.shaders.fragment.code=this.shaders.fragment.head+this.options.shaders.fragment.code),typeof this.options.shaders.fragment=="object"&&(this.options.shaders.vertex.entryPoint!==this.options.shaders.fragment.entryPoint&&this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code)===0?this.shaders.full.code=this.shaders.full.head+this.options.shaders.vertex.code:this.shaders.full.code=this.shaders.full.head+this.options.shaders.vertex.code+this.options.shaders.fragment.code)}get shadersModulesReady(){return!(!this.shaders.vertex.module||this.options.shaders.fragment&&!this.shaders.fragment.module)}createShaders(){this.patchShaders();const e=typeof this.options.shaders.fragment=="object"&&this.options.shaders.vertex.entryPoint!==this.options.shaders.fragment.entryPoint&&this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code)===0;this.shaders.vertex.module=this.createShaderModule({code:this.shaders[e?"full":"vertex"].code,type:"vertex"}),this.options.shaders.fragment&&(this.shaders.fragment.module=this.createShaderModule({code:this.shaders[e?"full":"fragment"].code,type:"fragment"}))}static getDefaultTransparentBlending(){return{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha"}}}createPipelineDescriptor(){if(!this.shadersModulesReady)return;let e=-1;this.options.rendering.targets.length?this.options.rendering.transparent&&(this.options.rendering.targets[0].blend=this.options.rendering.targets[0].blend?this.options.rendering.targets[0].blend:Ye.getDefaultTransparentBlending()):this.options.rendering.targets=[],this.descriptor={label:this.options.label,layout:this.layout,vertex:{module:this.shaders.vertex.module,entryPoint:this.options.shaders.vertex.entryPoint,buffers:this.attributes.vertexBuffers.map(t=>({stepMode:t.stepMode,arrayStride:t.arrayStride*4,attributes:t.attributes.map(i=>(e++,{shaderLocation:e,offset:i.bufferOffset,format:i.bufferFormat}))}))},...this.options.shaders.fragment&&{fragment:{module:this.shaders.fragment.module,entryPoint:this.options.shaders.fragment.entryPoint,targets:this.options.rendering.targets}},primitive:{topology:this.options.rendering.topology,frontFace:this.options.rendering.verticesOrder,cullMode:this.options.rendering.cullMode},...this.options.rendering.depth&&{depthStencil:{depthWriteEnabled:this.options.rendering.depthWriteEnabled,depthCompare:this.options.rendering.depthCompare,format:this.options.rendering.depthFormat}},...this.options.rendering.sampleCount>1&&{multisample:{count:this.options.rendering.sampleCount}}}}createRenderPipeline(){if(this.shadersModulesReady)try{this.pipeline=this.renderer.createRenderPipeline(this.descriptor)}catch(e){this.status.error=e,ie(e)}}async createRenderPipelineAsync(){if(this.shadersModulesReady)try{this.pipeline=await this.renderer.createRenderPipelineAsync(this.descriptor),this.status.compiled=!0,this.status.compiling=!1,this.status.error=null}catch(e){this.status.error=e,ie(e)}}async compilePipelineEntry(){super.compilePipelineEntry(),this.options.useAsync?await this.createRenderPipelineAsync():(this.createRenderPipeline(),this.status.compiled=!0,this.status.compiling=!1,this.status.error=null)}}const vr=l((n={},e={})=>Object.keys(n).filter(t=>Array.isArray(n[t])?JSON.stringify(n[t])!==JSON.stringify(e[t]):n[t]!==e[t]),"compareRenderingOptions");var Yi=`
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
  @location(1) normal: vec3f,
  @location(2) worldPosition: vec3f,
  @location(3) viewDirection: vec3f,
};

@vertex fn main(
  attributes: Attributes,
) -> VSOutput {
  var vsOutput: VSOutput;

  vsOutput.position = getOutputPosition(attributes.position);
  vsOutput.uv = attributes.uv;
  vsOutput.normal = getWorldNormal(attributes.normal);
  vsOutput.worldPosition = getWorldPosition(attributes.position).xyz;
  vsOutput.viewDirection = camera.position - vsOutput.worldPosition;
  
  return vsOutput;
}`,Hi=`
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
};

@vertex fn main(
  attributes: Attributes,
) -> VSOutput {
  var vsOutput: VSOutput;

  vsOutput.position = vec4f(attributes.position, 1.0);
  vsOutput.uv = attributes.uv;
  
  return vsOutput;
}`,Xi=`
@fragment fn main() -> @location(0) vec4f {
  return vec4(0.0, 0.0, 0.0, 1.0);
}`;class Ki extends Ii{static{l(this,"RenderMaterial")}constructor(e,t){const i="RenderMaterial";e=I(e,i),t.shaders||(t.shaders={}),t.shaders?.vertex||(t.shaders.vertex={code:t.useProjection?Yi:Hi,entryPoint:"main"}),t.shaders.vertex.entryPoint||(t.shaders.vertex.entryPoint="main"),t.shaders.fragment===void 0&&(t.shaders.fragment={entryPoint:"main",code:Xi}),super(e,t),this.type=i,this.renderer=e;const{shaders:s}=t,{useProjection:r,transparent:o,depth:a,depthWriteEnabled:h,depthCompare:u,depthFormat:d,cullMode:c,sampleCount:f,verticesOrder:p,topology:g}=t;let{targets:y}=t;y===void 0&&(y=[{format:this.renderer.options.context.format}]),y&&y.length&&!y[0].format&&(y[0].format=this.renderer.options.context.format),this.options={...this.options,shaders:s,rendering:{useProjection:r,transparent:o,depth:a,depthWriteEnabled:h,depthCompare:u,depthFormat:d,cullMode:c,sampleCount:f,targets:y,verticesOrder:p,topology:g}},this.attributes=null,this.pipelineEntry=null}setRenderer(e){this.useCameraBindGroup&&this.renderer&&this.renderer.cameraLightsBindGroup.consumers.delete(this.uuid),super.setRenderer(e),this.useCameraBindGroup&&(this.bindGroups[0]=this.renderer.cameraLightsBindGroup,this.renderer.cameraLightsBindGroup.consumers.add(this.uuid))}setPipelineEntry(){this.pipelineEntry=this.renderer.pipelineManager.createRenderPipeline(this)}async compilePipelineEntry(){await this.pipelineEntry.compilePipelineEntry()}async compileMaterial(){this.ready||(super.compileMaterial(),this.attributes&&!this.pipelineEntry&&this.setPipelineEntry(),this.pipelineEntry&&this.pipelineEntry.canCompile&&await this.compilePipelineEntry())}setRenderingOptions(e={}){e.transparent&&e.targets.length&&!e.targets[0].blend&&(e.targets[0].blend=Ye.getDefaultTransparentBlending());const t=vr(e,this.options.rendering),i={...this.options.rendering};if(this.options.rendering={...this.options.rendering,...e},this.pipelineEntry)if(this.pipelineEntry.ready&&t.length){if(!this.renderer.production){const s=t.map(o=>({[o]:Array.isArray(i[o])?i[o].map(a=>a):i[o]})),r=t.map(o=>({[o]:Array.isArray(e[o])?e[o].map(a=>a):e[o]}));_(`${this.options.label}: the change of rendering options is causing this RenderMaterial pipeline to be recompiled. This should be avoided.

Old rendering options: ${JSON.stringify(s.reduce((o,a)=>({...o,...a}),{}),null,4)}

--------

New rendering options: ${JSON.stringify(r.reduce((o,a)=>({...o,...a}),{}),null,4)}`)}this.setPipelineEntry()}else this.pipelineEntry.options.rendering={...this.pipelineEntry.options.rendering,...this.options.rendering}}setAttributesFromGeometry(e){this.attributes={wgslStructFragment:e.wgslStructFragment,vertexBuffers:e.vertexBuffers,layoutCacheKey:e.layoutCacheKey}}get cacheKey(){return(this.attributes?.layoutCacheKey||"")+super.cacheKey}get useCameraBindGroup(){return"cameraLightsBindGroup"in this.renderer&&this.options.rendering.useProjection}createBindGroups(){this.useCameraBindGroup&&(this.bindGroups.push(this.renderer.cameraLightsBindGroup),this.renderer.cameraLightsBindGroup.consumers.add(this.uuid)),super.createBindGroups()}updateBindGroups(){const e=this.useCameraBindGroup?1:0;this.useCameraBindGroup&&this.bindGroups[0].needsPipelineFlush&&this.pipelineEntry.ready&&this.pipelineEntry.flushPipelineEntry(this.bindGroups);for(let t=e;t<this.bindGroups.length;t++)this.updateBindGroup(this.bindGroups[t])}}const br=l((n=!1)=>n?`
  var worldPosition: vec4f = instances[attributes.instanceIndex].modelMatrix * vec4f(attributes.position, 1.0);
  let normal = (instances[attributes.instanceIndex].normalMatrix * vec4(attributes.normal, 0.0)).xyz;
    `:`
  var worldPosition: vec4f = matrices.model * vec4(attributes.position, 1.0);
  let normal = getWorldNormal(attributes.normal);
    `,"getPositionAndNormal"),wr=l((n=0,e=!1)=>`
@vertex fn main(
  attributes: Attributes,
) -> @builtin(position) vec4f {  
  let directionalShadow: DirectionalShadowsElement = directionalShadows.directionalShadowsElements[${n}];
  
  ${br(e)}
  
  let lightDirection: vec3f = normalize(worldPosition.xyz - directionalLights.elements[${n}].direction);
  let NdotL: f32 = dot(normalize(normal), lightDirection);
  let sinNdotL = sqrt(1.0 - NdotL * NdotL);
  let normalBias: f32 = directionalShadow.normalBias * sinNdotL;
  
  worldPosition = vec4(worldPosition.xyz - normal * normalBias, worldPosition.w);
  
  return directionalShadow.projectionMatrix * directionalShadow.viewMatrix * worldPosition;
}`,"getDefaultShadowDepthVs"),Br=`
fn getPCFShadowContribution(index: i32, worldPosition: vec3f, depthTexture: texture_depth_2d) -> f32 {
  let directionalShadow: DirectionalShadowsElement = directionalShadows.directionalShadowsElements[index];
  
  // get shadow coords
  var shadowCoords: vec3f = vec3((directionalShadow.projectionMatrix * directionalShadow.viewMatrix * vec4(worldPosition, 1.0)).xyz);
  
  // Convert XY to (0, 1)
  // Y is flipped because texture coords are Y-down.
  shadowCoords = vec3(
    shadowCoords.xy * vec2(0.5, -0.5) + vec2(0.5),
    shadowCoords.z
  );
  
  var visibility = 0.0;
  
  let inFrustum: bool = shadowCoords.x >= 0.0 && shadowCoords.x <= 1.0 && shadowCoords.y >= 0.0 && shadowCoords.y <= 1.0;
  let frustumTest: bool = inFrustum && shadowCoords.z <= 1.0;
  
  if(frustumTest) {
    // Percentage-closer filtering. Sample texels in the region
    // to smooth the result.
    let size: vec2f = vec2f(textureDimensions(depthTexture).xy);
  
    let texelSize: vec2f = 1.0 / size;
    
    let sampleCount: i32 = directionalShadow.pcfSamples;
    let maxSamples: f32 = f32(sampleCount) - 1.0;
  
    for (var x = 0; x < sampleCount; x++) {
      for (var y = 0; y < sampleCount; y++) {
        let offset = texelSize * vec2(
          f32(x) - maxSamples * 0.5,
          f32(y) - maxSamples * 0.5
        );
        
        visibility += textureSampleCompareLevel(
          depthTexture,
          depthComparisonSampler,
          shadowCoords.xy + offset,
          shadowCoords.z - directionalShadow.bias
        );
      }
    }
    visibility /= f32(sampleCount * sampleCount);
    
    visibility = clamp(visibility, 1.0 - clamp(directionalShadow.intensity, 0.0, 1.0), 1.0);
  }
  else {
    visibility = 1.0;
  }
  
  return visibility;
}
`,Mr=l(n=>{const e=n.shadowCastingLights.filter(i=>i.type==="directionalLights"),t=Math.max(n.lightsBindingParams.directionalLights.max,1);return`
fn getPCFDirectionalShadows(worldPosition: vec3f) -> array<f32, ${t}> {
  var directionalShadowContribution: array<f32, ${t}>;
  
  var lightDirection: vec3f;
  
  ${e.map((i,s)=>`lightDirection = worldPosition - directionalLights.elements[${s}].direction;
      
      ${i.shadow.isActive?`
      if(directionalShadows.directionalShadowsElements[${s}].isActive > 0) {
        directionalShadowContribution[${s}] = getPCFShadowContribution(
          ${s},
          worldPosition,
          shadowDepthTexture${s}
        );
      } else {
        directionalShadowContribution[${s}] = 1.0;
      }
          `:`directionalShadowContribution[${s}] = 1.0;`}`).join(`
`)}
  
  return directionalShadowContribution;
}
`},"getPCFDirectionalShadows"),Cr=l((n=0,e=!1)=>`
struct PointShadowVSOutput {
  @builtin(position) position: vec4f,
  @location(0) worldPosition: vec3f,
}

@vertex fn main(
  attributes: Attributes,
) -> PointShadowVSOutput {  
  var pointShadowVSOutput: PointShadowVSOutput;
  
  ${br(e)}
  
  let pointShadow: PointShadowsElement = pointShadows.pointShadowsElements[${n}];
  
  let lightDirection: vec3f = normalize(pointLights.elements[${n}].position - worldPosition.xyz);
  let NdotL: f32 = dot(normalize(normal), lightDirection);
  let sinNdotL = sqrt(1.0 - NdotL * NdotL);
  let normalBias: f32 = pointShadow.normalBias * sinNdotL;
  
  worldPosition = vec4(worldPosition.xyz - normal * normalBias, worldPosition.w);
    
  var position: vec4f = pointShadow.projectionMatrix * pointShadow.viewMatrices[pointShadow.face] * worldPosition;

  pointShadowVSOutput.position = position;
  pointShadowVSOutput.worldPosition = worldPosition.xyz;

  return pointShadowVSOutput;
}`,"getDefaultPointShadowDepthVs"),Sr=l((n=0)=>`
struct PointShadowVSOutput {
  @builtin(position) position: vec4f,
  @location(0) worldPosition: vec3f,
}

@fragment fn main(fsInput: PointShadowVSOutput) -> @builtin(frag_depth) f32 {
  // get distance between fragment and light source
  var lightDistance: f32 = length(fsInput.worldPosition - pointLights.elements[${n}].position);
  
  let pointShadow: PointShadowsElement = pointShadows.pointShadowsElements[${n}];
  
  // map to [0, 1] range by dividing by far plane - near plane
  lightDistance = (lightDistance - pointShadow.cameraNear) / (pointShadow.cameraFar - pointShadow.cameraNear);
  
  // write this as modified depth
  return clamp(lightDistance, 0.0, 1.0);
}`,"getDefaultPointShadowDepthFs"),Tr=`
fn getPCFPointShadowContribution(index: i32, shadowPosition: vec4f, depthCubeTexture: texture_depth_cube) -> f32 {
  let pointShadow: PointShadowsElement = pointShadows.pointShadowsElements[index];

  // Percentage-closer filtering. Sample texels in the region
  // to smooth the result.
  var visibility = 0.0;
  var closestDepth = 0.0;
  let currentDepth: f32 = shadowPosition.w;
  let cameraRange: f32 = pointShadow.cameraFar - pointShadow.cameraNear;
  let normalizedDepth: f32 = (shadowPosition.w - pointShadow.cameraNear) / cameraRange;

  let maxSize: f32 = f32(max(textureDimensions(depthCubeTexture).x, textureDimensions(depthCubeTexture).y));

  let texelSize: vec3f = vec3(1.0 / maxSize);
  let sampleCount: i32 = pointShadow.pcfSamples;
  let maxSamples: f32 = f32(sampleCount) - 1.0;
  
  for (var x = 0; x < sampleCount; x++) {
    for (var y = 0; y < sampleCount; y++) {
      for (var z = 0; z < sampleCount; z++) {
        let offset = texelSize * vec3(
          f32(x) - maxSamples * 0.5,
          f32(y) - maxSamples * 0.5,
          f32(z) - maxSamples * 0.5
        );

        closestDepth = textureSampleCompareLevel(
          depthCubeTexture,
          depthComparisonSampler,
          shadowPosition.xyz + offset,
          normalizedDepth - pointShadow.bias
        );

        closestDepth *= cameraRange;

        visibility += select(0.0, 1.0, currentDepth <= closestDepth);
      }
    }
  }
  
  visibility /= f32(sampleCount * sampleCount * sampleCount);
  
  visibility = clamp(visibility, 1.0 - clamp(pointShadow.intensity, 0.0, 1.0), 1.0);
  
  return visibility;
}`,Pr=l(n=>{const e=n.shadowCastingLights.filter(i=>i.type==="pointLights"),t=Math.max(n.lightsBindingParams.pointLights.max,1);return`
fn getPCFPointShadows(worldPosition: vec3f) -> array<f32, ${t}> {
  var pointShadowContribution: array<f32, ${t}>;
  
  var lightDirection: vec3f;
  var lightDistance: f32;
  var lightColor: vec3f;
  
  ${e.map((i,s)=>`lightDirection = pointLights.elements[${s}].position - worldPosition;
      
      lightDistance = length(lightDirection);
      lightColor = pointLights.elements[${s}].color * rangeAttenuation(pointLights.elements[${s}].range, lightDistance);
      
      ${i.shadow.isActive?`
      if(pointShadows.pointShadowsElements[${s}].isActive > 0 && length(lightColor) > 0.0001) {
        pointShadowContribution[${s}] = getPCFPointShadowContribution(
          ${s},
          vec4(lightDirection, length(lightDirection)),
          pointShadowCubeDepthTexture${s}
        );
      } else {
        pointShadowContribution[${s}] = 1.0;
      }
            `:`pointShadowContribution[${s}] = 1.0;`}`).join(`
`)}
  
  return pointShadowContribution;
}
`},"getPCFPointShadows"),dt=`
  let pointShadows = getPCFPointShadows(worldPosition);
  let directionalShadows = getPCFDirectionalShadows(worldPosition);
`,ct=`
    directLight.color *= directionalShadows[i];
`,pt=`
    directLight.color *= pointShadows[i];
`;var Zi=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$e"),Y=l((n,e,t)=>(Zi(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$b"),Me=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$e"),ne=l((n,e,t,i)=>(Zi(n,e,"write to private field"),e.set(n,t),t),"__privateSet$b"),Rr=l((n,e,t)=>(Zi(n,e,"access private method"),t),"__privateMethod$6"),Qt,ei,ti,ii,si,ft,He,oe,ze,ri,Ji;const zr={isActive:{type:"i32",value:0},pcfSamples:{type:"i32",value:0},bias:{type:"f32",value:0},normalBias:{type:"f32",value:0},intensity:{type:"f32",value:0}};class Er{static{l(this,"Shadow")}constructor(e,{light:t,intensity:i=1,bias:s=0,normalBias:r=0,pcfSamples:o=1,depthTextureSize:a=new G(512),depthTextureFormat:h="depth24plus",autoRender:u=!0}={}){Me(this,ri),Me(this,Qt,void 0),Me(this,ei,void 0),Me(this,ti,void 0),Me(this,ii,void 0),Me(this,si,void 0),Me(this,ft,void 0),Me(this,He,void 0),Me(this,oe,void 0),Me(this,ze,void 0),this.setRenderer(e),this.light=t,this.index=this.light.index,this.options={light:t,intensity:i,bias:s,normalBias:r,pcfSamples:o,depthTextureSize:a,depthTextureFormat:h},this.sampleCount=1,this.meshes=new Map,ne(this,He,new Map),ne(this,oe,new Map),ne(this,ze,null),Rr(this,ri,Ji).call(this,{intensity:i,bias:s,normalBias:r,pcfSamples:o,depthTextureSize:a,depthTextureFormat:h,autoRender:u}),this.isActive=!1}setRenderer(e){e=Oe(e,this.constructor.name),this.renderer=e,this.setRendererBinding(),Y(this,oe)?.forEach(t=>{t.setRenderer(this.renderer)})}setRendererBinding(){this.rendererBinding=null}cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:o,autoRender:a}={}){Rr(this,ri,Ji).call(this,{intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:o,autoRender:a}),this.isActive=!0}reset(){this.onPropertyChanged("isActive",this.isActive?1:0),this.onPropertyChanged("intensity",this.intensity),this.onPropertyChanged("bias",this.bias),this.onPropertyChanged("normalBias",this.normalBias),this.onPropertyChanged("pcfSamples",this.pcfSamples)}get isActive(){return Y(this,si)}set isActive(e){!e&&this.isActive?this.destroy():e&&!this.isActive&&this.init(),ne(this,si,e)}get intensity(){return Y(this,Qt)}set intensity(e){ne(this,Qt,e),this.onPropertyChanged("intensity",this.intensity)}get bias(){return Y(this,ei)}set bias(e){ne(this,ei,e),this.onPropertyChanged("bias",this.bias)}get normalBias(){return Y(this,ti)}set normalBias(e){ne(this,ti,e),this.onPropertyChanged("normalBias",this.normalBias)}get pcfSamples(){return Y(this,ii)}set pcfSamples(e){ne(this,ii,Math.max(1,Math.ceil(e))),this.onPropertyChanged("pcfSamples",this.pcfSamples)}init(){if(!this.depthComparisonSampler){const e=this.renderer.samplers.find(t=>t.name==="depthComparisonSampler");this.depthComparisonSampler=e||new je(this.renderer,{label:"Depth comparison sampler",name:"depthComparisonSampler",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",compare:"less",minFilter:"linear",magFilter:"linear",type:"comparison"})}this.setDepthTexture(),this.depthPassTarget||this.createDepthPassTarget(),Y(this,ze)===null&&Y(this,ft)&&(this.setDepthPass(),this.onPropertyChanged("isActive",1))}onDepthTextureSizeChanged(){this.setDepthTexture()}setDepthTexture(){this.depthTexture&&(this.depthTexture.size.width!==this.depthTextureSize.x||this.depthTexture.size.height!==this.depthTextureSize.y)?(this.depthTexture.options.fixedSize.width=this.depthTextureSize.x,this.depthTexture.options.fixedSize.height=this.depthTextureSize.y,this.depthTexture.size.width=this.depthTextureSize.x,this.depthTexture.size.height=this.depthTextureSize.y,this.depthTexture.createTexture(),this.depthPassTarget&&this.depthPassTarget.resize()):this.depthTexture||this.createDepthTexture()}createDepthTexture(){this.depthTexture=new Z(this.renderer,{label:`${this.constructor.name} (index: ${this.light.index}) depth texture`,name:"shadowDepthTexture"+this.index,type:"depth",format:this.depthTextureFormat,sampleCount:this.sampleCount,fixedSize:{width:this.depthTextureSize.x,height:this.depthTextureSize.y},autoDestroy:!1})}createDepthPassTarget(){this.depthPassTarget=new ji(this.renderer,{label:"Depth pass render target for "+this.constructor.name+" "+this.index,useColorAttachments:!1,depthTexture:this.depthTexture,sampleCount:this.sampleCount})}onPropertyChanged(e,t){if(this.rendererBinding){if(t instanceof O){for(let i=0;i<t.elements.length;i++)this.rendererBinding.childrenBindings[this.index].inputs[e].value[i]=t.elements[i];this.rendererBinding.childrenBindings[this.index].inputs[e].shouldUpdate=!0}else this.rendererBinding.childrenBindings[this.index].inputs[e].value=t;this.renderer.shouldUpdateCameraLightsBindGroup()}}setDepthPass(){ne(this,ze,this.render())}removeDepthPass(e){this.renderer.onBeforeRenderScene.remove(e)}render(e=!1){return this.renderer.onBeforeRenderScene.add(t=>{this.meshes.size&&(this.useDepthMaterials(),this.renderDepthPass(t),this.useOriginalMaterials(),this.renderer.pipelineManager.resetCurrentPipeline())},{once:e,order:this.index})}async renderOnce(){Y(this,ft)||(this.onPropertyChanged("isActive",1),this.useDepthMaterials(),this.meshes.forEach(e=>{e.setGeometry()}),await Promise.all([...Y(this,oe).values()].map(async e=>{await e.compileMaterial()})),this.render(!0))}renderDepthPass(e){const t=new Map;this.meshes.forEach(s=>{s.options.renderBundle&&t.set(s.options.renderBundle.uuid,s.options.renderBundle)}),t.forEach(s=>{s.updateBinding()}),t.clear(),this.renderer.pipelineManager.resetCurrentPipeline();const i=e.beginRenderPass(this.depthPassTarget.renderPass.descriptor);this.renderer.production||i.pushDebugGroup(`${this.constructor.name} (index: ${this.index}): depth pass`),this.meshes.forEach(s=>{s.render(i)}),this.renderer.production||i.popDebugGroup(),i.end()}getDefaultShadowDepthVs(e=!1){return{code:wr(this.index,e)}}getDefaultShadowDepthFs(){return!1}patchShadowCastingMeshParams(e,t={}){t={...e.material.options.rendering,...t},t.targets=[],t.sampleCount=this.sampleCount,t.depthFormat=this.depthTextureFormat,t.bindings?t.bindings=[e.material.getBufferBindingByName("matrices"),...t.bindings]:t.bindings=[e.material.getBufferBindingByName("matrices")];const i=e.material.inputsBindings.get("instances")&&e.geometry.instancesCount>1;return t.shaders||(t.shaders={vertex:this.getDefaultShadowDepthVs(i),fragment:this.getDefaultShadowDepthFs()}),t}addShadowCastingMesh(e,t={}){this.meshes.get(e.uuid)||(e.options.castShadows=!0,Y(this,He).set(e.uuid,e.material),t=this.patchShadowCastingMeshParams(e,t),Y(this,oe).get(e.uuid)&&(Y(this,oe).get(e.uuid).destroy(),Y(this,oe).delete(e.uuid)),Y(this,oe).set(e.uuid,new Ki(this.renderer,{label:`${this.constructor.name} (index: ${this.index}) ${e.options.label} depth render material`,...t})),this.meshes.set(e.uuid,e))}useDepthMaterials(){this.meshes.forEach(e=>{e.useMaterial(Y(this,oe).get(e.uuid))})}useOriginalMaterials(){this.meshes.forEach(e=>{e.useMaterial(Y(this,He).get(e.uuid))})}removeMesh(e){const t=Y(this,oe).get(e.uuid);t&&(t.destroy(),Y(this,oe).delete(e.uuid)),this.meshes.delete(e.uuid)}destroy(){this.onPropertyChanged("isActive",0),Y(this,ze)!==null&&(this.removeDepthPass(Y(this,ze)),ne(this,ze,null)),this.meshes.forEach(e=>this.removeMesh(e)),ne(this,He,new Map),ne(this,oe,new Map),this.meshes=new Map,this.depthPassTarget?.destroy(),this.depthTexture?.destroy()}}Qt=new WeakMap,ei=new WeakMap,ti=new WeakMap,ii=new WeakMap,si=new WeakMap,ft=new WeakMap,He=new WeakMap,oe=new WeakMap,ze=new WeakMap,ri=new WeakSet,Ji=l(function({intensity:n=1,bias:e=0,normalBias:t=0,pcfSamples:i=1,depthTextureSize:s=new G(512),depthTextureFormat:r="depth24plus",autoRender:o=!0}={}){this.intensity=n,this.bias=e,this.normalBias=t,this.pcfSamples=i,this.depthTextureSize=s,this.depthTextureSize.onChange(()=>this.onDepthTextureSizeChanged()),this.depthTextureFormat=r,ne(this,ft,o)},"setParameters_fn");const lo={...zr,viewMatrix:{type:"mat4x4f",value:new Float32Array(16)},projectionMatrix:{type:"mat4x4f",value:new Float32Array(16)}};class co extends Er{static{l(this,"DirectionalShadow")}constructor(e,{light:t,intensity:i,bias:s,normalBias:r,pcfSamples:o,depthTextureSize:a,depthTextureFormat:h,autoRender:u,camera:d={left:-10,right:10,bottom:-10,top:10,near:.1,far:50}}={}){super(e,{light:t,intensity:i,bias:s,normalBias:r,pcfSamples:o,depthTextureSize:a,depthTextureFormat:h,autoRender:u}),this.options={...this.options,camera:d},this.camera={projectionMatrix:new O,viewMatrix:new O,up:new m(0,1,0),_left:d.left,_right:d.right,_bottom:d.bottom,_top:d.top,_near:d.near,_far:d.far};const c=this;["left","right","bottom","top","near","far"].forEach(p=>{Object.defineProperty(c.camera,p,{get(){return c.camera["_"+p]},set(g){c.camera["_"+p]=g,c.updateProjectionMatrix()}})})}setRendererBinding(){this.rendererBinding=this.renderer.bindings.directionalShadows}cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:o,autoRender:a,camera:h}={}){h&&(this.camera.left=h.left??-10,this.camera.right=h.right??10,this.camera.bottom=h.bottom??-10,this.camera.top=h.right??10,this.camera.near=h.near??.1,this.camera.far=h.far??50),super.cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:o,autoRender:a})}init(){super.init(),this.updateProjectionMatrix()}reset(){this.setRendererBinding(),super.reset(),this.onPropertyChanged("projectionMatrix",this.camera.projectionMatrix),this.onPropertyChanged("viewMatrix",this.camera.viewMatrix)}updateProjectionMatrix(){this.camera.projectionMatrix.identity().makeOrthographic({left:this.camera.left,right:this.camera.right,bottom:this.camera.bottom,top:this.camera.top,near:this.camera.near,far:this.camera.far}),this.onPropertyChanged("projectionMatrix",this.camera.projectionMatrix)}updateViewMatrix(e=new m,t=new m){e.x===0&&e.z===0?this.camera.up.set(0,0,1):this.camera.up.set(0,1,0),this.camera.viewMatrix.makeView(e,t,this.camera.up),this.onPropertyChanged("viewMatrix",this.camera.viewMatrix)}}var Lr=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$d"),ni=l((n,e,t)=>(Lr(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$a"),_r=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$d"),Gr=l((n,e,t,i)=>(Lr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$a"),mt,gt;class po extends Wi{static{l(this,"DirectionalLight")}constructor(e,{color:t=new m(1),intensity:i=1,position:s=new m(1),target:r=new m,shadow:o=null}={}){super(e,{color:t,intensity:i,type:"directionalLights"}),_r(this,mt,void 0),_r(this,gt,void 0),this.options={...this.options,position:s,target:r,shadow:o},Gr(this,gt,new m),Gr(this,mt,new m),this.target=r,this.target.onChange(()=>this.setDirection()),this.position.copy(s),this.parent=this.renderer.scene,this.shadow=new co(this.renderer,{autoRender:!1,light:this}),o&&this.shadow.cast(o)}setRenderer(e){this.shadow?.setRenderer(e),super.setRenderer(e)}reset(){super.reset(),this.setDirection(),this.shadow?.reset()}setDirection(){ni(this,gt).copy(this.target).sub(this.worldMatrix.getTranslation(ni(this,mt))),this.onPropertyChanged("direction",ni(this,gt)),this.shadow?.updateViewMatrix(ni(this,mt),this.target)}applyScale(){}applyTransformOrigin(){}updateMatrixStack(){super.updateMatrixStack(),this.matricesNeedUpdate&&this.setDirection()}onMaxLightOverflow(e){super.onMaxLightOverflow(e),this.shadow?.setRendererBinding()}destroy(){super.destroy(),this.shadow.destroy()}}mt=new WeakMap,gt=new WeakMap;var Ar=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$c"),Dr=l((n,e,t)=>(Ar(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$9"),fo=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$c"),mo=l((n,e,t,i)=>(Ar(n,e,"write to private field"),e.set(n,t),t),"__privateSet$9"),yt;const go={face:{type:"i32",value:0},...zr,cameraNear:{type:"f32",value:0},cameraFar:{type:"f32",value:0},projectionMatrix:{type:"mat4x4f",value:new Float32Array(16)},viewMatrices:{type:"array<mat4x4f>",value:new Float32Array(16*6)}};class yo extends Er{static{l(this,"PointShadow")}constructor(e,{light:t,intensity:i,bias:s,normalBias:r,pcfSamples:o,depthTextureSize:a,depthTextureFormat:h,autoRender:u,camera:d={near:.1,far:150}}={}){super(e,{light:t,intensity:i,bias:s,normalBias:r,pcfSamples:o,depthTextureSize:a,depthTextureFormat:h,autoRender:u}),fo(this,yt,void 0),this.options={...this.options,camera:d},this.cubeDirections=[new m(-1,0,0),new m(1,0,0),new m(0,-1,0),new m(0,1,0),new m(0,0,-1),new m(0,0,1)],mo(this,yt,new m),this.cubeUps=[new m(0,-1,0),new m(0,-1,0),new m(0,0,1),new m(0,0,-1),new m(0,-1,0),new m(0,-1,0)],d.far<=0&&(d.far=150),this.camera={projectionMatrix:new O,viewMatrices:[],_near:d.near,_far:d.far};for(let p=0;p<6;p++)this.camera.viewMatrices.push(new O);const c=this;["near","far"].forEach(p=>{Object.defineProperty(c.camera,p,{get(){return c.camera["_"+p]},set(g){c.camera["_"+p]=g,c.updateProjectionMatrix()}})})}setRendererBinding(){this.rendererBinding=this.renderer.bindings.pointShadows}cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:o,autoRender:a,camera:h}={}){h&&(this.camera.near=h.near??.1,this.camera.far=h.far!==void 0?h.far:this.light.range>0?this.light.range:150),super.cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:o,autoRender:a})}init(){super.init(),this.updateProjectionMatrix()}reset(){this.setRendererBinding(),super.reset(),this.updateProjectionMatrix()}updateProjectionMatrix(){this.camera.projectionMatrix.identity().makePerspective({near:this.camera.near,far:this.camera.far,fov:90,aspect:1}),this.onPropertyChanged("projectionMatrix",this.camera.projectionMatrix),this.onPropertyChanged("cameraNear",this.camera.near),this.onPropertyChanged("cameraFar",this.camera.far)}updateViewMatrices(e=new m){for(let t=0;t<6;t++){Dr(this,yt).copy(this.cubeDirections[t]).add(e),this.camera.viewMatrices[t].makeView(e,Dr(this,yt),this.cubeUps[t]);for(let i=0;i<16;i++)this.rendererBinding.childrenBindings[this.index].inputs.viewMatrices.value[t*16+i]=this.camera.viewMatrices[t].elements[i]}this.rendererBinding.childrenBindings[this.index].inputs.viewMatrices.shouldUpdate=!0}setDepthTexture(){if(this.depthTexture&&(this.depthTexture.size.width!==this.depthTextureSize.x||this.depthTexture.size.height!==this.depthTextureSize.y)){const e=Math.max(this.depthTextureSize.x,this.depthTextureSize.y);this.depthTexture.options.fixedSize.width=e,this.depthTexture.options.fixedSize.height=e,this.depthTexture.size.width=e,this.depthTexture.size.height=e,this.depthTexture.createTexture(),this.depthPassTarget&&this.depthPassTarget.resize()}else this.depthTexture||this.createDepthTexture()}createDepthTexture(){const e=Math.max(this.depthTextureSize.x,this.depthTextureSize.y);this.depthTexture=new Z(this.renderer,{label:`${this.constructor.name} (index: ${this.index}) depth texture`,name:"pointShadowCubeDepthTexture"+this.index,type:"depth",format:this.depthTextureFormat,viewDimension:"cube",sampleCount:this.sampleCount,fixedSize:{width:e,height:e},autoDestroy:!1})}removeDepthPass(e){this.renderer.onBeforeCommandEncoderCreation.remove(e)}render(e=!1){return this.renderer.onBeforeCommandEncoderCreation.add(()=>{if(this.meshes.size){this.renderer.setCameraBindGroup(),this.useDepthMaterials();for(let t=0;t<6;t++){const i=this.renderer.device.createCommandEncoder();this.renderer.production||i.pushDebugGroup(`${this.constructor.name} (index: ${this.index}): depth pass command encoder for face ${t}`),this.depthPassTarget.renderPass.setRenderPassDescriptor(this.depthTexture.texture.createView({label:this.depthTexture.texture.label+" cube face view "+t,dimension:"2d",arrayLayerCount:1,baseArrayLayer:t})),this.rendererBinding.childrenBindings[this.index].inputs.face.value=t,this.renderer.shouldUpdateCameraLightsBindGroup(),this.renderer.updateCameraLightsBindGroup(),this.renderDepthPass(i),this.renderer.production||i.popDebugGroup();const s=i.finish();this.renderer.device.queue.submit([s])}this.useOriginalMaterials(),this.renderer.pipelineManager.resetCurrentPipeline()}},{once:e,order:this.index})}getDefaultShadowDepthVs(e=!1){return{code:Cr(this.index,e)}}getDefaultShadowDepthFs(){return{code:Sr(this.index)}}}yt=new WeakMap;var Or=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$b"),Qi=l((n,e,t)=>(Or(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$8"),Fr=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$b"),$r=l((n,e,t,i)=>(Or(n,e,"write to private field"),e.set(n,t),t),"__privateSet$8"),oi,xt;class xo extends Wi{static{l(this,"PointLight")}constructor(e,{color:t=new m(1),intensity:i=1,position:s=new m,range:r=0,shadow:o=null}={}){super(e,{color:t,intensity:i,type:"pointLights"}),Fr(this,oi,void 0),Fr(this,xt,void 0),this.options={...this.options,position:s,range:r,shadow:o},$r(this,xt,new m),this.position.copy(s),this.range=r,this.parent=this.renderer.scene,this.shadow=new yo(this.renderer,{autoRender:!1,light:this}),o&&this.shadow.cast(o)}setRenderer(e){this.shadow&&this.shadow.setRenderer(e),super.setRenderer(e)}reset(){super.reset(),this.onPropertyChanged("range",this.range),this.setPosition(),this.shadow?.reset()}get range(){return Qi(this,oi)}set range(e){$r(this,oi,e),this.onPropertyChanged("range",this.range)}setPosition(){this.onPropertyChanged("position",this.worldMatrix.getTranslation(Qi(this,xt))),this.shadow?.updateViewMatrices(Qi(this,xt))}applyScale(){}applyTransformOrigin(){}updateMatrixStack(){super.updateMatrixStack(),this.matricesNeedUpdate&&this.setPosition()}onMaxLightOverflow(e){super.onMaxLightOverflow(e),this.shadow?.setRendererBinding()}destroy(){super.destroy(),this.shadow.destroy()}}oi=new WeakMap,xt=new WeakMap;var Ur=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$a"),es=l((n,e,t)=>(Ur(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$7"),vo=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$a"),bo=l((n,e,t,i)=>(Ur(n,e,"write to private field"),e.set(n,t),t),"__privateSet$7");let wo=0;const kr={autoRender:!0,useProjection:!1,useAsyncPipeline:!0,cullMode:"back",depth:!0,depthWriteEnabled:!0,depthCompare:"less",depthFormat:"depth24plus",transparent:!1,visible:!0,renderOrder:0,texturesOptions:{},renderBundle:null};function Ir(n){var e,t;return t=class extends n{static{l(this,"_a")}constructor(...i){super(i[0],i[1],{...kr,...i[2]}),vo(this,e,!0),this._onReadyCallback=()=>{},this._onBeforeRenderCallback=()=>{},this._onRenderCallback=()=>{},this._onAfterRenderCallback=()=>{},this._onAfterResizeCallback=()=>{};let s=i[0];const r={...kr,...i[2]};this.type="MeshBase",this.uuid=W(),Object.defineProperty(this,"index",{value:wo++}),s=I(s,r.label?r.label+" "+this.type:this.type),this.renderer=s;const{label:o,shaders:a,geometry:h,visible:u,renderOrder:d,outputTarget:c,renderBundle:f,texturesOptions:p,autoRender:g,...y}=r;this.outputTarget=c??null,this.renderBundle=f??null,y.sampleCount=y.sampleCount?y.sampleCount:this.outputTarget?this.outputTarget.renderPass.options.sampleCount:this.renderer&&this.renderer.renderPass?this.renderer.renderPass.options.sampleCount:1,this.options={...this.options??{},label:o??"Mesh "+this.renderer.meshes.length,...a!==void 0?{shaders:a}:{},...c!==void 0&&{outputTarget:c},...f!==void 0&&{renderBundle:f},texturesOptions:p,...g!==void 0&&{autoRender:g},...y},g!==void 0&&bo(this,e,g),this.visible=u,this.renderOrder=d,this.ready=!1,this.userData={},h&&this.useGeometry(h),this.setMaterial({...this.cleanupRenderMaterialParameters({...this.options}),...h&&{verticesOrder:h.verticesOrder,topology:h.topology}}),this.addToScene(!0)}get autoRender(){return es(this,e)}get ready(){return this._ready}set ready(i){i&&!this._ready&&this._onReadyCallback&&this._onReadyCallback(),this._ready=i}addToScene(i=!1){i&&this.renderer.meshes.push(this),this.setRenderingOptionsForRenderPass(this.outputTarget?this.outputTarget.renderPass:this.renderer.renderPass),es(this,e)&&this.renderer.scene.addMesh(this)}removeFromScene(i=!1){es(this,e)&&this.renderer.scene.removeMesh(this),i&&(this.renderer.meshes=this.renderer.meshes.filter(s=>s.uuid!==this.uuid))}setRenderer(i){if(i=i&&i.renderer||i,!i||!(i.type==="GPURenderer"||i.type==="GPUCameraRenderer"||i.type==="GPUCurtainsRenderer")){_(`${this.options.label}: Cannot set ${i} as a renderer because it is not of a valid Renderer type.`);return}this.material?.setRenderer(i);const s=this.renderer;this.removeFromScene(!0),this.renderer=i,this.addToScene(!0),s.meshes.length||s.onBeforeRenderScene.add(r=>{s.forceClear(r)},{once:!0})}setOutputTarget(i){if(i&&i.type!=="RenderTarget"){_(`${this.options.label??this.type}: outputTarget is not a RenderTarget: ${i.type}`);return}this.removeFromScene(),this.outputTarget=i,this.addToScene()}setRenderBundle(i,s=!0){s?(this.removeFromScene(),this.renderBundle=i,this.addToScene()):this.renderBundle=i}loseContext(){this.ready=!1,this.geometry.loseContext(),this.material.loseContext()}restoreContext(){this.geometry.restoreContext(this.renderer),this.material.restoreContext()}setShaders(){const{shaders:i}=this.options;i?((!i.vertex||!i.vertex.code)&&(i.vertex={code:Hi,entryPoint:"main"}),(i.fragment===void 0||i.fragment&&!i.fragment.code)&&(i.fragment={code:Xi,entryPoint:"main"})):this.options.shaders={vertex:{code:Hi,entryPoint:"main"},fragment:{code:Xi,entryPoint:"main"}}}useGeometry(i){if(this.geometry&&(i.shouldCompute&&i.computeGeometry(),this.geometry.layoutCacheKey!==i.layoutCacheKey&&(_(`${this.options.label} (${this.type}): the current and new geometries do not have the same vertexBuffers layout, causing a probable pipeline recompilation. This should be avoided.

Current geometry layout:

${this.geometry.wgslStructFragment}

--------

New geometry layout:

${i.wgslStructFragment}`),this.material.setAttributesFromGeometry(i),this.material.setPipelineEntry()),this.geometry.consumers.delete(this.uuid)),this.geometry=i,this.geometry.consumers.add(this.uuid),this.computeGeometry(),this.material){const s={...this.material.options.rendering,verticesOrder:i.verticesOrder,topology:i.topology};this.material.setRenderingOptions(s)}}computeGeometry(){this.geometry.shouldCompute&&this.geometry.computeGeometry()}setGeometry(){this.geometry&&(this.geometry.ready||this.geometry.createBuffers({renderer:this.renderer,label:this.options.label+" geometry"}),this.setMaterialGeometryAttributes())}setRenderingOptionsForRenderPass(i){const s={transparent:this.transparent,sampleCount:i.options.sampleCount,...i.options.colorAttachments.length&&{targets:i.options.colorAttachments.map((r,o)=>({format:r.targetFormat,...this.options.targets?.length&&this.options.targets[o]&&this.options.targets[o].blend&&{blend:this.options.targets[o].blend}}))},depth:i.options.useDepth,...i.options.useDepth&&{depthFormat:i.options.depthFormat}};this.material?.setRenderingOptions(s)}cleanupRenderMaterialParameters(i){return delete i.texturesOptions,delete i.outputTarget,delete i.autoRender,i}useMaterial(i){let s=null;this.material&&this.geometry&&(s=this.material.cacheKey),this.material=i,this.geometry&&this.material.setAttributesFromGeometry(this.geometry),this.transparent=this.material.options.rendering.transparent,this.material.options.domTextures?.filter(r=>r instanceof ke).forEach(r=>this.onDOMTextureAdded(r)),s&&s!==this.material.cacheKey&&this.material.setPipelineEntry()}setMaterial(i){this.setShaders(),i.shaders=this.options.shaders,i.label=i.label+" material",this.useMaterial(new Ki(this.renderer,i))}setMaterialGeometryAttributes(){this.material&&!this.material.attributes&&this.material.setAttributesFromGeometry(this.geometry)}get transparent(){return this._transparent}set transparent(i){const s=this.transparent!==void 0&&i!==this.transparent;s&&this.removeFromScene(),this._transparent=i,s&&this.addToScene()}get visible(){return this._visible}set visible(i){this._visible=i}get domTextures(){return this.material?.domTextures||[]}get textures(){return this.material?.textures||[]}createDOMTexture(i){i.name||(i.name="texture"+(this.textures.length+this.domTextures.length)),i.label||(i.label=this.options.label+" "+i.name);const s={...i,...this.options.texturesOptions};this.renderBundle&&(s.useExternalTextures=!1);const r=new ke(this.renderer,s);return this.addDOMTexture(r),r}addDOMTexture(i){this.renderBundle&&(this.renderBundle.ready=!1),this.material.addTexture(i),this.onDOMTextureAdded(i)}onDOMTextureAdded(i){i.parentMesh=this}createTexture(i){i.name||(i.name="texture"+(this.textures.length+this.domTextures.length));const s=new Z(this.renderer,i);return this.addTexture(s),s}addTexture(i){this.renderBundle&&(this.renderBundle.ready=!1),this.material.addTexture(i)}get uniforms(){return this.material?.uniforms}get storages(){return this.material?.storages}resize(i){super.resize&&super.resize(i),this.textures?.forEach(s=>{s.options.fromTexture&&s.copy(s.options.fromTexture)}),this.domTextures?.forEach(s=>{s.resize()}),this._onAfterResizeCallback&&this._onAfterResizeCallback()}onReady(i){return i&&(this._onReadyCallback=i),this}onBeforeRender(i){return i&&(this._onBeforeRenderCallback=i),this}onRender(i){return i&&(this._onRenderCallback=i),this}onAfterRender(i){return i&&(this._onAfterRenderCallback=i),this}onAfterResize(i){return i&&(this._onAfterResizeCallback=i),this}onBeforeRenderScene(){!this.renderer.ready||!this.ready||!this.visible||this._onBeforeRenderCallback&&this._onBeforeRenderCallback()}onBeforeRenderPass(){this.renderer.ready&&(this.setGeometry(),this.visible&&this._onRenderCallback&&this._onRenderCallback(),this.material.onBeforeRender(),this.ready=this.material&&this.material.ready&&this.geometry&&this.geometry.ready)}onRenderPass(i){this.ready&&(this.material.render(i),this.geometry.render(i))}onAfterRenderPass(){this._onAfterRenderCallback&&this._onAfterRenderCallback()}render(i){this.onBeforeRenderPass(),!(!this.renderer.ready||!this.visible)&&(!this.renderer.production&&i.pushDebugGroup(this.options.label),this.onRenderPass(i),!this.renderer.production&&i.popDebugGroup(),this.onAfterRenderPass())}remove(){this.removeFromScene(!0),this.destroy(),this.renderer.meshes.length||this.renderer.onBeforeRenderScene.add(i=>{this.renderer.forceClear(i)},{once:!0})}destroy(){super.destroy&&super.destroy(),this.material?.destroy(),this.geometry.consumers.delete(this.uuid),this.geometry.consumers.size||this.geometry?.destroy(this.renderer)}},e=new WeakMap,t}l(Ir,"MeshBaseMixin");class Bo{static{l(this,"CacheManager")}constructor(){this.planeGeometries=[]}getPlaneGeometry(e){return this.planeGeometries.find(t=>t.definition.id===e.definition.id)}getPlaneGeometryByID(e){return this.planeGeometries.find(t=>t.definition.id===e)}addPlaneGeometry(e){this.planeGeometries.push(e)}destroy(){this.planeGeometries=[]}}const ai=new Bo;class ts extends Ir(class{}){static{l(this,"FullscreenPlane")}constructor(e,t={}){e=I(e,t.label?t.label+" FullscreenQuadMesh":"FullscreenQuadMesh");let i=ai.getPlaneGeometryByID(2);i||(i=new Ni({widthSegments:1,heightSegments:1}),ai.addPlaneGeometry(i)),(!t.shaders||!t.shaders.vertex)&&["uniforms","storages"].forEach(s=>{Object.values(t[s]??{}).forEach(r=>r.visibility=["fragment"])}),t.depthWriteEnabled=!1,t.label||(t.label="FullscreenQuadMesh"),super(e,null,{geometry:i,...t}),this.size={document:{width:this.renderer.boundingRect.width,height:this.renderer.boundingRect.height,top:this.renderer.boundingRect.top,left:this.renderer.boundingRect.left}},this.type="FullscreenQuadMesh"}resize(e=null){this.size.document=e??this.renderer.boundingRect,super.resize(e)}mouseToPlaneCoords(e=new G){return new G((e.x-this.size.document.left)/this.size.document.width*2-1,1-(e.y-this.size.document.top)/this.size.document.height*2)}}class Ce{static{l(this,"Mat3")}constructor(e=new Float32Array([1,0,0,0,1,0,0,0,1])){this.type="Mat3",this.elements=e}set(e,t,i,s,r,o,a,h,u){const d=this.elements;return d[0]=e,d[1]=s,d[2]=a,d[3]=t,d[4]=r,d[5]=h,d[6]=i,d[7]=o,d[8]=u,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}setFromArray(e=new Float32Array([1,0,0,0,1,0,0,0,1])){for(let t=0;t<this.elements.length;t++)this.elements[t]=e[t];return this}copy(e=new Ce){const t=e.elements;return this.elements[0]=t[0],this.elements[1]=t[1],this.elements[2]=t[2],this.elements[3]=t[3],this.elements[4]=t[4],this.elements[5]=t[5],this.elements[6]=t[6],this.elements[7]=t[7],this.elements[8]=t[8],this}clone(){return new Ce().copy(this)}setFromMat4(e=new O){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e=new Ce){return this.multiplyMatrices(this,e)}premultiply(e=new Ce){return this.multiplyMatrices(e,this)}multiplyMatrices(e=new Ce,t=new Ce){const i=e.elements,s=t.elements,r=this.elements,o=i[0],a=i[3],h=i[6],u=i[1],d=i[4],c=i[7],f=i[2],p=i[5],g=i[8],y=s[0],x=s[3],b=s[6],C=s[1],R=s[4],B=s[7],T=s[2],S=s[5],w=s[8];return r[0]=o*y+a*C+h*T,r[3]=o*x+a*R+h*S,r[6]=o*b+a*B+h*w,r[1]=u*y+d*C+c*T,r[4]=u*x+d*R+c*S,r[7]=u*b+d*B+c*w,r[2]=f*y+p*C+g*T,r[5]=f*x+p*R+g*S,r[8]=f*b+p*B+g*w,this}invert(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],o=e[4],a=e[5],h=e[6],u=e[7],d=e[8],c=d*o-a*u,f=a*h-d*r,p=u*r-o*h,g=t*c+i*f+s*p;if(g===0)return this.set(0,0,0,0,0,0,0,0,0);const y=1/g;return e[0]=c*y,e[1]=(s*u-d*i)*y,e[2]=(a*i-s*o)*y,e[3]=f*y,e[4]=(d*t-s*h)*y,e[5]=(s*r-a*t)*y,e[6]=p*y,e[7]=(i*h-u*t)*y,e[8]=(o*t-i*r)*y,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e=new O){return this.setFromMat4(e).invert().transpose()}}class is extends we{static{l(this,"ProjectedObject3D")}constructor(e){super(),e=Oe(e,"ProjectedObject3D"),this.camera=e.camera}applyPosition(){super.applyPosition(),this.shouldUpdateProjectionMatrixStack()}applyRotation(){super.applyRotation(),this.shouldUpdateProjectionMatrixStack()}applyScale(){super.applyScale(),this.shouldUpdateProjectionMatrixStack()}applyTransformOrigin(){super.applyTransformOrigin(),this.shouldUpdateProjectionMatrixStack()}setMatrices(){super.setMatrices(),this.matrices={...this.matrices,modelView:{matrix:new O,shouldUpdate:!0,onUpdate:()=>{this.modelViewMatrix.multiplyMatrices(this.viewMatrix,this.worldMatrix)}},modelViewProjection:{matrix:new O,shouldUpdate:!0,onUpdate:()=>{this.modelViewProjectionMatrix.multiplyMatrices(this.projectionMatrix,this.modelViewMatrix)}},normal:{matrix:new Ce,shouldUpdate:!0,onUpdate:()=>{this.normalMatrix.getNormalMatrix(this.worldMatrix)}}}}get modelViewMatrix(){return this.matrices.modelView.matrix}set modelViewMatrix(e){this.matrices.modelView.matrix=e,this.matrices.modelView.shouldUpdate=!0}get viewMatrix(){return this.camera.viewMatrix}get projectionMatrix(){return this.camera.projectionMatrix}get modelViewProjectionMatrix(){return this.matrices.modelViewProjection.matrix}set modelViewProjectionMatrix(e){this.matrices.modelViewProjection.matrix=e,this.matrices.modelViewProjection.shouldUpdate=!0}get normalMatrix(){return this.matrices.normal.matrix}set normalMatrix(e){this.matrices.normal.matrix=e,this.matrices.normal.shouldUpdate=!0}shouldUpdateProjectionMatrixStack(){this.matrices.modelView.shouldUpdate=!0,this.matrices.modelViewProjection.shouldUpdate=!0}shouldUpdateWorldMatrix(){super.shouldUpdateWorldMatrix(),this.shouldUpdateProjectionMatrixStack(),this.matrices.normal.shouldUpdate=!0}shouldUpdateMatrixStack(){this.shouldUpdateModelMatrix(),this.shouldUpdateProjectionMatrixStack()}}var Vr=`
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
  @location(1) normal: vec3f,
};

@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {
  // normals
  return vec4(normalize(fsInput.normal) * 0.5 + 0.5, 1.0);
}`;const Nr={frustumCulling:"OBB",DOMFrustumMargins:{top:0,right:0,bottom:0,left:0},receiveShadows:!1,castShadows:!1};function Wr(n){return class extends Ir(n){static{l(this,"ProjectedMeshBase")}constructor(...t){super(t[0],t[1],{...Nr,...t[2],useProjection:!0}),this._onReEnterViewCallback=()=>{},this._onLeaveViewCallback=()=>{};let i=t[0];const s={...Nr,...t[2],useProjection:!0};this.type="MeshTransformed",i=Oe(i,s.label?s.label+" "+this.type:this.type),this.renderer=i;const{frustumCulling:r,DOMFrustumMargins:o,receiveShadows:a,castShadows:h}=s;this.options={...this.options??{},frustumCulling:r,DOMFrustumMargins:o,receiveShadows:a,castShadows:h},this.options.castShadows&&this.renderer.shadowCastingLights.forEach(u=>{u.shadow.isActive&&u.shadow.addShadowCastingMesh(this)}),this.setDOMFrustum()}setRenderer(t){super.setRenderer(t),this.camera=this.renderer.camera,this.options.castShadows&&this.renderer.shadowCastingLights.forEach(i=>{i.shadow.isActive&&i.shadow.addShadowCastingMesh(this)})}setRenderBundle(t,i=!0){if(this.renderBundle&&t&&this.renderBundle.uuid===t.uuid)return;const s=!!this.renderBundle,r=this.material.getBindGroupByBindingName("matrices"),o=this.material.getBufferBindingByName("matrices");this.renderBundle&&!t&&o.parent&&(o.parent=null,o.shouldResetBindGroup=!0,r.createBindingBuffer(o)),super.setRenderBundle(t,i),this.renderBundle&&this.renderBundle.binding&&(s&&r.destroyBufferBinding(o),o.options.offset=this.renderBundle.meshes.size-1,o.parent=this.renderBundle.binding,o.shouldResetBindGroup=!0)}patchRenderBundleBinding(t=0){const i=this.material.getBufferBindingByName("matrices");i.options.offset=t,i.parent=this.renderBundle.binding,i.shouldResetBindGroup=!0}setShaders(){const{shaders:t}=this.options;return t?((!t.vertex||!t.vertex.code)&&(t.vertex={code:Yi,entryPoint:"main"}),(t.fragment===void 0||t.fragment&&!t.fragment.code)&&(t.fragment={code:Vr,entryPoint:"main"})):this.options.shaders={vertex:{code:Yi,entryPoint:"main"},fragment:{code:Vr,entryPoint:"main"}},this.options.receiveShadows&&this.renderer.shadowCastingLights.find(s=>s.shadow.isActive)&&t.fragment&&typeof t.fragment=="object"&&(t.fragment.code=Mr(this.renderer)+Br+Pr(this.renderer)+Tr+t.fragment.code),t}useGeometry(t){super.useGeometry(t),this.domFrustum&&(this.domFrustum.boundingBox=this.geometry.boundingBox),this.shouldUpdateMatrixStack()}setDOMFrustum(){this.domFrustum=new cr({boundingBox:this.geometry?.boundingBox,modelViewProjectionMatrix:this.modelViewProjectionMatrix,containerBoundingRect:this.renderer.boundingRect,DOMFrustumMargins:this.options.DOMFrustumMargins,onReEnterView:()=>{this._onReEnterViewCallback&&this._onReEnterViewCallback()},onLeaveView:()=>{this._onLeaveViewCallback&&this._onLeaveViewCallback()}}),this.DOMFrustumMargins=this.domFrustum.DOMFrustumMargins,this.frustumCulling=this.options.frustumCulling}cleanupRenderMaterialParameters(t){if(delete t.frustumCulling,delete t.DOMFrustumMargins,this.options.receiveShadows){const i=[];let s=[];this.renderer.shadowCastingLights.forEach(r=>{r.shadow.isActive&&(i.push(r.shadow.depthTexture),s.push(r.shadow.depthComparisonSampler))}),s=s.filter((r,o,a)=>a.findIndex(h=>h.uuid===r.uuid)===o),t.textures?t.textures=[...t.textures,...i]:t.textures=i,t.samplers?t.samplers=[...t.samplers,...s]:t.samplers=s}return super.cleanupRenderMaterialParameters(t)}setMaterial(t){const i={label:"Matrices",name:"matrices",visibility:["vertex"],minOffset:this.renderer.device.limits.minUniformBufferOffsetAlignment,struct:{model:{type:"mat4x4f",value:this.worldMatrix},modelView:{type:"mat4x4f",value:this.modelViewMatrix},normal:{type:"mat3x3f",value:this.normalMatrix}}};this.options.renderBundle&&this.options.renderBundle.binding&&(i.parent=this.options.renderBundle.binding,i.offset=this.options.renderBundle.meshes.size);const s=new me(i);t.bindings||(t.bindings=[]),t.bindings.unshift(s),super.setMaterial(t)}get visible(){return this._visible}set visible(t){this.shouldUpdateMatrixStack(),this._visible=t}resize(t){this.domFrustum&&this.domFrustum.setContainerBoundingRect(this.renderer.boundingRect),super.resize(t)}applyScale(){super.applyScale();for(const t of this.domTextures)t.resize()}get projectedBoundingRect(){return this.domFrustum?.projectedBoundingRect}onReEnterView(t){return t&&(this._onReEnterViewCallback=t),this}onLeaveView(t){return t&&(this._onLeaveViewCallback=t),this}get clipSpaceBoundingSphere(){const{center:t,radius:i,min:s,max:r}=this.geometry.boundingBox,o=this.worldMatrix.getTranslation(),a=i*this.worldMatrix.getMaxScaleOnAxis(),h=t.clone().add(o);h.z+=s.z;const u=t.clone().add(o);u.z+=r.z;const d=h.clone();d.y+=a;const c=u.clone();c.y+=a,h.applyMat4(this.camera.viewProjectionMatrix),u.applyMat4(this.camera.viewProjectionMatrix),d.applyMat4(this.camera.viewProjectionMatrix),c.applyMat4(this.camera.viewProjectionMatrix);const f=h.distance(d),p=u.distance(c),g={xMin:h.x-f,xMax:h.x+f,yMin:h.y-f,yMax:h.y+f},y={xMin:u.x-p,xMax:u.x+p,yMin:u.y-p,yMax:u.y+p},x={xMin:Math.min(g.xMin,y.xMin),yMin:Math.min(g.yMin,y.yMin),xMax:Math.max(g.xMax,y.xMax),yMax:Math.max(g.yMax,y.yMax)},b=u.add(h).multiplyScalar(.5).clone();b.x=(x.xMax+x.xMin)/2,b.y=(x.yMax+x.yMin)/2;const C=Math.max(x.xMax-x.xMin,x.yMax-x.yMin)*.5;return{center:b,radius:C}}checkFrustumCulling(){this.matricesNeedUpdate&&this.domFrustum&&this.frustumCulling&&(this.frustumCulling==="sphere"?this.domFrustum.setDocumentCoordsFromClipSpaceSphere(this.clipSpaceBoundingSphere):this.domFrustum.setDocumentCoordsFromClipSpaceOBB(),this.domFrustum.intersectsContainer())}onBeforeRenderPass(){this.material&&this.matricesNeedUpdate&&this.material.shouldUpdateInputsBindings("matrices"),super.onBeforeRenderPass()}onRenderPass(t){this.ready&&(this._onRenderCallback&&this._onRenderCallback(),(this.domFrustum&&this.domFrustum.isIntersecting||!this.frustumCulling)&&(this.material.render(t),this.geometry.render(t)))}destroy(){this.options.castShadows&&this.renderer.shadowCastingLights.forEach(t=>{t.shadow.isActive&&t.shadow.removeMesh(this)}),super.destroy()}}}l(Wr,"ProjectedMeshBaseMixin");class jr extends Wr(is){static{l(this,"Mesh")}constructor(e,t={}){e=Oe(e,t.label?t.label+" Mesh":"Mesh"),super(e,null,t),this.type="Mesh"}}class ss extends qi{static{l(this,"ComputePipelineEntry")}constructor(e){const{label:t,renderer:i,bindGroups:s}=e,r="ComputePipelineEntry";I(i,t?t+" "+r:r),super(e),this.type=r,this.shaders={compute:{head:"",code:"",module:null}},this.descriptor=null}patchShaders(){this.shaders.compute.head="",this.shaders.compute.code="";const e=[];for(const t of this.bindGroups){let i=0;t.bindings.forEach((s,r)=>{s.wgslGroupFragment.forEach((o,a)=>{e.push({groupIndex:t.index,bindIndex:i,wgslStructFragment:s.wgslStructFragment,wgslGroupFragment:o,newLine:r===t.bindings.length-1&&a===s.wgslGroupFragment.length-1}),i++})})}for(const t of e)t.wgslStructFragment&&this.shaders.compute.head.indexOf(t.wgslStructFragment)===-1&&(this.shaders.compute.head=`
${t.wgslStructFragment}
${this.shaders.compute.head}`),this.shaders.compute.head.indexOf(t.wgslGroupFragment)===-1&&(this.shaders.compute.head=`${this.shaders.compute.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`),t.newLine&&(this.shaders.compute.head+=`
`);this.shaders.compute.code=this.shaders.compute.head+this.options.shaders.compute.code}createShaders(){this.patchShaders(),this.shaders.compute.module=this.createShaderModule({code:this.shaders.compute.code,type:"compute"})}createPipelineDescriptor(){this.shaders.compute.module&&(this.descriptor={label:this.options.label,layout:this.layout,compute:{module:this.shaders.compute.module,entryPoint:this.options.shaders.compute.entryPoint}})}createComputePipeline(){if(this.shaders.compute.module)try{this.pipeline=this.renderer.createComputePipeline(this.descriptor)}catch(e){this.status.error=e,ie(e)}}async createComputePipelineAsync(){if(this.shaders.compute.module)try{this.pipeline=await this.renderer.createComputePipelineAsync(this.descriptor),this.status.compiled=!0,this.status.compiling=!1,this.status.error=null}catch(e){this.status.error=e,ie(e)}}async compilePipelineEntry(){super.compilePipelineEntry(),this.options.useAsync?await this.createComputePipelineAsync():(this.createComputePipeline(),this.status.compiled=!0,this.status.compiling=!1,this.status.error=null)}}class qr{static{l(this,"PipelineManager")}constructor(){this.type="PipelineManager",this.currentPipelineIndex=null,this.pipelineEntries=[],this.activeBindGroups=[]}compareShaders(e,t){return e.code===t.code&&e.entryPoint===t.entryPoint}isSameRenderPipeline(e){return this.pipelineEntries.filter(t=>t instanceof Ye).find(t=>{const{options:i}=t,{shaders:s,rendering:r,cacheKey:o}=e,a=o===i.cacheKey,h=this.compareShaders(s.vertex,i.shaders.vertex),u=!s.fragment&&!i.shaders.fragment||this.compareShaders(s.fragment,i.shaders.fragment),d=vr(r,i.rendering);return a&&!d.length&&h&&u})}createRenderPipeline(e){const{renderer:t,attributes:i,bindGroups:s,cacheKey:r,options:o}=e,{shaders:a,label:h,useAsyncPipeline:u,rendering:d}=o,c={renderer:t,label:h+" render pipeline",shaders:a,useAsync:u,bindGroups:s,cacheKey:r,rendering:d,attributes:i},f=this.isSameRenderPipeline(c);if(f)return f;{const p=new Ye(c);return this.pipelineEntries.push(p),p}}isSameComputePipeline(e){return this.pipelineEntries.filter(t=>t instanceof ss).find(t=>{const{options:i}=t,{shaders:s,cacheKey:r}=e,o=r===i.cacheKey,a=this.compareShaders(s.compute,i.shaders.compute);return o&&a})}createComputePipeline(e){const{renderer:t,bindGroups:i,cacheKey:s,options:r}=e,{shaders:o,label:a,useAsyncPipeline:h}=r,u={renderer:t,label:a+" compute pipeline",shaders:o,useAsync:h,bindGroups:i,cacheKey:s},d=this.isSameComputePipeline(u);if(d)return d;{const c=new ss(u);return this.pipelineEntries.push(c),c}}setCurrentPipeline(e,t){t.index!==this.currentPipelineIndex&&(e.setPipeline(t.pipeline),this.currentPipelineIndex=t.index)}setActiveBindGroups(e,t){t.forEach((i,s)=>{(!this.activeBindGroups[s]||this.activeBindGroups[s].uuid!==i.uuid||this.activeBindGroups[s].index!==i.index)&&(this.activeBindGroups[s]=i,e.setBindGroup(i.index,i.bindGroup))})}resetCurrentPipeline(){this.currentPipelineIndex=null,this.activeBindGroups=[]}}class Mo{static{l(this,"ResizeManager")}constructor(){this.shouldWatch=!0,this.entries=[],typeof window=="object"&&"ResizeObserver"in window&&(this.resizeObserver=new ResizeObserver(e=>{e.map(i=>this.entries.filter(s=>s.element.isSameNode(i.target))).flat().sort((i,s)=>s.priority-i.priority)?.forEach(i=>{i&&i.callback&&i.callback()})}))}useObserver(e=!0){this.shouldWatch=e}observe({element:e,priority:t,callback:i}){if(!e||!this.shouldWatch)return;this.resizeObserver?.observe(e);const s={element:e,priority:t,callback:i};this.entries.push(s)}unobserve(e){this.resizeObserver?.unobserve(e),this.entries=this.entries.filter(t=>!t.element.isSameNode(e))}destroy(){this.resizeObserver?.disconnect()}}const rs=new Mo;class ns{static{l(this,"DOMElement")}constructor({element:e=document.body,priority:t=1,onSizeChanged:i=l((r=null)=>{},"onSizeChanged"),onPositionChanged:s=l((r=null)=>{},"onPositionChanged")}={}){if(typeof e=="string"){if(this.element=document.querySelector(e),!this.element){const r=typeof e=="string"?`'${e}' selector`:`${e} HTMLElement`;ie(`DOMElement: corresponding ${r} not found.`)}}else this.element=e;this.priority=t,this.isResizing=!1,this.onSizeChanged=i,this.onPositionChanged=s,this.resizeManager=rs,this.resizeManager.observe({element:this.element,priority:this.priority,callback:()=>{this.setSize()}}),this.setSize()}compareBoundingRect(e,t){return!["x","y","left","top","right","bottom","width","height"].some(i=>e[i]!==t[i])}get boundingRect(){return this._boundingRect}set boundingRect(e){const t=!!this.boundingRect&&this.compareBoundingRect(e,this.boundingRect);this._boundingRect={top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.width,height:e.height,x:e.x,y:e.y},t||this.onSizeChanged(this.boundingRect)}updateScrollPosition(e={x:0,y:0}){this.isResizing||(this._boundingRect.top+=e.y,this._boundingRect.left+=e.x,(e.x||e.y)&&this.onPositionChanged(this.boundingRect))}setSize(e=null){!this.element||this.isResizing||(this.isResizing=!0,this.boundingRect=e??this.element.getBoundingClientRect(),setTimeout(()=>{this.isResizing=!1},10))}destroy(){this.resizeManager.unobserve(this.element)}}const Co=new m,So=new m,os=new m,as=new m;class Yr extends we{static{l(this,"Scene")}constructor({renderer:e}){super(),e=I(e,"Scene"),this.renderer=e,this.computePassEntries=[],this.renderPassEntries={pingPong:[],renderTarget:[],screen:[]}}setMainRenderPassEntry(){this.renderPassEntries.screen.push({renderPass:this.renderer.renderPass,renderTexture:null,onBeforeRenderPass:null,onAfterRenderPass:null,element:null,stack:{unProjected:{opaque:[],transparent:[]},projected:{opaque:[],transparent:[]}}})}getRenderPassEntryLength(e){return e?e.element?e.element.visible?1:0:e.stack.unProjected.opaque.length+e.stack.unProjected.transparent.length+e.stack.projected.opaque.length+e.stack.projected.transparent.length:0}addComputePass(e){this.computePassEntries.push(e),this.computePassEntries.sort((t,i)=>t.renderOrder!==i.renderOrder?t.renderOrder-i.renderOrder:t.index-i.index)}removeComputePass(e){this.computePassEntries=this.computePassEntries.filter(t=>t.uuid!==e.uuid)}addRenderTarget(e){this.renderPassEntries.renderTarget.find(t=>t.renderPass.uuid===e.renderPass.uuid)||this.renderPassEntries.renderTarget.push({renderPass:e.renderPass,renderTexture:e.renderTexture,onBeforeRenderPass:null,onAfterRenderPass:null,element:null,stack:{unProjected:{opaque:[],transparent:[]},projected:{opaque:[],transparent:[]}}})}removeRenderTarget(e){this.renderPassEntries.renderTarget=this.renderPassEntries.renderTarget.filter(t=>t.renderPass.uuid!==e.renderPass.uuid)}getMeshProjectionStack(e){const t=e.outputTarget?this.renderPassEntries.renderTarget.find(s=>s.renderPass.uuid===e.outputTarget.renderPass.uuid):this.renderPassEntries.screen[0],{stack:i}=t;return e.material.options.rendering.useProjection?i.projected:i.unProjected}orderStack(e){e.sort((t,i)=>t.renderOrder-i.renderOrder||t.index-i.index)}isStackObjectRenderBundle(e){return e.type==="RenderBundle"}addMesh(e){const t=this.getMeshProjectionStack(e),i=!!e.transparent,{useProjection:s}=e.material.options.rendering;if(e.renderBundle){const{renderBundle:r}=e;r.addMesh(e,e.outputTarget?e.outputTarget.renderPass:this.renderer.renderPass),e.renderBundle&&r.meshes.size===1&&(r.transparent===null&&(r.transparent=i),r.useProjection===null&&(r.useProjection=s),this.addRenderBundle(r,t))}if(!e.renderBundle){const r=i?t.transparent:t.opaque;r.push(e),this.orderStack(r)}"parent"in e&&!e.parent&&s&&(e.parent=this)}removeMesh(e){const t=this.getMeshProjectionStack(e),i=!!e.transparent;e.renderBundle?e.renderBundle.removeMesh(e,!1):i?t.transparent=t.transparent.filter(s=>s.uuid!==e.uuid):t.opaque=t.opaque.filter(s=>s.uuid!==e.uuid),"parent"in e&&e.parent&&e.parent.object3DIndex===this.object3DIndex&&(e.parent=null)}addRenderBundle(e,t){const i=e.transparent?t.transparent:t.opaque;i.push(e),this.orderStack(i)}removeRenderBundle(e){const t=this.renderPassEntries.renderTarget.find(a=>a.renderPass.uuid===e.options.renderPass?.uuid),{stack:i}=t||this.renderPassEntries.screen[0],r=!!e.useProjection?i.projected:i.unProjected;!!e.transparent?r.transparent=r.transparent.filter(a=>a.uuid!==e.uuid):r.opaque=r.opaque.filter(a=>a.uuid!==e.uuid)}addShaderPass(e){const t=e.inputTarget||e.outputTarget?null:(o,a)=>{e.renderTexture&&a&&o.copyTextureToTexture({texture:a},{texture:e.renderTexture.texture},[e.renderTexture.size.width,e.renderTexture.size.height]),this.renderer.postProcessingPass.setLoadOp("clear")},i=!e.outputTarget&&e.options.copyOutputToRenderTexture?(o,a)=>{e.renderTexture&&a&&o.copyTextureToTexture({texture:a},{texture:e.renderTexture.texture},[e.renderTexture.size.width,e.renderTexture.size.height])}:null,s=e.outputTarget?e.outputTarget.renderPass:this.renderer.postProcessingPass,r={renderPass:s,renderTexture:e.outputTarget?e.outputTarget.renderTexture:null,onBeforeRenderPass:t,onAfterRenderPass:i,element:e,stack:null};if(e.renderBundle){const o=!!e.transparent,{renderBundle:a}=e;a.meshes.size<1?(a.addMesh(e,s),a.size=1):(_(`${a.options.label} (${a.type}): Cannot add more than 1 ShaderPass to a render bundle. This ShaderPass will not be added: ${e.options.label}`),e.renderBundle=null),e.renderBundle&&(e.renderBundle.renderOrder=e.renderOrder,a.transparent=o,a.useProjection=!1)}this.renderPassEntries.screen.push(r),this.renderPassEntries.screen.sort((o,a)=>{const h=o.element&&!o.element.outputTarget,u=o.element?o.element.renderOrder:0,d=o.element?o.element.index:0,c=a.element&&!a.element.outputTarget,f=a.element?a.element.renderOrder:0,p=a.element?a.element.index:0;return h&&!c?1:!h&&c?-1:u!==f?u-f:d-p})}removeShaderPass(e){e.renderBundle&&e.renderBundle.empty(),this.renderPassEntries.screen=this.renderPassEntries.screen.filter(t=>!t.element||t.element.uuid!==e.uuid)}addPingPongPlane(e){if(this.renderPassEntries.pingPong.push({renderPass:e.outputTarget.renderPass,renderTexture:e.outputTarget.renderTexture,onBeforeRenderPass:null,onAfterRenderPass:(t,i)=>{t.copyTextureToTexture({texture:i},{texture:e.renderTexture.texture},[e.renderTexture.size.width,e.renderTexture.size.height])},element:e,stack:null}),e.renderBundle){const t=!!e.transparent,{renderBundle:i}=e;i.meshes.size<1?(i.addMesh(e,e.outputTarget.renderPass),i.size=1):(_(`${i.options.label} (${i.type}): Cannot add more than 1 PingPongPlane to a render bundle. This PingPongPlane will not be added: ${e.options.label}`),e.renderBundle=null),e.renderBundle&&(e.renderBundle.renderOrder=e.renderOrder,i.transparent=t,i.useProjection=!1)}this.renderPassEntries.pingPong.sort((t,i)=>t.element.renderOrder-i.element.renderOrder)}removePingPongPlane(e){e.renderBundle&&e.renderBundle.empty(),this.renderPassEntries.pingPong=this.renderPassEntries.pingPong.filter(t=>t.element.uuid!==e.uuid)}getObjectRenderPassEntry(e){if(e.type==="RenderTarget")return this.renderPassEntries.renderTarget.find(t=>t.renderPass.uuid===e.renderPass.uuid);if(e.type==="PingPongPlane")return this.renderPassEntries.pingPong.find(t=>t.element.uuid===e.uuid);if(e.type==="ShaderPass")return this.renderPassEntries.screen.find(t=>t.element?.uuid===e.uuid);{const t=e.outputTarget?"renderTarget":"screen";return e.renderBundle?this.renderPassEntries[t].find(i=>[...i.stack.unProjected.opaque,...i.stack.unProjected.transparent,...i.stack.projected.opaque,...i.stack.projected.transparent].filter(s=>s.type==="RenderBundle").some(s=>s.meshes.get(e.uuid))):this.renderPassEntries[t].find(i=>[...i.stack.unProjected.opaque,...i.stack.unProjected.transparent,...i.stack.projected.opaque,...i.stack.projected.transparent].some(s=>s.uuid===e.uuid))}}sortTransparentMeshes(e){e.sort((t,i)=>{if(t.renderOrder!==i.renderOrder||this.isStackObjectRenderBundle(t)||this.isStackObjectRenderBundle(i))return t.renderOrder-i.renderOrder;t.geometry?os.copy(t.geometry.boundingBox.center).applyMat4(t.worldMatrix):t.worldMatrix.getTranslation(os),i.geometry?as.copy(i.geometry.boundingBox.center).applyMat4(i.worldMatrix):i.worldMatrix.getTranslation(as);const s=t.geometry?t.geometry.boundingBox.radius*t.worldMatrix.getMaxScaleOnAxis():0,r=i.geometry?i.geometry.boundingBox.radius*i.worldMatrix.getMaxScaleOnAxis():0;return i.camera.worldMatrix.getTranslation(So).distance(as)-r-(t.camera.worldMatrix.getTranslation(Co).distance(os)-s)})}renderSinglePassEntry(e,t){const i=t.renderPass.updateView(t.renderTexture?.texture);t.onBeforeRenderPass&&t.onBeforeRenderPass(e,i);const s=e.beginRenderPass(t.renderPass.descriptor);if(this.renderer.production||s.pushDebugGroup(t.element?`${t.element.options.label} render pass using ${t.renderPass.options.label} descriptor`:`Render stack pass using ${t.renderPass.options.label}${t.renderTexture?" onto "+t.renderTexture.options.label:""}`),t.element)t.element.renderBundle?t.element.renderBundle.render(s):t.element.render(s);else if(t.stack){for(const r of t.stack.unProjected.opaque)r.render(s);for(const r of t.stack.unProjected.transparent)r.render(s);if(t.stack.projected.opaque.length||t.stack.projected.transparent.length){for(const r of t.stack.projected.opaque)r.render(s);this.sortTransparentMeshes(t.stack.projected.transparent);for(const r of t.stack.projected.transparent)r.render(s)}}this.renderer.production||s.popDebugGroup(),s.end(),t.onAfterRenderPass&&t.onAfterRenderPass(e,i),this.renderer.pipelineManager.resetCurrentPipeline()}onBeforeRender(){for(let e=0,t=this.renderer.meshes.length;e<t;e++)this.renderer.meshes[e].onBeforeRenderScene();this.updateMatrixStack();for(const e of this.renderer.meshes)"checkFrustumCulling"in e&&e.visible&&e.checkFrustumCulling()}render(e){for(const t of this.computePassEntries){const i=e.beginComputePass();this.renderer.production||i.pushDebugGroup(`${t.options.label}: begin compute pass`),t.render(i),this.renderer.production||i.popDebugGroup(),i.end(),t.copyBufferToResult(e),this.renderer.pipelineManager.resetCurrentPipeline()}for(const t in this.renderPassEntries){let i=0;this.renderPassEntries[t].forEach(s=>{this.getRenderPassEntryLength(s)&&(s.renderPass.setLoadOp(t==="screen"&&i!==0?"load":"clear"),i++,this.renderSinglePassEntry(e,s))})}}}var Hr=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$9"),Xr=l((n,e,t)=>(Hr(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$6"),To=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$9"),Po=l((n,e,t,i)=>(Hr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$6"),Ro=l((n,e,t,i)=>({set _(s){Po(n,e,s)},get _(){return Xr(n,e,i)}}),"__privateWrapper"),hi;class ui{static{l(this,"TasksQueueManager")}constructor(){To(this,hi,0),this.queue=[]}add(e=s=>{},{order:t=this.queue.length,once:i=!1}={}){const s={callback:e,order:t,once:i,id:Xr(this,hi)};return Ro(this,hi)._++,this.queue.push(s),this.queue.sort((r,o)=>r.order-o.order),s.id}remove(e=0){this.queue=this.queue.filter(t=>t.id!==e)}execute(e){this.queue.forEach(t=>{t.callback(e),t.once&&this.remove(t.id)})}}hi=new WeakMap;class hs{static{l(this,"GPURenderer")}constructor({deviceManager:e,label:t,container:i,pixelRatio:s=1,autoResize:r=!0,context:o={},renderPass:a}){this._onBeforeRenderCallback=p=>{},this._onAfterRenderCallback=p=>{},this._onResizeCallback=()=>{},this._onAfterResizeCallback=()=>{},this.type="GPURenderer",this.uuid=W(),(!e||e.constructor.name!=="GPUDeviceManager")&&ie(t?`${t} (${this.type}): no device manager or wrong device manager provided: ${e}`:`${this.type}: no device manager or wrong device manager provided: ${e}`),t||(t=`${this.constructor.name}${e.renderers.length}`),this.deviceManager=e,this.deviceManager.addRenderer(this),this.shouldRender=!0,this.shouldRenderScene=!0;const h={alphaMode:"premultiplied",format:this.deviceManager.gpu?.getPreferredCanvasFormat(),...o};a={useDepth:!0,sampleCount:4,clearValue:[0,0,0,0],...a},this.options={deviceManager:e,label:t,container:i,pixelRatio:s,autoResize:r,context:h,renderPass:a},this.pixelRatio=s??window.devicePixelRatio??1;const u=i instanceof OffscreenCanvas,d=u||i instanceof HTMLCanvasElement;this.canvas=d?i:document.createElement("canvas");const{width:c,height:f}=this.canvas;this.rectBBox={width:c,height:f,top:0,left:0},this.setScene(),this.setTasksQueues(),this.setRendererObjects(),u||(this.domElement=new ns({element:i,priority:5,onSizeChanged:()=>{this.options.autoResize&&this.resize()}}),this.resize(),d||this.domElement.element.appendChild(this.canvas)),this.deviceManager.device&&this.setContext()}setSize(e=null){e={width:Math.max(1,this.boundingRect.width),height:Math.max(1,this.boundingRect.height),top:this.boundingRect.top,left:this.boundingRect.left,...e},this.rectBBox=e;const t={width:this.rectBBox.width,height:this.rectBBox.height};t.width*=this.pixelRatio,t.height*=this.pixelRatio,this.clampToMaxDimension(t),this.canvas.width=Math.floor(t.width),this.canvas.height=Math.floor(t.height),this.canvas.style&&(this.canvas.style.width=this.rectBBox.width+"px",this.canvas.style.height=this.rectBBox.height+"px")}setPixelRatio(e=1){this.pixelRatio=e,this.resize(this.rectBBox)}resize(e=null){this.setSize(e),this._onResizeCallback&&this._onResizeCallback(),this.resizeObjects(),this._onAfterResizeCallback&&this._onAfterResizeCallback()}resizeObjects(){this.textures.forEach(e=>{e.resize()}),this.renderPass?.resize(),this.postProcessingPass?.resize(),this.renderTargets.forEach(e=>e.resize()),this.computePasses.forEach(e=>e.resize()),this.pingPongPlanes.forEach(e=>e.resize(this.boundingRect)),this.shaderPasses.forEach(e=>e.resize(this.boundingRect)),this.resizeMeshes()}resizeMeshes(){this.meshes.forEach(e=>{e.resize(this.boundingRect)})}get boundingRect(){if(this.domElement&&this.domElement.boundingRect)return this.domElement.boundingRect;if(this.domElement){const e=this.domElement.element?.getBoundingClientRect();return{top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.width,height:e.height,x:e.x,y:e.y}}else return{top:this.rectBBox.top,right:this.rectBBox.left+this.rectBBox.width,bottom:this.rectBBox.top+this.rectBBox.height,left:this.rectBBox.left,width:this.rectBBox.width,height:this.rectBBox.height,x:this.rectBBox.left,y:this.rectBBox.top}}clampToMaxDimension(e){this.device&&(e.width=Math.min(this.device.limits.maxTextureDimension2D,e.width),e.height=Math.min(this.device.limits.maxTextureDimension2D,e.height))}get device(){return this.deviceManager.device}get ready(){return this.deviceManager.ready&&!!this.context&&!!this.canvas.width&&!!this.canvas.height}get production(){return this.deviceManager.production}get samplers(){return this.deviceManager.samplers}get buffers(){return this.deviceManager.buffers}get pipelineManager(){return this.deviceManager.pipelineManager}get deviceRenderedObjects(){return this.deviceManager.deviceRenderedObjects}configureContext(){this.context.configure({device:this.device,...this.options.context,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST})}setContext(){this.context=this.canvas.getContext("webgpu"),this.device&&(this.configureContext(),this.setMainRenderPasses())}loseContext(){this.renderBundles.forEach(e=>e.loseContext()),this.renderedObjects.forEach(e=>e.loseContext())}restoreContext(){this.configureContext(),this.indirectBuffers.forEach(e=>e.create()),this.textures.forEach(e=>{e.createTexture()}),this.renderPass?.resize(),this.postProcessingPass?.resize(),this.renderTargets.forEach(e=>e.resize()),this.renderedObjects.forEach(e=>e.restoreContext())}setMainRenderPasses(){this.renderPass=new Jt(this,{label:this.options.label+" render pass",...this.options.renderPass}),this.scene.setMainRenderPassEntry(),this.postProcessingPass=new Jt(this,{label:this.options.label+" post processing render pass",useDepth:!1,sampleCount:1})}setScene(){this.scene=new Yr({renderer:this})}createBuffer(e){const t=this.deviceManager.device?.createBuffer(e.options);return this.deviceManager.addBuffer(e),t}removeBuffer(e){this.deviceManager.removeBuffer(e)}queueWriteBuffer(e,t,i){this.deviceManager.device?.queue.writeBuffer(e,t,i)}copyBufferToBuffer({srcBuffer:e,dstBuffer:t,commandEncoder:i}){if(!e||!e.GPUBuffer)return _(`${this.options.label} (${this.type}): cannot copy to buffer because the source buffer has not been provided`),null;if(t||(t=new Fe),t.GPUBuffer||t.createBuffer(this,{label:`GPURenderer (${this.options.label}): destination copy buffer from: ${e.options.label}`,size:e.GPUBuffer.size,usage:["copyDst","mapRead"]}),e.GPUBuffer.mapState!=="unmapped"){_(`${this.options.label} (${this.type}): Cannot copy from ${e.GPUBuffer} because it is currently mapped`);return}if(t.GPUBuffer.mapState!=="unmapped"){_(`${this.options.label} (${this.type}): Cannot copy from ${t.GPUBuffer} because it is currently mapped`);return}const s=!!i;if(s||(i=this.deviceManager.device?.createCommandEncoder({label:`${this.type} (${this.options.label}): Copy buffer command encoder`}),!this.production&&i.pushDebugGroup(`${this.type} (${this.options.label}): Copy buffer command encoder`)),i.copyBufferToBuffer(e.GPUBuffer,0,t.GPUBuffer,0,t.GPUBuffer.size),!s){!this.production&&i.popDebugGroup();const r=i.finish();this.deviceManager.device?.queue.submit([r])}return t}get bindGroups(){return this.deviceManager.bindGroups}addBindGroup(e){this.deviceManager.addBindGroup(e)}removeBindGroup(e){this.deviceManager.removeBindGroup(e)}createBindGroupLayout(e){return this.deviceManager.device?.createBindGroupLayout(e)}createBindGroup(e){return this.deviceManager.device?.createBindGroup(e)}createShaderModule(e){return this.device?.createShaderModule(e)}createPipelineLayout(e){return this.device?.createPipelineLayout(e)}createRenderPipeline(e){return this.device?.createRenderPipeline(e)}async createRenderPipelineAsync(e){return await this.device?.createRenderPipelineAsync(e)}createComputePipeline(e){return this.device?.createComputePipeline(e)}async createComputePipelineAsync(e){return await this.device?.createComputePipelineAsync(e)}get domTextures(){return this.deviceManager.domTextures}addDOMTexture(e){this.deviceManager.addDOMTexture(e)}removeDOMTexture(e){this.deviceManager.removeDOMTexture(e)}addTexture(e){this.textures.push(e)}removeTexture(e){this.textures=this.textures.filter(t=>t.uuid!==e.uuid)}createTexture(e){return this.deviceManager.device?.createTexture(e)}uploadTexture(e){this.deviceManager.uploadTexture(e)}importExternalTexture(e){return this.deviceManager.device?.importExternalTexture({source:e})}createSampler(e){const t=this.samplers.find(i=>JSON.stringify(i.options)===JSON.stringify(e.options)&&i.sampler);if(t)return t.sampler;{const{type:i,...s}=e.options,r=this.deviceManager.device?.createSampler({label:e.label,...s});return this.deviceManager.addSampler(e),r}}removeSampler(e){this.deviceManager.removeSampler(e)}setTasksQueues(){this.onBeforeCommandEncoderCreation=new ui,this.onBeforeRenderScene=new ui,this.onAfterRenderScene=new ui,this.onAfterCommandEncoderSubmission=new ui}setRendererObjects(){this.computePasses=[],this.pingPongPlanes=[],this.shaderPasses=[],this.renderTargets=[],this.meshes=[],this.textures=[],this.renderBundles=new Map,this.indirectBuffers=new Map}get renderedObjects(){return[...this.computePasses,...this.meshes,...this.shaderPasses,...this.pingPongPlanes]}getObjectsByBindGroup(e){return this.deviceRenderedObjects.filter(t=>[...t.material.bindGroups,...t.material.inputsBindGroups,...t.material.clonedBindGroups].some(i=>i.uuid===e.uuid))}getObjectsByTexture(e){return this.deviceRenderedObjects.filter(t=>[...t.material.domTextures,...t.material.textures].some(i=>i.uuid===e.uuid))}onBeforeRender(e){return e&&(this._onBeforeRenderCallback=e),this}onAfterRender(e){return e&&(this._onAfterRenderCallback=e),this}onResize(e){return e&&(this._onResizeCallback=e),this}onAfterResize(e){return e&&(this._onAfterResizeCallback=e),this}renderSingleComputePass(e,t){const i=e.beginComputePass();t.render(i),i.end(),t.copyBufferToResult(e)}renderSingleMesh(e,t){const i=e.beginRenderPass(this.renderPass.descriptor);t.render(i),i.end()}renderOnce(e){const t=this.device?.createCommandEncoder({label:"Render once command encoder"});!this.production&&t.pushDebugGroup("Render once command encoder"),this.pipelineManager.resetCurrentPipeline(),e.forEach(s=>{s.type==="ComputePass"?this.renderSingleComputePass(t,s):this.renderSingleMesh(t,s)}),!this.production&&t.popDebugGroup();const i=t.finish();this.device?.queue.submit([i]),this.pipelineManager.resetCurrentPipeline()}forceClear(e){const t=!!e;if(t||(e=this.device?.createCommandEncoder({label:`${this.type} (${this.options.label}): Force clear command encoder`}),!this.production&&e.pushDebugGroup(`${this.type} (${this.options.label}): Force clear command encoder`)),this.renderPass.updateView(),e.beginRenderPass(this.renderPass.descriptor).end(),!t){!this.production&&e.popDebugGroup();const s=e.finish();this.device?.queue.submit([s])}}onBeforeCommandEncoder(){this.ready&&(this.shouldRenderScene&&this.scene?.onBeforeRender(),this.onBeforeCommandEncoderCreation.execute())}onAfterCommandEncoder(){this.ready&&this.onAfterCommandEncoderSubmission.execute()}render(e){!this.ready||!this.shouldRender||(this._onBeforeRenderCallback&&this._onBeforeRenderCallback(e),this.onBeforeRenderScene.execute(e),this.shouldRenderScene&&this.scene?.render(e),this._onAfterRenderCallback&&this._onAfterRenderCallback(e),this.onAfterRenderScene.execute(e))}destroy(){this.deviceManager.renderers=this.deviceManager.renderers.filter(e=>e.uuid!==this.uuid),this.domElement?.destroy(),this.renderBundles.forEach(e=>e.destroy()),this.renderPass?.destroy(),this.postProcessingPass?.destroy(),this.renderTargets.forEach(e=>e.destroy()),this.renderedObjects.forEach(e=>e.remove()),this.indirectBuffers.forEach(e=>e.destroy()),this.textures.forEach(e=>e.destroy()),this.context?.unconfigure()}}var Kr=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$8"),zo=l((n,e,t)=>(Kr(n,e,"read from private field"),e.get(n)),"__privateGet$5"),Eo=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$8"),us=l((n,e,t,i)=>(Kr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$5"),Xe;class ls extends hs{static{l(this,"GPUCameraRenderer")}constructor({deviceManager:e,label:t,container:i,pixelRatio:s=1,autoResize:r=!0,context:o={},renderPass:a,camera:h={},lights:u={}}){super({deviceManager:e,label:t,container:i,pixelRatio:s,autoResize:r,context:o,renderPass:a}),Eo(this,Xe,void 0),this.type="GPUCameraRenderer",h={fov:50,near:.1,far:1e3,...h},u!==!1&&(u={maxAmbientLights:2,maxDirectionalLights:5,maxPointLights:5,...u}),this.options={...this.options,camera:h,lights:u},this.bindings={},us(this,Xe,!0),this.lights=[],this.setCamera(h),this.setCameraBinding(),this.options.lights&&(this.setLightsBinding(),this.setShadowsBinding()),this.setCameraLightsBindGroup()}loseContext(){super.loseContext(),this.cameraLightsBindGroup.loseContext()}restoreContext(){super.restoreContext(),this.cameraLightsBindGroup?.restoreContext(),this.updateCameraBindings()}setCamera(e){const{width:t,height:i}=this.rectBBox;this.useCamera(new nr({fov:e.fov,near:e.near,far:e.far,width:t,height:i,pixelRatio:this.pixelRatio,onMatricesChanged:()=>{this.onCameraMatricesChanged()}}))}useCamera(e){if(!(this.camera&&e&&this.camera.uuid===e.uuid)&&(this.camera&&(this.camera.parent=null,this.camera.onMatricesChanged=()=>{}),this.camera=e,this.camera.parent=this.scene,this.bindings.camera)){this.camera.onMatricesChanged=()=>this.onCameraMatricesChanged(),this.bindings.camera.inputs.view.value=this.camera.viewMatrix,this.bindings.camera.inputs.projection.value=this.camera.projectionMatrix;for(const t of this.meshes)"modelViewMatrix"in t&&(t.camera=this.camera)}}onCameraMatricesChanged(){this.updateCameraBindings();for(const e of this.meshes)"modelViewMatrix"in e&&e.shouldUpdateProjectionMatrixStack()}setCameraBinding(){this.bindings.camera=new me({label:"Camera",name:"camera",visibility:["vertex"],struct:{view:{type:"mat4x4f",value:this.camera.viewMatrix},projection:{type:"mat4x4f",value:this.camera.projectionMatrix},position:{type:"vec3f",value:this.camera.position.clone().setFromMatrixPosition(this.camera.worldMatrix),onBeforeUpdate:()=>{this.bindings.camera.inputs.position.value.copy(this.camera.position).setFromMatrixPosition(this.camera.worldMatrix)}}}})}addLight(e){this.lights.push(e),this.bindings[e.type].inputs.count.value++,this.bindings[e.type].inputs.count.shouldUpdate=!0}removeLight(e){this.lights=this.lights.filter(t=>t.uuid!==e.uuid),this.bindings[e.type].inputs.count.value--,this.bindings[e.type].inputs.count.shouldUpdate=!0}setLightsBinding(){if(!this.options.lights)return;this.lightsBindingParams={ambientLights:{max:this.options.lights.maxAmbientLights,label:"Ambient lights",params:{color:{type:"array<vec3f>",size:3}}},directionalLights:{max:this.options.lights.maxDirectionalLights,label:"Directional lights",params:{color:{type:"array<vec3f>",size:3},direction:{type:"array<vec3f>",size:3}}},pointLights:{max:this.options.lights.maxPointLights,label:"Point lights",params:{color:{type:"array<vec3f>",size:3},position:{type:"array<vec3f>",size:3},range:{type:"array<f32>",size:1}}}},Object.keys({ambientLights:null,directionalLights:null,pointLights:null}).forEach(t=>{this.setLightsTypeBinding(t)})}setLightsTypeBinding(e){const t=Object.keys(this.lightsBindingParams[e].params).map(i=>({key:i,type:this.lightsBindingParams[e].params[i].type,size:this.lightsBindingParams[e].params[i].size})).reduce((i,s)=>(i[s.key]={type:s.type,value:new Float32Array(Math.max(this.lightsBindingParams[e].max,1)*s.size)},i),{});this.bindings[e]=new me({label:this.lightsBindingParams[e].label,name:e,bindingType:"storage",visibility:["vertex","fragment","compute"],struct:{count:{type:"i32",value:0},...t}})}onMaxLightOverflow(e){this.production||_(`${this.options.label} (${this.type}): You are overflowing the current max lights count of '${this.lightsBindingParams[e].max}' for this type of lights: ${e}. This should be avoided by setting a larger ${"max"+e.charAt(0).toUpperCase()+e.slice(1)} when instancing your ${this.type}.`),this.lightsBindingParams[e].max++;const t=this.cameraLightsBindGroup.getBindingByName(e);t&&this.cameraLightsBindGroup.destroyBufferBinding(t),this.setLightsTypeBinding(e);const i=this.cameraLightsBindGroup.bindings.findIndex(s=>s.name===e);if(i!==-1?this.cameraLightsBindGroup.bindings[i]=this.bindings[e]:(this.bindings[e].shouldResetBindGroup=!0,this.bindings[e].shouldResetBindGroupLayout=!0,this.cameraLightsBindGroup.addBinding(this.bindings[e]),this.shouldUpdateCameraLightsBindGroup()),e==="directionalLights"||e==="pointLights"){const s=e.replace("Lights","")+"Shadows",r=this.cameraLightsBindGroup.getBindingByName(s);r&&this.cameraLightsBindGroup.destroyBufferBinding(r),this.setShadowsTypeBinding(e);const o=this.cameraLightsBindGroup.bindings.findIndex(a=>a.name===s);o!==-1?this.cameraLightsBindGroup.bindings[o]=this.bindings[s]:(this.bindings[s].shouldResetBindGroup=!0,this.bindings[s].shouldResetBindGroupLayout=!0,this.cameraLightsBindGroup.addBinding(this.bindings[s]),this.shouldUpdateCameraLightsBindGroup())}this.cameraLightsBindGroup.resetEntries(),this.cameraLightsBindGroup.createBindGroup(),this.lights.forEach(s=>{s.type===e&&s.reset()})}get shadowCastingLights(){return this.lights.filter(e=>e.type==="directionalLights"||e.type==="pointLights")}setShadowsBinding(){this.shadowsBindingsStruct={directional:lo,point:go},this.setShadowsTypeBinding("directionalLights"),this.setShadowsTypeBinding("pointLights")}setShadowsTypeBinding(e){const t=e.replace("Lights",""),i=t+"Shadows",s=this.shadowsBindingsStruct[t],r=t.charAt(0).toUpperCase()+t.slice(1)+" shadows";this.bindings[i]=new me({label:r,name:i,bindingType:"storage",visibility:["vertex","fragment","compute"],childrenBindings:[{binding:new me({label:r+" element",name:i+"Elements",bindingType:"uniform",visibility:["vertex","fragment"],struct:s}),count:Math.max(1,this.lightsBindingParams[e].max),forceArray:!0}]})}setCameraLightsBindGroup(){this.cameraLightsBindGroup=new Ft(this,{label:this.options.label+": Camera and lights uniform bind group",bindings:Object.keys(this.bindings).map(e=>this.bindings[e]).flat()}),this.cameraLightsBindGroup.consumers.add(this.uuid)}setCameraBindGroup(){this.cameraLightsBindGroup&&this.cameraLightsBindGroup.shouldCreateBindGroup&&(this.cameraLightsBindGroup.setIndex(0),this.cameraLightsBindGroup.createBindGroup())}shouldUpdateCameraLightsBindGroup(){us(this,Xe,!0)}updateCameraBindings(){this.bindings.camera?.shouldUpdateBinding("view"),this.bindings.camera?.shouldUpdateBinding("projection"),this.bindings.camera?.shouldUpdateBinding("position"),this.shouldUpdateCameraLightsBindGroup()}updateCameraLightsBindGroup(){this.cameraLightsBindGroup&&zo(this,Xe)&&(this.cameraLightsBindGroup.update(),us(this,Xe,!1))}getObjectsByBindGroup(e){return this.deviceRenderedObjects.filter(t=>[...t.material.bindGroups,...t.material.inputsBindGroups,...t.material.clonedBindGroups,this.cameraLightsBindGroup].some(i=>i.uuid===e.uuid))}setPerspective({fov:e,near:t,far:i}={}){this.camera?.setPerspective({fov:e,near:t,far:i,width:this.rectBBox.width,height:this.rectBBox.height,pixelRatio:this.pixelRatio})}setCameraPosition(e=new m(0,0,1)){this.camera.position.copy(e)}resize(e=null){this.setSize(e),this.setPerspective(),this._onResizeCallback&&this._onResizeCallback(),this.resizeObjects(),this._onAfterResizeCallback&&this._onAfterResizeCallback()}render(e){this.ready&&(this.setCameraBindGroup(),this.updateCameraLightsBindGroup(),super.render(e),this.cameraLightsBindGroup&&(this.cameraLightsBindGroup.needsPipelineFlush=!1))}destroy(){this.cameraLightsBindGroup?.destroy(),this.lights.forEach(e=>e.remove()),super.destroy()}}Xe=new WeakMap;class Zr{static{l(this,"GPUDeviceManager")}constructor({label:e,production:t=!1,adapterOptions:i={},onError:s=l(()=>{},"onError"),onDeviceLost:r=l(a=>{},"onDeviceLost"),onDeviceDestroyed:o=l(a=>{},"onDeviceDestroyed")}={}){this.index=0,this.label=e??"GPUDeviceManager instance",this.production=t,this.ready=!1,this.adapterOptions=i,this.onError=s,this.onDeviceLost=r,this.onDeviceDestroyed=o,this.gpu=navigator.gpu,this.setPipelineManager(),this.setDeviceObjects()}async setAdapterAndDevice({adapter:e=null,device:t=null}={}){await this.setAdapter(e),await this.setDevice(t)}async init({adapter:e=null,device:t=null}={}){if(await this.setAdapterAndDevice({adapter:e,device:t}),this.device)for(const i of this.renderers)i.context||i.setContext()}async setAdapter(e=null){if(this.gpu||(this.onError(),ie("GPUDeviceManager: WebGPU is not supported on your browser/OS. No 'gpu' object in 'navigator'.")),e)this.adapter=e;else try{this.adapter=await this.gpu?.requestAdapter(this.adapterOptions),this.adapter||(this.onError(),ie("GPUDeviceManager: WebGPU is not supported on your browser/OS. 'requestAdapter' failed."))}catch(t){this.onError(),ie("GPUDeviceManager: "+t.message)}}async setDevice(e=null){if(e)this.device=e,this.ready=!0,this.index++;else try{const t=[];this.adapter.features.has("float32-filterable")&&t.push("float32-filterable"),this.device=await this.adapter?.requestDevice({label:this.label+" "+this.index,requiredFeatures:t}),this.device&&(this.ready=!0,this.index++)}catch(t){this.onError(),ie(`${this.label}: WebGPU is not supported on your browser/OS. 'requestDevice' failed: ${t}`)}this.device?.lost.then(t=>{_(`${this.label}: WebGPU device was lost: ${t.message}`),this.loseDevice(),t.reason!=="destroyed"?this.onDeviceLost(t):this.onDeviceDestroyed(t)})}setPipelineManager(){this.pipelineManager=new qr}loseDevice(){this.ready=!1,this.pipelineManager.resetCurrentPipeline(),this.samplers.forEach(e=>e.sampler=null),this.renderers.forEach(e=>e.loseContext()),this.bindGroupLayouts.clear(),this.buffers.clear()}async restoreDevice({adapter:e=null,device:t=null}={}){await this.setAdapterAndDevice({adapter:e,device:t}),this.device&&(this.samplers.forEach(i=>{const{type:s,...r}=i.options;i.sampler=this.device.createSampler({label:i.label,...r})}),this.renderers.forEach(i=>i.restoreContext()))}setDeviceObjects(){this.renderers=[],this.bindGroups=new Map,this.buffers=new Map,this.bindGroupLayouts=new Map,this.bufferBindings=new Map,this.samplers=[],this.domTextures=[],this.texturesQueue=[]}addRenderer(e){this.renderers.push(e)}removeRenderer(e){this.renderers=this.renderers.filter(t=>t.uuid!==e.uuid)}get deviceRenderedObjects(){return this.renderers.map(e=>e.renderedObjects).flat()}addBindGroup(e){this.bindGroups.set(e.uuid,e)}removeBindGroup(e){this.bindGroups.delete(e.uuid)}addBuffer(e){this.buffers.set(e.uuid,e)}removeBuffer(e){this.buffers.delete(e?.uuid)}addSampler(e){this.samplers.push(e)}removeSampler(e){this.samplers=this.samplers.filter(t=>t.uuid!==e.uuid)}addDOMTexture(e){this.domTextures.push(e)}uploadTexture(e){if(e.source)try{this.device?.queue.copyExternalImageToTexture({source:e.source,flipY:e.options.flipY},{texture:e.texture,premultipliedAlpha:e.options.premultipliedAlpha},{width:e.size.width,height:e.size.height}),e.texture.mipLevelCount>1&&_t(this.device,e.texture),this.texturesQueue.push(e)}catch({message:t}){ie(`GPUDeviceManager: could not upload texture: ${e.options.name} because: ${t}`)}else this.device?.queue.writeTexture({texture:e.texture},new Uint8Array(e.options.placeholderColor),{bytesPerRow:e.size.width*4},{width:e.size.width,height:e.size.height})}removeDOMTexture(e){this.domTextures=this.domTextures.filter(t=>t.uuid!==e.uuid)}render(){if(!this.ready)return;for(const i of this.renderers)i.shouldRender&&i.onBeforeCommandEncoder();const e=this.device?.createCommandEncoder({label:this.label+" command encoder"});!this.production&&e.pushDebugGroup(this.label+" command encoder: main render loop"),this.renderers.forEach(i=>i.render(e)),!this.production&&e.popDebugGroup();const t=e.finish();this.device?.queue.submit([t]),this.domTextures.filter(i=>!i.parentMesh&&i.sourceLoaded&&!i.sourceUploaded).forEach(i=>this.uploadTexture(i));for(const i of this.texturesQueue)i.sourceUploaded=!0;this.texturesQueue=[];for(const i of this.renderers)i.shouldRender&&i.onAfterCommandEncoder()}destroy(){this.device?.destroy(),this.device=null,this.renderers.forEach(e=>e.destroy()),this.bindGroups.forEach(e=>e.destroy()),this.buffers.forEach(e=>e?.destroy()),this.domTextures.forEach(e=>e.destroy()),this.setDeviceObjects()}}var Lo=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$7"),_o=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$7"),Go=l((n,e,t)=>(Lo(n,e,"access private method"),t),"__privateMethod$5"),ds,Jr;const Ao=5;class Qr{static{l(this,"IndirectBuffer")}constructor(e,{label:t="Indirect buffer",geometries:i=[],minEntrySize:s=Ao}={}){_o(this,ds),this.type="IndirectBuffer",e=I(e,this.type),this.renderer=e,this.uuid=W(),this.options={label:t,geometries:i,minEntrySize:s},this.geometries=new Map,this.buffer=null,this.addGeometries(i),this.renderer.indirectBuffers.set(this.uuid,this)}get size(){return this.geometries.size}addGeometries(e=[]){e.forEach(t=>this.addGeometry(t))}addGeometry(e){this.geometries.set(e.uuid,e)}getByteOffsetAtIndex(e=0){return e*this.options.minEntrySize*Uint32Array.BYTES_PER_ELEMENT}create(){const e=this.getByteOffsetAtIndex(this.geometries.size);this.buffer?(this.buffer.destroy(),this.buffer.options.size=e):this.buffer=new Fe({label:this.options.label,size:e,usage:["copyDst","indirect","storage"],mappedAtCreation:!0}),this.buffer.consumers.add(this.uuid),this.buffer.createBuffer(this.renderer);const t=new Uint32Array(this.buffer.GPUBuffer.getMappedRange());let i=0;this.geometries.forEach(s=>{Go(this,ds,Jr).call(this,s,t,i*this.options.minEntrySize),s.useIndirectBuffer({buffer:this.buffer,offset:this.getByteOffsetAtIndex(i)}),i++}),this.buffer.GPUBuffer.unmap()}destroy(){this.renderer.removeBuffer(this.buffer),this.renderer.indirectBuffers.delete(this.uuid),this.geometries.forEach(e=>e.indirectDraw=null),this.buffer?.destroy(),this.buffer=null,this.geometries=null}}ds=new WeakSet,Jr=l(function(n,e,t=0){"indexBuffer"in n&&n.indexBuffer?(e[t]=n.indexBuffer.bufferLength,e[t+1]=n.instancesCount,e[t+2]=0,e[t+3]=0,e[t+4]=0):(e[t]=n.verticesCount,e[t+1]=n.instancesCount,e[t+2]=0,e[t+3]=0,e[t+4]=0)},"addGeometryToIndirectMappedBuffer_fn");var cs=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$6"),en=l((n,e,t)=>(cs(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$4"),Ee=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$6"),li=l((n,e,t,i)=>(cs(n,e,"write to private field"),e.set(n,t),t),"__privateSet$4"),Le=l((n,e,t)=>(cs(n,e,"access private method"),t),"__privateMethod$4"),vt,bt,ps,tn,di,fs,ms,sn,gs,rn,ys,nn,ci,xs;let Do=0;class Oo{static{l(this,"RenderBundle")}constructor(e,{label:t,renderPass:i=null,renderOrder:s=0,transparent:r=null,visible:o=!0,size:a=0,useBuffer:h=!1,useIndirectDraw:u=!1}={}){Ee(this,ps),Ee(this,di),Ee(this,ms),Ee(this,gs),Ee(this,ys),Ee(this,ci),Ee(this,vt,void 0),Ee(this,bt,void 0),this.type="RenderBundle",e=I(e,this.type),this.renderer=e,this.uuid=W(),Object.defineProperty(this,"index",{value:Do++}),this.renderOrder=s,this.renderer.renderBundles.set(this.uuid,this),this.transparent=r,this.visible=o,t=t??this.type+this.index,this.options={label:t,renderPass:i,useBuffer:h,size:a,useIndirectDraw:u},this.meshes=new Map,this.encoder=null,this.bundle=null,li(this,bt,!1),this.binding=null,this.indirectBuffer=null,this.options.useIndirectDraw&&(this.indirectBuffer=new Qr(this.renderer)),this.options.useBuffer&&(li(this,vt,!0),this.options.size!==0?Le(this,ps,tn).call(this):(this.options.useBuffer=!1,this.renderer.production||_(`${this.options.label} (${this.type}): Cannot use a single transformation buffer if the size parameter has not been set upon creation.`)))}get useProjection(){return en(this,vt)}set useProjection(e){li(this,vt,e)}set size(e){e!==this.options.size&&(this.ready&&!this.renderer.production&&_(`${this.options.label} (${this.type}): The content of a render bundle is meant to be static. You should not change its size after it has been created.`),this.ready=!1,Le(this,ms,sn).call(this,e),this.options.size=e)}get ready(){return en(this,bt)}set ready(e){e&&!this.ready?(this.size=this.meshes.size,this.options.useIndirectDraw&&(this.meshes.forEach(t=>{this.indirectBuffer.addGeometry(t.geometry)}),this.indirectBuffer.create()),Le(this,ys,nn).call(this)):!e&&this.ready&&(this.bundle=null),li(this,bt,e)}addMesh(e,t){if(!this.options.renderPass)this.options.renderPass=t;else if(t.uuid!==this.options.renderPass.uuid){_(`${this.options.label} (${this.type}): Cannot add Mesh ${e.options.label} to this render bundle because the output render passes do not match.`),e.renderBundle=null;return}this.ready&&!this.renderer.production&&_(`${this.options.label} (${this.type}): The content of a render bundle is meant to be static. You should not add meshes to it after it has been created (mesh added: ${e.options.label}).`),this.ready=!1,this.meshes.set(e.uuid,e)}removeSceneObject(e){this.ready&&!this.renderer.production&&_(`${this.options.label} (${this.type}): The content of a render bundle is meant to be static. You should not remove meshes from it after it has been created (mesh removed: ${e.options.label}).`),this.ready=!1,this.meshes.delete(e.uuid),e.setRenderBundle(null,!1),this.options.useIndirectDraw&&(e.geometry.indirectDraw=null)}removeMesh(e,t=!0){this.removeSceneObject(e),t&&e.type!=="ShaderPass"&&e.type!=="PingPongPlane"&&this.renderer.scene.addMesh(e),this.meshes.size===0&&this.renderer.scene.removeRenderBundle(this)}updateBinding(){this.binding&&this.binding.shouldUpdate&&this.binding.buffer.GPUBuffer&&(this.renderer.queueWriteBuffer(this.binding.buffer.GPUBuffer,0,this.binding.arrayBuffer),this.binding.shouldUpdate=!1)}render(e){if(this.ready&&this.bundle&&this.visible&&(this.meshes.forEach(t=>{t.onBeforeRenderPass()}),this.updateBinding(),this.renderer.pipelineManager.resetCurrentPipeline(),this.renderer.production||e.pushDebugGroup(`${this.options.label}: execute bundle`),e.executeBundles([this.bundle]),this.renderer.production||e.popDebugGroup(),this.renderer.pipelineManager.resetCurrentPipeline(),this.meshes.forEach(t=>{t.onAfterRenderPass()})),!this.ready){let t=!0;for(const[i,s]of this.meshes)s.render(e),s.ready||(t=!1),"sourcesReady"in s&&!s.sourcesReady&&(t=!1);this.ready=t}}loseContext(){this.ready=!1}empty(e=!0){this.ready=!1,this.meshes.forEach(t=>{this.removeMesh(t,e)}),this.size=0}remove(){this.empty(!0),Le(this,ci,xs).call(this)}destroy(){this.ready=!1,this.meshes.forEach(e=>{e.remove()}),this.size=0,Le(this,ci,xs).call(this)}}vt=new WeakMap,bt=new WeakMap,ps=new WeakSet,tn=l(function(){this.binding=new me({label:this.options.label+" matrices",name:"matrices",struct:{model:{type:"array<mat4x4f>",value:new Float32Array(16*this.options.size)},modelView:{type:"array<mat4x4f>",value:new Float32Array(16*this.options.size)},normal:{type:"array<mat3x3f>",value:new Float32Array(12*this.options.size)}}}),Le(this,di,fs).call(this,this.options.size)},"setBinding_fn"),di=new WeakSet,fs=l(function(n){const e=this.renderer.device.limits.minUniformBufferOffsetAlignment;this.binding.arrayBufferSize<n*e&&(this.binding.arrayBufferSize=n*e,this.binding.arrayBuffer=new ArrayBuffer(this.binding.arrayBufferSize),this.binding.buffer.size=this.binding.arrayBuffer.byteLength)},"patchBindingOffset_fn"),ms=new WeakSet,sn=l(function(n){if(n>this.options.size&&this.binding&&(Le(this,di,fs).call(this,n),this.binding.buffer.GPUBuffer)){this.binding.buffer.GPUBuffer.destroy(),this.binding.buffer.createBuffer(this.renderer,{label:this.binding.options.label,usage:["copySrc","copyDst",this.binding.bindingType,...this.binding.options.usage]});let e=0;this.meshes.forEach(t=>{t.patchRenderBundleBinding(e),e++}),this.binding.shouldUpdate=!0}},"onSizeChanged_fn"),gs=new WeakSet,rn=l(function(){this.descriptor={...this.options.renderPass.options.colorAttachments&&{colorFormats:this.options.renderPass.options.colorAttachments.map(n=>n.targetFormat)},...this.options.renderPass.options.useDepth&&{depthStencilFormat:this.options.renderPass.options.depthFormat},sampleCount:this.options.renderPass.options.sampleCount}},"setDescriptor_fn"),ys=new WeakSet,nn=l(function(){Le(this,gs,rn).call(this),this.renderer.pipelineManager.resetCurrentPipeline(),this.encoder=this.renderer.device.createRenderBundleEncoder({...this.descriptor,label:this.options.label+" (encoder)"}),this.renderer.production||this.encoder.pushDebugGroup(`${this.options.label}: create encoder`),this.meshes.forEach(n=>{n.material.render(this.encoder),n.geometry.render(this.encoder)}),this.renderer.production||this.encoder.popDebugGroup(),this.bundle=this.encoder.finish({label:this.options.label+" (bundle)"}),this.renderer.pipelineManager.resetCurrentPipeline()},"encodeRenderCommands_fn"),ci=new WeakSet,xs=l(function(){this.binding&&(this.renderer.removeBuffer(this.binding.buffer),this.binding.buffer.destroy()),this.indirectBuffer&&this.indirectBuffer.destroy(),this.renderer.renderBundles.delete(this.uuid)},"cleanUp_fn");var Fo=`
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
};

@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {
  return textureSample(renderTexture, defaultSampler, fsInput.uv);
}`;class $o extends ts{static{l(this,"ShaderPass")}constructor(e,t={}){e=I(e,t.label?t.label+" ShaderPass":"ShaderPass"),t.depth=!1;const i={color:{srcFactor:"one",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha"}};t.targets?t.targets&&t.targets.length&&!t.targets[0].blend&&(t.targets[0].blend=i):t.targets=[{blend:i}],t.label=t.label??"ShaderPass "+e.shaderPasses?.length,t.sampleCount=t.sampleCount?t.sampleCount:e&&e.postProcessingPass?e&&e.postProcessingPass.options.sampleCount:1,t.shaders||(t.shaders={}),t.shaders.fragment||(t.shaders.fragment={code:Fo,entryPoint:"main"}),t.depth=!1,super(e,t),t.inputTarget&&this.setInputTarget(t.inputTarget),this.outputTarget&&this.setRenderingOptionsForRenderPass(this.outputTarget.renderPass),this.type="ShaderPass",this.createTexture({label:t.label?`${t.label} render texture`:"Shader pass render texture",name:"renderTexture",fromTexture:this.inputTarget?this.inputTarget.renderTexture:null,usage:["copySrc","copyDst","textureBinding"],...this.outputTarget&&this.outputTarget.options.qualityRatio&&{qualityRatio:this.outputTarget.options.qualityRatio}})}cleanupRenderMaterialParameters(e){return delete e.copyOutputToRenderTexture,delete e.inputTarget,super.cleanupRenderMaterialParameters(e),e}get renderTexture(){return this.textures.find(e=>e.options.name==="renderTexture")}setInputTarget(e){if(e&&e.type!=="RenderTarget"){_(`${this.options.label??this.type}: inputTarget is not a RenderTarget: ${e}`);return}this.removeFromScene(),this.inputTarget=e,this.addToScene(),this.renderTexture&&(e?this.renderTexture.copy(this.inputTarget.renderTexture):(this.renderTexture.options.fromTexture=null,this.renderTexture.createTexture()))}addToScene(e=!1){e&&this.renderer.shaderPasses.push(this),this.setRenderingOptionsForRenderPass(this.outputTarget?this.outputTarget.renderPass:this.renderer.postProcessingPass),this.autoRender&&this.renderer.scene.addShaderPass(this)}removeFromScene(e=!1){this.outputTarget&&this.outputTarget.destroy(),this.autoRender&&this.renderer.scene.removeShaderPass(this),e&&(this.renderer.shaderPasses=this.renderer.shaderPasses.filter(t=>t.uuid!==this.uuid))}}var Uo=`
fn lessThan3(a: vec3f, b: vec3f) -> vec3f {
  return vec3f(vec3<bool>(a.x < b.x, a.y < b.y, a.z < b.z));
}

fn pow2( x: f32 ) -> f32 {
    return x * x;
}

fn pow3( x: f32 ) -> f32 {
    return x * x * x;
}

fn pow4( x: f32 ) -> f32 {
    return pow2(x) * pow2(x);
}
`,ko=`
${Uo}

struct ReflectedLight {
  directDiffuse: vec3f,
  directSpecular: vec3f,
  indirectDiffuse: vec3f,
  indirectSpecular: vec3f,
}

struct DirectLight {
  color: vec3f,
  direction: vec3f,
  visible: bool,
}

fn rangeAttenuation(range: f32, distance: f32) -> f32 {
  var distanceFalloff: f32 = 1.0 / max( pow( distance, 2.0 ), 0.01 );
  if ( range > 0.0 ) {
      distanceFalloff *= pow2( clamp( 1.0 - pow4( distance / range ), 0.0, 1.0 ) );
  }
  
  return distanceFalloff;
}

fn BRDF_Lambert(diffuseColor: vec3f) -> vec3f {
  return RECIPROCAL_PI * diffuseColor;
}

fn F_Schlick(VdotH: f32, f0: vec3f) -> vec3f {
  let fresnel: f32 = pow( 1.0 - VdotH, 5.0 );
  
  // TODO if specular intensity is defined
  // it could be: mix( specularIntensity, 1.0, metallic );
  let f90: f32 = 1.0;
  return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}

fn getDirectionalLightInfo(directionalLight: DirectionalLightsElement, worldPosition: vec3f, ptr_light: ptr<function, DirectLight>) {
  (*ptr_light).color = directionalLight.color;
  (*ptr_light).direction = worldPosition - directionalLight.direction;
  (*ptr_light).visible = true;
}

fn getPointLightInfo(pointLight: PointLightsElement, worldPosition: vec3f, ptr_light: ptr<function, DirectLight>) {
  let lightDirection: vec3f = pointLight.position - worldPosition;
  (*ptr_light).direction = normalize(lightDirection);
  let lightDistance: f32 = length(lightDirection);
  (*ptr_light).color = pointLight.color;
  (*ptr_light).color *= rangeAttenuation(pointLight.range, lightDistance);
  (*ptr_light).visible = length((*ptr_light).color) > 0.0001;
}
`;const wt=`
fn linearToOutput3(value: vec3f) -> vec3f {
  return vec3( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThan3( value.rgb, vec3( 0.0031308 ) ) ) ) );
}

fn linearToOutput4(value: vec4f) -> vec4f {
  return vec4( linearToOutput3(value.rgb), value.a );
}

// linear <-> sRGB conversions
fn linearTosRGB(linear: vec3f) -> vec3f {
  if (all(linear <= vec3(0.0031308))) {
    return linear * 12.92;
  }
  return (pow(abs(linear), vec3(1.0/2.4)) * 1.055) - vec3(0.055);
}

fn sRGBToLinear(srgb: vec3f) -> vec3f {
  if (all(srgb <= vec3(0.04045))) {
    return srgb / vec3(12.92);
  }
  return pow((srgb + vec3(0.055)) / vec3(1.055), vec3(2.4));
}

fn toneMapKhronosPbrNeutral( color: vec3f ) -> vec3f {
  var toneMapColor = color; 
  const startCompression: f32 = 0.8 - 0.04;
  const desaturation: f32 = 0.15;
  var x: f32 = min(toneMapColor.r, min(toneMapColor.g, toneMapColor.b));
  var offset: f32 = select(0.04, x - 6.25 * x * x, x < 0.08);
  toneMapColor = toneMapColor - offset;
  var peak: f32 = max(toneMapColor.r, max(toneMapColor.g, toneMapColor.b));
  if (peak < startCompression) {
    return toneMapColor;
  }
  const d: f32 = 1. - startCompression;
  let newPeak: f32 = 1. - d * d / (peak + d - startCompression);
  toneMapColor *= newPeak / peak;
  let g: f32 = 1. - 1. / (desaturation * (peak - newPeak) + 1.);
  return mix(toneMapColor, newPeak * vec3(1, 1, 1), g);
}
`;var Io=`
fn getIndirectDiffuse(irradiance: vec3f, diffuseColor: vec3f, ptr_reflectedLight: ptr<function, ReflectedLight>) {
  (*ptr_reflectedLight).indirectDiffuse += irradiance * BRDF_Lambert( diffuseColor );
}

// Indirect Diffuse RenderEquations
fn RE_IndirectDiffuse(irradiance: vec3f, diffuseColor: vec3f, ptr_reflectedLight: ptr<function, ReflectedLight>) {
  var totalAmbientIrradiance: vec3f = irradiance;
  
  for(var i: i32 = 0; i < ambientLights.count; i++) {
    totalAmbientIrradiance += ambientLights.color[i];
  }
  
  getIndirectDiffuse(totalAmbientIrradiance, diffuseColor, ptr_reflectedLight);
}
`,Vo=`
const PI = ${Math.PI};
const RECIPROCAL_PI = ${1/Math.PI};
const RECIPROCAL_PI2 = ${.5/Math.PI};
const EPSILON = 1e-6;`;const pi=`
${Vo}
${ko}
${Io}
`,on=`
fn getLambertDirect(
  normal: vec3f,
  diffuseColor: vec3f,
  directLight: DirectLight,
  ptr_reflectedLight: ptr<function, ReflectedLight>
) {
  let L = normalize(directLight.direction);
  let NdotL = max(dot(normal, L), 0.0);
  
  let irradiance: vec3f = NdotL * directLight.color;
  (*ptr_reflectedLight).directDiffuse += irradiance * BRDF_Lambert( diffuseColor );
}
`,an=l(({addUtils:n=!0,receiveShadows:e=!1,toneMapping:t="linear",useOcclusion:i=!1}={})=>`
${n?pi:""}
${on}
${t?wt:""}

fn getLambert(
  normal: vec3f,
  worldPosition: vec3f,
  diffuseColor: vec3f,
  ${i?"occlusion: f32,":""}
) -> vec3f {
  var directLight: DirectLight;
  var reflectedLight: ReflectedLight;
  
  ${e?dt:""}

  // point lights
  for(var i = 0; i < pointLights.count; i++) {
    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);
    ${e?pt:""}
    getLambertDirect(normal, diffuseColor, directLight, &reflectedLight);
  }
  
  // directional lights
  for(var i = 0; i < directionalLights.count; i++) {
    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);
    ${e?ct:""}
    getLambertDirect(normal, diffuseColor, directLight, &reflectedLight);
  }
  
  // ambient lights
  var irradiance: vec3f = vec3(0.0);
  RE_IndirectDiffuse(irradiance, diffuseColor, &reflectedLight);
  
  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;
  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;
  
  ${i?"totalIndirect *= occlusion;":""}
  
  var outgoingLight: vec3f = totalDirect + totalIndirect;
  
  ${t==="linear"?"outgoingLight = linearToOutput3(outgoingLight);":t==="khronos"?"outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));":""}
  
  return outgoingLight;
}
`,"getLambert"),hn=`
fn D_BlinnPhong( shininess: f32, NdotH: f32 ) -> f32 {
  return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( NdotH, shininess );
}

fn BRDF_BlinnPhong(
  normal: vec3f,
  viewDirection: vec3f,
  specularColor: vec3f,
  shininess: f32,
  directLight: DirectLight
) -> vec3f {
  let L = normalize(directLight.direction);
  let NdotL = max(dot(normal, L), 0.0);
  let H: vec3f = normalize(viewDirection + L);
  
  let NdotH: f32 = clamp(dot(normal, H), 0.0, 1.0);
  let VdotH: f32 = clamp(dot(viewDirection, H), 0.0, 1.0);
  let NdotV: f32 = clamp( dot(normal, viewDirection), 0.0, 1.0 );
  
  let F: vec3f = F_Schlick(VdotH, specularColor);
  
  let G: f32 = 0.25; // blinn phong implicit
  
  let D = D_BlinnPhong(shininess, NdotH);
  
  let specular: vec3f = F * G * D;
        
  return specular;
}

fn getPhongDirect(
  normal: vec3f,
  diffuseColor: vec3f,
  viewDirection: vec3f,
  specularColor: vec3f,
  specularStrength: f32,
  shininess: f32,
  directLight: DirectLight,
  ptr_reflectedLight: ptr<function, ReflectedLight>
) {
  let L = normalize(directLight.direction);
  let NdotL = max(dot(normal, L), 0.0);
  
  let irradiance: vec3f = NdotL * directLight.color;
  (*ptr_reflectedLight).directDiffuse += irradiance * BRDF_Lambert( diffuseColor );
  (*ptr_reflectedLight).directSpecular += irradiance * BRDF_BlinnPhong( normal, viewDirection, specularColor, shininess, directLight ) * specularStrength;
}
`,un=l(({addUtils:n=!0,receiveShadows:e=!1,toneMapping:t="linear",useOcclusion:i=!1}={})=>`
${n?pi:""}
${hn}
${t?wt:""}

fn getPhong(
  normal: vec3f,
  worldPosition: vec3f,
  diffuseColor: vec3f,
  viewDirection: vec3f,
  specularColor: vec3f,
  specularStrength: f32,
  shininess: f32,
  ${i?"occlusion: f32,":""}
) -> vec3f {
  var directLight: DirectLight;
  var reflectedLight: ReflectedLight;
  
  ${e?dt:""}

  // point lights
  for(var i = 0; i < pointLights.count; i++) {  
    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);
    ${e?pt:""}
    getPhongDirect(normal, diffuseColor, viewDirection, specularColor, specularStrength, shininess, directLight, &reflectedLight);
  }
  
  // directional lights
  for(var i = 0; i < directionalLights.count; i++) {
    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);
    ${e?ct:""}
    getPhongDirect(normal, diffuseColor, viewDirection, specularColor, specularStrength, shininess, directLight, &reflectedLight);
  }
  
  // ambient lights
  var irradiance: vec3f = vec3(0.0);
  RE_IndirectDiffuse(irradiance, diffuseColor, &reflectedLight);
  
  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;
  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;
  
  ${i?"totalIndirect *= occlusion;":""}
  
  var outgoingLight: vec3f = totalDirect + totalIndirect;
  
  ${t==="linear"?"outgoingLight = linearToOutput3(outgoingLight);":t==="khronos"?"outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));":""}
  
  return outgoingLight;
}
`,"getPhong");var No=`
fn DFGApprox(
  normal: vec3f,
  viewDirection: vec3f,
  roughness: f32,
) -> vec2f {
  let dotNV: f32 = clamp( dot( normal, viewDirection ), 0.0, 1.0 );

	let c0: vec4f = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	let c1: vec4f = vec4( 1, 0.0425, 1.04, - 0.04 );

	let r: vec4f = roughness * c0 + c1;
	let a004: f32 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	
	let fab: vec2f = vec2( - 1.04, 1.04 ) * a004 + r.zw;

	return fab;
}

struct TotalScattering {
  single: vec3f,
  multi: vec3f,
}

fn computeMultiscattering(
  normal: vec3f,
  viewDirection: vec3f,
  specularColor: vec3f,
  f90: f32,
  roughness: f32,
  ptr_totalScattering: ptr<function, TotalScattering>
) {
  let fab: vec2f = DFGApprox( normal, viewDirection, roughness );

	let Fr: vec3f = specularColor;

	let FssEss: vec3f = Fr * fab.x + f90 * fab.y;

	let Ess: f32 = fab.x + fab.y;
	let Ems: f32 = 1.0 - Ess;

	let Favg: vec3f = Fr + ( 1.0 - Fr ) * 0.047619; // 1/21
	let Fms: vec3f = FssEss * Favg / ( 1.0 - Ems * Favg );

	(*ptr_totalScattering).single += FssEss;
	(*ptr_totalScattering).multi += Fms * Ems;
}

// Indirect Specular RenderEquations
fn RE_IndirectSpecular(
  radiance: vec3f,
  irradiance: vec3f,
  normal: vec3f,
  diffuseColor: vec3f,
  viewDirection: vec3f,
  metallic: f32,
  roughness: f32,
  ptr_reflectedLight: ptr<function, ReflectedLight>
) {
  var totalScattering: TotalScattering;
  let cosineWeightedIrradiance: vec3f = irradiance * RECIPROCAL_PI;
  
  let specularColor: vec3f = mix( vec3( 0.04 ), diffuseColor, metallic );
  
  let f90: f32 = 1.0;
  
  computeMultiscattering( normal, viewDirection, specularColor, f90, roughness, &totalScattering );
  
  let totalScatter: vec3f = totalScattering.single + totalScattering.multi;
  let diffuse: vec3f = diffuseColor * ( 1.0 - max( max( totalScatter.r, totalScatter.g ), totalScatter.b ) );

  (*ptr_reflectedLight).indirectSpecular += radiance * totalScattering.single;
  (*ptr_reflectedLight).indirectSpecular += totalScattering.multi * cosineWeightedIrradiance;

  (*ptr_reflectedLight).indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
`;const vs=`
${pi}
${No}
`,bs=`
fn DistributionGGX(NdotH: f32, roughness: f32) -> f32 {
  let a: f32 = pow2( roughness );
  let a2: f32 = pow2( a );

  let denom: f32 = (pow2( NdotH ) * (a2 - 1.0) + 1.0);

  return RECIPROCAL_PI * a2 / ( pow2( denom ) );
}

fn GeometrySmith(NdotL: f32, NdotV: f32, roughness: f32) -> f32 {
  let a: f32 = pow2( roughness );
  let a2: f32 = pow2( a );
  
  let gv: f32 = NdotL * sqrt( a2 + ( 1.0 - a2 ) * pow2( NdotV ) );
  let gl: f32 = NdotV * sqrt( a2 + ( 1.0 - a2 ) * pow2( NdotL ) );

  return 0.5 / max( gv + gl, EPSILON );
}

fn BRDF_GGX(
  NdotV: f32,
  NdotL: f32,
  NdotH: f32,
  VdotH: f32,
  roughness: f32,
  f0: vec3f
) -> vec3f {
  // cook-torrance brdf
  let G: f32 = GeometrySmith(NdotL, NdotV, roughness);
  let D: f32 = DistributionGGX(NdotH, roughness);
  let F: vec3f = F_Schlick(VdotH, f0);
  
  return G * D * F;
}

fn getPBRDirect(
  normal: vec3f,
  diffuseColor: vec3f,
  viewDirection: vec3f,
  f0: vec3f,
  metallic: f32,
  roughness: f32,
  directLight: DirectLight,
  ptr_reflectedLight: ptr<function, ReflectedLight>
) {
  let N: vec3f = normalize(normal);
  let L: vec3f = normalize(directLight.direction);
  let V: vec3f = normalize(viewDirection);
  let H: vec3f = normalize(V + L);
  let NdotV: f32 = clamp(dot(N, V), 0.0, 1.0);
  let NdotL: f32 = clamp(dot(N, L), 0.0, 1.0);
  let NdotH: f32 = clamp(dot(N, H), 0.0, 1.0);
  let VdotH: f32 = clamp(dot(V, H), 0.0, 1.0);

  let irradiance: vec3f = NdotL * directLight.color;
  let ggx: vec3f = BRDF_GGX(NdotV, NdotL, NdotH, VdotH, roughness, f0);
  
  (*ptr_reflectedLight).directDiffuse += irradiance * BRDF_Lambert( diffuseColor );
  (*ptr_reflectedLight).directSpecular += ggx * irradiance;
}
`,ln=l(({addUtils:n=!0,receiveShadows:e=!1,toneMapping:t="linear",useOcclusion:i=!1}={})=>`
${n?vs:""}
${bs}
${t?wt:""}

fn getPBR(
  normal: vec3f,
  worldPosition: vec3f,
  diffuseColor: vec3f,
  viewDirection: vec3f,
  f0: vec3f,
  metallic: f32,
  roughness: f32,
  ${i?"occlusion: f32,":""}
) -> vec3f {
  var directLight: DirectLight;
  var reflectedLight: ReflectedLight;
  
  ${e?dt:""}

  // point lights
  for(var i = 0; i < pointLights.count; i++) {
    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);
    ${e?pt:""}
    getPBRDirect(normal, diffuseColor, viewDirection, f0, metallic, roughness, directLight, &reflectedLight);
  }
  
  // directional lights
  for(var i = 0; i < directionalLights.count; i++) {
    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);
    ${e?ct:""}
    getPBRDirect(normal, diffuseColor, viewDirection, f0, metallic, roughness, directLight, &reflectedLight);
  }
  
  // ambient lights
  var irradiance: vec3f = vec3(0.0);
  RE_IndirectDiffuse(irradiance, diffuseColor, &reflectedLight);
  
  // ambient lights specular
  // var radiance: vec3f = vec3(0.0);
  // RE_IndirectSpecular(radiance, irradiance, normal, diffuseColor, viewDirection, metallic, roughness, &reflectedLight);
  
  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;
  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;
  
  ${i?"totalIndirect *= occlusion;":""}
  
  var outgoingLight: vec3f = totalDirect + totalIndirect;
  
  ${t==="linear"?"outgoingLight = linearToOutput3(outgoingLight);":t==="khronos"?"outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));":""}
  
  return outgoingLight;
}
`,"getPBR"),dn=`
// struct IBLIndirect {
//   diffuse: vec3f,
//   specular: vec3f
// }

fn getIBLIndirect(
  normal: vec3f,
  viewDirection: vec3f,
  roughness: f32,
  metallic: f32,
  diffuseColor: vec3f,
  f0: vec3f,
  clampSampler: sampler,
  lutTexture: texture_2d<f32>,
  envSpecularTexture: texture_cube<f32>,
  envDiffuseTexture: texture_cube<f32>,
  ptr_reflectedLight: ptr<function, ReflectedLight>,
  // ptr_iblIndirect: ptr<function, IBLIndirect>
) {
  let N: vec3f = normalize(normal);
  let V: vec3f = normalize(viewDirection);
  let NdotV: f32 = clamp(dot(N, V), 0.0, 1.0);
  
  let reflection: vec3f = normalize(reflect(-V, N));
  
  let iblDiffuseColor: vec3f = mix(diffuseColor, vec3(0.0), vec3(metallic));

  let brdfSamplePoint: vec2f = clamp(vec2(NdotV, roughness), vec2(0.0), vec2(1.0));
  
  let brdf: vec3f = textureSample(
    lutTexture,
    clampSampler,
    brdfSamplePoint
  ).rgb;

  let Fr: vec3f = max(vec3(1.0 - roughness), f0) - f0;
  let k_S: vec3f = f0 + Fr * pow(1.0 - NdotV, 5.0);
  var FssEss: vec3f = k_S * brdf.x + brdf.y;
  
  // IBL specular (radiance)
  let lod: f32 = roughness * f32(textureNumLevels(envSpecularTexture) - 1);
  
  let specularLight: vec4f = textureSampleLevel(
    envSpecularTexture,
    clampSampler,
    reflection * ibl.envRotation,
    lod
  );
  
  // IBL diffuse (irradiance)
  let diffuseLight: vec4f = textureSample(
    envDiffuseTexture,
    clampSampler,
    normal * ibl.envRotation
  );
  
  // product of specularFactor and specularTexture.a
  let specularWeight: f32 = 1.0;
        
  FssEss = specularWeight * k_S * brdf.x + brdf.y;
  
  let Ems: f32 = (1.0 - (brdf.x + brdf.y));
  let F_avg: vec3f = specularWeight * (f0 + (1.0 - f0) / 21.0);
  let FmsEms: vec3f = Ems * FssEss * F_avg / (1.0 - F_avg * Ems);
  let k_D: vec3f = iblDiffuseColor * (1.0 - FssEss + FmsEms);
  
  (*ptr_reflectedLight).indirectSpecular += specularLight.rgb * FssEss * ibl.specularStrength;
  (*ptr_reflectedLight).indirectDiffuse += (FmsEms + k_D) * diffuseLight.rgb * ibl.diffuseStrength;
  
  // (*ptr_iblIndirect).diffuse = PI * diffuseLight.rgb * ibl.diffuseStrength;
  // (*ptr_iblIndirect).specular = specularLight.rgb * ibl.specularStrength;
}
`,cn=l(({addUtils:n=!0,receiveShadows:e=!1,toneMapping:t="linear",useOcclusion:i=!1}={})=>`
${n?vs:""}
${bs}
${dn}
${t?wt:""}

fn getIBL(
  normal: vec3f,
  worldPosition: vec3f,
  diffuseColor: vec3f,
  viewDirection: vec3f,
  f0: vec3f,
  metallic: f32,
  roughness: f32,
  clampSampler: sampler,
  lutTexture: texture_2d<f32>,
  envSpecularTexture: texture_cube<f32>,
  envDiffuseTexture: texture_cube<f32>,
  ${i?"occlusion: f32,":""}
) -> vec3f {
  var directLight: DirectLight;
  var reflectedLight: ReflectedLight;
  
  ${e?dt:""}

  // point lights
  for(var i = 0; i < pointLights.count; i++) {
    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);
    ${e?pt:""}
    getPBRDirect(normal, diffuseColor, viewDirection, f0, metallic, roughness, directLight, &reflectedLight);
  }
  
  // directional lights
  for(var i = 0; i < directionalLights.count; i++) {
    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);
    ${e?ct:""}
    getPBRDirect(normal, diffuseColor, viewDirection, f0, metallic, roughness, directLight, &reflectedLight);
  }
  
  var irradiance: vec3f = vec3(0.0);
  var radiance: vec3f = vec3(0.0);
  
  // var iblIndirect: IBLIndirect;
  
  // IBL
  getIBLIndirect(
    normal,
    viewDirection,
    roughness,
    metallic,
    diffuseColor,
    f0,
    clampSampler,
    lutTexture,
    envSpecularTexture,
    envDiffuseTexture,
    &reflectedLight,
    // &iblIndirect
  );
  
  // irradiance += iblIndirect.diffuse;
  // radiance += iblIndirect.specular;
  
  // ambient lights
  RE_IndirectDiffuse(irradiance, diffuseColor, &reflectedLight);
  
  // ambient lights specular
  // RE_IndirectSpecular(radiance, irradiance, normal, diffuseColor, viewDirection, metallic, roughness, &reflectedLight);  
  
  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;
  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;
  
  ${i?"totalIndirect *= occlusion;":""}
  
  var outgoingLight: vec3f = totalDirect + totalIndirect;
  
  ${t==="linear"?"outgoingLight = linearToOutput3(outgoingLight);":t==="khronos"?"outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));":""}
  
  return outgoingLight;
}
`,"getIBL");var pn=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$5"),Se=l((n,e,t)=>(pn(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$3"),ws=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$5"),Wo=l((n,e,t,i)=>(pn(n,e,"write to private field"),e.set(n,t),t),"__privateSet$3"),Bt,Ne,fi;class fn extends is{static{l(this,"DOMObject3D")}constructor(e,t,i={}){super(e),ws(this,Bt,new m),ws(this,Ne,new m(1)),ws(this,fi,1),this.boundingBox=new Be(new m(-1),new m(1)),this._onAfterDOMElementResizeCallback=()=>{},e=Di(e,"DOM3DObject"),this.renderer=e,this.size={shouldUpdate:!0,normalizedWorld:{size:new G(1),position:new G},cameraWorld:{size:new G(1)},scaledWorld:{size:new m(1),position:new m}},this.watchScroll=i.watchScroll,this.camera=this.renderer.camera,this.boundingBox.min.onChange(()=>this.shouldUpdateComputedSizes()),this.boundingBox.max.onChange(()=>this.shouldUpdateComputedSizes()),this.setDOMElement(t),this.renderer.domObjects.push(this)}setDOMElement(e){this.domElement=new ns({element:e,onSizeChanged:t=>this.resize(t),onPositionChanged:()=>this.onPositionChanged()}),this.updateSizeAndPosition()}onPositionChanged(){this.watchScroll&&this.shouldUpdateComputedSizes()}resetDOMElement(e){this.domElement&&this.domElement.destroy(),this.setDOMElement(e)}resize(e=null){!e&&(!this.domElement||this.domElement?.isResizing)||(this.updateSizeAndPosition(),this._onAfterDOMElementResizeCallback&&this._onAfterDOMElementResizeCallback())}get boundingRect(){return this.domElement?.boundingRect??{width:1,height:1,top:0,right:0,bottom:0,left:0,x:0,y:0}}setTransforms(){super.setTransforms(),this.transforms.origin.model.set(.5,.5,0),this.transforms.origin.world=new m,this.transforms.position.document=new m,this.documentPosition.onChange(()=>this.applyPosition()),this.transformOrigin.onChange(()=>this.setWorldTransformOrigin())}get documentPosition(){return this.transforms.position.document}set documentPosition(e){this.transforms.position.document=e,this.applyPosition()}get DOMObjectWorldScale(){return Se(this,Ne).clone()}get worldScale(){return this.DOMObjectWorldScale.multiply(this.scale)}get worldPosition(){return Se(this,Bt).clone()}get transformOrigin(){return this.transforms.origin.model}set transformOrigin(e){this.transforms.origin.model=e,this.setWorldTransformOrigin()}get worldTransformOrigin(){return this.transforms.origin.world}set worldTransformOrigin(e){this.transforms.origin.world=e}shouldUpdateMatrices(){super.shouldUpdateMatrices(),(this.matricesNeedUpdate||this.size.shouldUpdate)&&(this.updateSizeAndPosition(),this.matricesNeedUpdate=!0),this.size.shouldUpdate=!1}shouldUpdateComputedSizes(){this.size.shouldUpdate=!0}updateSizeAndPosition(){this.setWorldSizes(),this.applyDocumentPosition(),this.shouldUpdateModelMatrix()}applyDocumentPosition(){let e=new m(0,0,0);this.documentPosition.equals(e)||(e=this.documentToWorldSpace(this.documentPosition)),Se(this,Bt).set(this.position.x+this.size.scaledWorld.position.x+e.x,this.position.y+this.size.scaledWorld.position.y+e.y,this.position.z+this.size.scaledWorld.position.z+this.documentPosition.z/this.camera.CSSPerspective)}applyTransformOrigin(){this.size&&(this.setWorldTransformOrigin(),super.applyTransformOrigin())}updateModelMatrix(){this.modelMatrix.composeFromOrigin(Se(this,Bt),this.quaternion,this.scale,this.worldTransformOrigin),this.modelMatrix.scale(this.DOMObjectWorldScale),this.shouldUpdateWorldMatrix()}documentToWorldSpace(e=new m){return new m(e.x*this.renderer.pixelRatio/this.renderer.boundingRect.width*this.camera.visibleSize.width,-(e.y*this.renderer.pixelRatio/this.renderer.boundingRect.height)*this.camera.visibleSize.height,e.z)}computeWorldSizes(){const e=this.renderer.boundingRect,t={x:this.boundingRect.width/2+this.boundingRect.left,y:this.boundingRect.height/2+this.boundingRect.top},i={x:e.width/2+e.left,y:e.height/2+e.top},{size:s,center:r}=this.boundingBox;s.x!==0&&s.y!==0&&s.z!==0&&r.divide(s),this.size.normalizedWorld.size.set(this.boundingRect.width/e.width,this.boundingRect.height/e.height),this.size.normalizedWorld.position.set((t.x-i.x)/e.width,(i.y-t.y)/e.height),this.size.cameraWorld.size.set(this.size.normalizedWorld.size.x*this.camera.visibleSize.width,this.size.normalizedWorld.size.y*this.camera.visibleSize.height),this.size.scaledWorld.size.set(this.size.cameraWorld.size.x/s.x,this.size.cameraWorld.size.y/s.y,1),this.size.scaledWorld.size.z=this.size.scaledWorld.size.y*(s.x/s.y/(this.boundingRect.width/this.boundingRect.height)),this.size.scaledWorld.position.set(this.size.normalizedWorld.position.x*this.camera.visibleSize.width,this.size.normalizedWorld.position.y*this.camera.visibleSize.height,0)}setWorldSizes(){this.computeWorldSizes(),this.setWorldScale(),this.setWorldTransformOrigin()}setWorldScale(){Se(this,Ne).set(this.size.scaledWorld.size.x,this.size.scaledWorld.size.y,this.size.scaledWorld.size.z*Se(this,fi)),this.shouldUpdateMatrixStack()}set DOMObjectDepthScaleRatio(e){Wo(this,fi,e),this.setWorldScale()}setWorldTransformOrigin(){this.transforms.origin.world=new m((this.transformOrigin.x*2-1)*Se(this,Ne).x,-(this.transformOrigin.y*2-1)*Se(this,Ne).y,this.transformOrigin.z*Se(this,Ne).z),this.shouldUpdateMatrixStack()}updateScrollPosition(e={x:0,y:0}){(e.x||e.y)&&this.domElement.updateScrollPosition(e)}onAfterDOMElementResize(e){return e&&(this._onAfterDOMElementResizeCallback=e),this}destroy(){super.destroy(),this.domElement?.destroy()}}Bt=new WeakMap,Ne=new WeakMap,fi=new WeakMap;const mn={autoloadSources:!0,watchScroll:!0};class gn extends Wr(fn){static{l(this,"DOMMesh")}constructor(e,t,i){super(e,t,{...mn,...i}),this._onLoadingCallback=r=>{},i={...mn,...i},Di(e,i.label?i.label+" DOMMesh":"DOMMesh"),this.type="DOMMesh";const{autoloadSources:s}=i;this.autoloadSources=s,this.sourcesReady=!1,this.setInitSources()}get ready(){return this._ready}set ready(e){e&&!this._ready&&this.sourcesReady&&this._onReadyCallback&&this._onReadyCallback(),this._ready=e}get sourcesReady(){return this._sourcesReady}set sourcesReady(e){e&&!this._sourcesReady&&this.ready&&this._onReadyCallback&&this._onReadyCallback(),this._sourcesReady=e}addToScene(e=!1){super.addToScene(e),e&&this.renderer.domMeshes.push(this)}removeFromScene(e=!1){super.removeFromScene(e),e&&(this.renderer.domMeshes=this.renderer.domMeshes.filter(t=>t.uuid!==this.uuid))}setInitSources(){let e=0,t=0;if(this.autoloadSources){const i=this.domElement.element.querySelectorAll("img"),s=this.domElement.element.querySelectorAll("video"),r=this.domElement.element.querySelectorAll("canvas");e=i.length+s.length+r.length;const o=l(a=>{t++,this._onLoadingCallback&&this._onLoadingCallback(a),t===e&&(this.sourcesReady=!0)},"onSourceUploaded");e||(this.sourcesReady=!0),i.length&&i.forEach(a=>{const h=this.createDOMTexture({name:a.getAttribute("data-texture-name")??"texture"+this.domTextures.length});h.onSourceUploaded(()=>o(h)).loadImage(a.src)}),s.length&&s.forEach(a=>{const h=this.createDOMTexture({name:a.getAttribute("data-texture-name")??"texture"+this.domTextures.length});h.onSourceUploaded(()=>o(h)).loadVideo(a)}),r.length&&r.forEach(a=>{const h=this.createDOMTexture({name:a.getAttribute("data-texture-name")??"texture"+this.domTextures.length});h.onSourceUploaded(()=>o(h)).loadCanvas(a)})}else this.sourcesReady=!0}resetDOMElement(e){e?super.resetDOMElement(e):!e&&!this.renderer.production&&_(`${this.options.label}: You are trying to reset a ${this.type} with a HTML element that does not exist. The old HTML element will be kept instead.`)}get pixelRatioBoundingRect(){const e=window.devicePixelRatio??1,t=this.renderer.pixelRatio/e;return Object.keys(this.domElement.boundingRect).reduce((i,s)=>({...i,[s]:this.domElement.boundingRect[s]*t}),{x:0,y:0,width:0,height:0,top:0,right:0,bottom:0,left:0})}computeGeometry(){super.computeGeometry(),this.boundingBox.copy(this.geometry.boundingBox)}onLoading(e){return e&&(this._onLoadingCallback=e),this}}const jo={label:"Plane",instancesCount:1,vertexBuffers:[]};class yn extends gn{static{l(this,"Plane")}constructor(e,t,i={}){e=Di(e,i.label?i.label+" Plane":"Plane");const s={...jo,...i};let{geometry:r,widthSegments:o,heightSegments:a,...h}=s;const{instancesCount:u,vertexBuffers:d,...c}=h;if(!r||r.type!=="PlaneGeometry"){o=o??1,a=a??1;const f=o*a+o;d.length||(r=ai.getPlaneGeometryByID(f)),r?r.instancesCount=u:(r=new Ni({widthSegments:o,heightSegments:a,instancesCount:u,vertexBuffers:d}),ai.addPlaneGeometry(r))}super(e,t,{geometry:r,...c}),this.type="Plane"}}class mi extends ls{static{l(this,"GPUCurtainsRenderer")}constructor({deviceManager:e,label:t,container:i,pixelRatio:s=1,autoResize:r=!0,context:o={},renderPass:a,camera:h,lights:u}){super({deviceManager:e,label:t,container:i,pixelRatio:s,autoResize:r,context:o,renderPass:a,camera:h,lights:u}),this.type="GPUCurtainsRenderer"}setRendererObjects(){super.setRendererObjects(),this.domMeshes=[],this.domObjects=[]}onCameraMatricesChanged(){super.onCameraMatricesChanged(),this.domObjects.forEach(e=>{e.updateSizeAndPosition()})}resizeMeshes(){this.meshes.forEach(e=>{"domElement"in e||e.resize(this.boundingRect)}),this.domObjects.forEach(e=>{e.domElement.isResizing||e.domElement.setSize()})}}class qo{static{l(this,"ScrollManager")}constructor({scroll:e={x:0,y:0},delta:t={x:0,y:0},shouldWatch:i=!0,onScroll:s=l((r={x:0,y:0})=>{},"onScroll")}={}){this.scroll=e,this.delta=t,this.shouldWatch=i,this.onScroll=s,this.shouldWatch&&window.addEventListener("scroll",this.setScroll.bind(this),{passive:!0})}setScroll(){this.updateScrollValues({x:window.pageXOffset,y:window.pageYOffset})}updateScrollValues({x:e,y:t}){const i=this.scroll;this.scroll={x:e,y:t},this.delta={x:i.x-this.scroll.x,y:i.y-this.scroll.y},this.onScroll&&this.onScroll(this.delta)}destroy(){this.shouldWatch&&window.removeEventListener("scroll",this.setScroll.bind(this),{passive:!0})}}class Yo{static{l(this,"GPUCurtains")}constructor({container:e,label:t,pixelRatio:i=window.devicePixelRatio??1,context:s={},production:r=!1,adapterOptions:o={},renderPass:a,camera:h,lights:u,autoRender:d=!0,autoResize:c=!0,watchScroll:f=!0}={}){this._onRenderCallback=()=>{},this._onScrollCallback=()=>{},this._onErrorCallback=()=>{},this._onContextLostCallback=()=>{},this._onContextDestroyedCallback=()=>{},this.type="CurtainsGPU",this.options={container:e,label:t,pixelRatio:i,camera:h,lights:u,production:r,adapterOptions:o,context:s,renderPass:a,autoRender:d,autoResize:c,watchScroll:f},this.setDeviceManager(),e&&this.setContainer(e),this.initEvents(),this.options.autoRender&&this.animate()}setContainer(e){if(e)if(typeof e=="string")if(e=document.querySelector(e),e)this.options.container=e;else{const t=document.createElement("div");t.setAttribute("id","curtains-gpu-canvas"),document.body.appendChild(t),this.options.container=t}else e instanceof Element&&(this.options.container=e);else{const t=document.createElement("div");t.setAttribute("id","curtains-gpu-canvas"),document.body.appendChild(t),this.options.container=t}this.container=this.options.container,this.setMainRenderer()}setMainRenderer(){this.createCurtainsRenderer({deviceManager:this.deviceManager,label:this.options.label||"GPUCurtains main GPUCurtainsRenderer",container:this.options.container,pixelRatio:this.options.pixelRatio,autoResize:this.options.autoResize,context:this.options.context,renderPass:this.options.renderPass,camera:this.options.camera,lights:this.options.lights})}patchRendererOptions(e){return e.pixelRatio===void 0&&(e.pixelRatio=this.options.pixelRatio),e.autoResize===void 0&&(e.autoResize=this.options.autoResize),e}createRenderer(e){return e=this.patchRendererOptions(e),new hs({...e,deviceManager:this.deviceManager})}createCameraRenderer(e){return e=this.patchRendererOptions(e),new ls({...e,deviceManager:this.deviceManager})}createCurtainsRenderer(e){return e=this.patchRendererOptions(e),new mi({...e,deviceManager:this.deviceManager})}setDeviceManager(){this.deviceManager=new Zr({label:"GPUCurtains default device",production:this.options.production,adapterOptions:this.options.adapterOptions,onError:()=>setTimeout(()=>{this._onErrorCallback&&this._onErrorCallback()},0),onDeviceLost:e=>this._onContextLostCallback&&this._onContextLostCallback(e),onDeviceDestroyed:e=>this._onContextDestroyedCallback&&this._onContextDestroyedCallback(e)})}get renderers(){return this.deviceManager.renderers}get renderer(){return this.renderers[0]}async setDevice({adapter:e=null,device:t=null}={}){await this.deviceManager.init({adapter:e,device:t})}async restoreContext(){await this.deviceManager.restoreDevice()}get pingPongPlanes(){return this.renderers?.map(e=>e.pingPongPlanes).flat()}get shaderPasses(){return this.renderers?.map(e=>e.shaderPasses).flat()}get meshes(){return this.renderers?.map(e=>e.meshes).flat()}get domMeshes(){return this.renderers?.filter(e=>e instanceof mi).map(e=>e.domMeshes).flat()}get domObjects(){return this.renderers?.filter(e=>e instanceof mi).map(e=>e.domObjects).flat()}get planes(){return this.domMeshes.filter(e=>e instanceof yn)}get computePasses(){return this.renderers?.map(e=>e.computePasses).flat()}get boundingRect(){return this.renderer?.boundingRect}initScroll(){this.scrollManager=new qo({scroll:{x:window.pageXOffset,y:window.pageYOffset},delta:{x:0,y:0},shouldWatch:this.options.watchScroll,onScroll:e=>this.updateScroll(e)})}updateScroll(e={x:0,y:0}){this.domObjects.forEach(t=>{t.domElement&&t.watchScroll&&t.updateScrollPosition(e)}),this._onScrollCallback&&this._onScrollCallback()}updateScrollValues(e={x:0,y:0}){this.scrollManager.updateScrollValues(e)}get scrollDelta(){return this.scrollManager.delta}get scrollValues(){return this.scrollManager.scroll}initEvents(){rs.useObserver(this.options.autoResize),this.initScroll()}onRender(e){return e&&(this._onRenderCallback=e),this}onScroll(e){return e&&(this._onScrollCallback=e),this}onError(e){return e&&(this._onErrorCallback=e),this}onContextLost(e){return e&&(this._onContextLostCallback=e),this}onContextDestroyed(e){return e&&(this._onContextDestroyedCallback=e),this}animate(){this.render(),this.animationFrameID=window.requestAnimationFrame(this.animate.bind(this))}render(){this._onRenderCallback&&this._onRenderCallback(),this.deviceManager.render()}destroy(){this.animationFrameID&&window.cancelAnimationFrame(this.animationFrameID),this.deviceManager.destroy(),this.scrollManager?.destroy(),rs.destroy()}}var Bs=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$4"),M=l((n,e,t)=>(Bs(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$2"),V=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$4"),_e=l((n,e,t,i)=>(Bs(n,e,"write to private field"),e.set(n,t),t),"__privateSet$2"),D=l((n,e,t)=>(Bs(n,e,"access private method"),t),"__privateMethod$3"),q,ae,Ge,U,Ke,Ze,Mt,Je,gi,Ms,Cs,xn,Ss,vn,yi,Ts,xi,Ps,vi,Rs,bi,zs,wi,Es,Bi,Ls,Mi,_s,Ci,Gs,We,Qe,Si,As,Ds,bn,Os,wn;const et=new G,tt=new G,Ae=new m;class Ho{static{l(this,"OrbitControls")}constructor({camera:e,element:t=null,target:i=new m,enableZoom:s=!0,minZoom:r=0,maxZoom:o=1/0,zoomSpeed:a=1,enableRotate:h=!0,minPolarAngle:u=0,maxPolarAngle:d=Math.PI,minAzimuthAngle:c=-1/0,maxAzimuthAngle:f=1/0,rotateSpeed:p=1,enablePan:g=!0,panSpeed:y=1}){if(V(this,gi),V(this,Cs),V(this,Ss),V(this,yi),V(this,xi),V(this,vi),V(this,bi),V(this,wi),V(this,Bi),V(this,Mi),V(this,Ci),V(this,We),V(this,Si),V(this,Ds),V(this,Os),V(this,q,null),V(this,ae,new m),V(this,Ge,!1),V(this,U,{radius:1,phi:0,theta:0}),V(this,Ke,new G),V(this,Ze,!1),V(this,Mt,new G),V(this,Je,new m),!e){_("OrbitControls: cannot initialize without a camera.");return}D(this,gi,Ms).call(this,{target:i,enableZoom:s,minZoom:r,maxZoom:o,zoomSpeed:a,enableRotate:h,minPolarAngle:u,maxPolarAngle:d,minAzimuthAngle:c,maxAzimuthAngle:f,rotateSpeed:p,enablePan:g,panSpeed:y}),this.element=t??(typeof window<"u"?window:null),this.useCamera(e)}useCamera(e){this.camera=e,this.camera.position.onChange(()=>{this.camera.lookAt(this.target)}),M(this,ae).copy(this.camera.position).sub(this.target),M(this,U).radius=M(this,ae).length(),M(this,U).theta=Math.atan2(M(this,ae).x,M(this,ae).z),M(this,U).phi=Math.acos(Math.min(Math.max(M(this,ae).y/M(this,U).radius,-1),1)),D(this,We,Qe).call(this)}reset({position:e,target:t,enableZoom:i=this.enableZoom,minZoom:s=this.minZoom,maxZoom:r=this.maxZoom,zoomSpeed:o=this.zoomSpeed,enableRotate:a=this.enableRotate,minPolarAngle:h=this.minPolarAngle,maxPolarAngle:u=this.maxPolarAngle,minAzimuthAngle:d=this.minAzimuthAngle,maxAzimuthAngle:c=this.maxAzimuthAngle,rotateSpeed:f=this.rotateSpeed,enablePan:p=this.enablePan,panSpeed:g=this.panSpeed}={}){D(this,gi,Ms).call(this,{target:t,enableZoom:i,minZoom:s,maxZoom:r,zoomSpeed:o,enableRotate:a,minPolarAngle:h,maxPolarAngle:u,minAzimuthAngle:d,maxAzimuthAngle:c,rotateSpeed:f,enablePan:p,panSpeed:g}),e&&this.updatePosition(e)}updatePosition(e=new m){e.sub(this.target),M(this,U).radius=e.length(),M(this,U).theta=Math.atan2(e.x,e.z),M(this,U).phi=Math.acos(Math.min(Math.max(e.y/M(this,U).radius,-1),1)),D(this,We,Qe).call(this)}set element(e){M(this,q)&&(!e||M(this,q)!==e)&&D(this,Ss,vn).call(this),_e(this,q,e),e&&D(this,Cs,xn).call(this)}get element(){return M(this,q)}destroy(){this.element=null}}q=new WeakMap,ae=new WeakMap,Ge=new WeakMap,U=new WeakMap,Ke=new WeakMap,Ze=new WeakMap,Mt=new WeakMap,Je=new WeakMap,gi=new WeakSet,Ms=l(function({target:n,enableZoom:e=this.enableZoom,minZoom:t=this.minZoom,maxZoom:i=this.maxZoom,zoomSpeed:s=this.zoomSpeed,enableRotate:r=this.enableRotate,minPolarAngle:o=this.minPolarAngle,maxPolarAngle:a=this.maxPolarAngle,minAzimuthAngle:h=this.minAzimuthAngle,maxAzimuthAngle:u=this.maxAzimuthAngle,rotateSpeed:d=this.rotateSpeed,enablePan:c=this.enablePan,panSpeed:f=this.panSpeed}={}){n&&(this.target=n),this.enableZoom=e,this.minZoom=t,this.maxZoom=i,this.zoomSpeed=s,this.enableRotate=r,this.minPolarAngle=o,this.maxPolarAngle=a,this.minAzimuthAngle=h,this.maxAzimuthAngle=u,this.rotateSpeed=d,this.enablePan=c,this.panSpeed=f},"setBaseParams_fn"),Cs=new WeakSet,xn=l(function(){M(this,q).addEventListener("contextmenu",D(this,Ci,Gs).bind(this),!1),M(this,q).addEventListener("mousedown",D(this,yi,Ts).bind(this),!1),M(this,q).addEventListener("mousemove",D(this,vi,Rs).bind(this),!1),M(this,q).addEventListener("mouseup",D(this,wi,Es).bind(this),!1),M(this,q).addEventListener("touchstart",D(this,xi,Ps).bind(this),{passive:!1}),M(this,q).addEventListener("touchmove",D(this,bi,zs).bind(this),{passive:!1}),M(this,q).addEventListener("touchend",D(this,Bi,Ls).bind(this),!1),M(this,q).addEventListener("wheel",D(this,Mi,_s).bind(this),{passive:!1})},"addEvents_fn"),Ss=new WeakSet,vn=l(function(){M(this,q).removeEventListener("contextmenu",D(this,Ci,Gs).bind(this),!1),M(this,q).removeEventListener("mousedown",D(this,yi,Ts).bind(this),!1),M(this,q).removeEventListener("mousemove",D(this,vi,Rs).bind(this),!1),M(this,q).removeEventListener("mouseup",D(this,wi,Es).bind(this),!1),M(this,q).removeEventListener("touchstart",D(this,xi,Ps).bind(this),{passive:!1}),M(this,q).removeEventListener("touchmove",D(this,bi,zs).bind(this),{passive:!1}),M(this,q).removeEventListener("touchend",D(this,Bi,Ls).bind(this),!1),M(this,q).removeEventListener("wheel",D(this,Mi,_s).bind(this),{passive:!1})},"removeEvents_fn"),yi=new WeakSet,Ts=l(function(n){n.button===0&&this.enableRotate?(_e(this,Ge,!0),M(this,Ke).set(n.clientX,n.clientY)):n.button===2&&this.enablePan&&(_e(this,Ze,!0),M(this,Mt).set(n.clientX,n.clientY)),n.stopPropagation(),n.preventDefault()},"onMouseDown_fn"),xi=new WeakSet,Ps=l(function(n){n.touches.length===1&&this.enableRotate&&(_e(this,Ge,!0),M(this,Ke).set(n.touches[0].pageX,n.touches[0].pageY))},"onTouchStart_fn"),vi=new WeakSet,Rs=l(function(n){M(this,Ge)&&this.enableRotate?D(this,Si,As).call(this,n.clientX,n.clientY):M(this,Ze)&&this.enablePan&&D(this,Ds,bn).call(this,n.clientX,n.clientY)},"onMouseMove_fn"),bi=new WeakSet,zs=l(function(n){M(this,Ge)&&this.enableRotate&&D(this,Si,As).call(this,n.touches[0].pageX,n.touches[0].pageY)},"onTouchMove_fn"),wi=new WeakSet,Es=l(function(n){_e(this,Ge,!1),_e(this,Ze,!1)},"onMouseUp_fn"),Bi=new WeakSet,Ls=l(function(n){_e(this,Ge,!1),_e(this,Ze,!1)},"onTouchEnd_fn"),Mi=new WeakSet,_s=l(function(n){this.enableZoom&&(D(this,Os,wn).call(this,n.deltaY),n.preventDefault())},"onMouseWheel_fn"),Ci=new WeakSet,Gs=l(function(n){n.preventDefault()},"onContextMenu_fn"),We=new WeakSet,Qe=l(function(){const n=M(this,U).radius*Math.sin(Math.max(1e-6,M(this,U).phi));M(this,ae).x=n*Math.sin(M(this,U).theta),M(this,ae).y=M(this,U).radius*Math.cos(M(this,U).phi),M(this,ae).z=n*Math.cos(M(this,U).theta),this.camera.position.copy(this.target).add(M(this,ae))},"update_fn"),Si=new WeakSet,As=l(function(n,e){et.set(n,e),tt.copy(et).sub(M(this,Ke)).multiplyScalar(this.rotateSpeed),M(this,U).theta-=2*Math.PI*tt.x/this.camera.size.height,M(this,U).phi-=2*Math.PI*tt.y/this.camera.size.height,M(this,U).theta=Math.min(this.maxAzimuthAngle,Math.max(this.minAzimuthAngle,M(this,U).theta)),M(this,U).phi=Math.min(this.maxPolarAngle,Math.max(this.minPolarAngle,M(this,U).phi)),M(this,Ke).copy(et),D(this,We,Qe).call(this)},"rotate_fn"),Ds=new WeakSet,bn=l(function(n,e){et.set(n,e),tt.copy(et).sub(M(this,Mt)).multiplyScalar(this.panSpeed),M(this,Je).set(0),Ae.copy(this.camera.position).sub(this.target);let t=Ae.length();t*=Math.tan(this.camera.fov/2*Math.PI/180),Ae.set(this.camera.modelMatrix.elements[0],this.camera.modelMatrix.elements[1],this.camera.modelMatrix.elements[2]),Ae.multiplyScalar(-(2*tt.x*t)/this.camera.size.height),M(this,Je).add(Ae),Ae.set(this.camera.modelMatrix.elements[4],this.camera.modelMatrix.elements[5],this.camera.modelMatrix.elements[6]),Ae.multiplyScalar(2*tt.y*t/this.camera.size.height),M(this,Je).add(Ae),M(this,Mt).copy(et),this.target.add(M(this,Je)),M(this,ae).copy(this.camera.position).sub(this.target),M(this,U).radius=M(this,ae).length(),D(this,We,Qe).call(this)},"pan_fn"),Os=new WeakSet,wn=l(function(n){M(this,U).radius=Math.min(this.maxZoom,Math.max(this.minZoom+1e-6,M(this,U).radius+n*this.zoomSpeed/100)),D(this,We,Qe).call(this)},"zoom_fn");var Xo=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$3"),Te=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$3"),he=l((n,e,t)=>(Xo(n,e,"access private method"),t),"__privateMethod$2"),Fs,Bn,$s,Mn,Ti,Us,Ct,Pi,ks,Cn,Is,Sn,Ri,Vs,Ns,Tn,Ws,Pn;class Rn{static{l(this,"HDRLoader")}constructor(){Te(this,Fs),Te(this,$s),Te(this,Ti),Te(this,Ct),Te(this,ks),Te(this,Is),Te(this,Ri),Te(this,Ns),Te(this,Ws)}async loadFromUrl(e){const t=await(await fetch(e)).arrayBuffer();return he(this,Fs,Bn).call(this,new DataView(t))}}Fs=new WeakSet,Bn=l(function(n){const e={data:n,offset:0},t=he(this,$s,Mn).call(this,e);return{width:t.width,height:t.height,exposure:t.exposure,gamma:t.gamma,data:he(this,ks,Cn).call(this,e,t)}},"decodeRGBE_fn"),$s=new WeakSet,Mn=l(function(n){let e=he(this,Ct,Pi).call(this,n);const t={colorCorr:[1,1,1],exposure:1,gamma:1,width:0,height:0,flipX:!1,flipY:!1};if(e!=="#?RADIANCE"&&e!=="#?RGBE")throw new Error("Incorrect file format!");for(;e!=="";){e=he(this,Ct,Pi).call(this,n);const s=e.split("=");switch(s[0]){case"GAMMA":t.gamma=parseFloat(s[1]);break;case"FORMAT":if(s[1]!=="32-bit_rle_rgbe"&&s[1]!=="32-bit_rle_xyze")throw new Error("Incorrect encoding format!");break;case"EXPOSURE":t.exposure=parseFloat(s[1]);break;case"COLORCORR":t.colorCorr=s[1].replace(/^\s+|\s+$/g,"").split(" ").map(r=>parseFloat(r));break}}e=he(this,Ct,Pi).call(this,n);const i=e.split(" ");return he(this,Ti,Us).call(this,i[0],parseInt(i[1]),t),he(this,Ti,Us).call(this,i[2],parseInt(i[3]),t),t},"parseHeader_fn"),Ti=new WeakSet,Us=l(function(n,e,t){switch(n){case"+X":t.width=e;break;case"-X":t.width=e,t.flipX=!0,console.warn("Flipping horizontal orientation not currently supported");break;case"-Y":t.height=e,t.flipY=!0;break;case"+Y":t.height=e;break}},"parseSize_fn"),Ct=new WeakSet,Pi=l(function(n){let e,t="";for(;(e=n.data.getUint8(n.offset++))!==10;)t+=String.fromCharCode(e);return t},"readLine_fn"),ks=new WeakSet,Cn=l(function(n,e){const t=n.data.getUint16(n.offset);let i;if(t===514)i=he(this,Is,Sn).call(this,n,e),e.flipX&&he(this,Ns,Tn).call(this,i,e),e.flipY&&he(this,Ws,Pn).call(this,i,e);else throw new Error("Obsolete HDR file version!");return i},"parseData_fn"),Is=new WeakSet,Sn=l(function(n,e){const{width:t,height:i,colorCorr:s}=e,r=new Float32Array(t*i*4);let o=0,{offset:a,data:h}=n;for(let u=0;u<i;++u){if(h.getUint16(a)!==514)throw new Error("Incorrect scanline start hash");if(h.getUint16(a+2)!==t)throw new Error("Scanline doesn't match picture dimension!");a+=4;const d=t*4,c=[];let f=0;for(;f<d;){let p=h.getUint8(a++);if(p>128){const g=p-128;p=h.getUint8(a++);for(let y=0;y<g;++y)c[f++]=p}else for(let g=0;g<p;++g)c[f++]=h.getUint8(a++)}for(f=0;f<t;++f){const p=c[f],g=c[f+t],y=c[f+t*2];let x=c[f+t*3];x=x?Math.pow(2,x-136):0,r[o++]=p*x*s[0],r[o++]=g*x*s[1],r[o++]=y*x*s[2],r[o++]=x}}return r},"parseNewRLE_fn"),Ri=new WeakSet,Vs=l(function(n,e,t){e*=4,t*=4;for(let i=0;i<4;++i){const s=n[e+i];n[e+i]=n[t+i],n[t+i]=s}},"swap_fn"),Ns=new WeakSet,Tn=l(function(n,e){const{width:t,height:i}=e,s=t>>1;for(let r=0;r<i;++r){const o=r*t;for(let a=0;a<s;++a){const h=o+a,u=o+t-1-a;he(this,Ri,Vs).call(this,n,h,u)}}},"flipX_fn"),Ws=new WeakSet,Pn=l(function(n,e){const{width:t,height:i}=e,s=i>>1;for(let r=0;r<s;++r){const o=r*t,a=(i-1-r)*t;for(let h=0;h<t;++h)he(this,Ri,Vs).call(this,n,o+h,a+h)}},"flipY_fn");var Ko=`
fn radicalInverse_VdC(inputBits: u32) -> f32 {
  var bits: u32 = inputBits;
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  return f32(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// hammersley2d describes a sequence of points in the 2d unit square [0,1)^2
// that can be used for quasi Monte Carlo integration
fn hammersley2d(i: u32, N: u32) -> vec2f {
  return vec2(f32(i) / f32(N), radicalInverse_VdC(i));
}

// GGX microfacet distribution
struct MicrofacetDistributionSample {
  pdf: f32,
  cosTheta: f32,
  sinTheta: f32,
  phi: f32
};

fn D_GGX(NdotH: f32, roughness: f32) -> f32 {
  let a: f32 = NdotH * roughness;
  let k: f32 = roughness / (1.0 - NdotH * NdotH + a * a);
  return k * k * (1.0 / ${Math.PI});
}

// https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.html
// This implementation is based on https://bruop.github.io/ibl/,
//  https://www.tobias-franke.eu/log/2014/03/30/notes_on_importance_sampling.html
// and https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html
fn GGX(xi: vec2f, roughness: f32) -> MicrofacetDistributionSample {
  var ggx: MicrofacetDistributionSample;

  // evaluate sampling equations
  let alpha: f32 = roughness * roughness;
  ggx.cosTheta = clamp(sqrt((1.0 - xi.y) / (1.0 + (alpha * alpha - 1.0) * xi.y)), 0.0, 1.0);
  ggx.sinTheta = sqrt(1.0 - ggx.cosTheta * ggx.cosTheta);
  ggx.phi = 2.0 * ${Math.PI} * xi.x;

  // evaluate GGX pdf (for half vector)
  ggx.pdf = D_GGX(ggx.cosTheta, alpha);

  // Apply the Jacobian to obtain a pdf that is parameterized by l
  // see https://bruop.github.io/ibl/
  // Typically you'd have the following:
  // float pdf = D_GGX(NoH, roughness) * NoH / (4.0 * VoH);
  // but since V = N => VoH == NoH
  ggx.pdf /= 4.0;

  return ggx;
}

fn Lambertian(xi: vec2f, roughness: f32) -> MicrofacetDistributionSample {
    var lambertian: MicrofacetDistributionSample;

  // Cosine weighted hemisphere sampling
  // http://www.pbr-book.org/3ed-2018/Monte_Carlo_Integration/2D_Sampling_with_Multidimensional_Transformations.html#Cosine-WeightedHemisphereSampling
  lambertian.cosTheta = sqrt(1.0 - xi.y);
  lambertian.sinTheta = sqrt(xi.y); // equivalent to \`sqrt(1.0 - cosTheta*cosTheta)\`;
  lambertian.phi = 2.0 * ${Math.PI} * xi.x;

  lambertian.pdf = lambertian.cosTheta / ${Math.PI}; // evaluation for solid angle, therefore drop the sinTheta

  return lambertian;
}

// TBN generates a tangent bitangent normal coordinate frame from the normal
// (the normal must be normalized)
fn generateTBN(normal: vec3f) -> mat3x3f {
  var bitangent: vec3f = vec3(0.0, 1.0, 0.0);

  let NdotUp: f32 = dot(normal, vec3(0.0, 1.0, 0.0));
  let epsilon: f32 = 0.0000001;
  
  if (1.0 - abs(NdotUp) <= epsilon) {
    // Sampling +Y or -Y, so we need a more robust bitangent.
    if (NdotUp > 0.0) {
      bitangent = vec3(0.0, 0.0, 1.0);
    }
    else {
      bitangent = vec3(0.0, 0.0, -1.0);
    }
  }

  let tangent: vec3f = normalize(cross(bitangent, normal));
  bitangent = cross(normal, tangent);

  return mat3x3f(tangent, bitangent, normal);
}

// getImportanceSample returns an importance sample direction with pdf in the .w component
fn getImportanceSample(Xi: vec2<f32>, N: vec3f, roughness: f32) -> vec4f {
  var importanceSample: MicrofacetDistributionSample;
  
  importanceSample = GGX(Xi, roughness);
  
   // transform the hemisphere sample to the normal coordinate frame
  // i.e. rotate the hemisphere to the normal direction
  let localSpaceDirection: vec3f = normalize(vec3(
    importanceSample.sinTheta * cos(importanceSample.phi), 
    importanceSample.sinTheta * sin(importanceSample.phi), 
    importanceSample.cosTheta
  ));
  
  let TBN: mat3x3f = generateTBN(N);
  let direction: vec3f = TBN * localSpaceDirection;

  return vec4(direction, importanceSample.pdf);
}

// From the filament docs. Geometric Shadowing function
// https://google.github.io/filament/Filament.html#toc4.4.2
fn V_SmithGGXCorrelated(NoV: f32, NoL: f32, roughness: f32) -> f32 {
  let a2: f32 = pow(roughness, 4.0);
  let GGXV: f32 = NoL * sqrt(NoV * NoV * (1.0 - a2) + a2);
  let GGXL: f32 = NoV * sqrt(NoL * NoL * (1.0 - a2) + a2);
  return 0.5 / (GGXV + GGXL);
}

@compute @workgroup_size(16, 16, 1)
fn main(@builtin(global_invocation_id) global_id : vec3<u32>) {  
  let texelSize: vec2<u32> = textureDimensions(lutStorageTexture);

  let x: u32 = global_id.x;
  let y: u32 = global_id.y;

  // Check bounds
  if (x >= texelSize.x || y >= texelSize.y) {
     return;
  }
  
  let epsilon: f32 = 1e-6;

  // Compute roughness and N\xB7V from texture coordinates
  let NdotV: f32 = max(f32(x) / f32(texelSize.x - 1), epsilon);    // Maps x-axis to N\xB7V (0.0 to 1.0)
  let roughness: f32 = max(f32(y) / f32(texelSize.y - 1), epsilon);  // Maps y-axis to roughness (0.0 to 1.0)

  // Calculate view vector and normal vector
  let V: vec3<f32> = vec3<f32>(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV);  // Normalized view vector
  let N: vec3<f32> = vec3<f32>(0.0, 0.0, 1.0);                          // Normal is along z-axis

  // Initialize integration variables
  var A: f32 = 0.0;
  var B: f32 = 0.0;
  var C: f32 = 0.0;

  // Monte Carlo integration to calculate A and B factors
  let sampleCount: u32 = params.sampleCount;
  for (var i: u32 = 0; i < sampleCount; i++) {
    let Xi: vec2<f32> = hammersley2d(i, sampleCount);  // Importance sampling (Hammersley sequence)
    
    //let H: vec3<f32> = importanceSampleGGX(Xi, N, roughness);
    let importanceSample: vec4f = getImportanceSample(Xi, N, roughness);
    let H: vec3f = importanceSample.xyz;
    // let pdf: f32 = importanceSample.w;
    
    let L: vec3<f32> = normalize(reflect(-V, H));
    
    let NdotL: f32 = clamp(L.z, 0.0, 1.0);
    let NdotH: f32 = clamp(H.z, 0.0, 1.0);
    let VdotH: f32 = clamp(dot(V, H), 0.0, 1.0);

    // Ensure valid light direction
    if (NdotL > 0.0) {     
      // LUT for GGX distribution.

      // Taken from: https://bruop.github.io/ibl
      // Shadertoy: https://www.shadertoy.com/view/3lXXDB
      // Terms besides V are from the GGX PDF we're dividing by.
      let V_pdf: f32 = V_SmithGGXCorrelated(NdotV, NdotL, roughness) * VdotH * NdotL / max(NdotH, epsilon);
      let Fc: f32 = pow(1.0 - VdotH, 5.0);
      A += (1.0 - Fc) * V_pdf;
      B += Fc * V_pdf;
      C += 0.0;
    }
  }

  // Average the integration result
  // The PDF is simply pdf(v, h) -> NDF * <nh>.
  // To parametrize the PDF over l, use the Jacobian transform, yielding to: pdf(v, l) -> NDF * <nh> / 4<vh>
  // Since the BRDF divide through the PDF to be normalized, the 4 can be pulled out of the integral.
  A = A * 4.0 / f32(sampleCount);
  B = B * 4.0 / f32(sampleCount);
  C = C * 4.0 * 2.0 * ${Math.PI} / f32(sampleCount);
    
  // Store the result in the LUT texture
  textureStore(lutStorageTexture, vec2<u32>(x, y), vec4<f32>(A, B, C, 1.0));
}
`,Zo=`
// Cube face lookup vectors
// positive and negative Y need to be inverted
const faceVectors = array<array<vec3<f32>, 2>, 6>(
  array<vec3<f32>, 2>(vec3<f32>(1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0)), // +X
  array<vec3<f32>, 2>(vec3<f32>(-1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0)), // -X
  array<vec3<f32>, 2>(vec3<f32>(0.0, -1.0, 0.0), vec3<f32>(0.0, 0.0, 1.0)),  // -Y
  array<vec3<f32>, 2>(vec3<f32>(0.0, 1.0, 0.0), vec3<f32>(0.0, 0.0, -1.0)), // +Y
  array<vec3<f32>, 2>(vec3<f32>(0.0, 0.0, 1.0), vec3<f32>(0.0, 1.0, 0.0)), // +Z
  array<vec3<f32>, 2>(vec3<f32>(0.0, 0.0, -1.0), vec3<f32>(0.0, 1.0, 0.0)) // -Z
);

// Utility to calculate 3D direction for a given cube face pixel
fn texelDirection(faceIndex : u32, u : f32, v : f32) -> vec3<f32> {
  let forward = faceVectors[faceIndex][0];
  let up = faceVectors[faceIndex][1];
  let right = normalize(cross(up, forward));
  return normalize(forward + (2.0 * u - 1.0) * right + (2.0 * v - 1.0) * up);
}

// Map 3D direction to equirectangular coordinates
fn dirToEquirect(dir : vec3<f32>) -> vec2<f32> {
  let phi = atan2(dir.z, dir.x);
  let theta = asin(dir.y);
  let u = 0.5 + 0.5 * phi / ${Math.PI};
  let v = 0.5 - theta / ${Math.PI};
  return vec2<f32>(u, v);
}

@compute @workgroup_size(8, 8, 1)
fn main(@builtin(global_invocation_id) global_id : vec3<u32>) {
  let faceSize = params.faceSize;
  let cubeFaceIndex = global_id.z;
  let x = global_id.x;
  let y = global_id.y;

  if (x >= faceSize || y >= faceSize || cubeFaceIndex >= 6u) {
    return;
  }

  let u = f32(x) / f32(faceSize);
  let v = f32(y) / f32(faceSize);

  // Get the 3D direction for this cube face texel
  let dir = texelDirection(cubeFaceIndex, u, v);

  // Map to equirectangular coordinates
  let uv = dirToEquirect(dir);        
  
  let hdrWidth = params.imageSize.x;
  let hdrHeight = params.imageSize.y;

  let texX = u32(clamp(uv.x * hdrWidth, 0.0, hdrWidth - 1.0));
  let texY = u32(clamp(uv.y * hdrHeight, 0.0, hdrHeight - 1.0));

  let hdrTexelIndex = texY * u32(hdrWidth) + texX;
  
  // Sample the equirectangular texture
  let sampledColor = params.hdrImageData[hdrTexelIndex];
  
  // Correct cube face order in texture store (fix for reversed face indices)
  textureStore(
    specularStorageCubemap,
    vec2<u32>(x, y),
    cubeFaceIndex,
    sampledColor
  );
}
`;const Jo=l(n=>`
fn radicalInverse_VdC(inputBits: u32) -> f32 {
  var bits: u32 = inputBits;
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  return f32(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// hammersley2d describes a sequence of points in the 2d unit square [0,1)^2
// that can be used for quasi Monte Carlo integration
fn hammersley2d(i: u32, N: u32) -> vec2f {
  return vec2(f32(i) / f32(N), radicalInverse_VdC(i));
}

// TBN generates a tangent bitangent normal coordinate frame from the normal
// (the normal must be normalized)
fn generateTBN(normal: vec3f) -> mat3x3f {
  var bitangent: vec3f = vec3(0.0, 1.0, 0.0);

  let NdotUp: f32 = dot(normal, vec3(0.0, 1.0, 0.0));
  let epsilon: f32 = 0.0000001;
  
  if (1.0 - abs(NdotUp) <= epsilon) {
    // Sampling +Y or -Y, so we need a more robust bitangent.
    if (NdotUp > 0.0) {
      bitangent = vec3(0.0, 0.0, 1.0);
    }
    else {
      bitangent = vec3(0.0, 0.0, -1.0);
    }
  }

  let tangent: vec3f = normalize(cross(bitangent, normal));
  bitangent = cross(normal, tangent);

  return mat3x3f(tangent, bitangent, normal);
}

// Mipmap Filtered Samples (GPU Gems 3, 20.4)
// https://developer.nvidia.com/gpugems/gpugems3/part-iii-rendering/chapter-20-gpu-based-importance-sampling
// https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf
fn computeLod(pdf: f32) -> f32 {
  // https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf
  return 0.5 * log2( 6.0 * f32(params.faceSize) * f32(params.faceSize) / (f32(params.sampleCount) * pdf));
}

fn transformDirection(face: u32, uv: vec2f) -> vec3f {
  // Transform the direction based on the cubemap face
  switch (face) {
    case 0u {
      // +X
      return vec3f( 1.0,  uv.y, -uv.x);
    }
    case 1u {
      // -X
      return vec3f(-1.0,  uv.y,  uv.x);
    }
    case 2u {
      // +Y
      return vec3f( uv.x,  -1.0, uv.y);
    }
    case 3u {
      // -Y
      return vec3f( uv.x, 1.0,  -uv.y);
    }
    case 4u {
      // +Z
      return vec3f( uv.x,  uv.y,  1.0);
    }
    case 5u {
      // -Z
      return vec3f(-uv.x,  uv.y, -1.0);
    }
    default {
      return vec3f(0.0, 0.0, 0.0);
    }
  }
}

const PI = ${Math.PI};

@compute @workgroup_size(8, 8, 1) fn main(
  @builtin(global_invocation_id) GlobalInvocationID: vec3u,
) {
  let faceSize: u32 = params.faceSize;
  let sampleCount: u32 = params.sampleCount;
  
  let face: u32 = GlobalInvocationID.z;
  let x: u32 = GlobalInvocationID.x;
  let y: u32 = GlobalInvocationID.y;

  if (x >= faceSize || y >= faceSize) {
    return;
  }

  let texelSize: f32 = 1.0 / f32(faceSize);
  let halfTexel: f32 = texelSize * 0.5;
  
  var uv: vec2f = vec2(
    (f32(x) + halfTexel) * texelSize,
    (f32(y) + halfTexel) * texelSize
  );
  
  uv = uv * 2.0 - 1.0;

  let normal: vec3<f32> = transformDirection(face, uv);
  
  var irradiance: vec3f = vec3f(0.0, 0.0, 0.0);

  for (var i: u32 = 0; i < sampleCount; i++) {
    // generate a quasi monte carlo point in the unit square [0.1)^2
    let xi: vec2f = hammersley2d(i, sampleCount);
    
    let cosTheta: f32 = sqrt(1.0 - xi.y);
    let sinTheta: f32 = sqrt(1.0 - cosTheta * cosTheta);
    let phi: f32 = 2.0 * PI * xi.x;
    let pdf: f32 = cosTheta / PI; // evaluation for solid angle, therefore drop the sinTheta

    let sampleVec: vec3f = vec3f(
      sinTheta * cos(phi),
      sinTheta * sin(phi),
      cosTheta
    );
    
    let TBN: mat3x3f = generateTBN(normalize(normal));
    
    var direction: vec3f = TBN * sampleVec;
    
    // invert along Y axis
    direction.y *= -1.0;
    
    let lod: f32 = computeLod(pdf);
    
    let sampleLevel = min(lod, f32(params.maxMipLevel));

    // Convert sampleVec to texture coordinates of the specular env map
    irradiance += textureSampleLevel(
      ${n.options.name},
      clampSampler,
      direction,
      sampleLevel
    ).rgb;
  }

  irradiance /= f32(sampleCount);

  textureStore(diffuseEnvMap, vec2(x, y), face, vec4f(irradiance, 1.0));
}
`,"computeDiffuseFromSpecularCubemap");var Qo=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$2"),ea=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$2"),js=l((n,e,t)=>(Qo(n,e,"access private method"),t),"__privateMethod$1"),St,zi;class ta{static{l(this,"EnvironmentMap")}constructor(e,t={lutTextureParams:{size:256,computeSampleCount:1024,label:"Environment LUT texture",name:"lutTexture",format:"rgba32float"},diffuseTextureParams:{size:128,computeSampleCount:2048,label:"Environment diffuse texture",name:"diffuseTexture",format:"rgba16float"},specularTextureParams:{label:"Environment specular texture",name:"specularTexture",format:"rgba16float",generateMips:!0}}){ea(this,St),e=I(e,"EnvironmentMap"),this.renderer=e,this.options=t,this.sampler=new je(this.renderer,{label:"Clamp sampler",name:"clampSampler",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge"}),this.rotation=new Ce(new Float32Array([0,0,1,0,1,0,-1,0,0])),this.hdrLoader=new Rn,this.computeBRDFLUTTexture()}async computeBRDFLUTTexture(){const{size:e,computeSampleCount:t,...i}=this.options.lutTextureParams;this.lutTexture=new Z(this.renderer,{...i,visibility:["fragment"],fixedSize:{width:e,height:e},autoDestroy:!1});let s=new Z(this.renderer,{label:"LUT storage texture",name:"lutStorageTexture",format:this.lutTexture.options.format,visibility:["compute"],usage:["copySrc","storageBinding"],type:"storage",fixedSize:{width:this.lutTexture.size.width,height:this.lutTexture.size.height}}),r=new Xt(this.renderer,{label:"Compute LUT texture",autoRender:!1,dispatchSize:[Math.ceil(s.size.width/16),Math.ceil(s.size.height/16),1],shaders:{compute:{code:Ko}},uniforms:{params:{struct:{sampleCount:{type:"u32",value:t}}}},textures:[s]});await r.material.compileMaterial(),this.renderer.onBeforeRenderScene.add(o=>{this.renderer.renderSingleComputePass(o,r),js(this,St,zi).call(this,o,s,this.lutTexture)},{once:!0}),this.renderer.onAfterCommandEncoderSubmission.add(()=>{r.destroy(),s.destroy(),s=null,r=null},{once:!0})}async computeSpecularCubemapFromHDRData(e){let t=new Z(this.renderer,{label:"Specular storage cubemap",name:"specularStorageCubemap",format:this.specularTexture.options.format,visibility:["compute"],usage:["copySrc","storageBinding"],type:"storage",fixedSize:{width:this.specularTexture.size.width,height:this.specularTexture.size.height,depth:6},viewDimension:"2d-array"}),i=new Xt(this.renderer,{label:"Compute specular cubemap from equirectangular",autoRender:!1,dispatchSize:[Math.ceil(this.specularTexture.size.width/8),Math.ceil(this.specularTexture.size.height/8),6],shaders:{compute:{code:Zo}},storages:{params:{struct:{hdrImageData:{type:"array<vec4f>",value:e.data},imageSize:{type:"vec2f",value:new G(e.width,e.height)},faceSize:{type:"u32",value:this.specularTexture.size.width}}}},textures:[t]});await i.material.compileMaterial();const s=this.renderer.device?.createCommandEncoder({label:"Render once command encoder"});this.renderer.production||s.pushDebugGroup("Render once command encoder"),this.renderer.renderSingleComputePass(s,i),js(this,St,zi).call(this,s,t,this.specularTexture),this.renderer.production||s.popDebugGroup();const r=s.finish();this.renderer.device?.queue.submit([r]),this.specularTexture.texture.mipLevelCount>1&&_t(this.renderer.device,this.specularTexture.texture),i.destroy(),t.destroy(),t=null,i=null}async computeDiffuseFromSpecular(){if(this.specularTexture.options.viewDimension!=="cube"){_("Could not compute the diffuse texture because the specular texture is not a cube map:"+this.specularTexture.options.viewDimension);return}let e=new Z(this.renderer,{label:"Diffuse storage cubemap",name:"diffuseEnvMap",format:this.diffuseTexture.options.format,visibility:["compute"],usage:["copySrc","storageBinding"],type:"storage",fixedSize:{width:this.diffuseTexture.size.width,height:this.diffuseTexture.size.height,depth:6},viewDimension:"2d-array"}),t=new Xt(this.renderer,{label:"Compute diffuse map from specular map",autoRender:!1,dispatchSize:[Math.ceil(this.diffuseTexture.size.width/8),Math.ceil(this.diffuseTexture.size.height/8),6],shaders:{compute:{code:Jo(this.specularTexture)}},uniforms:{params:{struct:{faceSize:{type:"u32",value:this.diffuseTexture.size.width},maxMipLevel:{type:"u32",value:this.specularTexture.texture.mipLevelCount},sampleCount:{type:"u32",value:this.options.diffuseTextureParams.computeSampleCount}}}},samplers:[this.sampler],textures:[this.specularTexture,e]});await t.material.compileMaterial(),this.renderer.onBeforeRenderScene.add(i=>{this.renderer.renderSingleComputePass(i,t),js(this,St,zi).call(this,i,e,this.diffuseTexture)},{once:!0}),this.renderer.onAfterCommandEncoderSubmission.add(()=>{t.destroy(),e.destroy(),e=null,t=null},{once:!0})}async loadAndComputeFromHDR(e){const t=await this.hdrLoader.loadFromUrl(e),{width:i,height:s}=t||{width:1024,height:512},r=Math.max(i/4,s/2),o={viewDimension:"cube",autoDestroy:!1};this.specularTexture?(this.specularTexture.size.width!==r||this.specularTexture.size.height!==r)&&(this.specularTexture.options.fixedSize.width=r,this.specularTexture.options.fixedSize.height=r,this.specularTexture.size.width=r,this.specularTexture.size.height=r,this.specularTexture.createTexture()):this.specularTexture=new Z(this.renderer,{...this.options.specularTextureParams,visibility:["fragment","compute"],fixedSize:{width:r,height:r},...o});const{size:a,computeSampleCount:h,...u}=this.options.diffuseTextureParams,d=Math.min(a,r);this.diffuseTexture?(this.diffuseTexture.size.width!==d||this.diffuseTexture.size.height!==d)&&(this.diffuseTexture.options.fixedSize.width=d,this.diffuseTexture.options.fixedSize.height=d,this.diffuseTexture.size.width=d,this.diffuseTexture.size.height=d,this.diffuseTexture.createTexture()):this.diffuseTexture=new Z(this.renderer,{...u,visibility:["fragment"],fixedSize:{width:d,height:d},...o}),t&&this.computeSpecularCubemapFromHDRData(t).then(()=>{this.computeDiffuseFromSpecular()})}destroy(){this.lutTexture?.destroy(),this.diffuseTexture?.destroy(),this.specularTexture?.destroy()}}St=new WeakSet,zi=l(function(n,e,t){n.copyTextureToTexture({texture:e.texture},{texture:t.texture},[t.texture.width,t.texture.height,t.texture.depthOrArrayLayers])},"copyComputeStorageTextureToTexture_fn");class ia extends ut{static{l(this,"BoxGeometry")}constructor({instancesCount:e=1,vertexBuffers:t=[],topology:i,mapBuffersAtCreation:s=!0,widthSegments:r=1,heightSegments:o=1,depthSegments:a=1}={}){super({verticesOrder:"ccw",topology:i,instancesCount:e,vertexBuffers:t,mapBuffersAtCreation:s}),this.type="BoxGeometry",r=Math.floor(r),o=Math.floor(o),a=Math.floor(a);const h=[],u=[],d=[],c=[];let f=0;const p=l((g,y,x,b,C,R,B,T,S,w)=>{const z=R/S,L=B/w,E=R/2,$=B/2,F=T/2,Q=S+1,H=w+1;let se=0;const k=new m;for(let N=0;N<H;N++){const X=N*L-$;for(let te=0;te<Q;te++){const le=te*z-E;k[g]=le*b,k[y]=X*C,k[x]=F,h.push(k.x,k.y,k.z),k[g]=0,k[y]=0,k[x]=T>0?1:-1,d.push(k.x,k.y,k.z),u.push(te/S),u.push(N/w),se+=1}}for(let N=0;N<w;N++)for(let X=0;X<S;X++){const te=f+X+Q*N,le=f+X+Q*(N+1),De=f+(X+1)+Q*(N+1),A=f+(X+1)+Q*N;c.push(te,le,A),c.push(le,De,A),f+=se}},"buildPlane");p("z","y","x",-1,-1,2,2,2,a,o),p("z","y","x",1,-1,2,2,-2,a,o),p("x","z","y",1,1,2,2,2,r,a),p("x","z","y",1,-1,2,2,-2,r,a),p("x","y","z",1,-1,2,2,2,r,o),p("x","y","z",-1,-1,2,2,-2,r,o),this.setAttribute({name:"position",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(h)}),this.setAttribute({name:"uv",type:"vec2f",bufferFormat:"float32x2",size:2,array:new Float32Array(u)}),this.setAttribute({name:"normal",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(d)}),this.setIndexBuffer({array:this.useUint16IndexArray?new Uint16Array(c):new Uint32Array(c),bufferFormat:this.useUint16IndexArray?"uint16":"uint32"})}}class sa extends ut{static{l(this,"SphereGeometry")}constructor({topology:e,instancesCount:t=1,vertexBuffers:i=[],mapBuffersAtCreation:s=!0,widthSegments:r=32,heightSegments:o=16,phiStart:a=0,phiLength:h=Math.PI*2,thetaStart:u=0,thetaLength:d=Math.PI}={}){super({verticesOrder:"ccw",topology:e,instancesCount:t,vertexBuffers:i,mapBuffersAtCreation:s}),this.type="SphereGeometry",r=Math.max(3,Math.floor(r)),o=Math.max(2,Math.floor(o));const c=1,f=Math.min(u+d,Math.PI);let p=0;const g=[],y=new m,x=new m,b=[],C=[],R=[],B=[];for(let T=0;T<=o;T++){const S=[],w=T/o;let z=0;T===0&&u===0?z=.5/r:T===o&&f===Math.PI&&(z=-.5/r);for(let L=0;L<=r;L++){const E=L/r;y.x=-c*Math.cos(a+E*h)*Math.sin(u+w*d),y.y=c*Math.cos(u+w*d),y.z=c*Math.sin(a+E*h)*Math.sin(u+w*d),C.push(y.x,y.y,y.z),x.copy(y).normalize(),R.push(x.x,x.y,x.z),B.push(E+z,w),S.push(p++)}g.push(S)}for(let T=0;T<o;T++)for(let S=0;S<r;S++){const w=g[T][S+1],z=g[T][S],L=g[T+1][S],E=g[T+1][S+1];(T!==0||u>0)&&b.push(w,z,E),(T!==o-1||f<Math.PI)&&b.push(z,L,E)}this.setAttribute({name:"position",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(C)}),this.setAttribute({name:"uv",type:"vec2f",bufferFormat:"float32x2",size:2,array:new Float32Array(B)}),this.setAttribute({name:"normal",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(R)}),this.setIndexBuffer({array:this.useUint16IndexArray?new Uint16Array(b):new Uint32Array(b),bufferFormat:this.useUint16IndexArray?"uint16":"uint32"})}}class ra extends ts{static{l(this,"PingPongPlane")}constructor(e,t={}){e=I(e,t.label?t.label+" PingPongPlane":"PingPongPlane");const i=t.targets&&t.targets.length&&t.targets.map(s=>({targetFormat:s.format}));t.outputTarget=new ji(e,{label:t.label?t.label+" render target":"Ping Pong render target",useDepth:!1,...i&&{colorAttachments:i}}),t.transparent=!1,t.depth=!1,t.label=t.label??"PingPongPlane "+e.pingPongPlanes?.length,super(e,t),this.type="PingPongPlane",this.createTexture({label:t.label?`${t.label} render texture`:"PingPongPlane render texture",name:"renderTexture",...t.targets&&t.targets.length&&{format:t.targets[0].format},usage:["copyDst","textureBinding"]})}get renderTexture(){return this.textures.find(e=>e.options.name==="renderTexture")}addToScene(e=!1){e&&this.renderer.pingPongPlanes.push(this),this.autoRender&&this.renderer.scene.addPingPongPlane(this)}removeFromScene(e=!1){this.outputTarget&&this.outputTarget.destroy(),this.autoRender&&this.renderer.scene.removePingPongPlane(this),e&&(this.renderer.pingPongPlanes=this.renderer.pingPongPlanes.filter(t=>t.uuid!==this.uuid))}}var qs=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$1"),P=l((n,e,t)=>(qs(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$1"),ue=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$1"),ce=l((n,e,t,i)=>(qs(n,e,"write to private field"),e.set(n,t),t),"__privateSet$1"),na=l((n,e,t)=>(qs(n,e,"access private method"),t),"__privateMethod"),ye,Pe,it,st,xe,ve,Tt,Pt,Rt,zt,Et,Lt,Ys,zn;class oa{static{l(this,"Raycaster")}constructor(e){ue(this,Ys),ue(this,ye,void 0),ue(this,Pe,void 0),ue(this,it,void 0),ue(this,st,void 0),ue(this,xe,void 0),ue(this,ve,void 0),ue(this,Tt,void 0),ue(this,Pt,void 0),ue(this,Rt,void 0),ue(this,zt,void 0),ue(this,Et,void 0),ue(this,Lt,void 0),this.type="Raycaster",e=Oe(e,this.type),this.renderer=e,this.camera=this.renderer.camera,this.pointer=new G(1/0),this.ray={origin:new m,direction:new m},ce(this,ye,{origin:this.ray.origin.clone(),direction:this.ray.direction.clone()}),ce(this,Pe,new m),ce(this,it,new m),ce(this,st,new m),ce(this,xe,new m),ce(this,ve,new m),ce(this,Tt,new G),ce(this,Pt,new G),ce(this,Rt,new G),ce(this,zt,new m),ce(this,Et,new m),ce(this,Lt,new m)}setFromMouse(e){const{clientX:t,clientY:i}=e.targetTouches&&e.targetTouches.length?e.targetTouches[0]:e;this.setFromNDCCoords((t-this.renderer.boundingRect.left)/this.renderer.boundingRect.width*2-1,-((i-this.renderer.boundingRect.top)/this.renderer.boundingRect.height)*2+1)}setFromNDCCoords(e=0,t=0){this.pointer.set(e,t),this.setRay()}setRay(){this.camera.worldMatrix.getTranslation(this.ray.origin),this.ray.direction.set(this.pointer.x,this.pointer.y,-1).unproject(this.camera).sub(this.ray.origin).normalize()}rayIntersectsTriangle(e){const i=new m,s=new m;i.crossVectors(P(this,ye).direction,P(this,ve));const r=P(this,xe).dot(i);if(Math.abs(r)<1e-6)return!1;const o=1/r,a=P(this,ye).origin.clone().sub(P(this,Pe)),h=o*a.dot(i);if(h<0||h>1)return!1;s.crossVectors(a,P(this,xe));const u=o*P(this,ye).direction.dot(s);if(u<0||h+u>1)return!1;const d=o*P(this,ve).dot(s);return d>1e-6?(e.copy(P(this,ye).origin).add(P(this,ye).direction.clone().multiplyScalar(d)),!0):!1}getBarycentricCoordinates(e){const t=e.clone().sub(P(this,Pe)),i=P(this,xe).dot(P(this,xe)),s=P(this,xe).dot(P(this,ve)),r=P(this,ve).dot(P(this,ve)),o=t.dot(P(this,xe)),a=t.dot(P(this,ve)),h=i*r-s*s,u=new m(0,(r*o-s*a)/h,(i*a-s*o)/h);return u.x=1-u.y-u.z,u}getTriangleNormal(){return new m().crossVectors(P(this,xe),P(this,ve)).normalize()}setAttributeVectorAtIndex(e,t,i,s,r){const o=i?i[e*3+t]:e*3+t;r.x=s.array[o*s.size],r.y=s.array[o*s.size+1],"z"in r&&(r.z=s.array[o*s.size+2])}intersectObject(e,t=!0,i=[]){if(!(e instanceof we))return this.renderer.production||_(`${this.type}: object to test intersection again is not of type Object3D`),i;const s=_n(e);return s&&na(this,Ys,zn).call(this,s,i),t&&e.children.forEach(r=>{this.intersectObject(r,t,i)}),i.length&&i.sort((r,o)=>this.ray.origin.distance(r.point)-this.ray.origin.distance(o.point)),i}intersectObjects(e,t=!0,i=[]){return e.forEach(s=>{this.intersectObject(s,t,i)}),i.length&&i.sort((s,r)=>this.ray.origin.distance(s.point)-this.ray.origin.distance(r.point)),i}}ye=new WeakMap,Pe=new WeakMap,it=new WeakMap,st=new WeakMap,xe=new WeakMap,ve=new WeakMap,Tt=new WeakMap,Pt=new WeakMap,Rt=new WeakMap,zt=new WeakMap,Et=new WeakMap,Lt=new WeakMap,Ys=new WeakSet,zn=l(function(n,e=[]){if(!n.geometry)return e;const t=n.geometry.getAttributeByName("position");if(!t)return this.renderer.production||_(`Raycaster: can't raycast on a mesh that has no position attribute: ${n.options.label}`),e;if(!t.array)return this.renderer.production||_(`Raycaster: can't raycast on a mesh that has no position attribute array: ${n.options.label}`),e;if(n.frustumCulling&&n.domFrustum){const{clipSpaceBoundingRect:h}=n.domFrustum;if(n.domFrustum.isIntersecting){if(this.pointer.x>h.left+h.width||this.pointer.x<h.left||this.pointer.y>h.top||this.pointer.y<h.top-h.height)return e}else return e}const i=n.worldMatrix.getInverse();P(this,ye).origin.copy(this.ray.origin).applyMat4(i),P(this,ye).direction.copy(this.ray.direction).transformDirection(i);const s=n.geometry.getAttributeByName("uv"),r=n.geometry.getAttributeByName("normal"),o=n.geometry.indexBuffer?.array,a=o?o.length/3:t.array.length/9;for(let h=0;h<a;h++){if(this.setAttributeVectorAtIndex(h,0,o,t,P(this,Pe)),this.setAttributeVectorAtIndex(h,1,o,t,P(this,it)),this.setAttributeVectorAtIndex(h,2,o,t,P(this,st)),P(this,xe).copy(P(this,it)).sub(P(this,Pe)),P(this,ve).copy(P(this,st)).sub(P(this,Pe)),n.material.options.rendering.cullMode!=="none"){const f=this.getTriangleNormal().dot(P(this,ye).direction);if(f>0&&n.material.options.rendering.cullMode==="back")continue;if(f<0&&n.material.options.rendering.cullMode==="front")continue}const u=new m;if(this.rayIntersectsTriangle(u)){const c=this.getBarycentricCoordinates(u),f=u.clone().applyMat4(n.worldMatrix),p=this.ray.origin.distance(f),g={object:n,distance:p,localPoint:u,point:f,triangle:[P(this,Pe).clone(),P(this,it).clone(),P(this,st).clone()],triangleIndex:h};s&&s.array&&s.array.length&&(this.setAttributeVectorAtIndex(h,0,o,s,P(this,Tt)),this.setAttributeVectorAtIndex(h,1,o,s,P(this,Pt)),this.setAttributeVectorAtIndex(h,2,o,s,P(this,Rt)),g.uv=P(this,Tt).clone().multiplyScalar(c.x).add(P(this,Pt).clone().multiplyScalar(c.y)).add(P(this,Rt).clone().multiplyScalar(c.z))),r&&r.array&&r.array.length&&(this.setAttributeVectorAtIndex(h,0,o,r,P(this,zt)),this.setAttributeVectorAtIndex(h,1,o,r,P(this,Et)),this.setAttributeVectorAtIndex(h,2,o,r,P(this,Lt)),g.normal=P(this,zt).clone().multiplyScalar(c.x).add(P(this,Et).clone().multiplyScalar(c.y)).add(P(this,Lt).clone().multiplyScalar(c.z))),e.push(g)}}return e},"intersectMesh_fn");var En=l((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck"),Hs=l((n,e,t)=>(En(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet"),aa=l((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd"),ha=l((n,e,t,i)=>(En(n,e,"write to private field"),e.set(n,t),t),"__privateSet"),rt;const K=WebGLRenderingContext,Ei=new O,ua=class Re{static{l(this,"_GLTFScenesManager")}constructor({renderer:e,gltf:t}){aa(this,rt,void 0),e=Oe(e,"GLTFScenesManager"),this.renderer=e,this.gltf=t,ha(this,rt,new Map);const i=l(s=>[s.node,...s.children?.map(r=>[...i(r)]).flat()].flat(),"traverseChildren");this.scenesManager={node:new we,boundingBox:new Be,samplers:[],materialsTextures:[],scenes:[],meshes:[],meshesDescriptors:[],getScenesNodes:()=>this.scenesManager.scenes.map(s=>i(s)).flat()},this.createSamplers(),this.createMaterialTextures(),this.createScenes()}static getVertexAttributeParamsFromType(e){switch(e){case"VEC2":return{type:"vec2f",bufferFormat:"float32x2",size:2};case"VEC3":return{type:"vec3f",bufferFormat:"float32x3",size:3};case"VEC4":return{type:"vec4f",bufferFormat:"float32x4",size:4};case"SCALAR":default:return{type:"f32",bufferFormat:"float32",size:1}}}static getTypedArrayConstructorFromComponentType(e){switch(e){case K.BYTE:return Int8Array;case K.UNSIGNED_BYTE:return Uint8Array;case K.SHORT:return Int16Array;case K.UNSIGNED_SHORT:return Uint16Array;case K.UNSIGNED_INT:return Uint32Array;case K.FLOAT:default:return Float32Array}}static gpuPrimitiveTopologyForMode(e){switch(e){case K.TRIANGLES:return"triangle-list";case K.TRIANGLE_STRIP:return"triangle-strip";case K.LINES:return"line-list";case K.LINE_STRIP:return"line-strip";case K.POINTS:return"point-list"}}static gpuAddressModeForWrap(e){switch(e){case K.CLAMP_TO_EDGE:return"clamp-to-edge";case K.MIRRORED_REPEAT:return"mirror-repeat";default:return"repeat"}}createSamplers(){if(this.gltf.samplers)for(const[e,t]of Object.entries(this.gltf.samplers)){const i={label:"glTF sampler "+e,name:"gltfSampler"+e,addressModeU:Re.gpuAddressModeForWrap(t.wrapS),addressModeV:Re.gpuAddressModeForWrap(t.wrapT)};switch((!t.magFilter||t.magFilter===K.LINEAR)&&(i.magFilter="linear"),t.minFilter){case K.NEAREST:break;case K.LINEAR:case K.LINEAR_MIPMAP_NEAREST:i.minFilter="linear";break;case K.NEAREST_MIPMAP_LINEAR:i.mipmapFilter="linear";break;case K.LINEAR_MIPMAP_LINEAR:default:i.minFilter="linear",i.mipmapFilter="linear";break}this.scenesManager.samplers.push(new je(this.renderer,i))}else this.scenesManager.samplers.push(new je(this.renderer,{label:"Default sampler",name:"defaultSampler",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear"}))}createTexture(e,t,i){const s=(()=>{switch(i){case"baseColorTexture":case"emissiveTexture":return"bgra8unorm-srgb";case"occlusionTexture":return"r8unorm";default:return"bgra8unorm"}})(),r=new Z(this.renderer,{label:e.name?e.name+": "+i:i,name:i,format:s,visibility:["fragment"],generateMips:!0,fixedSize:{width:t.width,height:t.height}});return r.uploadSource({source:t}),r}createMaterialTextures(){if(this.scenesManager.materialsTextures=[],this.gltf.materials)for(const[e,t]of Object.entries(this.gltf.materials)){const i={material:e,texturesDescriptors:[]},s=l(r=>r.texCoord&&r.texCoord!==0?"uv"+r.texCoord:"uv","getUVAttributeName");if(this.scenesManager.materialsTextures[e]=i,t.pbrMetallicRoughness){if(t.pbrMetallicRoughness.baseColorTexture&&t.pbrMetallicRoughness.baseColorTexture.index!==void 0){const r=t.pbrMetallicRoughness.baseColorTexture.index,o=this.gltf.imagesBitmaps[this.gltf.textures[r].source],a=this.createTexture(t,o,"baseColorTexture"),h=this.gltf.textures.find(u=>u.source===r)?.sampler;i.texturesDescriptors.push({texture:a,sampler:this.scenesManager.samplers[h??0],texCoordAttributeName:s(t.pbrMetallicRoughness.baseColorTexture)})}if(t.pbrMetallicRoughness.metallicRoughnessTexture&&t.pbrMetallicRoughness.metallicRoughnessTexture.index!==void 0){const r=t.pbrMetallicRoughness.metallicRoughnessTexture.index,o=this.gltf.imagesBitmaps[this.gltf.textures[r].source],a=this.createTexture(t,o,"metallicRoughnessTexture"),h=this.gltf.textures.find(u=>u.source===r)?.sampler;i.texturesDescriptors.push({texture:a,sampler:this.scenesManager.samplers[h??0],texCoordAttributeName:s(t.pbrMetallicRoughness.metallicRoughnessTexture)})}}if(t.normalTexture&&t.normalTexture.index!==void 0){const r=t.normalTexture.index,o=this.gltf.imagesBitmaps[this.gltf.textures[r].source],a=this.createTexture(t,o,"normalTexture"),h=this.gltf.textures.find(u=>u.source===r)?.sampler;i.texturesDescriptors.push({texture:a,sampler:this.scenesManager.samplers[h??0],texCoordAttributeName:s(t.normalTexture)})}if(t.occlusionTexture&&t.occlusionTexture.index!==void 0){const r=t.occlusionTexture.index,o=this.gltf.imagesBitmaps[this.gltf.textures[r].source],a=this.createTexture(t,o,"occlusionTexture"),h=this.gltf.textures.find(u=>u.source===r)?.sampler;i.texturesDescriptors.push({texture:a,sampler:this.scenesManager.samplers[h??0],texCoordAttributeName:s(t.occlusionTexture)})}if(t.emissiveTexture&&t.emissiveTexture.index!==void 0){const r=t.emissiveTexture.index,o=this.gltf.imagesBitmaps[this.gltf.textures[r].source],a=this.createTexture(t,o,"emissiveTexture"),h=this.gltf.textures.find(u=>u.source===r)?.sampler;i.texturesDescriptors.push({texture:a,sampler:this.scenesManager.samplers[h??0],texCoordAttributeName:s(t.emissiveTexture)})}}}createNode(e,t){if(t.camera!==void 0)return;const i={name:t.name,node:new we,children:[]};e.children.push(i),i.node.parent=e.node,t.matrix?(i.node.modelMatrix.setFromArray(new Float32Array(t.matrix)),i.node.matrices.model.shouldUpdate=!1):(t.translation&&i.node.position.set(t.translation[0],t.translation[1],t.translation[2]),t.scale&&i.node.scale.set(t.scale[0],t.scale[1],t.scale[2]),t.rotation&&i.node.quaternion.setFromArray(new Float32Array(t.rotation)));const s=this.gltf.meshes[t.mesh];t.children&&t.children.forEach(r=>{const o=this.gltf.nodes[r];this.createNode(i,o)}),s&&s.primitives.forEach((r,o)=>{const a={parent:i.node,attributes:[],textures:[],parameters:{label:s.name?s.name+" "+o:"glTF mesh "+o},nodes:[]};let h=Hs(this,rt).get(r);h||(h={instances:[],nodes:[],meshDescriptor:a},Hs(this,rt).set(r,h)),h.instances.push(t),h.nodes.push(i.node)})}createScenes(){this.scenesManager.node.parent=this.renderer.scene,this.gltf.scenes.forEach(e=>{const t={name:e.name,children:[],node:new we};t.node.parent=this.scenesManager.node,this.scenesManager.scenes.push(t),e.nodes.forEach(i=>{const s=this.gltf.nodes[i];this.createNode(t,s)})}),this.scenesManager.node.updateMatrixStack();for(const[e,t]of Hs(this,rt)){const{instances:i,nodes:s,meshDescriptor:r}=t,o=i.length;r.nodes=s,this.scenesManager.meshesDescriptors.push(r);const a=new Be,h=[];let u=null,d=null,c=0;for(const[C,R]of Object.entries(e.attributes)){const B=this.gltf.accessors[R],T=Re.getTypedArrayConstructorFromComponentType(B.componentType),S=this.gltf.bufferViews[B.bufferView],w=C==="TEXCOORD_0"?"uv":C.replace("_","").replace("TEXCOORD","uv").toLowerCase(),z=S.byteStride||0,L=B.byteOffset||0;z&&L&&L<z?c=Math.max(L,c):c=0,w==="position"&&(a.min.min(new m(B.min[0],B.min[1],B.min[2])),a.max.max(new m(B.max[0],B.max[1],B.max[2])),d=S);const E=Re.getVertexAttributeParamsFromType(B.type),$={name:w,...E,array:new T(this.gltf.arrayBuffers[S.buffer],B.byteOffset+S.byteOffset,B.count*E.size)};h.push($),r.attributes.push({name:$.name,type:$.type})}if(c>0){const C=Object.values(e.attributes).map(R=>this.gltf.accessors[R].bufferView);if(C.every(R=>R===C[0]))u=new Float32Array(this.gltf.arrayBuffers[d.buffer],d.byteOffset,Math.ceil(d.byteLength/4)*4/Float32Array.BYTES_PER_ELEMENT);else{let R=0;const B={},T=Object.values(e.attributes).reduce((S,w)=>{const z=this.gltf.accessors[w],L=Re.getVertexAttributeParamsFromType(z.type).size;return B[z.bufferView]||(B[z.bufferView]=0),B[z.bufferView]=Math.max(B[z.bufferView],z.byteOffset+L*Float32Array.BYTES_PER_ELEMENT),R+=L*Float32Array.BYTES_PER_ELEMENT,S+z.count*L},0);u=new Float32Array(Math.ceil(T/4)*4),Object.values(e.attributes).forEach(S=>{const w=this.gltf.accessors[S],z=this.gltf.bufferViews[w.bufferView],L=Re.getVertexAttributeParamsFromType(w.type).size;for(let E=0;E<w.count;E++){const $=w.byteOffset/Float32Array.BYTES_PER_ELEMENT+E*R/Float32Array.BYTES_PER_ELEMENT;u.subarray($,$+L).set(new Float32Array(this.gltf.arrayBuffers[z.buffer],z.byteOffset+w.byteOffset+E*B[w.bufferView],L))}})}}else{const C=["position","uv","normal"];h.sort((R,B)=>{let T=C.findIndex(w=>w===R.name);T=T===-1?1/0:T;let S=C.findIndex(w=>w===B.name);return S=S===-1?1/0:S,T-S})}const f={instancesCount:o,topology:Re.gpuPrimitiveTopologyForMode(e.mode),vertexBuffers:[{name:"attributes",stepMode:"vertex",attributes:h,...u&&{array:u}}]},p="indices"in e,g=p?ut:Vi;if(r.parameters.geometry=new g(f),r.parameters.geometry.boundingBox=a,p){const C=this.gltf.accessors[e.indices],R=this.gltf.bufferViews[C.bufferView],B=Re.getTypedArrayConstructorFromComponentType(C.componentType),T=C.byteOffset+R.byteOffset,S=this.gltf.arrayBuffers[R.buffer],w=Math.min((S.byteLength-T)/B.BYTES_PER_ELEMENT,Math.ceil(C.count/4)*4),z=B.name==="Uint8Array"?Uint16Array.from(new B(S,T,w)):new B(S,T,w);r.parameters.geometry.setIndexBuffer({bufferFormat:B.name==="Uint32Array"?"uint32":"uint16",array:z})}const y=this.scenesManager.materialsTextures[e.material];r.parameters.samplers=[],r.parameters.textures=[],y?.texturesDescriptors.forEach(C=>{r.textures.push({texture:C.texture.options.name,sampler:C.sampler.name,texCoordAttributeName:C.texCoordAttributeName}),r.parameters.samplers.find(B=>B.uuid===C.sampler.uuid)||r.parameters.samplers.push(C.sampler),r.parameters.textures.push(C.texture)});const x=this.gltf.materials&&this.gltf.materials[e.material]||{};r.parameters.cullMode=x.doubleSided?"none":"back",(x.alphaMode==="BLEND"||x.extensions&&x.extensions.KHR_materials_transmission)&&(r.parameters.transparent=!0,r.parameters.targets=[{blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"one",dstFactor:"one"}}}]);const b={baseColorFactor:{type:"vec4f",value:x.pbrMetallicRoughness?.baseColorFactor||[1,1,1,1]},alphaCutoff:{type:"f32",value:x.alphaCutoff!==void 0?x.alphaCutoff:x.alphaMode==="MASK"?.5:0},metallicFactor:{type:"f32",value:x.pbrMetallicRoughness?.metallicFactor===void 0?1:x.pbrMetallicRoughness.metallicFactor},roughnessFactor:{type:"f32",value:x.pbrMetallicRoughness?.roughnessFactor===void 0?1:x.pbrMetallicRoughness.roughnessFactor},normalMapScale:{type:"f32",value:x.normalTexture?.scale===void 0?1:x.normalTexture.scale},occlusionStrength:{type:"f32",value:x.occlusionTexture?.strength===void 0?1:x.occlusionTexture.strength},emissiveFactor:{type:"vec3f",value:x.emissiveFactor!==void 0?x.emissiveFactor:[1,1,1]}};if(Object.keys(b).length&&(r.parameters.uniforms={material:{visibility:["vertex","fragment"],struct:b}}),o>1){const C=new Float32Array(o*16),R=new Float32Array(o*16);for(let B=0;B<o;++B)C.set(s[B].worldMatrix.elements,B*16),Ei.copy(s[B].worldMatrix).invert().transpose(),R.set(Ei.elements,B*16);r.parameters.storages={instances:{visibility:["vertex","fragment"],struct:{modelMatrix:{type:"array<mat4x4f>",value:C},normalMatrix:{type:"array<mat4x4f>",value:R}}}}}for(let C=0;C<s.length;C++){const B=a.clone().applyMat4(r.nodes[C].worldMatrix);this.scenesManager.boundingBox.min.min(B.min),this.scenesManager.boundingBox.max.max(B.max)}}}addMeshes(e=t=>{}){return this.scenesManager.node.updateMatrixStack(),this.scenesManager.meshesDescriptors.map(t=>{if(t.parameters.geometry){e(t);const i=t.parameters.geometry.instancesCount>1&&t.parameters.castShadows;i&&(t.parameters.castShadows=!1);const s=new jr(this.renderer,{...t.parameters});if(t.nodes.length>1){const r=s.updateWorldMatrix.bind(s);s.updateWorldMatrix=()=>{r(),t.nodes.forEach((o,a)=>{s.storages.instances.modelMatrix.value.set(o.worldMatrix.elements,a*16),Ei.copy(o.worldMatrix).invert().transpose(),s.storages.instances.normalMatrix.value.set(Ei.elements,a*16)}),s.storages.instances.modelMatrix.shouldUpdate=!0,s.storages.instances.normalMatrix.shouldUpdate=!0}}if(i){const r=s.material.inputsBindings.get("instances");this.renderer.shadowCastingLights.forEach(o=>{o.shadow.isActive&&o.shadow.addShadowCastingMesh(s,{bindings:[r]})})}return s.parent=t.parent,this.scenesManager.meshes.push(s),s}})}destroy(){this.scenesManager.meshes.forEach(t=>t.remove()),this.scenesManager.meshes=[],this.scenesManager.getScenesNodes().forEach(t=>{t.destroy()}),this.scenesManager.node.destroy()}};rt=new WeakMap;let la=ua;const da=l((n,e={})=>{const t=n.textures.find(A=>A.texture==="baseColorTexture"),i=n.textures.find(A=>A.texture==="normalTexture"),s=n.textures.find(A=>A.texture==="emissiveTexture"),r=n.textures.find(A=>A.texture==="occlusionTexture"),o=n.textures.find(A=>A.texture==="metallicRoughnessTexture"),a=n.attributes.filter(A=>A.name!=="position"),h=a.map((A,va)=>`@location(${va}) ${A.name}: ${A.type},`).join(`
	`);let u=`
    let worldPos = matrices.model * vec4(attributes.position, 1.0);
    vsOutput.position = camera.projection * camera.view * worldPos;
    vsOutput.worldPosition = worldPos.xyz / worldPos.w;
    vsOutput.viewDirection = camera.position - vsOutput.worldPosition.xyz;
  `,d=a.find(A=>A.name==="normal")?"vsOutput.normal = getWorldNormal(attributes.normal);":"";n.parameters.storages&&n.parameters.storages.instances&&(u=`
      let worldPos: vec4f = instances[attributes.instanceIndex].modelMatrix * vec4f(attributes.position, 1.0);
      vsOutput.position = camera.projection * camera.view * worldPos;
      vsOutput.worldPosition = worldPos.xyz;
      vsOutput.viewDirection = camera.position - vsOutput.worldPosition;
      `,d="vsOutput.normal = normalize((instances[attributes.instanceIndex].normalMatrix * vec4(attributes.normal, 0.0)).xyz);");const c=a.filter(A=>A.name!=="normal").map(A=>`vsOutput.${A.name} = attributes.${A.name};`).join(`
	`);let f=`
      @builtin(position) position: vec4f,
      @location(${a.length}) viewDirection: vec3f,
      @location(${a.length+1}) worldPosition: vec3f,
      ${h}
  `,p="";const g=a.find(A=>A.name==="tangent"),y=!!(i&&g);y&&(f+=`
      @location(${a.length+2}) bitangent: vec3f,
      `,p=`
        vsOutput.tangent = normalize(matrices.model * attributes.tangent);
        vsOutput.bitangent = cross(vsOutput.normal, vsOutput.tangent.xyz) * attributes.tangent.w;
      `);const x=`
    struct VSOutput {
      ${f}
    };`,b=`
    struct VSOutput {
      @builtin(front_facing) frontFacing: bool,
      ${f}
    };`,C=`
    ${x}
    
    @vertex fn main(
      attributes: Attributes,
    ) -> VSOutput {
      var vsOutput: VSOutput;
    
      ${u}
      ${d}
      ${c}
      
      ${p}

      return vsOutput;
    }
  `,R="var color: vec4f = vec4();",B=`
      return color;
  `,T=n.attributes.find(A=>A.name==="color0");let S=T?T.type==="vec3f"?"var baseColor: vec4f = vec4(fsInput.color0, 1.0) * material.baseColorFactor;":"var baseColor: vec4f = fsInput.color0 * material.baseColorFactor;":"var baseColor: vec4f = material.baseColorFactor;";t&&(S=`
      var baseColor: vec4f = textureSample(baseColorTexture, ${t.sampler}, fsInput.${t.texCoordAttributeName}) * material.baseColorFactor;
      
      if (baseColor.a < material.alphaCutoff) {
        discard;
      }
    `),S+=`
      color = baseColor;
  `;let w=n.attributes.find(A=>A.name==="normal")?`
      let faceDirection = select(-1.0, 1.0, fsInput.frontFacing);
      let geometryNormal: vec3f = normalize(faceDirection * fsInput.normal);
    `:"let geometryNormal: vec3f = normalize(vec3(0.0, 0.0, 1.0));";y?w+=`
      let tbn = mat3x3<f32>(normalize(fsInput.tangent.xyz), normalize(fsInput.bitangent), geometryNormal);
      let normalMap = textureSample(normalTexture, ${i.sampler}, fsInput.${i.texCoordAttributeName}).rgb;
      let normal = normalize(tbn * (2.0 * normalMap - vec3(material.normalMapScale, material.normalMapScale, 1.0)));
    `:w+=`
      let normal = geometryNormal;
    `;let z=`
      var metallic = material.metallicFactor;
      var roughness = material.roughnessFactor;
  `;o&&(z+=`
      let metallicRoughness = textureSample(metallicRoughnessTexture, ${o.sampler}, fsInput.${o.texCoordAttributeName});
      
      metallic = clamp(metallic * metallicRoughness.b, 0.0, 1.0);
      roughness = clamp(roughness * metallicRoughness.g, 0.0, 1.0);
    `);const L=`
      let f0: vec3f = mix(vec3(0.04), color.rgb, vec3(metallic));
  `;let E=`
      var emissive: vec3f = vec3(0.0);
      var occlusion: f32 = 1.0;
  `;s&&(E+=`
      emissive = textureSample(emissiveTexture, ${s.sampler}, fsInput.${s.texCoordAttributeName}).rgb;
      
      emissive *= material.emissiveFactor;
      `,r&&(E+=`
      occlusion = textureSample(occlusionTexture, ${r.sampler}, fsInput.${r.texCoordAttributeName}).r;
      `)),E+=`
      occlusion = 1.0 + material.occlusionStrength * (occlusion - 1.0);
  `;let{shadingModel:$}=e;$||($="PBR");let{chunks:F}=e||{};const{iblParameters:Q}=e||{},{environmentMap:H}=Q||{};H&&$==="IBL"?(n.parameters.uniforms={...n.parameters.uniforms,ibl:{struct:{envRotation:{type:"mat3x3f",value:H.rotation},diffuseStrength:{type:"f32",value:Q?.diffuseStrength??.5},specularStrength:{type:"f32",value:Q?.specularStrength??.5}}}},n.parameters.textures=[...n.parameters.textures,H.lutTexture,H.diffuseTexture,H.specularTexture],n.parameters.samplers=[...n.parameters.samplers,H.sampler]):$==="IBL"&&(_("IBL shading requested but the environment map missing. Defaulting to PBR shading."),$="PBR");const se={toneMapping:"khronos",receiveShadows:!!n.parameters.receiveShadows,useOcclusion:!0},k=(()=>{switch($){case"Lambert":default:return an(se);case"Phong":return un(se);case"PBR":return ln(se);case"IBL":return cn(se)}})(),N="",X="";F?(F.additionalFragmentHead?F.additionalFragmentHead=k+F.additionalFragmentHead:F.additionalFragmentHead=k,F.preliminaryColorContribution?F.preliminaryColorContribution=N+F.preliminaryColorContribution:F.preliminaryColorContribution=N,F.additionalColorContribution?F.additionalColorContribution=X+F.additionalColorContribution:F.additionalColorContribution=X):F={additionalFragmentHead:k,preliminaryColorContribution:N,additionalColorContribution:X};const te=(()=>{switch($){case"Lambert":default:return`
      color = vec4(
        getLambert(
          normal,
          worldPosition,
          color.rgb,
          occlusion
        ),
        color.a
      );`;case"Phong":return`
      color = vec4(
        getPhong(
          normal,
          worldPosition,
          color.rgb,
          viewDirection,
          f0, // specular color
          metallic * (1.0 - roughness) + (1.0 - metallic) * 0.04, // specular strength
          (1.0 - roughness) * 30.0, // TODO shininess
          occlusion
        ),
        color.a
      );`;case"PBR":return`
      color = vec4(
        getPBR(
          normal,
          worldPosition,
          color.rgb,
          viewDirection,
          f0,
          metallic,
          roughness,
          occlusion
        ),
        color.a
      );`;case"IBL":return`
      color = vec4(
        getIBL(
          normal,
          worldPosition,
          color.rgb,
          viewDirection,
          f0,
          metallic,
          roughness,
          ${H.sampler.name},
          ${H.lutTexture.options.name},
          ${H.specularTexture.options.name},
          ${H.diffuseTexture.options.name},
          occlusion
        ),
        color.a
      );`}})(),De=`  
    ${F.additionalFragmentHead}
  
    ${b}
  
    @fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {       
      ${R}
      ${S}
      
      let worldPosition: vec3f = fsInput.worldPosition;
      let viewDirection: vec3f = fsInput.viewDirection;

      ${w}
      ${z}  
      
      // user defined preliminary color contribution
      ${F.preliminaryColorContribution}
        
      ${L}
      ${E}
      
      ${te}
      
    color = vec4(color.rgb + emissive, color.a);
  
      
      // user defined additional color contribution
      ${F.additionalColorContribution}
      
      ${B}
    }
  `;return{vertex:{code:C,entryPoint:"main"},fragment:{code:De,entryPoint:"main"}}},"buildShaders"),Ln=WebGLRenderingContext,ca=1179937895,Xs={JSON:1313821514,BIN:5130562},pa=[0,0,0],fa=[0,0,0,1],ma=[1,1,1],ga=typeof window<"u"&&new RegExp(`^${window.location.protocol}`,"i")||RegExp("^(http|https):","i"),ya=/^data:/;class Li{static{l(this,"GLTFLoader")}constructor(){this.gltf=null}static resolveUri(e,t){return e.match(ga)||e.match(ya)?e:t+e}async loadFromUrl(e){const t=e.lastIndexOf("/"),i=t!==0?e.substring(0,t+1):"",s=await fetch(e);if(e.endsWith(".gltf"))return this.loadFromJson(await s.json(),i);if(e.endsWith(".glb"))return this.loadFromBinary(await s.arrayBuffer(),i);throw new Error("Unrecognized file extension")}async loadFromJsonBase(e,t,i=null){if(!t)throw new Error("baseUrl must be specified.");if(!e.asset)throw new Error("Missing asset description.");if(e.asset.minVersion!=="2.0"&&e.asset.version!=="2.0")throw new Error("Incompatible asset version.");for(const o of e.accessors)o.byteOffset=o.byteOffset??0,o.normalized=o.normalized??!1;for(const o of e.bufferViews)o.byteOffset=o.byteOffset??0;for(const o of e.nodes)o.matrix||(o.rotation=o.rotation??fa,o.scale=o.scale??ma,o.translation=o.translation??pa);if(e.samplers)for(const o of e.samplers)o.wrapS=o.wrapS??Ln.REPEAT,o.wrapT=o.wrapT??Ln.REPEAT;const s=[];if(i)s.push(Promise.resolve(i));else for(const o in e.buffers){const a=e.buffers[o],h=Li.resolveUri(a.uri,t);s[o]=fetch(h).then(u=>u.arrayBuffer())}const r=[];for(let o=0;o<e.images?.length;++o){const a=e.images[o];if(a.uri)r[o]=fetch(Li.resolveUri(a.uri,t)).then(async h=>createImageBitmap(await h.blob()));else{const h=e.bufferViews[a.bufferView];r[o]=s[h.buffer].then(u=>{const d=new Blob([new Uint8Array(u,h.byteOffset,h.byteLength)],{type:a.mimeType});return createImageBitmap(d)})}}return{...e,arrayBuffers:await Promise.all(s),imagesBitmaps:await Promise.all(r)}}async loadFromBinary(e,t){const i=new DataView(e,0,12),s=i.getUint32(0,!0),r=i.getUint32(4,!0),o=i.getUint32(8,!0);if(s!==ca)throw new Error("Invalid magic string in binary header.");if(r!==2)throw new Error("Incompatible version in binary header.");const a={};let h=12;for(;h<o;){const c=new DataView(e,h,8),f=c.getUint32(0,!0),p=c.getUint32(4,!0);a[p]=e.slice(h+8,h+8+f),h+=f+8}if(!a[Xs.JSON])throw new Error("File contained no json chunk.");const d=new TextDecoder("utf-8").decode(a[Xs.JSON]);return this.loadFromJson(JSON.parse(d),t,a[Xs.BIN])}async loadFromJson(e,t,i=null){return this.gltf=await this.loadFromJsonBase(e,t,i),this.gltf}}const xa=l(n=>{const{scene:e}=n;if(!e)return;const t=[];e.computePassEntries.forEach(i=>{t.push({command:"Render ComputePass",content:i.options.label}),i.material.bindGroups.forEach(s=>{s.bufferBindings.forEach(r=>{r.shouldCopyResult&&t.push({command:"Copy buffer to buffer",source:`${r.name} buffer`,destination:`${r.name} result buffer`})})})});for(const i in e.renderPassEntries){let s=0;e.renderPassEntries[i].forEach(r=>{if(!e.getRenderPassEntryLength(r))return;const o=r.renderPass.options.useColorAttachments?r.renderPass.options.colorAttachments.length===0&&r.renderPass.options.useDepth?`${r.renderTexture.options.label} depth pass`:r.renderPass.options.colorAttachments.length>1?`${r.renderTexture.options.label} multiple targets`:r.renderTexture?`${r.renderTexture.options.label}`:"Context current texture":void 0;let a=r.renderPass.options.label;const h={loadOp:r.renderPass.options.useColorAttachments?i==="screen"&&s>0?"load":r.renderPass.options.loadOp:void 0,depthLoadOp:void 0,sampleCount:r.renderPass.options.sampleCount,...r.renderPass.options.qualityRatio!==1&&{qualityRatio:r.renderPass.options.qualityRatio}};if(r.renderPass.options.useDepth&&(h.depthLoadOp=r.renderPass.options.depthLoadOp),s++,r.element)r.element.type==="ShaderPass"&&!(r.element.inputTarget||r.element.outputTarget)&&(t.push({command:"Copy texture to texture",source:o,destination:`${r.element.options.label} renderTexture`}),h.loadOp="clear"),a+=" "+JSON.stringify(h),t.push({command:`Render ${r.element.type}`,source:r.element.options.label,destination:o,descriptor:a}),r.element.type==="ShaderPass"&&!r.element.outputTarget&&r.element.options.copyOutputToRenderTexture?t.push({command:"Copy texture to texture",source:o,destination:`${r.element.options.label} renderTexture`}):r.element.type==="PingPongPlane"&&t.push({command:"Copy texture to texture",source:o,destination:`${r.element.renderTexture.options.label}`});else if(r.stack){a+=" "+JSON.stringify(h);for(const u in r.stack)for(const d in r.stack[u])r.stack[u][d].length&&t.push({command:`Render stack (${u} ${d} objects)`,source:r.stack[u][d],destination:o,descriptor:a})}})}console.table(t)},"logSceneCommands");v.AmbientLight=so,v.BindGroup=Ft,v.Binding=At,v.Box3=Be,v.BoxGeometry=ia,v.Buffer=Fe,v.BufferBinding=me,v.Camera=nr,v.ComputeMaterial=hr,v.ComputePass=Xt,v.ComputePipelineEntry=ss,v.DOMElement=ns,v.DOMFrustum=cr,v.DOMMesh=gn,v.DOMObject3D=fn,v.DOMTexture=ke,v.DirectionalLight=po,v.EnvironmentMap=ta,v.FullscreenPlane=ts,v.GLTFLoader=Li,v.GLTFScenesManager=la,v.GPUCameraRenderer=ls,v.GPUCurtains=Yo,v.GPUCurtainsRenderer=mi,v.GPUDeviceManager=Zr,v.GPURenderer=hs,v.Geometry=Vi,v.HDRLoader=Rn,v.IndexedGeometry=ut,v.IndirectBuffer=Qr,v.Mat3=Ce,v.Mat4=O,v.Material=Ii,v.Mesh=jr,v.Object3D=we,v.OrbitControls=Ho,v.PingPongPlane=ra,v.PipelineEntry=qi,v.PipelineManager=qr,v.Plane=yn,v.PlaneGeometry=Ni,v.PointLight=xo,v.ProjectedObject3D=is,v.Quat=pe,v.Raycaster=oa,v.RenderBundle=Oo,v.RenderMaterial=Ki,v.RenderPass=Jt,v.RenderPipelineEntry=Ye,v.RenderTarget=ji,v.Sampler=je,v.SamplerBinding=sr,v.Scene=Yr,v.ShaderPass=$o,v.SphereGeometry=sa,v.Texture=Z,v.TextureBindGroup=ki,v.TextureBinding=Ui,v.Vec2=G,v.Vec3=m,v.WritableBufferBinding=$i,v.applyDirectionalShadows=ct,v.applyPointShadows=pt,v.buildShaders=da,v.getDefaultPointShadowDepthFs=Sr,v.getDefaultPointShadowDepthVs=Cr,v.getDefaultShadowDepthVs=wr,v.getIBL=cn,v.getIBLIndirect=dn,v.getLambert=an,v.getLambertDirect=on,v.getPBR=ln,v.getPBRDirect=bs,v.getPCFDirectionalShadows=Mr,v.getPCFPointShadowContribution=Tr,v.getPCFPointShadows=Pr,v.getPCFShadowContribution=Br,v.getPCFShadows=dt,v.getPhong=un,v.getPhongDirect=hn,v.lambertUtils=pi,v.logSceneCommands=xa,v.pbrUtils=vs,v.toneMappingUtils=wt});
//# sourceMappingURL=gpu-curtains.umd.min.js.map
