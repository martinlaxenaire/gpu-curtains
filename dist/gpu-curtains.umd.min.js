var kh=Object.defineProperty;var c=(C,O)=>kh(C,"name",{value:O,configurable:!0});(function(C,O){typeof exports=="object"&&typeof module<"u"?O(exports):typeof define=="function"&&define.amd?define(["exports"],O):(C=typeof globalThis<"u"?globalThis:C||self,O(C.window=C.window||{}))})(this,function(C){"use strict";const O=c(()=>"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,n=>{const e=Math.random()*16|0;return(n==="x"?e:e&3|8).toString(16).toUpperCase()}),"generateUUID"),vt=c(n=>n.replace(/(?:^\w|[A-Z]|\b\w)/g,(e,t)=>t===0?e.toLowerCase():e.toUpperCase()).replace(/\s+/g,""),"toCamelCase"),bt=c(n=>{const e=vt(n);return e.charAt(0).toUpperCase()+e.slice(1)},"toKebabCase");let as=0;const L=c(n=>{as>100||(console.warn(as===100?"GPUCurtains: too many warnings thrown, stop logging.":n),as++)},"throwWarning"),te=c(n=>{throw new Error(n)},"throwError");class re{static{c(this,"Quat")}constructor(e=new Float32Array([0,0,0,1]),t="XYZ"){this.type="Quat",this.elements=e,this.axisOrder=t}setFromArray(e=new Float32Array([0,0,0,1])){return this.elements[0]=e[0],this.elements[1]=e[1],this.elements[2]=e[2],this.elements[3]=e[3],this}setAxisOrder(e="XYZ"){switch(e=e.toUpperCase(),e){case"XYZ":case"YXZ":case"ZXY":case"ZYX":case"YZX":case"XZY":this.axisOrder=e;break;default:this.axisOrder="XYZ"}return this}copy(e=new re){return this.elements.set(e.elements),this.axisOrder=e.axisOrder,this}clone(){return new re().copy(this)}equals(e=new re){return this.elements[0]===e.elements[0]&&this.elements[1]===e.elements[1]&&this.elements[2]===e.elements[2]&&this.elements[3]===e.elements[3]&&this.axisOrder===e.axisOrder}setFromVec3(e){const t=e.x*.5,i=e.y*.5,s=e.z*.5,r=Math.cos(t),a=Math.cos(i),o=Math.cos(s),h=Math.sin(t),l=Math.sin(i),u=Math.sin(s);return this.axisOrder==="XYZ"?(this.elements[0]=h*a*o+r*l*u,this.elements[1]=r*l*o-h*a*u,this.elements[2]=r*a*u+h*l*o,this.elements[3]=r*a*o-h*l*u):this.axisOrder==="YXZ"?(this.elements[0]=h*a*o+r*l*u,this.elements[1]=r*l*o-h*a*u,this.elements[2]=r*a*u-h*l*o,this.elements[3]=r*a*o+h*l*u):this.axisOrder==="ZXY"?(this.elements[0]=h*a*o-r*l*u,this.elements[1]=r*l*o+h*a*u,this.elements[2]=r*a*u+h*l*o,this.elements[3]=r*a*o-h*l*u):this.axisOrder==="ZYX"?(this.elements[0]=h*a*o-r*l*u,this.elements[1]=r*l*o+h*a*u,this.elements[2]=r*a*u-h*l*o,this.elements[3]=r*a*o+h*l*u):this.axisOrder==="YZX"?(this.elements[0]=h*a*o+r*l*u,this.elements[1]=r*l*o+h*a*u,this.elements[2]=r*a*u-h*l*o,this.elements[3]=r*a*o-h*l*u):this.axisOrder==="XZY"&&(this.elements[0]=h*a*o-r*l*u,this.elements[1]=r*l*o-h*a*u,this.elements[2]=r*a*u+h*l*o,this.elements[3]=r*a*o+h*l*u),this}setFromAxisAngle(e,t=0){const i=t/2,s=Math.sin(i);return this.elements[0]=e.x*s,this.elements[1]=e.y*s,this.elements[2]=e.z*s,this.elements[3]=Math.cos(i),this}setFromRotationMatrix(e){const t=e.elements,i=t[0],s=t[4],r=t[8],a=t[1],o=t[5],h=t[9],l=t[2],u=t[6],d=t[10],f=i+o+d;if(f>0){const p=.5/Math.sqrt(f+1);this.elements[3]=.25/p,this.elements[0]=(u-h)*p,this.elements[1]=(r-l)*p,this.elements[2]=(a-s)*p}else if(i>o&&i>d){const p=2*Math.sqrt(1+i-o-d);this.elements[3]=(u-h)/p,this.elements[0]=.25*p,this.elements[1]=(s+a)/p,this.elements[2]=(r+l)/p}else if(o>d){const p=2*Math.sqrt(1+o-i-d);this.elements[3]=(r-l)/p,this.elements[0]=(s+a)/p,this.elements[1]=.25*p,this.elements[2]=(h+u)/p}else{const p=2*Math.sqrt(1+d-i-o);this.elements[3]=(a-s)/p,this.elements[0]=(r+l)/p,this.elements[1]=(h+u)/p,this.elements[2]=.25*p}return this}lengthSq(){return this.elements[0]*this.elements[0]+this.elements[1]*this.elements[1]+this.elements[2]*this.elements[2]+this.elements[3]*this.elements[3]}length(){return Math.sqrt(this.lengthSq())}normalize(){let e=this.length();return e===0?(this.elements[0]=0,this.elements[1]=0,this.elements[2]=0,this.elements[3]=1):(e=1/e,this.elements[0]=this.elements[0]*e,this.elements[1]=this.elements[1]*e,this.elements[2]=this.elements[2]*e,this.elements[3]=this.elements[3]*e),this}slerp(e=new re,t=0){if(t===0)return this;if(t===1)return this.copy(e);const i=this.elements[0],s=this.elements[1],r=this.elements[2],a=this.elements[3];let o=a*e.elements[3]+i*e.elements[0]+s*e.elements[1]+r*e.elements[2];if(o<0?(this.elements[3]=-e.elements[3],this.elements[0]=-e.elements[0],this.elements[1]=-e.elements[1],this.elements[2]=-e.elements[2],o=-o):this.copy(e),o>=1)return this.elements[3]=a,this.elements[0]=i,this.elements[1]=s,this.elements[2]=r,this;const h=1-o*o;if(h<=Number.EPSILON){const p=1-t;return this.elements[3]=p*a+t*this.elements[3],this.elements[0]=p*i+t*this.elements[0],this.elements[1]=p*s+t*this.elements[1],this.elements[2]=p*r+t*this.elements[2],this.normalize(),this}const l=Math.sqrt(h),u=Math.atan2(l,o),d=Math.sin((1-t)*u)/l,f=Math.sin(t*u)/l;return this.elements[3]=a*d+this.elements[3]*f,this.elements[0]=i*d+this.elements[0]*f,this.elements[1]=s*d+this.elements[1]*f,this.elements[2]=r*d+this.elements[2]*f,this}}class y{static{c(this,"Vec3")}constructor(e=0,t=e,i=e){this.type="Vec3",this._x=e,this._y=t,this._z=i}get x(){return this._x}set x(e){const t=e!==this._x;this._x=e,t&&this._onChangeCallback&&this._onChangeCallback()}get y(){return this._y}set y(e){const t=e!==this._y;this._y=e,t&&this._onChangeCallback&&this._onChangeCallback()}get z(){return this._z}set z(e){const t=e!==this._z;this._z=e,t&&this._onChangeCallback&&this._onChangeCallback()}onChange(e){return e&&(this._onChangeCallback=e),this}set(e=0,t=e,i=e){return this.x=e,this.y=t,this.z=i,this}add(e=new y){return this.x+=e.x,this.y+=e.y,this.z+=e.z,this}addScalar(e=0){return this.x+=e,this.y+=e,this.z+=e,this}sub(e=new y){return this.x-=e.x,this.y-=e.y,this.z-=e.z,this}subScalar(e=0){return this.x-=e,this.y-=e,this.z-=e,this}multiply(e=new y(1)){return this.x*=e.x,this.y*=e.y,this.z*=e.z,this}multiplyScalar(e=1){return this.x*=e,this.y*=e,this.z*=e,this}divide(e=new y(1)){return this.x/=e.x,this.y/=e.y,this.z/=e.z,this}divideScalar(e=1){return this.x/=e,this.y/=e,this.z/=e,this}copy(e=new y){return this.x=e.x,this.y=e.y,this.z=e.z,this}clone(){return new y(this.x,this.y,this.z)}max(e=new y){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this.z=Math.max(this.z,e.z),this}min(e=new y){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this.z=Math.min(this.z,e.z),this}clamp(e=new y,t=new y){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this.z=Math.max(e.z,Math.min(t.z,this.z)),this}equals(e=new y){return this.x===e.x&&this.y===e.y&&this.z===e.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.lengthSq())}distance(e=new y){return Math.hypot(e.x-this.x,e.y-this.y,e.z-this.z)}normalize(){let e=this.lengthSq();return e>0&&(e=1/Math.sqrt(e)),this.x*=e,this.y*=e,this.z*=e,this}dot(e=new y){return this.x*e.x+this.y*e.y+this.z*e.z}cross(e=new y){return this.crossVectors(this,e)}crossVectors(e=new y,t=new y){const i=e.x,s=e.y,r=e.z,a=t.x,o=t.y,h=t.z;return this.x=s*h-r*o,this.y=r*a-i*h,this.z=i*o-s*a,this}lerp(e=new y,t=1){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this.z+=(e.z-this.z)*t,this}applyMat4(e){const t=this._x,i=this._y,s=this._z,r=e.elements;let a=r[3]*t+r[7]*i+r[11]*s+r[15];return a=a||1,this.x=(r[0]*t+r[4]*i+r[8]*s+r[12])/a,this.y=(r[1]*t+r[5]*i+r[9]*s+r[13])/a,this.z=(r[2]*t+r[6]*i+r[10]*s+r[14])/a,this}setFromMatrixPosition(e){const t=e.elements;return this.x=t[12],this.y=t[13],this.z=t[14],this}applyQuat(e=new re){const t=this.x,i=this.y,s=this.z,r=e.elements[0],a=e.elements[1],o=e.elements[2],h=e.elements[3],l=2*(a*s-o*i),u=2*(o*t-r*s),d=2*(r*i-a*t);return this.x=t+h*l+a*d-o*u,this.y=i+h*u+o*l-r*d,this.z=s+h*d+r*u-a*l,this}applyAxisAngle(e=new y,t=0,i=new re){return this.applyQuat(i.setFromAxisAngle(e,t))}transformDirection(e){const t=this.x,i=this.y,s=this.z,r=e.elements;return this.x=r[0]*t+r[4]*i+r[8]*s,this.y=r[1]*t+r[5]*i+r[9]*s,this.z=r[2]*t+r[6]*i+r[10]*s,this.normalize()}project(e){return this.applyMat4(e.viewMatrix).applyMat4(e.projectionMatrix),this}unproject(e){return this.applyMat4(e.projectionMatrix.getInverse()).applyMat4(e.modelMatrix),this}}const J=new y,we=new y,I=new y;class D{static{c(this,"Mat4")}constructor(e=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1])){this.type="Mat4",this.elements=e}set(e,t,i,s,r,a,o,h,l,u,d,f,p,m,g,v){const x=this.elements;return x[0]=e,x[1]=t,x[2]=i,x[3]=s,x[4]=r,x[5]=a,x[6]=o,x[7]=h,x[8]=l,x[9]=u,x[10]=d,x[11]=f,x[12]=p,x[13]=m,x[14]=g,x[15]=v,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}setFromArray(e=new Float32Array([1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1]),t=0){for(let i=0;i<this.elements.length;i++)this.elements[i]=e[i+t];return this}copy(e=new D){const t=e.elements;return this.elements[0]=t[0],this.elements[1]=t[1],this.elements[2]=t[2],this.elements[3]=t[3],this.elements[4]=t[4],this.elements[5]=t[5],this.elements[6]=t[6],this.elements[7]=t[7],this.elements[8]=t[8],this.elements[9]=t[9],this.elements[10]=t[10],this.elements[11]=t[11],this.elements[12]=t[12],this.elements[13]=t[13],this.elements[14]=t[14],this.elements[15]=t[15],this}clone(){return new D().copy(this)}multiply(e=new D){return this.multiplyMatrices(this,e)}premultiply(e=new D){return this.multiplyMatrices(e,this)}multiplyMatrices(e=new D,t=new D){const i=e.elements,s=t.elements,r=this.elements,a=i[0],o=i[4],h=i[8],l=i[12],u=i[1],d=i[5],f=i[9],p=i[13],m=i[2],g=i[6],v=i[10],x=i[14],w=i[3],T=i[7],b=i[11],B=i[15],M=s[0],S=s[4],_=s[8],E=s[12],A=s[1],H=s[5],ve=s[9],ee=s[13],be=s[2],ue=s[6],U=s[10],N=s[14],Y=s[3],K=s[7],ie=s[11],de=s[15];return r[0]=a*M+o*A+h*be+l*Y,r[4]=a*S+o*H+h*ue+l*K,r[8]=a*_+o*ve+h*U+l*ie,r[12]=a*E+o*ee+h*N+l*de,r[1]=u*M+d*A+f*be+p*Y,r[5]=u*S+d*H+f*ue+p*K,r[9]=u*_+d*ve+f*U+p*ie,r[13]=u*E+d*ee+f*N+p*de,r[2]=m*M+g*A+v*be+x*Y,r[6]=m*S+g*H+v*ue+x*K,r[10]=m*_+g*ve+v*U+x*ie,r[14]=m*E+g*ee+v*N+x*de,r[3]=w*M+T*A+b*be+B*Y,r[7]=w*S+T*H+b*ue+B*K,r[11]=w*_+T*ve+b*U+B*ie,r[15]=w*E+T*ee+b*N+B*de,this}premultiplyTranslate(e=new y){const a=e.x,o=e.y,h=e.z,l=this.elements,u=this.elements,d=l[0],f=l[4],p=l[8],m=l[12],g=l[1],v=l[5],x=l[9],w=l[13],T=l[2],b=l[6],B=l[10],M=l[14],S=l[3],_=l[7],E=l[11],A=l[15];return u[0]=1*d+a*S,u[4]=1*f+a*_,u[8]=1*p+a*E,u[12]=1*m+a*A,u[1]=1*g+o*S,u[5]=1*v+o*_,u[9]=1*x+o*E,u[13]=1*w+o*A,u[2]=1*T+h*S,u[6]=1*b+h*_,u[10]=1*B+h*E,u[14]=1*M+h*A,u[3]=1*S,u[7]=1*_,u[11]=1*E,u[15]=1*A,this}premultiplyScale(e=new y){const t=this.elements,i=this.elements,s=e.x,r=e.y,a=e.z,o=1,h=t[0],l=t[4],u=t[8],d=t[12],f=t[1],p=t[5],m=t[9],g=t[13],v=t[2],x=t[6],w=t[10],T=t[14],b=t[3],B=t[7],M=t[11],S=t[15];return i[0]=s*h,i[4]=s*l,i[8]=s*u,i[12]=s*d,i[1]=r*f,i[5]=r*p,i[9]=r*m,i[13]=r*g,i[2]=a*v,i[6]=a*x,i[10]=a*w,i[14]=a*T,i[3]=o*b,i[7]=o*B,i[11]=o*M,i[15]=o*S,this}invert(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],d=e[9],f=e[10],p=e[11],m=e[12],g=e[13],v=e[14],x=e[15],w=d*v*l-g*f*l+g*h*p-o*v*p-d*h*x+o*f*x,T=m*f*l-u*v*l-m*h*p+a*v*p+u*h*x-a*f*x,b=u*g*l-m*d*l+m*o*p-a*g*p-u*o*x+a*d*x,B=m*d*h-u*g*h-m*o*f+a*g*f+u*o*v-a*d*v,M=t*w+i*T+s*b+r*B;if(M===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const S=1/M;return e[0]=w*S,e[1]=(g*f*r-d*v*r-g*s*p+i*v*p+d*s*x-i*f*x)*S,e[2]=(o*v*r-g*h*r+g*s*l-i*v*l-o*s*x+i*h*x)*S,e[3]=(d*h*r-o*f*r-d*s*l+i*f*l+o*s*p-i*h*p)*S,e[4]=T*S,e[5]=(u*v*r-m*f*r+m*s*p-t*v*p-u*s*x+t*f*x)*S,e[6]=(m*h*r-a*v*r-m*s*l+t*v*l+a*s*x-t*h*x)*S,e[7]=(a*f*r-u*h*r+u*s*l-t*f*l-a*s*p+t*h*p)*S,e[8]=b*S,e[9]=(m*d*r-u*g*r-m*i*p+t*g*p+u*i*x-t*d*x)*S,e[10]=(a*g*r-m*o*r+m*i*l-t*g*l-a*i*x+t*o*x)*S,e[11]=(u*o*r-a*d*r-u*i*l+t*d*l+a*i*p-t*o*p)*S,e[12]=B*S,e[13]=(u*g*s-m*d*s+m*i*f-t*g*f-u*i*v+t*d*v)*S,e[14]=(m*o*s-a*g*s-m*i*h+t*g*h+a*i*v-t*o*v)*S,e[15]=(a*d*s-u*o*s+u*i*h-t*d*h-a*i*f+t*o*f)*S,this}getInverse(){return this.clone().invert()}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[4],t[4]=e,e=t[2],t[2]=t[8],t[8]=e,e=t[3],t[3]=t[12],t[12]=e,e=t[6],t[6]=t[9],t[9]=e,e=t[7],t[7]=t[13],t[13]=e,e=t[11],t[11]=t[14],t[14]=e,this}translate(e=new y){const t=this.elements;return t[12]=t[0]*e.x+t[4]*e.y+t[8]*e.z+t[12],t[13]=t[1]*e.x+t[5]*e.y+t[9]*e.z+t[13],t[14]=t[2]*e.x+t[6]*e.y+t[10]*e.z+t[14],t[15]=t[3]*e.x+t[7]*e.y+t[11]*e.z+t[15],this}getTranslation(e=new y){return e.set(this.elements[12],this.elements[13],this.elements[14])}scale(e=new y){const t=this.elements;return t[0]*=e.x,t[1]*=e.x,t[2]*=e.x,t[3]*=e.x,t[4]*=e.y,t[5]*=e.y,t[6]*=e.y,t[7]*=e.y,t[8]*=e.z,t[9]*=e.z,t[10]*=e.z,t[11]*=e.z,this}rotateFromQuaternion(e=new re){const t=this.elements,i=e.elements[0],s=e.elements[1],r=e.elements[2],a=e.elements[3],o=i+i,h=s+s,l=r+r,u=i*o,d=i*h,f=i*l,p=s*h,m=s*l,g=r*l,v=a*o,x=a*h,w=a*l;return t[0]=1-(p+g),t[4]=d-w,t[8]=f+x,t[1]=d+w,t[5]=1-(u+g),t[9]=m-v,t[2]=f-x,t[6]=m+v,t[10]=1-(u+p),this}getMaxScaleOnAxis(){const e=this.elements,t=e[0]*e[0]+e[1]*e[1]+e[2]*e[2],i=e[4]*e[4]+e[5]*e[5]+e[6]*e[6],s=e[8]*e[8]+e[9]*e[9]+e[10]*e[10];return Math.sqrt(Math.max(t,i,s))}compose(e=new y,t=new re,i=new y(1)){const s=this.elements,r=t.elements[0],a=t.elements[1],o=t.elements[2],h=t.elements[3],l=r+r,u=a+a,d=o+o,f=r*l,p=r*u,m=r*d,g=a*u,v=a*d,x=o*d,w=h*l,T=h*u,b=h*d,B=i.x,M=i.y,S=i.z;return s[0]=(1-(g+x))*B,s[1]=(p+b)*B,s[2]=(m-T)*B,s[3]=0,s[4]=(p-b)*M,s[5]=(1-(f+x))*M,s[6]=(v+w)*M,s[7]=0,s[8]=(m+T)*S,s[9]=(v-w)*S,s[10]=(1-(f+g))*S,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}composeFromOrigin(e=new y,t=new re,i=new y(1),s=new y){const r=this.elements,a=t.elements[0],o=t.elements[1],h=t.elements[2],l=t.elements[3],u=a+a,d=o+o,f=h+h,p=a*u,m=a*d,g=a*f,v=o*d,x=o*f,w=h*f,T=l*u,b=l*d,B=l*f,M=i.x,S=i.y,_=i.z,E=s.x,A=s.y,H=s.z,ve=(1-(v+w))*M,ee=(m+B)*M,be=(g-b)*M,ue=(m-B)*S,U=(1-(p+w))*S,N=(x+T)*S,Y=(g+b)*_,K=(x-T)*_,ie=(1-(p+v))*_;return r[0]=ve,r[1]=ee,r[2]=be,r[3]=0,r[4]=ue,r[5]=U,r[6]=N,r[7]=0,r[8]=Y,r[9]=K,r[10]=ie,r[11]=0,r[12]=e.x+E-(ve*E+ue*A+Y*H),r[13]=e.y+A-(ee*E+U*A+K*H),r[14]=e.z+H-(be*E+N*A+ie*H),r[15]=1,this}lookAt(e=new y,t=new y,i=new y(0,1,0)){const s=this.elements;return I.copy(e).sub(t),I.lengthSq()===0&&(I.z=1),I.normalize(),J.crossVectors(i,I),J.lengthSq()===0&&(Math.abs(i.z)===1?I.x+=1e-4:I.z+=1e-4,I.normalize(),J.crossVectors(i,I)),J.normalize(),we.crossVectors(I,J),s[0]=J.x,s[1]=J.y,s[2]=J.z,s[3]=0,s[4]=we.x,s[5]=we.y,s[6]=we.z,s[7]=0,s[8]=I.x,s[9]=I.y,s[10]=I.z,s[11]=0,s[12]=e.x,s[13]=e.y,s[14]=e.z,s[15]=1,this}makeView(e=new y,t=new y,i=new y(0,1,0)){const s=this.elements;return I.copy(e).sub(t).normalize(),J.crossVectors(i,I).normalize(),we.crossVectors(I,J).normalize(),s[0]=J.x,s[1]=we.x,s[2]=I.x,s[3]=0,s[4]=J.y,s[5]=we.y,s[6]=I.y,s[7]=0,s[8]=J.z,s[9]=we.z,s[10]=I.z,s[11]=0,s[12]=-(J.x*e.x+J.y*e.y+J.z*e.z),s[13]=-(we.x*e.x+we.y*e.y+we.z*e.z),s[14]=-(I.x*e.x+I.y*e.y+I.z*e.z),s[15]=1,this}makeOrthographic({left:e=-5,right:t=5,bottom:i=-5,top:s=5,near:r=.1,far:a=50}){const o=this.elements;return o[0]=2/(t-e),o[1]=0,o[2]=0,o[3]=0,o[4]=0,o[5]=2/(s-i),o[6]=0,o[7]=0,o[8]=0,o[9]=0,o[10]=1/(r-a),o[11]=0,o[12]=(t+e)/(e-t),o[13]=(s+i)/(i-s),o[14]=r/(r-a),o[15]=1,this}makePerspective({fov:e=90,aspect:t=1,near:i=.1,far:s=150}){const r=i*Math.tan(Math.PI/180*.5*e),a=2*r,o=t*a,h=-.5*o,l=h+o,u=r-a,d=2*i/(l-h),f=2*i/(r-u),p=(l+h)/(l-h),m=(r+u)/(r-u),g=-s/(s-i),v=-s*i/(s-i);return this.set(d,0,0,0,0,f,0,0,p,m,g,-1,0,0,v,0),this}}let Da=0;const Ga=new D;class pe{static{c(this,"Object3D")}constructor(){this._parent=null,this.children=[],this.matricesNeedUpdate=!1,Object.defineProperty(this,"object3DIndex",{value:Da++}),this.setMatrices(),this.setTransforms()}get parent(){return this._parent}set parent(e){this._parent&&e&&this._parent.object3DIndex===e.object3DIndex||(this._parent&&(this._parent.children=this._parent.children.filter(t=>t.object3DIndex!==this.object3DIndex)),e&&this.shouldUpdateWorldMatrix(),this._parent=e,this._parent?.children.push(this))}setTransforms(){this.transforms={origin:{model:new y},quaternion:new re,rotation:new y,position:{world:new y},scale:new y(1)},this.rotation.onChange(()=>this.applyRotation()),this.position.onChange(()=>this.applyPosition()),this.scale.onChange(()=>this.applyScale()),this.transformOrigin.onChange(()=>this.applyTransformOrigin())}get rotation(){return this.transforms.rotation}set rotation(e){this.transforms.rotation=e,this.applyRotation()}get quaternion(){return this.transforms.quaternion}set quaternion(e){this.transforms.quaternion=e}get position(){return this.transforms.position.world}set position(e){this.transforms.position.world=e}get scale(){return this.transforms.scale}set scale(e){this.transforms.scale=e,this.applyScale()}get transformOrigin(){return this.transforms.origin.model}set transformOrigin(e){this.transforms.origin.model=e}applyRotation(){this.quaternion.setFromVec3(this.rotation),this.shouldUpdateModelMatrix()}applyPosition(){this.shouldUpdateModelMatrix()}applyScale(){this.shouldUpdateModelMatrix()}applyTransformOrigin(){this.shouldUpdateModelMatrix()}setMatrices(){this.matrices={model:{matrix:new D,shouldUpdate:!0,onUpdate:()=>this.updateModelMatrix()},world:{matrix:new D,shouldUpdate:!0,onUpdate:()=>this.updateWorldMatrix()}}}get modelMatrix(){return this.matrices.model.matrix}set modelMatrix(e){this.matrices.model.matrix=e,this.shouldUpdateModelMatrix()}shouldUpdateModelMatrix(){this.matrices.model.shouldUpdate=!0,this.shouldUpdateWorldMatrix()}get worldMatrix(){return this.matrices.world.matrix}set worldMatrix(e){this.matrices.world.matrix=e,this.shouldUpdateWorldMatrix()}shouldUpdateWorldMatrix(){this.matrices.world.shouldUpdate=!0}lookAt(e=new y,t=this.position,i=new y(0,1,0)){const s=Ga.lookAt(e,t,i);this.quaternion.setFromRotationMatrix(s),this.shouldUpdateModelMatrix()}updateModelMatrix(){this.modelMatrix=this.modelMatrix.composeFromOrigin(this.position,this.quaternion,this.scale,this.transformOrigin),this.shouldUpdateWorldMatrix()}updateWorldMatrix(){this.parent?this.worldMatrix.multiplyMatrices(this.parent.worldMatrix,this.modelMatrix):this.worldMatrix.copy(this.modelMatrix);for(let e=0,t=this.children.length;e<t;e++)this.children[e].shouldUpdateWorldMatrix()}shouldUpdateMatrices(){this.matricesNeedUpdate=!!Object.values(this.matrices).find(e=>e.shouldUpdate)}updateMatrixStack(){if(this.shouldUpdateMatrices(),this.matricesNeedUpdate)for(const e in this.matrices)this.matrices[e].shouldUpdate&&(this.matrices[e].onUpdate(),this.matrices[e].shouldUpdate=!1);for(let e=0,t=this.children.length;e<t;e++)this.children[e].updateMatrixStack()}destroy(){for(let e=0,t=this.children.length;e<t;e++)this.children[e]&&(this.children[e].parent=null);this.parent=null}}const os=c((n,e="GPURenderer",t)=>{const i=t?`Unable to create ${t} because the ${e} is not defined: ${n}`:`The ${e} is not defined: ${n}`;te(i)},"formatRendererError"),$=c((n,e)=>(n=n&&n.renderer||n,n&&(n.type==="GPURenderer"||n.type==="GPUCameraRenderer"||n.type==="GPUCurtainsRenderer")||os(n,"GPURenderer",e),n),"isRenderer"),Fe=c((n,e)=>(n=n&&n.renderer||n,n&&(n.type==="GPUCameraRenderer"||n.type==="GPUCurtainsRenderer")||os(n,"GPUCameraRenderer",e),n),"isCameraRenderer"),hs=c((n,e)=>(n=n&&n.renderer||n,n&&n.type==="GPUCurtainsRenderer"||os(n,"GPUCurtainsRenderer",e),n),"isCurtainsRenderer"),Fa=c(n=>"geometry"in n&&"material"in n&&n instanceof pe?n:!1,"isProjectedMesh"),ls=typeof GPUShaderStage<"u"?GPUShaderStage:{VERTEX:1,FRAGMENT:2,COMPUTE:4},Te=typeof GPUBufferUsage<"u"?GPUBufferUsage:{MAP_READ:1,MAP_WRITE:2,COPY_SRC:4,COPY_DST:8,INDEX:16,VERTEX:32,UNIFORM:64,STORAGE:128,INDIRECT:256,QUERY_RESOLVE:512},wt=typeof GPUTextureUsage<"u"?GPUTextureUsage:{COPY_SRC:1,COPY_DST:2,TEXTURE_BINDING:4,STORAGE_BINDING:8,RENDER_ATTACHMENT:16},$a=new Map([["vertex",ls.VERTEX],["fragment",ls.FRAGMENT],["compute",ls.COMPUTE]]),Oa=c((n=[])=>n.reduce((e,t)=>e|$a.get(t),0),"getBindingVisibility"),ka={i32:{numElements:1,align:4,size:4,type:"i32",View:Int32Array},u32:{numElements:1,align:4,size:4,type:"u32",View:Uint32Array},f32:{numElements:1,align:4,size:4,type:"f32",View:Float32Array},f16:{numElements:1,align:2,size:2,type:"u16",View:Uint16Array},vec2f:{numElements:2,align:8,size:8,type:"f32",View:Float32Array},vec2i:{numElements:2,align:8,size:8,type:"i32",View:Int32Array},vec2u:{numElements:2,align:8,size:8,type:"u32",View:Uint32Array},vec2h:{numElements:2,align:4,size:4,type:"u16",View:Uint16Array},vec3i:{numElements:3,align:16,size:12,type:"i32",View:Int32Array},vec3u:{numElements:3,align:16,size:12,type:"u32",View:Uint32Array},vec3f:{numElements:3,align:16,size:12,type:"f32",View:Float32Array},vec3h:{numElements:3,align:8,size:6,type:"u16",View:Uint16Array},vec4i:{numElements:4,align:16,size:16,type:"i32",View:Int32Array},vec4u:{numElements:4,align:16,size:16,type:"u32",View:Uint32Array},vec4f:{numElements:4,align:16,size:16,type:"f32",View:Float32Array},vec4h:{numElements:4,align:8,size:8,type:"u16",View:Uint16Array},mat2x2f:{numElements:4,align:8,size:16,type:"f32",View:Float32Array},mat2x2h:{numElements:4,align:4,size:8,type:"u16",View:Uint16Array},mat3x2f:{numElements:6,align:8,size:24,type:"f32",View:Float32Array},mat3x2h:{numElements:6,align:4,size:12,type:"u16",View:Uint16Array},mat4x2f:{numElements:8,align:8,size:32,type:"f32",View:Float32Array},mat4x2h:{numElements:8,align:4,size:16,type:"u16",View:Uint16Array},mat2x3f:{numElements:8,align:16,size:32,pad:[3,1],type:"f32",View:Float32Array},mat2x3h:{numElements:8,align:8,size:16,pad:[3,1],type:"u16",View:Uint16Array},mat3x3f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x3h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x3f:{numElements:16,align:16,size:64,pad:[3,1],type:"f32",View:Float32Array},mat4x3h:{numElements:16,align:8,size:32,pad:[3,1],type:"u16",View:Uint16Array},mat2x4f:{numElements:8,align:16,size:32,type:"f32",View:Float32Array},mat2x4h:{numElements:8,align:8,size:16,type:"u16",View:Uint16Array},mat3x4f:{numElements:12,align:16,size:48,pad:[3,1],type:"f32",View:Float32Array},mat3x4h:{numElements:12,align:8,size:24,pad:[3,1],type:"u16",View:Uint16Array},mat4x4f:{numElements:16,align:16,size:64,type:"f32",View:Float32Array},mat4x4h:{numElements:16,align:8,size:32,type:"u16",View:Uint16Array}},Or=c(n=>ka[n],"getBufferLayout"),Yt=c(n=>(()=>{switch(n.bindingType){case"storage":return`var<${n.bindingType}, ${n.options.access}>`;case"uniform":default:return"var<uniform>"}})(),"getBindingWGSLVarType"),Ua=c(n=>n.bindingType==="externalTexture"?`var ${n.name}: texture_external;`:n.bindingType==="storage"?`var ${n.name}: texture_storage_${n.options.viewDimension.replace("-","_")}<${n.options.format}, ${n.options.access}>;`:n.bindingType==="depth"?`var ${n.name}: texture_depth${n.options.multisampled?"_multisampled":""}_${n.options.viewDimension.replace("-","_")};`:`var ${n.name}: texture${n.options.multisampled?"_multisampled":""}_${n.options.viewDimension.replace("-","_")}<f32>;`,"getTextureBindingWGSLVarType"),kr=c(n=>n.bindingType==="storage"&&n.options.access==="read_write"?"storage":n.bindingType==="storage"?"read-only-storage":"uniform","getBindGroupLayoutBindingType"),Ia=c(n=>(()=>{switch(n.bindingType){case"externalTexture":return{externalTexture:{}};case"storage":return{storageTexture:{format:n.options.format,viewDimension:n.options.viewDimension}};case"texture":return{texture:{multisampled:n.options.multisampled,viewDimension:n.options.viewDimension,sampleType:n.options.multisampled?"unfilterable-float":"float"}};case"depth":return{texture:{multisampled:n.options.multisampled,viewDimension:n.options.viewDimension,sampleType:"depth"}};default:return null}})(),"getBindGroupLayoutTextureBindingType"),Va=c(n=>(()=>{switch(n.bindingType){case"externalTexture":return`externalTexture,${n.visibility},`;case"storage":return`storageTexture,${n.options.format},${n.options.viewDimension},${n.visibility},`;case"texture":return`texture,${n.options.multisampled},${n.options.viewDimension},${n.options.multisampled?"unfilterable-float":"float"},${n.visibility},`;case"depth":return`depthTexture,${n.options.format},${n.options.viewDimension},${n.visibility},`;default:return`${n.visibility},`}})(),"getBindGroupLayoutTextureBindingCacheKey");class Xt{static{c(this,"Binding")}constructor({label:e="Uniform",name:t="uniform",bindingType:i="uniform",visibility:s=["vertex","fragment","compute"]}){this.label=e,this.name=vt(t),this.bindingType=i,this.visibility=Oa(s),this.options={label:e,name:t,bindingType:i,visibility:s},this.shouldResetBindGroup=!1,this.shouldResetBindGroupLayout=!1,this.cacheKey=`${i},${this.visibility},`}}class z{static{c(this,"Vec2")}constructor(e=0,t=e){this.type="Vec2",this._x=e,this._y=t}get x(){return this._x}set x(e){const t=e!==this._x;this._x=e,t&&this._onChangeCallback&&this._onChangeCallback()}get y(){return this._y}set y(e){const t=e!==this._y;this._y=e,t&&this._onChangeCallback&&this._onChangeCallback()}onChange(e){return e&&(this._onChangeCallback=e),this}set(e=0,t=e){return this.x=e,this.y=t,this}add(e=new z){return this.x+=e.x,this.y+=e.y,this}addScalar(e=0){return this.x+=e,this.y+=e,this}sub(e=new z){return this.x-=e.x,this.y-=e.y,this}subScalar(e=0){return this.x-=e,this.y-=e,this}multiply(e=new z(1)){return this.x*=e.x,this.y*=e.y,this}multiplyScalar(e=1){return this.x*=e,this.y*=e,this}divide(e=new z(1)){return this.x/=e.x,this.y/=e.y,this}divideScalar(e=1){return this.x/=e,this.y/=e,this}copy(e=new z){return this.x=e.x,this.y=e.y,this}clone(){return new z(this.x,this.y)}max(e=new z){return this.x=Math.max(this.x,e.x),this.y=Math.max(this.y,e.y),this}min(e=new z){return this.x=Math.min(this.x,e.x),this.y=Math.min(this.y,e.y),this}clamp(e=new z,t=new z){return this.x=Math.max(e.x,Math.min(t.x,this.x)),this.y=Math.max(e.y,Math.min(t.y,this.y)),this}equals(e=new z){return this.x===e.x&&this.y===e.y}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.lengthSq())}normalize(){let e=this.x*this.x+this.y*this.y;return e>0&&(e=1/Math.sqrt(e)),this.x*=e,this.y*=e,this}dot(e=new z){return this.x*e.x+this.y*e.y}lerp(e=new z,t=1){return this.x+=(e.x-this.x)*t,this.y+=(e.y-this.y)*t,this}}const Na=4,Kt=4,X=Na*Kt;class fe{static{c(this,"BufferElement")}constructor({name:e,key:t,type:i="f32"}){this.name=e,this.key=t,this.type=i,this.baseType=fe.getBaseType(this.type),this.bufferLayout=Or(this.baseType),this.alignment={start:{row:0,byte:0},end:{row:0,byte:0}},this.setValue=null}static getType(e){return e.replace("array","").replace("<","").replace(">","")}static getBaseType(e){return fe.getType(e.replace("atomic","").replace("array","").replaceAll("<","").replaceAll(">",""))}get rowCount(){return this.alignment.end.row-this.alignment.start.row+1}get byteCount(){return Math.abs(this.endOffset-this.startOffset)+1}get paddedByteCount(){return(this.alignment.end.row+1)*X}get startOffset(){return this.getByteCountAtPosition(this.alignment.start)}get startOffsetToIndex(){return this.startOffset/Kt}get endOffset(){return this.getByteCountAtPosition(this.alignment.end)}get endOffsetToIndex(){return Math.floor(this.endOffset/Kt)}getPositionAtOffset(e=0){return{row:Math.floor(e/X),byte:e%X}}getByteCountAtPosition(e={row:0,byte:0}){return e.row*X+e.byte}applyOverflowToPosition(e={row:0,byte:0}){if(e.byte>X-1){const t=e.byte%X;e.row+=Math.floor(e.byte/X),e.byte=t}return e}getByteCountBetweenPositions(e={row:0,byte:0},t={row:0,byte:0}){return Math.abs(this.getByteCountAtPosition(t)-this.getByteCountAtPosition(e))}getElementAlignment(e={row:0,byte:0}){const t={start:e,end:e},{size:i,align:s}=this.bufferLayout;return e.byte%s!==0&&(e.byte+=e.byte%s),(i<=X&&e.byte+i>X||i>X&&(e.byte>X||e.byte>0))&&(e.row+=1,e.byte=0),t.end={row:e.row+Math.ceil(i/X)-1,byte:e.byte+(i%X===0?X-1:i%X-1)},t.end=this.applyOverflowToPosition(t.end),t}setAlignmentFromPosition(e={row:0,byte:0}){this.alignment=this.getElementAlignment(e)}setAlignment(e=0){this.setAlignmentFromPosition(this.getPositionAtOffset(e))}setView(e,t){this.view=new this.bufferLayout.View(e,this.startOffset,this.byteCount/this.bufferLayout.View.BYTES_PER_ELEMENT)}setValueFromNumber(e){this.view[0]=e}setValueFromVec2(e){this.view[0]=e.x??e[0]??0,this.view[1]=e.y??e[1]??0}setValueFromVec3(e){this.view[0]=e.x??e[0]??0,this.view[1]=e.y??e[1]??0,this.view[2]=e.z??e[2]??0}setValueFromMat4OrQuat(e){this.view.set(e.elements)}setValueFromMat3(e){this.setValueFromArrayWithPad(e.elements)}setValueFromArray(e){this.view.set(e)}setValueFromArrayWithPad(e){for(let t=0,i=0;t<this.view.length;t+=this.bufferLayout.pad[0]+this.bufferLayout.pad[1],i++)for(let s=0;s<this.bufferLayout.pad[0];s++)this.view[t+s]=e[t+s-i]}update(e){this.setValue||(this.setValue=(t=>{if(typeof t=="number")return this.setValueFromNumber;if(this.type==="vec2f")return this.setValueFromVec2;if(this.type==="vec3f")return this.setValueFromVec3;if(this.type==="mat3x3f")return t.elements?this.setValueFromMat3:this.setValueFromArrayWithPad;if(t.elements)return this.setValueFromMat4OrQuat;if(ArrayBuffer.isView(t)||Array.isArray(t))return this.bufferLayout.pad?this.setValueFromArrayWithPad:this.setValueFromArray;L(`${this.constructor.name}: value passed to ${this.name} cannot be used: ${t}`)})(e)),this.setValue(e)}extractDataFromBufferResult(e){return e.slice(this.startOffsetToIndex,this.endOffsetToIndex)}}class Ur extends fe{static{c(this,"BufferArrayElement")}constructor({name:e,key:t,type:i="f32",arrayLength:s=1}){super({name:e,key:t,type:i}),this.arrayLength=s,this.numElements=Math.ceil(this.arrayLength/this.bufferLayout.numElements)}get arrayStrideToIndex(){return this.arrayStride/Kt}setAlignment(e=0){super.setAlignment(e);const t=this.getElementAlignment(this.getPositionAtOffset(this.endOffset+1));this.arrayStride=this.getByteCountBetweenPositions(this.alignment.end,t.end),this.alignment.end=this.getPositionAtOffset(this.endOffset+this.arrayStride*(this.numElements-1))}setValueFromArray(e){let t=0;const i=this.byteCount/this.bufferLayout.View.BYTES_PER_ELEMENT,s=Math.ceil(i/this.numElements);for(let r=0;r<this.numElements;r++)for(let a=0;a<this.bufferLayout.numElements;a++)this.view[a+r*s]=e[t],t++}}class us extends Ur{static{c(this,"BufferInterleavedArrayElement")}constructor({name:e,key:t,type:i="f32",arrayLength:s=1}){super({name:e,key:t,type:i,arrayLength:s}),this.arrayStride=1,this.arrayLength=s,this.numElements=Math.ceil(this.arrayLength/this.bufferLayout.numElements)}get byteCount(){return this.bufferLayout.size*this.numElements}setAlignment(e=0,t=0){this.alignment=this.getElementAlignment(this.getPositionAtOffset(e)),this.arrayStride=t,this.alignment.end=this.getPositionAtOffset(this.endOffset+t*(this.numElements-1))}setView(e,t){this.view=new this.bufferLayout.View(this.bufferLayout.numElements*this.numElements),this.viewSetFunction=(i=>{switch(this.bufferLayout.View){case Int32Array:return i.setInt32.bind(i);case Uint16Array:return i.setUint16.bind(i);case Uint32Array:return i.setUint32.bind(i);case Float32Array:default:return i.setFloat32.bind(i)}})(t)}update(e){super.update(e);for(let t=0;t<this.numElements;t++){const i=this.view.subarray(t*this.bufferLayout.numElements,t*this.bufferLayout.numElements+this.bufferLayout.numElements),s=this.startOffset+t*this.arrayStride;i.forEach((r,a)=>{this.viewSetFunction(s+a*this.bufferLayout.View.BYTES_PER_ELEMENT,r,!0)})}}extractDataFromBufferResult(e){const t=new Float32Array(this.arrayLength);for(let i=0;i<this.numElements;i++){const s=this.startOffsetToIndex+i*this.arrayStrideToIndex;for(let r=0;r<this.bufferLayout.numElements;r++)t[i*this.bufferLayout.numElements+r]=e[s+r]}return t}}const Wa=new Map([["copySrc",Te.COPY_SRC],["copyDst",Te.COPY_DST],["index",Te.INDEX],["indirect",Te.INDIRECT],["mapRead",Te.MAP_READ],["mapWrite",Te.MAP_WRITE],["queryResolve",Te.QUERY_RESOLVE],["storage",Te.STORAGE],["uniform",Te.UNIFORM],["vertex",Te.VERTEX]]),Ir=c((n=[])=>n.reduce((e,t)=>e|Wa.get(t),0),"getBufferUsages");class qe{static{c(this,"Buffer")}constructor({label:e="Buffer",size:t=0,usage:i=["copySrc","copyDst"],mappedAtCreation:s=!1}={}){this.type="Buffer",this.reset(),this.uuid=O(),this.consumers=new Set,this.options={label:e,size:t,usage:Ir(i),mappedAtCreation:s}}reset(){this.GPUBuffer=null}set size(e){this.options.size=e}createBuffer(e,t={}){const{usage:i,...s}=t;this.options={...this.options,...s,...i!==void 0&&{usage:Ir(i)}},this.setBuffer(e.createBuffer(this))}setBuffer(e){this.GPUBuffer=e}copy(e,t=!1){t&&this.destroy(),this.options=e.options,this.GPUBuffer=e.GPUBuffer,this.consumers=new Set([...this.consumers,...e.consumers])}async mapBufferAsync(){if(!this.GPUBuffer||this.GPUBuffer.mapState!=="unmapped")return new Float32Array(0);await this.GPUBuffer.mapAsync(GPUMapMode.READ);const e=new Float32Array(this.GPUBuffer.getMappedRange().slice(0));return this.GPUBuffer.unmap(),e}destroy(){this.GPUBuffer?.destroy(),this.reset(),this.consumers.clear()}}var Vr=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$n"),ja=c((n,e,t)=>(Vr(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$l"),qa=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$n"),Ha=c((n,e,t,i)=>(Vr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$k"),Jt;const Ya=class ns extends Xt{static{c(this,"_BufferBinding")}constructor({label:e="Uniform",name:t="uniform",bindingType:i,visibility:s,useStruct:r=!0,access:a="read",usage:o=[],struct:h={},childrenBindings:l=[],buffer:u=null,parent:d=null,minOffset:f=256,offset:p=0}){i=i??"uniform",super({label:e,name:t,bindingType:i,visibility:s}),qa(this,Jt,void 0),this.options={...this.options,useStruct:r,access:a,usage:o,struct:h,childrenBindings:l,buffer:u,parent:d,minOffset:f,offset:p},this.cacheKey+=`${r},${a},`,this.arrayBufferSize=0,this.shouldUpdate=!1,this.useStruct=r,this.bufferElements=[],this.inputs={},this.buffer=this.options.buffer??new qe,Object.keys(h).length&&(this.setBindings(h),this.setInputsAlignment()),this.setChildrenBindings(l),(Object.keys(h).length||this.childrenBindings.length)&&(this.setBufferAttributes(),this.setWGSLFragment()),this.parent=d}static cloneStruct(e){return Object.keys(e).reduce((t,i)=>{const s=e[i];let r;return Array.isArray(s.value)||ArrayBuffer.isView(s.value)?r=new s.value.constructor(s.value.length):typeof s.value=="number"?r=0:r=new s.value.constructor,{...t,[i]:{type:s.type,value:r}}},{})}get parent(){return ja(this,Jt)}set parent(e){if(e){this.parentView=new DataView(e.arrayBuffer,this.offset,this.getMinOffsetSize(this.arrayBufferSize));const t=c(s=>[...c(a=>a.bufferElements,"getBufferElements")(s),s.childrenBindings.map(a=>t(a)).flat()].flat(),"getAllBufferElements"),i=t(this);this.parentViewSetBufferEls=i.map(s=>{switch(s.bufferLayout.View){case Int32Array:return{bufferElement:s,viewSetFunction:this.parentView.setInt32.bind(this.parentView)};case Uint16Array:return{bufferElement:s,viewSetFunction:this.parentView.setUint16.bind(this.parentView)};case Uint32Array:return{bufferElement:s,viewSetFunction:this.parentView.setUint32.bind(this.parentView)};case Float32Array:default:return{bufferElement:s,viewSetFunction:this.parentView.setFloat32.bind(this.parentView)}}}),!this.parent&&this.buffer.GPUBuffer&&!this.options.buffer&&this.buffer.destroy()}else this.parentView=null,this.parentViewSetBufferEls=null;Ha(this,Jt,e)}getMinOffsetSize(e){return Math.ceil(e/this.options.minOffset)*this.options.minOffset}get offset(){return this.getMinOffsetSize(this.options.offset*this.getMinOffsetSize(this.arrayBufferSize))}get resourceLayout(){return{buffer:{type:kr(this)},...this.parent&&{offset:this.offset,size:this.arrayBufferSize}}}get resourceLayoutCacheKey(){return`buffer,${kr(this)},${this.visibility},`}get resource(){return{buffer:this.parent?this.parent.buffer.GPUBuffer:this.buffer.GPUBuffer,...this.parent&&{offset:this.offset,size:this.arrayBufferSize}}}clone(e={}){let{struct:t,childrenBindings:i,parent:s,...r}=e;const{label:a,name:o,bindingType:h,visibility:l,useStruct:u,access:d,usage:f}=this.options;r={label:a,name:o,bindingType:h,visibility:l,useStruct:u,access:d,usage:f,...r};const p=new this.constructor(r);return t=t||ns.cloneStruct(this.options.struct),p.options.struct=t,p.setBindings(t),p.arrayBufferSize=this.arrayBufferSize,p.arrayBuffer=new ArrayBuffer(p.arrayBufferSize),p.arrayView=new DataView(p.arrayBuffer,0,p.arrayBuffer.byteLength),p.options.buffer||(p.buffer.size=p.arrayBuffer.byteLength),this.bufferElements.forEach(m=>{const g=new m.constructor({name:m.name,key:m.key,type:m.type,...m.arrayLength&&{arrayLength:m.arrayLength}});g.alignment=JSON.parse(JSON.stringify(m.alignment)),m.arrayStride&&(g.arrayStride=m.arrayStride),g.setView(p.arrayBuffer,p.arrayView),p.bufferElements.push(g)}),this.options.childrenBindings&&(p.options.childrenBindings=this.options.childrenBindings,p.options.childrenBindings.forEach(m=>{const g=m.count?Math.max(1,m.count):1;p.cacheKey+=`child(count:${g}):${m.binding.cacheKey}`}),p.options.childrenBindings.forEach(m=>{p.childrenBindings=[...p.childrenBindings,Array.from(Array(Math.max(1,m.count||1)).keys()).map(g=>m.binding.clone({...m.binding.options,struct:ns.cloneStruct(m.binding.options.struct)}))].flat()}),p.childrenBindings.forEach((m,g)=>{let v=this.arrayView.byteLength;for(let x=0;x<g;x++)v+=this.childrenBindings[x].arrayBuffer.byteLength;m.bufferElements.forEach((x,w)=>{x.alignment.start.row=this.childrenBindings[g].bufferElements[w].alignment.start.row,x.alignment.end.row=this.childrenBindings[g].bufferElements[w].alignment.end.row}),m.arrayView=new DataView(p.arrayBuffer,v,m.arrayBuffer.byteLength);for(const x of m.bufferElements)x.setView(p.arrayBuffer,m.arrayView)})),p.setWGSLFragment(),s&&(p.parent=s),p.shouldUpdate=p.arrayBufferSize>0,p}setBindings(e){for(const t of Object.keys(e)){const i={};for(const s in e[t])s!=="value"&&(i[s]=e[t][s]);if(i.name=t,Object.defineProperty(i,"value",{get(){return i._value},set(s){i._value=s,i.shouldUpdate=!0}}),i.value=e[t].value,i.value instanceof z||i.value instanceof y){const s=i.value._onChangeCallback;i.value._onChangeCallback=()=>{s&&s(),i.shouldUpdate=!0}}this.inputs[t]=i,this.cacheKey+=`${t},${e[t].type},`}}setChildrenBindings(e){if(this.childrenBindings=[],e&&e.length){const t=[];e.sort((i,s)=>{const r=i.count?Math.max(i.count):i.forceArray?1:0,a=s.count?Math.max(s.count):s.forceArray?1:0;return r-a}).forEach(i=>{(i.count&&i.count>1||i.forceArray)&&t.push(i.binding)}),t.length>1&&(t.shift(),L(`BufferBinding: "${this.label}" contains multiple children bindings arrays. These children bindings cannot be added to the BufferBinding: "${t.map(i=>i.label).join(", ")}"`),t.forEach(i=>{e=e.filter(s=>s.binding.name!==i.name)})),this.options.childrenBindings=e,e.forEach(i=>{const s=i.count?Math.max(1,i.count):1;this.cacheKey+=`child(count:${s}):${i.binding.cacheKey}`,this.childrenBindings=[...this.childrenBindings,Array.from(Array(s).keys()).map(r=>i.binding.clone({...i.binding.options,struct:ns.cloneStruct(i.binding.options.struct)}))].flat()})}}setInputsAlignment(){let e=Object.keys(this.inputs);const t=e.filter(i=>this.inputs[i].type.includes("array"));t.length&&(e.sort((i,s)=>{const r=Math.min(0,this.inputs[i].type.indexOf("array")),a=Math.min(0,this.inputs[s].type.indexOf("array"));return r-a}),t.length>1&&(e=e.filter(i=>!t.includes(i))));for(const i of e){const s=this.inputs[i],r={name:vt(s.name??i),key:i,type:s.type},a=s.type.includes("array")&&(Array.isArray(s.value)||ArrayBuffer.isView(s.value));this.bufferElements.push(a?new Ur({...r,arrayLength:s.value.length}):new fe(r))}if(this.bufferElements.forEach((i,s)=>{const r=s===0?0:this.bufferElements[s-1].endOffset+1;i.setAlignment(r)}),t.length>1)if(t.map(r=>{const a=this.inputs[r],o=Or(fe.getBaseType(a.type));return Math.ceil(a.value.length/o.numElements)}).every((r,a,o)=>r===o[0])){const r=t.map(h=>{const l=this.inputs[h];return new us({name:vt(l.name??h),key:h,type:l.type,arrayLength:l.value.length})}),a=t.map(h=>{const l=this.inputs[h];return new fe({name:vt(l.name??h),key:h,type:fe.getType(l.type)})});a.forEach((h,l)=>{l===0?this.bufferElements.length?h.setAlignmentFromPosition({row:this.bufferElements[this.bufferElements.length-1].alignment.end.row+1,byte:0}):h.setAlignment(0):h.setAlignment(a[l-1].endOffset+1)});const o=a[a.length-1].endOffset+1-a[0].startOffset;r.forEach((h,l)=>{h.setAlignment(a[l].startOffset,Math.ceil(o/X)*X)}),this.bufferElements=[...this.bufferElements,...r]}else L(`BufferBinding: "${this.label}" contains multiple array inputs that should use an interleaved array, but their sizes do not match. These inputs cannot be added to the BufferBinding: "${t.join(", ")}"`)}setBufferAttributes(){const e=this.bufferElements.length?this.bufferElements[this.bufferElements.length-1].paddedByteCount:0;this.arrayBufferSize=e,this.childrenBindings.forEach(t=>{this.arrayBufferSize+=t.arrayBufferSize}),this.arrayBuffer=new ArrayBuffer(this.arrayBufferSize),this.arrayView=new DataView(this.arrayBuffer,0,e),this.childrenBindings.forEach((t,i)=>{let s=e;for(let o=0;o<i;o++)s+=this.childrenBindings[o].arrayBuffer.byteLength;const r=this.bufferElements.length?this.bufferElements[this.bufferElements.length-1].alignment.end.row+1:0,a=i>0&&this.childrenBindings[i-1].bufferElements.length?this.childrenBindings[i-1].bufferElements[this.childrenBindings[i-1].bufferElements.length-1].alignment.end.row+1:0;t.bufferElements.forEach(o=>{const h=i===0?r+a:a;o.alignment.start.row+=h,o.alignment.end.row+=h}),t.arrayView=new DataView(this.arrayBuffer,s,t.arrayBuffer.byteLength);for(const o of t.bufferElements)o.setView(this.arrayBuffer,t.arrayView)}),this.options.buffer||(this.buffer.size=this.arrayBuffer.byteLength);for(const t of this.bufferElements)t.setView(this.arrayBuffer,this.arrayView);this.shouldUpdate=this.arrayBufferSize>0}setWGSLFragment(){if(!this.bufferElements.length&&!this.childrenBindings.length)return;const e=bt(this.label);if(this.useStruct){const t={};t[e]={};const i=this.bufferElements.filter(a=>!(a instanceof us)),s=this.bufferElements.filter(a=>a instanceof us);if(s.length){const a=this.bindingType==="uniform"?`, ${s[0].numElements}`:"";if(i.length){t[`${e}Element`]={},s.forEach(l=>{t[`${e}Element`][l.name]=fe.getType(l.type)}),i.forEach(l=>{t[e][l.name]=l.type});const o=this.bufferElements.find(l=>l.name==="elements")?`${this.name}Elements`:"elements";t[e][o]=`array<${e}Element${a}>`;const h=Yt(this);this.wgslGroupFragment=[`${h} ${this.name}: ${e};`]}else{this.bufferElements.forEach(h=>{t[e][h.name]=fe.getType(h.type)});const o=Yt(this);this.wgslGroupFragment=[`${o} ${this.name}: array<${e}${a}>;`]}}else{i.forEach(o=>{const h=this.bindingType==="uniform"&&"numElements"in o?`array<${fe.getType(o.type)}, ${o.numElements}>`:o.type;t[e][o.name]=h});const a=Yt(this);this.wgslGroupFragment=[`${a} ${this.name}: ${e};`]}this.childrenBindings.length&&this.options.childrenBindings.forEach(a=>{t[e][a.binding.name]=a.count&&a.count>1||a.forceArray?`array<${bt(a.binding.label)}>`:bt(a.binding.label)});const r=this.childrenBindings.length?this.options.childrenBindings.map(a=>a.binding.wgslStructFragment).join(`

`)+`

`:"";this.wgslStructFragment=r+Object.keys(t).reverse().map(a=>`struct ${a} {
	${Object.keys(t[a]).map(o=>`${o}: ${t[a][o]}`).join(`,
	`)}
};`).join(`

`)}else this.wgslStructFragment="",this.wgslGroupFragment=this.bufferElements.map(t=>`${Yt(this)} ${t.name}: ${t.type};`)}shouldUpdateBinding(e=""){this.inputs[e]&&(this.inputs[e].shouldUpdate=!0)}update(){if(this.options.buffer){this.shouldUpdate=!1;return}const e=Object.values(this.inputs);for(const t of e){const i=this.bufferElements.find(s=>s.key===t.name);t.shouldUpdate&&i&&(t.onBeforeUpdate&&t.onBeforeUpdate(),i.update(t.value),this.shouldUpdate=!0,t.shouldUpdate=!1)}if(this.childrenBindings.forEach(t=>{t.update(),t.shouldUpdate&&(this.shouldUpdate=!0),t.shouldUpdate=!1}),this.shouldUpdate&&this.parent&&this.parentViewSetBufferEls){let t=0;this.parentViewSetBufferEls.forEach((i,s)=>{const{bufferElement:r,viewSetFunction:a}=i;r.view.forEach(o=>{a(t*r.view.BYTES_PER_ELEMENT,o,!0),t++})}),this.parent.shouldUpdate=!0,this.shouldUpdate=!1}}extractBufferElementDataFromBufferResult({result:e,bufferElementName:t}){const i=this.bufferElements.find(s=>s.name===t);return i?i.extractDataFromBufferResult(e):e}};Jt=new WeakMap;let Z=Ya;class ds extends Z{static{c(this,"WritableBufferBinding")}constructor({label:e="Work",name:t="work",bindingType:i,visibility:s,useStruct:r=!0,access:a="read_write",usage:o=[],struct:h={},childrenBindings:l=[],buffer:u=null,parent:d=null,minOffset:f=256,offset:p=0,shouldCopyResult:m=!1}){i="storage",s=["compute"],super({label:e,name:t,bindingType:i,visibility:s,useStruct:r,access:a,usage:o,struct:h,childrenBindings:l,buffer:u,parent:d,minOffset:f,offset:p}),this.options={...this.options,shouldCopyResult:m},this.shouldCopyResult=m,this.cacheKey+=`${m},`,this.resultBuffer=new qe}}class Zt{static{c(this,"BindGroup")}constructor(e,{label:t="BindGroup",index:i=0,bindings:s=[],uniforms:r,storages:a}={}){this.type="BindGroup",e=$(e,this.type),this.renderer=e,this.options={label:t,index:i,bindings:s,...r&&{uniforms:r},...a&&{storages:a}},this.index=i,this.uuid=O(),this.bindings=[],s.length&&this.addBindings(s),(this.options.uniforms||this.options.storages)&&this.setInputBindings(),this.layoutCacheKey="",this.pipelineCacheKey="",this.resetEntries(),this.bindGroupLayout=null,this.bindGroup=null,this.needsPipelineFlush=!1,this.consumers=new Set;for(const o of this.bufferBindings)"buffer"in o&&(o.parent?o.parent.buffer.consumers.add(this.uuid):o.buffer.consumers.add(this.uuid)),"resultBuffer"in o&&o.resultBuffer.consumers.add(this.uuid);this.renderer.addBindGroup(this)}setIndex(e){this.index=e}addBindings(e=[]){e.forEach(t=>{"buffer"in t&&(t.parent?(this.renderer.deviceManager.bufferBindings.set(t.parent.cacheKey,t.parent),t.parent.buffer.consumers.add(this.uuid)):(this.renderer.deviceManager.bufferBindings.set(t.cacheKey,t),t.buffer.consumers.add(this.uuid)))}),this.bindings=[...this.bindings,...e]}addBinding(e){this.bindings.push(e)}destroyBufferBinding(e){"buffer"in e&&(this.renderer.removeBuffer(e.buffer),e.buffer.consumers.delete(this.uuid),e.buffer.consumers.size||e.buffer.destroy(),e.parent&&(e.parent.buffer.consumers.delete(this.uuid),e.parent.buffer.consumers.size||(this.renderer.removeBuffer(e.parent.buffer),e.parent.buffer.destroy()))),"resultBuffer"in e&&(this.renderer.removeBuffer(e.resultBuffer),e.resultBuffer.consumers.delete(this.uuid),e.resultBuffer.consumers.size||e.resultBuffer.destroy())}createInputBindings(e="uniform",t={}){let i=[...Object.keys(t).map(s=>{const r=t[s];if(!r.struct)return;const a={label:bt(r.label||s),name:s,bindingType:e,visibility:r.access==="read_write"?["compute"]:r.visibility,useStruct:!0,access:r.access??"read",...r.usage&&{usage:r.usage},struct:r.struct,...r.shouldCopyResult!==void 0&&{shouldCopyResult:r.shouldCopyResult}};if(r.useStruct!==!1){let h=`${e},${r.visibility===void 0?"all":r.access==="read_write"?"compute":r.visibility},true,${r.access??"read"},`;Object.keys(r.struct).forEach(u=>{h+=`${u},${r.struct[u].type},`}),r.shouldCopyResult!==void 0&&(h+=`${r.shouldCopyResult},`);const l=this.renderer.deviceManager.bufferBindings.get(h);if(l)return l.clone(a)}const o=a.access==="read_write"?ds:Z;return r.useStruct!==!1?new o(a):Object.keys(r.struct).map(h=>(a.label=bt(r.label?r.label+h:s+h),a.name=s+h,a.useStruct=!1,a.struct={[h]:r.struct[h]},new o(a)))})].flat();return i=i.filter(Boolean),i.forEach(s=>{this.renderer.deviceManager.bufferBindings.set(s.cacheKey,s)}),i}setInputBindings(){this.addBindings([...this.createInputBindings("uniform",this.options.uniforms),...this.createInputBindings("storage",this.options.storages)])}get shouldCreateBindGroup(){return!this.bindGroup&&!!this.bindings.length}resetEntries(){this.entries={bindGroupLayout:[],bindGroup:[]}}createBindGroup(){this.fillEntries(),this.setBindGroupLayout(),this.setBindGroup()}resetBindGroup(){this.entries.bindGroup=[],this.pipelineCacheKey="";for(const e of this.bindings)this.addBindGroupEntry(e);this.setBindGroup()}addBindGroupEntry(e){this.entries.bindGroup.push({binding:this.entries.bindGroup.length,resource:e.resource}),this.pipelineCacheKey+=e.cacheKey}resetBindGroupLayout(){this.entries.bindGroupLayout=[],this.layoutCacheKey="";for(const e of this.bindings)this.addBindGroupLayoutEntry(e);this.setBindGroupLayout()}addBindGroupLayoutEntry(e){this.entries.bindGroupLayout.push({binding:this.entries.bindGroupLayout.length,...e.resourceLayout,visibility:e.visibility}),this.layoutCacheKey+=e.resourceLayoutCacheKey}loseContext(){this.resetEntries();for(const e of this.bufferBindings)e.buffer.reset(),e.parent&&e.parent.buffer.reset(),"resultBuffer"in e&&e.resultBuffer.reset();this.bindGroup=null,this.bindGroupLayout=null,this.needsPipelineFlush=!0}restoreContext(){this.shouldCreateBindGroup&&this.createBindGroup();for(const e of this.bufferBindings)e.shouldUpdate=!0}get bufferBindings(){return this.bindings.filter(e=>e instanceof Z||e instanceof ds)}createBindingBuffer(e,t=null){e.buffer.createBuffer(this.renderer,{label:t||this.options.label+": "+e.bindingType+" buffer from: "+e.label,usage:["copySrc","copyDst",e.bindingType,...e.options.usage]}),"resultBuffer"in e&&e.resultBuffer.createBuffer(this.renderer,{label:this.options.label+": Result buffer from: "+e.label,size:e.arrayBuffer.byteLength,usage:["copyDst","mapRead"]})}fillEntries(){for(const e of this.bindings)e.visibility||(e.visibility=GPUShaderStage.VERTEX|GPUShaderStage.FRAGMENT|GPUShaderStage.COMPUTE),"buffer"in e&&(e.parent&&!e.parent.buffer.GPUBuffer?this.createBindingBuffer(e.parent,e.parent.options.label):!e.buffer.GPUBuffer&&!e.parent&&this.createBindingBuffer(e)),this.addBindGroupLayoutEntry(e),this.addBindGroupEntry(e)}getBindingByName(e=""){return this.bindings.find(t=>t.name===e)}setBindGroupLayout(){const e=this.renderer.deviceManager.bindGroupLayouts.get(this.layoutCacheKey);e?this.bindGroupLayout=e:(this.bindGroupLayout=this.renderer.createBindGroupLayout({label:this.options.label+" layout",entries:this.entries.bindGroupLayout}),this.renderer.deviceManager.bindGroupLayouts.set(this.layoutCacheKey,this.bindGroupLayout))}setBindGroup(){this.bindGroup=this.renderer.createBindGroup({label:this.options.label,layout:this.bindGroupLayout,entries:this.entries.bindGroup})}updateBufferBindings(){this.bindings.forEach((e,t)=>{"buffer"in e&&(e.update(),e.shouldUpdate&&e.buffer.GPUBuffer&&(!e.useStruct&&e.bufferElements.length>1?this.renderer.queueWriteBuffer(e.buffer.GPUBuffer,0,e.bufferElements[t].view):this.renderer.queueWriteBuffer(e.buffer.GPUBuffer,0,e.arrayBuffer),e.shouldUpdate=!1))})}update(){this.updateBufferBindings();const e=this.bindings.some(i=>i.shouldResetBindGroup),t=this.bindings.some(i=>i.shouldResetBindGroupLayout);(e||t)&&this.renderer.onAfterCommandEncoderSubmission.add(()=>{for(const i of this.bindings)i.shouldResetBindGroup=!1,i.shouldResetBindGroupLayout=!1},{once:!0}),t&&(this.resetBindGroupLayout(),this.needsPipelineFlush=!0),e&&this.resetBindGroup()}clone({bindings:e=[],keepLayout:t=!1}={}){const i={...this.options};i.label+=" (copy)";const s=new this.constructor(this.renderer,{label:i.label});s.setIndex(this.index),s.options=i;const r=e.length?e:this.bindings;for(const a of r)s.addBinding(a),"buffer"in a&&(a.parent&&!a.parent.buffer.GPUBuffer?(this.createBindingBuffer(a.parent,a.parent.options.label),a.parent.buffer.consumers.add(s.uuid)):!a.buffer.GPUBuffer&&!a.parent&&this.createBindingBuffer(a),"resultBuffer"in a&&a.resultBuffer.consumers.add(s.uuid)),t||s.addBindGroupLayoutEntry(a),s.addBindGroupEntry(a);return t&&(s.entries.bindGroupLayout=[...this.entries.bindGroupLayout],s.layoutCacheKey=this.layoutCacheKey),s.setBindGroupLayout(),s.setBindGroup(),s}destroy(){this.renderer.removeBindGroup(this);for(const e of this.bufferBindings)this.destroyBufferBinding(e);this.bindings=[],this.bindGroupLayout=null,this.bindGroup=null,this.resetEntries()}}class cs extends Xt{static{c(this,"TextureBinding")}constructor({label:e="Texture",name:t="texture",bindingType:i,visibility:s,texture:r,format:a="rgba8unorm",access:o="write",viewDimension:h="2d",multisampled:l=!1}){i=i??"texture",i==="storage"&&(s=["compute"]),super({label:e,name:t,bindingType:i,visibility:s}),this.options={...this.options,texture:r,format:a,access:o,viewDimension:h,multisampled:l},this.cacheKey+=`${a},${o},${h},${l},`,this.resource=r,this.setWGSLFragment()}get resourceLayout(){return Ia(this)}get resourceLayoutCacheKey(){return Va(this)}get resource(){return this.texture instanceof GPUTexture?this.texture.createView({label:this.options.label+" view",dimension:this.options.viewDimension}):this.texture instanceof GPUExternalTexture?this.texture:null}set resource(e){(e||this.texture)&&(this.shouldResetBindGroup=!0),this.texture=e}setBindingType(e){e!==this.bindingType&&(e&&(this.shouldResetBindGroupLayout=!0),this.bindingType=e,this.cacheKey=`${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`,this.setWGSLFragment())}setFormat(e){const t=e!==this.options.format;this.options.format=e,t&&this.bindingType==="storage"&&(this.setWGSLFragment(),this.shouldResetBindGroupLayout=!0,this.cacheKey=`${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`)}setMultisampled(e){const t=e!==this.options.multisampled;this.options.multisampled=e,t&&this.bindingType!=="storage"&&(this.setWGSLFragment(),this.shouldResetBindGroupLayout=!0,this.cacheKey=`${this.bindingType},${this.visibility},${this.options.format},${this.options.access},${this.options.viewDimension},${this.options.multisampled},`)}setWGSLFragment(){this.wgslGroupFragment=[`${Ua(this)}`]}}const Xa=new Map([["copySrc",wt.COPY_SRC],["copyDst",wt.COPY_DST],["renderAttachment",wt.RENDER_ATTACHMENT],["storageBinding",wt.STORAGE_BINDING],["textureBinding",wt.TEXTURE_BINDING]]),Ka=c((n=[])=>n.reduce((e,t)=>e|Xa.get(t),0),"getTextureUsages"),Ja=c((n=[],e)=>n.length?Ka(n):e!=="storage"?GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT:GPUTextureUsage.STORAGE_BINDING|GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST,"getDefaultTextureUsage"),Nr=c((...n)=>{const e=Math.max(...n);return 1+Math.log2(e)|0},"getNumMipLevels");var Za=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$m"),se=c((n,e,t)=>(Za(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$k"),Qt=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$m"),He,Ye,ei,ti;const Wr={name:"texture",generateMips:!1,flipY:!1,format:"rgba8unorm",premultipliedAlpha:!1,placeholderColor:[0,0,0,255],useExternalTextures:!0,fromTexture:null,viewDimension:"2d",visibility:["fragment"],cache:!0};class Xe extends pe{static{c(this,"DOMTexture")}constructor(e,t=Wr){super(),Qt(this,He,new y(1)),Qt(this,Ye,new y(1)),Qt(this,ei,new y(1)),Qt(this,ti,new D),this._onSourceLoadedCallback=()=>{},this._onSourceUploadedCallback=()=>{},this.type="Texture",e=$(e,t.label?t.label+" "+this.type:this.type),this.renderer=e,this.uuid=O();const i={...Wr,source:t.fromTexture?t.fromTexture.options.source:null,sourceType:t.fromTexture?t.fromTexture.options.sourceType:null};this.options={...i,...t},this.options.label=this.options.label??this.options.name,this.texture=null,this.externalTexture=null,this.source=null,this.size={width:1,height:1,depth:1},this.textureMatrix=new Z({label:this.options.label+": model matrix",name:this.options.name+"Matrix",useStruct:!1,struct:{[this.options.name+"Matrix"]:{type:"mat4x4f",value:this.modelMatrix}}}),this.renderer.deviceManager.bufferBindings.set(this.textureMatrix.cacheKey,this.textureMatrix),this.setBindings(),this._parentMesh=null,this.sourceLoaded=!1,this.sourceUploaded=!1,this.shouldUpdate=!1,this.renderer.addDOMTexture(this),this.createTexture()}setBindings(){this.bindings=[new cs({label:this.options.label+": texture",name:this.options.name,bindingType:this.options.sourceType==="externalVideo"?"externalTexture":"texture",visibility:this.options.visibility,texture:this.options.sourceType==="externalVideo"?this.externalTexture:this.texture,viewDimension:this.options.viewDimension}),this.textureMatrix]}get textureBinding(){return this.bindings[0]}get parentMesh(){return this._parentMesh}set parentMesh(e){this._parentMesh=e,this.resize()}get sourceLoaded(){return this._sourceLoaded}set sourceLoaded(e){e&&!this.sourceLoaded&&this._onSourceLoadedCallback&&this._onSourceLoadedCallback(),this._sourceLoaded=e}get sourceUploaded(){return this._sourceUploaded}set sourceUploaded(e){e&&!this.sourceUploaded&&this._onSourceUploadedCallback&&this._onSourceUploadedCallback(),this._sourceUploaded=e}setTransforms(){super.setTransforms(),this.transforms.quaternion.setAxisOrder("ZXY"),this.transforms.origin.model.set(.5,.5,0)}updateModelMatrix(){if(!this.parentMesh)return;const e=this.parentMesh.scale?this.parentMesh.scale:new y(1,1,1),t=this.parentMesh.boundingRect?this.parentMesh.boundingRect.width*e.x:this.size.width,i=this.parentMesh.boundingRect?this.parentMesh.boundingRect.height*e.y:this.size.height,s=t/i,r=this.size.width/this.size.height;t>i?(se(this,He).set(s,1,1),se(this,Ye).set(1/r,1,1)):(se(this,He).set(1,1/s,1),se(this,Ye).set(1,r,1));const a=s>r!=t>i?1:t>i?se(this,He).x*se(this,Ye).x:se(this,Ye).y*se(this,He).y;se(this,ei).set(1/(a*this.scale.x),1/(a*this.scale.y),1),se(this,ti).rotateFromQuaternion(this.quaternion),this.modelMatrix.identity().premultiplyTranslate(this.transformOrigin.clone().multiplyScalar(-1)).premultiplyScale(se(this,ei)).premultiplyScale(se(this,He)).premultiply(se(this,ti)).premultiplyScale(se(this,Ye)).premultiplyTranslate(this.transformOrigin).translate(this.position)}updateMatrixStack(){super.updateMatrixStack(),this.matricesNeedUpdate&&this.textureMatrix.shouldUpdateBinding(this.options.name+"Matrix")}resize(){this.source&&this.source instanceof HTMLCanvasElement&&(this.source.width!==this.size.width||this.source.height!==this.size.height)&&(this.setSourceSize(),this.createTexture()),this.shouldUpdateModelMatrix()}uploadTexture(){this.renderer.uploadTexture(this),this.shouldUpdate=!1}uploadVideoTexture(){this.externalTexture=this.renderer.importExternalTexture(this.source),this.textureBinding.resource=this.externalTexture,this.textureBinding.setBindingType("externalTexture"),this.shouldUpdate=!1,this.sourceUploaded=!0}copy(e){if(this.options.sourceType==="externalVideo"&&e.options.sourceType!=="externalVideo"){L(`${this.options.label}: cannot copy a GPUTexture to a GPUExternalTexture`);return}else if(this.options.sourceType!=="externalVideo"&&e.options.sourceType==="externalVideo"){L(`${this.options.label}: cannot copy a GPUExternalTexture to a GPUTexture`);return}this.options.fromTexture=e,this.options.sourceType=e.options.sourceType,this.options.generateMips=e.options.generateMips,this.options.flipY=e.options.flipY,this.options.format=e.options.format,this.options.premultipliedAlpha=e.options.premultipliedAlpha,this.options.placeholderColor=e.options.placeholderColor,this.options.useExternalTextures=e.options.useExternalTextures,this.sourceLoaded=e.sourceLoaded,this.sourceUploaded=e.sourceUploaded,e.texture&&(e.sourceLoaded&&(this.size=e.size,this.source=e.source,this.resize()),e.sourceUploaded?(this.texture=e.texture,this.textureBinding.resource=this.texture):this.createTexture())}createTexture(){const e={label:this.options.label,format:this.options.format,size:[this.size.width,this.size.height,this.size.depth],dimensions:this.options.viewDimension==="1d"?"1d":this.options.viewDimension==="3d"?"3d":"2d",usage:this.source?GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST|GPUTextureUsage.RENDER_ATTACHMENT:GPUTextureUsage.TEXTURE_BINDING|GPUTextureUsage.COPY_DST};this.options.sourceType!=="externalVideo"&&(e.mipLevelCount=this.options.generateMips?Nr(this.size.width,this.size.height):1,this.texture?.destroy(),this.texture=this.renderer.createTexture(e),this.textureBinding.resource=this.texture),this.shouldUpdate=!0}setSourceSize(){this.size={width:this.source.naturalWidth||this.source.width||this.source.videoWidth,height:this.source.naturalHeight||this.source.height||this.source.videoHeight,depth:1}}async loadImageBitmap(e){const i=await(await fetch(e)).blob();return await createImageBitmap(i,{colorSpaceConversion:"none"})}async loadImage(e){const t=typeof e=="string"?e:e.getAttribute("src");this.options.source=t,this.options.sourceType="image";const i=this.renderer.domTextures.find(s=>s.options.source===t);if(i&&i.texture&&i.sourceUploaded){this.copy(i);return}this.sourceLoaded=!1,this.sourceUploaded=!1,this.source=await this.loadImageBitmap(this.options.source),this.setSourceSize(),this.resize(),this.sourceLoaded=!0,this.createTexture()}onVideoFrameCallback(){this.videoFrameCallbackId&&(this.shouldUpdate=!0,this.source.requestVideoFrameCallback(this.onVideoFrameCallback.bind(this)))}onVideoLoaded(e){this.sourceLoaded||(this.source=e,this.setSourceSize(),this.resize(),this.options.useExternalTextures?(this.options.sourceType="externalVideo",this.texture?.destroy()):(this.options.sourceType="video",this.createTexture()),"requestVideoFrameCallback"in HTMLVideoElement.prototype&&(this.videoFrameCallbackId=this.source.requestVideoFrameCallback(this.onVideoFrameCallback.bind(this))),this.sourceLoaded=!0)}get isVideoSource(){return this.source&&(this.options.sourceType==="video"||this.options.sourceType==="externalVideo")}loadVideo(e){let t;typeof e=="string"?(t=document.createElement("video"),t.src=e):t=e,t.preload="auto",t.muted=!0,t.loop=!0,t.crossOrigin="anonymous",t.setAttribute("playsinline",""),this.options.source=t.src,this.sourceLoaded=!1,this.sourceUploaded=!1,t.readyState>=t.HAVE_ENOUGH_DATA?this.onVideoLoaded(t):t.addEventListener("canplaythrough",this.onVideoLoaded.bind(this,t),{once:!0}),isNaN(t.duration)&&t.load()}loadCanvas(e){this.options.source=e,this.options.sourceType="canvas",this.sourceLoaded=!1,this.sourceUploaded=!1,this.source=e,this.setSourceSize(),this.resize(),this.sourceLoaded=!0,this.createTexture()}onSourceLoaded(e){return e&&(this._onSourceLoadedCallback=e),this}onSourceUploaded(e){return e&&(this._onSourceUploadedCallback=e),this}render(){this.updateMatrixStack(),this.textureMatrix.update(),this.options.sourceType==="externalVideo"&&(this.shouldUpdate=!0),this.isVideoSource&&!this.videoFrameCallbackId&&this.source.readyState>=this.source.HAVE_CURRENT_DATA&&!this.source.paused&&(this.shouldUpdate=!0),this.shouldUpdate&&this.options.sourceType&&this.options.sourceType!=="externalVideo"&&this.uploadTexture()}destroy(){this.videoFrameCallbackId&&this.source.cancelVideoFrameCallback(this.videoFrameCallbackId),this.isVideoSource&&this.source.removeEventListener("canplaythrough",this.onVideoLoaded.bind(this,this.source),{once:!0}),this.renderer.removeDOMTexture(this),this.texture?.destroy(),this.texture=null}}He=new WeakMap,Ye=new WeakMap,ei=new WeakMap,ti=new WeakMap;class ps extends Zt{static{c(this,"TextureBindGroup")}constructor(e,{label:t,index:i=0,bindings:s=[],uniforms:r,storages:a,textures:o=[],samplers:h=[]}={}){const l="TextureBindGroup";if(e=$(e,l),super(e,{label:t,index:i,bindings:s,uniforms:r,storages:a}),this.options={...this.options,textures:[],samplers:[]},o.length)for(const u of o)this.addTexture(u);if(h.length)for(const u of h)this.addSampler(u);this.type=l}addTexture(e){this.textures.push(e),this.addBindings([...e.bindings])}get textures(){return this.options.textures}addSampler(e){this.samplers.push(e),this.addBindings([e.binding])}get samplers(){return this.options.samplers}get shouldCreateBindGroup(){return!this.bindGroup&&!!this.bindings.length&&!this.textures.find(e=>!(e.texture||e.externalTexture))&&!this.samplers.find(e=>!e.sampler)}updateTextures(){for(const e of this.textures)e instanceof Xe&&(e.options.fromTexture&&e.options.fromTexture.sourceUploaded&&!e.sourceUploaded&&e.copy(e.options.fromTexture),e.shouldUpdate&&e.options.sourceType&&e.options.sourceType==="externalVideo"&&e.uploadVideoTexture())}update(){this.updateTextures(),super.update()}destroy(){super.destroy(),this.options.textures=[],this.options.samplers=[]}}class jr extends Xt{static{c(this,"SamplerBinding")}constructor({label:e="Sampler",name:t="sampler",bindingType:i,visibility:s,sampler:r,type:a="filtering"}){i=i??"sampler",super({label:e,name:t,bindingType:i,visibility:s}),this.cacheKey+=`${a},`,this.options={...this.options,sampler:r,type:a},this.resource=r,this.setWGSLFragment()}get resourceLayout(){return{sampler:{type:this.options.type}}}get resourceLayoutCacheKey(){return`sampler,${this.options.type},${this.visibility},`}get resource(){return this.sampler}set resource(e){e&&this.sampler&&(this.shouldResetBindGroup=!0),this.sampler=e}setWGSLFragment(){this.wgslGroupFragment=[`var ${this.name}: ${this.options.type==="comparison"?`${this.bindingType}_comparison`:this.bindingType};`]}}var qr=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$l"),ii=c((n,e,t)=>(qr(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$j"),si=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$l"),ri=c((n,e,t,i)=>(qr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$j"),ni,ai,oi,hi;class fs extends pe{static{c(this,"Camera")}constructor({fov:e=50,near:t=.1,far:i=150,width:s=1,height:r=1,pixelRatio:a=1,onMatricesChanged:o=c(()=>{},"onMatricesChanged")}={}){super(),si(this,ni,void 0),si(this,ai,void 0),si(this,oi,void 0),si(this,hi,void 0),this.uuid=O(),this.position.set(0,0,10),this.up=new y(0,1,0),this.onMatricesChanged=o,this.size={width:1,height:1},this.setPerspective({fov:e,near:t,far:i,width:s,height:r,pixelRatio:a})}setMatrices(){super.setMatrices(),this.matrices={...this.matrices,view:{matrix:new D,shouldUpdate:!0,onUpdate:()=>{this.viewMatrix.copy(this.worldMatrix).invert()}},projection:{matrix:new D,shouldUpdate:!0,onUpdate:()=>this.updateProjectionMatrix()},viewProjection:{matrix:new D,shouldUpdate:!0,onUpdate:()=>this.viewProjectionMatrix.multiplyMatrices(this.projectionMatrix,this.viewMatrix)}}}get viewMatrix(){return this.matrices.view.matrix}set viewMatrix(e){this.matrices.view.matrix=e,this.shouldUpdateViewMatrices()}get projectionMatrix(){return this.matrices.projection.matrix}set projectionMatrix(e){this.matrices.projection.matrix=e,this.shouldUpdateProjectionMatrices()}get viewProjectionMatrix(){return this.matrices.viewProjection.matrix}shouldUpdateViewMatrices(){this.matrices.view.shouldUpdate=!0,this.matrices.viewProjection.shouldUpdate=!0}shouldUpdateProjectionMatrices(){this.matrices.projection.shouldUpdate=!0,this.matrices.viewProjection.shouldUpdate=!0}updateModelMatrix(){super.updateModelMatrix(),this.setVisibleSize(),this.shouldUpdateViewMatrices()}updateWorldMatrix(){super.updateWorldMatrix(),this.shouldUpdateViewMatrices()}updateMatrixStack(){super.updateMatrixStack(),this.matricesNeedUpdate&&this.onMatricesChanged()}get fov(){return ii(this,ni)}set fov(e){e=Math.max(1,Math.min(e??this.fov,179)),e!==this.fov&&(ri(this,ni,e),this.shouldUpdateProjectionMatrices()),this.setVisibleSize(),this.setCSSPerspective()}get near(){return ii(this,ai)}set near(e){e=Math.max(e??this.near,1e-4),e!==this.near&&(ri(this,ai,e),this.shouldUpdateProjectionMatrices())}get far(){return ii(this,oi)}set far(e){e=Math.max(e??this.far,this.near+1),e!==this.far&&(ri(this,oi,e),this.shouldUpdateProjectionMatrices())}get pixelRatio(){return ii(this,hi)}set pixelRatio(e){ri(this,hi,e??this.pixelRatio),this.setCSSPerspective()}setSize({width:e,height:t}){(e!==this.size.width||t!==this.size.height)&&this.shouldUpdateProjectionMatrices(),this.size.width=e,this.size.height=t,this.setVisibleSize(),this.setCSSPerspective()}setPerspective({fov:e=this.fov,near:t=this.near,far:i=this.far,width:s=this.size.width,height:r=this.size.height,pixelRatio:a=this.pixelRatio}={}){this.setSize({width:s,height:r}),this.pixelRatio=a,this.fov=e,this.near=t,this.far=i}setCSSPerspective(){this.CSSPerspective=Math.pow(Math.pow(this.size.width/(2*this.pixelRatio),2)+Math.pow(this.size.height/(2*this.pixelRatio),2),.5)/Math.tan(this.fov*.5*Math.PI/180)}getVisibleSizeAtDepth(e=0){const t=this.position.z;e<t?e-=t:e+=t;const i=this.fov*Math.PI/180,s=2*Math.tan(i/2)*Math.abs(e);return{width:s*this.size.width/this.size.height,height:s}}setVisibleSize(){this.visibleSize=this.getVisibleSizeAtDepth()}lookAt(e=new y,t=this.position){super.lookAt(t,e,this.up)}updateProjectionMatrix(){this.projectionMatrix.makePerspective({fov:this.fov,aspect:this.size.width/this.size.height,near:this.near,far:this.far})}get frustumPlanes(){const e=new D,t=new y;e.copy(this.projectionMatrix).multiply(this.viewMatrix);const{elements:i}=e,s=[new Float32Array(4),new Float32Array(4),new Float32Array(4),new Float32Array(4),new Float32Array(4),new Float32Array(4)];t.set(i[3]+i[0],i[7]+i[4],i[11]+i[8]);let r=t.length();return s[0][0]=t.x/r,s[0][1]=t.y/r,s[0][2]=t.z/r,s[0][3]=(i[15]+i[12])/r,t.set(i[3]-i[0],i[7]-i[4],i[11]-i[8]),r=t.length(),s[1][0]=t.x/r,s[1][1]=t.y/r,s[1][2]=t.z/r,s[1][3]=(i[15]-i[12])/r,t.set(i[3]-i[1],i[7]-i[5],i[11]-i[9]),r=t.length(),s[2][0]=t.x/r,s[2][1]=t.y/r,s[2][2]=t.z/r,s[2][3]=(i[15]-i[13])/r,t.set(i[3]+i[1],i[7]+i[5],i[11]+i[9]),r=t.length(),s[3][0]=t.x/r,s[3][1]=t.y/r,s[3][2]=t.z/r,s[3][3]=(i[15]+i[13])/r,t.set(i[2],i[6],i[10]),r=t.length(),s[4][0]=t.x/r,s[4][1]=t.y/r,s[4][2]=t.z/r,s[4][3]=i[14]/r,t.set(i[3]-i[2],i[7]-i[6],i[11]-i[10]),r=t.length(),s[5][0]=t.x/r,s[5][1]=t.y/r,s[5][2]=t.z/r,s[5][3]=(i[15]-i[14])/r,s}}ni=new WeakMap,ai=new WeakMap,oi=new WeakMap,hi=new WeakMap;class Ke{static{c(this,"Sampler")}constructor(e,{label:t="Sampler",name:i,addressModeU:s="repeat",addressModeV:r="repeat",magFilter:a="linear",minFilter:o="linear",mipmapFilter:h="linear",maxAnisotropy:l=1,type:u="filtering",compare:d=null}={}){this.type="Sampler",this.uuid=O(),e=$(e,t?t+" "+this.type:this.type),this.renderer=e,this.label=t,!i&&!this.renderer.production&&(i="sampler"+this.renderer.samplers.length,L(`Sampler: you are trying to create a sampler without the mandatory name parameter. A default name will be used instead: ${i}`)),this.name=i,this.options={addressModeU:s,addressModeV:r,magFilter:a,minFilter:o,mipmapFilter:h,maxAnisotropy:l,type:u,...d!==null&&{compare:d}},this.createSampler(),this.createBinding()}createSampler(){this.sampler=this.renderer.createSampler(this)}createBinding(){this.binding=new jr({label:this.label,name:this.name,bindingType:"sampler",sampler:this.sampler,type:this.options.type})}}var Hr=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$k"),Qa=c((n,e,t)=>(Hr(n,e,"read from private field"),e.get(n)),"__privateGet$i"),eo=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$k"),to=c((n,e,t,i)=>(Hr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$i"),li;const Yr={label:"Texture",name:"renderTexture",type:"texture",access:"write",fromTexture:null,viewDimension:"2d",sampleCount:1,qualityRatio:1,generateMips:!1,flipY:!1,premultipliedAlpha:!1,autoDestroy:!0};class j{static{c(this,"Texture")}constructor(e,t=Yr){eo(this,li,!0),e=$(e,t.label?t.label+" Texture":"Texture"),this.type="Texture",this.renderer=e,this.uuid=O(),this.options={...Yr,...t},this.options.format==="rgba32float"&&!this.renderer.deviceManager.adapter.features.has("float32-filterable")&&(this.options.format="rgba16float"),t.fromTexture&&(this.options.format=t.fromTexture.texture.format,this.options.sampleCount=t.fromTexture.texture.sampleCount,this.options.viewDimension=t.fromTexture.options.viewDimension),this.options.format||(this.options.format=this.renderer.options.context.format),this.size=this.options.fixedSize?{width:this.options.fixedSize.width*this.options.qualityRatio,height:this.options.fixedSize.height*this.options.qualityRatio,depth:this.options.fixedSize.depth??this.options.viewDimension.indexOf("cube")!==-1?6:1}:{width:Math.floor(this.renderer.canvas.width*this.options.qualityRatio),height:Math.floor(this.renderer.canvas.height*this.options.qualityRatio),depth:this.options.viewDimension.indexOf("cube")!==-1?6:1},this.options.fixedSize&&to(this,li,!1),this.setBindings(),this.renderer.addTexture(this),this.createTexture()}copy(e){this.options.fromTexture=e,this.createTexture()}copyGPUTexture(e){this.size={width:e.width,height:e.height,depth:e.depthOrArrayLayers},this.options.format=e.format,this.options.sampleCount=e.sampleCount,this.texture=e,this.textureBinding.setFormat(this.options.format),this.textureBinding.setMultisampled(this.options.sampleCount>1),this.textureBinding.resource=this.texture}createTexture(){if(!(!this.size.width||!this.size.height)){if(this.options.fromTexture){this.copyGPUTexture(this.options.fromTexture.texture);return}this.texture?.destroy(),this.texture=this.renderer.createTexture({label:this.options.label,format:this.options.format,size:[this.size.width,this.size.height,this.size.depth??1],dimensions:this.options.viewDimension,sampleCount:this.options.sampleCount,mipLevelCount:this.options.generateMips?Nr(this.size.width,this.size.height,this.size.depth??1):1,usage:Ja(this.options.usage,this.options.type)}),this.textureBinding.resource=this.texture}}uploadSource({source:e,width:t=this.size.width,height:i=this.size.height,depth:s=this.size.depth,origin:r=[0,0,0],colorSpace:a="srgb"}){this.renderer.device.queue.copyExternalImageToTexture({source:e,flipY:this.options.flipY},{texture:this.texture,premultipliedAlpha:this.options.premultipliedAlpha,origin:r,colorSpace:a},[t,i,s]),this.texture.mipLevelCount>1&&this.renderer.generateMips(this)}uploadData({width:e=this.size.width,height:t=this.size.height,depth:i=this.size.depth,origin:s=[0,0,0],data:r=new Float32Array(e*t*4)}){this.renderer.device.queue.writeTexture({texture:this.texture,origin:s},r,{bytesPerRow:e*r.BYTES_PER_ELEMENT*4,rowsPerImage:t},[e,t,i]),this.texture.mipLevelCount>1&&this.renderer.generateMips(this)}setBindings(){this.bindings=[new cs({label:this.options.label+": "+this.options.name+" texture",name:this.options.name,bindingType:this.options.type,visibility:this.options.visibility,texture:this.texture,format:this.options.format,viewDimension:this.options.viewDimension,multisampled:this.options.sampleCount>1})]}get textureBinding(){return this.bindings[0]}resize(e=null){Qa(this,li)&&(e||(e={width:Math.floor(this.renderer.canvas.width*this.options.qualityRatio),height:Math.floor(this.renderer.canvas.height*this.options.qualityRatio),depth:1}),!(e.width===this.size.width&&e.height===this.size.height&&e.depth===this.size.depth)&&(this.size=e,this.createTexture()))}destroy(){this.renderer.removeTexture(this),this.options.fromTexture||this.texture?.destroy(),this.texture=null}}li=new WeakMap;class ms{static{c(this,"Material")}constructor(e,t){this.type="Material",e=$(e,this.type),this.renderer=e,this.uuid=O();const{shaders:i,label:s,useAsyncPipeline:r,uniforms:a,storages:o,bindings:h,bindGroups:l,samplers:u,textures:d,domTextures:f}=t;this.options={shaders:i,label:s||this.constructor.name,useAsyncPipeline:r===void 0?!0:r,...a!==void 0&&{uniforms:a},...o!==void 0&&{storages:o},...h!==void 0&&{bindings:h},...l!==void 0&&{bindGroups:l},...u!==void 0&&{samplers:u},...d!==void 0&&{textures:d},...f!==void 0&&{domTextures:f}},this.bindGroups=[],this.texturesBindGroups=[],this.clonedBindGroups=[],this.setBindGroups(),this.setTextures(),this.setSamplers()}setRenderer(e){e=$(e,this.type),this.renderer=e}compileMaterial(){const e=this.texturesBindGroup.bindings.length?1:0;this.bindGroups.length>=this.inputsBindGroups.length+e||this.createBindGroups()}get ready(){return!!(this.renderer.ready&&this.pipelineEntry&&this.pipelineEntry.pipeline&&this.pipelineEntry.ready)}get cacheKey(){let e="";return this.bindGroups.forEach(t=>{t.bindings.forEach(i=>{e+=i.name+","}),e+=t.pipelineCacheKey}),e}loseContext(){for(const e of this.domTextures)e.texture=null,e.sourceUploaded=!1;for(const e of this.textures)e.texture=null;[...this.bindGroups,...this.clonedBindGroups,...this.inputsBindGroups].forEach(e=>e.loseContext()),this.pipelineEntry.pipeline=null}restoreContext(){for(const e of this.samplers)e.createSampler(),e.binding.resource=e.sampler;for(const e of this.domTextures)e.createTexture(),e.resize();for(const e of this.textures)e.resize(e.size);[...this.bindGroups,...this.clonedBindGroups,...this.inputsBindGroups].forEach(e=>{e.restoreContext()})}getShaderCode(e="full"){return this.pipelineEntry?(e=(()=>{switch(e){case"vertex":case"fragment":case"compute":case"full":return e;default:return"full"}})(),this.pipelineEntry.shaders[e].code):""}getAddedShaderCode(e="vertex"){return this.pipelineEntry?(e=(()=>{switch(e){case"vertex":case"fragment":case"compute":return e;default:return"vertex"}})(),this.pipelineEntry.shaders[e].head):""}setBindGroups(){if(this.uniforms={},this.storages={},this.inputsBindGroups=[],this.inputsBindings=new Map,this.options.uniforms||this.options.storages||this.options.bindings){const e=new Zt(this.renderer,{label:this.options.label+": Bindings bind group",uniforms:this.options.uniforms,storages:this.options.storages,bindings:this.options.bindings});this.processBindGroupBindings(e),this.inputsBindGroups.push(e),e.consumers.add(this.uuid)}this.options.bindGroups?.forEach(e=>{this.processBindGroupBindings(e),this.inputsBindGroups.push(e),e.consumers.add(this.uuid)})}get texturesBindGroup(){return this.texturesBindGroups[0]}processBindGroupBindings(e){for(const t of e.bindings)t.bindingType==="uniform"&&(this.uniforms={...this.uniforms,[t.name]:t.inputs}),t.bindingType==="storage"&&(this.storages={...this.storages,[t.name]:t.inputs}),this.inputsBindings.set(t.name,t)}createBindGroups(){this.texturesBindGroup.shouldCreateBindGroup&&(this.texturesBindGroup.setIndex(this.bindGroups.length),this.texturesBindGroup.createBindGroup(),this.bindGroups.push(this.texturesBindGroup));for(const e of this.inputsBindGroups)e.shouldCreateBindGroup&&(e.setIndex(this.bindGroups.length),e.createBindGroup(),this.bindGroups.push(e));this.options.bindGroups?.forEach(e=>{if(!e.shouldCreateBindGroup&&!this.bindGroups.find(t=>t.uuid===e.uuid)&&(e.setIndex(this.bindGroups.length),this.bindGroups.push(e)),e instanceof ps&&!this.texturesBindGroups.find(t=>t.uuid===e.uuid)){this.texturesBindGroups.push(e);for(const t of e.textures)t instanceof Xe&&!this.domTextures.find(i=>i.uuid===t.uuid)?this.domTextures.push(t):t instanceof j&&!this.textures.find(i=>i.uuid===t.uuid)&&this.textures.push(t)}})}cloneBindGroup({bindGroup:e,bindings:t=[],keepLayout:i=!0}){if(!e)return null;const s=e.clone({bindings:t,keepLayout:i});return this.clonedBindGroups.push(s),s}getBindGroupByBindingName(e=""){return(this.ready?this.bindGroups:this.inputsBindGroups).find(t=>t.bindings.find(i=>i.name===e))}destroyBindGroup(e){e.consumers.delete(this.uuid),e.consumers.size||e.destroy()}destroyBindGroups(){this.bindGroups.forEach(e=>this.destroyBindGroup(e)),this.clonedBindGroups.forEach(e=>this.destroyBindGroup(e)),this.texturesBindGroups.forEach(e=>this.destroyBindGroup(e)),this.texturesBindGroups=[],this.inputsBindGroups=[],this.bindGroups=[],this.clonedBindGroups=[]}updateBindGroups(){for(const e of this.bindGroups)this.updateBindGroup(e)}updateBindGroup(e){e.update(),e.needsPipelineFlush&&this.pipelineEntry.ready&&(this.pipelineEntry.flushPipelineEntry(this.bindGroups),e.needsPipelineFlush=!1)}getBindingByName(e=""){return this.inputsBindings.get(e)}getBufferBindingByName(e=""){const t=this.getBindingByName(e);return t&&"buffer"in t?t:void 0}shouldUpdateInputsBindings(e,t){if(!e)return;const i=this.getBindingByName(e);i&&(t?i.shouldUpdateBinding(t):Object.keys(i.inputs).forEach(s=>i.shouldUpdateBinding(s)))}setTextures(){this.domTextures=[],this.textures=[],this.texturesBindGroups.push(new ps(this.renderer,{label:this.options.label+": Textures bind group"})),this.texturesBindGroup.consumers.add(this.uuid),this.options.domTextures?.forEach(e=>{this.addTexture(e)}),this.options.textures?.forEach(e=>{this.addTexture(e)})}addTexture(e){e instanceof Xe?this.domTextures.push(e):e instanceof j&&this.textures.push(e),(this.options.shaders.vertex&&this.options.shaders.vertex.code.indexOf(e.options.name)!==-1||this.options.shaders.fragment&&this.options.shaders.fragment.code.indexOf(e.options.name)!==-1||this.options.shaders.compute&&this.options.shaders.compute.code.indexOf(e.options.name)!==-1)&&this.texturesBindGroup.addTexture(e)}destroyTexture(e){if(e.options.cache||!e.options.autoDestroy)return;const t=this.renderer.getObjectsByTexture(e);(!t||!t.some(s=>s.material.uuid!==this.uuid))&&e.destroy()}destroyTextures(){this.domTextures?.forEach(e=>this.destroyTexture(e)),this.textures?.forEach(e=>this.destroyTexture(e)),this.domTextures=[],this.textures=[]}setSamplers(){if(this.samplers=[],this.options.samplers?.forEach(t=>{this.addSampler(t)}),!this.samplers.find(t=>t.name==="defaultSampler")){const t=new Ke(this.renderer,{label:"Default sampler",name:"defaultSampler"});this.addSampler(t)}}addSampler(e){this.samplers.push(e),(this.options.shaders.vertex&&this.options.shaders.vertex.code.indexOf(e.name)!==-1||this.options.shaders.fragment&&this.options.shaders.fragment.code.indexOf(e.name)!==-1||this.options.shaders.compute&&this.options.shaders.compute.code.indexOf(e.name)!==-1)&&this.texturesBindGroup.addSampler(e)}async getBufferResult(e){return await e.mapBufferAsync()}async getBufferBindingResultByBindingName(e=""){const t=this.getBufferBindingByName(e);if(t&&"buffer"in t){const i=this.renderer.copyBufferToBuffer({srcBuffer:t.buffer});return await this.getBufferResult(i)}else return new Float32Array(0)}async getBufferElementResultByNames({bindingName:e,bufferElementName:t}){const i=await this.getBufferBindingResultByBindingName(e);if(!t||i.length)return i;{const s=this.getBufferBindingByName(e);return s?s.extractBufferElementDataFromBufferResult({result:i,bufferElementName:t}):i}}onBeforeRender(){this.compileMaterial();for(const e of this.domTextures)e.render();this.updateBindGroups()}setPipeline(e){this.renderer.pipelineManager.setCurrentPipeline(e,this.pipelineEntry)}setActiveBindGroups(e){this.renderer.pipelineManager.setActiveBindGroups(e,this.bindGroups)}render(e){this.ready&&(this.setPipeline(e),this.setActiveBindGroups(e))}destroy(){this.destroyBindGroups(),this.destroyTextures()}}class Xr extends ms{static{c(this,"ComputeMaterial")}constructor(e,t){const i="ComputeMaterial";e=$(e,i),super(e,t),this.type=i,this.renderer=e;let{shaders:s,dispatchSize:r}=t;(!s||!s.compute)&&(s={compute:{code:"",entryPoint:"main"}}),s.compute.code||(s.compute.code="@compute @workgroup_size(1) fn main(){}"),s.compute.entryPoint||(s.compute.entryPoint="main"),this.options={...this.options,shaders:s,...t.dispatchSize!==void 0&&{dispatchSize:t.dispatchSize}},r||(r=1),Array.isArray(r)?(r[0]=Math.ceil(r[0]??1),r[1]=Math.ceil(r[1]??1),r[2]=Math.ceil(r[2]??1)):isNaN(r)||(r=[Math.ceil(r),1,1]),this.dispatchSize=r}setPipelineEntry(){this.pipelineEntry=this.renderer.pipelineManager.createComputePipeline(this),this.bindGroups.length!==this.pipelineEntry.bindGroups.length&&this.createBindGroups()}async compilePipelineEntry(){await this.pipelineEntry.compilePipelineEntry()}async compileMaterial(){this.ready||(super.compileMaterial(),this.pipelineEntry||this.setPipelineEntry(),this.pipelineEntry&&this.pipelineEntry.canCompile&&await this.compilePipelineEntry())}getShaderCode(e="compute"){return super.getShaderCode(e)}getAddedShaderCode(e="compute"){return super.getAddedShaderCode(e)}useCustomRender(e){e&&(this._useCustomRenderCallback=e)}render(e){if(this.ready)if(this.setPipeline(e),this._useCustomRenderCallback!==void 0)this._useCustomRenderCallback(e);else{for(const t of this.bindGroups)e.setBindGroup(t.index,t.bindGroup);e.dispatchWorkgroups(this.dispatchSize[0],this.dispatchSize[1],this.dispatchSize[2])}}copyBufferToResult(e){for(const t of this.bindGroups)t.bufferBindings.forEach(i=>{i.shouldCopyResult&&this.renderer.copyBufferToBuffer({srcBuffer:i.buffer,dstBuffer:i.resultBuffer,commandEncoder:e})})}async getComputeResult({bindingName:e="",bufferElementName:t=""}){const i=this.getBufferBindingByName(e);if(i&&"resultBuffer"in i){const s=await this.getBufferResult(i.resultBuffer);return t&&s.length?i.extractBufferElementDataFromBufferResult({result:s,bufferElementName:t}):s}else return new Float32Array(0)}}var Kr=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$j"),Jr=c((n,e,t)=>(Kr(n,e,"read from private field"),e.get(n)),"__privateGet$h"),io=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$j"),so=c((n,e,t,i)=>(Kr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$h"),Bt;let ro=0;class ui{static{c(this,"ComputePass")}constructor(e,t={}){io(this,Bt,!0),this._onReadyCallback=()=>{},this._onBeforeRenderCallback=()=>{},this._onRenderCallback=()=>{},this._onAfterRenderCallback=()=>{},this._onAfterResizeCallback=()=>{};const i="ComputePass";e=$(e,t.label?`${t.label} ${i}`:i),t.label=t.label??"ComputePass "+e.computePasses?.length,this.renderer=e,this.type=i,this.uuid=O(),Object.defineProperty(this,"index",{value:ro++});const{label:s,shaders:r,renderOrder:a,uniforms:o,storages:h,bindings:l,bindGroups:u,samplers:d,domTextures:f,textures:p,autoRender:m,useAsyncPipeline:g,texturesOptions:v,dispatchSize:x}=t;this.options={label:s,shaders:r,...m!==void 0&&{autoRender:m},...a!==void 0&&{renderOrder:a},...x!==void 0&&{dispatchSize:x},useAsyncPipeline:g===void 0?!0:g,texturesOptions:v},this.renderOrder=a??0,m!==void 0&&so(this,Bt,m),this.userData={},this.ready=!1,this.setMaterial({label:this.options.label,shaders:this.options.shaders,uniforms:o,storages:h,bindings:l,bindGroups:u,samplers:d,textures:p,domTextures:f,useAsyncPipeline:g,dispatchSize:x}),this.addToScene(!0)}get ready(){return this._ready}set ready(e){e&&this._onReadyCallback&&this._onReadyCallback(),this._ready=e}addToScene(e=!1){e&&this.renderer.computePasses.push(this),Jr(this,Bt)&&this.renderer.scene.addComputePass(this)}removeFromScene(e=!1){Jr(this,Bt)&&this.renderer.scene.removeComputePass(this),e&&(this.renderer.computePasses=this.renderer.computePasses.filter(t=>t.uuid!==this.uuid))}setRenderer(e){if(e=e&&e.renderer||e,!e||!(e.type==="GPURenderer"||e.type==="GPUCameraRenderer"||e.type==="GPUCurtainsRenderer")){L(`${this.options.label}: Cannot set ${e} as a renderer because it is not of a valid Renderer type.`);return}this.material?.setRenderer(e),this.removeFromScene(!0),this.renderer=e,this.addToScene(!0)}setMaterial(e){this.useMaterial(new Xr(this.renderer,e))}useMaterial(e){this.material=e}loseContext(){this.material.loseContext()}restoreContext(){this.material.restoreContext()}get domTextures(){return this.material?.domTextures||[]}get textures(){return this.material?.textures||[]}createDOMTexture(e){e.name||(e.name="texture"+(this.textures.length+this.domTextures.length)),e.label||(e.label=this.options.label+" "+e.name);const t=new Xe(this.renderer,{...e,...this.options.texturesOptions});return this.addTexture(t),t}createTexture(e){e.name||(e.name="texture"+(this.textures.length+this.domTextures.length));const t=new j(this.renderer,e);return this.addTexture(t),t}addTexture(e){this.material.addTexture(e)}get uniforms(){return this.material?.uniforms}get storages(){return this.material?.storages}resize(){this._onAfterResizeCallback&&this._onAfterResizeCallback()}onReady(e){return e&&(this._onReadyCallback=e),this}onBeforeRender(e){return e&&(this._onBeforeRenderCallback=e),this}onRender(e){return e&&(this._onRenderCallback=e),this}onAfterRender(e){return e&&(this._onAfterRenderCallback=e),this}useCustomRender(e){return this.material.useCustomRender(e),this}onAfterResize(e){return e&&(this._onAfterResizeCallback=e),this}onBeforeRenderPass(){this.renderer.ready&&(this._onBeforeRenderCallback&&this._onBeforeRenderCallback(),this.material.onBeforeRender(),this.material&&this.material.ready&&!this.ready&&(this.ready=!0))}onRenderPass(e){this.material.ready&&(this._onRenderCallback&&this._onRenderCallback(),this.material.render(e))}onAfterRenderPass(){this._onAfterRenderCallback&&this._onAfterRenderCallback()}render(e){this.onBeforeRenderPass(),this.renderer.ready&&(!this.renderer.production&&e.pushDebugGroup(this.options.label),this.onRenderPass(e),!this.renderer.production&&e.popDebugGroup(),this.onAfterRenderPass())}copyBufferToResult(e){this.material?.copyBufferToResult(e)}async getComputeResult({bindingName:e,bufferElementName:t}){return await this.material?.getComputeResult({bindingName:e,bufferElementName:t})}remove(){this.removeFromScene(!0),this.destroy()}destroy(){this.material?.destroy()}}Bt=new WeakMap;const me=[new y,new y,new y,new y,new y,new y,new y,new y];class Pe{static{c(this,"Box3")}constructor(e=new y(1/0),t=new y(-1/0)){this.min=e,this.max=t}set(e=new y(1/0),t=new y(-1/0)){return this.min.copy(e),this.max.copy(t),this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}copy(e){return this.set(e.min.clone(),e.max.clone()),this}clone(){return new Pe().copy(this)}get center(){return this.max.clone().add(this.min).multiplyScalar(.5)}get size(){return this.max.clone().sub(this.min)}get radius(){return this.max.distance(this.min)*.5}applyMat4(e=new D,t=new Pe){if(this.isEmpty())return this;const i=[];this.min.z===this.max.z?(i[0]=me[0].set(this.min.x,this.min.y,this.min.z).applyMat4(e),i[1]=me[2].set(this.min.x,this.max.y,this.min.z).applyMat4(e),i[2]=me[4].set(this.max.x,this.min.y,this.min.z).applyMat4(e),i[3]=me[6].set(this.max.x,this.max.y,this.min.z).applyMat4(e)):(i[0]=me[0].set(this.min.x,this.min.y,this.min.z).applyMat4(e),i[1]=me[1].set(this.min.x,this.min.y,this.max.z).applyMat4(e),i[2]=me[2].set(this.min.x,this.max.y,this.min.z).applyMat4(e),i[3]=me[3].set(this.min.x,this.max.y,this.max.z).applyMat4(e),i[4]=me[4].set(this.max.x,this.min.y,this.min.z).applyMat4(e),i[5]=me[5].set(this.max.x,this.min.y,this.max.z).applyMat4(e),i[6]=me[6].set(this.max.x,this.max.y,this.min.z).applyMat4(e),i[7]=me[7].set(this.max.x,this.max.y,this.max.z).applyMat4(e));for(let s=0,r=i.length;s<r;s++)t.min.min(i[s]),t.max.max(i[s]);return t}}const Zr={top:0,right:0,bottom:0,left:0};class Qr{static{c(this,"DOMFrustum")}constructor({boundingBox:e=new Pe,modelViewProjectionMatrix:t=new D,containerBoundingRect:i={top:0,right:0,bottom:0,left:0,width:0,height:0,x:0,y:0},DOMFrustumMargins:s=Zr,onReEnterView:r=c(()=>{},"onReEnterView"),onLeaveView:a=c(()=>{},"onLeaveView")}){this.boundingBox=e,this.clipSpaceOBB=new Pe,this.modelViewProjectionMatrix=t,this.containerBoundingRect=i,this.DOMFrustumMargins={...Zr,...s},this.clipSpaceBoundingRect={top:0,left:0,width:0,height:0},this.projectedBoundingRect={top:0,right:0,bottom:0,left:0,width:0,height:0,x:0,y:0},this.onReEnterView=r,this.onLeaveView=a,this.isIntersecting=!1}setContainerBoundingRect(e){this.containerBoundingRect=e}get DOMFrustumBoundingRect(){return{top:this.projectedBoundingRect.top-this.DOMFrustumMargins.top,right:this.projectedBoundingRect.right+this.DOMFrustumMargins.right,bottom:this.projectedBoundingRect.bottom+this.DOMFrustumMargins.bottom,left:this.projectedBoundingRect.left-this.DOMFrustumMargins.left}}computeClipSpaceOBB(){this.clipSpaceOBB.set(),this.boundingBox.applyMat4(this.modelViewProjectionMatrix,this.clipSpaceOBB)}setDocumentCoordsFromClipSpaceOBB(){this.computeClipSpaceOBB(),this.clipSpaceBoundingRect={top:this.clipSpaceOBB.max.y,left:this.clipSpaceOBB.min.x,width:this.clipSpaceOBB.max.x-this.clipSpaceOBB.min.x,height:this.clipSpaceOBB.max.y-this.clipSpaceOBB.min.y};const e=(this.clipSpaceOBB.min.x+1)*.5,t=(this.clipSpaceOBB.max.x+1)*.5,i=1-(this.clipSpaceOBB.min.y+1)*.5,s=1-(this.clipSpaceOBB.max.y+1)*.5,{width:r,height:a,top:o,left:h}=this.containerBoundingRect;this.projectedBoundingRect={left:e*r+h,x:e*r+h,top:s*a+o,y:s*a+o,right:t*r+h,bottom:i*a+o,width:t*r+h-(e*r+h),height:i*a+o-(s*a+o)}}setDocumentCoordsFromClipSpaceSphere(e={center:new y,radius:0}){this.clipSpaceBoundingRect={top:e.center.y+e.radius,left:e.center.x-e.radius,width:e.radius*2,height:e.radius*2};const t=(e.center.x+1)*.5,i=1-(e.center.y+1)*.5,{width:s,height:r,top:a,left:o}=this.containerBoundingRect;this.projectedBoundingRect.width=e.radius*r,this.projectedBoundingRect.height=e.radius*r,this.projectedBoundingRect.left=t*s+o-this.projectedBoundingRect.width*.5,this.projectedBoundingRect.x=this.projectedBoundingRect.left,this.projectedBoundingRect.top=i*r+a-this.projectedBoundingRect.height*.5,this.projectedBoundingRect.y=this.projectedBoundingRect.top,this.projectedBoundingRect.right=this.projectedBoundingRect.left+this.projectedBoundingRect.width,this.projectedBoundingRect.bottom=this.projectedBoundingRect.top+this.projectedBoundingRect.height}intersectsContainer(){Math.round(this.DOMFrustumBoundingRect.right)<=this.containerBoundingRect.left||Math.round(this.DOMFrustumBoundingRect.left)>=this.containerBoundingRect.left+this.containerBoundingRect.width||Math.round(this.DOMFrustumBoundingRect.bottom)<=this.containerBoundingRect.top||Math.round(this.DOMFrustumBoundingRect.top)>=this.containerBoundingRect.top+this.containerBoundingRect.height?(this.isIntersecting&&this.onLeaveView(),this.isIntersecting=!1):(this.isIntersecting||this.onReEnterView(),this.isIntersecting=!0)}}class gs{static{c(this,"Geometry")}constructor({verticesOrder:e="ccw",topology:t="triangle-list",instancesCount:i=1,vertexBuffers:s=[],mapBuffersAtCreation:r=!0}={}){this.verticesCount=0,this.verticesOrder=e,this.topology=t,this.instancesCount=i,this.ready=!1,this.boundingBox=new Pe,this.type="Geometry",this.uuid=O(),this.indirectDraw=null,this.vertexBuffers=[],this.consumers=new Set,this.options={verticesOrder:e,topology:t,instancesCount:i,vertexBuffers:s,mapBuffersAtCreation:r};const a=s.find(o=>o.name==="attributes");!s.length||!a?this.addVertexBuffer({name:"attributes"}):a&&s.sort((o,h)=>{const l=o.name!=="attributes"?1/0:-1,u=h.name!=="attributes"?1/0:-1;return l-u});for(const o of s)this.addVertexBuffer({stepMode:o.stepMode??"vertex",name:o.name,attributes:o.attributes,...o.array&&{array:o.array},...o.buffer&&{buffer:o.buffer},...o.bufferOffset&&{bufferOffset:o.bufferOffset},...o.bufferSize&&{bufferSize:o.bufferSize}});a&&this.setWGSLFragment()}loseContext(){this.ready=!1;for(const e of this.vertexBuffers)e.buffer.destroy()}restoreContext(e){if(!this.ready){for(const t of this.vertexBuffers)!t.buffer.GPUBuffer&&t.buffer.consumers.size===0&&(t.buffer.createBuffer(e),this.uploadBuffer(e,t)),t.buffer.consumers.add(this.uuid);this.ready=!0}}addVertexBuffer({stepMode:e="vertex",name:t,attributes:i=[],buffer:s=null,array:r=null,bufferOffset:a=0,bufferSize:o=null}={}){s=s||new qe;const h={name:t??"attributes"+this.vertexBuffers.length,stepMode:e,arrayStride:0,bufferLength:0,attributes:[],buffer:s,array:r,bufferOffset:a,bufferSize:o};return i?.forEach(l=>{this.setAttribute({vertexBuffer:h,...l})}),this.vertexBuffers.push(h),h}getVertexBufferByName(e=""){return this.vertexBuffers.find(t=>t.name===e)}setAttribute({vertexBuffer:e=this.vertexBuffers[0],name:t,type:i="vec3f",bufferFormat:s="float32x3",size:r=3,array:a=new Float32Array(this.verticesCount*r),verticesStride:o=1}){const h=e.attributes,l=h.length;t||(t="geometryAttribute"+l),t==="position"&&(i!=="vec3f"||s!=="float32x3"||r!==3)&&(L(`Geometry 'position' attribute must have this exact properties set:
	type: 'vec3f',
	bufferFormat: 'float32x3',
	size: 3`),i="vec3f",s="float32x3",r=3);let u=a.length;const d=u/r;t==="position"&&(this.verticesCount=d),e.stepMode==="vertex"&&this.verticesCount&&this.verticesCount!==d*o?te(`Geometry vertex attribute error. Attribute array of size ${r} must be of length: ${this.verticesCount*r}, current given: ${a.length}. (${this.verticesCount} vertices).`):e.stepMode==="instance"&&d!==this.instancesCount&&(e.buffer?u=this.instancesCount*r:te(`Geometry instance attribute error. Attribute array of size ${r} must be of length: ${this.instancesCount*r}, current given: ${a.length}. (${this.instancesCount} instances).`));const f={name:t,type:i,bufferFormat:s,size:r,bufferLength:u,offset:l?h.reduce((p,m)=>p+m.bufferLength,0):0,bufferOffset:l?h[l-1].bufferOffset+h[l-1].size*4:0,array:a,verticesStride:o};e.bufferLength+=f.bufferLength*o,e.arrayStride+=f.size,e.attributes.push(f)}get shouldCompute(){return this.vertexBuffers.length&&!this.vertexBuffers[0].array}getAttributeByName(e){let t;for(const i of this.vertexBuffers)if(t=i.attributes.find(s=>s.name===e),t)break;return t}computeNormalFromTriangle(e,t,i,s,r,a){s.copy(t).sub(e),r.copy(i).sub(e),a.crossVectors(s,r).normalize()}computeFlatNormals(){const e=this.getAttributeByName("position"),t=new y,i=new y,s=new y,r=new y,a=new y,o=new y,h=e.array.length,l=new Float32Array(h);for(let u=0;u<h;u+=e.size*3){t.set(e.array[u],e.array[u+1],e.array[u+2]),i.set(e.array[u+3],e.array[u+4],e.array[u+5]),s.set(e.array[u+6],e.array[u+7],e.array[u+8]),this.computeNormalFromTriangle(t,i,s,r,a,o);for(let d=0;d<3;d++)l[u+d*3]=o.x,l[u+1+d*3]=o.y,l[u+2+d*3]=o.z}this.setAttribute({name:"normal",type:"vec3f",bufferFormat:"float32x3",size:3,array:l})}computeGeometry(){this.ready||(this.vertexBuffers.forEach((e,t)=>{if(t===0){const r=e.attributes.find(o=>o.name==="position");r||te("Geometry must have a 'position' attribute"),(r.type!=="vec3f"||r.bufferFormat!=="float32x3"||r.size!==3)&&(L(`Geometry 'position' attribute must have this exact properties set:
	type: 'vec3f',
	bufferFormat: 'float32x3',
	size: 3`),r.type="vec3f",r.bufferFormat="float32x3",r.size=3),e.attributes.find(o=>o.name==="normal")||(this.computeFlatNormals(),this.setWGSLFragment())}e.array=new Float32Array(e.bufferLength);let i=0,s=0;for(let r=0;r<e.bufferLength;r+=e.arrayStride){for(let a=0;a<e.attributes.length;a++){const{name:o,size:h,array:l,verticesStride:u}=e.attributes[a];for(let d=0;d<h;d++){const f=l[Math.floor(s/u)*h+d];e.array[i]=f??0,o==="position"&&(d%3===0?(this.boundingBox.min.x>f&&(this.boundingBox.min.x=f),this.boundingBox.max.x<f&&(this.boundingBox.max.x=f)):d%3===1?(this.boundingBox.min.y>f&&(this.boundingBox.min.y=f),this.boundingBox.max.y<f&&(this.boundingBox.max.y=f)):d%3===2&&(this.boundingBox.min.z>f&&(this.boundingBox.min.z=f),this.boundingBox.max.z<f&&(this.boundingBox.max.z=f))),i++}}s++}}),this.wgslStructFragment||this.setWGSLFragment())}setWGSLFragment(){let e=-1;this.wgslStructFragment=`struct Attributes {
	@builtin(vertex_index) vertexIndex : u32,
	@builtin(instance_index) instanceIndex : u32,${this.vertexBuffers.map(t=>t.attributes.map(i=>(e++,`
	@location(${e}) ${i.name}: ${i.type}`))).join(",")}
};`,this.layoutCacheKey=this.vertexBuffers.map(t=>t.name+","+t.attributes.map(i=>`${i.name},${i.size}`)).join(",")+","}createBuffers({renderer:e,label:t=this.type}){if(!this.ready){for(const i of this.vertexBuffers)i.bufferSize||(i.bufferSize=i.array.length*i.array.constructor.BYTES_PER_ELEMENT),!i.buffer.GPUBuffer&&!i.buffer.consumers.size&&(i.buffer.createBuffer(e,{label:t+": "+i.name+" buffer",size:i.bufferSize,usage:this.options.mapBuffersAtCreation?["vertex"]:["copyDst","vertex"],mappedAtCreation:this.options.mapBuffersAtCreation}),this.uploadBuffer(e,i)),i.buffer.consumers.add(this.uuid);this.ready=!0}}uploadBuffer(e,t){this.options.mapBuffersAtCreation?(new t.array.constructor(t.buffer.GPUBuffer.getMappedRange()).set(t.array),t.buffer.GPUBuffer.unmap()):e.queueWriteBuffer(t.buffer.GPUBuffer,0,t.array)}useIndirectBuffer({buffer:e,offset:t=0}){this.indirectDraw={buffer:e,offset:t}}setGeometryBuffers(e){this.vertexBuffers.forEach((t,i)=>{e.setVertexBuffer(i,t.buffer.GPUBuffer,t.bufferOffset,t.bufferSize)})}drawGeometry(e){this.indirectDraw&&this.indirectDraw.buffer&&this.indirectDraw.buffer.GPUBuffer?e.drawIndirect(this.indirectDraw.buffer.GPUBuffer,this.indirectDraw.offset):e.draw(this.verticesCount,this.instancesCount)}render(e){this.ready&&(this.setGeometryBuffers(e),this.drawGeometry(e))}destroy(e=null){this.ready=!1;for(const t of this.vertexBuffers)t.buffer.consumers.delete(this.uuid),t.buffer.consumers.size||t.buffer.destroy(),t.array=null,e&&e.removeBuffer(t.buffer)}}class Ct extends gs{static{c(this,"IndexedGeometry")}constructor({verticesOrder:e="ccw",topology:t="triangle-list",instancesCount:i=1,vertexBuffers:s=[],mapBuffersAtCreation:r=!0}={}){super({verticesOrder:e,topology:t,instancesCount:i,vertexBuffers:s,mapBuffersAtCreation:r}),this.type="IndexedGeometry"}loseContext(){super.loseContext(),this.indexBuffer&&this.indexBuffer.buffer.destroy()}restoreContext(e){this.ready||(this.indexBuffer.buffer.GPUBuffer||(this.indexBuffer.buffer.createBuffer(e),this.uploadBuffer(e,this.indexBuffer),this.indexBuffer.buffer.consumers.add(this.uuid)),super.restoreContext(e))}computeFlatNormals(){const e=this.getAttributeByName("position"),t=new y,i=new y,s=new y,r=new y,a=new y,o=new y,h=e.array.length,l=new Float32Array(h),u=this.indexBuffer.array.length;for(let d=0;d<u;d+=3){const f=this.indexBuffer.array[d]*3,p=this.indexBuffer.array[d+1]*3,m=this.indexBuffer.array[d+2]*3;if(!(h<f+2)&&(t.set(e.array[f],e.array[f+1],e.array[f+2]),!(h<p+2)&&(i.set(e.array[p],e.array[p+1],e.array[p+2]),!(h<m+2)))){s.set(e.array[m],e.array[m+1],e.array[m+2]),this.computeNormalFromTriangle(t,i,s,r,a,o);for(let g=0;g<3;g++)l[this.indexBuffer.array[d+g]*3]=o.x,l[this.indexBuffer.array[d+g]*3+1]=o.y,l[this.indexBuffer.array[d+g]*3+2]=o.z}}this.setAttribute({name:"normal",type:"vec3f",bufferFormat:"float32x3",size:3,array:l})}get useUint16IndexArray(){return this.verticesCount<256*256}setIndexBuffer({bufferFormat:e="uint32",array:t=new Uint32Array(0),buffer:i=new qe,bufferOffset:s=0,bufferSize:r=null}){this.indexBuffer={array:t,bufferFormat:e,bufferLength:t.length,buffer:i,bufferOffset:s,bufferSize:r!==null?r:t.length*t.constructor.BYTES_PER_ELEMENT}}createBuffers({renderer:e,label:t=this.type}){this.indexBuffer.buffer.GPUBuffer||(this.indexBuffer.buffer.createBuffer(e,{label:t+": index buffer",size:this.indexBuffer.array.byteLength,usage:this.options.mapBuffersAtCreation?["index"]:["copyDst","index"],mappedAtCreation:this.options.mapBuffersAtCreation}),this.uploadBuffer(e,this.indexBuffer)),this.indexBuffer.buffer.consumers.add(this.uuid),super.createBuffers({renderer:e,label:t})}setGeometryBuffers(e){super.setGeometryBuffers(e),e.setIndexBuffer(this.indexBuffer.buffer.GPUBuffer,this.indexBuffer.bufferFormat,this.indexBuffer.bufferOffset,this.indexBuffer.bufferSize)}drawGeometry(e){this.indirectDraw&&this.indirectDraw.buffer&&this.indirectDraw.buffer.GPUBuffer?e.drawIndexedIndirect(this.indirectDraw.buffer.GPUBuffer,this.indirectDraw.offset):e.drawIndexed(this.indexBuffer.bufferLength,this.instancesCount)}destroy(e=null){super.destroy(e),this.indexBuffer&&(this.indexBuffer.buffer.consumers.delete(this.uuid),this.indexBuffer.buffer.destroy(),e&&e.removeBuffer(this.indexBuffer.buffer))}}class ys extends Ct{static{c(this,"PlaneGeometry")}constructor({widthSegments:e=1,heightSegments:t=1,instancesCount:i=1,vertexBuffers:s=[],topology:r}={}){super({verticesOrder:"ccw",topology:r,instancesCount:i,vertexBuffers:s,mapBuffersAtCreation:!0}),this.type="PlaneGeometry",e=Math.floor(e),t=Math.floor(t),this.definition={id:e*t+e,width:e,height:t,count:e*t};const a=(this.definition.width+1)*(this.definition.height+1),o=this.getIndexedVerticesAndUVs(a);for(const h of Object.values(o))this.setAttribute(h);this.setIndexArray()}setIndexArray(){const e=this.useUint16IndexArray?new Uint16Array(this.definition.count*6):new Uint32Array(this.definition.count*6);let t=0;for(let i=0;i<this.definition.height;i++)for(let s=0;s<this.definition.width;s++)e[t++]=s+i*(this.definition.width+1),e[t++]=this.definition.width+s+1+i*(this.definition.width+1),e[t++]=s+1+i*(this.definition.width+1),e[t++]=s+1+i*(this.definition.width+1),e[t++]=this.definition.width+s+1+i*(this.definition.width+1),e[t++]=this.definition.width+s+2+i*(this.definition.width+1);this.setIndexBuffer({array:e,bufferFormat:this.useUint16IndexArray?"uint16":"uint32"})}getIndexedVerticesAndUVs(e){const t={name:"uv",type:"vec2f",bufferFormat:"float32x2",size:2,array:new Float32Array(e*2)},i={name:"position",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(e*3)},s={name:"normal",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(e*3)};let r=0,a=0,o=0;for(let h=0;h<=this.definition.height;h++)for(let l=0;l<=this.definition.width;l++)t.array[o++]=1-l/this.definition.width,t.array[o++]=1-h/this.definition.height,i.array[r++]=1-l*2/this.definition.width,i.array[r++]=h*2/this.definition.height-1,i.array[r++]=0,s.array[a++]=0,s.array[a++]=0,s.array[a++]=1;return{position:i,uv:t,normal:s}}}var en=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$i"),di=c((n,e,t)=>(en(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$g"),tn=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$i"),sn=c((n,e,t,i)=>(en(n,e,"write to private field"),e.set(n,t),t),"__privateSet$g"),ci,st;class xs extends pe{static{c(this,"Light")}constructor(e,{color:t=new y(1),intensity:i=1,type:s="lights"}={}){super(),tn(this,ci,void 0),tn(this,st,void 0),this.type=s,this.setRenderer(e),this.uuid=O(),this.options={color:t,intensity:i},this.color=t,sn(this,st,this.color.clone()),this.color.onChange(()=>this.onPropertyChanged("color",di(this,st).copy(this.color).multiplyScalar(this.intensity))),this.intensity=i}setRenderer(e){const t=!!this.renderer;this.renderer&&this.renderer.removeLight(this),e=Fe(e,this.constructor.name),this.renderer=e,this.index=this.renderer.lights.filter(i=>i.type===this.type).length,this.index+1>this.renderer.lightsBindingParams[this.type].max&&this.onMaxLightOverflow(this.type),this.renderer.addLight(this),this.setRendererBinding(),t&&this.reset()}setRendererBinding(){this.renderer.bindings[this.type]&&(this.rendererBinding=this.renderer.bindings[this.type])}reset(){this.setRendererBinding(),this.onPropertyChanged("color",di(this,st).copy(this.color).multiplyScalar(this.intensity))}get intensity(){return di(this,ci)}set intensity(e){sn(this,ci,e),this.onPropertyChanged("color",di(this,st).copy(this.color).multiplyScalar(this.intensity))}onPropertyChanged(e,t){this.rendererBinding&&this.rendererBinding.inputs[e]&&(t instanceof y?(this.rendererBinding.inputs[e].value[this.index*3]=t.x,this.rendererBinding.inputs[e].value[this.index*3+1]=t.y,this.rendererBinding.inputs[e].value[this.index*3+2]=t.z):this.rendererBinding.inputs[e].value[this.index]=t,this.rendererBinding.inputs[e].shouldUpdate=!0,this.renderer.shouldUpdateCameraLightsBindGroup())}onMaxLightOverflow(e){this.renderer.onMaxLightOverflow(e),this.rendererBinding&&(this.rendererBinding=this.renderer.bindings[e])}remove(){this.renderer.removeLight(this),this.destroy()}destroy(){super.destroy()}}ci=new WeakMap,st=new WeakMap;class no extends xs{static{c(this,"AmbientLight")}constructor(e,{color:t=new y(1),intensity:i=.1}={}){super(e,{color:t,intensity:i,type:"ambientLights"})}applyRotation(){}applyPosition(){}applyScale(){}applyTransformOrigin(){}}class pi{static{c(this,"RenderPass")}constructor(e,{label:t="Render Pass",sampleCount:i=4,qualityRatio:s=1,fixedSize:r=null,useColorAttachments:a=!0,renderToSwapChain:o=!0,colorAttachments:h=[],useDepth:l=!0,depthTexture:u=null,depthLoadOp:d="clear",depthStoreOp:f="store",depthClearValue:p=1,depthFormat:m="depth24plus"}={}){if(e=$(e,"RenderPass"),this.type="RenderPass",this.uuid=O(),this.renderer=e,a){const g={loadOp:"clear",storeOp:"store",clearValue:[0,0,0,0],targetFormat:this.renderer.options.context.format};h.length?h=h.map(v=>({...g,...v})):h=[g]}this.options={label:t,sampleCount:i,qualityRatio:s,fixedSize:r,useColorAttachments:a,renderToSwapChain:o,colorAttachments:h,useDepth:l,...u!==void 0&&{depthTexture:u},depthLoadOp:d,depthStoreOp:f,depthClearValue:p,depthFormat:m},this.options.useDepth&&this.createDepthTexture(),this.viewTextures=[],this.resolveTargets=[],this.options.useColorAttachments&&(!this.options.renderToSwapChain||this.options.sampleCount>1)&&(this.createViewTextures(),this.createResolveTargets()),this.setRenderPassDescriptor()}createDepthTexture(){this.options.depthTexture?(this.depthTexture=this.options.depthTexture,this.options.depthFormat=this.options.depthTexture.options.format):this.depthTexture=new j(this.renderer,{label:this.options.label+" depth texture",name:"depthTexture",format:this.options.depthFormat,sampleCount:this.options.sampleCount,qualityRatio:this.options.qualityRatio,...this.options.fixedSize&&{fixedSize:this.options.fixedSize},type:"depth",usage:["renderAttachment","textureBinding"]})}createViewTextures(){this.options.colorAttachments.forEach((e,t)=>{this.viewTextures.push(new j(this.renderer,{label:`${this.options.label} colorAttachment[${t}] view texture`,name:`colorAttachment${t}ViewTexture`,format:e.targetFormat,sampleCount:this.options.sampleCount,qualityRatio:this.options.qualityRatio,...this.options.fixedSize&&{fixedSize:this.options.fixedSize},type:"texture",usage:["copySrc","copyDst","renderAttachment","textureBinding"]}))})}createResolveTargets(){this.options.sampleCount>1&&this.options.colorAttachments.forEach((e,t)=>{this.resolveTargets.push(this.options.renderToSwapChain&&t===0?null:new j(this.renderer,{label:`${this.options.label} resolve target[${t}] texture`,name:`resolveTarget${t}Texture`,format:e.targetFormat,sampleCount:1,qualityRatio:this.options.qualityRatio,type:"texture"}))})}get outputTextures(){return this.options.sampleCount>1?this.resolveTargets:this.viewTextures}setRenderPassDescriptor(e=null){this.descriptor={label:this.options.label+" descriptor",colorAttachments:this.options.colorAttachments.map((t,i)=>({view:this.viewTextures[i]?.texture.createView({label:this.viewTextures[i]?.texture.label+" view"}),...this.resolveTargets.length&&{resolveTarget:this.resolveTargets[i]?.texture.createView({label:this.resolveTargets[i]?.texture.label+" view"})},clearValue:t.clearValue,loadOp:t.loadOp,storeOp:t.storeOp})),...this.options.useDepth&&{depthStencilAttachment:{view:e||this.depthTexture.texture.createView({label:this.depthTexture.texture.label+" view"}),depthClearValue:this.options.depthClearValue,depthLoadOp:this.options.depthLoadOp,depthStoreOp:this.options.depthStoreOp}}}}resize(){this.options.useDepth&&(this.descriptor.depthStencilAttachment.view=this.depthTexture.texture.createView({label:this.depthTexture.options.label+" view"})),this.viewTextures.forEach((e,t)=>{this.descriptor.colorAttachments[t].view=e.texture.createView({label:e.options.label+" view"})}),this.resolveTargets.forEach((e,t)=>{e&&(this.descriptor.colorAttachments[t].resolveTarget=e.texture.createView({label:e.options.label+" view"}))})}setLoadOp(e="clear",t=0){this.options.useColorAttachments&&(this.options.colorAttachments[t]&&(this.options.colorAttachments[t].loadOp=e),this.descriptor&&this.descriptor.colorAttachments&&this.descriptor.colorAttachments[t]&&(this.descriptor.colorAttachments[t].loadOp=e))}setDepthLoadOp(e="clear"){this.options.depthLoadOp=e,this.options.useDepth&&this.descriptor.depthStencilAttachment&&(this.descriptor.depthStencilAttachment.depthLoadOp=e)}setClearValue(e=[0,0,0,0],t=0){if(this.options.useColorAttachments){if(this.renderer.options.context.alphaMode==="premultiplied"){const i=e[3];e[0]=Math.min(e[0],i),e[1]=Math.min(e[1],i),e[2]=Math.min(e[2],i)}this.options.colorAttachments[t]&&(this.options.colorAttachments[t].clearValue=e),this.descriptor&&this.descriptor.colorAttachments&&this.descriptor.colorAttachments[t]&&(this.descriptor.colorAttachments[t].clearValue=e)}}updateView(e=null){return!this.options.colorAttachments.length||!this.options.renderToSwapChain||(e||(e=this.renderer.context.getCurrentTexture(),e.label=`${this.renderer.type} context current texture`),this.options.sampleCount>1?(this.descriptor.colorAttachments[0].view=this.viewTextures[0].texture.createView({label:this.viewTextures[0].options.label+" view"}),this.descriptor.colorAttachments[0].resolveTarget=e.createView({label:e.label+" resolve target view"})):this.descriptor.colorAttachments[0].view=e.createView({label:e.label+" view"})),e}destroy(){this.viewTextures.forEach(e=>e.destroy()),this.resolveTargets.forEach(e=>e?.destroy()),!this.options.depthTexture&&this.depthTexture&&this.depthTexture.destroy()}}var rn=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$h"),nn=c((n,e,t)=>(rn(n,e,"read from private field"),e.get(n)),"__privateGet$f"),ao=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$h"),oo=c((n,e,t,i)=>(rn(n,e,"write to private field"),e.set(n,t),t),"__privateSet$f"),St;class vs{static{c(this,"RenderTarget")}constructor(e,t={}){ao(this,St,!0),e=$(e,"RenderTarget"),this.type="RenderTarget",this.renderer=e,this.uuid=O();const{label:i,colorAttachments:s,depthTexture:r,autoRender:a,...o}=t,h=r||(this.renderer.renderPass.options.sampleCount===(t.sampleCount??4)&&(!o.qualityRatio||o.qualityRatio===1)&&!o.fixedSize?this.renderer.renderPass.depthTexture:null);this.options={label:i,...o,...h&&{depthTexture:h},...s&&{colorAttachments:s},autoRender:a===void 0?!0:a},a!==void 0&&oo(this,St,a),this.renderPass=new pi(this.renderer,{label:this.options.label?`${this.options.label} Render Pass`:"Render Target Render Pass",...s&&{colorAttachments:s},depthTexture:this.options.depthTexture,...o}),o.useColorAttachments!==!1&&(this.renderTexture=new j(this.renderer,{label:this.options.label?`${this.options.label} Render Texture`:"Render Target render texture",name:"renderTexture",format:s&&s.length&&s[0].targetFormat?s[0].targetFormat:this.renderer.options.context.format,...this.options.qualityRatio!==void 0&&{qualityRatio:this.options.qualityRatio},...this.options.fixedSize!==void 0&&{fixedSize:this.options.fixedSize},usage:["copySrc","renderAttachment","textureBinding"]})),this.addToScene()}get outputTextures(){return this.renderPass.outputTextures.length?this.renderPass.outputTextures.map((e,t)=>t===0&&this.renderPass.options.renderToSwapChain?this.renderTexture:e):this.renderTexture?[this.renderTexture]:[]}addToScene(){this.renderer.renderTargets.push(this),nn(this,St)&&this.renderer.scene.addRenderTarget(this)}removeFromScene(){nn(this,St)&&this.renderer.scene.removeRenderTarget(this),this.renderer.renderTargets=this.renderer.renderTargets.filter(e=>e.uuid!==this.uuid)}resize(){this.options.depthTexture&&(this.renderPass.options.depthTexture.texture=this.options.depthTexture.texture),this.renderPass?.resize()}remove(){this.destroy()}destroy(){this.renderer.meshes.forEach(e=>{e.outputTarget&&e.outputTarget.uuid===this.uuid&&e.setOutputTarget(null)}),this.renderer.shaderPasses.forEach(e=>{e.outputTarget&&e.outputTarget.uuid===this.uuid&&(e.outputTarget=null,e.setOutputTarget(null))}),this.removeFromScene(),this.renderPass?.destroy(),this.renderTexture?.destroy()}}St=new WeakMap;let ho=0;class bs{static{c(this,"PipelineEntry")}constructor(e){this.type="PipelineEntry";let{renderer:t}=e;const{label:i,shaders:s,useAsync:r,bindGroups:a,cacheKey:o}=e;t=$(t,i?i+" "+this.type:this.type),this.renderer=t,Object.defineProperty(this,"index",{value:ho++}),this.layout=null,this.pipeline=null,this.status={compiling:!1,compiled:!1,error:null},this.options={label:i,shaders:s,useAsync:r!==void 0?r:!0,bindGroups:a,cacheKey:o},this.bindGroups=a}get ready(){return!this.status.compiling&&this.status.compiled&&!this.status.error}get canCompile(){return!this.status.compiling&&!this.status.compiled&&!this.status.error}createShaderModule({code:e="",type:t="vertex"}){const i=this.renderer.createShaderModule({label:this.options.label+": "+t+" shader module",code:e});return"getCompilationInfo"in i&&!this.renderer.production&&i.getCompilationInfo().then(s=>{for(const r of s.messages){let a="";switch(r.lineNum&&(a+=`Line ${r.lineNum}:${r.linePos} - ${e.substring(r.offset,r.offset+r.length)}
`),a+=r.message,r.type){case"error":console.error(`${this.options.label} compilation error:
${a}`);break;case"warning":console.warn(`${this.options.label} compilation warning:
${a}`);break;case"info":console.log(`${this.options.label} compilation information:
${a}`);break}}}),i}createShaders(){}createPipelineLayout(){this.layout=this.renderer.createPipelineLayout({label:this.options.label+" layout",bindGroupLayouts:this.bindGroups.map(e=>e.bindGroupLayout)})}createPipelineDescriptor(){}flushPipelineEntry(e=[]){this.status.compiling=!1,this.status.compiled=!1,this.status.error=null,this.bindGroups=e,this.compilePipelineEntry()}compilePipelineEntry(){this.status.compiling=!0,this.createShaders(),this.createPipelineLayout(),this.createPipelineDescriptor()}}const lo=`
fn getWorldPosition(position: vec3f) -> vec4f {
  return matrices.model * vec4f(position, 1.0);
}

fn getOutputPosition(position: vec3f) -> vec4f {
  return camera.projection * matrices.modelView * vec4f(position, 1.0);
}`,uo=`
fn getWorldNormal(normal: vec3f) -> vec3f {
  return normalize(matrices.normal * normal);
}

fn getViewNormal(normal: vec3f) -> vec3f {
  return normalize((camera.view * vec4(matrices.normal * normal, 0.0)).xyz);
}`,an=`
fn getUVCover(uv: vec2f, textureMatrix: mat4x4f) -> vec2f {
  return (textureMatrix * vec4f(uv, 0.0, 1.0)).xy;
}`,Je={vertex:{getUVCover:an},fragment:{getUVCover:an,getVertexToUVCoords:`
fn getVertex2DToUVCoords(vertex: vec2f) -> vec2f {
  return vec2(
    vertex.x * 0.5 + 0.5,
    0.5 - vertex.y * 0.5
  );
}

fn getVertex3DToUVCoords(vertex: vec3f) -> vec2f {
  return getVertex2DToUVCoords( vec2(vertex.x, vertex.y) );
}
`}},Ze={vertex:{getPositionHelpers:lo,getNormalHelpers:uo},fragment:{}};class rt extends bs{static{c(this,"RenderPipelineEntry")}constructor(e){let{renderer:t,...i}=e;const{label:s,attributes:r,bindGroups:a,cacheKey:o,...h}=i,l="RenderPipelineEntry";$(t,s?s+" "+l:l),super(e),this.type=l,this.shaders={vertex:{head:"",code:"",module:null},fragment:{head:"",code:"",module:null},full:{head:"",code:"",module:null}},this.descriptor=null,this.options={...this.options,attributes:r,...h},this.attributes=r}patchShaders(){this.shaders.vertex.head="",this.shaders.vertex.code="",this.shaders.fragment.head="",this.shaders.fragment.code="",this.shaders.full.head="",this.shaders.full.code="";for(const t in Je.vertex)this.shaders.vertex.head=`${Je.vertex[t]}
${this.shaders.vertex.head}`,this.shaders.full.head=`${Je.vertex[t]}
${this.shaders.full.head}`;if(this.options.shaders.fragment)for(const t in Je.fragment)this.shaders.fragment.head=`${Je.fragment[t]}
${this.shaders.fragment.head}`,this.shaders.full.head.indexOf(Je.fragment[t])===-1&&(this.shaders.full.head=`${Je.fragment[t]}
${this.shaders.full.head}`);if(this.options.rendering.useProjection){for(const t in Ze.vertex)this.shaders.vertex.head=`${Ze.vertex[t]}
${this.shaders.vertex.head}`,this.shaders.full.head=`${Ze.vertex[t]}
${this.shaders.full.head}`;if(this.options.shaders.fragment)for(const t in Ze.fragment)this.shaders.fragment.head=`${Ze.fragment[t]}
${this.shaders.fragment.head}`,this.shaders.full.head.indexOf(Ze.fragment[t])===-1&&(this.shaders.full.head=`${Ze.fragment[t]}
${this.shaders.full.head}`)}const e=[];for(const t of this.bindGroups){let i=0;t.bindings.forEach((s,r)=>{s.wgslGroupFragment.forEach((a,o)=>{e.push({groupIndex:t.index,visibility:s.options.visibility,bindIndex:i,wgslStructFragment:s.wgslStructFragment,wgslGroupFragment:a,newLine:r===t.bindings.length-1&&o===s.wgslGroupFragment.length-1}),i++})})}for(const t of e)t.visibility.includes("vertex")&&(t.wgslStructFragment&&this.shaders.vertex.head.indexOf(t.wgslStructFragment)===-1&&(this.shaders.vertex.head=`
${t.wgslStructFragment}
${this.shaders.vertex.head}`),this.shaders.vertex.head.indexOf(t.wgslGroupFragment)===-1&&(this.shaders.vertex.head=`${this.shaders.vertex.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`,t.newLine&&(this.shaders.vertex.head+=`
`))),this.options.shaders.fragment&&t.visibility.includes("fragment")&&(t.wgslStructFragment&&this.shaders.fragment.head.indexOf(t.wgslStructFragment)===-1&&(this.shaders.fragment.head=`
${t.wgslStructFragment}
${this.shaders.fragment.head}`),this.shaders.fragment.head.indexOf(t.wgslGroupFragment)===-1&&(this.shaders.fragment.head=`${this.shaders.fragment.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`,t.newLine&&(this.shaders.fragment.head+=`
`))),t.wgslStructFragment&&this.shaders.full.head.indexOf(t.wgslStructFragment)===-1&&(this.shaders.full.head=`
${t.wgslStructFragment}
${this.shaders.full.head}`),this.shaders.full.head.indexOf(t.wgslGroupFragment)===-1&&(this.shaders.full.head=`${this.shaders.full.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`,t.newLine&&(this.shaders.full.head+=`
`));this.shaders.vertex.head=`${this.attributes.wgslStructFragment}
${this.shaders.vertex.head}`,this.shaders.full.head=`${this.attributes.wgslStructFragment}
${this.shaders.full.head}`,this.shaders.vertex.code=this.shaders.vertex.head+this.options.shaders.vertex.code,typeof this.options.shaders.fragment=="object"&&(this.shaders.fragment.code=this.shaders.fragment.head+this.options.shaders.fragment.code),typeof this.options.shaders.fragment=="object"&&(this.options.shaders.vertex.entryPoint!==this.options.shaders.fragment.entryPoint&&this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code)===0?this.shaders.full.code=this.shaders.full.head+this.options.shaders.vertex.code:this.shaders.full.code=this.shaders.full.head+this.options.shaders.vertex.code+this.options.shaders.fragment.code)}get shadersModulesReady(){return!(!this.shaders.vertex.module||this.options.shaders.fragment&&!this.shaders.fragment.module)}createShaders(){this.patchShaders();const e=typeof this.options.shaders.fragment=="object"&&this.options.shaders.vertex.entryPoint!==this.options.shaders.fragment.entryPoint&&this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code)===0;this.shaders.vertex.module=this.createShaderModule({code:this.shaders[e?"full":"vertex"].code,type:"vertex"}),this.options.shaders.fragment&&(this.shaders.fragment.module=this.createShaderModule({code:this.shaders[e?"full":"fragment"].code,type:"fragment"}))}static getDefaultTransparentBlending(){return{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha"}}}createPipelineDescriptor(){if(!this.shadersModulesReady)return;let e=-1;this.options.rendering.targets.length?this.options.rendering.transparent&&(this.options.rendering.targets[0].blend=this.options.rendering.targets[0].blend?this.options.rendering.targets[0].blend:rt.getDefaultTransparentBlending()):this.options.rendering.targets=[],this.descriptor={label:this.options.label,layout:this.layout,vertex:{module:this.shaders.vertex.module,entryPoint:this.options.shaders.vertex.entryPoint,buffers:this.attributes.vertexBuffers.map(t=>({stepMode:t.stepMode,arrayStride:t.arrayStride*4,attributes:t.attributes.map(i=>(e++,{shaderLocation:e,offset:i.bufferOffset,format:i.bufferFormat}))}))},...this.options.shaders.fragment&&{fragment:{module:this.shaders.fragment.module,entryPoint:this.options.shaders.fragment.entryPoint,targets:this.options.rendering.targets}},primitive:{topology:this.options.rendering.topology,frontFace:this.options.rendering.verticesOrder,cullMode:this.options.rendering.cullMode},...this.options.rendering.depth&&{depthStencil:{depthWriteEnabled:this.options.rendering.depthWriteEnabled,depthCompare:this.options.rendering.depthCompare,format:this.options.rendering.depthFormat}},...this.options.rendering.sampleCount>1&&{multisample:{count:this.options.rendering.sampleCount}}}}createRenderPipeline(){if(this.shadersModulesReady)try{this.pipeline=this.renderer.createRenderPipeline(this.descriptor)}catch(e){this.status.error=e,te(e)}}async createRenderPipelineAsync(){if(this.shadersModulesReady)try{this.pipeline=await this.renderer.createRenderPipelineAsync(this.descriptor),this.status.compiled=!0,this.status.compiling=!1,this.status.error=null}catch(e){this.status.error=e,te(e)}}async compilePipelineEntry(){super.compilePipelineEntry(),this.options.useAsync?await this.createRenderPipelineAsync():(this.createRenderPipeline(),this.status.compiled=!0,this.status.compiling=!1,this.status.error=null)}}const on=c((n={},e={})=>Object.keys(n).filter(t=>Array.isArray(n[t])?JSON.stringify(n[t])!==JSON.stringify(e[t]):n[t]!==e[t]),"compareRenderingOptions"),ws=`
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
  @location(1) normal: vec3f,
  @location(2) worldPosition: vec3f,
  @location(3) viewDirection: vec3f,
};

@vertex fn main(
  attributes: Attributes,
) -> VSOutput {
  var vsOutput: VSOutput;

  vsOutput.position = getOutputPosition(attributes.position);
  vsOutput.uv = attributes.uv;
  vsOutput.normal = getWorldNormal(attributes.normal);
  let worldPosition: vec4f = getWorldPosition(attributes.position);
  vsOutput.worldPosition = worldPosition.xyz / worldPosition.w;
  vsOutput.viewDirection = camera.position - vsOutput.worldPosition;
  
  return vsOutput;
}`,Bs=`
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
};

@vertex fn main(
  attributes: Attributes,
) -> VSOutput {
  var vsOutput: VSOutput;

  vsOutput.position = vec4f(attributes.position, 1.0);
  vsOutput.uv = attributes.uv;
  
  return vsOutput;
}`,Cs=`
@fragment fn main() -> @location(0) vec4f {
  return vec4(0.0, 0.0, 0.0, 1.0);
}`;class fi extends ms{static{c(this,"RenderMaterial")}constructor(e,t){const i="RenderMaterial";e=$(e,i),t.shaders||(t.shaders={}),t.shaders?.vertex||(t.shaders.vertex={code:t.useProjection?ws:Bs,entryPoint:"main"}),t.shaders.vertex.entryPoint||(t.shaders.vertex.entryPoint="main"),t.shaders.fragment===void 0&&(t.shaders.fragment={entryPoint:"main",code:Cs}),super(e,t),this.type=i,this.renderer=e;const{shaders:s}=t,{useProjection:r,transparent:a,depth:o,depthWriteEnabled:h,depthCompare:l,depthFormat:u,cullMode:d,sampleCount:f,verticesOrder:p,topology:m}=t;let{targets:g}=t;g===void 0&&(g=[{format:this.renderer.options.context.format}]),g&&g.length&&!g[0].format&&(g[0].format=this.renderer.options.context.format),this.options={...this.options,shaders:s,rendering:{useProjection:r,transparent:a,depth:o,depthWriteEnabled:h,depthCompare:l,depthFormat:u,cullMode:d,sampleCount:f,targets:g,verticesOrder:p,topology:m}},this.attributes=null,this.pipelineEntry=null}setRenderer(e){this.useCameraBindGroup&&this.renderer&&this.renderer.cameraLightsBindGroup.consumers.delete(this.uuid),super.setRenderer(e),this.useCameraBindGroup&&(this.bindGroups[0]=this.renderer.cameraLightsBindGroup,this.renderer.cameraLightsBindGroup.consumers.add(this.uuid))}setPipelineEntry(){this.pipelineEntry=this.renderer.pipelineManager.createRenderPipeline(this),this.bindGroups.length!==this.pipelineEntry.bindGroups.length&&this.createBindGroups()}async compilePipelineEntry(){await this.pipelineEntry.compilePipelineEntry()}async compileMaterial(){this.ready||(super.compileMaterial(),this.attributes&&!this.pipelineEntry&&this.setPipelineEntry(),this.pipelineEntry&&this.pipelineEntry.canCompile&&await this.compilePipelineEntry())}setRenderingOptions(e={}){e.transparent&&e.targets.length&&!e.targets[0].blend&&(e.targets[0].blend=rt.getDefaultTransparentBlending());const t=on(e,this.options.rendering),i={...this.options.rendering};if(this.options.rendering={...this.options.rendering,...e},this.pipelineEntry)if(this.pipelineEntry.ready&&t.length){if(!this.renderer.production){const s=t.map(a=>({[a]:Array.isArray(i[a])?i[a].map(o=>o):i[a]})),r=t.map(a=>({[a]:Array.isArray(e[a])?e[a].map(o=>o):e[a]}));L(`${this.options.label}: the change of rendering options is causing this RenderMaterial pipeline to be recompiled. This should be avoided.

Old rendering options: ${JSON.stringify(s.reduce((a,o)=>({...a,...o}),{}),null,4)}

--------

New rendering options: ${JSON.stringify(r.reduce((a,o)=>({...a,...o}),{}),null,4)}`)}this.setPipelineEntry()}else this.pipelineEntry.options.rendering={...this.pipelineEntry.options.rendering,...this.options.rendering}}setAttributesFromGeometry(e){this.attributes={wgslStructFragment:e.wgslStructFragment,vertexBuffers:e.vertexBuffers,layoutCacheKey:e.layoutCacheKey}}get cacheKey(){return(this.attributes?.layoutCacheKey||"")+super.cacheKey}get useCameraBindGroup(){return"cameraLightsBindGroup"in this.renderer&&this.options.rendering.useProjection}createBindGroups(){this.useCameraBindGroup&&(this.bindGroups.push(this.renderer.cameraLightsBindGroup),this.renderer.cameraLightsBindGroup.consumers.add(this.uuid)),super.createBindGroups(),console.log(this.options.label,this.bindGroups)}updateBindGroups(){const e=this.useCameraBindGroup?1:0;this.useCameraBindGroup&&this.bindGroups.length&&this.bindGroups[0].needsPipelineFlush&&this.pipelineEntry.ready&&this.pipelineEntry.flushPipelineEntry(this.bindGroups);for(let t=e;t<this.bindGroups.length;t++)this.updateBindGroup(this.bindGroups[t])}}const Ss=c(({geometry:n})=>n.vertexBuffers.map(e=>e.attributes.map(t=>`
  var ${t.name}: ${t.type} = attributes.${t.name};`).join("")).join(`
`),"declareAttributesVars$1"),co=c(({bindings:n=[],geometry:e})=>{let t="";return n.filter(s=>s.name.includes("morphTarget")).forEach(s=>{const r=Object.values(s.inputs).filter(a=>a.name!=="weight");r.forEach(a=>{const o=fe.getType(a.type),h=e.getAttributeByName(a.name);if(h){const l=h.type,u=r.length===1?`${s.name}.${a.name}[attributes.vertexIndex]`:`${s.name}.elements[attributes.vertexIndex].${a.name}`;o===l?t+=`${a.name} += ${s.name}.weight * ${u};
	`:o==="vec3f"&&l==="vec4f"&&(t+=`${a.name} += ${s.name}.weight * vec4(${u}, 0.0);
	`)}})}),t},"getMorphTargets"),po=c(({bindings:n=[],geometry:e})=>{let t="";const i=e.instancesCount>1,s=[],r=[];e.vertexBuffers&&e.vertexBuffers.length&&e.vertexBuffers.forEach(h=>{h.attributes.forEach(l=>{l.name.includes("joints")&&s.push(l),l.name.includes("weights")&&r.push(l)})});const a=n.filter(h=>h.name.includes("skin")),o=s.length&&r.length&&a.length;return o&&(t+=i?`
  var instancesWorldPosition = array<vec4f, ${e.instancesCount}>();
  var instancesNormal = array<vec3f, ${e.instancesCount}>();
      `:"",t+=`
  let skinJoints: vec4f = ${s.map(h=>h.name).join(" + ")};`,t+=`
  var skinWeights: vec4f = ${r.map(h=>h.name).join(" + ")};
  
  let skinWeightsSum = dot(skinWeights, vec4(1.0));
  if(skinWeightsSum > 0.0) {
    skinWeights = skinWeights / skinWeightsSum;
  }
    `,a.forEach((h,l)=>{t+=`
  ${i?"// instancing with different skins: joints calculations for skin "+l+`
`:""}
  // position
  let skinMatrix_${l}: mat4x4f = 
    skinWeights.x * ${h.name}.joints[u32(skinJoints.x)].jointMatrix +
    skinWeights.y * ${h.name}.joints[u32(skinJoints.y)].jointMatrix +
    skinWeights.z * ${h.name}.joints[u32(skinJoints.z)].jointMatrix +
    skinWeights.w * ${h.name}.joints[u32(skinJoints.w)].jointMatrix;
      
  ${i?"instancesWorldPosition["+l+"] = skinMatrix_"+l+" * worldPosition;":"worldPosition = skinMatrix_"+l+" * worldPosition;"}
      
  // normal
  let skinNormalMatrix_${l}: mat4x4f = 
    skinWeights.x * ${h.name}.joints[u32(skinJoints.x)].normalMatrix +
    skinWeights.y * ${h.name}.joints[u32(skinJoints.y)].normalMatrix +
    skinWeights.z * ${h.name}.joints[u32(skinJoints.z)].normalMatrix +
    skinWeights.w * ${h.name}.joints[u32(skinJoints.w)].normalMatrix;
    
  let skinNormalMatrix_${l}_3: mat3x3f = mat3x3f(
    vec3(skinNormalMatrix_${l}[0].xyz),
    vec3(skinNormalMatrix_${l}[1].xyz),
    vec3(skinNormalMatrix_${l}[2].xyz)
  );
      
  ${i?"instancesNormal["+l+"] = skinNormalMatrix_"+l+"_3 * normal;":"normal = skinNormalMatrix_"+l+"_3 * normal;"}
      `})),t+=`
  var modelMatrix: mat4x4f;
  `,i?(o&&(t+=`
  worldPosition = instancesWorldPosition[attributes.instanceIndex];
  normal = instancesNormal[attributes.instanceIndex];
      `),t+=`
  modelMatrix = instances.matrices[attributes.instanceIndex].model;
  worldPosition = modelMatrix * worldPosition;
  
  normal = normalize(instances.matrices[attributes.instanceIndex].normal * normal);
    `):t+=`
  modelMatrix = matrices.model;
  worldPosition = modelMatrix * worldPosition;
  normal = getWorldNormal(normal);
    `,t},"getVertexSkinnedPositionNormal"),Ms=c(({bindings:n=[],geometry:e})=>{let t="";return t+=co({bindings:n,geometry:e}),t+=`
  var worldPosition: vec4f = vec4(position, 1.0);
  `,t+=po({bindings:n,geometry:e}),t},"getVertexTransformedPositionNormal"),fo=c((n=0,{bindings:e=[],geometry:t})=>`
@vertex fn main(
  attributes: Attributes,
) -> @builtin(position) vec4f {  
  let directionalShadow: DirectionalShadowsElement = directionalShadows.directionalShadowsElements[${n}];
  
  ${Ss({geometry:t})}
  ${Ms({bindings:e,geometry:t})}
  
  let worldPos = worldPosition.xyz / worldPosition.w;
  let lightDirection: vec3f = normalize(worldPos - directionalLights.elements[${n}].direction);
  let NdotL: f32 = dot(normalize(normal), lightDirection);
  let sinNdotL = sqrt(1.0 - NdotL * NdotL);
  let normalBias: f32 = directionalShadow.normalBias * sinNdotL;
  
  worldPosition = vec4(worldPos - normal * normalBias, 1.0);
  
  return directionalShadow.projectionMatrix * directionalShadow.viewMatrix * worldPosition;
}`,"getDefaultShadowDepthVs");var Ts=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$g"),W=c((n,e,t)=>(Ts(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$e"),Re=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$g"),ne=c((n,e,t,i)=>(Ts(n,e,"write to private field"),e.set(n,t),t),"__privateSet$e"),hn=c((n,e,t)=>(Ts(n,e,"access private method"),t),"__privateMethod$8"),mi,gi,yi,xi,vi,Mt,nt,ae,$e,bi,Ps;const ln={isActive:{type:"i32",value:0},pcfSamples:{type:"i32",value:0},bias:{type:"f32",value:0},normalBias:{type:"f32",value:0},intensity:{type:"f32",value:0}};class un{static{c(this,"Shadow")}constructor(e,{light:t,intensity:i=1,bias:s=0,normalBias:r=0,pcfSamples:a=1,depthTextureSize:o=new z(512),depthTextureFormat:h="depth24plus",autoRender:l=!0}={}){Re(this,bi),Re(this,mi,void 0),Re(this,gi,void 0),Re(this,yi,void 0),Re(this,xi,void 0),Re(this,vi,void 0),Re(this,Mt,void 0),Re(this,nt,void 0),Re(this,ae,void 0),Re(this,$e,void 0),this.setRenderer(e),this.light=t,this.index=this.light.index,this.options={light:t,intensity:i,bias:s,normalBias:r,pcfSamples:a,depthTextureSize:o,depthTextureFormat:h},this.sampleCount=1,this.meshes=new Map,ne(this,nt,new Map),ne(this,ae,new Map),ne(this,$e,null),hn(this,bi,Ps).call(this,{intensity:i,bias:s,normalBias:r,pcfSamples:a,depthTextureSize:o,depthTextureFormat:h,autoRender:l}),this.isActive=!1}setRenderer(e){e=Fe(e,this.constructor.name),this.renderer=e,this.setRendererBinding(),W(this,ae)?.forEach(t=>{t.setRenderer(this.renderer)})}setRendererBinding(){this.rendererBinding=null}cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:a,autoRender:o}={}){hn(this,bi,Ps).call(this,{intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:a,autoRender:o}),this.isActive=!0}reset(){this.onPropertyChanged("isActive",this.isActive?1:0),this.onPropertyChanged("intensity",this.intensity),this.onPropertyChanged("bias",this.bias),this.onPropertyChanged("normalBias",this.normalBias),this.onPropertyChanged("pcfSamples",this.pcfSamples)}get isActive(){return W(this,vi)}set isActive(e){!e&&this.isActive?this.destroy():e&&!this.isActive&&this.init(),ne(this,vi,e)}get intensity(){return W(this,mi)}set intensity(e){ne(this,mi,e),this.onPropertyChanged("intensity",this.intensity)}get bias(){return W(this,gi)}set bias(e){ne(this,gi,e),this.onPropertyChanged("bias",this.bias)}get normalBias(){return W(this,yi)}set normalBias(e){ne(this,yi,e),this.onPropertyChanged("normalBias",this.normalBias)}get pcfSamples(){return W(this,xi)}set pcfSamples(e){ne(this,xi,Math.max(1,Math.ceil(e))),this.onPropertyChanged("pcfSamples",this.pcfSamples)}init(){if(!this.depthComparisonSampler){const e=this.renderer.samplers.find(t=>t.name==="depthComparisonSampler");this.depthComparisonSampler=e||new Ke(this.renderer,{label:"Depth comparison sampler",name:"depthComparisonSampler",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge",compare:"less",minFilter:"linear",magFilter:"linear",type:"comparison"})}this.setDepthTexture(),this.depthPassTarget||this.createDepthPassTarget(),W(this,$e)===null&&W(this,Mt)&&(this.setDepthPass(),this.onPropertyChanged("isActive",1))}onDepthTextureSizeChanged(){this.setDepthTexture()}setDepthTexture(){this.depthTexture&&(this.depthTexture.size.width!==this.depthTextureSize.x||this.depthTexture.size.height!==this.depthTextureSize.y)?(this.depthTexture.options.fixedSize.width=this.depthTextureSize.x,this.depthTexture.options.fixedSize.height=this.depthTextureSize.y,this.depthTexture.size.width=this.depthTextureSize.x,this.depthTexture.size.height=this.depthTextureSize.y,this.depthTexture.createTexture(),this.depthPassTarget&&this.depthPassTarget.resize()):this.depthTexture||this.createDepthTexture()}createDepthTexture(){this.depthTexture=new j(this.renderer,{label:`${this.constructor.name} (index: ${this.light.index}) depth texture`,name:"shadowDepthTexture"+this.index,type:"depth",format:this.depthTextureFormat,sampleCount:this.sampleCount,fixedSize:{width:this.depthTextureSize.x,height:this.depthTextureSize.y},autoDestroy:!1})}clearDepthTexture(){if(!this.depthTexture||!this.depthTexture.texture)return;const e=this.renderer.device.createCommandEncoder();!this.renderer.production&&e.pushDebugGroup(`Clear ${this.depthTexture.texture.label} command encoder`);const t={colorAttachments:[],depthStencilAttachment:{view:this.depthTexture.texture.createView({label:"Clear "+this.depthTexture.texture.label+" view"}),depthLoadOp:"clear",depthClearValue:1,depthStoreOp:"store"}};e.beginRenderPass(t).end(),!this.renderer.production&&e.popDebugGroup(),this.renderer.device.queue.submit([e.finish()])}createDepthPassTarget(){this.depthPassTarget=new vs(this.renderer,{label:"Depth pass render target for "+this.constructor.name+" "+this.index,useColorAttachments:!1,depthTexture:this.depthTexture,sampleCount:this.sampleCount})}onPropertyChanged(e,t){if(this.rendererBinding){if(t instanceof D){for(let i=0;i<t.elements.length;i++)this.rendererBinding.childrenBindings[this.index].inputs[e].value[i]=t.elements[i];this.rendererBinding.childrenBindings[this.index].inputs[e].shouldUpdate=!0}else this.rendererBinding.childrenBindings[this.index].inputs[e].value=t;this.renderer.shouldUpdateCameraLightsBindGroup()}}setDepthPass(){ne(this,$e,this.render())}removeDepthPass(e){this.renderer.onBeforeRenderScene.remove(e)}render(e=!1){return this.renderer.onBeforeRenderScene.add(t=>{this.meshes.size&&(this.useDepthMaterials(),this.renderDepthPass(t),this.useOriginalMaterials(),this.renderer.pipelineManager.resetCurrentPipeline())},{once:e,order:this.index})}async renderOnce(){W(this,Mt)||(this.onPropertyChanged("isActive",1),this.useDepthMaterials(),this.meshes.forEach(e=>{e.setGeometry()}),await Promise.all([...W(this,ae).values()].map(async e=>{await e.compileMaterial()})),this.render(!0))}renderDepthPass(e){const t=new Map;this.meshes.forEach(s=>{s.options.renderBundle&&t.set(s.options.renderBundle.uuid,s.options.renderBundle)}),t.forEach(s=>{s.updateBinding()}),t.clear(),this.renderer.pipelineManager.resetCurrentPipeline();const i=e.beginRenderPass(this.depthPassTarget.renderPass.descriptor);this.renderer.production||i.pushDebugGroup(`${this.constructor.name} (index: ${this.index}): depth pass`),this.meshes.forEach(s=>{s.render(i)}),this.renderer.production||i.popDebugGroup(),i.end()}getDefaultShadowDepthVs({bindings:e=[],geometry:t}){return{code:fo(this.index,{bindings:e,geometry:t})}}getDefaultShadowDepthFs(){return!1}patchShadowCastingMeshParams(e,t={}){t={...e.material.options.rendering,...t},t.targets=[],t.sampleCount=this.sampleCount,t.depthFormat=this.depthTextureFormat;const i=[e.material.getBufferBindingByName("matrices")];e.material.inputsBindings.forEach(r=>{(r.name.includes("skin")||r.name.includes("morphTarget"))&&i.push(r)});const s=e.material.getBufferBindingByName("instances");return s&&i.push(s),t.bindings?t.bindings=[...i,...t.bindings]:t.bindings=[...i],t.shaders||(t.shaders={vertex:this.getDefaultShadowDepthVs({bindings:i,geometry:e.geometry}),fragment:this.getDefaultShadowDepthFs()}),t}addShadowCastingMesh(e,t={}){this.meshes.get(e.uuid)||(e.options.castShadows=!0,W(this,nt).set(e.uuid,e.material),t=this.patchShadowCastingMeshParams(e,t),W(this,ae).get(e.uuid)&&(W(this,ae).get(e.uuid).destroy(),W(this,ae).delete(e.uuid)),W(this,ae).set(e.uuid,new fi(this.renderer,{label:`${this.constructor.name} (index: ${this.index}) ${e.options.label} depth render material`,...t})),this.meshes.set(e.uuid,e))}useDepthMaterials(){this.meshes.forEach(e=>{e.useMaterial(W(this,ae).get(e.uuid))})}useOriginalMaterials(){this.meshes.forEach(e=>{e.useMaterial(W(this,nt).get(e.uuid))})}removeMesh(e){const t=W(this,ae).get(e.uuid);t&&(t.destroy(),W(this,ae).delete(e.uuid)),this.meshes.delete(e.uuid),this.meshes.size===0&&this.clearDepthTexture()}destroy(){this.onPropertyChanged("isActive",0),W(this,$e)!==null&&(this.removeDepthPass(W(this,$e)),ne(this,$e,null)),this.meshes.forEach(e=>this.removeMesh(e)),ne(this,nt,new Map),ne(this,ae,new Map),this.meshes=new Map,this.depthPassTarget?.destroy(),this.depthTexture?.destroy()}}mi=new WeakMap,gi=new WeakMap,yi=new WeakMap,xi=new WeakMap,vi=new WeakMap,Mt=new WeakMap,nt=new WeakMap,ae=new WeakMap,$e=new WeakMap,bi=new WeakSet,Ps=c(function({intensity:n=1,bias:e=0,normalBias:t=0,pcfSamples:i=1,depthTextureSize:s=new z(512),depthTextureFormat:r="depth24plus",autoRender:a=!0}={}){this.intensity=n,this.bias=e,this.normalBias=t,this.pcfSamples=i,this.depthTextureSize=s,this.depthTextureSize.onChange(()=>this.onDepthTextureSizeChanged()),this.depthTextureFormat=r,ne(this,Mt,a)},"setParameters_fn");const mo={...ln,viewMatrix:{type:"mat4x4f",value:new Float32Array(16)},projectionMatrix:{type:"mat4x4f",value:new Float32Array(16)}};class go extends un{static{c(this,"DirectionalShadow")}constructor(e,{light:t,intensity:i,bias:s,normalBias:r,pcfSamples:a,depthTextureSize:o,depthTextureFormat:h,autoRender:l,camera:u={left:-10,right:10,bottom:-10,top:10,near:.1,far:50}}={}){super(e,{light:t,intensity:i,bias:s,normalBias:r,pcfSamples:a,depthTextureSize:o,depthTextureFormat:h,autoRender:l}),this.options={...this.options,camera:u},this.camera={projectionMatrix:new D,viewMatrix:new D,up:new y(0,1,0),_left:u.left,_right:u.right,_bottom:u.bottom,_top:u.top,_near:u.near,_far:u.far};const d=this;["left","right","bottom","top","near","far"].forEach(p=>{Object.defineProperty(d.camera,p,{get(){return d.camera["_"+p]},set(m){d.camera["_"+p]=m,d.updateProjectionMatrix()}})})}setRendererBinding(){this.rendererBinding=this.renderer.bindings.directionalShadows}cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:a,autoRender:o,camera:h}={}){h&&(this.camera.left=h.left??-10,this.camera.right=h.right??10,this.camera.bottom=h.bottom??-10,this.camera.top=h.right??10,this.camera.near=h.near??.1,this.camera.far=h.far??50),super.cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:a,autoRender:o})}init(){super.init(),this.updateProjectionMatrix()}reset(){this.setRendererBinding(),super.reset(),this.onPropertyChanged("projectionMatrix",this.camera.projectionMatrix),this.onPropertyChanged("viewMatrix",this.camera.viewMatrix)}updateProjectionMatrix(){this.camera.projectionMatrix.identity().makeOrthographic({left:this.camera.left,right:this.camera.right,bottom:this.camera.bottom,top:this.camera.top,near:this.camera.near,far:this.camera.far}),this.onPropertyChanged("projectionMatrix",this.camera.projectionMatrix)}updateViewMatrix(e=new y,t=new y){e.x===0&&e.z===0?this.camera.up.set(0,0,1):this.camera.up.set(0,1,0),this.camera.viewMatrix.makeView(e,t,this.camera.up),this.onPropertyChanged("viewMatrix",this.camera.viewMatrix)}}var dn=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$f"),wi=c((n,e,t)=>(dn(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$d"),cn=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$f"),pn=c((n,e,t,i)=>(dn(n,e,"write to private field"),e.set(n,t),t),"__privateSet$d"),Tt,Pt;class yo extends xs{static{c(this,"DirectionalLight")}constructor(e,{color:t=new y(1),intensity:i=1,position:s=new y(1),target:r=new y,shadow:a=null}={}){super(e,{color:t,intensity:i,type:"directionalLights"}),cn(this,Tt,void 0),cn(this,Pt,void 0),this.options={...this.options,position:s,target:r,shadow:a},pn(this,Pt,new y),pn(this,Tt,new y),this.target=r,this.target.onChange(()=>this.setDirection()),this.position.copy(s),this.parent=this.renderer.scene,this.shadow=new go(this.renderer,{autoRender:!1,light:this}),a&&this.shadow.cast(a)}setRenderer(e){this.shadow?.setRenderer(e),super.setRenderer(e)}reset(){super.reset(),this.setDirection(),this.shadow?.reset()}setDirection(){wi(this,Pt).copy(this.target).sub(this.worldMatrix.getTranslation(wi(this,Tt))),this.onPropertyChanged("direction",wi(this,Pt)),this.shadow?.updateViewMatrix(wi(this,Tt),this.target)}applyScale(){}applyTransformOrigin(){}updateMatrixStack(){super.updateMatrixStack(),this.matricesNeedUpdate&&this.setDirection()}onMaxLightOverflow(e){super.onMaxLightOverflow(e),this.shadow?.setRendererBinding()}destroy(){super.destroy(),this.shadow.destroy()}}Tt=new WeakMap,Pt=new WeakMap;const xo=c((n=0,{bindings:e=[],geometry:t})=>`
struct PointShadowVSOutput {
  @builtin(position) position: vec4f,
  @location(0) worldPosition: vec3f,
}

@vertex fn main(
  attributes: Attributes,
) -> PointShadowVSOutput {  
  var pointShadowVSOutput: PointShadowVSOutput;
  
  ${Ss({geometry:t})}
  ${Ms({bindings:e,geometry:t})}
  
  let worldPos = worldPosition.xyz / worldPosition.w;
  
  let pointShadow: PointShadowsElement = pointShadows.pointShadowsElements[${n}];
  
  let lightDirection: vec3f = normalize(pointLights.elements[${n}].position - worldPos);
  let NdotL: f32 = dot(normalize(normal), lightDirection);
  let sinNdotL = sqrt(1.0 - NdotL * NdotL);
  let normalBias: f32 = pointShadow.normalBias * sinNdotL;
  
  worldPosition = vec4(worldPos - normal * normalBias, 1.0);
    
  var shadowPosition: vec4f = pointShadow.projectionMatrix * pointShadow.viewMatrices[pointShadow.face] * worldPosition;

  pointShadowVSOutput.position = shadowPosition;
  pointShadowVSOutput.worldPosition = worldPos;

  return pointShadowVSOutput;
}`,"getDefaultPointShadowDepthVs"),vo=c((n=0)=>`
struct PointShadowVSOutput {
  @builtin(position) position: vec4f,
  @location(0) worldPosition: vec3f,
}

@fragment fn main(fsInput: PointShadowVSOutput) -> @builtin(frag_depth) f32 {
  // get distance between fragment and light source
  var lightDistance: f32 = length(fsInput.worldPosition - pointLights.elements[${n}].position);
  
  let pointShadow: PointShadowsElement = pointShadows.pointShadowsElements[${n}];
  
  // map to [0, 1] range by dividing by far plane - near plane
  lightDistance = (lightDistance - pointShadow.cameraNear) / (pointShadow.cameraFar - pointShadow.cameraNear);
  
  // write this as modified depth
  return clamp(lightDistance, 0.0, 1.0);
}`,"getDefaultPointShadowDepthFs");var fn=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$e"),mn=c((n,e,t)=>(fn(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$c"),bo=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$e"),wo=c((n,e,t,i)=>(fn(n,e,"write to private field"),e.set(n,t),t),"__privateSet$c"),Rt;const Bo={face:{type:"i32",value:0},...ln,cameraNear:{type:"f32",value:0},cameraFar:{type:"f32",value:0},projectionMatrix:{type:"mat4x4f",value:new Float32Array(16)},viewMatrices:{type:"array<mat4x4f>",value:new Float32Array(16*6)}};class Co extends un{static{c(this,"PointShadow")}constructor(e,{light:t,intensity:i,bias:s,normalBias:r,pcfSamples:a,depthTextureSize:o,depthTextureFormat:h,autoRender:l,camera:u={near:.1,far:150}}={}){super(e,{light:t,intensity:i,bias:s,normalBias:r,pcfSamples:a,depthTextureSize:o,depthTextureFormat:h,autoRender:l}),bo(this,Rt,void 0),this.options={...this.options,camera:u},this.cubeDirections=[new y(-1,0,0),new y(1,0,0),new y(0,-1,0),new y(0,1,0),new y(0,0,-1),new y(0,0,1)],wo(this,Rt,new y),this.cubeUps=[new y(0,-1,0),new y(0,-1,0),new y(0,0,1),new y(0,0,-1),new y(0,-1,0),new y(0,-1,0)],u.far<=0&&(u.far=150),this.camera={projectionMatrix:new D,viewMatrices:[],_near:u.near,_far:u.far};for(let p=0;p<6;p++)this.camera.viewMatrices.push(new D);const d=this;["near","far"].forEach(p=>{Object.defineProperty(d.camera,p,{get(){return d.camera["_"+p]},set(m){d.camera["_"+p]=m,d.updateProjectionMatrix()}})})}setRendererBinding(){this.rendererBinding=this.renderer.bindings.pointShadows}cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:a,autoRender:o,camera:h}={}){h&&(this.camera.near=h.near??.1,this.camera.far=h.far!==void 0?h.far:this.light.range>0?this.light.range:150),super.cast({intensity:e,bias:t,normalBias:i,pcfSamples:s,depthTextureSize:r,depthTextureFormat:a,autoRender:o})}init(){super.init(),this.updateProjectionMatrix()}reset(){this.setRendererBinding(),super.reset(),this.updateProjectionMatrix()}updateProjectionMatrix(){this.camera.projectionMatrix.identity().makePerspective({near:this.camera.near,far:this.camera.far,fov:90,aspect:1}),this.onPropertyChanged("projectionMatrix",this.camera.projectionMatrix),this.onPropertyChanged("cameraNear",this.camera.near),this.onPropertyChanged("cameraFar",this.camera.far)}updateViewMatrices(e=new y){for(let t=0;t<6;t++){mn(this,Rt).copy(this.cubeDirections[t]).add(e),this.camera.viewMatrices[t].makeView(e,mn(this,Rt),this.cubeUps[t]);for(let i=0;i<16;i++)this.rendererBinding.childrenBindings[this.index].inputs.viewMatrices.value[t*16+i]=this.camera.viewMatrices[t].elements[i]}this.rendererBinding.childrenBindings[this.index].inputs.viewMatrices.shouldUpdate=!0}setDepthTexture(){if(this.depthTexture&&(this.depthTexture.size.width!==this.depthTextureSize.x||this.depthTexture.size.height!==this.depthTextureSize.y)){const e=Math.max(this.depthTextureSize.x,this.depthTextureSize.y);this.depthTexture.options.fixedSize.width=e,this.depthTexture.options.fixedSize.height=e,this.depthTexture.size.width=e,this.depthTexture.size.height=e,this.depthTexture.createTexture(),this.depthPassTarget&&this.depthPassTarget.resize()}else this.depthTexture||this.createDepthTexture()}createDepthTexture(){const e=Math.max(this.depthTextureSize.x,this.depthTextureSize.y);this.depthTexture=new j(this.renderer,{label:`${this.constructor.name} (index: ${this.index}) depth texture`,name:"pointShadowCubeDepthTexture"+this.index,type:"depth",format:this.depthTextureFormat,viewDimension:"cube",sampleCount:this.sampleCount,fixedSize:{width:e,height:e},autoDestroy:!1})}clearDepthTexture(){if(!this.depthTexture||!this.depthTexture.texture)return;const e=this.renderer.device.createCommandEncoder();!this.renderer.production&&e.pushDebugGroup(`Clear ${this.depthTexture.texture.label} command encoder`);for(let t=0;t<6;t++){const i=this.depthTexture.texture.createView({label:"Clear "+this.depthTexture.texture.label+" cube face view",dimension:"2d",arrayLayerCount:1,baseArrayLayer:t}),s={colorAttachments:[],depthStencilAttachment:{view:i,depthLoadOp:"clear",depthClearValue:1,depthStoreOp:"store"}};e.beginRenderPass(s).end()}!this.renderer.production&&e.popDebugGroup(),this.renderer.device.queue.submit([e.finish()])}removeDepthPass(e){this.renderer.onBeforeCommandEncoderCreation.remove(e)}render(e=!1){return this.renderer.onBeforeCommandEncoderCreation.add(()=>{if(this.meshes.size){this.renderer.setCameraBindGroup(),this.useDepthMaterials();for(let t=0;t<6;t++){const i=this.renderer.device.createCommandEncoder();this.renderer.production||i.pushDebugGroup(`${this.constructor.name} (index: ${this.index}): depth pass command encoder for face ${t}`),this.depthPassTarget.renderPass.setRenderPassDescriptor(this.depthTexture.texture.createView({label:this.depthTexture.texture.label+" cube face view "+t,dimension:"2d",arrayLayerCount:1,baseArrayLayer:t})),this.rendererBinding.childrenBindings[this.index].inputs.face.value=t,this.renderer.shouldUpdateCameraLightsBindGroup(),this.renderer.updateCameraLightsBindGroup(),this.renderDepthPass(i),this.renderer.production||i.popDebugGroup();const s=i.finish();this.renderer.device.queue.submit([s])}this.useOriginalMaterials(),this.renderer.pipelineManager.resetCurrentPipeline()}},{once:e,order:this.index})}getDefaultShadowDepthVs({bindings:e=[],geometry:t}){return{code:xo(this.index,{bindings:e,geometry:t})}}getDefaultShadowDepthFs(){return{code:vo(this.index)}}}Rt=new WeakMap;var gn=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$d"),Rs=c((n,e,t)=>(gn(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$b"),yn=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$d"),xn=c((n,e,t,i)=>(gn(n,e,"write to private field"),e.set(n,t),t),"__privateSet$b"),Bi,Et;class So extends xs{static{c(this,"PointLight")}constructor(e,{color:t=new y(1),intensity:i=1,position:s=new y,range:r=0,shadow:a=null}={}){super(e,{color:t,intensity:i,type:"pointLights"}),yn(this,Bi,void 0),yn(this,Et,void 0),this.options={...this.options,position:s,range:r,shadow:a},xn(this,Et,new y),this.position.copy(s),this.range=r,this.parent=this.renderer.scene,this.shadow=new Co(this.renderer,{autoRender:!1,light:this}),a&&this.shadow.cast(a)}setRenderer(e){this.shadow&&this.shadow.setRenderer(e),super.setRenderer(e)}reset(){super.reset(),this.onPropertyChanged("range",this.range),this.setPosition(),this.shadow?.reset()}get range(){return Rs(this,Bi)}set range(e){xn(this,Bi,e),this.onPropertyChanged("range",this.range)}setPosition(){this.onPropertyChanged("position",this.worldMatrix.getTranslation(Rs(this,Et))),this.shadow?.updateViewMatrices(Rs(this,Et))}applyScale(){}applyTransformOrigin(){}updateMatrixStack(){super.updateMatrixStack(),this.matricesNeedUpdate&&this.setPosition()}onMaxLightOverflow(e){super.onMaxLightOverflow(e),this.shadow?.setRendererBinding()}destroy(){super.destroy(),this.shadow.destroy()}}Bi=new WeakMap,Et=new WeakMap;var vn=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$c"),Es=c((n,e,t)=>(vn(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$a"),Mo=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$c"),To=c((n,e,t,i)=>(vn(n,e,"write to private field"),e.set(n,t),t),"__privateSet$a");let Po=0;const bn={autoRender:!0,useProjection:!1,useAsyncPipeline:!0,cullMode:"back",depth:!0,depthWriteEnabled:!0,depthCompare:"less",depthFormat:"depth24plus",transparent:!1,visible:!0,renderOrder:0,texturesOptions:{},renderBundle:null};function wn(n){var e,t;return t=class extends n{static{c(this,"_a")}constructor(...i){super(i[0],i[1],{...bn,...i[2]}),Mo(this,e,!0),this._onReadyCallback=()=>{},this._onBeforeRenderCallback=()=>{},this._onRenderCallback=()=>{},this._onAfterRenderCallback=()=>{},this._onAfterResizeCallback=()=>{};let s=i[0];const r={...bn,...i[2]};this.type="MeshBase",this.uuid=O(),Object.defineProperty(this,"index",{value:Po++}),s=$(s,r.label?r.label+" "+this.type:this.type),this.renderer=s;const{label:a,shaders:o,geometry:h,visible:l,renderOrder:u,outputTarget:d,additionalOutputTargets:f,useCustomScenePassEntry:p,renderBundle:m,texturesOptions:g,autoRender:v,...x}=r;this.outputTarget=d??null,this.renderBundle=m??null,this.additionalOutputTargets=f||[],x.sampleCount=x.sampleCount?x.sampleCount:this.outputTarget?this.outputTarget.renderPass.options.sampleCount:this.renderer&&this.renderer.renderPass?this.renderer.renderPass.options.sampleCount:1,this.options={...this.options??{},label:a??"Mesh "+this.renderer.meshes.length,...o!==void 0?{shaders:o}:{},...d!==void 0&&{outputTarget:d},...m!==void 0&&{renderBundle:m},texturesOptions:g,...v!==void 0&&{autoRender:v},useCustomScenePassEntry:p,...x},v!==void 0&&To(this,e,v),this.visible=l,this.renderOrder=u,this.ready=!1,this.userData={},h&&this.useGeometry(h),this.setMaterial({...this.cleanupRenderMaterialParameters({...this.options}),...h&&{verticesOrder:h.verticesOrder,topology:h.topology}}),this.addToScene(!0)}get autoRender(){return Es(this,e)}get ready(){return this._ready}set ready(i){i&&!this._ready&&this._onReadyCallback&&this._onReadyCallback(),this._ready=i}addToScene(i=!1){i&&this.renderer.meshes.push(this),this.setRenderingOptionsForRenderPass(this.outputTarget?this.outputTarget.renderPass:this.renderer.renderPass),Es(this,e)&&(this.renderer.scene.addMesh(this),this.additionalOutputTargets.length&&this.additionalOutputTargets.forEach(s=>{this.renderer.scene.addMeshToRenderTargetStack(this,s)}))}removeFromScene(i=!1){Es(this,e)&&this.renderer.scene.removeMesh(this),i&&(this.renderer.meshes=this.renderer.meshes.filter(s=>s.uuid!==this.uuid))}setRenderer(i){if(i=i&&i.renderer||i,!i||!(i.type==="GPURenderer"||i.type==="GPUCameraRenderer"||i.type==="GPUCurtainsRenderer")){L(`${this.options.label}: Cannot set ${i} as a renderer because it is not of a valid Renderer type.`);return}this.material?.setRenderer(i);const s=this.renderer;this.removeFromScene(!0),this.renderer=i,this.addToScene(!0),s.meshes.length||s.onBeforeRenderScene.add(r=>{s.forceClear(r)},{once:!0})}setOutputTarget(i){if(i&&i.type!=="RenderTarget"){L(`${this.options.label??this.type}: outputTarget is not a RenderTarget: ${i.type}`);return}this.removeFromScene(),this.outputTarget=i,this.addToScene()}setRenderBundle(i,s=!0){s?(this.removeFromScene(),this.renderBundle=i,this.addToScene()):this.renderBundle=i}loseContext(){this.ready=!1,this.geometry.loseContext(),this.material.loseContext()}restoreContext(){this.geometry.restoreContext(this.renderer),this.material.restoreContext()}setShaders(){const{shaders:i}=this.options;i?((!i.vertex||!i.vertex.code)&&(i.vertex={code:Bs,entryPoint:"main"}),(i.fragment===void 0||i.fragment&&!i.fragment.code)&&(i.fragment={code:Cs,entryPoint:"main"})):this.options.shaders={vertex:{code:Bs,entryPoint:"main"},fragment:{code:Cs,entryPoint:"main"}}}useGeometry(i){if(this.geometry&&(i.shouldCompute&&i.computeGeometry(),this.geometry.layoutCacheKey!==i.layoutCacheKey&&(L(`${this.options.label} (${this.type}): the current and new geometries do not have the same vertexBuffers layout, causing a probable pipeline recompilation. This should be avoided.

Current geometry layout:

${this.geometry.wgslStructFragment}

--------

New geometry layout:

${i.wgslStructFragment}`),this.material.setAttributesFromGeometry(i),this.material.setPipelineEntry()),this.geometry.consumers.delete(this.uuid),this.options.renderBundle&&(this.options.renderBundle.ready=!1)),this.geometry=i,this.geometry.consumers.add(this.uuid),this.computeGeometry(),this.material){const s={...this.material.options.rendering,verticesOrder:i.verticesOrder,topology:i.topology};this.material.setRenderingOptions(s)}}computeGeometry(){this.geometry.shouldCompute&&this.geometry.computeGeometry()}setGeometry(){this.geometry&&(this.geometry.ready||this.geometry.createBuffers({renderer:this.renderer,label:this.options.label+" geometry"}),this.setMaterialGeometryAttributes())}setRenderingOptionsForRenderPass(i){const s={transparent:this.transparent,sampleCount:i.options.sampleCount,...i.options.colorAttachments.length&&{targets:i.options.colorAttachments.map((r,a)=>({format:r.targetFormat,...this.options.targets?.length&&this.options.targets[a]&&this.options.targets[a].blend&&{blend:this.options.targets[a].blend}}))},depth:i.options.useDepth,...i.options.useDepth&&{depthFormat:i.options.depthFormat}};this.material?.setRenderingOptions(s)}cleanupRenderMaterialParameters(i){return delete i.additionalOutputTargets,delete i.autoRender,delete i.outputTarget,delete i.renderBundle,delete i.texturesOptions,delete i.useCustomScenePassEntry,i}useMaterial(i){let s=null,r=!1;this.material&&(r=this.material.options.label.includes("depth render material")||i.options.label.includes("depth render material"),this.geometry&&(s=this.material.cacheKey),this.options.renderBundle&&(this.options.renderBundle.ready=!1)),this.material=i,this.geometry&&this.material.setAttributesFromGeometry(this.geometry),this.transparent=this.material.options.rendering.transparent,this.material.options.domTextures?.filter(a=>a instanceof Xe).forEach(a=>this.onDOMTextureAdded(a)),s&&s!==this.material.cacheKey&&!r&&this.material.setPipelineEntry()}setMaterial(i){this.setShaders(),i.shaders=this.options.shaders,i.label=i.label+" material",this.useMaterial(new fi(this.renderer,i))}setMaterialGeometryAttributes(){this.material&&!this.material.attributes&&this.material.setAttributesFromGeometry(this.geometry)}get transparent(){return this._transparent}set transparent(i){const s=this.transparent!==void 0&&i!==this.transparent;s&&this.removeFromScene(),this._transparent=i,s&&this.addToScene()}get visible(){return this._visible}set visible(i){this._visible=i}get domTextures(){return this.material?.domTextures||[]}get textures(){return this.material?.textures||[]}createDOMTexture(i){i.name||(i.name="texture"+(this.textures.length+this.domTextures.length)),i.label||(i.label=this.options.label+" "+i.name);const s={...i,...this.options.texturesOptions};this.renderBundle&&(s.useExternalTextures=!1);const r=new Xe(this.renderer,s);return this.addDOMTexture(r),r}addDOMTexture(i){this.renderBundle&&(this.renderBundle.ready=!1),this.material.addTexture(i),this.onDOMTextureAdded(i)}onDOMTextureAdded(i){i.parentMesh=this}createTexture(i){i.name||(i.name="texture"+(this.textures.length+this.domTextures.length));const s=new j(this.renderer,i);return this.addTexture(s),s}addTexture(i){this.renderBundle&&(this.renderBundle.ready=!1),this.material.addTexture(i)}get uniforms(){return this.material?.uniforms}get storages(){return this.material?.storages}resize(i){super.resize&&super.resize(i),this.textures?.forEach(s=>{s.options.fromTexture&&s.copy(s.options.fromTexture)}),this.domTextures?.forEach(s=>{s.resize()}),this._onAfterResizeCallback&&this._onAfterResizeCallback()}onReady(i){return i&&(this._onReadyCallback=i),this}onBeforeRender(i){return i&&(this._onBeforeRenderCallback=i),this}onRender(i){return i&&(this._onRenderCallback=i),this}onAfterRender(i){return i&&(this._onAfterRenderCallback=i),this}onAfterResize(i){return i&&(this._onAfterResizeCallback=i),this}onBeforeRenderScene(){!this.renderer.ready||!this.ready||!this.visible||this._onBeforeRenderCallback&&this._onBeforeRenderCallback()}onBeforeRenderPass(){this.renderer.ready&&(this.setGeometry(),this.visible&&this._onRenderCallback&&this._onRenderCallback(),this.material.onBeforeRender(),this.ready=this.material&&this.material.ready&&this.geometry&&this.geometry.ready)}onRenderPass(i){this.ready&&(this.material.render(i),this.geometry.render(i))}onAfterRenderPass(){this._onAfterRenderCallback&&this._onAfterRenderCallback()}render(i){this.onBeforeRenderPass(),!(!this.renderer.ready||!this.visible)&&(!this.renderer.production&&i.pushDebugGroup(this.options.label),this.onRenderPass(i),!this.renderer.production&&i.popDebugGroup(),this.onAfterRenderPass())}remove(){this.removeFromScene(!0),this.destroy(),this.renderer.meshes.length||this.renderer.onBeforeRenderScene.add(i=>{this.renderer.forceClear(i)},{once:!0})}destroy(){super.destroy&&super.destroy(),this.material?.destroy(),this.geometry.consumers.delete(this.uuid),this.geometry.consumers.size||this.geometry?.destroy(this.renderer)}},e=new WeakMap,t}c(wn,"MeshBaseMixin");class Ro{static{c(this,"CacheManager")}constructor(){this.planeGeometries=[]}getPlaneGeometry(e){return this.planeGeometries.find(t=>t.definition.id===e.definition.id)}getPlaneGeometryByID(e){return this.planeGeometries.find(t=>t.definition.id===e)}addPlaneGeometry(e){this.planeGeometries.push(e)}destroy(){this.planeGeometries=[]}}const Ci=new Ro;class zs extends wn(class{}){static{c(this,"FullscreenPlane")}constructor(e,t={}){e=$(e,t.label?t.label+" FullscreenQuadMesh":"FullscreenQuadMesh");let i=Ci.getPlaneGeometryByID(2);i||(i=new ys({widthSegments:1,heightSegments:1}),Ci.addPlaneGeometry(i)),(!t.shaders||!t.shaders.vertex)&&["uniforms","storages"].forEach(s=>{Object.values(t[s]??{}).forEach(r=>r.visibility=["fragment"])}),t.depthWriteEnabled=!1,t.label||(t.label="FullscreenQuadMesh"),super(e,null,{geometry:i,...t}),this.size={document:{width:this.renderer.boundingRect.width,height:this.renderer.boundingRect.height,top:this.renderer.boundingRect.top,left:this.renderer.boundingRect.left}},this.type="FullscreenQuadMesh"}resize(e=null){this.size.document=e??this.renderer.boundingRect,super.resize(e)}mouseToPlaneCoords(e=new z){return new z((e.x-this.size.document.left)/this.size.document.width*2-1,1-(e.y-this.size.document.top)/this.size.document.height*2)}}class Be{static{c(this,"Mat3")}constructor(e=new Float32Array([1,0,0,0,1,0,0,0,1])){this.type="Mat3",this.elements=e}set(e,t,i,s,r,a,o,h,l){const u=this.elements;return u[0]=e,u[1]=s,u[2]=o,u[3]=t,u[4]=r,u[5]=h,u[6]=i,u[7]=a,u[8]=l,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}setFromArray(e=new Float32Array([1,0,0,0,1,0,0,0,1]),t=0){for(let i=0;i<this.elements.length;i++)this.elements[i]=e[i+t];return this}copy(e=new Be){const t=e.elements;return this.elements[0]=t[0],this.elements[1]=t[1],this.elements[2]=t[2],this.elements[3]=t[3],this.elements[4]=t[4],this.elements[5]=t[5],this.elements[6]=t[6],this.elements[7]=t[7],this.elements[8]=t[8],this}clone(){return new Be().copy(this)}setFromMat4(e=new D){const t=e.elements;return this.set(t[0],t[4],t[8],t[1],t[5],t[9],t[2],t[6],t[10]),this}multiply(e=new Be){return this.multiplyMatrices(this,e)}premultiply(e=new Be){return this.multiplyMatrices(e,this)}multiplyMatrices(e=new Be,t=new Be){const i=e.elements,s=t.elements,r=this.elements,a=i[0],o=i[3],h=i[6],l=i[1],u=i[4],d=i[7],f=i[2],p=i[5],m=i[8],g=s[0],v=s[3],x=s[6],w=s[1],T=s[4],b=s[7],B=s[2],M=s[5],S=s[8];return r[0]=a*g+o*w+h*B,r[3]=a*v+o*T+h*M,r[6]=a*x+o*b+h*S,r[1]=l*g+u*w+d*B,r[4]=l*v+u*T+d*M,r[7]=l*x+u*b+d*S,r[2]=f*g+p*w+m*B,r[5]=f*v+p*T+m*M,r[8]=f*x+p*b+m*S,this}invert(){const e=this.elements,t=e[0],i=e[1],s=e[2],r=e[3],a=e[4],o=e[5],h=e[6],l=e[7],u=e[8],d=u*a-o*l,f=o*h-u*r,p=l*r-a*h,m=t*d+i*f+s*p;if(m===0)return this.set(0,0,0,0,0,0,0,0,0);const g=1/m;return e[0]=d*g,e[1]=(s*l-u*i)*g,e[2]=(o*i-s*a)*g,e[3]=f*g,e[4]=(u*t-s*h)*g,e[5]=(s*r-o*t)*g,e[6]=p*g,e[7]=(i*h-l*t)*g,e[8]=(a*t-i*r)*g,this}transpose(){let e;const t=this.elements;return e=t[1],t[1]=t[3],t[3]=e,e=t[2],t[2]=t[6],t[6]=e,e=t[5],t[5]=t[7],t[7]=e,this}getNormalMatrix(e=new D){return this.setFromMat4(e).invert().transpose()}}class _s extends pe{static{c(this,"ProjectedObject3D")}constructor(e){super(),e=Fe(e,"ProjectedObject3D"),this.camera=e.camera}applyPosition(){super.applyPosition(),this.shouldUpdateProjectionMatrixStack()}applyRotation(){super.applyRotation(),this.shouldUpdateProjectionMatrixStack()}applyScale(){super.applyScale(),this.shouldUpdateProjectionMatrixStack()}applyTransformOrigin(){super.applyTransformOrigin(),this.shouldUpdateProjectionMatrixStack()}setMatrices(){super.setMatrices(),this.matrices={...this.matrices,modelView:{matrix:new D,shouldUpdate:!0,onUpdate:()=>{this.modelViewMatrix.multiplyMatrices(this.viewMatrix,this.worldMatrix)}},modelViewProjection:{matrix:new D,shouldUpdate:!0,onUpdate:()=>{this.modelViewProjectionMatrix.multiplyMatrices(this.projectionMatrix,this.modelViewMatrix)}},normal:{matrix:new Be,shouldUpdate:!0,onUpdate:()=>{this.normalMatrix.getNormalMatrix(this.worldMatrix)}}}}get modelViewMatrix(){return this.matrices.modelView.matrix}set modelViewMatrix(e){this.matrices.modelView.matrix=e,this.matrices.modelView.shouldUpdate=!0}get viewMatrix(){return this.camera.viewMatrix}get projectionMatrix(){return this.camera.projectionMatrix}get modelViewProjectionMatrix(){return this.matrices.modelViewProjection.matrix}set modelViewProjectionMatrix(e){this.matrices.modelViewProjection.matrix=e,this.matrices.modelViewProjection.shouldUpdate=!0}get normalMatrix(){return this.matrices.normal.matrix}set normalMatrix(e){this.matrices.normal.matrix=e,this.matrices.normal.shouldUpdate=!0}shouldUpdateProjectionMatrixStack(){this.matrices.modelView.shouldUpdate=!0,this.matrices.modelViewProjection.shouldUpdate=!0}shouldUpdateWorldMatrix(){super.shouldUpdateWorldMatrix(),this.shouldUpdateProjectionMatrixStack(),this.matrices.normal.shouldUpdate=!0}shouldUpdateMatrixStack(){this.shouldUpdateModelMatrix(),this.shouldUpdateProjectionMatrixStack()}}const Bn=`
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
  @location(1) normal: vec3f,
};

@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {
  // normals
  return vec4(normalize(fsInput.normal) * 0.5 + 0.5, 1.0);
}`,Eo=`
fn getPCFShadowContribution(index: i32, worldPosition: vec3f, depthTexture: texture_depth_2d) -> f32 {
  let directionalShadow: DirectionalShadowsElement = directionalShadows.directionalShadowsElements[index];
  
  // get shadow coords
  var shadowCoords: vec3f = vec3((directionalShadow.projectionMatrix * directionalShadow.viewMatrix * vec4(worldPosition, 1.0)).xyz);
  
  // Convert XY to (0, 1)
  // Y is flipped because texture coords are Y-down.
  shadowCoords = vec3(
    shadowCoords.xy * vec2(0.5, -0.5) + vec2(0.5),
    shadowCoords.z
  );
  
  var visibility = 0.0;
  
  let inFrustum: bool = shadowCoords.x >= 0.0 && shadowCoords.x <= 1.0 && shadowCoords.y >= 0.0 && shadowCoords.y <= 1.0;
  let frustumTest: bool = inFrustum && shadowCoords.z <= 1.0;
  
  if(frustumTest) {
    // Percentage-closer filtering. Sample texels in the region
    // to smooth the result.
    let size: vec2f = vec2f(textureDimensions(depthTexture).xy);
  
    let texelSize: vec2f = 1.0 / size;
    
    let sampleCount: i32 = directionalShadow.pcfSamples;
    let maxSamples: f32 = f32(sampleCount) - 1.0;
  
    for (var x = 0; x < sampleCount; x++) {
      for (var y = 0; y < sampleCount; y++) {
        let offset = texelSize * vec2(
          f32(x) - maxSamples * 0.5,
          f32(y) - maxSamples * 0.5
        );
        
        visibility += textureSampleCompareLevel(
          depthTexture,
          depthComparisonSampler,
          shadowCoords.xy + offset,
          shadowCoords.z - directionalShadow.bias
        );
      }
    }
    visibility /= f32(sampleCount * sampleCount);
    
    visibility = clamp(visibility, 1.0 - saturate(directionalShadow.intensity), 1.0);
  }
  else {
    visibility = 1.0;
  }
  
  return visibility;
}
`,zo=c(n=>{const e=n.shadowCastingLights.filter(i=>i.type==="directionalLights"),t=Math.max(n.lightsBindingParams.directionalLights.max,1);return`
fn getPCFDirectionalShadows(worldPosition: vec3f) -> array<f32, ${t}> {
  var directionalShadowContribution: array<f32, ${t}>;
  
  var lightDirection: vec3f;
  
  ${e.map((i,s)=>`lightDirection = worldPosition - directionalLights.elements[${s}].direction;
      
      ${i.shadow.isActive?`
      if(directionalShadows.directionalShadowsElements[${s}].isActive > 0) {
        directionalShadowContribution[${s}] = getPCFShadowContribution(
          ${s},
          worldPosition,
          shadowDepthTexture${s}
        );
      } else {
        directionalShadowContribution[${s}] = 1.0;
      }
          `:`directionalShadowContribution[${s}] = 1.0;`}`).join(`
`)}
  
  return directionalShadowContribution;
}
`},"getPCFDirectionalShadows"),_o=`
fn getPCFPointShadowContribution(index: i32, shadowPosition: vec4f, depthCubeTexture: texture_depth_cube) -> f32 {
  let pointShadow: PointShadowsElement = pointShadows.pointShadowsElements[index];

  // Percentage-closer filtering. Sample texels in the region
  // to smooth the result.
  var visibility = 0.0;
  var closestDepth = 0.0;
  let currentDepth: f32 = shadowPosition.w;
  let cameraRange: f32 = pointShadow.cameraFar - pointShadow.cameraNear;
  let normalizedDepth: f32 = (shadowPosition.w - pointShadow.cameraNear) / cameraRange;

  let maxSize: f32 = f32(max(textureDimensions(depthCubeTexture).x, textureDimensions(depthCubeTexture).y));

  let texelSize: vec3f = vec3(1.0 / maxSize);
  let sampleCount: i32 = pointShadow.pcfSamples;
  let maxSamples: f32 = f32(sampleCount) - 1.0;
  
  for (var x = 0; x < sampleCount; x++) {
    for (var y = 0; y < sampleCount; y++) {
      for (var z = 0; z < sampleCount; z++) {
        let offset = texelSize * vec3(
          f32(x) - maxSamples * 0.5,
          f32(y) - maxSamples * 0.5,
          f32(z) - maxSamples * 0.5
        );

        closestDepth = textureSampleCompareLevel(
          depthCubeTexture,
          depthComparisonSampler,
          shadowPosition.xyz + offset,
          normalizedDepth - pointShadow.bias
        );

        closestDepth *= cameraRange;

        visibility += select(0.0, 1.0, currentDepth <= closestDepth);
      }
    }
  }
  
  visibility /= f32(sampleCount * sampleCount * sampleCount);
  
  visibility = clamp(visibility, 1.0 - saturate(pointShadow.intensity), 1.0);
  
  return visibility;
}`,Ao=c(n=>{const e=n.shadowCastingLights.filter(i=>i.type==="pointLights"),t=Math.max(n.lightsBindingParams.pointLights.max,1);return`
fn getPCFPointShadows(worldPosition: vec3f) -> array<f32, ${t}> {
  var pointShadowContribution: array<f32, ${t}>;
  
  var lightDirection: vec3f;
  var lightDistance: f32;
  var lightColor: vec3f;
  
  ${e.map((i,s)=>`lightDirection = pointLights.elements[${s}].position - worldPosition;
      
      lightDistance = length(lightDirection);
      lightColor = pointLights.elements[${s}].color * rangeAttenuation(pointLights.elements[${s}].range, lightDistance);
      
      ${i.shadow.isActive?`
      if(pointShadows.pointShadowsElements[${s}].isActive > 0 && length(lightColor) > 0.0001) {
        pointShadowContribution[${s}] = getPCFPointShadowContribution(
          ${s},
          vec4(lightDirection, length(lightDirection)),
          pointShadowCubeDepthTexture${s}
        );
      } else {
        pointShadowContribution[${s}] = 1.0;
      }
            `:`pointShadowContribution[${s}] = 1.0;`}`).join(`
`)}
  
  return pointShadowContribution;
}
`},"getPCFPointShadows"),Cn={frustumCulling:"OBB",DOMFrustumMargins:{top:0,right:0,bottom:0,left:0},receiveShadows:!1,castShadows:!1,transmissive:!1};function Sn(n){return class extends wn(n){static{c(this,"ProjectedMeshBase")}constructor(...t){super(t[0],t[1],{...Cn,...t[2],useProjection:!0}),this._onReEnterViewCallback=()=>{},this._onLeaveViewCallback=()=>{};let i=t[0];const s={...Cn,...t[2],useProjection:!0};this.type="MeshTransformed",i=Fe(i,s.label?s.label+" "+this.type:this.type),this.renderer=i;const{frustumCulling:r,DOMFrustumMargins:a,receiveShadows:o,castShadows:h,transmissive:l}=s;this.options={...this.options??{},frustumCulling:r,DOMFrustumMargins:a,receiveShadows:o,castShadows:h,transmissive:l},this.options.castShadows&&this.renderer.shadowCastingLights.forEach(u=>{u.shadow.isActive&&u.shadow.addShadowCastingMesh(this)}),this.setDOMFrustum()}setRenderer(t){super.setRenderer(t),this.camera=this.renderer.camera,this.options.castShadows&&this.renderer.shadowCastingLights.forEach(i=>{i.shadow.isActive&&i.shadow.addShadowCastingMesh(this)})}setRenderBundle(t,i=!0){if(this.renderBundle&&t&&this.renderBundle.uuid===t.uuid)return;const s=!!this.renderBundle,r=this.material.getBindGroupByBindingName("matrices"),a=this.material.getBufferBindingByName("matrices");this.renderBundle&&!t&&a.parent&&(a.parent=null,a.shouldResetBindGroup=!0,r.createBindingBuffer(a)),super.setRenderBundle(t,i),this.renderBundle&&this.renderBundle.binding&&(s&&r.destroyBufferBinding(a),a.options.offset=this.renderBundle.meshes.size-1,a.parent=this.renderBundle.binding,a.shouldResetBindGroup=!0)}patchRenderBundleBinding(t=0){const i=this.material.getBufferBindingByName("matrices");i.options.offset=t,i.parent=this.renderBundle.binding,i.shouldResetBindGroup=!0}setShaders(){const{shaders:t}=this.options;return t?((!t.vertex||!t.vertex.code)&&(t.vertex={code:ws,entryPoint:"main"}),(t.fragment===void 0||t.fragment&&!t.fragment.code)&&(t.fragment={code:Bn,entryPoint:"main"})):this.options.shaders={vertex:{code:ws,entryPoint:"main"},fragment:{code:Bn,entryPoint:"main"}},this.options.receiveShadows&&this.renderer.shadowCastingLights.find(s=>s.shadow.isActive)&&t.fragment&&typeof t.fragment=="object"&&(t.fragment.code=zo(this.renderer)+Eo+Ao(this.renderer)+_o+t.fragment.code),t}useGeometry(t){super.useGeometry(t),this.domFrustum&&(this.domFrustum.boundingBox=this.geometry.boundingBox),this.shouldUpdateMatrixStack()}setDOMFrustum(){this.domFrustum=new Qr({boundingBox:this.geometry?.boundingBox,modelViewProjectionMatrix:this.modelViewProjectionMatrix,containerBoundingRect:this.renderer.boundingRect,DOMFrustumMargins:this.options.DOMFrustumMargins,onReEnterView:()=>{this._onReEnterViewCallback&&this._onReEnterViewCallback()},onLeaveView:()=>{this._onLeaveViewCallback&&this._onLeaveViewCallback()}}),this.DOMFrustumMargins=this.domFrustum.DOMFrustumMargins,this.frustumCulling=this.options.frustumCulling}cleanupRenderMaterialParameters(t){if(delete t.castShadows,delete t.DOMFrustumMargins,delete t.frustumCulling,delete t.receiveShadows,delete t.transmissive,this.options.receiveShadows){const i=[];let s=[];this.renderer.shadowCastingLights.forEach(r=>{r.shadow.isActive&&(i.push(r.shadow.depthTexture),s.push(r.shadow.depthComparisonSampler))}),s=s.filter((r,a,o)=>o.findIndex(h=>h.uuid===r.uuid)===a),t.textures?t.textures=[...t.textures,...i]:t.textures=i,t.samplers?t.samplers=[...t.samplers,...s]:t.samplers=s}return this.options.transmissive&&(this.renderer.createTransmissionTarget(),t.textures?t.textures=[...t.textures,this.renderer.transmissionTarget.texture]:t.textures=[this.renderer.transmissionTarget.texture],t.samplers?t.samplers=[...t.samplers,this.renderer.transmissionTarget.sampler]:t.samplers=[this.renderer.transmissionTarget.sampler]),super.cleanupRenderMaterialParameters(t)}setMaterial(t){const i={label:"Matrices",name:"matrices",visibility:["vertex","fragment"],minOffset:this.renderer.device.limits.minUniformBufferOffsetAlignment,struct:{model:{type:"mat4x4f",value:this.worldMatrix},modelView:{type:"mat4x4f",value:this.modelViewMatrix},normal:{type:"mat3x3f",value:this.normalMatrix}}};this.options.renderBundle&&this.options.renderBundle.binding&&(i.parent=this.options.renderBundle.binding,i.offset=this.options.renderBundle.meshes.size);const s=new Z(i);t.bindings||(t.bindings=[]),t.bindings.unshift(s),super.setMaterial(t)}get visible(){return this._visible}set visible(t){this.shouldUpdateMatrixStack(),this._visible=t}resize(t){this.domFrustum&&this.domFrustum.setContainerBoundingRect(this.renderer.boundingRect),super.resize(t)}applyScale(){super.applyScale();for(const t of this.domTextures)t.resize()}get projectedBoundingRect(){return this.domFrustum?.projectedBoundingRect}onReEnterView(t){return t&&(this._onReEnterViewCallback=t),this}onLeaveView(t){return t&&(this._onLeaveViewCallback=t),this}get clipSpaceBoundingSphere(){const{center:t,radius:i,min:s,max:r}=this.geometry.boundingBox,a=this.worldMatrix.getTranslation(),o=i*this.worldMatrix.getMaxScaleOnAxis(),h=t.clone().add(a);h.z+=s.z;const l=t.clone().add(a);l.z+=r.z;const u=h.clone();u.y+=o;const d=l.clone();d.y+=o,h.applyMat4(this.camera.viewProjectionMatrix),l.applyMat4(this.camera.viewProjectionMatrix),u.applyMat4(this.camera.viewProjectionMatrix),d.applyMat4(this.camera.viewProjectionMatrix);const f=h.distance(u),p=l.distance(d),m={xMin:h.x-f,xMax:h.x+f,yMin:h.y-f,yMax:h.y+f},g={xMin:l.x-p,xMax:l.x+p,yMin:l.y-p,yMax:l.y+p},v={xMin:Math.min(m.xMin,g.xMin),yMin:Math.min(m.yMin,g.yMin),xMax:Math.max(m.xMax,g.xMax),yMax:Math.max(m.yMax,g.yMax)},x=l.add(h).multiplyScalar(.5).clone();x.x=(v.xMax+v.xMin)/2,x.y=(v.yMax+v.yMin)/2;const w=Math.max(v.xMax-v.xMin,v.yMax-v.yMin)*.5;return{center:x,radius:w}}checkFrustumCulling(){this.matricesNeedUpdate&&this.domFrustum&&this.frustumCulling&&(this.frustumCulling==="sphere"?this.domFrustum.setDocumentCoordsFromClipSpaceSphere(this.clipSpaceBoundingSphere):this.domFrustum.setDocumentCoordsFromClipSpaceOBB(),this.domFrustum.intersectsContainer())}onBeforeRenderPass(){this.material&&this.matricesNeedUpdate&&this.material.shouldUpdateInputsBindings("matrices"),super.onBeforeRenderPass()}onRenderPass(t){this.ready&&(this._onRenderCallback&&this._onRenderCallback(),(this.domFrustum&&this.domFrustum.isIntersecting||!this.frustumCulling)&&(this.material.render(t),this.geometry.render(t)))}destroy(){this.options.castShadows&&this.renderer.shadowCastingLights.forEach(t=>{t.shadow.isActive&&t.shadow.removeMesh(this)}),super.destroy()}}}c(Sn,"ProjectedMeshBaseMixin");class As extends Sn(_s){static{c(this,"Mesh")}constructor(e,t={}){e=Fe(e,t.label?t.label+" Mesh":"Mesh"),super(e,null,t),this.type="Mesh"}}class Ls extends bs{static{c(this,"ComputePipelineEntry")}constructor(e){const{label:t,renderer:i,bindGroups:s}=e,r="ComputePipelineEntry";$(i,t?t+" "+r:r),super(e),this.type=r,this.shaders={compute:{head:"",code:"",module:null}},this.descriptor=null}patchShaders(){this.shaders.compute.head="",this.shaders.compute.code="";const e=[];for(const t of this.bindGroups){let i=0;t.bindings.forEach((s,r)=>{s.wgslGroupFragment.forEach((a,o)=>{e.push({groupIndex:t.index,bindIndex:i,wgslStructFragment:s.wgslStructFragment,wgslGroupFragment:a,newLine:r===t.bindings.length-1&&o===s.wgslGroupFragment.length-1}),i++})})}for(const t of e)t.wgslStructFragment&&this.shaders.compute.head.indexOf(t.wgslStructFragment)===-1&&(this.shaders.compute.head=`
${t.wgslStructFragment}
${this.shaders.compute.head}`),this.shaders.compute.head.indexOf(t.wgslGroupFragment)===-1&&(this.shaders.compute.head=`${this.shaders.compute.head}
@group(${t.groupIndex}) @binding(${t.bindIndex}) ${t.wgslGroupFragment}`),t.newLine&&(this.shaders.compute.head+=`
`);this.shaders.compute.code=this.shaders.compute.head+this.options.shaders.compute.code}createShaders(){this.patchShaders(),this.shaders.compute.module=this.createShaderModule({code:this.shaders.compute.code,type:"compute"})}createPipelineDescriptor(){this.shaders.compute.module&&(this.descriptor={label:this.options.label,layout:this.layout,compute:{module:this.shaders.compute.module,entryPoint:this.options.shaders.compute.entryPoint}})}createComputePipeline(){if(this.shaders.compute.module)try{this.pipeline=this.renderer.createComputePipeline(this.descriptor)}catch(e){this.status.error=e,te(e)}}async createComputePipelineAsync(){if(this.shaders.compute.module)try{this.pipeline=await this.renderer.createComputePipelineAsync(this.descriptor),this.status.compiled=!0,this.status.compiling=!1,this.status.error=null}catch(e){this.status.error=e,te(e)}}async compilePipelineEntry(){super.compilePipelineEntry(),this.options.useAsync?await this.createComputePipelineAsync():(this.createComputePipeline(),this.status.compiled=!0,this.status.compiling=!1,this.status.error=null)}}class Mn{static{c(this,"PipelineManager")}constructor(){this.type="PipelineManager",this.currentPipelineIndex=null,this.pipelineEntries=[],this.activeBindGroups=[]}compareShaders(e,t){return e.code===t.code&&e.entryPoint===t.entryPoint}isSameRenderPipeline(e){return this.pipelineEntries.filter(t=>t instanceof rt).find(t=>{const{options:i}=t,{shaders:s,rendering:r,cacheKey:a}=e,o=a===i.cacheKey,h=this.compareShaders(s.vertex,i.shaders.vertex),l=!s.fragment&&!i.shaders.fragment||this.compareShaders(s.fragment,i.shaders.fragment),u=on(r,i.rendering);return o&&!u.length&&h&&l})}createRenderPipeline(e){const{renderer:t,attributes:i,bindGroups:s,cacheKey:r,options:a}=e,{shaders:o,label:h,useAsyncPipeline:l,rendering:u}=a,d={renderer:t,label:h+" render pipeline",shaders:o,useAsync:l,bindGroups:s,cacheKey:r,rendering:u,attributes:i},f=this.isSameRenderPipeline(d);if(f)return f;{const p=new rt(d);return this.pipelineEntries.push(p),p}}isSameComputePipeline(e){return this.pipelineEntries.filter(t=>t instanceof Ls).find(t=>{const{options:i}=t,{shaders:s,cacheKey:r}=e,a=r===i.cacheKey,o=this.compareShaders(s.compute,i.shaders.compute);return a&&o})}createComputePipeline(e){const{renderer:t,bindGroups:i,cacheKey:s,options:r}=e,{shaders:a,label:o,useAsyncPipeline:h}=r,l={renderer:t,label:o+" compute pipeline",shaders:a,useAsync:h,bindGroups:i,cacheKey:s},u=this.isSameComputePipeline(l);if(u)return u;{const d=new Ls(l);return this.pipelineEntries.push(d),d}}setCurrentPipeline(e,t){t.index!==this.currentPipelineIndex&&(e.setPipeline(t.pipeline),this.currentPipelineIndex=t.index)}setActiveBindGroups(e,t){t.forEach((i,s)=>{(!this.activeBindGroups[s]||this.activeBindGroups[s].uuid!==i.uuid||this.activeBindGroups[s].index!==i.index)&&(this.activeBindGroups[s]=i,e.setBindGroup(i.index,i.bindGroup))})}resetCurrentPipeline(){this.currentPipelineIndex=null,this.activeBindGroups=[]}}class Lo{static{c(this,"ResizeManager")}constructor(){this.shouldWatch=!0,this.entries=[],typeof window=="object"&&"ResizeObserver"in window&&(this.resizeObserver=new ResizeObserver(e=>{e.map(i=>this.entries.filter(s=>s.element.isSameNode(i.target))).flat().sort((i,s)=>s.priority-i.priority)?.forEach(i=>{i&&i.callback&&i.callback()})}))}useObserver(e=!0){this.shouldWatch=e}observe({element:e,priority:t,callback:i}){if(!e||!this.shouldWatch)return;this.resizeObserver?.observe(e);const s={element:e,priority:t,callback:i};this.entries.push(s)}unobserve(e){this.resizeObserver?.unobserve(e),this.entries=this.entries.filter(t=>!t.element.isSameNode(e))}destroy(){this.resizeObserver?.disconnect()}}const Do=new Lo;class Ds{static{c(this,"DOMElement")}constructor({element:e=document.body,priority:t=1,onSizeChanged:i=c((r=null)=>{},"onSizeChanged"),onPositionChanged:s=c((r=null)=>{},"onPositionChanged")}={}){if(typeof e=="string"){if(this.element=document.querySelector(e),!this.element){const r=typeof e=="string"?`'${e}' selector`:`${e} HTMLElement`;te(`DOMElement: corresponding ${r} not found.`)}}else this.element=e;this.priority=t,this.isResizing=!1,this.onSizeChanged=i,this.onPositionChanged=s,this.resizeManager=Do,this.resizeManager.observe({element:this.element,priority:this.priority,callback:()=>{this.setSize()}}),this.setSize()}compareBoundingRect(e,t){return!["x","y","left","top","right","bottom","width","height"].some(i=>e[i]!==t[i])}get boundingRect(){return this._boundingRect}set boundingRect(e){const t=!!this.boundingRect&&this.compareBoundingRect(e,this.boundingRect);this._boundingRect={top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.width,height:e.height,x:e.x,y:e.y},t||this.onSizeChanged(this.boundingRect)}updateScrollPosition(e={x:0,y:0}){this.isResizing||(this._boundingRect.top+=e.y,this._boundingRect.left+=e.x,(e.x||e.y)&&this.onPositionChanged(this.boundingRect))}setSize(e=null){!this.element||this.isResizing||(this.isResizing=!0,this.boundingRect=e??this.element.getBoundingClientRect(),setTimeout(()=>{this.isResizing=!1},10))}destroy(){this.resizeManager.unobserve(this.element)}}const Go=new y,Fo=new y,Gs=new y,Fs=new y;class Tn extends pe{static{c(this,"Scene")}constructor({renderer:e}){super(),e=$(e,"Scene"),this.renderer=e,this.computePassEntries=[],this.renderPassEntries={pingPong:[],renderTarget:[],prePass:[],screen:[],postProPass:[]}}createScreenPassEntry(e="",t=1){const i={label:e,renderPass:this.renderer.renderPass,renderTexture:null,onBeforeRenderPass:null,onAfterRenderPass:null,element:null,stack:{unProjected:{opaque:[],transparent:[]},projected:{opaque:[],transparent:[]}}};return t>=0?this.renderPassEntries.screen.push(i):this.renderPassEntries.screen.unshift(i),i}setMainRenderPassEntry(){this.createScreenPassEntry("Main scene screen render pass")}getRenderPassEntryLength(e){return e?e.element?e.element.visible?1:0:e.stack.unProjected.opaque.length+e.stack.unProjected.transparent.length+e.stack.projected.opaque.length+e.stack.projected.transparent.length:0}addComputePass(e){this.computePassEntries.push(e),this.computePassEntries.sort((t,i)=>t.renderOrder!==i.renderOrder?t.renderOrder-i.renderOrder:t.index-i.index)}removeComputePass(e){this.computePassEntries=this.computePassEntries.filter(t=>t.uuid!==e.uuid)}addRenderTarget(e){this.renderPassEntries.renderTarget.find(t=>t.renderPass.uuid===e.renderPass.uuid)||this.renderPassEntries.renderTarget.push({label:e.options.label,renderPass:e.renderPass,renderTexture:e.renderTexture,onBeforeRenderPass:null,onAfterRenderPass:null,element:null,stack:{unProjected:{opaque:[],transparent:[]},projected:{opaque:[],transparent:[]}}})}removeRenderTarget(e){this.renderPassEntries.renderTarget=this.renderPassEntries.renderTarget.filter(t=>t.renderPass.uuid!==e.renderPass.uuid)}getRenderTargetPassEntry(e=null){return e?this.renderPassEntries.renderTarget.find(t=>t.renderPass.uuid===e.renderPass.uuid):this.renderPassEntries.screen.find(t=>t.renderPass.uuid===this.renderer.renderPass.uuid)}getMeshProjectionStack(e){const t=e.options.useCustomScenePassEntry?e.options.useCustomScenePassEntry:"transmissive"in e.options&&e.options.transmissive?this.renderer.transmissionTarget.passEntry:this.getRenderTargetPassEntry(e.outputTarget),{stack:i}=t;return e.material.options.rendering.useProjection?i.projected:i.unProjected}orderStack(e){e.sort((t,i)=>t.renderOrder-i.renderOrder||t.index-i.index)}isStackObjectRenderBundle(e){return e.type==="RenderBundle"}addMeshToRenderTargetStack(e,t=null){const i=this.getRenderTargetPassEntry(t),{stack:s}=i,r=e.material.options.rendering.useProjection?s.projected:s.unProjected,o=!!e.transparent?r.transparent:r.opaque;o.push(e),this.orderStack(o)}addMesh(e){e.renderBundle&&e.renderBundle.addMesh(e,e.outputTarget?e.outputTarget.renderPass:this.renderer.renderPass);const{useProjection:t}=e.material.options.rendering;if(!e.renderBundle){const i=this.getMeshProjectionStack(e),r=!!e.transparent?i.transparent:i.opaque;r.push(e),this.orderStack(r)}"parent"in e&&!e.parent&&t&&(e.parent=this)}removeMesh(e){if(e.renderBundle)e.renderBundle.removeMesh(e,!1);else{const t=e.material.options.rendering.useProjection?"projected":"unProjected",s=!!e.transparent?"transparent":"opaque";for(const r of Object.values(this.renderPassEntries))r.forEach(a=>{a.stack&&(a.stack[t][s]=a.stack[t][s].filter(o=>o.uuid!==e.uuid))})}if("transmissive"in e.options&&e.options.transmissive){const t=this.renderer.transmissionTarget.passEntry;(t?this.getRenderPassEntryLength(t):0)===0&&this.renderer.destroyTransmissionTarget()}"parent"in e&&e.parent&&e.parent.object3DIndex===this.object3DIndex&&(e.parent=null)}addRenderBundle(e,t){const i=e.transparent?t.transparent:t.opaque;i.push(e),this.orderStack(i)}removeRenderBundle(e){const i=!!e.useProjection?"projected":"unProjected",r=!!e.transparent?"transparent":"opaque",a=this.renderPassEntries.renderTarget.find(o=>o.renderPass.uuid===e.options.renderPass?.uuid);if(a){const{stack:o}=a,h=o[i];h[r]=h[r].filter(l=>l.uuid!==e.uuid)}else this.renderPassEntries.screen.forEach(o=>{o.stack&&(o.stack[i][r]=o.stack[i][r].filter(h=>h.uuid!==e.uuid))})}addShaderPass(e){const t=e.inputTarget||e.outputTarget?null:(o,h)=>{e.renderTexture&&h&&this.renderer.copyGPUTextureToTexture(h,e.renderTexture,o),this.renderer.postProcessingPass.setLoadOp("clear")},i=!e.outputTarget&&e.options.copyOutputToRenderTexture?(o,h)=>{e.renderTexture&&h&&this.renderer.copyGPUTextureToTexture(h,e.renderTexture,o)}:null,s=e.outputTarget?e.outputTarget.renderPass:e.options.isPrePass?this.renderer.renderPass:this.renderer.postProcessingPass,a={label:e.options.isPrePass?e.options.label+" scene pre pass":e.options.label+" scene post processing pass",renderPass:s,renderTexture:e.outputTarget?e.outputTarget.renderTexture:null,onBeforeRenderPass:t,onAfterRenderPass:i,element:e,stack:null};if(e.renderBundle){const{renderBundle:o}=e;o.meshes.size>=1?(L(`${o.options.label} (${o.type}): Cannot add more than 1 ShaderPass to a render bundle. This ShaderPass will not be added: ${e.options.label}`),e.renderBundle=null):o.addMesh(e,s)}e.options.isPrePass?(this.renderPassEntries.prePass.push(a),this.renderPassEntries.prePass.sort((o,h)=>o.element.renderOrder-h.element.renderOrder||o.element.index-h.element.index)):(this.renderPassEntries.postProPass.push(a),this.renderPassEntries.postProPass.sort((o,h)=>{const l=o.element&&!o.element.outputTarget,u=o.element?o.element.renderOrder:0,d=o.element?o.element.index:0,f=h.element&&!h.element.outputTarget,p=h.element?h.element.renderOrder:0,m=h.element?h.element.index:0;return l&&!f?1:!l&&f?-1:u!==p?u-p:d-m}))}removeShaderPass(e){e.renderBundle&&e.renderBundle.empty(),e.options.isPrePass?this.renderPassEntries.prePass=this.renderPassEntries.prePass.filter(t=>!t.element||t.element.uuid!==e.uuid):this.renderPassEntries.postProPass=this.renderPassEntries.postProPass.filter(t=>!t.element||t.element.uuid!==e.uuid)}addPingPongPlane(e){if(this.renderPassEntries.pingPong.push({label:e.options.label+" scene pass",renderPass:e.outputTarget.renderPass,renderTexture:e.outputTarget.renderTexture,onBeforeRenderPass:null,onAfterRenderPass:(t,i)=>{this.renderer.copyGPUTextureToTexture(i,e.renderTexture,t)},element:e,stack:null}),e.renderBundle){const{renderBundle:t}=e;t.meshes.size>=1?(L(`${t.options.label} (${t.type}): Cannot add more than 1 PingPongPlane to a render bundle. This PingPongPlane will not be added: ${e.options.label}`),e.renderBundle=null):t.addMesh(e,e.outputTarget.renderPass)}this.renderPassEntries.pingPong.sort((t,i)=>t.element.renderOrder-i.element.renderOrder)}removePingPongPlane(e){e.renderBundle&&e.renderBundle.empty(),this.renderPassEntries.pingPong=this.renderPassEntries.pingPong.filter(t=>t.element.uuid!==e.uuid)}getObjectRenderPassEntry(e){if(e.type==="RenderTarget")return this.renderPassEntries.renderTarget.find(t=>t.renderPass.uuid===e.renderPass.uuid);if(e.type==="PingPongPlane")return this.renderPassEntries.pingPong.find(t=>t.element.uuid===e.uuid);if(e.type==="ShaderPass")return this.renderPassEntries.screen.find(t=>t.element?.uuid===e.uuid);{const t=e.outputTarget?"renderTarget":"screen";return e.renderBundle?this.renderPassEntries[t].find(i=>[...i.stack.unProjected.opaque,...i.stack.unProjected.transparent,...i.stack.projected.opaque,...i.stack.projected.transparent].filter(s=>s.type==="RenderBundle").some(s=>s.meshes.get(e.uuid))):this.renderPassEntries[t].find(i=>[...i.stack.unProjected.opaque,...i.stack.unProjected.transparent,...i.stack.projected.opaque,...i.stack.projected.transparent].some(s=>s.uuid===e.uuid))}}sortTransparentMeshes(e){e.sort((t,i)=>{if(t.renderOrder!==i.renderOrder||this.isStackObjectRenderBundle(t)||this.isStackObjectRenderBundle(i))return t.renderOrder-i.renderOrder;t.geometry?Gs.copy(t.geometry.boundingBox.center).applyMat4(t.worldMatrix):t.worldMatrix.getTranslation(Gs),i.geometry?Fs.copy(i.geometry.boundingBox.center).applyMat4(i.worldMatrix):i.worldMatrix.getTranslation(Fs);const s=t.geometry?t.geometry.boundingBox.radius*t.worldMatrix.getMaxScaleOnAxis():0,r=i.geometry?i.geometry.boundingBox.radius*i.worldMatrix.getMaxScaleOnAxis():0;return i.camera.worldMatrix.getTranslation(Fo).distance(Fs)-r-(t.camera.worldMatrix.getTranslation(Go).distance(Gs)-s)})}renderSinglePassEntry(e,t){const i=t.renderPass.updateView(t.renderTexture?.texture);t.onBeforeRenderPass&&t.onBeforeRenderPass(e,i);const s=e.beginRenderPass(t.renderPass.descriptor);if(this.renderer.production||s.pushDebugGroup(t.element?`${t.element.options.label} render pass using ${t.renderPass.options.label} descriptor`:`Render stack pass using ${t.renderPass.options.label}${t.renderTexture?" onto "+t.renderTexture.options.label:""}`),t.element)t.element.renderBundle?t.element.renderBundle.render(s):t.element.render(s);else if(t.stack){for(const r of t.stack.unProjected.opaque)r.render(s);for(const r of t.stack.unProjected.transparent)r.render(s);if(t.stack.projected.opaque.length||t.stack.projected.transparent.length){for(const r of t.stack.projected.opaque)r.render(s);this.sortTransparentMeshes(t.stack.projected.transparent);for(const r of t.stack.projected.transparent)r.render(s)}}this.renderer.production||s.popDebugGroup(),s.end(),t.onAfterRenderPass&&t.onAfterRenderPass(e,i),this.renderer.pipelineManager.resetCurrentPipeline()}onBeforeRender(){for(let e=0,t=this.renderer.meshes.length;e<t;e++)this.renderer.meshes[e].onBeforeRenderScene();this.renderer.animations.forEach(e=>e.update()),this.updateMatrixStack(),this.renderer.animations.forEach(e=>e.onAfterUpdate());for(const e of this.renderer.meshes)"checkFrustumCulling"in e&&e.visible&&e.checkFrustumCulling()}render(e){for(const t of this.computePassEntries){const i=e.beginComputePass();this.renderer.production||i.pushDebugGroup(`${t.options.label}: begin compute pass`),t.render(i),this.renderer.production||i.popDebugGroup(),i.end(),t.copyBufferToResult(e),this.renderer.pipelineManager.resetCurrentPipeline()}for(const t in this.renderPassEntries){t==="postProPass"&&this.renderer.renderPass.setDepthLoadOp("clear");let i=0;this.renderPassEntries[t].forEach(s=>{if(!this.getRenderPassEntryLength(s))return;const r=t==="screen"&&(i!==0||this.renderPassEntries.prePass.length),a=t==="postProPass"||t==="prePass"&&i!==0||r;s.renderPass.setLoadOp(a?"load":"clear"),r&&s.renderPass.setDepthLoadOp("load"),i++,this.renderSinglePassEntry(e,s)})}}}var Pn=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$b"),Rn=c((n,e,t)=>(Pn(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$9"),$o=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$b"),Oo=c((n,e,t,i)=>(Pn(n,e,"write to private field"),e.set(n,t),t),"__privateSet$9"),ko=c((n,e,t,i)=>({set _(s){Oo(n,e,s)},get _(){return Rn(n,e,i)}}),"__privateWrapper"),Si;class Mi{static{c(this,"TasksQueueManager")}constructor(){$o(this,Si,0),this.queue=[]}add(e=s=>{},{order:t=this.queue.length,once:i=!1}={}){const s={callback:e,order:t,once:i,id:Rn(this,Si)};return ko(this,Si)._++,this.queue.push(s),this.queue.sort((r,a)=>r.order-a.order),s.id}remove(e=0){this.queue=this.queue.filter(t=>t.id!==e)}execute(e){this.queue.forEach(t=>{t.callback(e),t.once&&this.remove(t.id)})}}Si=new WeakMap;class $s{static{c(this,"GPURenderer")}constructor({deviceManager:e,label:t,container:i,pixelRatio:s=1,autoResize:r=!0,context:a={},renderPass:o}){this._onBeforeRenderCallback=p=>{},this._onAfterRenderCallback=p=>{},this._onResizeCallback=()=>{},this._onAfterResizeCallback=()=>{},this.type="GPURenderer",this.uuid=O(),(!e||e.constructor.name!=="GPUDeviceManager")&&te(t?`${t} (${this.type}): no device manager or wrong device manager provided: ${e}`:`${this.type}: no device manager or wrong device manager provided: ${e}`),t||(t=`${this.constructor.name}${e.renderers.length}`),this.deviceManager=e,this.deviceManager.addRenderer(this),this.shouldRender=!0,this.shouldRenderScene=!0;const h={alphaMode:"premultiplied",format:this.deviceManager.gpu?.getPreferredCanvasFormat(),...a};o={useDepth:!0,sampleCount:4,...o},this.options={deviceManager:e,label:t,container:i,pixelRatio:s,autoResize:r,context:h,renderPass:o},this.pixelRatio=s??window.devicePixelRatio??1;const l=i instanceof OffscreenCanvas,u=l||i instanceof HTMLCanvasElement;this.canvas=u?i:document.createElement("canvas");const{width:d,height:f}=this.canvas;this.rectBBox={width:d,height:f,top:0,left:0},this.setScene(),this.setTasksQueues(),this.setRendererObjects(),l||(this.domElement=new Ds({element:i,priority:5,onSizeChanged:()=>{this.options.autoResize&&this.resize()}}),this.resize(),u||this.domElement.element.appendChild(this.canvas)),this.deviceManager.device&&this.setContext()}setSize(e=null){e={width:Math.max(1,this.boundingRect.width),height:Math.max(1,this.boundingRect.height),top:this.boundingRect.top,left:this.boundingRect.left,...e},this.rectBBox=e;const t={width:this.rectBBox.width,height:this.rectBBox.height};t.width*=this.pixelRatio,t.height*=this.pixelRatio,this.clampToMaxDimension(t),this.canvas.width=Math.floor(t.width),this.canvas.height=Math.floor(t.height),this.canvas.style&&(this.canvas.style.width=this.rectBBox.width+"px",this.canvas.style.height=this.rectBBox.height+"px")}setPixelRatio(e=1){this.pixelRatio=e,this.resize(this.rectBBox)}resize(e=null){this.setSize(e),this._onResizeCallback&&this._onResizeCallback(),this.resizeObjects(),this._onAfterResizeCallback&&this._onAfterResizeCallback()}resizeObjects(){this.renderBundles.forEach(e=>e.resize()),this.textures.forEach(e=>{e.resize()}),this.renderPass?.resize(),this.postProcessingPass?.resize(),this.renderTargets.forEach(e=>e.resize()),this.computePasses.forEach(e=>e.resize()),this.pingPongPlanes.forEach(e=>e.resize(this.boundingRect)),this.shaderPasses.forEach(e=>e.resize(this.boundingRect)),this.resizeMeshes()}resizeMeshes(){this.meshes.forEach(e=>{e.resize(this.boundingRect)})}get boundingRect(){if(this.domElement&&this.domElement.boundingRect)return this.domElement.boundingRect;if(this.domElement){const e=this.domElement.element?.getBoundingClientRect();return{top:e.top,right:e.right,bottom:e.bottom,left:e.left,width:e.width,height:e.height,x:e.x,y:e.y}}else return{top:this.rectBBox.top,right:this.rectBBox.left+this.rectBBox.width,bottom:this.rectBBox.top+this.rectBBox.height,left:this.rectBBox.left,width:this.rectBBox.width,height:this.rectBBox.height,x:this.rectBBox.left,y:this.rectBBox.top}}clampToMaxDimension(e){this.device&&(e.width=Math.min(this.device.limits.maxTextureDimension2D,e.width),e.height=Math.min(this.device.limits.maxTextureDimension2D,e.height))}get device(){return this.deviceManager.device}get ready(){return this.deviceManager.ready&&!!this.context&&!!this.canvas.width&&!!this.canvas.height}get production(){return this.deviceManager.production}get samplers(){return this.deviceManager.samplers}get buffers(){return this.deviceManager.buffers}get indirectBuffers(){return this.deviceManager.indirectBuffers}get pipelineManager(){return this.deviceManager.pipelineManager}get deviceRenderedObjects(){return this.deviceManager.deviceRenderedObjects}configureContext(){this.context.configure({device:this.device,...this.options.context,usage:GPUTextureUsage.RENDER_ATTACHMENT|GPUTextureUsage.COPY_SRC|GPUTextureUsage.COPY_DST})}setContext(){this.context=this.canvas.getContext("webgpu"),this.device&&(this.configureContext(),this.setMainRenderPasses())}loseContext(){this.renderBundles.forEach(e=>e.loseContext()),this.renderedObjects.forEach(e=>e.loseContext())}restoreContext(){this.configureContext(),this.textures.forEach(e=>{e.createTexture()}),this.renderPass?.resize(),this.postProcessingPass?.resize(),this.renderTargets.forEach(e=>e.resize()),this.renderedObjects.forEach(e=>e.restoreContext())}setMainRenderPasses(){this.renderPass=new pi(this,{label:this.options.label+" render pass",...this.options.renderPass}),this.scene.setMainRenderPassEntry(),this.postProcessingPass=new pi(this,{label:this.options.label+" post processing render pass",useDepth:!1,sampleCount:1})}setScene(){this.scene=new Tn({renderer:this})}createBuffer(e){const t=this.deviceManager.device?.createBuffer(e.options);return this.deviceManager.addBuffer(e),t}removeBuffer(e){this.deviceManager.removeBuffer(e)}queueWriteBuffer(e,t,i){this.deviceManager.device?.queue.writeBuffer(e,t,i)}copyBufferToBuffer({srcBuffer:e,dstBuffer:t,commandEncoder:i}){if(!e||!e.GPUBuffer)return L(`${this.options.label} (${this.type}): cannot copy to buffer because the source buffer has not been provided`),null;if(t||(t=new qe),t.GPUBuffer||t.createBuffer(this,{label:`GPURenderer (${this.options.label}): destination copy buffer from: ${e.options.label}`,size:e.GPUBuffer.size,usage:["copyDst","mapRead"]}),e.GPUBuffer.mapState!=="unmapped"){L(`${this.options.label} (${this.type}): Cannot copy from ${e.GPUBuffer} because it is currently mapped`);return}if(t.GPUBuffer.mapState!=="unmapped"){L(`${this.options.label} (${this.type}): Cannot copy from ${t.GPUBuffer} because it is currently mapped`);return}const s=!!i;if(s||(i=this.deviceManager.device?.createCommandEncoder({label:`${this.type} (${this.options.label}): Copy buffer command encoder`}),!this.production&&i.pushDebugGroup(`${this.type} (${this.options.label}): Copy buffer command encoder`)),i.copyBufferToBuffer(e.GPUBuffer,0,t.GPUBuffer,0,t.GPUBuffer.size),!s){!this.production&&i.popDebugGroup();const r=i.finish();this.deviceManager.device?.queue.submit([r])}return t}get bindGroups(){return this.deviceManager.bindGroups}addBindGroup(e){this.deviceManager.addBindGroup(e)}removeBindGroup(e){this.deviceManager.removeBindGroup(e)}createBindGroupLayout(e){return this.deviceManager.device?.createBindGroupLayout(e)}createBindGroup(e){return this.deviceManager.device?.createBindGroup(e)}createShaderModule(e){return this.device?.createShaderModule(e)}createPipelineLayout(e){return this.device?.createPipelineLayout(e)}createRenderPipeline(e){return this.device?.createRenderPipeline(e)}async createRenderPipelineAsync(e){return await this.device?.createRenderPipelineAsync(e)}createComputePipeline(e){return this.device?.createComputePipeline(e)}async createComputePipelineAsync(e){return await this.device?.createComputePipelineAsync(e)}get domTextures(){return this.deviceManager.domTextures}addDOMTexture(e){this.deviceManager.addDOMTexture(e)}removeDOMTexture(e){this.deviceManager.removeDOMTexture(e)}addTexture(e){this.textures.push(e)}removeTexture(e){this.textures=this.textures.filter(t=>t.uuid!==e.uuid)}createTexture(e){return this.deviceManager.device?.createTexture(e)}uploadTexture(e){this.deviceManager.uploadTexture(e)}generateMips(e,t=null){this.deviceManager.generateMips(e,t)}importExternalTexture(e){return this.deviceManager.device?.importExternalTexture({source:e})}copyGPUTextureToTexture(e,t,i){i.copyTextureToTexture({texture:e},{texture:t.texture},[e.width,e.height,e.depthOrArrayLayers]),t.options.generateMips&&this.generateMips(t,i)}copyTextureToGPUTexture(e,t,i){i.copyTextureToTexture({texture:e.texture},{texture:t},[t.width,t.height,t.depthOrArrayLayers])}createSampler(e){const t=this.samplers.find(i=>JSON.stringify(i.options)===JSON.stringify(e.options)&&i.sampler);if(t)return t.sampler;{const{type:i,...s}=e.options,r=this.deviceManager.device?.createSampler({label:e.label,...s});return this.deviceManager.addSampler(e),r}}removeSampler(e){this.deviceManager.removeSampler(e)}setTasksQueues(){this.onBeforeCommandEncoderCreation=new Mi,this.onBeforeRenderScene=new Mi,this.onAfterRenderScene=new Mi,this.onAfterCommandEncoderSubmission=new Mi}setRendererObjects(){this.computePasses=[],this.pingPongPlanes=[],this.shaderPasses=[],this.renderTargets=[],this.meshes=[],this.textures=[],this.renderBundles=new Map,this.animations=new Map}get renderedObjects(){return[...this.computePasses,...this.meshes,...this.shaderPasses,...this.pingPongPlanes]}getObjectsByBindGroup(e){return this.deviceRenderedObjects.filter(t=>[...t.material.bindGroups,...t.material.inputsBindGroups,...t.material.clonedBindGroups].some(i=>i.uuid===e.uuid))}getObjectsByTexture(e){return this.deviceRenderedObjects.filter(t=>[...t.material.domTextures,...t.material.textures].some(i=>i.uuid===e.uuid))}onBeforeRender(e){return e&&(this._onBeforeRenderCallback=e),this}onAfterRender(e){return e&&(this._onAfterRenderCallback=e),this}onResize(e){return e&&(this._onResizeCallback=e),this}onAfterResize(e){return e&&(this._onAfterResizeCallback=e),this}renderSingleComputePass(e,t,i=!0){const s=e.beginComputePass();t.render(s),s.end(),i&&t.copyBufferToResult(e)}renderSingleMesh(e,t){const i=e.beginRenderPass(this.renderPass.descriptor);t.render(i),i.end()}renderOnce(e){const t=this.device?.createCommandEncoder({label:"Render once command encoder"});!this.production&&t.pushDebugGroup("Render once command encoder"),this.pipelineManager.resetCurrentPipeline(),e.forEach(s=>{s.type==="ComputePass"?this.renderSingleComputePass(t,s):this.renderSingleMesh(t,s)}),!this.production&&t.popDebugGroup();const i=t.finish();this.device?.queue.submit([i]),this.pipelineManager.resetCurrentPipeline()}forceClear(e){const t=!!e;if(t||(e=this.device?.createCommandEncoder({label:`${this.type} (${this.options.label}): Force clear command encoder`}),!this.production&&e.pushDebugGroup(`${this.type} (${this.options.label}): Force clear command encoder`)),this.renderPass.updateView(),this.renderPass.setLoadOp("clear"),this.renderPass.setDepthLoadOp("clear"),e.beginRenderPass(this.renderPass.descriptor).end(),!t){!this.production&&e.popDebugGroup();const s=e.finish();this.device?.queue.submit([s])}}onBeforeCommandEncoder(){this.ready&&(this.shouldRenderScene&&this.scene?.onBeforeRender(),this.onBeforeCommandEncoderCreation.execute())}onAfterCommandEncoder(){this.ready&&this.onAfterCommandEncoderSubmission.execute()}render(e){!this.ready||!this.shouldRender||(this._onBeforeRenderCallback&&this._onBeforeRenderCallback(e),this.onBeforeRenderScene.execute(e),this.shouldRenderScene&&this.scene?.render(e),this._onAfterRenderCallback&&this._onAfterRenderCallback(e),this.onAfterRenderScene.execute(e))}destroy(){this.deviceManager.renderers=this.deviceManager.renderers.filter(e=>e.uuid!==this.uuid),this.domElement?.destroy(),this.renderBundles.forEach(e=>e.destroy()),this.animations=new Map,this.renderPass?.destroy(),this.postProcessingPass?.destroy(),this.renderTargets.forEach(e=>e.destroy()),this.renderedObjects.forEach(e=>e.remove()),this.textures.forEach(e=>e.destroy()),this.context?.unconfigure()}}var En=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$a"),Uo=c((n,e,t)=>(En(n,e,"read from private field"),e.get(n)),"__privateGet$8"),Io=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$a"),Os=c((n,e,t,i)=>(En(n,e,"write to private field"),e.set(n,t),t),"__privateSet$8"),at;class ks extends $s{static{c(this,"GPUCameraRenderer")}constructor({deviceManager:e,label:t,container:i,pixelRatio:s=1,autoResize:r=!0,context:a={},renderPass:o,camera:h={},lights:l={}}){super({deviceManager:e,label:t,container:i,pixelRatio:s,autoResize:r,context:a,renderPass:o}),Io(this,at,void 0),this.type="GPUCameraRenderer",h={fov:50,near:.1,far:1e3,...h},l!==!1&&(l={maxAmbientLights:2,maxDirectionalLights:5,maxPointLights:5,...l}),this.options={...this.options,camera:h,lights:l},this.bindings={},Os(this,at,!0),this.lights=[],this.setCamera(h),this.setCameraBinding(),this.options.lights&&(this.setLightsBinding(),this.setShadowsBinding()),this.setCameraLightsBindGroup()}loseContext(){super.loseContext(),this.cameraLightsBindGroup.loseContext()}restoreContext(){super.restoreContext(),this.cameraLightsBindGroup?.restoreContext(),this.updateCameraBindings()}setMainRenderPasses(){super.setMainRenderPasses(),this.transmissionTarget={sampler:new Ke(this,{label:"Transmission sampler",name:"transmissionSampler",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge"})}}setCamera(e){const{width:t,height:i}=this.rectBBox;this.useCamera(new fs({fov:e.fov,near:e.near,far:e.far,width:t,height:i,pixelRatio:this.pixelRatio,onMatricesChanged:()=>{this.onCameraMatricesChanged()}}))}useCamera(e){if(!(this.camera&&e&&this.camera.uuid===e.uuid)&&(this.camera&&(this.camera.parent=null,this.camera.onMatricesChanged=()=>{}),this.camera=e,this.camera.parent=this.scene,this.bindings.camera)){this.camera.onMatricesChanged=()=>this.onCameraMatricesChanged(),this.bindings.camera.inputs.view.value=this.camera.viewMatrix,this.bindings.camera.inputs.projection.value=this.camera.projectionMatrix;for(const t of this.meshes)"modelViewMatrix"in t&&(t.camera=this.camera)}}onCameraMatricesChanged(){this.updateCameraBindings();for(const e of this.meshes)"modelViewMatrix"in e&&e.shouldUpdateProjectionMatrixStack()}setCameraBinding(){this.bindings.camera=new Z({label:"Camera",name:"camera",visibility:["vertex","fragment"],struct:{view:{type:"mat4x4f",value:this.camera.viewMatrix},projection:{type:"mat4x4f",value:this.camera.projectionMatrix},position:{type:"vec3f",value:this.camera.position.clone().setFromMatrixPosition(this.camera.worldMatrix),onBeforeUpdate:()=>{this.bindings.camera.inputs.position.value.copy(this.camera.position).setFromMatrixPosition(this.camera.worldMatrix)}}}})}addLight(e){this.lights.push(e),this.bindings[e.type].inputs.count.value++,this.bindings[e.type].inputs.count.shouldUpdate=!0}removeLight(e){this.lights=this.lights.filter(t=>t.uuid!==e.uuid),this.bindings[e.type].inputs.count.value--,this.bindings[e.type].inputs.count.shouldUpdate=!0}setLightsBinding(){if(!this.options.lights)return;this.lightsBindingParams={ambientLights:{max:this.options.lights.maxAmbientLights,label:"Ambient lights",params:{color:{type:"array<vec3f>",size:3}}},directionalLights:{max:this.options.lights.maxDirectionalLights,label:"Directional lights",params:{color:{type:"array<vec3f>",size:3},direction:{type:"array<vec3f>",size:3}}},pointLights:{max:this.options.lights.maxPointLights,label:"Point lights",params:{color:{type:"array<vec3f>",size:3},position:{type:"array<vec3f>",size:3},range:{type:"array<f32>",size:1}}}},Object.keys({ambientLights:null,directionalLights:null,pointLights:null}).forEach(t=>{this.setLightsTypeBinding(t)})}setLightsTypeBinding(e){const t=Object.keys(this.lightsBindingParams[e].params).map(i=>({key:i,type:this.lightsBindingParams[e].params[i].type,size:this.lightsBindingParams[e].params[i].size})).reduce((i,s)=>(i[s.key]={type:s.type,value:new Float32Array(Math.max(this.lightsBindingParams[e].max,1)*s.size)},i),{});this.bindings[e]=new Z({label:this.lightsBindingParams[e].label,name:e,bindingType:"storage",visibility:["vertex","fragment","compute"],struct:{count:{type:"i32",value:0},...t}})}onMaxLightOverflow(e){this.production||L(`${this.options.label} (${this.type}): You are overflowing the current max lights count of '${this.lightsBindingParams[e].max}' for this type of lights: ${e}. This should be avoided by setting a larger ${"max"+e.charAt(0).toUpperCase()+e.slice(1)} when instancing your ${this.type}.`),this.lightsBindingParams[e].max++;const t=this.cameraLightsBindGroup.getBindingByName(e);t&&this.cameraLightsBindGroup.destroyBufferBinding(t),this.setLightsTypeBinding(e);const i=this.cameraLightsBindGroup.bindings.findIndex(s=>s.name===e);if(i!==-1?this.cameraLightsBindGroup.bindings[i]=this.bindings[e]:(this.bindings[e].shouldResetBindGroup=!0,this.bindings[e].shouldResetBindGroupLayout=!0,this.cameraLightsBindGroup.addBinding(this.bindings[e]),this.shouldUpdateCameraLightsBindGroup()),e==="directionalLights"||e==="pointLights"){const s=e.replace("Lights","")+"Shadows",r=this.cameraLightsBindGroup.getBindingByName(s);r&&this.cameraLightsBindGroup.destroyBufferBinding(r),this.setShadowsTypeBinding(e);const a=this.cameraLightsBindGroup.bindings.findIndex(o=>o.name===s);a!==-1?this.cameraLightsBindGroup.bindings[a]=this.bindings[s]:(this.bindings[s].shouldResetBindGroup=!0,this.bindings[s].shouldResetBindGroupLayout=!0,this.cameraLightsBindGroup.addBinding(this.bindings[s]),this.shouldUpdateCameraLightsBindGroup())}this.cameraLightsBindGroup.resetEntries(),this.cameraLightsBindGroup.createBindGroup(),this.lights.forEach(s=>{s.type===e&&s.reset()})}get shadowCastingLights(){return this.lights.filter(e=>e.type==="directionalLights"||e.type==="pointLights")}setShadowsBinding(){this.shadowsBindingsStruct={directional:mo,point:Bo},this.setShadowsTypeBinding("directionalLights"),this.setShadowsTypeBinding("pointLights")}setShadowsTypeBinding(e){const t=e.replace("Lights",""),i=t+"Shadows",s=this.shadowsBindingsStruct[t],r=t.charAt(0).toUpperCase()+t.slice(1)+" shadows";this.bindings[i]=new Z({label:r,name:i,bindingType:"storage",visibility:["vertex","fragment","compute"],childrenBindings:[{binding:new Z({label:r+" element",name:i+"Elements",bindingType:"uniform",visibility:["vertex","fragment"],struct:s}),count:Math.max(1,this.lightsBindingParams[e].max),forceArray:!0}]})}setCameraLightsBindGroup(){this.cameraLightsBindGroup=new Zt(this,{label:this.options.label+": Camera and lights uniform bind group",bindings:Object.keys(this.bindings).map(e=>this.bindings[e]).flat()}),this.cameraLightsBindGroup.consumers.add(this.uuid),this.device&&this.setCameraBindGroup()}setCameraBindGroup(){this.cameraLightsBindGroup&&this.cameraLightsBindGroup.shouldCreateBindGroup&&(this.cameraLightsBindGroup.setIndex(0),this.cameraLightsBindGroup.createBindGroup())}shouldUpdateCameraLightsBindGroup(){Os(this,at,!0)}updateCameraBindings(){this.bindings.camera?.shouldUpdateBinding("view"),this.bindings.camera?.shouldUpdateBinding("projection"),this.bindings.camera?.shouldUpdateBinding("position"),this.shouldUpdateCameraLightsBindGroup()}updateCameraLightsBindGroup(){this.cameraLightsBindGroup&&Uo(this,at)&&(this.cameraLightsBindGroup.update(),Os(this,at,!1))}getObjectsByBindGroup(e){return this.deviceRenderedObjects.filter(t=>[...t.material.bindGroups,...t.material.inputsBindGroups,...t.material.clonedBindGroups,this.cameraLightsBindGroup].some(i=>i.uuid===e.uuid))}setPerspective({fov:e,near:t,far:i}={}){this.camera?.setPerspective({fov:e,near:t,far:i,width:this.rectBBox.width,height:this.rectBBox.height,pixelRatio:this.pixelRatio})}setCameraPosition(e=new y(0,0,1)){this.camera.position.copy(e)}createTransmissionTarget(){this.transmissionTarget.texture||(this.transmissionTarget.passEntry=this.scene.createScreenPassEntry("Transmission scene screen render pass"),this.transmissionTarget.texture=new j(this,{label:"Transmission background scene render target output",name:"transmissionBackgroundTexture",generateMips:!0,format:this.options.context.format,autoDestroy:!1}),this.transmissionTarget.passEntry.onBeforeRenderPass=(e,t)=>{this.copyGPUTextureToTexture(t,this.transmissionTarget.texture,e)})}destroyTransmissionTarget(){this.transmissionTarget.texture&&(this.transmissionTarget.texture.destroy(),this.scene.renderPassEntries.screen=this.scene.renderPassEntries.screen.filter(e=>e.label!=="Transmission scene screen render pass"),this.transmissionTarget.texture=null,this.transmissionTarget.passEntry=null)}resize(e=null){this.setSize(e),this.setPerspective(),this._onResizeCallback&&this._onResizeCallback(),this.resizeObjects(),this._onAfterResizeCallback&&this._onAfterResizeCallback()}render(e){this.ready&&(this.setCameraBindGroup(),this.updateCameraLightsBindGroup(),super.render(e),this.cameraLightsBindGroup&&(this.cameraLightsBindGroup.needsPipelineFlush=!1))}destroy(){this.cameraLightsBindGroup?.destroy(),this.lights.forEach(e=>e.remove()),this.destroyTransmissionTarget(),super.destroy()}}at=new WeakMap;var zn=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$9"),ze=c((n,e,t)=>(zn(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$7"),Vo=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$9"),No=c((n,e,t,i)=>(zn(n,e,"write to private field"),e.set(n,t),t),"__privateSet$7"),ge;class _n{static{c(this,"GPUDeviceManager")}constructor({label:e,production:t=!1,adapterOptions:i={},autoRender:s=!0,onError:r=c(()=>{},"onError"),onDeviceLost:a=c(h=>{},"onDeviceLost"),onDeviceDestroyed:o=c(h=>{},"onDeviceDestroyed")}={}){this._onBeforeRenderCallback=()=>{},this._onAfterRenderCallback=()=>{},Vo(this,ge,void 0),this.index=0,this.label=e??"GPUDeviceManager instance",this.production=t,this.ready=!1,this.adapterOptions=i,this.onError=r,this.onDeviceLost=a,this.onDeviceDestroyed=o,this.gpu=navigator.gpu,this.setPipelineManager(),this.setDeviceObjects(),No(this,ge,{sampler:null,module:null,pipelineByFormat:{}}),s&&this.animate()}async setAdapterAndDevice({adapter:e=null,device:t=null}={}){await this.setAdapter(e),await this.setDevice(t)}async init({adapter:e=null,device:t=null}={}){if(await this.setAdapterAndDevice({adapter:e,device:t}),this.device)for(const i of this.renderers)i.context||i.setContext()}async setAdapter(e=null){if(this.gpu||(this.onError(),te("GPUDeviceManager: WebGPU is not supported on your browser/OS. No 'gpu' object in 'navigator'.")),e)this.adapter=e;else try{this.adapter=await this.gpu?.requestAdapter(this.adapterOptions),this.adapter||(this.onError(),te("GPUDeviceManager: WebGPU is not supported on your browser/OS. 'requestAdapter' failed."))}catch(t){this.onError(),te("GPUDeviceManager: "+t.message)}}async setDevice(e=null){if(e)this.device=e,this.ready=!0,this.index++;else try{const t=[];this.adapter.features.has("float32-filterable")&&t.push("float32-filterable"),this.device=await this.adapter?.requestDevice({label:this.label+" "+this.index,requiredFeatures:t}),this.device&&(this.ready=!0,this.index++)}catch(t){this.onError(),te(`${this.label}: WebGPU is not supported on your browser/OS. 'requestDevice' failed: ${t}`)}this.device?.lost.then(t=>{L(`${this.label}: WebGPU device was lost: ${t.message}`),this.loseDevice(),t.reason!=="destroyed"?this.onDeviceLost(t):this.onDeviceDestroyed(t)})}setPipelineManager(){this.pipelineManager=new Mn}loseDevice(){this.ready=!1,this.pipelineManager.resetCurrentPipeline(),this.samplers.forEach(e=>e.sampler=null),this.renderers.forEach(e=>e.loseContext()),this.bindGroupLayouts.clear(),this.buffers.clear()}async restoreDevice({adapter:e=null,device:t=null}={}){await this.setAdapterAndDevice({adapter:e,device:t}),this.device&&(this.samplers.forEach(i=>{const{type:s,...r}=i.options;i.sampler=this.device.createSampler({label:i.label,...r})}),this.indirectBuffers.forEach(i=>i.create()),this.renderers.forEach(i=>i.restoreContext()))}setDeviceObjects(){this.renderers=[],this.bindGroups=new Map,this.buffers=new Map,this.indirectBuffers=new Map,this.bindGroupLayouts=new Map,this.bufferBindings=new Map,this.samplers=[],this.domTextures=[],this.texturesQueue=[]}addRenderer(e){this.renderers.push(e)}removeRenderer(e){this.renderers=this.renderers.filter(t=>t.uuid!==e.uuid)}get deviceRenderedObjects(){return this.renderers.map(e=>e.renderedObjects).flat()}addBindGroup(e){this.bindGroups.set(e.uuid,e)}removeBindGroup(e){this.bindGroups.delete(e.uuid)}addBuffer(e){this.buffers.set(e.uuid,e)}removeBuffer(e){this.buffers.delete(e?.uuid)}addSampler(e){this.samplers.push(e)}removeSampler(e){this.samplers=this.samplers.filter(t=>t.uuid!==e.uuid)}addDOMTexture(e){this.domTextures.push(e)}uploadTexture(e){if(e.source)try{this.device?.queue.copyExternalImageToTexture({source:e.source,flipY:e.options.flipY},{texture:e.texture,premultipliedAlpha:e.options.premultipliedAlpha},{width:e.size.width,height:e.size.height}),e.texture.mipLevelCount>1&&this.generateMips(e),this.texturesQueue.push(e)}catch({message:t}){te(`GPUDeviceManager: could not upload texture: ${e.options.name} because: ${t}`)}else this.device?.queue.writeTexture({texture:e.texture},new Uint8Array(e.options.placeholderColor),{bytesPerRow:e.size.width*4},{width:e.size.width,height:e.size.height})}generateMips(e,t=null){if(!this.device)return;ze(this,ge).module||(ze(this,ge).module=this.device.createShaderModule({label:"textured quad shaders for mip level generation",code:`
            struct VSOutput {
              @builtin(position) position: vec4f,
              @location(0) texcoord: vec2f,
            };

            @vertex fn vs(
              @builtin(vertex_index) vertexIndex : u32
            ) -> VSOutput {
              let pos = array(

                vec2f( 0.0,  0.0),  // center
                vec2f( 1.0,  0.0),  // right, center
                vec2f( 0.0,  1.0),  // center, top

                // 2st triangle
                vec2f( 0.0,  1.0),  // center, top
                vec2f( 1.0,  0.0),  // right, center
                vec2f( 1.0,  1.0),  // right, top
              );

              var vsOutput: VSOutput;
              let xy = pos[vertexIndex];
              vsOutput.position = vec4f(xy * 2.0 - 1.0, 0.0, 1.0);
              vsOutput.texcoord = vec2f(xy.x, 1.0 - xy.y);
              return vsOutput;
            }

            @group(0) @binding(0) var ourSampler: sampler;
            @group(0) @binding(1) var ourTexture: texture_2d<f32>;

            @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {
              return textureSample(ourTexture, ourSampler, fsInput.texcoord);
            }
          `}),ze(this,ge).sampler=this.device.createSampler({minFilter:"linear",magFilter:"linear"})),ze(this,ge).pipelineByFormat[e.texture.format]||(ze(this,ge).pipelineByFormat[e.texture.format]=this.device.createRenderPipeline({label:"Mip level generator pipeline",layout:"auto",vertex:{module:ze(this,ge).module},fragment:{module:ze(this,ge).module,targets:[{format:e.texture.format}]}}));const i=ze(this,ge).pipelineByFormat[e.texture.format],s=t||this.device.createCommandEncoder({label:"Mip gen encoder"});let r=e.texture.width,a=e.texture.height,o=0;for(;r>1||a>1;){r=Math.max(1,r/2|0),a=Math.max(1,a/2|0);for(let h=0;h<e.texture.depthOrArrayLayers;++h){const l=this.device.createBindGroup({layout:i.getBindGroupLayout(0),entries:[{binding:0,resource:ze(this,ge).sampler},{binding:1,resource:e.texture.createView({dimension:"2d",baseMipLevel:o,mipLevelCount:1,baseArrayLayer:h,arrayLayerCount:1})}]}),u={label:"Mip generation render pass",colorAttachments:[{view:e.texture.createView({dimension:"2d",baseMipLevel:o+1,mipLevelCount:1,baseArrayLayer:h,arrayLayerCount:1}),loadOp:"clear",storeOp:"store"}]},d=s.beginRenderPass(u);d.setPipeline(i),d.setBindGroup(0,l),d.draw(6),d.end()}++o}if(!t){const h=s.finish();this.device.queue.submit([h])}}removeDOMTexture(e){this.domTextures=this.domTextures.filter(t=>t.uuid!==e.uuid)}animate(){this.render(),this.animationFrameID=requestAnimationFrame(this.animate.bind(this))}onBeforeRender(e){return e&&(this._onBeforeRenderCallback=e),this}onAfterRender(e){return e&&(this._onAfterRenderCallback=e),this}render(){if(!this.ready)return;this._onBeforeRenderCallback&&this._onBeforeRenderCallback();for(const i of this.renderers)i.shouldRender&&i.onBeforeCommandEncoder();const e=this.device?.createCommandEncoder({label:this.label+" command encoder"});!this.production&&e.pushDebugGroup(this.label+" command encoder: main render loop"),this.renderers.forEach(i=>i.render(e)),!this.production&&e.popDebugGroup();const t=e.finish();this.device?.queue.submit([t]),this.domTextures.filter(i=>!i.parentMesh&&i.sourceLoaded&&!i.sourceUploaded).forEach(i=>this.uploadTexture(i));for(const i of this.texturesQueue)i.sourceUploaded=!0;this.texturesQueue=[];for(const i of this.renderers)i.shouldRender&&i.onAfterCommandEncoder();this._onAfterRenderCallback&&this._onAfterRenderCallback()}destroy(){this.animationFrameID&&cancelAnimationFrame(this.animationFrameID),this.animationFrameID=null,this.device?.destroy(),this.device=null,this.renderers.forEach(e=>e.destroy()),this.bindGroups.forEach(e=>e.destroy()),this.buffers.forEach(e=>e?.destroy()),this.indirectBuffers.forEach(e=>e.destroy()),this.domTextures.forEach(e=>e.destroy()),this.setDeviceObjects()}}ge=new WeakMap;var Wo=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$8"),jo=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$8"),qo=c((n,e,t)=>(Wo(n,e,"access private method"),t),"__privateMethod$7"),Us,An;const Ho=5;class Ln{static{c(this,"IndirectBuffer")}constructor(e,{label:t="Indirect buffer",geometries:i=[],minEntrySize:s=Ho}={}){jo(this,Us),this.type="IndirectBuffer",e=$(e,this.type),this.renderer=e,this.uuid=O(),this.options={label:t,geometries:i,minEntrySize:s},this.geometries=new Map,this.buffer=null,this.addGeometries(i),this.renderer.indirectBuffers.set(this.uuid,this)}get size(){return this.geometries.size}addGeometries(e=[]){e.forEach(t=>this.addGeometry(t))}addGeometry(e){this.geometries.set(e.uuid,e)}getByteOffsetAtIndex(e=0){return e*this.options.minEntrySize*Uint32Array.BYTES_PER_ELEMENT}create(){const e=this.getByteOffsetAtIndex(this.geometries.size);this.buffer?(this.buffer.destroy(),this.buffer.options.size=e):this.buffer=new qe({label:this.options.label,size:e,usage:["copyDst","indirect","storage"],mappedAtCreation:!0}),this.buffer.consumers.add(this.uuid),this.buffer.createBuffer(this.renderer);const t=new Uint32Array(this.buffer.GPUBuffer.getMappedRange());let i=0;this.geometries.forEach(s=>{qo(this,Us,An).call(this,s,t,i*this.options.minEntrySize),s.useIndirectBuffer({buffer:this.buffer,offset:this.getByteOffsetAtIndex(i)}),i++}),this.buffer.GPUBuffer.unmap()}destroy(){this.renderer.removeBuffer(this.buffer),this.renderer.indirectBuffers.delete(this.uuid),this.geometries.forEach(e=>e.indirectDraw=null),this.buffer?.destroy(),this.buffer=null,this.geometries=null}}Us=new WeakSet,An=c(function(n,e,t=0){"indexBuffer"in n&&n.indexBuffer?(e[t]=n.indexBuffer.bufferLength,e[t+1]=n.instancesCount,e[t+2]=0,e[t+3]=0,e[t+4]=0):(e[t]=n.verticesCount,e[t+1]=n.instancesCount,e[t+2]=0,e[t+3]=0,e[t+4]=0)},"addGeometryToIndirectMappedBuffer_fn");var Is=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$7"),Dn=c((n,e,t)=>(Is(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$6"),Oe=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$7"),Ti=c((n,e,t,i)=>(Is(n,e,"write to private field"),e.set(n,t),t),"__privateSet$6"),ke=c((n,e,t)=>(Is(n,e,"access private method"),t),"__privateMethod$6"),zt,_t,Vs,Gn,Pi,Ns,Ws,Fn,js,$n,qs,On,Ri,Hs;let Yo=0;class Xo{static{c(this,"RenderBundle")}constructor(e,{label:t,renderPass:i=null,renderOrder:s=0,transparent:r=null,visible:a=!0,size:o=0,useBuffer:h=!1,useIndirectDraw:l=!1}={}){Oe(this,Vs),Oe(this,Pi),Oe(this,Ws),Oe(this,js),Oe(this,qs),Oe(this,Ri),Oe(this,zt,void 0),Oe(this,_t,void 0),this.type="RenderBundle",e=$(e,this.type),this.uuid=O(),Object.defineProperty(this,"index",{value:Yo++}),this.renderOrder=s,this.transparent=r,this.visible=a,t=t??this.type+this.index,this.options={label:t,renderPass:i,useBuffer:h,size:o,useIndirectDraw:l},this.meshes=new Map,this.encoder=null,this.bundle=null,Ti(this,_t,!1),this.binding=null,this.indirectBuffer=null,this.setRenderer(e),this.options.useIndirectDraw&&(this.indirectBuffer=new Ln(this.renderer)),this.options.useBuffer&&(Ti(this,zt,!0),this.options.size!==0?ke(this,Vs,Gn).call(this):(this.options.useBuffer=!1,this.renderer.production||L(`${this.options.label} (${this.type}): Cannot use a single transformation buffer if the size parameter has not been set upon creation.`)))}setRenderer(e){this.renderer&&(this.removeFromScene(),this.renderer.renderBundles.delete(this.uuid)),this.renderer=e,this.renderer.renderBundles.set(this.uuid,this),this.meshes.size>=1&&this.addToScene()}addToScene(){const e=this.meshes.entries().next();if(e&&e.value&&e.value.length&&e.value[1]){const t=e.value[1],i=!!t.transparent;if(this.transparent===null&&(this.transparent=i),t.constructor.name!=="ShaderPass"&&t.constructor.name!=="PingPongPlane"){const{useProjection:s}=t.material.options.rendering;this.useProjection===null&&(this.useProjection=s);const r=this.renderer.scene.getMeshProjectionStack(t);this.renderer.scene.addRenderBundle(this,r)}else this.size=1,t.renderOrder=this.renderOrder,this.useProjection=!1}}removeFromScene(){this.renderer.scene.removeRenderBundle(this)}get useProjection(){return Dn(this,zt)}set useProjection(e){Ti(this,zt,e)}set size(e){e!==this.options.size&&(this.ready&&!this.renderer.production&&L(`${this.options.label} (${this.type}): The content of a render bundle is meant to be static. You should not change its size after it has been created.`),this.ready=!1,ke(this,Ws,Fn).call(this,e),this.options.size=e)}get ready(){return Dn(this,_t)}set ready(e){e&&!this.ready?(this.size=this.meshes.size,this.options.useIndirectDraw&&(this.meshes.forEach(t=>{this.indirectBuffer.addGeometry(t.geometry)}),this.indirectBuffer.create()),ke(this,qs,On).call(this)):!e&&this.ready&&(this.bundle=null),Ti(this,_t,e)}addMesh(e,t){if(!this.options.renderPass)this.options.renderPass=t;else if(t.uuid!==this.options.renderPass.uuid){L(`${this.options.label} (${this.type}): Cannot add Mesh ${e.options.label} to this render bundle because the output render passes do not match.`),e.renderBundle=null;return}this.ready&&!this.renderer.production&&L(`${this.options.label} (${this.type}): The content of a render bundle is meant to be static. You should not add meshes to it after it has been created (mesh added: ${e.options.label}).`),this.ready=!1,this.meshes.set(e.uuid,e),this.meshes.size===1&&this.addToScene()}removeSceneObject(e){this.ready&&!this.renderer.production&&L(`${this.options.label} (${this.type}): The content of a render bundle is meant to be static. You should not remove meshes from it after it has been created (mesh removed: ${e.options.label}).`),this.ready=!1,this.meshes.delete(e.uuid),e.setRenderBundle(null,!1),this.options.useIndirectDraw&&(e.geometry.indirectDraw=null)}removeMesh(e,t=!0){this.removeSceneObject(e),t&&e.type!=="ShaderPass"&&e.type!=="PingPongPlane"&&this.renderer.scene.addMesh(e),this.meshes.size===0&&this.renderer.scene.removeRenderBundle(this)}updateBinding(){this.binding&&this.binding.shouldUpdate&&this.binding.buffer.GPUBuffer&&(this.renderer.queueWriteBuffer(this.binding.buffer.GPUBuffer,0,this.binding.arrayBuffer),this.binding.shouldUpdate=!1)}resize(){for(const[e,t]of this.meshes)if(t.textures.find(s=>!s.options.fixedSize)){this.ready=!1;break}}render(e){if(this.ready&&this.bundle&&this.visible&&(this.meshes.forEach(t=>{t.onBeforeRenderPass()}),this.updateBinding(),this.renderer.pipelineManager.resetCurrentPipeline(),this.renderer.production||e.pushDebugGroup(`${this.options.label}: execute bundle`),e.executeBundles([this.bundle]),this.renderer.production||e.popDebugGroup(),this.renderer.pipelineManager.resetCurrentPipeline(),this.meshes.forEach(t=>{t.onAfterRenderPass()})),!this.ready){let t=!0;for(const[i,s]of this.meshes)s.render(e),s.ready||(t=!1),"sourcesReady"in s&&!s.sourcesReady&&(t=!1);this.ready=t}}loseContext(){this.ready=!1}empty(e=!0){this.ready=!1,this.meshes.forEach(t=>{this.removeMesh(t,e)}),this.size=0}remove(){this.empty(!0),ke(this,Ri,Hs).call(this)}destroy(){this.ready=!1,this.meshes.forEach(e=>{e.remove()}),this.size=0,ke(this,Ri,Hs).call(this)}}zt=new WeakMap,_t=new WeakMap,Vs=new WeakSet,Gn=c(function(){this.binding=new Z({label:this.options.label+" matrices",name:"matrices",visibility:["vertex","fragment"],struct:{model:{type:"array<mat4x4f>",value:new Float32Array(16*this.options.size)},modelView:{type:"array<mat4x4f>",value:new Float32Array(16*this.options.size)},normal:{type:"array<mat3x3f>",value:new Float32Array(12*this.options.size)}}}),ke(this,Pi,Ns).call(this,this.options.size)},"setBinding_fn"),Pi=new WeakSet,Ns=c(function(n){const e=this.renderer.device.limits.minUniformBufferOffsetAlignment;this.binding.arrayBufferSize<n*e&&(this.binding.arrayBufferSize=n*e,this.binding.arrayBuffer=new ArrayBuffer(this.binding.arrayBufferSize),this.binding.buffer.size=this.binding.arrayBuffer.byteLength)},"patchBindingOffset_fn"),Ws=new WeakSet,Fn=c(function(n){if(n>this.options.size&&this.binding&&(ke(this,Pi,Ns).call(this,n),this.binding.buffer.GPUBuffer)){this.binding.buffer.GPUBuffer.destroy(),this.binding.buffer.createBuffer(this.renderer,{label:this.binding.options.label,usage:["copySrc","copyDst",this.binding.bindingType,...this.binding.options.usage]});let e=0;this.meshes.forEach(t=>{t.patchRenderBundleBinding(e),e++}),this.binding.shouldUpdate=!0}},"onSizeChanged_fn"),js=new WeakSet,$n=c(function(){this.descriptor={...this.options.renderPass.options.colorAttachments&&{colorFormats:this.options.renderPass.options.colorAttachments.map(n=>n.targetFormat)},...this.options.renderPass.options.useDepth&&{depthStencilFormat:this.options.renderPass.options.depthFormat},sampleCount:this.options.renderPass.options.sampleCount}},"setDescriptor_fn"),qs=new WeakSet,On=c(function(){ke(this,js,$n).call(this),this.renderer.pipelineManager.resetCurrentPipeline(),this.encoder=this.renderer.device.createRenderBundleEncoder({...this.descriptor,label:this.options.label+" (encoder)"}),this.renderer.production||this.encoder.pushDebugGroup(`${this.options.label}: create encoder`),this.meshes.forEach(n=>{n.material.render(this.encoder),n.geometry.render(this.encoder)}),this.renderer.production||this.encoder.popDebugGroup(),this.bundle=this.encoder.finish({label:this.options.label+" (bundle)"}),this.renderer.pipelineManager.resetCurrentPipeline()},"encodeRenderCommands_fn"),Ri=new WeakSet,Hs=c(function(){this.binding&&(this.renderer.removeBuffer(this.binding.buffer),this.binding.buffer.destroy()),this.indirectBuffer&&this.indirectBuffer.destroy(),this.renderer.renderBundles.delete(this.uuid)},"cleanUp_fn");const Ko=`
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
};

@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {
  return textureSample(renderTexture, defaultSampler, fsInput.uv);
}`;class Jo extends zs{static{c(this,"ShaderPass")}constructor(e,t={}){e=$(e,t.label?t.label+" ShaderPass":"ShaderPass"),t.isPrePass=!!t.isPrePass;const i={color:{srcFactor:"one",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"one",dstFactor:"one-minus-src-alpha"}};t.isPrePass||(t.targets?t.targets&&t.targets.length&&!t.targets[0].blend&&(t.targets[0].blend=i):t.targets=[{blend:i}]),t.label=t.label??"ShaderPass "+e.shaderPasses?.length,t.sampleCount=t.sampleCount?t.sampleCount:e&&e.renderPass&&t.isPrePass?e.renderPass.options.sampleCount:e&&e.postProcessingPass?e&&e.postProcessingPass.options.sampleCount:1,t.shaders||(t.shaders={}),t.shaders.fragment||(t.shaders.fragment={code:Ko,entryPoint:"main"}),t.depth=t.isPrePass,super(e,t),this.options={...this.options,copyOutputToRenderTexture:t.copyOutputToRenderTexture,isPrePass:t.isPrePass},t.inputTarget&&this.setInputTarget(t.inputTarget),this.outputTarget&&this.setRenderingOptionsForRenderPass(this.outputTarget.renderPass),this.type="ShaderPass",this.createTexture({label:t.label?`${t.label} render texture`:"Shader pass render texture",name:"renderTexture",fromTexture:this.inputTarget?this.inputTarget.renderTexture:null,usage:["copySrc","copyDst","textureBinding"],...this.outputTarget&&this.outputTarget.options.qualityRatio&&{qualityRatio:this.outputTarget.options.qualityRatio}})}cleanupRenderMaterialParameters(e){return delete e.copyOutputToRenderTexture,delete e.inputTarget,delete e.isPrePass,super.cleanupRenderMaterialParameters(e),e}get renderTexture(){return this.textures.find(e=>e.options.name==="renderTexture")}setInputTarget(e){if(e&&e.type!=="RenderTarget"){L(`${this.options.label??this.type}: inputTarget is not a RenderTarget: ${e}`);return}this.removeFromScene(),this.inputTarget=e,this.addToScene(),this.renderTexture&&(e?this.renderTexture.copy(this.inputTarget.renderTexture):(this.renderTexture.options.fromTexture=null,this.renderTexture.createTexture()))}addToScene(e=!1){e&&this.renderer.shaderPasses.push(this),this.setRenderingOptionsForRenderPass(this.outputTarget?this.outputTarget.renderPass:this.options.isPrePass?this.renderer.renderPass:this.renderer.postProcessingPass),this.autoRender&&this.renderer.scene.addShaderPass(this)}removeFromScene(e=!1){this.outputTarget&&this.outputTarget.destroy(),this.autoRender&&this.renderer.scene.removeShaderPass(this),e&&(this.renderer.shaderPasses=this.renderer.shaderPasses.filter(t=>t.uuid!==this.uuid))}}const _e=`
const PI = ${Math.PI};
const RECIPROCAL_PI = ${1/Math.PI};
const RECIPROCAL_PI2 = ${.5/Math.PI};
const EPSILON = 1e-6;`,Qe=`
fn lessThan3(a: vec3f, b: vec3f) -> vec3f {
  return vec3f(vec3<bool>(a.x < b.x, a.y < b.y, a.z < b.z));
}

fn pow2( x: f32 ) -> f32 {
  return x * x;
}

fn pow3( x: f32 ) -> f32 {
  return x * x * x;
}

fn pow4( x: f32 ) -> f32 {
  return pow2(x) * pow2(x);
}

fn isinf(value: f32) -> bool {
  return value > 1.0e38 || value < -1.0e38;
}

fn BRDF_Lambert(diffuseColor: vec3f) -> vec3f {
  return RECIPROCAL_PI * diffuseColor;
}

fn F_Schlick(f0: vec3f, f90: f32, VdotH: f32) -> vec3f {
  let fresnel: f32 = exp2( ( - 5.55473 * VdotH - 6.98316 ) * VdotH );
  return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );
}
`,Ue=`
fn linearToOutput3(value: vec3f) -> vec3f {
  return vec3( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThan3( value.rgb, vec3( 0.0031308 ) ) ) ) );
}

fn linearToOutput4(value: vec4f) -> vec4f {
  return vec4( linearToOutput3(value.rgb), value.a );
}

// linear <-> sRGB conversions
fn linearTosRGB(linear: vec3f) -> vec3f {
  if (all(linear <= vec3(0.0031308))) {
    return linear * 12.92;
  }
  return (pow(abs(linear), vec3(1.0/2.4)) * 1.055) - vec3(0.055);
}

fn sRGBToLinear(srgb: vec3f) -> vec3f {
  if (all(srgb <= vec3(0.04045))) {
    return srgb / vec3(12.92);
  }
  return pow((srgb + vec3(0.055)) / vec3(1.055), vec3(2.4));
}

fn toneMapKhronosPbrNeutral( color: vec3f ) -> vec3f {
  var toneMapColor = color; 
  const startCompression: f32 = 0.8 - 0.04;
  const desaturation: f32 = 0.15;
  var x: f32 = min(toneMapColor.r, min(toneMapColor.g, toneMapColor.b));
  var offset: f32 = select(0.04, x - 6.25 * x * x, x < 0.08);
  toneMapColor = toneMapColor - offset;
  var peak: f32 = max(toneMapColor.r, max(toneMapColor.g, toneMapColor.b));
  if (peak < startCompression) {
    return toneMapColor;
  }
  const d: f32 = 1. - startCompression;
  let newPeak: f32 = 1. - d * d / (peak + d - startCompression);
  toneMapColor *= newPeak / peak;
  let g: f32 = 1. - 1. / (desaturation * (peak - newPeak) + 1.);
  return mix(toneMapColor, newPeak * vec3(1, 1, 1), g);
}
`,Ei=`
struct ReflectedLight {
  directDiffuse: vec3f,
  directSpecular: vec3f,
  indirectDiffuse: vec3f,
  indirectSpecular: vec3f,
}

struct DirectLight {
  color: vec3f,
  direction: vec3f,
  visible: bool,
}

fn rangeAttenuation(range: f32, distance: f32) -> f32 {
  var distanceFalloff: f32 = 1.0 / max( pow( distance, 2.0 ), 0.01 );
  if ( range > 0.0 ) {
    distanceFalloff *= pow2( saturate( 1.0 - pow4( distance / range )) );
  }
  
  return distanceFalloff;
}

fn getDirectionalLightInfo(directionalLight: DirectionalLightsElement, worldPosition: vec3f, ptr_light: ptr<function, DirectLight>) {
  (*ptr_light).color = directionalLight.color;
  (*ptr_light).direction = worldPosition - directionalLight.direction;
  (*ptr_light).visible = true;
}

fn getPointLightInfo(pointLight: PointLightsElement, worldPosition: vec3f, ptr_light: ptr<function, DirectLight>) {
  let lightDirection: vec3f = pointLight.position - worldPosition;
  (*ptr_light).direction = normalize(lightDirection);
  let lightDistance: f32 = length(lightDirection);
  (*ptr_light).color = pointLight.color;
  (*ptr_light).color *= rangeAttenuation(pointLight.range, lightDistance);
  (*ptr_light).visible = length((*ptr_light).color) > 0.01;
}
`,zi=`
fn getIndirectDiffuse(irradiance: vec3f, diffuseColor: vec3f, ptr_reflectedLight: ptr<function, ReflectedLight>) {
  (*ptr_reflectedLight).indirectDiffuse += irradiance * BRDF_Lambert( diffuseColor );
}

// Indirect Diffuse RenderEquations
fn RE_IndirectDiffuse(irradiance: vec3f, diffuseColor: vec3f, ptr_reflectedLight: ptr<function, ReflectedLight>) {
  var totalAmbientIrradiance: vec3f = irradiance;
  
  for(var i: i32 = 0; i < ambientLights.count; i++) {
    totalAmbientIrradiance += ambientLights.color[i];
  }
  
  getIndirectDiffuse(totalAmbientIrradiance, diffuseColor, ptr_reflectedLight);
}
`,kn=`
fn getLambertDirect(
  normal: vec3f,
  diffuseColor: vec3f,
  directLight: DirectLight,
  ptr_reflectedLight: ptr<function, ReflectedLight>
) {
  let L = normalize(directLight.direction);
  let NdotL = saturate(dot(normal, L));
  
  let irradiance: vec3f = NdotL * directLight.color;
  (*ptr_reflectedLight).directDiffuse += irradiance * BRDF_Lambert( diffuseColor );
}
`,Ys=`
  let pointShadows = getPCFPointShadows(worldPosition);
  let directionalShadows = getPCFDirectionalShadows(worldPosition);
`,Xs=`
    directLight.color *= directionalShadows[i];
`,Ks=`
    directLight.color *= pointShadows[i];
`,Un=c(({receiveShadows:n=!1}={})=>`
  var directLight: DirectLight;
  var reflectedLight: ReflectedLight;
  
  ${n?Ys:""}

  // point lights
  for(var i = 0; i < pointLights.count; i++) {
    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);
    if(!directLight.visible) {
      continue;
    }
    ${n?Ks:""}
    getLambertDirect(normal, outputColor.rgb, directLight, &reflectedLight);
  }
  
  // directional lights
  for(var i = 0; i < directionalLights.count; i++) {
    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);
    ${n?Xs:""}
    getLambertDirect(normal, outputColor.rgb, directLight, &reflectedLight);
  }
  
  // ambient lights
  var irradiance: vec3f = vec3(0.0);
  RE_IndirectDiffuse(irradiance, outputColor.rgb, &reflectedLight);
  
  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;
  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;
  
  totalIndirect *= occlusion;
  
  var outgoingLight: vec3f = totalDirect + totalIndirect;`,"getLambertShading"),_i=`
${_e}
${Qe}
${Ei}
${zi}
`,Zo=c(({addUtils:n=!0,receiveShadows:e=!1,toneMapping:t="Linear",useOcclusion:i=!1}={})=>`
${n?_i:""}
${kn}
${t?Ue:""}

fn getLambert(
  normal: vec3f,
  worldPosition: vec3f,
  outputColor: vec4f,
  ${i?"occlusion: f32,":""}
) -> vec4f {
  ${i?"":"let occlusion: f32 = 1.0;"}

  ${Un({receiveShadows:e})}
  
  ${t==="Linear"?"outgoingLight = linearToOutput3(outgoingLight);":t==="Khronos"?"outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));":""}
    
  return vec4(outgoingLight, outputColor.a);
}
`,"getLambert"),In=`
fn D_BlinnPhong( shininess: f32, NdotH: f32 ) -> f32 {
  return RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( NdotH, shininess );
}

fn BRDF_BlinnPhong(
  normal: vec3f,
  viewDirection: vec3f,
  specularColor: vec3f,
  shininess: f32,
  directLight: DirectLight
) -> vec3f {
  let L = normalize(directLight.direction);
  let NdotL = saturate(dot(normalize(normal), L));
  let H: vec3f = normalize(viewDirection + L);
  
  let NdotH: f32 = saturate(dot(normalize(normal), H));
  let VdotH: f32 = saturate(dot(normalize(viewDirection), H));
  let NdotV: f32 = saturate(dot(normalize(normal), normalize(viewDirection)));
  
  let F: vec3f = F_Schlick(specularColor, 1.0, VdotH);
  
  let G: f32 = 0.25; // blinn phong implicit
  
  let D = D_BlinnPhong(shininess, NdotH);
  
  let specular: vec3f = F * G * D;
        
  return specular;
}

fn getPhongDirect(
  normal: vec3f,
  diffuseColor: vec3f,
  viewDirection: vec3f,
  specularColor: vec3f,
  specularStrength: f32,
  shininess: f32,
  directLight: DirectLight,
  ptr_reflectedLight: ptr<function, ReflectedLight>
) {
  let L = normalize(directLight.direction);
  let NdotL = saturate(dot(normalize(normal), L));
  
  let irradiance: vec3f = NdotL * directLight.color;
  (*ptr_reflectedLight).directDiffuse += irradiance * BRDF_Lambert( diffuseColor );
  (*ptr_reflectedLight).directSpecular += irradiance * BRDF_BlinnPhong( normal, viewDirection, specularColor, shininess, directLight ) * specularStrength;
}
`,Vn=c(({receiveShadows:n=!1}={})=>`
  var directLight: DirectLight;
  var reflectedLight: ReflectedLight;
  
  ${n?Ys:""}

  // point lights
  for(var i = 0; i < pointLights.count; i++) {  
    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);
    if(!directLight.visible) {
      continue;
    }
    ${n?Ks:""}
    getPhongDirect(normal, outputColor.rgb, viewDirection, specularColor, specularIntensity, shininess, directLight, &reflectedLight);
  }
  
  // directional lights
  for(var i = 0; i < directionalLights.count; i++) {
    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);
    ${n?Xs:""}
    getPhongDirect(normal, outputColor.rgb, viewDirection, specularColor, specularIntensity, shininess, directLight, &reflectedLight);
  }
  
  // ambient lights
  var irradiance: vec3f = vec3(0.0);
  RE_IndirectDiffuse(irradiance, outputColor.rgb, &reflectedLight);
  
  let totalDirect: vec3f = reflectedLight.directDiffuse + reflectedLight.directSpecular;
  var totalIndirect: vec3f = reflectedLight.indirectDiffuse + reflectedLight.indirectSpecular;
  
  totalIndirect *= occlusion;
  
  var outgoingLight: vec3f = totalDirect + totalIndirect;`,"getPhongShading"),Qo=c(({addUtils:n=!0,receiveShadows:e=!1,toneMapping:t="Linear",useOcclusion:i=!1}={})=>`
${n?_i:""}
${In}
${t?Ue:""}

fn getPhong(
  normal: vec3f,
  worldPosition: vec3f,
  outputColor: vec4f,
  viewDirection: vec3f,
  specularIntensity: f32,
  specularColor: vec3f,
  shininess: f32,
  ${i?"occlusion: f32,":""}
) -> vec4f {
  ${i?"":"let occlusion: f32 = 1.0;"}

  ${Vn({receiveShadows:e})}
  
  ${t==="Linear"?"outgoingLight = linearToOutput3(outgoingLight);":t==="Khronos"?"outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));":""}
  
  return vec4(outgoingLight, outputColor.a);;
}
`,"getPhong"),Nn=`
fn DFGApprox(
  normal: vec3f,
  viewDirection: vec3f,
  roughness: f32,
) -> vec2f {
  let dotNV: f32 = saturate(dot( normal, viewDirection ));

	let c0: vec4f = vec4( - 1, - 0.0275, - 0.572, 0.022 );
	let c1: vec4f = vec4( 1, 0.0425, 1.04, - 0.04 );

	let r: vec4f = roughness * c0 + c1;
	let a004: f32 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;
	
	let fab: vec2f = vec2( - 1.04, 1.04 ) * a004 + r.zw;

	return fab;
}

struct TotalScattering {
  single: vec3f,
  multi: vec3f,
}

fn computeMultiscattering(
  normal: vec3f,
  viewDirection: vec3f,
  specularColor: vec3f,
  f90: f32,
  roughness: f32,
  ptr_totalScattering: ptr<function, TotalScattering>
) {
  let fab: vec2f = DFGApprox( normal, viewDirection, roughness );

	let Fr: vec3f = specularColor;

	let FssEss: vec3f = Fr * fab.x + f90 * fab.y;

	let Ess: f32 = fab.x + fab.y;
	let Ems: f32 = 1.0 - Ess;

	let Favg: vec3f = Fr + ( 1.0 - Fr ) * 0.047619; // 1/21
	let Fms: vec3f = FssEss * Favg / ( 1.0 - Ems * Favg );

	(*ptr_totalScattering).single += FssEss;
	(*ptr_totalScattering).multi += Fms * Ems;
}

// Indirect Specular RenderEquations
fn RE_IndirectSpecular(
  radiance: vec3f,
  irradiance: vec3f,
  normal: vec3f,
  diffuseColor: vec3f,
  specularFactor: f32,
  specularColorFactor: vec3f,
  viewDirection: vec3f,
  metallic: f32,
  roughness: f32,
  ptr_reflectedLight: ptr<function, ReflectedLight>
) {
  var totalScattering: TotalScattering;
  let cosineWeightedIrradiance: vec3f = irradiance * RECIPROCAL_PI;
    
  computeMultiscattering( normal, viewDirection, specularColorFactor, specularFactor, roughness, &totalScattering );
  
  let totalScatter: vec3f = totalScattering.single + totalScattering.multi;
  let diffuse: vec3f = diffuseColor * ( 1.0 - max( max( totalScatter.r, totalScatter.g ), totalScatter.b ) );

  (*ptr_reflectedLight).indirectSpecular += radiance * totalScattering.single;
  (*ptr_reflectedLight).indirectSpecular += totalScattering.multi * cosineWeightedIrradiance;

  (*ptr_reflectedLight).indirectDiffuse += diffuse * cosineWeightedIrradiance;
}
`,Wn=`
fn getVolumeTransmissionRay(normal: vec3f, viewDirection: vec3f, thickness: f32, ior: f32, modelScale: vec3f) -> vec3f {
  let refractionVector = refract(-viewDirection, normalize(normal), 1.0 / ior);    
  return normalize(refractionVector) * thickness * modelScale;
}

fn applyIorToRoughness(roughness: f32, ior: f32) -> f32 {
  return roughness * saturate(ior * 2.0 - 2.0);
}

fn getTransmissionSample( fragCoord: vec2f, roughness: f32, ior: f32, transmissionSceneTexture: texture_2d<f32>, sampler: sampler ) -> vec4f {
  let transmissionSamplerSize: vec2f = vec2f(textureDimensions(transmissionSceneTexture));
  let lod: f32 = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );
  return textureSampleLevel( transmissionSceneTexture, sampler, fragCoord.xy, lod );
}

fn volumeAttenuation(transmissionDistance: f32, attenuationColor: vec3f, attenuationDistance: f32) -> vec3f {
  if (isinf(attenuationDistance)) {
    return vec3(1.0);
  } else {
    let attenuationCoefficient = -log(attenuationColor) / attenuationDistance;
    let transmittance = exp(-attenuationCoefficient * transmissionDistance);
    return transmittance;
  }
}

fn getIBLVolumeRefraction(
  normal: vec3f,
  viewDirection: vec3f,
  roughness: f32,
  diffuseColor: vec4f,
  specularColor: vec3f,
  specularF90: f32,
  position: vec3f,
  modelScale: vec3f,
  viewMatrix: mat4x4f,
  projMatrix: mat4x4f,
  dispersion: f32,
  ior: f32,
  thickness: f32,
  attenuationColor: vec3f,
  attenuationDistance: f32,
  transmissionBackgroundTexture: texture_2d<f32>,
  defaultSampler: sampler,
) -> vec4f {
    // TODO dispersion
    var transmittedLight: vec4f;
    var transmissionRayLength: f32;
    var transmittance: vec3f;
    
    // Calculate the transmission ray
    let transmissionRay: vec3f = getVolumeTransmissionRay(normal, viewDirection, thickness, ior, modelScale);
    let refractedRayExit = position + transmissionRay;

    // Transform to NDC space
    let ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);
    var refractionCoords = ndcPos.xy / ndcPos.w;
    refractionCoords = (refractionCoords + 1.0) / 2.0;
    refractionCoords = vec2(refractionCoords.x, 1.0 - refractionCoords.y); // webgpu Y flip

    // Sample the transmission texture
    transmittedLight = getTransmissionSample(refractionCoords, roughness, ior, transmissionBackgroundTexture, defaultSampler);

    // Compute transmittance
    transmittance = diffuseColor.rgb * volumeAttenuation(length(transmissionRay), attenuationColor, attenuationDistance);

    // Apply attenuation to transmitted light
    let attenuatedColor = transmittance * transmittedLight.rgb;

    // Compute Fresnel term using an environment BRDF
    let F = EnvironmentBRDF(normal, viewDirection, specularColor, specularF90, roughness);

    // Average the transmittance for a single factor
    let transmittanceFactor = (transmittance.r + transmittance.g + transmittance.b) / 3.0;

    // Combine results into the final color
    return vec4(
      (1.0 - F) * attenuatedColor,
      1.0 - (1.0 - transmittedLight.a) * transmittanceFactor
    );
}

fn getIBLVolumeRefractionWithDispersion(
  normal: vec3f,
  viewDirection: vec3f,
  roughness: f32,
  diffuseColor: vec4f,
  specularColor: vec3f,
  specularF90: f32,
  position: vec3f,
  modelScale: vec3f,
  viewMatrix: mat4x4f,
  projMatrix: mat4x4f,
  dispersion: f32,
  ior: f32,
  thickness: f32,
  attenuationColor: vec3f,
  attenuationDistance: f32,
  transmissionBackgroundTexture: texture_2d<f32>,
  defaultSampler: sampler,
) -> vec4f {
    var transmittedLight: vec4f;
    var transmissionRayLength: f32;
    var transmittance: vec3f;
    
    let halfSpread: f32 = (ior - 1.0) * 0.025 * dispersion;
    let iors: vec3f = vec3(ior - halfSpread, ior, ior + halfSpread);
    
    for(var i: i32 = 0; i < 3; i++) {
      let transmissionRay: vec3f = getVolumeTransmissionRay(normal, viewDirection, thickness, iors[i], modelScale);
      transmissionRayLength = length(transmissionRay);
      let refractedRayExit = position + transmissionRay;

      // Transform to NDC space
      let ndcPos = projMatrix * viewMatrix * vec4(refractedRayExit, 1.0);
      var refractionCoords = ndcPos.xy / ndcPos.w;
      refractionCoords = (refractionCoords + 1.0) / 2.0;
      refractionCoords = vec2(refractionCoords.x, 1.0 - refractionCoords.y); // webgpu Y flip
      
      let transmissionSample: vec4f = getTransmissionSample(refractionCoords, roughness, iors[i], transmissionBackgroundTexture, defaultSampler);
      
      transmittedLight[i] = transmissionSample[i];
      transmittedLight.a += transmissionSample.a;
      
      // Compute transmittance
      let diffuse: vec3f = diffuseColor.rgb;
      transmittance[i] = diffuse[i] * volumeAttenuation(length(transmissionRay), attenuationColor, attenuationDistance)[i];
    }
    
    transmittedLight.a /= 3.0;

    // Apply attenuation to transmitted light
    let attenuatedColor = transmittance * transmittedLight.rgb;

    // Compute Fresnel term using an environment BRDF
    let F = EnvironmentBRDF(normal, viewDirection, specularColor, specularF90, roughness);

    // Average the transmittance for a single factor
    let transmittanceFactor = (transmittance.r + transmittance.g + transmittance.b) / 3.0;

    // Combine results into the final color
    return vec4(
      (1.0 - F) * attenuatedColor,
      1.0 - (1.0 - transmittedLight.a) * transmittanceFactor
    );
}
`,jn=`
fn DistributionGGX(NdotH: f32, roughness: f32) -> f32 {
  let a: f32 = pow2( roughness );
  let a2: f32 = pow2( a );

  let denom: f32 = (pow2( NdotH ) * (a2 - 1.0) + 1.0);

  return RECIPROCAL_PI * a2 / ( pow2( denom ) );
}

fn GeometrySmith(NdotL: f32, NdotV: f32, roughness: f32) -> f32 {
  let a: f32 = pow2( roughness );
  let a2: f32 = pow2( a );
  
  let gv: f32 = NdotL * sqrt( a2 + ( 1.0 - a2 ) * pow2( NdotV ) );
  let gl: f32 = NdotV * sqrt( a2 + ( 1.0 - a2 ) * pow2( NdotL ) );

  return 0.5 / max( gv + gl, EPSILON );
}

fn BRDF_GGX(
  NdotV: f32,
  NdotL: f32,
  NdotH: f32,
  VdotH: f32,
  roughness: f32,
  specularFactor: f32,
  specularColor: vec3f
) -> vec3f {
  // cook-torrance brdf
  let G: f32 = GeometrySmith(NdotL, NdotV, roughness);
  let D: f32 = DistributionGGX(NdotH, roughness);
  let F: vec3f = F_Schlick(specularColor, specularFactor, VdotH);
  
  return G * D * F;
}
`,qn=`
${jn}

fn EnvironmentBRDF(
  normal: vec3<f32>, 
  viewDir: vec3<f32>, 
  specularColor: vec3<f32>, 
  specularF90: f32, 
  roughness: f32
) -> vec3<f32> {
  let fab = DFGApprox(normal, viewDir, roughness);
  return specularColor * fab.x + specularF90 * fab.y;
}

fn computeSpecularOcclusion( NdotV: f32, occlusion: f32, roughness: f32 ) -> f32 {
	return saturate(pow(NdotV + occlusion, exp2(- 16.0 * roughness - 1.0)) - 1.0 + occlusion);
}

fn getPBRDirect(
  normal: vec3f,
  diffuseColor: vec3f,
  viewDirection: vec3f,
  specularFactor: f32,
  specularColor: vec3f,
  metallic: f32,
  roughness: f32,
  directLight: DirectLight,
  ptr_reflectedLight: ptr<function, ReflectedLight>
) {
  let N: vec3f = normalize(normal);
  let L: vec3f = normalize(directLight.direction);
  let V: vec3f = normalize(viewDirection);
  let H: vec3f = normalize(V + L);
  let NdotV: f32 = saturate(dot(N, V));
  let NdotL: f32 = saturate(dot(N, L));
  let NdotH: f32 = saturate(dot(N, H));
  let VdotH: f32 = saturate(dot(V, H));

  let irradiance: vec3f = NdotL * directLight.color;
  let ggx: vec3f = BRDF_GGX(NdotV, NdotL, NdotH, VdotH, roughness, specularFactor, specularColor);
  
  let diffuseContribution: vec3f = BRDF_Lambert(diffuseColor);
  
  (*ptr_reflectedLight).directDiffuse += irradiance * diffuseContribution;
  (*ptr_reflectedLight).directSpecular += irradiance * ggx;
}
`,eh=c(({environmentMap:n=null})=>{let e="";return n&&(e+=`
  getIBLIndirect(
    normal,
    viewDirection,
    roughness,
    metallic,
    baseDiffuseColor.rgb,
    specularColor,
    specularIntensity,
    ${n.sampler.name},
    ${n.lutTexture.options.name},
    ${n.specularTexture.options.name},
    ${n.diffuseTexture.options.name},
    envRotation,
    envDiffuseIntensity,
    envSpecularIntensity,
    &reflectedLight
  );`),e},"getIBLIndirect$1"),th=c(({transmissionBackgroundTexture:n=null,extensionsUsed:e=[]})=>{const i=e.includes("KHR_materials_dispersion")?"getIBLVolumeRefractionWithDispersion":"getIBLVolumeRefraction";return n?`
  var transmissionAlpha: f32 = 1.0;
  
  var transmitted: vec4f = ${i}(
    normal,
    normalize(viewDirection),
    roughness, 
    baseDiffuseColor,
    specularColor,
    specularF90,
    worldPosition,
    modelScale,
    camera.view,
    camera.projection,
    dispersion,
    ior,
    thickness,
    attenuationColor,
    attenuationDistance,
    ${n.texture.options.name},
    ${n.sampler.name},
  );
  
  transmissionAlpha = mix( transmissionAlpha, transmitted.a, transmission );
  
  totalDiffuse = mix(totalDiffuse, transmitted.rgb, transmission);
  outputColor.a *= transmissionAlpha;`:""},"getIBLVolumeRefraction"),Hn=c(({receiveShadows:n=!1,environmentMap:e=null,transmissionBackgroundTexture:t=null,extensionsUsed:i=[]}={})=>`
  var directLight: DirectLight;
  var reflectedLight: ReflectedLight;
  
  ${n?Ys:""}
  
  let baseDiffuseColor: vec4f = outputColor * ( 1.0 - metallic );
  
  let specularF90: f32 = mix(specularIntensity, 1.0, metallic);
  specularColor = mix( min( pow2( ( ior - 1.0 ) / ( ior + 1.0 ) ) * specularColor, vec3( 1.0 ) ) * specularIntensity, outputColor.rgb, metallic );

  // point lights
  for(var i = 0; i < pointLights.count; i++) {
    getPointLightInfo(pointLights.elements[i], worldPosition, &directLight);
    if(!directLight.visible) {
      continue;
    }
    ${n?Ks:""}
    getPBRDirect(normal, baseDiffuseColor.rgb, viewDirection, specularF90, specularColor, metallic, roughness, directLight, &reflectedLight);
  }
  
  // directional lights
  for(var i = 0; i < directionalLights.count; i++) {
    getDirectionalLightInfo(directionalLights.elements[i], worldPosition, &directLight);
    ${n?Xs:""}
    getPBRDirect(normal, baseDiffuseColor.rgb, viewDirection, specularF90, specularColor, metallic, roughness, directLight, &reflectedLight);
  }
  
  ${eh({environmentMap:e})}
  
  // ambient lights
  var irradiance: vec3f = vec3(0.0);
  RE_IndirectDiffuse(irradiance, baseDiffuseColor.rgb, &reflectedLight);
  
  // ambient lights specular
  var radiance: vec3f = vec3(0.0);
  RE_IndirectSpecular(radiance, irradiance, normal, baseDiffuseColor.rgb, specularF90, specularColor, viewDirection, metallic, roughness, &reflectedLight);
  
  reflectedLight.indirectDiffuse *= occlusion;
  
  let NdotV: f32 = saturate(dot(geometryNormal, normalize(viewDirection)));
  reflectedLight.indirectSpecular *= computeSpecularOcclusion(NdotV, occlusion, roughness);
  
  var totalDiffuse: vec3f = reflectedLight.indirectDiffuse + reflectedLight.directDiffuse;
  let totalSpecular: vec3f = reflectedLight.indirectSpecular + reflectedLight.directSpecular;
  
  ${th({transmissionBackgroundTexture:t,extensionsUsed:i})}
  
  var outgoingLight: vec3f = totalDiffuse + totalSpecular;`,"getPBRShading"),ih=c(({addUtils:n=!0,receiveShadows:e=!1,toneMapping:t="Linear",useOcclusion:i=!1,environmentMap:s=null,transmissionBackgroundTexture:r=null,extensionsUsed:a=[]}={})=>`
${n?_i:""}
${Nn}
${Wn}
${qn}
${t?Ue:""}

fn getPBR(
  normal: vec3f,
  worldPosition: vec3f,
  outputColor: vec4f,
  viewDirection: vec3f,
  metallic: f32,
  roughness: f32,
  specularIntensity: f32,
  specularColor: vec3f,
  ior: f32,
  transmission: f32,
  dispersion: f32,
  thickness: f32,
  attenuationDistance: f32,
  attenuationColor: vec3f,
  ${i?"occlusion: f32,":""}
) -> vec4f {
  ${i?"":"let occlusion: f32 = 1.0;"}
  
  ${Hn({receiveShadows:e,environmentMap:s,transmissionBackgroundTexture:r,extensionsUsed:a})}
  
  ${t==="Linear"?"outgoingLight = linearToOutput3(outgoingLight);":t==="Khronos"?"outgoingLight = linearTosRGB(toneMapKhronosPbrNeutral(outgoingLight));":""}
    
  return vec4(outgoingLight, outputColor.a);
}
`,"getPBR"),Yn=c(({geometry:n})=>{const e=n.getAttributeByName("tangent"),t=[];return n.vertexBuffers&&n.vertexBuffers.length&&n.vertexBuffers.forEach(s=>{s.attributes.forEach(r=>{r.name!=="position"&&t.push(r)})}),e&&t.push({name:"bitangent",type:"vec3f"}),`
  @builtin(position) position: vec4f,
  ${t.map((s,r)=>`
  @location(${r}) ${s.name}: ${s.type},`).join("")}
  @location(${t.length}) viewDirection: vec3f,
  @location(${t.length+1}) worldPosition: vec3f,
  @location(${t.length+2}) modelScale: vec3f,`},"getVertexOutputStructContent"),sh=c(({geometry:n})=>`
struct VSOutput {
  ${Yn({geometry:n})}
};`,"getVertexOutputStruct"),rh=c(({geometry:n})=>{let e=`
  vsOutput.position = camera.projection * camera.view * worldPosition;
  vsOutput.normal = normal;
  vsOutput.worldPosition = worldPosition.xyz / worldPosition.w;
  vsOutput.viewDirection = camera.position - vsOutput.worldPosition;
  vsOutput.modelScale = vec3(
    length(modelMatrix[0].xyz),
    length(modelMatrix[1].xyz),
    length(modelMatrix[2].xyz)
  );
  `;return n.getAttributeByName("tangent")&&(e+=`
  vsOutput.tangent = normalize(modelMatrix * tangent);
  vsOutput.bitangent = cross(vsOutput.normal, vsOutput.tangent.xyz) * vsOutput.tangent.w;
    `),e+=n.vertexBuffers.map(i=>i.attributes.filter(s=>s.name!=="normal"&&s.name!=="position"&&s.name!=="tangent").map(s=>`
  vsOutput.${s.name} = ${s.name};`).join("")).join(`
`),e},"getVertexOutput"),At=c((n=null)=>(n?(n.additionalHead||(n.additionalHead=""),n.preliminaryContribution||(n.preliminaryContribution=""),n.additionalContribution||(n.additionalContribution="")):n={additionalHead:"",preliminaryContribution:"",additionalContribution:""},n),"patchAdditionalChunks"),Js=c(({bindings:n=[],geometry:e,chunks:t=null})=>(t=At(t),`
${t.additionalHead}
  
${sh({geometry:e})}
  
@vertex fn main(
  attributes: Attributes,
) -> VSOutput {
  var vsOutput: VSOutput;
    
  ${Ss({geometry:e})}
  
  // user defined preliminary contribution
  ${t.preliminaryContribution}
  
  ${Ms({bindings:n,geometry:e})}
  
  // user defined additional contribution
  ${t.additionalContribution}
  
  ${rh({geometry:e})}

  return vsOutput;
}`),"getVertexShaderCode"),Ai=c(({geometry:n})=>`
struct FSInput {
  @builtin(front_facing) frontFacing: bool,
  ${Yn({geometry:n})}
};`,"getFragmentInputStruct"),Li=c(({geometry:n})=>{let e=`
  let frontFacing: bool = fsInput.frontFacing;
  `;const t=n&&n.getAttributeByName("normal"),i=n&&n.getAttributeByName("tangent"),s=["position","normal","tangent","color","joints","weights"],r=[];return n&&n.vertexBuffers&&n.vertexBuffers.length&&n.vertexBuffers.forEach(a=>{a.attributes.forEach(o=>{s.some(h=>o.name.includes(h))||r.push(o)})}),e+=r.map(a=>`
  var ${a.name}: ${a.type} = fsInput.${a.name};`).join(""),t?e+=`
  var normal: vec3f = normalize(fsInput.normal);
    `:e+=`
  // silly default normal
  var normal: vec3f = vec3(0.0, 0.0, 1.0);
    `,i?e+=`
  var tangent: vec3f = normalize(fsInput.tangent.xyz);
  var bitangent: vec3f = normalize(fsInput.bitangent);
    `:e+=`
  var tangent: vec3f;
  var bitangent: vec3f;
    `,e+=`
  let worldPosition: vec3f = fsInput.worldPosition;
  let viewDirection: vec3f = fsInput.viewDirection;
  let modelScale: vec3f = fsInput.modelScale;
  `,e},"declareAttributesVars"),Di=c(({materialUniform:n=null,materialUniformName:e="material",shadingModel:t="PBR",environmentMap:i=null}={})=>{var s=n&&n.struct||{},r="";return s.color?r+=`
  var baseColorFactor: vec3f = ${e}.color;`:r+=`
  var baseColorFactor: vec3f = vec3(1.0);`,s.opacity?r+=`
  var baseOpacityFactor: f32 = ${e}.opacity;`:r+=`
  var baseOpacityFactor: f32 = 1.0;`,s.alphaCutoff?r+=`
  var alphaCutoff: f32 = ${e}.alphaCutoff;`:r+=`
  var alphaCutoff: f32 = 0.0;`,t!=="Unlit"&&(s.normalScale?r+=`
  var normalScale: vec2f = ${e}.normalScale;`:r+=`
  var normalScale: vec2f = vec2(1.0);`,s.occlusionIntensity?r+=`
  var occlusionIntensity: f32 = ${e}.occlusionIntensity;`:r+=`
  var occlusionIntensity: f32 = 1.0;`,s.emissiveColor?r+=`
  var emissive: vec3f = ${e}.emissiveColor;`:r+=`
  var emissive: vec3f = vec3(0.0);`,s.emissiveIntensity?r+=`
  var emissiveStrength: f32 = ${e}.emissiveIntensity;`:r+=`
  var emissiveStrength: f32 = 1.0;`),(t==="Phong"||t==="PBR")&&(s.metallic?r+=`
  var metallic: f32 = ${e}.metallic;`:r+=`
  var metallic: f32 = 1.0;`,s.roughness?r+=`
  var roughness: f32 = ${e}.roughness;`:r+=`
  var roughness: f32 = 1.0;`,s.specularIntensity?r+=`
  var specularIntensity: f32 = ${e}.specularIntensity;`:r+=`
  var specularIntensity: f32 = 1.0;`,s.specularColor?r+=`
  var specularColor: vec3f = ${e}.specularColor;`:r+=`
  var specularColor: vec3f = vec3(1.0);`,s.ior?r+=`
  var ior: f32 = ${e}.ior;`:r+=`
  var ior: f32 = 1.5;`,t==="Phong"&&s.shininess?r+=`
  var shininess: f32 = ${e}.shininess;`:r+=`
  // arbitrary computation of shininess from roughness and metallic
  var Ns: f32 = (1.0 / max(EPSILON, roughness * roughness));  // Convert roughness to shininess
  Ns *= (1.0 - 0.5 * metallic);  // Reduce shininess for metals
  var shininess: f32 = clamp(Ns * 60.0, 1.0, 256.0);  // Clamp to avoid extreme values
  shininess = 60.0;`),t==="PBR"&&(s.transmission?r+=`
  var transmission: f32 = ${e}.transmission;`:r+=`
  var transmission: f32 = 0.0;`,s.dispersion?r+=`
  var dispersion: f32 = ${e}.dispersion;`:r+=`
  var dispersion: f32 = 0.0;`,s.thickness?r+=`
  var thickness: f32 = ${e}.thickness;`:r+=`
  var thickness: f32 = 0.0;`,s.attenuationDistance?r+=`
  var attenuationDistance: f32 = ${e}.attenuationDistance;`:r+=`
  var attenuationDistance: f32 = 1.0e38;`,s.attenuationColor?r+=`
  var attenuationColor: vec3f = ${e}.attenuationColor;`:r+=`
  var attenuationColor: vec3f = vec3(1.0);`,i&&(s.envRotation?r+=`
  var envRotation: mat3x3f = ${e}.envRotation;`:r+=`
  var envRotation: mat3x3f = mat3x3f();`,s.envDiffuseIntensity?r+=`
  var envDiffuseIntensity: f32 = ${e}.envDiffuseIntensity;`:r+=`
  var envDiffuseIntensity: f32 = 1.0;`,s.envSpecularIntensity?r+=`
  var envSpecularIntensity: f32 = ${e}.envSpecularIntensity;`:r+=`
  var envSpecularIntensity: f32 = 1.0;`)),r},"declareMaterialVars"),Gi=c(({geometry:n=null,baseColorTexture:e=null}={})=>{let t=`
  var baseColor: vec4f = vec4(baseColorFactor, baseOpacityFactor);
  `;const i=[];return n&&n.vertexBuffers&&n.vertexBuffers.length&&n.vertexBuffers.forEach(s=>{s.attributes.forEach(r=>{r.name.includes("color")&&i.push(r)})}),i.forEach(s=>{s.type==="vec3f"?t+=`
  baseColor *= vec4(fsInput.${s.name}, 1.0);`:t+=`
  baseColor *= fsInput.${s.name};`}),e&&(t+=`
  let baseColorSample: vec4f = textureSample(${e.texture.options.name}, ${e.sampler?.name??"defaultSampler"}, ${e.texCoordAttributeName??"uv"});
  baseColor *= baseColorSample;
  `),t+=`
  if (baseColor.a < alphaCutoff) {
    discard;
  }
  
  outputColor = baseColor;
  `,t},"getBaseColor"),Fi=c(({toneMapping:n="Linear"}={})=>(()=>{switch(n){case"Linear":return"outputColor = vec4(linearToOutput3(outputColor.rgb), outputColor.a);";case"Khronos":return"outputColor = vec4(linearTosRGB(toneMapKhronosPbrNeutral(outputColor.rgb)), outputColor.a);";case!1:default:return""}})(),"applyToneMapping"),Xn=c(({chunks:n=null,toneMapping:e="Linear",geometry:t,materialUniform:i=null,materialUniformName:s="material",baseColorTexture:r=null})=>(n=At(n),`  
${n.additionalHead}

${_e}
${Qe}
${Ue}

${Ai({geometry:t})}

@fragment fn main(fsInput: FSInput) -> @location(0) vec4f {       
  var outputColor: vec4f = vec4();
  
  ${Li({geometry:t})}
  ${Di({materialUniform:i,materialUniformName:s,shadingModel:"Unlit"})}
  ${Gi({geometry:t,baseColorTexture:r})}
  
  // user defined preliminary contribution
  ${n.preliminaryContribution}
  
  // user defined additional contribution
  ${n.additionalContribution}
  
  ${Fi({toneMapping:e})}
  return outputColor;
}`),"getUnlitFragmentShaderCode"),Zs=c(({geometry:n=null,normalTexture:e=null}={})=>{let t=`
  let faceDirection = select(-1.0, 1.0, frontFacing);
  let geometryNormal: vec3f = faceDirection * normal;`;const i=n&&n.getAttributeByName("tangent");return e?(!!(e&&i)||(t+=`
  // TODO decide whether we're computing tangent and bitangent
  // with normal or with derivatives
  /*
  let Q1: vec3f = dpdx(worldPosition);
  let Q2: vec3f = dpdy(worldPosition);
  let st1: vec2f = dpdx(fsInput.${e.texCoordAttributeName??"uv"});
  let st2: vec2f = dpdy(fsInput.${e.texCoordAttributeName??"uv"});
  
  tangent = normalize(Q1 * st2.y - Q2 * st1.y);
  bitangent = normalize(-Q1 * st2.x + Q2 * st1.x);
  */
  
  bitangent = vec3(0.0, 1.0, 0.0);

  let NdotUp: f32 = dot(normal, vec3(0.0, 1.0, 0.0));
  
  if (1.0 - abs(NdotUp) <= EPSILON) {
    // Sampling +Y or -Y, so we need a more robust bitangent.
    if (NdotUp > 0.0) {
      bitangent = vec3(0.0, 0.0, 1.0);
    }
    else {
      bitangent = vec3(0.0, 0.0, -1.0);
    }
  }

  tangent = normalize(cross(bitangent, normal));
  bitangent = cross(normal, tangent);
  `),t+=`
  let tbn = mat3x3f(tangent, bitangent, geometryNormal);
  let normalMap = textureSample(${e.texture.options.name}, ${e.sampler?.name??"defaultSampler"}, ${e.texCoordAttributeName??"uv"}).rgb;
  normal = normalize(tbn * (2.0 * normalMap - vec3(vec2(normalScale), 1.0)));`):t+=`
  normal = geometryNormal;`,t},"getNormalTangentBitangent"),Qs=c(({emissiveTexture:n=null,occlusionTexture:e=null}={})=>{let t=`
  var occlusion: f32 = 1.0;`;return n&&(t+=`
  let emissiveSample: vec3f = textureSample(${n.texture.options.name}, ${n.sampler?.name??"defaultSampler"}, ${n.texCoordAttributeName??"uv"}).rgb;
  emissive *= emissiveSample;`),t+=`
  emissive *= emissiveStrength;`,e&&(t+=`
  occlusion = textureSample(${e.texture.options.name}, ${e.sampler?.name??"defaultSampler"}, ${e.texCoordAttributeName??"uv"}).r;`),t+=`
  occlusion = 1.0 + occlusionIntensity * (occlusion - 1.0);`,t},"getEmissiveOcclusion"),Kn=c(({chunks:n=null,toneMapping:e="Linear",geometry:t,materialUniform:i=null,materialUniformName:s="material",receiveShadows:r=!1,baseColorTexture:a=null,normalTexture:o=null,emissiveTexture:h=null,occlusionTexture:l=null})=>(n=At(n),`  
${n.additionalHead}

${_e}
${Qe}
${Ue}
${Ei}
${zi}
${kn}

${Ai({geometry:t})}

@fragment fn main(fsInput: FSInput) -> @location(0) vec4f {
  var outputColor: vec4f = vec4();
  
  ${Li({geometry:t})}
  ${Di({materialUniform:i,materialUniformName:s,shadingModel:"Lambert"})}
  ${Gi({geometry:t,baseColorTexture:a})}
  
  // user defined preliminary contribution
  ${n.preliminaryContribution}
  
  ${Zs({geometry:t,normalTexture:o})}  
  ${Qs({emissiveTexture:h,occlusionTexture:l})}
  
  // lights
  ${Un({receiveShadows:r})}
  
  outputColor = vec4(outgoingLight, outputColor.a);
  outputColor = vec4(outputColor.rgb + emissive, outputColor.a);
  
  // user defined additional contribution
  ${n.additionalContribution}
  
  ${Fi({toneMapping:e})}
  return outputColor;
}`),"getLambertFragmentShaderCode"),Jn=c(({metallicRoughnessTexture:n=null}={})=>{let e="";return n&&(e+=`
  let metallicRoughness = textureSample(${n.texture.options.name}, ${n.sampler?.name??"defaultSampler"}, ${n.texCoordAttributeName??"uv"});
  
  metallic = metallic * metallicRoughness.b;
  roughness = roughness * metallicRoughness.g;
  `),e+=`
  metallic = saturate(metallic);
  roughness = clamp(roughness, 0.0525, 1.0);
  `,e},"getMetallicRoughness"),Zn=c(({specularTexture:n=null,specularFactorTexture:e=null,specularColorTexture:t=null}={})=>{let i="";return n?i+=`
  let specularSample: vec4f = textureSample(${n.texture.options.name}, ${n.sampler?.name??"defaultSampler"}, ${n.texCoordAttributeName??"uv"});
  
  specularIntensity = specularIntensity * specularSample.a;
  specularColor = specularColor * specularSample.rgb;`:(e&&(i+=`
  let specularFactorSample: vec4f = textureSample(${e.texture.options.name}, ${e.sampler?.name??"defaultSampler"}, ${e.texCoordAttributeName??"uv"});
  
  specularIntensity = specularIntensity * specularSample.a;`),t&&(i+=`
  let specularColorSample: vec4f = textureSample(${t.texture.options.name}, ${t.sampler?.name??"defaultSampler"}, ${t.texCoordAttributeName??"uv"});
  
  specularColor = specularColor * specularSample.rgb;`)),i},"getSpecular"),Qn=c(({chunks:n=null,toneMapping:e="Linear",geometry:t,materialUniform:i=null,materialUniformName:s="material",receiveShadows:r=!1,baseColorTexture:a=null,normalTexture:o=null,emissiveTexture:h=null,occlusionTexture:l=null,metallicRoughnessTexture:u=null,specularTexture:d=null,specularFactorTexture:f=null,specularColorTexture:p=null})=>(n=At(n),`  
${n.additionalHead}

${_e}
${Qe}
${Ue}
${Ei}
${zi}
${In}

${Ai({geometry:t})}

@fragment fn main(fsInput: FSInput) -> @location(0) vec4f {       
  var outputColor: vec4f = vec4();
  
  ${Li({geometry:t})}
  ${Di({materialUniform:i,materialUniformName:s,shadingModel:"Phong"})}
  ${Gi({geometry:t,baseColorTexture:a})}
  
  // user defined preliminary contribution
  ${n.preliminaryContribution}
  
  ${Zs({geometry:t,normalTexture:o})}
  ${Jn({metallicRoughnessTexture:u})}
  ${Zn({specularTexture:d,specularFactorTexture:f,specularColorTexture:p})}
  ${Qs({emissiveTexture:h,occlusionTexture:l})}
  
  // lights
  ${Vn({receiveShadows:r})}
  
  outputColor = vec4(outgoingLight, outputColor.a);
  outputColor = vec4(outputColor.rgb + emissive, outputColor.a);
  
  // user defined additional contribution
  ${n.additionalContribution}
  
  ${Fi({toneMapping:e})}
  return outputColor;
}`),"getPhongFragmentShaderCode"),nh=`
struct IBLGGXFresnel {
  FssEss: vec3f,
  FmsEms: vec3f
}

fn getIBLGGXFresnel(normal: vec3f, viewDirection: vec3f, roughness: f32, f0: vec3f, specularWeight: f32, clampSampler: sampler,
  lutTexture: texture_2d<f32>) -> IBLGGXFresnel {
    var iBLGGXFresnel: IBLGGXFresnel;

    let N: vec3f = normalize(normal);
    let V: vec3f = normalize(viewDirection);
    let NdotV: f32 = saturate(dot(N, V));
    
    let brdfSamplePoint: vec2f = saturate(vec2(NdotV, roughness));

    let brdf: vec3f = textureSample(
      lutTexture,
      clampSampler,
      brdfSamplePoint
    ).rgb;

    let Fr: vec3f = max(vec3(1.0 - roughness), f0) - f0;
    let k_S: vec3f = f0 + Fr * pow(1.0 - NdotV, 5.0);
    iBLGGXFresnel.FssEss = specularWeight * (k_S * brdf.x + brdf.y);
    let Ems: f32 = (1.0 - (brdf.x + brdf.y));
    let F_avg: vec3f = specularWeight * (f0 + (1.0 - f0) / 21.0);
    iBLGGXFresnel.FmsEms = Ems * iBLGGXFresnel.FssEss * F_avg / (1.0 - F_avg * Ems);

    return iBLGGXFresnel;
}

fn getIBLIndirect(
  normal: vec3f,
  viewDirection: vec3f,
  roughness: f32,
  metallic: f32,
  diffuseColor: vec3f,
  specularColor: vec3f,
  specularFactor: f32,
  clampSampler: sampler,
  lutTexture: texture_2d<f32>,
  envSpecularTexture: texture_cube<f32>,
  envDiffuseTexture: texture_cube<f32>,
  envRotation: mat3x3f,
  envDiffuseIntensity: f32,
  envSpecularIntensity: f32,
  ptr_reflectedLight: ptr<function, ReflectedLight>,
) {
  let N: vec3f = normalize(normal);
  let V: vec3f = normalize(viewDirection);
  let NdotV: f32 = saturate(dot(N, V));

  let reflection: vec3f = normalize(reflect(-V, N));

  let iblDiffuseColor: vec3f = mix(diffuseColor, vec3(0.0), vec3(metallic));

  // IBL specular (radiance)
  let lod: f32 = roughness * f32(textureNumLevels(envSpecularTexture) - 1);

  let specularLight: vec4f = textureSampleLevel(
    envSpecularTexture,
    clampSampler,
    reflection * envRotation,
    lod
  );

  // IBL diffuse (irradiance)
  let diffuseLight: vec4f = textureSample(
    envDiffuseTexture,
    clampSampler,
    normal * envRotation
  );

  let iBLGGXFresnel = getIBLGGXFresnel(normal, viewDirection, roughness, specularColor, specularFactor, clampSampler, lutTexture);

  let k_D: vec3f = iblDiffuseColor * (1.0 - iBLGGXFresnel.FssEss + iBLGGXFresnel.FmsEms);

  (*ptr_reflectedLight).indirectSpecular += specularLight.rgb * iBLGGXFresnel.FssEss * envSpecularIntensity;
  (*ptr_reflectedLight).indirectDiffuse += (iBLGGXFresnel.FmsEms + k_D) * diffuseLight.rgb * envDiffuseIntensity;
}
`,ah=c(({transmissionTexture:n=null,thicknessTexture:e=null}={})=>{let t="";return n&&(t+=`
  let transmissionSample: vec4f = textureSample(${n.texture.options.name}, ${n.sampler?.name??"defaultSampler"}, ${n.texCoordAttributeName??"uv"});
  
  transmission = clamp(transmission * transmissionSample.r, 0.0, 1.0);`),e&&(t+=`
  let thicknessSample: vec4f = textureSample(${e.texture.options.name}, ${e.sampler?.name??"defaultSampler"}, ${e.texCoordAttributeName??"uv"});
  
  thickness *= thicknessSample.g;`),t},"getTransmissionThickness"),ea=c(({chunks:n=null,toneMapping:e="Linear",geometry:t,materialUniform:i=null,materialUniformName:s="material",extensionsUsed:r=[],receiveShadows:a=!1,baseColorTexture:o=null,normalTexture:h=null,emissiveTexture:l=null,occlusionTexture:u=null,metallicRoughnessTexture:d=null,specularTexture:f=null,specularFactorTexture:p=null,specularColorTexture:m=null,transmissionTexture:g=null,thicknessTexture:v=null,transmissionBackgroundTexture:x=null,environmentMap:w=null})=>(n=At(n),w&&i&&i.struct&&(i.struct={...i.struct,envRotation:{type:"mat3x3f",value:w.rotation},envDiffuseIntensity:{type:"f32",value:w.options.diffuseIntensity},envSpecularIntensity:{type:"f32",value:w.options.specularIntensity}}),`  
${n.additionalHead}

${_e}
${Qe}
${Ue}
${Ei}
${zi}
${Nn}
${qn}
${nh}
${Wn}

${Ai({geometry:t})}

@fragment fn main(fsInput: FSInput) -> @location(0) vec4f {
  var outputColor: vec4f = vec4();
  
  ${Li({geometry:t})}
  ${Di({materialUniform:i,materialUniformName:s,shadingModel:"PBR",environmentMap:w})}
  ${Gi({geometry:t,baseColorTexture:o})}
  
  // user defined preliminary contribution
  ${n.preliminaryContribution}
  
  ${Zs({geometry:t,normalTexture:h})}
  ${Jn({metallicRoughnessTexture:d})}
  ${Zn({specularTexture:f,specularFactorTexture:p,specularColorTexture:m})}
  ${ah({transmissionTexture:g,thicknessTexture:v})}
  ${Qs({emissiveTexture:l,occlusionTexture:u})}
  
  // lights
  ${Hn({receiveShadows:a,environmentMap:w,transmissionBackgroundTexture:x,extensionsUsed:r})}
  
  outputColor = vec4(outgoingLight, outputColor.a);
  outputColor = vec4(outputColor.rgb + emissive, outputColor.a);
  
  // user defined additional contribution
  ${n.additionalContribution}
  
  ${Fi({toneMapping:e})}
  return outputColor;
}`),"getPbrFragmentShaderCode"),er=c(({shadingModel:n="PBR",chunks:e=null,toneMapping:t="Linear",geometry:i,materialUniform:s=null,materialUniformName:r="material",extensionsUsed:a=[],receiveShadows:o=!1,baseColorTexture:h=null,normalTexture:l=null,emissiveTexture:u=null,occlusionTexture:d=null,metallicRoughnessTexture:f=null,specularTexture:p=null,specularFactorTexture:m=null,specularColorTexture:g=null,transmissionTexture:v=null,thicknessTexture:x=null,transmissionBackgroundTexture:w=null,environmentMap:T=null})=>(()=>{switch(n){case"Unlit":return Xn({chunks:e,toneMapping:t,geometry:i,materialUniform:s,materialUniformName:r,baseColorTexture:h});case"Lambert":return Kn({chunks:e,toneMapping:t,geometry:i,materialUniform:s,materialUniformName:r,receiveShadows:o,baseColorTexture:h,normalTexture:l,emissiveTexture:u,occlusionTexture:d});case"Phong":return Qn({chunks:e,toneMapping:t,geometry:i,materialUniform:s,materialUniformName:r,receiveShadows:o,baseColorTexture:h,normalTexture:l,emissiveTexture:u,occlusionTexture:d,metallicRoughnessTexture:f,specularTexture:p,specularFactorTexture:m,specularColorTexture:g});case"PBR":default:return ea({chunks:e,toneMapping:t,geometry:i,materialUniform:s,materialUniformName:r,extensionsUsed:a,receiveShadows:o,baseColorTexture:h,normalTexture:l,emissiveTexture:u,occlusionTexture:d,metallicRoughnessTexture:f,specularTexture:p,specularFactorTexture:m,specularColorTexture:g,transmissionTexture:v,thicknessTexture:x,transmissionBackgroundTexture:w,environmentMap:T})}})(),"getFragmentShaderCode");var ta=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$6"),Ae=c((n,e,t)=>(ta(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$5"),tr=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$6"),oh=c((n,e,t,i)=>(ta(n,e,"write to private field"),e.set(n,t),t),"__privateSet$5"),Lt,et,$i;class ia extends _s{static{c(this,"DOMObject3D")}constructor(e,t,i={}){super(e),tr(this,Lt,new y),tr(this,et,new y(1)),tr(this,$i,1),this.boundingBox=new Pe(new y(-1),new y(1)),this._onAfterDOMElementResizeCallback=()=>{},e=hs(e,"DOM3DObject"),this.renderer=e,this.size={shouldUpdate:!0,normalizedWorld:{size:new z(1),position:new z},cameraWorld:{size:new z(1)},scaledWorld:{size:new y(1),position:new y}},this.watchScroll=i.watchScroll,this.camera=this.renderer.camera,this.boundingBox.min.onChange(()=>this.shouldUpdateComputedSizes()),this.boundingBox.max.onChange(()=>this.shouldUpdateComputedSizes()),this.setDOMElement(t),this.renderer.domObjects.push(this)}setDOMElement(e){this.domElement=new Ds({element:e,onSizeChanged:t=>this.resize(t),onPositionChanged:()=>this.onPositionChanged()}),this.updateSizeAndPosition()}onPositionChanged(){this.watchScroll&&this.shouldUpdateComputedSizes()}resetDOMElement(e){this.domElement&&this.domElement.destroy(),this.setDOMElement(e)}resize(e=null){!e&&(!this.domElement||this.domElement?.isResizing)||(this.updateSizeAndPosition(),this._onAfterDOMElementResizeCallback&&this._onAfterDOMElementResizeCallback())}get boundingRect(){return this.domElement?.boundingRect??{width:1,height:1,top:0,right:0,bottom:0,left:0,x:0,y:0}}setTransforms(){super.setTransforms(),this.transforms.origin.model.set(.5,.5,0),this.transforms.origin.world=new y,this.transforms.position.document=new y,this.documentPosition.onChange(()=>this.applyPosition()),this.transformOrigin.onChange(()=>this.setWorldTransformOrigin())}get documentPosition(){return this.transforms.position.document}set documentPosition(e){this.transforms.position.document=e,this.applyPosition()}get DOMObjectWorldScale(){return Ae(this,et).clone()}get worldScale(){return this.DOMObjectWorldScale.multiply(this.scale)}get worldPosition(){return Ae(this,Lt).clone()}get transformOrigin(){return this.transforms.origin.model}set transformOrigin(e){this.transforms.origin.model=e,this.setWorldTransformOrigin()}get worldTransformOrigin(){return this.transforms.origin.world}set worldTransformOrigin(e){this.transforms.origin.world=e}shouldUpdateMatrices(){super.shouldUpdateMatrices(),(this.matricesNeedUpdate||this.size.shouldUpdate)&&(this.updateSizeAndPosition(),this.matricesNeedUpdate=!0),this.size.shouldUpdate=!1}shouldUpdateComputedSizes(){this.size.shouldUpdate=!0}updateSizeAndPosition(){this.setWorldSizes(),this.applyDocumentPosition(),this.shouldUpdateModelMatrix()}applyDocumentPosition(){let e=new y(0,0,0);this.documentPosition.equals(e)||(e=this.documentToWorldSpace(this.documentPosition)),Ae(this,Lt).set(this.position.x+this.size.scaledWorld.position.x+e.x,this.position.y+this.size.scaledWorld.position.y+e.y,this.position.z+this.size.scaledWorld.position.z+this.documentPosition.z/this.camera.CSSPerspective)}applyTransformOrigin(){this.size&&(this.setWorldTransformOrigin(),super.applyTransformOrigin())}updateModelMatrix(){this.modelMatrix.composeFromOrigin(Ae(this,Lt),this.quaternion,this.scale,this.worldTransformOrigin),this.modelMatrix.scale(this.DOMObjectWorldScale),this.shouldUpdateWorldMatrix()}documentToWorldSpace(e=new y){return new y(e.x*this.renderer.pixelRatio/this.renderer.boundingRect.width*this.camera.visibleSize.width,-(e.y*this.renderer.pixelRatio/this.renderer.boundingRect.height)*this.camera.visibleSize.height,e.z)}computeWorldSizes(){const e=this.renderer.boundingRect,t={x:this.boundingRect.width/2+this.boundingRect.left,y:this.boundingRect.height/2+this.boundingRect.top},i={x:e.width/2+e.left,y:e.height/2+e.top},{size:s,center:r}=this.boundingBox;s.x!==0&&s.y!==0&&s.z!==0&&r.divide(s),this.size.normalizedWorld.size.set(this.boundingRect.width/e.width,this.boundingRect.height/e.height),this.size.normalizedWorld.position.set((t.x-i.x)/e.width,(i.y-t.y)/e.height),this.size.cameraWorld.size.set(this.size.normalizedWorld.size.x*this.camera.visibleSize.width,this.size.normalizedWorld.size.y*this.camera.visibleSize.height),this.size.scaledWorld.size.set(this.size.cameraWorld.size.x/s.x,this.size.cameraWorld.size.y/s.y,1),this.size.scaledWorld.size.z=this.size.scaledWorld.size.y*(s.x/s.y/(this.boundingRect.width/this.boundingRect.height)),this.size.scaledWorld.position.set(this.size.normalizedWorld.position.x*this.camera.visibleSize.width,this.size.normalizedWorld.position.y*this.camera.visibleSize.height,0)}setWorldSizes(){this.computeWorldSizes(),this.setWorldScale(),this.setWorldTransformOrigin()}setWorldScale(){Ae(this,et).set(this.size.scaledWorld.size.x,this.size.scaledWorld.size.y,this.size.scaledWorld.size.z*Ae(this,$i)),this.shouldUpdateMatrixStack()}set DOMObjectDepthScaleRatio(e){oh(this,$i,e),this.setWorldScale()}setWorldTransformOrigin(){this.transforms.origin.world=new y((this.transformOrigin.x*2-1)*Ae(this,et).x,-(this.transformOrigin.y*2-1)*Ae(this,et).y,this.transformOrigin.z*Ae(this,et).z),this.shouldUpdateMatrixStack()}updateScrollPosition(e={x:0,y:0}){(e.x||e.y)&&this.domElement.updateScrollPosition(e)}onAfterDOMElementResize(e){return e&&(this._onAfterDOMElementResizeCallback=e),this}destroy(){super.destroy(),this.domElement?.destroy()}}Lt=new WeakMap,et=new WeakMap,$i=new WeakMap;const sa={autoloadSources:!0,watchScroll:!0};class ra extends Sn(ia){static{c(this,"DOMMesh")}constructor(e,t,i){super(e,t,{...sa,...i}),this._onLoadingCallback=r=>{},i={...sa,...i},hs(e,i.label?i.label+" DOMMesh":"DOMMesh"),this.type="DOMMesh";const{autoloadSources:s}=i;this.autoloadSources=s,this.sourcesReady=!1,this.setInitSources()}get ready(){return this._ready}set ready(e){e&&!this._ready&&this.sourcesReady&&this._onReadyCallback&&this._onReadyCallback(),this._ready=e}get sourcesReady(){return this._sourcesReady}set sourcesReady(e){e&&!this._sourcesReady&&this.ready&&this._onReadyCallback&&this._onReadyCallback(),this._sourcesReady=e}addToScene(e=!1){super.addToScene(e),e&&this.renderer.domMeshes.push(this)}removeFromScene(e=!1){super.removeFromScene(e),e&&(this.renderer.domMeshes=this.renderer.domMeshes.filter(t=>t.uuid!==this.uuid))}setInitSources(){let e=0,t=0;if(this.autoloadSources){const i=this.domElement.element.querySelectorAll("img"),s=this.domElement.element.querySelectorAll("video"),r=this.domElement.element.querySelectorAll("canvas");e=i.length+s.length+r.length;const a=c(o=>{t++,this._onLoadingCallback&&this._onLoadingCallback(o),t===e&&(this.sourcesReady=!0)},"onSourceUploaded");e||(this.sourcesReady=!0),i.length&&i.forEach(o=>{const h=this.createDOMTexture({name:o.getAttribute("data-texture-name")??"texture"+this.domTextures.length});h.onSourceUploaded(()=>a(h)).loadImage(o.src)}),s.length&&s.forEach(o=>{const h=this.createDOMTexture({name:o.getAttribute("data-texture-name")??"texture"+this.domTextures.length});h.onSourceUploaded(()=>a(h)).loadVideo(o)}),r.length&&r.forEach(o=>{const h=this.createDOMTexture({name:o.getAttribute("data-texture-name")??"texture"+this.domTextures.length});h.onSourceUploaded(()=>a(h)).loadCanvas(o)})}else this.sourcesReady=!0}resetDOMElement(e){e?super.resetDOMElement(e):!e&&!this.renderer.production&&L(`${this.options.label}: You are trying to reset a ${this.type} with a HTML element that does not exist. The old HTML element will be kept instead.`)}get pixelRatioBoundingRect(){const e=window.devicePixelRatio??1,t=this.renderer.pixelRatio/e;return Object.keys(this.domElement.boundingRect).reduce((i,s)=>({...i,[s]:this.domElement.boundingRect[s]*t}),{x:0,y:0,width:0,height:0,top:0,right:0,bottom:0,left:0})}computeGeometry(){super.computeGeometry(),this.boundingBox.copy(this.geometry.boundingBox)}onLoading(e){return e&&(this._onLoadingCallback=e),this}}const hh={label:"Plane",instancesCount:1,vertexBuffers:[]};class na extends ra{static{c(this,"Plane")}constructor(e,t,i={}){e=hs(e,i.label?i.label+" Plane":"Plane");const s={...hh,...i};let{geometry:r,widthSegments:a,heightSegments:o,...h}=s;const{instancesCount:l,vertexBuffers:u,...d}=h;if(!r||r.type!=="PlaneGeometry"){a=a??1,o=o??1;const f=a*o+a;u.length||(r=Ci.getPlaneGeometryByID(f)),r?r.instancesCount=l:(r=new ys({widthSegments:a,heightSegments:o,instancesCount:l,vertexBuffers:u}),Ci.addPlaneGeometry(r))}super(e,t,{geometry:r,...d}),this.type="Plane"}}class Oi extends ks{static{c(this,"GPUCurtainsRenderer")}constructor({deviceManager:e,label:t,container:i,pixelRatio:s=1,autoResize:r=!0,context:a={},renderPass:o,camera:h,lights:l}){super({deviceManager:e,label:t,container:i,pixelRatio:s,autoResize:r,context:a,renderPass:o,camera:h,lights:l}),this.type="GPUCurtainsRenderer"}setRendererObjects(){super.setRendererObjects(),this.domMeshes=[],this.domObjects=[]}onCameraMatricesChanged(){super.onCameraMatricesChanged(),this.domObjects.forEach(e=>{e.updateSizeAndPosition()})}resizeMeshes(){this.meshes.forEach(e=>{"domElement"in e||e.resize(this.boundingRect)}),this.domObjects.forEach(e=>{e.domElement.isResizing||e.domElement.setSize()})}}class lh{static{c(this,"ScrollManager")}constructor({scroll:e={x:0,y:0},delta:t={x:0,y:0},shouldWatch:i=!0,onScroll:s=c((r={x:0,y:0})=>{},"onScroll")}={}){this.scroll=e,this.delta=t,this.shouldWatch=i,this.onScroll=s,this.shouldWatch&&window.addEventListener("scroll",this.setScroll.bind(this),{passive:!0})}setScroll(){this.updateScrollValues({x:window.pageXOffset,y:window.pageYOffset})}updateScrollValues({x:e,y:t}){const i=this.scroll;this.scroll={x:e,y:t},this.delta={x:i.x-this.scroll.x,y:i.y-this.scroll.y},this.onScroll&&this.onScroll(this.delta)}destroy(){this.shouldWatch&&window.removeEventListener("scroll",this.setScroll.bind(this),{passive:!0})}}class uh{static{c(this,"GPUCurtains")}constructor({container:e,label:t,pixelRatio:i=window.devicePixelRatio??1,context:s={},production:r=!1,adapterOptions:a={},renderPass:o,camera:h,lights:l,autoRender:u=!0,autoResize:d=!0,watchScroll:f=!0}={}){this._onScrollCallback=()=>{},this._onErrorCallback=()=>{},this._onContextLostCallback=()=>{},this._onContextDestroyedCallback=()=>{},this.type="CurtainsGPU",this.options={container:e,label:t,pixelRatio:i,camera:h,lights:l,production:r,adapterOptions:a,context:s,renderPass:o,autoRender:u,autoResize:d,watchScroll:f},this.setDeviceManager(),e&&this.setContainer(e),this.initScroll()}setContainer(e){if(e)if(typeof e=="string")if(e=document.querySelector(e),e)this.options.container=e;else{const t=document.createElement("div");t.setAttribute("id","curtains-gpu-canvas"),document.body.appendChild(t),this.options.container=t}else e instanceof Element&&(this.options.container=e);else{const t=document.createElement("div");t.setAttribute("id","curtains-gpu-canvas"),document.body.appendChild(t),this.options.container=t}this.container=this.options.container,this.setMainRenderer()}setMainRenderer(){this.createCurtainsRenderer({deviceManager:this.deviceManager,label:this.options.label||"GPUCurtains main GPUCurtainsRenderer",container:this.options.container,pixelRatio:this.options.pixelRatio,autoResize:this.options.autoResize,context:this.options.context,renderPass:this.options.renderPass,camera:this.options.camera,lights:this.options.lights})}patchRendererOptions(e){return e.pixelRatio===void 0&&(e.pixelRatio=this.options.pixelRatio),e.autoResize===void 0&&(e.autoResize=this.options.autoResize),e}createRenderer(e){return e=this.patchRendererOptions(e),new $s({...e,deviceManager:this.deviceManager})}createCameraRenderer(e){return e=this.patchRendererOptions(e),new ks({...e,deviceManager:this.deviceManager})}createCurtainsRenderer(e){return e=this.patchRendererOptions(e),new Oi({...e,deviceManager:this.deviceManager})}setDeviceManager(){this.deviceManager=new _n({label:"GPUCurtains default device",production:this.options.production,adapterOptions:this.options.adapterOptions,autoRender:this.options.autoRender,onError:()=>setTimeout(()=>{this._onErrorCallback&&this._onErrorCallback()},0),onDeviceLost:e=>this._onContextLostCallback&&this._onContextLostCallback(e),onDeviceDestroyed:e=>this._onContextDestroyedCallback&&this._onContextDestroyedCallback(e)})}get renderers(){return this.deviceManager.renderers}get renderer(){return this.renderers[0]}async setDevice({adapter:e=null,device:t=null}={}){await this.deviceManager.init({adapter:e,device:t})}async restoreContext(){await this.deviceManager.restoreDevice()}get pingPongPlanes(){return this.renderers?.map(e=>e.pingPongPlanes).flat()}get shaderPasses(){return this.renderers?.map(e=>e.shaderPasses).flat()}get meshes(){return this.renderers?.map(e=>e.meshes).flat()}get domMeshes(){return this.renderers?.filter(e=>e instanceof Oi).map(e=>e.domMeshes).flat()}get domObjects(){return this.renderers?.filter(e=>e instanceof Oi).map(e=>e.domObjects).flat()}get planes(){return this.domMeshes.filter(e=>e instanceof na)}get computePasses(){return this.renderers?.map(e=>e.computePasses).flat()}get boundingRect(){return this.renderer?.boundingRect}initScroll(){this.scrollManager=new lh({scroll:{x:window.pageXOffset,y:window.pageYOffset},delta:{x:0,y:0},shouldWatch:this.options.watchScroll,onScroll:e=>this.updateScroll(e)})}updateScroll(e={x:0,y:0}){this.domObjects.forEach(t=>{t.domElement&&t.watchScroll&&t.updateScrollPosition(e)}),this._onScrollCallback&&this._onScrollCallback()}updateScrollValues(e={x:0,y:0}){this.scrollManager.updateScrollValues(e)}get scrollDelta(){return this.scrollManager.delta}get scrollValues(){return this.scrollManager.scroll}onBeforeRender(e){return this.deviceManager.onBeforeRender(e),this}onAfterRender(e){return this.deviceManager.onAfterRender(e),this}onScroll(e){return e&&(this._onScrollCallback=e),this}onError(e){return e&&(this._onErrorCallback=e),this}onContextLost(e){return e&&(this._onContextLostCallback=e),this}onContextDestroyed(e){return e&&(this._onContextDestroyedCallback=e),this}render(){this.deviceManager.render()}destroy(){this.deviceManager.destroy(),this.scrollManager?.destroy()}}var ir=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$5"),P=c((n,e,t)=>(ir(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$4"),k=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$5"),Ie=c((n,e,t,i)=>(ir(n,e,"write to private field"),e.set(n,t),t),"__privateSet$4"),G=c((n,e,t)=>(ir(n,e,"access private method"),t),"__privateMethod$5"),V,oe,Ve,F,ot,ht,Dt,lt,ki,sr,rr,aa,nr,oa,Ui,ar,Ii,or,Vi,hr,Ni,lr,Wi,ur,ji,dr,qi,cr,Hi,pr,tt,ut,Yi,fr,mr,ha,gr,la;const dt=new z,ct=new z,Ne=new y;class dh{static{c(this,"OrbitControls")}constructor({camera:e,element:t=null,target:i=new y,enableZoom:s=!0,minZoom:r=0,maxZoom:a=1/0,zoomSpeed:o=1,enableRotate:h=!0,minPolarAngle:l=0,maxPolarAngle:u=Math.PI,minAzimuthAngle:d=-1/0,maxAzimuthAngle:f=1/0,rotateSpeed:p=1,enablePan:m=!0,panSpeed:g=1}){if(k(this,ki),k(this,rr),k(this,nr),k(this,Ui),k(this,Ii),k(this,Vi),k(this,Ni),k(this,Wi),k(this,ji),k(this,qi),k(this,Hi),k(this,tt),k(this,Yi),k(this,mr),k(this,gr),k(this,V,null),k(this,oe,new y),k(this,Ve,!1),k(this,F,{radius:1,phi:0,theta:0}),k(this,ot,new z),k(this,ht,!1),k(this,Dt,new z),k(this,lt,new y),!e){L("OrbitControls: cannot initialize without a camera.");return}G(this,ki,sr).call(this,{target:i,enableZoom:s,minZoom:r,maxZoom:a,zoomSpeed:o,enableRotate:h,minPolarAngle:l,maxPolarAngle:u,minAzimuthAngle:d,maxAzimuthAngle:f,rotateSpeed:p,enablePan:m,panSpeed:g}),this.element=t??(typeof window<"u"?window:null),this.useCamera(e)}useCamera(e){this.camera=e,this.camera.position.onChange(()=>{this.camera.lookAt(this.target)}),P(this,oe).copy(this.camera.position).sub(this.target),P(this,F).radius=P(this,oe).length(),P(this,F).theta=Math.atan2(P(this,oe).x,P(this,oe).z),P(this,F).phi=Math.acos(Math.min(Math.max(P(this,oe).y/P(this,F).radius,-1),1)),G(this,tt,ut).call(this)}reset({position:e,target:t,enableZoom:i=this.enableZoom,minZoom:s=this.minZoom,maxZoom:r=this.maxZoom,zoomSpeed:a=this.zoomSpeed,enableRotate:o=this.enableRotate,minPolarAngle:h=this.minPolarAngle,maxPolarAngle:l=this.maxPolarAngle,minAzimuthAngle:u=this.minAzimuthAngle,maxAzimuthAngle:d=this.maxAzimuthAngle,rotateSpeed:f=this.rotateSpeed,enablePan:p=this.enablePan,panSpeed:m=this.panSpeed}={}){G(this,ki,sr).call(this,{target:t,enableZoom:i,minZoom:s,maxZoom:r,zoomSpeed:a,enableRotate:o,minPolarAngle:h,maxPolarAngle:l,minAzimuthAngle:u,maxAzimuthAngle:d,rotateSpeed:f,enablePan:p,panSpeed:m}),e&&this.updatePosition(e)}updatePosition(e=new y){e.sub(this.target),P(this,F).radius=e.length(),P(this,F).theta=Math.atan2(e.x,e.z),P(this,F).phi=Math.acos(Math.min(Math.max(e.y/P(this,F).radius,-1),1)),G(this,tt,ut).call(this)}set element(e){P(this,V)&&(!e||P(this,V)!==e)&&G(this,nr,oa).call(this),Ie(this,V,e),e&&G(this,rr,aa).call(this)}get element(){return P(this,V)}destroy(){this.element=null}}V=new WeakMap,oe=new WeakMap,Ve=new WeakMap,F=new WeakMap,ot=new WeakMap,ht=new WeakMap,Dt=new WeakMap,lt=new WeakMap,ki=new WeakSet,sr=c(function({target:n,enableZoom:e=this.enableZoom,minZoom:t=this.minZoom,maxZoom:i=this.maxZoom,zoomSpeed:s=this.zoomSpeed,enableRotate:r=this.enableRotate,minPolarAngle:a=this.minPolarAngle,maxPolarAngle:o=this.maxPolarAngle,minAzimuthAngle:h=this.minAzimuthAngle,maxAzimuthAngle:l=this.maxAzimuthAngle,rotateSpeed:u=this.rotateSpeed,enablePan:d=this.enablePan,panSpeed:f=this.panSpeed}={}){n&&(this.target=n),this.enableZoom=e,this.minZoom=t,this.maxZoom=i,this.zoomSpeed=s,this.enableRotate=r,this.minPolarAngle=a,this.maxPolarAngle=o,this.minAzimuthAngle=h,this.maxAzimuthAngle=l,this.rotateSpeed=u,this.enablePan=d,this.panSpeed=f},"setBaseParams_fn"),rr=new WeakSet,aa=c(function(){P(this,V).addEventListener("contextmenu",G(this,Hi,pr).bind(this),!1),P(this,V).addEventListener("mousedown",G(this,Ui,ar).bind(this),!1),P(this,V).addEventListener("mousemove",G(this,Vi,hr).bind(this),!1),P(this,V).addEventListener("mouseup",G(this,Wi,ur).bind(this),!1),P(this,V).addEventListener("touchstart",G(this,Ii,or).bind(this),{passive:!1}),P(this,V).addEventListener("touchmove",G(this,Ni,lr).bind(this),{passive:!1}),P(this,V).addEventListener("touchend",G(this,ji,dr).bind(this),!1),P(this,V).addEventListener("wheel",G(this,qi,cr).bind(this),{passive:!1})},"addEvents_fn"),nr=new WeakSet,oa=c(function(){P(this,V).removeEventListener("contextmenu",G(this,Hi,pr).bind(this),!1),P(this,V).removeEventListener("mousedown",G(this,Ui,ar).bind(this),!1),P(this,V).removeEventListener("mousemove",G(this,Vi,hr).bind(this),!1),P(this,V).removeEventListener("mouseup",G(this,Wi,ur).bind(this),!1),P(this,V).removeEventListener("touchstart",G(this,Ii,or).bind(this),{passive:!1}),P(this,V).removeEventListener("touchmove",G(this,Ni,lr).bind(this),{passive:!1}),P(this,V).removeEventListener("touchend",G(this,ji,dr).bind(this),!1),P(this,V).removeEventListener("wheel",G(this,qi,cr).bind(this),{passive:!1})},"removeEvents_fn"),Ui=new WeakSet,ar=c(function(n){n.button===0&&this.enableRotate?(Ie(this,Ve,!0),P(this,ot).set(n.clientX,n.clientY)):n.button===2&&this.enablePan&&(Ie(this,ht,!0),P(this,Dt).set(n.clientX,n.clientY)),n.stopPropagation(),n.preventDefault()},"onMouseDown_fn"),Ii=new WeakSet,or=c(function(n){n.touches.length===1&&this.enableRotate&&(Ie(this,Ve,!0),P(this,ot).set(n.touches[0].pageX,n.touches[0].pageY))},"onTouchStart_fn"),Vi=new WeakSet,hr=c(function(n){P(this,Ve)&&this.enableRotate?G(this,Yi,fr).call(this,n.clientX,n.clientY):P(this,ht)&&this.enablePan&&G(this,mr,ha).call(this,n.clientX,n.clientY)},"onMouseMove_fn"),Ni=new WeakSet,lr=c(function(n){P(this,Ve)&&this.enableRotate&&G(this,Yi,fr).call(this,n.touches[0].pageX,n.touches[0].pageY)},"onTouchMove_fn"),Wi=new WeakSet,ur=c(function(n){Ie(this,Ve,!1),Ie(this,ht,!1)},"onMouseUp_fn"),ji=new WeakSet,dr=c(function(n){Ie(this,Ve,!1),Ie(this,ht,!1)},"onTouchEnd_fn"),qi=new WeakSet,cr=c(function(n){this.enableZoom&&(G(this,gr,la).call(this,n.deltaY),n.preventDefault())},"onMouseWheel_fn"),Hi=new WeakSet,pr=c(function(n){n.preventDefault()},"onContextMenu_fn"),tt=new WeakSet,ut=c(function(){const n=P(this,F).radius*Math.sin(Math.max(1e-6,P(this,F).phi));P(this,oe).x=n*Math.sin(P(this,F).theta),P(this,oe).y=P(this,F).radius*Math.cos(P(this,F).phi),P(this,oe).z=n*Math.cos(P(this,F).theta),this.camera.position.copy(this.target).add(P(this,oe))},"update_fn"),Yi=new WeakSet,fr=c(function(n,e){dt.set(n,e),ct.copy(dt).sub(P(this,ot)).multiplyScalar(this.rotateSpeed),P(this,F).theta-=2*Math.PI*ct.x/this.camera.size.height,P(this,F).phi-=2*Math.PI*ct.y/this.camera.size.height,P(this,F).theta=Math.min(this.maxAzimuthAngle,Math.max(this.minAzimuthAngle,P(this,F).theta)),P(this,F).phi=Math.min(this.maxPolarAngle,Math.max(this.minPolarAngle,P(this,F).phi)),P(this,ot).copy(dt),G(this,tt,ut).call(this)},"rotate_fn"),mr=new WeakSet,ha=c(function(n,e){dt.set(n,e),ct.copy(dt).sub(P(this,Dt)).multiplyScalar(this.panSpeed),P(this,lt).set(0),Ne.copy(this.camera.position).sub(this.target);let t=Ne.length();t*=Math.tan(this.camera.fov/2*Math.PI/180),Ne.set(this.camera.modelMatrix.elements[0],this.camera.modelMatrix.elements[1],this.camera.modelMatrix.elements[2]),Ne.multiplyScalar(-(2*ct.x*t)/this.camera.size.height),P(this,lt).add(Ne),Ne.set(this.camera.modelMatrix.elements[4],this.camera.modelMatrix.elements[5],this.camera.modelMatrix.elements[6]),Ne.multiplyScalar(2*ct.y*t/this.camera.size.height),P(this,lt).add(Ne),P(this,Dt).copy(dt),this.target.add(P(this,lt)),P(this,oe).copy(this.camera.position).sub(this.target),P(this,F).radius=P(this,oe).length(),G(this,tt,ut).call(this)},"pan_fn"),gr=new WeakSet,la=c(function(n){P(this,F).radius=Math.min(this.maxZoom,Math.max(this.minZoom+1e-6,P(this,F).radius+n*this.zoomSpeed/100)),G(this,tt,ut).call(this)},"zoom_fn");var ch=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$4"),Le=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$4"),he=c((n,e,t)=>(ch(n,e,"access private method"),t),"__privateMethod$4"),yr,ua,xr,da,Xi,vr,Gt,Ki,br,ca,wr,pa,Ji,Br,Cr,fa,Sr,ma;class ga{static{c(this,"HDRLoader")}constructor(){Le(this,yr),Le(this,xr),Le(this,Xi),Le(this,Gt),Le(this,br),Le(this,wr),Le(this,Ji),Le(this,Cr),Le(this,Sr)}async loadFromUrl(e){const t=await(await fetch(e)).arrayBuffer();return he(this,yr,ua).call(this,new DataView(t))}}yr=new WeakSet,ua=c(function(n){const e={data:n,offset:0},t=he(this,xr,da).call(this,e);return{width:t.width,height:t.height,exposure:t.exposure,gamma:t.gamma,data:he(this,br,ca).call(this,e,t)}},"decodeRGBE_fn"),xr=new WeakSet,da=c(function(n){let e=he(this,Gt,Ki).call(this,n);const t={colorCorr:[1,1,1],exposure:1,gamma:1,width:0,height:0,flipX:!1,flipY:!1};if(e!=="#?RADIANCE"&&e!=="#?RGBE")throw new Error("Incorrect file format!");for(;e!=="";){e=he(this,Gt,Ki).call(this,n);const s=e.split("=");switch(s[0]){case"GAMMA":t.gamma=parseFloat(s[1]);break;case"FORMAT":if(s[1]!=="32-bit_rle_rgbe"&&s[1]!=="32-bit_rle_xyze")throw new Error("Incorrect encoding format!");break;case"EXPOSURE":t.exposure=parseFloat(s[1]);break;case"COLORCORR":t.colorCorr=s[1].replace(/^\s+|\s+$/g,"").split(" ").map(r=>parseFloat(r));break}}e=he(this,Gt,Ki).call(this,n);const i=e.split(" ");return he(this,Xi,vr).call(this,i[0],parseInt(i[1]),t),he(this,Xi,vr).call(this,i[2],parseInt(i[3]),t),t},"parseHeader_fn"),Xi=new WeakSet,vr=c(function(n,e,t){switch(n){case"+X":t.width=e;break;case"-X":t.width=e,t.flipX=!0,console.warn("Flipping horizontal orientation not currently supported");break;case"-Y":t.height=e,t.flipY=!0;break;case"+Y":t.height=e;break}},"parseSize_fn"),Gt=new WeakSet,Ki=c(function(n){let e,t="";for(;(e=n.data.getUint8(n.offset++))!==10;)t+=String.fromCharCode(e);return t},"readLine_fn"),br=new WeakSet,ca=c(function(n,e){const t=n.data.getUint16(n.offset);let i;if(t===514)i=he(this,wr,pa).call(this,n,e),e.flipX&&he(this,Cr,fa).call(this,i,e),e.flipY&&he(this,Sr,ma).call(this,i,e);else throw new Error("Obsolete HDR file version!");return i},"parseData_fn"),wr=new WeakSet,pa=c(function(n,e){const{width:t,height:i,colorCorr:s}=e,r=new Float32Array(t*i*4);let a=0,{offset:o,data:h}=n;for(let l=0;l<i;++l){if(h.getUint16(o)!==514)throw new Error("Incorrect scanline start hash");if(h.getUint16(o+2)!==t)throw new Error("Scanline doesn't match picture dimension!");o+=4;const u=t*4,d=[];let f=0;for(;f<u;){let p=h.getUint8(o++);if(p>128){const m=p-128;p=h.getUint8(o++);for(let g=0;g<m;++g)d[f++]=p}else for(let m=0;m<p;++m)d[f++]=h.getUint8(o++)}for(f=0;f<t;++f){const p=d[f],m=d[f+t],g=d[f+t*2];let v=d[f+t*3];v=v?Math.pow(2,v-136):0,r[a++]=p*v*s[0],r[a++]=m*v*s[1],r[a++]=g*v*s[2],r[a++]=v}}return r},"parseNewRLE_fn"),Ji=new WeakSet,Br=c(function(n,e,t){e*=4,t*=4;for(let i=0;i<4;++i){const s=n[e+i];n[e+i]=n[t+i],n[t+i]=s}},"swap_fn"),Cr=new WeakSet,fa=c(function(n,e){const{width:t,height:i}=e,s=t>>1;for(let r=0;r<i;++r){const a=r*t;for(let o=0;o<s;++o){const h=a+o,l=a+t-1-o;he(this,Ji,Br).call(this,n,h,l)}}},"flipX_fn"),Sr=new WeakSet,ma=c(function(n,e){const{width:t,height:i}=e,s=i>>1;for(let r=0;r<s;++r){const a=r*t,o=(i-1-r)*t;for(let h=0;h<t;++h)he(this,Ji,Br).call(this,n,a+h,o+h)}},"flipY_fn");const ya=`
fn radicalInverse_VdC(inputBits: u32) -> f32 {
  var bits: u32 = inputBits;
  bits = (bits << 16u) | (bits >> 16u);
  bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
  bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
  bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
  bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
  return f32(bits) * 2.3283064365386963e-10; // / 0x100000000
}

// hammersley2d describes a sequence of points in the 2d unit square [0,1)^2
// that can be used for quasi Monte Carlo integration
fn hammersley2d(i: u32, N: u32) -> vec2f {
  return vec2(f32(i) / f32(N), radicalInverse_VdC(i));
}
`,xa=`
// TBN generates a tangent bitangent normal coordinate frame from the normal
// (the normal must be normalized)
fn generateTBN(normal: vec3f) -> mat3x3f {
  var bitangent: vec3f = vec3(0.0, 1.0, 0.0);

  let NdotUp: f32 = dot(normal, vec3(0.0, 1.0, 0.0));
  
  if (1.0 - abs(NdotUp) <= EPSILON) {
    // Sampling +Y or -Y, so we need a more robust bitangent.
    if (NdotUp > 0.0) {
      bitangent = vec3(0.0, 0.0, 1.0);
    }
    else {
      bitangent = vec3(0.0, 0.0, -1.0);
    }
  }

  let tangent: vec3f = normalize(cross(bitangent, normal));
  bitangent = cross(normal, tangent);

  return mat3x3f(tangent, bitangent, normal);
}
`,ph=`
${_e}
${Qe}
${ya}
${xa}
${jn}

// GGX microfacet distribution
struct MicrofacetDistributionSample {
  pdf: f32,
  cosTheta: f32,
  sinTheta: f32,
  phi: f32
};

// https://www.cs.cornell.edu/~srm/publications/EGSR07-btdf.html
// This implementation is based on https://bruop.github.io/ibl/,
//  https://www.tobias-franke.eu/log/2014/03/30/notes_on_importance_sampling.html
// and https://developer.nvidia.com/gpugems/GPUGems3/gpugems3_ch20.html
fn GGX(xi: vec2f, roughness: f32) -> MicrofacetDistributionSample {
  var ggx: MicrofacetDistributionSample;

  // evaluate sampling equations
  let alpha: f32 = roughness * roughness;
  ggx.cosTheta = clamp(sqrt((1.0 - xi.y) / (1.0 + (alpha * alpha - 1.0) * xi.y)), 0.0, 1.0);
  ggx.sinTheta = sqrt(1.0 - ggx.cosTheta * ggx.cosTheta);
  ggx.phi = 2.0 * PI * xi.x;

  // evaluate GGX pdf (for half vector)
  ggx.pdf = DistributionGGX(ggx.cosTheta, alpha);

  // Apply the Jacobian to obtain a pdf that is parameterized by l
  // see https://bruop.github.io/ibl/
  // Typically you'd have the following:
  // float pdf = DistributionGGX(NoH, roughness) * NoH / (4.0 * VoH);
  // but since V = N => VoH == NoH
  ggx.pdf /= 4.0;

  return ggx;
}

fn Lambertian(xi: vec2f, roughness: f32) -> MicrofacetDistributionSample {
    var lambertian: MicrofacetDistributionSample;

  // Cosine weighted hemisphere sampling
  // http://www.pbr-book.org/3ed-2018/Monte_Carlo_Integration/2D_Sampling_with_Multidimensional_Transformations.html#Cosine-WeightedHemisphereSampling
  lambertian.cosTheta = sqrt(1.0 - xi.y);
  lambertian.sinTheta = sqrt(xi.y); // equivalent to \`sqrt(1.0 - cosTheta*cosTheta)\`;
  lambertian.phi = 2.0 * PI * xi.x;

  lambertian.pdf = lambertian.cosTheta / PI; // evaluation for solid angle, therefore drop the sinTheta

  return lambertian;
}

// getImportanceSample returns an importance sample direction with pdf in the .w component
fn getImportanceSample(Xi: vec2<f32>, N: vec3f, roughness: f32) -> vec4f {
  var importanceSample: MicrofacetDistributionSample;
  
  importanceSample = GGX(Xi, roughness);
  
   // transform the hemisphere sample to the normal coordinate frame
  // i.e. rotate the hemisphere to the normal direction
  let localSpaceDirection: vec3f = normalize(vec3(
    importanceSample.sinTheta * cos(importanceSample.phi), 
    importanceSample.sinTheta * sin(importanceSample.phi), 
    importanceSample.cosTheta
  ));
  
  let TBN: mat3x3f = generateTBN(N);
  let direction: vec3f = TBN * localSpaceDirection;

  return vec4(direction, importanceSample.pdf);
}

@compute @workgroup_size(16, 16, 1)
fn main(@builtin(global_invocation_id) global_id : vec3<u32>) {  
  let texelSize: vec2<u32> = textureDimensions(lutStorageTexture);

  let x: u32 = global_id.x;
  let y: u32 = global_id.y;

  // Check bounds
  if (x >= texelSize.x || y >= texelSize.y) {
     return;
  }
  
  let epsilon: f32 = 1e-6;

  // Compute roughness and N\xB7V from texture coordinates
  let NdotV: f32 = max(f32(x) / f32(texelSize.x - 1), epsilon);    // Maps x-axis to N\xB7V (0.0 to 1.0)
  let roughness: f32 = max(f32(y) / f32(texelSize.y - 1), epsilon);  // Maps y-axis to roughness (0.0 to 1.0)

  // Calculate view vector and normal vector
  let V: vec3<f32> = vec3<f32>(sqrt(1.0 - NdotV * NdotV), 0.0, NdotV);  // Normalized view vector
  let N: vec3<f32> = vec3<f32>(0.0, 0.0, 1.0);                          // Normal is along z-axis

  // Initialize integration variables
  var A: f32 = 0.0;
  var B: f32 = 0.0;
  var C: f32 = 0.0;

  // Monte Carlo integration to calculate A and B factors
  let sampleCount: u32 = params.sampleCount;
  for (var i: u32 = 0; i < sampleCount; i++) {
    let Xi: vec2<f32> = hammersley2d(i, sampleCount);  // Importance sampling (Hammersley sequence)
    
    //let H: vec3<f32> = importanceSampleGGX(Xi, N, roughness);
    let importanceSample: vec4f = getImportanceSample(Xi, N, roughness);
    let H: vec3f = importanceSample.xyz;
    // let pdf: f32 = importanceSample.w;
    
    let L: vec3<f32> = normalize(reflect(-V, H));
    
    let NdotL: f32 = clamp(L.z, 0.0, 1.0);
    let NdotH: f32 = clamp(H.z, 0.0, 1.0);
    let VdotH: f32 = clamp(dot(V, H), 0.0, 1.0);

    // Ensure valid light direction
    if (NdotL > 0.0) {     
      // LUT for GGX distribution.

      // Taken from: https://bruop.github.io/ibl
      // Shadertoy: https://www.shadertoy.com/view/3lXXDB
      // Terms besides V are from the GGX PDF we're dividing by.
      let V_pdf: f32 = GeometrySmith(NdotV, NdotL, roughness) * VdotH * NdotL / max(NdotH, epsilon);
      let Fc: f32 = pow(1.0 - VdotH, 5.0);
      A += (1.0 - Fc) * V_pdf;
      B += Fc * V_pdf;
      C += 0.0;
    }
  }

  // Average the integration result
  // The PDF is simply pdf(v, h) -> NDF * <nh>.
  // To parametrize the PDF over l, use the Jacobian transform, yielding to: pdf(v, l) -> NDF * <nh> / 4<vh>
  // Since the BRDF divide through the PDF to be normalized, the 4 can be pulled out of the integral.
  A = A * 4.0 / f32(sampleCount);
  B = B * 4.0 / f32(sampleCount);
  C = C * 4.0 * 2.0 * PI / f32(sampleCount);
    
  // Store the result in the LUT texture
  textureStore(lutStorageTexture, vec2<u32>(x, y), vec4<f32>(A, B, C, 1.0));
}
`,fh=`
${_e}

// Cube face lookup vectors
// positive and negative Y need to be inverted
const faceVectors = array<array<vec3<f32>, 2>, 6>(
  array<vec3<f32>, 2>(vec3<f32>(1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0)), // +X
  array<vec3<f32>, 2>(vec3<f32>(-1.0, 0.0, 0.0), vec3<f32>(0.0, 1.0, 0.0)), // -X
  array<vec3<f32>, 2>(vec3<f32>(0.0, -1.0, 0.0), vec3<f32>(0.0, 0.0, 1.0)),  // -Y
  array<vec3<f32>, 2>(vec3<f32>(0.0, 1.0, 0.0), vec3<f32>(0.0, 0.0, -1.0)), // +Y
  array<vec3<f32>, 2>(vec3<f32>(0.0, 0.0, 1.0), vec3<f32>(0.0, 1.0, 0.0)), // +Z
  array<vec3<f32>, 2>(vec3<f32>(0.0, 0.0, -1.0), vec3<f32>(0.0, 1.0, 0.0)) // -Z
);

// Utility to calculate 3D direction for a given cube face pixel
fn texelDirection(faceIndex : u32, u : f32, v : f32) -> vec3<f32> {
  let forward = faceVectors[faceIndex][0];
  let up = faceVectors[faceIndex][1];
  let right = normalize(cross(up, forward));
  return normalize(forward + (2.0 * u - 1.0) * right + (2.0 * v - 1.0) * up);
}

// Map 3D direction to equirectangular coordinates
fn dirToEquirect(dir : vec3<f32>) -> vec2<f32> {
  let phi = atan2(dir.z, dir.x);
  let theta = asin(dir.y);
  let u = 0.5 + 0.5 * phi / PI;
  let v = 0.5 - theta / PI;
  return vec2<f32>(u, v);
}

@compute @workgroup_size(8, 8, 1)
fn main(@builtin(global_invocation_id) global_id : vec3<u32>) {
  let faceSize = params.faceSize;
  let cubeFaceIndex = global_id.z;
  let x = global_id.x;
  let y = global_id.y;

  if (x >= faceSize || y >= faceSize || cubeFaceIndex >= 6u) {
    return;
  }

  let u = f32(x) / f32(faceSize);
  let v = f32(y) / f32(faceSize);

  // Get the 3D direction for this cube face texel
  let dir = texelDirection(cubeFaceIndex, u, v);

  // Map to equirectangular coordinates
  let uv = dirToEquirect(dir);        
  
  let hdrWidth = params.imageSize.x;
  let hdrHeight = params.imageSize.y;

  let texX = u32(clamp(uv.x * hdrWidth, 0.0, hdrWidth - 1.0));
  let texY = u32(clamp(uv.y * hdrHeight, 0.0, hdrHeight - 1.0));

  let hdrTexelIndex = texY * u32(hdrWidth) + texX;
  
  // Sample the equirectangular texture
  let sampledColor = params.hdrImageData[hdrTexelIndex];
  
  // Correct cube face order in texture store (fix for reversed face indices)
  textureStore(
    specularStorageCubemap,
    vec2<u32>(x, y),
    cubeFaceIndex,
    sampledColor
  );
}
`,mh=c(n=>`
${_e}
${ya}
${xa}

// Mipmap Filtered Samples (GPU Gems 3, 20.4)
// https://developer.nvidia.com/gpugems/gpugems3/part-iii-rendering/chapter-20-gpu-based-importance-sampling
// https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf
fn computeLod(pdf: f32) -> f32 {
  // https://cgg.mff.cuni.cz/~jaroslav/papers/2007-sketch-fis/Final_sap_0073.pdf
  return 0.5 * log2( 6.0 * f32(params.faceSize) * f32(params.faceSize) / (f32(params.sampleCount) * pdf));
}

fn transformDirection(face: u32, uv: vec2f) -> vec3f {
  // Transform the direction based on the cubemap face
  switch (face) {
    case 0u {
      // +X
      return vec3f( 1.0,  uv.y, -uv.x);
    }
    case 1u {
      // -X
      return vec3f(-1.0,  uv.y,  uv.x);
    }
    case 2u {
      // +Y
      return vec3f( uv.x,  -1.0, uv.y);
    }
    case 3u {
      // -Y
      return vec3f( uv.x, 1.0,  -uv.y);
    }
    case 4u {
      // +Z
      return vec3f( uv.x,  uv.y,  1.0);
    }
    case 5u {
      // -Z
      return vec3f(-uv.x,  uv.y, -1.0);
    }
    default {
      return vec3f(0.0, 0.0, 0.0);
    }
  }
}

@compute @workgroup_size(8, 8, 1) fn main(
  @builtin(global_invocation_id) GlobalInvocationID: vec3u,
) {
  let faceSize: u32 = params.faceSize;
  let sampleCount: u32 = params.sampleCount;
  
  let face: u32 = GlobalInvocationID.z;
  let x: u32 = GlobalInvocationID.x;
  let y: u32 = GlobalInvocationID.y;

  if (x >= faceSize || y >= faceSize) {
    return;
  }

  let texelSize: f32 = 1.0 / f32(faceSize);
  let halfTexel: f32 = texelSize * 0.5;
  
  var uv: vec2f = vec2(
    (f32(x) + halfTexel) * texelSize,
    (f32(y) + halfTexel) * texelSize
  );
  
  uv = uv * 2.0 - 1.0;

  let normal: vec3<f32> = transformDirection(face, uv);
  
  var irradiance: vec3f = vec3f(0.0, 0.0, 0.0);

  for (var i: u32 = 0; i < sampleCount; i++) {
    // generate a quasi monte carlo point in the unit square [0.1)^2
    let xi: vec2f = hammersley2d(i, sampleCount);
    
    let cosTheta: f32 = sqrt(1.0 - xi.y);
    let sinTheta: f32 = sqrt(1.0 - cosTheta * cosTheta);
    let phi: f32 = 2.0 * PI * xi.x;
    let pdf: f32 = cosTheta / PI; // evaluation for solid angle, therefore drop the sinTheta

    let sampleVec: vec3f = vec3f(
      sinTheta * cos(phi),
      sinTheta * sin(phi),
      cosTheta
    );
    
    let TBN: mat3x3f = generateTBN(normalize(normal));
    
    var direction: vec3f = TBN * sampleVec;
    
    // invert along Y axis
    direction.y *= -1.0;
    
    let lod: f32 = computeLod(pdf);
    
    let sampleLevel = min(lod, f32(params.maxMipLevel));

    // Convert sampleVec to texture coordinates of the specular env map
    irradiance += textureSampleLevel(
      ${n.options.name},
      clampSampler,
      direction,
      sampleLevel
    ).rgb;
  }

  irradiance /= f32(sampleCount);

  textureStore(diffuseEnvMap, vec2(x, y), face, vec4f(irradiance, 1.0));
}
`,"computeDiffuseFromSpecularCubemap");var Mr=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$3"),Ft=c((n,e,t)=>(Mr(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$3"),va=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$3"),gh=c((n,e,t,i)=>(Mr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$3"),Tr=c((n,e,t)=>(Mr(n,e,"access private method"),t),"__privateMethod$3"),We,$t,Zi;class yh{static{c(this,"EnvironmentMap")}constructor(e,t={}){va(this,$t),va(this,We,void 0),e=$(e,"EnvironmentMap"),this.renderer=e,t={lutTextureParams:{size:256,computeSampleCount:1024,label:"Environment LUT texture",name:"lutTexture",format:"rgba32float"},diffuseTextureParams:{size:128,computeSampleCount:2048,label:"Environment diffuse texture",name:"envDiffuseTexture",format:"rgba16float"},specularTextureParams:{label:"Environment specular texture",name:"envSpecularTexture",format:"rgba16float",generateMips:!0},diffuseIntensity:1,specularIntensity:1,...t},this.options=t,this.sampler=new Ke(this.renderer,{label:"Clamp sampler",name:"clampSampler",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear",addressModeU:"clamp-to-edge",addressModeV:"clamp-to-edge"}),this.rotation=new Be(new Float32Array([0,0,1,0,1,0,-1,0,0])),this.hdrLoader=new ga,this.computeBRDFLUTTexture()}async computeBRDFLUTTexture(){const{size:e,computeSampleCount:t,...i}=this.options.lutTextureParams;gh(this,We,new j(this.renderer,{label:"LUT storage texture",name:"lutStorageTexture",format:i.format,visibility:["compute","fragment"],usage:["copySrc","storageBinding","textureBinding"],type:"storage",fixedSize:{width:e,height:e},autoDestroy:!1})),this.lutTexture=new j(this.renderer,{...i,visibility:["fragment"],fixedSize:{width:e,height:e},autoDestroy:!1,fromTexture:Ft(this,We)});let s=new ui(this.renderer,{label:"Compute LUT texture",autoRender:!1,dispatchSize:[Math.ceil(Ft(this,We).size.width/16),Math.ceil(Ft(this,We).size.height/16),1],shaders:{compute:{code:ph}},uniforms:{params:{struct:{sampleCount:{type:"u32",value:t}}}},textures:[Ft(this,We)]});await s.material.compileMaterial(),Tr(this,$t,Zi).call(this,{computePass:s,label:"Compute LUT texture command encoder"}),s.destroy(),s=null}async computeSpecularCubemapFromHDRData(e){let t=new j(this.renderer,{label:"Specular storage cubemap",name:"specularStorageCubemap",format:this.specularTexture.options.format,visibility:["compute"],usage:["copySrc","storageBinding"],type:"storage",fixedSize:{width:this.specularTexture.size.width,height:this.specularTexture.size.height,depth:6},viewDimension:"2d-array"}),i=new ui(this.renderer,{label:"Compute specular cubemap from equirectangular",autoRender:!1,dispatchSize:[Math.ceil(this.specularTexture.size.width/8),Math.ceil(this.specularTexture.size.height/8),6],shaders:{compute:{code:fh}},storages:{params:{struct:{hdrImageData:{type:"array<vec4f>",value:e.data},imageSize:{type:"vec2f",value:new z(e.width,e.height)},faceSize:{type:"u32",value:this.specularTexture.size.width}}}},textures:[t]});await i.material.compileMaterial(),Tr(this,$t,Zi).call(this,{computePass:i,label:"Compute specular cube map command encoder",onAfterCompute:s=>{this.renderer.copyGPUTextureToTexture(t.texture,this.specularTexture,s)}}),i.destroy(),t.destroy(),t=null,i=null}async computeDiffuseFromSpecular(){if(this.specularTexture.options.viewDimension!=="cube"){L("Could not compute the diffuse texture because the specular texture is not a cube map:"+this.specularTexture.options.viewDimension);return}let e=new j(this.renderer,{label:"Diffuse storage cubemap",name:"diffuseEnvMap",format:this.diffuseTexture.options.format,visibility:["compute"],usage:["copySrc","storageBinding"],type:"storage",fixedSize:{width:this.diffuseTexture.size.width,height:this.diffuseTexture.size.height,depth:6},viewDimension:"2d-array"}),t=new ui(this.renderer,{label:"Compute diffuse map from specular map",autoRender:!1,dispatchSize:[Math.ceil(this.diffuseTexture.size.width/8),Math.ceil(this.diffuseTexture.size.height/8),6],shaders:{compute:{code:mh(this.specularTexture)}},uniforms:{params:{struct:{faceSize:{type:"u32",value:this.diffuseTexture.size.width},maxMipLevel:{type:"u32",value:this.specularTexture.texture.mipLevelCount},sampleCount:{type:"u32",value:this.options.diffuseTextureParams.computeSampleCount}}}},samplers:[this.sampler],textures:[this.specularTexture,e]});await t.material.compileMaterial(),Tr(this,$t,Zi).call(this,{computePass:t,label:"Compute diffuse cube map from specular cube map command encoder",onAfterCompute:i=>{this.renderer.copyGPUTextureToTexture(e.texture,this.diffuseTexture,i)}}),t.destroy(),e.destroy(),e=null,t=null}async loadAndComputeFromHDR(e){const t=await this.hdrLoader.loadFromUrl(e),{width:i,height:s}=t||{width:1024,height:512},r=Math.max(i/4,s/2),a={viewDimension:"cube",autoDestroy:!1};this.specularTexture?(this.specularTexture.size.width!==r||this.specularTexture.size.height!==r)&&(this.specularTexture.options.fixedSize.width=r,this.specularTexture.options.fixedSize.height=r,this.specularTexture.size.width=r,this.specularTexture.size.height=r,this.specularTexture.createTexture()):this.specularTexture=new j(this.renderer,{...this.options.specularTextureParams,visibility:["fragment","compute"],fixedSize:{width:r,height:r},...a});const{size:o,computeSampleCount:h,...l}=this.options.diffuseTextureParams,u=Math.min(o,r);this.diffuseTexture?(this.diffuseTexture.size.width!==u||this.diffuseTexture.size.height!==u)&&(this.diffuseTexture.options.fixedSize.width=u,this.diffuseTexture.options.fixedSize.height=u,this.diffuseTexture.size.width=u,this.diffuseTexture.size.height=u,this.diffuseTexture.createTexture()):this.diffuseTexture=new j(this.renderer,{...l,visibility:["fragment"],fixedSize:{width:u,height:u},...a}),t&&this.computeSpecularCubemapFromHDRData(t).then(()=>{this.computeDiffuseFromSpecular()})}destroy(){this.lutTexture?.destroy(),this.diffuseTexture?.destroy(),this.specularTexture?.destroy(),Ft(this,We).destroy()}}We=new WeakMap,$t=new WeakSet,Zi=c(function({computePass:n,label:e="",onAfterCompute:t=c(i=>{},"onAfterCompute")}){const i=this.renderer.device?.createCommandEncoder({label:e});!this.renderer.production&&i.pushDebugGroup(e),this.renderer.renderSingleComputePass(i,n,!1),t(i),!this.renderer.production&&i.popDebugGroup();const s=i.finish();this.renderer.device?.queue.submit([s]),this.renderer.pipelineManager.resetCurrentPipeline()},"runComputePass_fn");class xh extends Ct{static{c(this,"BoxGeometry")}constructor({instancesCount:e=1,vertexBuffers:t=[],topology:i,mapBuffersAtCreation:s=!0,widthSegments:r=1,heightSegments:a=1,depthSegments:o=1}={}){super({verticesOrder:"ccw",topology:i,instancesCount:e,vertexBuffers:t,mapBuffersAtCreation:s}),this.type="BoxGeometry",r=Math.floor(r),a=Math.floor(a),o=Math.floor(o);const h=[],l=[],u=[],d=[];let f=0;const p=c((m,g,v,x,w,T,b,B,M,S)=>{const _=T/M,E=b/S,A=T/2,H=b/2,ve=B/2,ee=M+1,be=S+1;let ue=0;const U=new y;for(let N=0;N<be;N++){const Y=N*E-H;for(let K=0;K<ee;K++){const ie=K*_-A;U[m]=ie*x,U[g]=Y*w,U[v]=ve,h.push(U.x,U.y,U.z),U[m]=0,U[g]=0,U[v]=B>0?1:-1,u.push(U.x,U.y,U.z),l.push(K/M),l.push(N/S),ue+=1}}for(let N=0;N<S;N++)for(let Y=0;Y<M;Y++){const K=f+Y+ee*N,ie=f+Y+ee*(N+1),de=f+(Y+1)+ee*(N+1),ss=f+(Y+1)+ee*N;d.push(K,ie,ss),d.push(ie,de,ss),f+=ue}},"buildPlane");p("z","y","x",-1,-1,2,2,2,o,a),p("z","y","x",1,-1,2,2,-2,o,a),p("x","z","y",1,1,2,2,2,r,o),p("x","z","y",1,-1,2,2,-2,r,o),p("x","y","z",1,-1,2,2,2,r,a),p("x","y","z",-1,-1,2,2,-2,r,a),this.setAttribute({name:"position",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(h)}),this.setAttribute({name:"uv",type:"vec2f",bufferFormat:"float32x2",size:2,array:new Float32Array(l)}),this.setAttribute({name:"normal",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(u)}),this.setIndexBuffer({array:this.useUint16IndexArray?new Uint16Array(d):new Uint32Array(d),bufferFormat:this.useUint16IndexArray?"uint16":"uint32"})}}class vh extends Ct{static{c(this,"SphereGeometry")}constructor({topology:e,instancesCount:t=1,vertexBuffers:i=[],mapBuffersAtCreation:s=!0,widthSegments:r=32,heightSegments:a=16,phiStart:o=0,phiLength:h=Math.PI*2,thetaStart:l=0,thetaLength:u=Math.PI}={}){super({verticesOrder:"ccw",topology:e,instancesCount:t,vertexBuffers:i,mapBuffersAtCreation:s}),this.type="SphereGeometry",r=Math.max(3,Math.floor(r)),a=Math.max(2,Math.floor(a));const d=1,f=Math.min(l+u,Math.PI);let p=0;const m=[],g=new y,v=new y,x=[],w=[],T=[],b=[];for(let B=0;B<=a;B++){const M=[],S=B/a;let _=0;B===0&&l===0?_=.5/r:B===a&&f===Math.PI&&(_=-.5/r);for(let E=0;E<=r;E++){const A=E/r;g.x=-d*Math.cos(o+A*h)*Math.sin(l+S*u),g.y=d*Math.cos(l+S*u),g.z=d*Math.sin(o+A*h)*Math.sin(l+S*u),w.push(g.x,g.y,g.z),v.copy(g).normalize(),T.push(v.x,v.y,v.z),b.push(A+_,S),M.push(p++)}m.push(M)}for(let B=0;B<a;B++)for(let M=0;M<r;M++){const S=m[B][M+1],_=m[B][M],E=m[B+1][M],A=m[B+1][M+1];(B!==0||l>0)&&x.push(S,_,A),(B!==a-1||f<Math.PI)&&x.push(_,E,A)}this.setAttribute({name:"position",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(w)}),this.setAttribute({name:"uv",type:"vec2f",bufferFormat:"float32x2",size:2,array:new Float32Array(b)}),this.setAttribute({name:"normal",type:"vec3f",bufferFormat:"float32x3",size:3,array:new Float32Array(T)}),this.setIndexBuffer({array:this.useUint16IndexArray?new Uint16Array(x):new Uint32Array(x),bufferFormat:this.useUint16IndexArray?"uint16":"uint32"})}}class bh extends As{static{c(this,"LitMesh")}constructor(e,t={}){e=Fe(e,"LitMesh");const{material:i,...s}=t,{shading:r,vertexChunks:a,fragmentChunks:o,toneMapping:h,color:l,opacity:u,alphaCutoff:d,metallic:f,roughness:p,normalScale:m,occlusionIntensity:g,emissiveIntensity:v,emissiveColor:x,specularIntensity:w,specularColor:T,shininess:b,transmission:B,ior:M,dispersion:S,thickness:_,attenuationDistance:E,attenuationColor:A,baseColorTexture:H,normalTexture:ve,emissiveTexture:ee,occlusionTexture:be,metallicRoughnessTexture:ue,specularTexture:U,specularFactorTexture:N,specularColorTexture:Y,transmissionTexture:K,thicknessTexture:ie,environmentMap:de}=i,ss=Js({bindings:s.bindings,geometry:s.geometry,chunks:a}),Ta={color:{type:"vec3f",value:l!==void 0?l:new y(1)},opacity:{type:"f32",value:u!==void 0?u:1},alphaCutoff:{type:"f32",value:d!==void 0?d:.5}},Pa={...Ta,normalScale:{type:"vec2f",value:m!==void 0?m:new z(1)},occlusionIntensity:{type:"f32",value:g!==void 0?g:1},emissiveIntensity:{type:"f32",value:v!==void 0?v:1},emissiveColor:{type:"vec3f",value:x!==void 0?x:new y}},Ra={...Pa,specularIntensity:{type:"f32",value:w!==void 0?w:1},specularColor:{type:"vec3f",value:T!==void 0?T:new y(1)}},_h={...Ra,shininess:{type:"f32",value:b!==void 0?b:30}},Ah={...Ra,metallic:{type:"f32",value:f!==void 0?f:1},roughness:{type:"f32",value:p!==void 0?p:1},transmission:{type:"f32",value:B!==void 0?B:0},ior:{type:"f32",value:M!==void 0?M:1.5},dispersion:{type:"f32",value:S!==void 0?S:0},thickness:{type:"f32",value:_!==void 0?_:0},attenuationDistance:{type:"f32",value:E!==void 0?E:1/0},attenuationColor:{type:"vec3f",value:A!==void 0?A:new y(1)}},Lh=(()=>{switch(r){case"Unlit":return Ta;case"Lambert":return Pa;case"Phong":return _h;case"PBR":default:return Ah}})(),$r={visibility:["fragment"],struct:Lh};s.uniforms?s.uniforms={...s.uniforms,material:$r}:s.uniforms={material:$r},s.textures||(s.textures=[]),s.samplers||(s.samplers=[]);const Ea=[H],za=[...Ea,ve,ee,be],_a=[...za,ue,U,N,Y],Dh=[..._a,K,ie];(()=>{switch(r){case"Unlit":return Ea;case"Lambert":return za;case"Phong":return _a;case"PBR":default:return Dh}})().filter(Boolean).forEach(rs=>{rs.sampler&&(s.samplers.find(Oh=>Oh.uuid===rs.sampler.uuid)||s.samplers.push(rs.sampler)),s.textures.push(rs.texture)}),de&&(r==="PBR"||!r)&&(s.textures||(s.textures=[]),s.textures=[...s.textures,de.lutTexture,de.diffuseTexture,de.specularTexture],s.samplers||(s.samplers=[]),s.samplers=[...s.samplers,de.sampler]);let Aa=null;t.transmissive&&(e.createTransmissionTarget(),Aa={texture:e.transmissionTarget.texture,sampler:e.transmissionTarget.sampler});const La=[];S&&La.push("KHR_materials_dispersion");const Gh=s.geometry&&s.geometry.getAttributeByName("normal");s.geometry&&!Gh&&s.geometry.computeGeometry();const Fh=er({shadingModel:r,chunks:o,extensionsUsed:La,receiveShadows:s.receiveShadows,toneMapping:h,geometry:s.geometry,materialUniform:$r,baseColorTexture:H,normalTexture:ve,metallicRoughnessTexture:ue,specularTexture:U,specularFactorTexture:N,specularColorTexture:Y,transmissionTexture:K,thicknessTexture:ie,emissiveTexture:ee,occlusionTexture:be,transmissionBackgroundTexture:Aa,environmentMap:de}),$h={vertex:{code:ss,entryPoint:"main"},fragment:{code:Fh,entryPoint:"main"}};super(e,{...s,shaders:$h})}}class wh extends zs{static{c(this,"PingPongPlane")}constructor(e,t={}){e=$(e,t.label?t.label+" PingPongPlane":"PingPongPlane");const i=t.targets&&t.targets.length&&t.targets.map(s=>({targetFormat:s.format}));t.outputTarget=new vs(e,{label:t.label?t.label+" render target":"Ping Pong render target",useDepth:!1,...i&&{colorAttachments:i}}),t.transparent=!1,t.depth=!1,t.label=t.label??"PingPongPlane "+e.pingPongPlanes?.length,super(e,t),this.type="PingPongPlane",this.createTexture({label:t.label?`${t.label} render texture`:"PingPongPlane render texture",name:"renderTexture",...t.targets&&t.targets.length&&{format:t.targets[0].format},usage:["copyDst","textureBinding"]})}get renderTexture(){return this.textures.find(e=>e.options.name==="renderTexture")}addToScene(e=!1){e&&this.renderer.pingPongPlanes.push(this),this.autoRender&&this.renderer.scene.addPingPongPlane(this)}removeFromScene(e=!1){this.outputTarget&&this.outputTarget.destroy(),this.autoRender&&this.renderer.scene.removePingPongPlane(this),e&&(this.renderer.pingPongPlanes=this.renderer.pingPongPlanes.filter(t=>t.uuid!==this.uuid))}}var Pr=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$2"),R=c((n,e,t)=>(Pr(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$2"),le=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$2"),ye=c((n,e,t,i)=>(Pr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$2"),Bh=c((n,e,t)=>(Pr(n,e,"access private method"),t),"__privateMethod$2"),Ce,De,pt,ft,Se,Me,Ot,kt,Ut,It,Vt,Nt,Rr,ba;class Ch{static{c(this,"Raycaster")}constructor(e){le(this,Rr),le(this,Ce,void 0),le(this,De,void 0),le(this,pt,void 0),le(this,ft,void 0),le(this,Se,void 0),le(this,Me,void 0),le(this,Ot,void 0),le(this,kt,void 0),le(this,Ut,void 0),le(this,It,void 0),le(this,Vt,void 0),le(this,Nt,void 0),this.type="Raycaster",e=Fe(e,this.type),this.renderer=e,this.camera=this.renderer.camera,this.pointer=new z(1/0),this.ray={origin:new y,direction:new y},ye(this,Ce,{origin:this.ray.origin.clone(),direction:this.ray.direction.clone()}),ye(this,De,new y),ye(this,pt,new y),ye(this,ft,new y),ye(this,Se,new y),ye(this,Me,new y),ye(this,Ot,new z),ye(this,kt,new z),ye(this,Ut,new z),ye(this,It,new y),ye(this,Vt,new y),ye(this,Nt,new y)}setFromMouse(e){const{clientX:t,clientY:i}=e.targetTouches&&e.targetTouches.length?e.targetTouches[0]:e;this.setFromNDCCoords((t-this.renderer.boundingRect.left)/this.renderer.boundingRect.width*2-1,-((i-this.renderer.boundingRect.top)/this.renderer.boundingRect.height)*2+1)}setFromNDCCoords(e=0,t=0){this.pointer.set(e,t),this.setRay()}setRay(){this.camera.worldMatrix.getTranslation(this.ray.origin),this.ray.direction.set(this.pointer.x,this.pointer.y,-1).unproject(this.camera).sub(this.ray.origin).normalize()}rayIntersectsTriangle(e){const i=new y,s=new y;i.crossVectors(R(this,Ce).direction,R(this,Me));const r=R(this,Se).dot(i);if(Math.abs(r)<1e-6)return!1;const a=1/r,o=R(this,Ce).origin.clone().sub(R(this,De)),h=a*o.dot(i);if(h<0||h>1)return!1;s.crossVectors(o,R(this,Se));const l=a*R(this,Ce).direction.dot(s);if(l<0||h+l>1)return!1;const u=a*R(this,Me).dot(s);return u>1e-6?(e.copy(R(this,Ce).origin).add(R(this,Ce).direction.clone().multiplyScalar(u)),!0):!1}getBarycentricCoordinates(e){const t=e.clone().sub(R(this,De)),i=R(this,Se).dot(R(this,Se)),s=R(this,Se).dot(R(this,Me)),r=R(this,Me).dot(R(this,Me)),a=t.dot(R(this,Se)),o=t.dot(R(this,Me)),h=i*r-s*s,l=new y(0,(r*a-s*o)/h,(i*o-s*a)/h);return l.x=1-l.y-l.z,l}getTriangleNormal(){return new y().crossVectors(R(this,Se),R(this,Me)).normalize()}setAttributeVectorAtIndex(e,t,i,s,r){const a=i?i[e*3+t]:e*3+t;r.x=s.array[a*s.size],r.y=s.array[a*s.size+1],"z"in r&&(r.z=s.array[a*s.size+2])}intersectObject(e,t=!0,i=[]){if(!(e instanceof pe))return this.renderer.production||L(`${this.type}: object to test intersection again is not of type Object3D`),i;const s=Fa(e);return s&&Bh(this,Rr,ba).call(this,s,i),t&&e.children.forEach(r=>{this.intersectObject(r,t,i)}),i.length&&i.sort((r,a)=>this.ray.origin.distance(r.point)-this.ray.origin.distance(a.point)),i}intersectObjects(e,t=!0,i=[]){return e.forEach(s=>{this.intersectObject(s,t,i)}),i.length&&i.sort((s,r)=>this.ray.origin.distance(s.point)-this.ray.origin.distance(r.point)),i}}Ce=new WeakMap,De=new WeakMap,pt=new WeakMap,ft=new WeakMap,Se=new WeakMap,Me=new WeakMap,Ot=new WeakMap,kt=new WeakMap,Ut=new WeakMap,It=new WeakMap,Vt=new WeakMap,Nt=new WeakMap,Rr=new WeakSet,ba=c(function(n,e=[]){if(!n.geometry)return e;const t=n.geometry.getAttributeByName("position");if(!t)return this.renderer.production||L(`Raycaster: can't raycast on a mesh that has no position attribute: ${n.options.label}`),e;if(!t.array)return this.renderer.production||L(`Raycaster: can't raycast on a mesh that has no position attribute array: ${n.options.label}`),e;if(n.frustumCulling&&n.domFrustum){const{clipSpaceBoundingRect:h}=n.domFrustum;if(n.domFrustum.isIntersecting){if(this.pointer.x>h.left+h.width||this.pointer.x<h.left||this.pointer.y>h.top||this.pointer.y<h.top-h.height)return e}else return e}const i=n.worldMatrix.getInverse();R(this,Ce).origin.copy(this.ray.origin).applyMat4(i),R(this,Ce).direction.copy(this.ray.direction).transformDirection(i);const s=n.geometry.getAttributeByName("uv"),r=n.geometry.getAttributeByName("normal"),a=n.geometry.indexBuffer?.array,o=a?a.length/3:t.array.length/9;for(let h=0;h<o;h++){if(this.setAttributeVectorAtIndex(h,0,a,t,R(this,De)),this.setAttributeVectorAtIndex(h,1,a,t,R(this,pt)),this.setAttributeVectorAtIndex(h,2,a,t,R(this,ft)),R(this,Se).copy(R(this,pt)).sub(R(this,De)),R(this,Me).copy(R(this,ft)).sub(R(this,De)),n.material.options.rendering.cullMode!=="none"){const f=this.getTriangleNormal().dot(R(this,Ce).direction);if(f>0&&n.material.options.rendering.cullMode==="back")continue;if(f<0&&n.material.options.rendering.cullMode==="front")continue}const l=new y;if(this.rayIntersectsTriangle(l)){const d=this.getBarycentricCoordinates(l),f=l.clone().applyMat4(n.worldMatrix),p=this.ray.origin.distance(f),m={object:n,distance:p,localPoint:l,point:f,triangle:[R(this,De).clone(),R(this,pt).clone(),R(this,ft).clone()],triangleIndex:h};s&&s.array&&s.array.length&&(this.setAttributeVectorAtIndex(h,0,a,s,R(this,Ot)),this.setAttributeVectorAtIndex(h,1,a,s,R(this,kt)),this.setAttributeVectorAtIndex(h,2,a,s,R(this,Ut)),m.uv=R(this,Ot).clone().multiplyScalar(d.x).add(R(this,kt).clone().multiplyScalar(d.y)).add(R(this,Ut).clone().multiplyScalar(d.z))),r&&r.array&&r.array.length&&(this.setAttributeVectorAtIndex(h,0,a,r,R(this,It)),this.setAttributeVectorAtIndex(h,1,a,r,R(this,Vt)),this.setAttributeVectorAtIndex(h,2,a,r,R(this,Nt)),m.normal=R(this,It).clone().multiplyScalar(d.x).add(R(this,Vt).clone().multiplyScalar(d.y)).add(R(this,Nt).clone().multiplyScalar(d.z))),e.push(m)}}return e},"intersectMesh_fn");const Wt=new y,mt=new re;class Er{static{c(this,"KeyframesAnimation")}constructor({label:e="",inputIndex:t=null,keyframes:i=null,values:s=null,path:r=null,interpolation:a="LINEAR"}={}){this.label=e,this.keyframes=i,this.values=s,this.path=r,this.interpolation=a,this.inputIndex=t,this.weightsBindingInputs=[],this.onAfterUpdate=null,this.duration=this.keyframes?this.keyframes[this.keyframes.length-1]:0}addWeightBindingInput(e){this.weightsBindingInputs.push(e)}getCubicSplineComponentValue(e,t,i,s,r){const a=e*e,o=a*e;return(2*o-3*a+1)*t+(o-2*a+e)*s+(-2*o+3*a)*i+(o-a)*r}getIndexFromInterpolation(e=0,t=1){return this.interpolation==="CUBICSPLINE"?e*3*t+t:e*t}update(e,t=0){if(!this.keyframes||!this.values||!this.path)return;const i=this.keyframes.findIndex(l=>l>=t);if(i===-1)return;const s=i-1;if(s===-1)return;const r=this.keyframes[i],a=this.keyframes[s],o=(t-a)/(r-a),h=r-a;if(this.path==="rotation"){const l=this.getIndexFromInterpolation(s,4),u=this.getIndexFromInterpolation(i,4);if(e.quaternion.setFromArray([this.values[l],this.values[l+1],this.values[l+2],this.values[l+3]]),this.interpolation==="LINEAR"||this.interpolation==="CUBICSPLINE")if(mt.setFromArray([this.values[u],this.values[u+1],this.values[u+2],this.values[u+3]]),this.interpolation==="CUBICSPLINE"){const d=[this.values[l+4],this.values[l+5],this.values[l+6],this.values[l+7]],f=[this.values[u-4],this.values[u-3],this.values[u-2],this.values[u-1]],p=[this.getCubicSplineComponentValue(o,e.quaternion.elements[0],mt.elements[0],h*d[0],h*f[0]),this.getCubicSplineComponentValue(o,e.quaternion.elements[1],mt.elements[1],h*d[1],h*f[1]),this.getCubicSplineComponentValue(o,e.quaternion.elements[2],mt.elements[2],h*d[2],h*f[2]),this.getCubicSplineComponentValue(o,e.quaternion.elements[3],mt.elements[3],h*d[3],h*f[3])];e.quaternion.setFromArray(p).normalize()}else e.quaternion.slerp(mt,o);e.shouldUpdateModelMatrix()}else if(this.path==="translation"||this.path==="scale"){const l=this.path==="translation"?"position":this.path,u=this.getIndexFromInterpolation(s,3),d=this.getIndexFromInterpolation(i,3);if(e[l].set(this.values[u],this.values[u+1],this.values[u+2]),this.interpolation==="LINEAR"||this.interpolation==="CUBICSPLINE")if(Wt.set(this.values[d],this.values[d+1],this.values[d+2]),this.interpolation==="CUBICSPLINE"){const f=[this.values[u+3],this.values[u+4],this.values[u+5]],p=[this.values[d-3],this.values[d-2],this.values[d-1]],m=[this.getCubicSplineComponentValue(o,e[l].x,Wt.x,h*f[0],h*p[0]),this.getCubicSplineComponentValue(o,e[l].y,Wt.y,h*f[1],h*p[1]),this.getCubicSplineComponentValue(o,e[l].z,Wt.z,h*f[2],h*p[2])];e[l].set(m[0],m[1],m[2])}else e[l].lerp(Wt,o)}else if(this.path==="weights"){const l=this.getIndexFromInterpolation(s,this.weightsBindingInputs.length),u=this.getIndexFromInterpolation(i,this.weightsBindingInputs.length);for(let d=0;d<this.weightsBindingInputs.length;d++){const f=this.values[l+d];if(this.weightsBindingInputs[d].value=f,this.interpolation==="LINEAR"){const p=this.values[u+d];this.weightsBindingInputs[d].value+=(p-f)*o}else if(this.interpolation==="CUBICSPLINE"){const p=this.values[u+d],m=this.values[l+d+1],g=this.values[u+d-1];this.weightsBindingInputs[d].value=this.getCubicSplineComponentValue(o,f,p,h*m[0],h*g[0])}}}}}var zr=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck$1"),Ge=c((n,e,t)=>(zr(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet$1"),gt=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd$1"),Q=c((n,e,t,i)=>(zr(n,e,"write to private field"),e.set(n,t),t),"__privateSet$1"),wa=c((n,e,t)=>(zr(n,e,"access private method"),t),"__privateMethod$1"),Ee,jt,yt,je,xt,Qi,_r;class Ba{static{c(this,"TargetsAnimationsManager")}constructor(e,{label:t="",targets:i=[]}={}){gt(this,Qi),gt(this,Ee,void 0),gt(this,jt,void 0),gt(this,yt,void 0),gt(this,je,void 0),gt(this,xt,void 0),this.uuid=O(),this.inputIndices=[],this.setRenderer(e),this.label=t,this.targets=[],this.duration=0,this.timeScale=1,Q(this,Ee,performance.now()),Q(this,jt,performance.now()),Q(this,yt,0),Q(this,je,0),Q(this,je,0),Q(this,xt,1/0),this.isPlaying=!1,this.siblings=new Map,i&&i.length&&(this.targets=[...this.targets,...i])}setRenderer(e){this.renderer&&(this.renderer.animations.delete(this.uuid),this.renderer.animations.forEach(t=>t.siblings.delete(this.uuid))),e&&(e=$(e,"TargetsAnimationsManager"),this.renderer=e,this.renderer.animations.set(this.uuid,this),this.inputIndices.length&&wa(this,Qi,_r).call(this))}addTarget(e){const t={object:e,animations:[]};return this.targets.push(t),t}addTargets(e){e.forEach(t=>this.addTarget(t))}addTargetAnimation(e,t){this.duration=Math.max(this.duration,t.duration);let i=this.getTargetByObject3D(e);i||(i=this.addTarget(e)),i.animations.push(t),t.inputIndex!==null&&!this.inputIndices.includes(t.inputIndex)&&this.inputIndices.push(t.inputIndex),wa(this,Qi,_r).call(this)}getTargetByObject3D(e){return this.targets.find(t=>t.object.object3DIndex===e.object3DIndex)}getAnimationByObject3DAndPath(e,t){const i=this.getTargetByObject3D(e);return i?i.animations.find(s=>s.path===t):null}play(){this.isPlaying=!0}playOnce(){Q(this,xt,1),this.play()}pause(){this.isPlaying=!1,Q(this,Ee,-1)}stop(){this.isPlaying=!1,Q(this,je,0),this.siblings.size||Q(this,Ee,0),this.targets.forEach(e=>e.animations.forEach(t=>t.update(e.object,Math.min(t.duration,this.duration)))),this.renderer.onAfterRenderScene.add(()=>{this.targets.forEach(e=>{e.animations.forEach(t=>{t.onAfterUpdate&&t.onAfterUpdate()})})},{once:!0})}stopAtEndOfLoop(){Q(this,xt,Ge(this,je)+1)}update(){if(!this.isPlaying)return;Ge(this,Ee)===-1?Q(this,Ee,performance.now()-Ge(this,yt)):Ge(this,Ee)===0&&Q(this,Ee,performance.now()),Q(this,jt,performance.now()),Q(this,yt,Ge(this,jt)-Ge(this,Ee));const e=Ge(this,yt)*this.timeScale/1e3,t=e%this.duration;if(Q(this,je,Math.floor(e/this.duration)),Ge(this,je)>=Ge(this,xt)){this.stop();return}this.targets.forEach(i=>i.animations.forEach(s=>s.update(i.object,t)))}onAfterUpdate(){this.isPlaying&&this.targets.forEach(e=>e.animations.forEach(t=>{t.onAfterUpdate&&t.onAfterUpdate()}))}}Ee=new WeakMap,jt=new WeakMap,yt=new WeakMap,je=new WeakMap,xt=new WeakMap,Qi=new WeakSet,_r=c(function(){this.siblings=new Map,this.renderer.animations.forEach(n=>{n.uuid!==this.uuid&&JSON.stringify(n.inputIndices)===JSON.stringify(this.inputIndices)?(this.siblings.set(n.uuid,n),n.siblings.set(this.uuid,this)):n.siblings.delete(this.uuid)})},"setSiblings_fn");var Ar=c((n,e,t)=>{if(!e.has(n))throw TypeError("Cannot "+t)},"__accessCheck"),Lr=c((n,e,t)=>(Ar(n,e,"read from private field"),t?t.call(n):e.get(n)),"__privateGet"),Dr=c((n,e,t)=>{if(e.has(n))throw TypeError("Cannot add the same private member more than once");e instanceof WeakSet?e.add(n):e.set(n,t)},"__privateAdd"),Ca=c((n,e,t,i)=>(Ar(n,e,"write to private field"),e.set(n,t),t),"__privateSet"),qt=c((n,e,t)=>(Ar(n,e,"access private method"),t),"__privateMethod"),it,Ht,es,ts,Gr;const q=WebGLRenderingContext,xe=class ce{static{c(this,"_GLTFScenesManager")}constructor({renderer:e,gltf:t}){Dr(this,Ht),Dr(this,ts),Dr(this,it,void 0),e=Fe(e,"GLTFScenesManager"),this.renderer=e,this.gltf=t,Ca(this,it,new Map),this.scenesManager={node:new pe,nodes:new Map,boundingBox:new Pe,samplers:[],materialsTextures:[],materialsParams:[],scenes:[],meshes:[],meshesDescriptors:[],animations:[],cameras:[],skins:[]},this.createSamplers(),this.createMaterialTextures(),this.createMaterialsParams(),this.createAnimations(),this.createScenes()}static getVertexAttributeParamsFromType(e){switch(e){case"VEC2":return{type:"vec2f",bufferFormat:"float32x2",size:2};case"VEC3":return{type:"vec3f",bufferFormat:"float32x3",size:3};case"VEC4":return{type:"vec4f",bufferFormat:"float32x4",size:4};case"MAT2":return{type:"mat2x2f",bufferFormat:"float32x2",size:6};case"MAT3":return{type:"mat3x3f",bufferFormat:"float32x3",size:9};case"MAT4":return{type:"mat4x4f",bufferFormat:"float32x4",size:16};case"SCALAR":default:return{type:"f32",bufferFormat:"float32",size:1}}}static getTypedArrayConstructorFromComponentType(e){switch(e){case q.BYTE:return Int8Array;case q.UNSIGNED_BYTE:return Uint8Array;case q.SHORT:return Int16Array;case q.UNSIGNED_SHORT:return Uint16Array;case q.UNSIGNED_INT:return Uint32Array;case q.FLOAT:default:return Float32Array}}static gpuPrimitiveTopologyForMode(e){switch(e){case q.TRIANGLES:return"triangle-list";case q.TRIANGLE_STRIP:return"triangle-strip";case q.LINES:return"line-list";case q.LINE_STRIP:return"line-strip";case q.POINTS:return"point-list"}}static gpuAddressModeForWrap(e){switch(e){case q.CLAMP_TO_EDGE:return"clamp-to-edge";case q.MIRRORED_REPEAT:return"mirror-repeat";default:return"repeat"}}createAnimations(){this.gltf.animations?.forEach((e,t)=>{this.scenesManager.animations.push(new Ba(this.renderer,{label:e.name??"Animation "+t}))})}createSamplers(){if(this.gltf.samplers)for(const[e,t]of Object.entries(this.gltf.samplers)){const i={label:"glTF sampler "+e,name:"gltfSampler"+e,addressModeU:ce.gpuAddressModeForWrap(t.wrapS),addressModeV:ce.gpuAddressModeForWrap(t.wrapT)};switch((!t.magFilter||t.magFilter===q.LINEAR)&&(i.magFilter="linear"),t.minFilter){case q.NEAREST:break;case q.LINEAR:case q.LINEAR_MIPMAP_NEAREST:i.minFilter="linear";break;case q.NEAREST_MIPMAP_LINEAR:i.mipmapFilter="linear";break;case q.LINEAR_MIPMAP_LINEAR:default:i.minFilter="linear",i.mipmapFilter="linear";break}this.scenesManager.samplers.push(new Ke(this.renderer,i))}else this.scenesManager.samplers.push(new Ke(this.renderer,{label:"Default sampler",name:"defaultSampler",magFilter:"linear",minFilter:"linear",mipmapFilter:"linear"}))}createTexture(e,t,i){const s=(()=>{switch(i){case"baseColorTexture":case"emissiveTexture":case"specularTexture":case"specularColorTexture":return"rgba8unorm-srgb";case"occlusionTexture":case"transmissionTexture":return"r8unorm";case"thicknessTexture":return"rg8unorm";default:return"rgba8unorm"}})(),r=new j(this.renderer,{label:e.name?e.name+": "+i:i,name:i,format:s,visibility:["fragment"],generateMips:!0,fixedSize:{width:t.width,height:t.height}});return r.uploadSource({source:t}),r}createMaterialTextures(){if(this.scenesManager.materialsTextures=[],this.gltf.materials)for(const[e,t]of Object.entries(this.gltf.materials)){const i={material:e,texturesDescriptors:[]},s=c(u=>u.texCoord&&u.texCoord!==0?"uv"+u.texCoord:"uv","getUVAttributeName"),r=c((u,d)=>{const f=u.index,p=this.gltf.imagesBitmaps[this.gltf.textures[f].source],m=this.createTexture(t,p,d),g=this.gltf.textures.find(v=>v.source===f)?.sampler;i.texturesDescriptors.push({texture:m,sampler:this.scenesManager.samplers[g??0],texCoordAttributeName:s(u)})},"createTexture");this.scenesManager.materialsTextures[e]=i,t.pbrMetallicRoughness&&(t.pbrMetallicRoughness.baseColorTexture&&t.pbrMetallicRoughness.baseColorTexture.index!==void 0&&r(t.pbrMetallicRoughness.baseColorTexture,"baseColorTexture"),t.pbrMetallicRoughness.metallicRoughnessTexture&&t.pbrMetallicRoughness.metallicRoughnessTexture.index!==void 0&&r(t.pbrMetallicRoughness.metallicRoughnessTexture,"metallicRoughnessTexture")),t.normalTexture&&t.normalTexture.index!==void 0&&r(t.normalTexture,"normalTexture"),t.occlusionTexture&&t.occlusionTexture.index!==void 0&&r(t.occlusionTexture,"occlusionTexture"),t.emissiveTexture&&t.emissiveTexture.index!==void 0&&r(t.emissiveTexture,"emissiveTexture");const{extensions:a}=t,o=a&&a.KHR_materials_transmission||null,h=a&&a.KHR_materials_specular||null,l=a&&a.KHR_materials_volume||null;if(o&&o.transmissionTexture&&o.transmissionTexture.index!==void 0&&r(o.transmissionTexture,"transmissionTexture"),h&&(h.specularTexture||h.specularColorTexture)){const{specularTexture:u,specularColorTexture:d}=h;u&&d&&(u.index!==void 0&&d.index!==void 0&&u.index===d.index?r(h.specularTexture,"specularTexture"):(u&&u.index!==void 0&&r(h.specularTexture,"specularFactorTexture"),d&&d.index!==void 0&&r(h.specularColorTexture,"specularColorTexture")))}l&&l.thicknessTexture&&l.thicknessTexture.index!==void 0&&r(l.thicknessTexture,"thicknessTexture")}}getMaterialBaseParameters(e,t=null){const i={uniforms:{}},s=this.gltf.materials&&this.gltf.materials[e]||{};t?i.label=t+(s.name?" "+s.name:""):s.name&&(i.label=s.name);const{extensions:r}=s,a=r&&r.KHR_materials_dispersion||null,o=r&&r.KHR_materials_emissive_strength||null,h=r&&r.KHR_materials_ior||null,l=r&&r.KHR_materials_transmission||null,u=r&&r.KHR_materials_specular||null,d=r&&r.KHR_materials_volume||null,f={color:{type:"vec3f",value:s.pbrMetallicRoughness&&s.pbrMetallicRoughness.baseColorFactor!==void 0?new y(s.pbrMetallicRoughness.baseColorFactor[0],s.pbrMetallicRoughness.baseColorFactor[1],s.pbrMetallicRoughness.baseColorFactor[2]):new y(1)},opacity:{type:"f32",value:s.pbrMetallicRoughness&&s.pbrMetallicRoughness.baseColorFactor!==void 0?s.pbrMetallicRoughness.baseColorFactor[3]:1},alphaCutoff:{type:"f32",value:s.alphaCutoff!==void 0?s.alphaCutoff:s.alphaMode==="MASK"?.5:0},metallic:{type:"f32",value:s.pbrMetallicRoughness?.metallicFactor===void 0?1:s.pbrMetallicRoughness.metallicFactor},roughness:{type:"f32",value:s.pbrMetallicRoughness?.roughnessFactor===void 0?1:s.pbrMetallicRoughness.roughnessFactor},normalScale:{type:"vec2f",value:s.normalTexture?.scale===void 0?new z(1):new z(s.normalTexture.scale)},occlusionIntensity:{type:"f32",value:s.occlusionTexture?.strength===void 0?1:s.occlusionTexture.strength},emissiveIntensity:{type:"f32",value:o&&o.emissiveStrength!==void 0?o.emissiveStrength:1},emissiveColor:{type:"vec3f",value:s.emissiveFactor!==void 0?new y(s.emissiveFactor[0],s.emissiveFactor[1],s.emissiveFactor[2]):new y(0)},specularIntensity:{type:"f32",value:u&&u.specularFactor!==void 0?u.specularFactor:1},specularColor:{type:"vec3f",value:u&&u.specularColorFactor!==void 0?new y(u.specularColorFactor[0],u.specularColorFactor[1],u.specularColorFactor[2]):new y(1)},transmission:{type:"f32",value:l&&l.transmissionFactor!==void 0?l.transmissionFactor:0},ior:{type:"f32",value:h&&h.ior!==void 0?h.ior:1.5},dispersion:{type:"f32",value:a&&a.dispersion!==void 0?a.dispersion:0},thickness:{type:"f32",value:d&&d.thicknessFactor!==void 0?d.thicknessFactor:0},attenuationDistance:{type:"f32",value:d&&d.attenuationDistance!==void 0?d.attenuationDistance:1/0},attenuationColor:{type:"vec3f",value:d&&d.attenuationColor!==void 0?new y(d.attenuationColor[0],d.attenuationColor[1],d.attenuationColor[2]):new y(1)}};return i.uniforms.material={visibility:["fragment"],struct:f},i.cullMode=s.doubleSided?"none":"back",s.alphaMode==="BLEND"&&(i.transparent=!0,i.targets=[{blend:{color:{srcFactor:"src-alpha",dstFactor:"one-minus-src-alpha"},alpha:{srcFactor:"one",dstFactor:"one"}}}]),i}createMaterialsParams(){this.gltf.materials?.forEach((e,t)=>{this.scenesManager.materialsParams.push(this.getMaterialBaseParameters(t))})}createNode(e,t,i){const s={index:i,name:t.name,node:new pe,children:[]};this.scenesManager.nodes.set(i,s.node),e.children.push(s),s.node.parent=e.node,t.matrix?(s.node.modelMatrix.setFromArray(new Float32Array(t.matrix)),s.node.matrices.model.shouldUpdate=!1):(t.translation&&s.node.position.set(t.translation[0],t.translation[1],t.translation[2]),t.scale&&s.node.scale.set(t.scale[0],t.scale[1],t.scale[2]),t.rotation&&s.node.quaternion.setFromArray(new Float32Array(t.rotation))),t.children&&t.children.forEach(a=>{const o=this.gltf.nodes[a];this.createNode(s,o,a)});let r=null;if(t.mesh!==void 0){let a=null;if(t.extensions&&t.extensions.EXT_mesh_gpu_instancing){const{attributes:h}=t.extensions.EXT_mesh_gpu_instancing;a={count:0,nodesTransformations:{}};for(const l of Object.entries(h)){const u=this.gltf.accessors[l[1]],d=this.gltf.bufferViews[u.bufferView],f=ce.getTypedArrayConstructorFromComponentType(u.componentType),p=ce.getVertexAttributeParamsFromType(u.type).size,m=new f(this.gltf.arrayBuffers[d.buffer],u.byteOffset+d.byteOffset,u.count*p);a.count=u.count,a.nodesTransformations[l[0].toLowerCase()]=m}}const o=this.gltf.meshes[t.mesh];o.primitives.forEach((h,l)=>{const u={parent:s.node,texturesDescriptors:[],variantName:"Default",parameters:{label:o.name?o.name+" "+l:"glTF mesh "+l},nodes:[],extensionsUsed:[],alternateDescriptors:new Map,alternateMaterials:new Map};if(r=Lr(this,it).get(h),r||(r={instances:[],nodes:[],meshDescriptor:u},Lr(this,it).set(h,r)),r.instances.push(t),r.nodes.push(s.node),a&&a.count)for(let d=0;d<a.count;d++){const f=new pe;if(a.nodesTransformations){const{translation:p,scale:m,rotation:g}=a.nodesTransformations;p&&f.position.set(p[d*3],p[d*3+1],p[d*3+2]),m&&f.scale.set(m[d*3],m[d*3+1],m[d*3+2]),g&&f.quaternion.setFromArray(Float32Array.from([g[d*4],g[d*4+1],g[d*4+2],g[d*4+3]]))}f.parent=s.node,r.instances.push(t),r.nodes.push(f)}})}if(t.camera!==void 0){const a=this.gltf.cameras[t.camera];if(a.type==="perspective"){const o=Math.min(this.renderer.boundingRect.width,this.renderer.boundingRect.height),h=o/a.perspective.aspectRatio,l=o*a.perspective.aspectRatio,u=a.perspective.yfov*180/Math.PI,d=new fs({fov:u,near:a.perspective.znear,far:a.perspective.zfar,width:h,height:l,pixelRatio:this.renderer.pixelRatio});d.parent=s.node,this.scenesManager.cameras.push(d)}else a.type==="orthographic"&&L("GLTFScenesManager: Orthographic cameras are not supported yet.")}this.gltf.animations&&this.scenesManager.animations.forEach((a,o)=>{const h=this.gltf.animations[o],l=h.channels.filter(u=>u.target.node===i);l&&l.length&&(a.addTarget(s.node),l.forEach(u=>{const d=h.samplers[u.sampler],f=u.target.path,p=this.gltf.accessors[d.input],m=this.gltf.bufferViews[p.bufferView],g=ce.getTypedArrayConstructorFromComponentType(p.componentType),v=this.gltf.accessors[d.output],x=this.gltf.bufferViews[v.bufferView],w=ce.getTypedArrayConstructorFromComponentType(v.componentType),T=new g(this.gltf.arrayBuffers[m.buffer],p.byteOffset+m.byteOffset,p.count*ce.getVertexAttributeParamsFromType(p.type).size),b=new w(this.gltf.arrayBuffers[x.buffer],v.byteOffset+x.byteOffset,v.count*ce.getVertexAttributeParamsFromType(v.type).size),B=t.name?`${t.name} animation`:`${u.target.path} animation ${i}`,M=new Er({label:h.name?`${h.name} ${B}`:`Animation ${o} ${B}`,inputIndex:d.input,keyframes:T,values:b,path:f,interpolation:d.interpolation});a.addTargetAnimation(s.node,M)}))})}static getCleanAttributeName(e){return e==="TEXCOORD_0"?"uv":e.replace("_","").replace("TEXCOORD","uv").toLowerCase()}sortAttributesByNames(e,t){t.sort((i,s)=>{let r=e.findIndex(o=>o===i.name);r=r===-1?1/0:r;let a=e.findIndex(o=>o===s.name);return a=a===-1?1/0:a,r-a})}createGeometry(e,t){const{instances:i,meshDescriptor:s}=t,r=new Pe;for(const[m,g]of Object.entries(e.attributes))if(m==="POSITION"){const v=this.gltf.accessors[g];r&&(r.min.min(new y(v.min[0],v.min[1],v.min[2])),r.max.max(new y(v.max[0],v.max[1],v.max[2])))}let a=[],o=qt(this,ts,Gr).call(this,e.attributes,a);const h="indices"in e;let l=null,u=null;if(h){const m=this.gltf.accessors[e.indices],g=this.gltf.bufferViews[m.bufferView];u=ce.getTypedArrayConstructorFromComponentType(m.componentType);const v=u.name==="Uint8Array"?Uint16Array.BYTES_PER_ELEMENT:u.BYTES_PER_ELEMENT,x=m.byteOffset+g.byteOffset,w=this.gltf.arrayBuffers[g.buffer],T=Math.ceil(m.count/v)*v;l=u.name==="Uint8Array"?Uint16Array.from(new u(w,x,T)):new u(w,x,T)}const d=a.find(m=>m.name==="normal");d||(a=a.filter(m=>m.name!=="tangent"),o=null),o||this.sortAttributesByNames(["position","uv","normal"],a);const f={instancesCount:i.length,topology:ce.gpuPrimitiveTopologyForMode(e.mode),vertexBuffers:[{name:"attributes",stepMode:"vertex",attributes:a,...o&&{array:o}}]},p=h?Ct:gs;s.parameters.geometry=new p(f),h&&u&&l&&s.parameters.geometry.setIndexBuffer({bufferFormat:u.name==="Uint32Array"?"uint32":"uint16",array:l}),d||s.parameters.geometry.computeGeometry(),s.parameters.geometry.boundingBox=r}createSkins(){this.gltf.skins&&this.gltf.skins.forEach((e,t)=>{const s=this.gltf.nodes.find(d=>d.skin!==void 0&&d.mesh!==void 0&&d.skin===t).mesh;let r;if(e.inverseBindMatrices){const d=this.gltf.accessors[e.inverseBindMatrices],f=this.gltf.bufferViews[d.bufferView],p=ce.getTypedArrayConstructorFromComponentType(d.componentType);r=new p(this.gltf.arrayBuffers[f.buffer],d.byteOffset+f.byteOffset,d.count*ce.getVertexAttributeParamsFromType(d.type).size)}else{r=new Float32Array(16*e.joints.length);for(let d=0;d<e.joints.length*16;d+=16)r[d]=1,r[d+5]=1,r[d+10]=1,r[d+15]=1}const a=new Z({label:"Skin "+t,name:"skin"+t,bindingType:"storage",visibility:["vertex"],childrenBindings:[{binding:new Z({label:"Joints "+t,name:"joints",bindingType:"storage",visibility:["vertex"],struct:{jointMatrix:{type:"mat4x4f",value:new Float32Array(16)},normalMatrix:{type:"mat4x4f",value:new Float32Array(16)}}}),count:e.joints.length,forceArray:!0}]});for(let d=0;d<e.joints.length;d++){for(let f=0;f<16;f++)a.childrenBindings[d].inputs.jointMatrix.value[f]=r[d*16+f],a.childrenBindings[d].inputs.normalMatrix.value[f]=r[d*16+f];a.childrenBindings[d].inputs.jointMatrix.shouldUpdate=!0,a.childrenBindings[d].inputs.normalMatrix.shouldUpdate=!0}const o=e.joints.map(d=>this.scenesManager.nodes.get(d)),h=new D,l=new D,u=this.gltf.nodes.findIndex(d=>d.mesh!==void 0&&d.skin!==void 0&&d.mesh===s);if(u!==-1){const d=this.scenesManager.nodes.get(u),f=new D,p=d.updateWorldMatrix.bind(d);if(d.updateWorldMatrix=()=>{p(),f.copy(d.worldMatrix).invert()},this.scenesManager.animations.length)for(const m of this.scenesManager.animations)o.forEach((g,v)=>{const x=c(()=>{m.isPlaying?h.setFromArray(r,v*16).premultiply(g.worldMatrix).premultiply(f):h.identity(),l.copy(h).invert().transpose();for(let B=0;B<16;B++)a.childrenBindings[v].inputs.jointMatrix.value[B]=h.elements[B],a.childrenBindings[v].inputs.normalMatrix.value[B]=l.elements[B];a.childrenBindings[v].inputs.jointMatrix.shouldUpdate=!0,a.childrenBindings[v].inputs.normalMatrix.shouldUpdate=!0},"updateJointMatrix"),w=this.gltf.nodes[v],T=w.name?`${w.name} skin animation`:`skin animation ${v}`,b=new Er({label:m.label?`${m.label} ${T}`:`Animation ${T}`});b.onAfterUpdate=x,m.addTargetAnimation(g,b)});else o.forEach((m,g)=>{h.setFromArray(r,g*16).premultiply(m.worldMatrix).premultiply(f),l.copy(h).invert().transpose();for(let v=0;v<16;v++)a.childrenBindings[g].inputs.jointMatrix.value[v]=h.elements[v],a.childrenBindings[g].inputs.normalMatrix.value[v]=l.elements[v];a.childrenBindings[g].inputs.jointMatrix.shouldUpdate=!0,a.childrenBindings[g].inputs.normalMatrix.shouldUpdate=!0});this.scenesManager.skins.push({parentNode:d,joints:o,inverseBindMatrices:r,jointMatrix:h,normalMatrix:l,parentInverseWorldMatrix:f,binding:a})}})}createMaterial(e,t){const{instances:i,nodes:s,meshDescriptor:r}=t,a=i.length,o=i[0].mesh;if(e.targets){const x=[],w=this.gltf.meshes[o].weights;let T;for(const b of this.scenesManager.animations)if(T=b.getAnimationByObject3DAndPath(r.parent,"weights"),T)break;e.targets.forEach((b,B)=>{const M=[];qt(this,ts,Gr).call(this,b,M);const S=M.reduce((E,A)=>E={...E,[A.name]:{type:`array<${A.type}>`,value:A.array}},{weight:{type:"f32",value:w&&w.length?w[B]:0}}),_=new Z({label:"Morph target "+B,name:"morphTarget"+B,bindingType:"storage",visibility:["vertex"],struct:S});T&&T.addWeightBindingInput(_.inputs.weight),x.push(_)}),r.parameters.bindings||(r.parameters.bindings=[]),r.parameters.bindings=[...r.parameters.bindings,...x]}this.gltf.skins&&this.gltf.skins.forEach((x,w)=>{r.parameters.bindings||(r.parameters.bindings=[]),i.forEach((T,b)=>{if(T.skin!==void 0&&T.skin===w){const B=this.scenesManager.skins[w];if(r.parameters.bindings=[...r.parameters.bindings,B.binding],b>0){const M=r.parameters.geometry.boundingBox.clone(),S=new D;B.joints.forEach((_,E)=>{S.setFromArray(B.inverseBindMatrices,E*16);const A=M.applyMat4(S).applyMat4(_.worldMatrix);this.scenesManager.boundingBox.min.min(A.min),this.scenesManager.boundingBox.max.max(A.max)})}}})});const h=this.scenesManager.materialsParams[e.material],l=this.scenesManager.materialsTextures[e.material];r.texturesDescriptors=l?.texturesDescriptors||[],r.parameters={...r.parameters,...h};const u=this.gltf.materials&&this.gltf.materials[e.material]||{},{extensions:d}=u;if(d)for(const x of Object.keys(d))x==="KHR_materials_unlit"&&this.gltf.extensionsRequired&&this.gltf.extensionsRequired.includes(x),r.extensionsUsed.push(x);const f=d&&d.KHR_materials_dispersion||null,p=d&&d.KHR_materials_transmission||null,m=d&&d.KHR_materials_volume||null,g=p||m||f,v=this.gltf.extensionsUsed&&(this.gltf.extensionsUsed.includes("KHR_materials_transmission")||this.gltf.extensionsUsed.includes("KHR_materials_volume")||this.gltf.extensionsUsed.includes("KHR_materials_dispersion"));if(r.parameters.samplers=[],r.parameters.textures=[],v&&g&&(r.parameters.transmissive=!0),v&&g&&(this.renderer.createTransmissionTarget(),r.texturesDescriptors.push({texture:this.renderer.transmissionTarget.texture,sampler:this.renderer.transmissionTarget.sampler})),a>1){const x=new Z({label:"Instance matrices",name:"matrices",visibility:["vertex","fragment"],bindingType:"storage",struct:{model:{type:"mat4x4f",value:new D},normal:{type:"mat3x3f",value:new Be}}}),w=new Z({label:"Instances",name:"instances",visibility:["vertex","fragment"],bindingType:"storage",childrenBindings:[{binding:x,count:a,forceArray:!0}]});w.childrenBindings.forEach((T,b)=>{const B=s[b],M=c(()=>{T.inputs.model.value.copy(B.worldMatrix),T.inputs.normal.value.getNormalMatrix(B.worldMatrix),T.inputs.model.shouldUpdate=!0,T.inputs.normal.shouldUpdate=!0},"updateInstanceMatrices"),S=B.updateWorldMatrix.bind(B);B.updateWorldMatrix=()=>{S(),M()},M()}),r.parameters.bindings||(r.parameters.bindings=[]),r.parameters.bindings.push(w)}for(let x=0;x<s.length;x++){const T=r.parameters.geometry.boundingBox.clone().applyMat4(r.nodes[x].worldMatrix);this.scenesManager.boundingBox.min.min(T.min),this.scenesManager.boundingBox.max.max(T.max)}this.scenesManager.boundingBox.max.max(new y(.001)),e.extensions&&e.extensions.KHR_materials_variants&&this.gltf.extensionsUsed&&this.gltf.extensionsUsed.includes("KHR_materials_variants")&&(r.extensionsUsed.push("KHR_materials_variants"),this.gltf.extensions.KHR_materials_variants.variants.forEach((x,w)=>{const T=e.extensions.KHR_materials_variants.mappings.find(b=>b.variants&&b.variants.includes(w));if(T){const b=this.gltf.materials[T.material],B=this.scenesManager.materialsParams[T.material],S=this.scenesManager.materialsTextures[T.material]?.texturesDescriptors||[];v&&g&&S.push({texture:this.renderer.transmissionTarget.texture,sampler:this.renderer.transmissionTarget.sampler});const _={gltfVariantMaterial:b},E=[];if(_)for(const H of Object.keys(_))H==="KHR_materials_unlit"&&this.gltf.extensionsRequired&&this.gltf.extensionsRequired.includes(H),E.push(H);const A={variantName:x.name,parent:r.parent,nodes:r.nodes,extensionsUsed:[...r.extensionsUsed,...E],texturesDescriptors:S,parameters:{geometry:r.parameters.geometry,label:x.name+" "+B.label,transmissive:!!r.parameters.transmissive,bindings:r.parameters.bindings??[],uniforms:B.uniforms,transparent:!!B.transparent,cullMode:B.cullMode,...B.targets&&{targets:B.targets}}};r.alternateDescriptors.set(x.name,A)}}))}createScenes(){this.scenesManager.node.parent=this.renderer.scene,this.gltf.scenes.forEach(e=>{const t={name:e.name,children:[],node:new pe};t.node.parent=this.scenesManager.node,this.scenesManager.scenes.push(t),e.nodes.forEach(i=>{const s=this.gltf.nodes[i];this.createNode(t,s,i)})}),this.scenesManager.node.updateMatrixStack(),this.createSkins();for(const[e,t]of Lr(this,it)){const{nodes:i,meshDescriptor:s}=t;s.nodes=i,this.scenesManager.meshesDescriptors.push(s),this.createGeometry(e,t),this.createMaterial(e,t)}}addMeshes(e=t=>{}){return this.scenesManager.node.updateMatrixStack(),this.scenesManager.meshesDescriptors.map(t=>{if(t.parameters.geometry){e(t);const i=new As(this.renderer,{...t.parameters});return t.alternateMaterials.set("Default",i.material),t.alternateDescriptors.forEach(s=>{const r=i.material.getBufferBindingByName("matrices");s.parameters.bindings=[r,...s.parameters.bindings];const{label:a,shaders:o,uniforms:h,bindings:l,samplers:u,textures:d,targets:f,transparent:p}=s.parameters,m=new fi(this.renderer,{...JSON.parse(JSON.stringify(i.material.options.rendering)),label:a,shaders:o,uniforms:h,bindings:l,...u&&{samplers:u},...d&&{textures:d},...f&&{targets:f},transparent:!!p,verticesOrder:t.parameters.geometry.verticesOrder,topology:t.parameters.geometry.topology});t.alternateMaterials.set(s.variantName,m)}),i.parent=t.parent,this.scenesManager.meshes.push(i),i}})}destroy(){this.scenesManager.meshes.forEach(e=>e.remove()),this.scenesManager.meshes=[],this.scenesManager.meshesDescriptors.forEach(e=>{e.alternateMaterials.forEach(t=>t.destroy())}),this.scenesManager.nodes.forEach(e=>{e.destroy()}),this.scenesManager.nodes=new Map,this.scenesManager.scenes.forEach(e=>{e.node.destroy()}),this.scenesManager.animations.forEach(e=>e.setRenderer(null)),this.scenesManager.node.destroy(),Ca(this,it,new Map)}};it=new WeakMap,Ht=new WeakSet,es=c(function(n){if(!n.sparse)return{indices:null,values:null};const e=xe.getTypedArrayConstructorFromComponentType(n.componentType),t=xe.getVertexAttributeParamsFromType(n.type).size,i=xe.getTypedArrayConstructorFromComponentType(n.sparse.indices.componentType),s=this.gltf.bufferViews[n.sparse.indices.bufferView],r=new i(this.gltf.arrayBuffers[s.buffer],n.byteOffset+s.byteOffset,n.sparse.count),a=this.gltf.bufferViews[n.sparse.values.bufferView],o=new e(this.gltf.arrayBuffers[a.buffer],n.byteOffset+a.byteOffset,n.sparse.count*t);return{indices:r,values:o}},"getSparseAccessorIndicesAndValues_fn"),ts=new WeakSet,Gr=c(function(n,e){let t=null,i=null,s=0;const r=Object.entries(n);r.sort((o,h)=>o[1]-h[1]);const a=Object.values(n);a.sort((o,h)=>o-h);for(const[o,h]of r){const l=xe.getCleanAttributeName(o),u=this.gltf.accessors[h],d=u.componentType?xe.getTypedArrayConstructorFromComponentType(u.componentType):Float32Array,f=this.gltf.bufferViews[u.bufferView],p=f.byteStride,m=u.byteOffset;p!==void 0&&m!==void 0&&m<p?s=Math.max(m,s):s=0,l==="position"&&(i=f);const v=xe.getVertexAttributeParamsFromType(u.type),{size:x}=v;let w;if(s>0){const b=new d(this.gltf.arrayBuffers[f.buffer],0,f.byteLength/d.BYTES_PER_ELEMENT);w=new d(u.count*x);const B=m/d.BYTES_PER_ELEMENT;for(let M=0;M<u.count;M++)for(let S=0;S<x;S++)w[M*x+S]=b[B+x*M+x*M+S]}else if(f.byteStride&&f.byteStride>d.BYTES_PER_ELEMENT*x){const b=new DataView(this.gltf.arrayBuffers[f.buffer],f.byteOffset+u.byteOffset);w=new d(u.count*x);for(let B=0;B<u.count;B++){const M=B*f.byteStride;for(let S=0;S<x;S++)w[B*x+S]=b.getUint16(M+S*d.BYTES_PER_ELEMENT,!0)}}else w=new d(this.gltf.arrayBuffers[f.buffer],u.byteOffset+f.byteOffset,u.count*x);if(u.sparse){const{indices:b,values:B}=qt(this,Ht,es).call(this,u);for(let M=0;M<b.length;M++)for(let S=0;S<x;S++)w[b[M]*x+S]=B[M*x+S]}if(l.includes("weights"))for(let b=0;b<u.count*x;b+=x){const B=w[b],M=w[b+1],S=w[b+2],_=w[b+3];let E=Math.abs(B)+Math.abs(M)+Math.abs(S)+Math.abs(_);E>0?E=1/Math.sqrt(E):E=1,w[b]*=E,w[b+1]*=E,w[b+2]*=E,w[b+3]*=E}const T={name:l,...v,array:w};e.push(T)}if(s>0){const o=a.map(h=>this.gltf.accessors[h].bufferView);if(o.every(h=>h===o[0])){t=new Float32Array(this.gltf.arrayBuffers[i.buffer],i.byteOffset,Math.ceil(i.byteLength/4)*4/Float32Array.BYTES_PER_ELEMENT);let h=0;a.forEach(d=>{const f=this.gltf.accessors[d],p=xe.getVertexAttributeParamsFromType(f.type).size,{indices:m,values:g}=qt(this,Ht,es).call(this,f);if(m&&g)for(let v=0;v<m.length;v++)for(let x=0;x<p;x++){const w=h+p*v;t[w+m[v]*p+x]=g[v*p+x]}h+=p});const u=Object.entries(n).sort((d,f)=>{const p=this.gltf.accessors[d[1]].byteOffset,m=this.gltf.accessors[f[1]].byteOffset;return p-m}).map(d=>xe.getCleanAttributeName(d[0]));this.sortAttributesByNames(u,e)}else{let h=0;const l={},u=a.reduce((f,p)=>{const m=this.gltf.accessors[p],g=xe.getVertexAttributeParamsFromType(m.type).size;return l[m.bufferView]||(l[m.bufferView]=0),l[m.bufferView]=Math.max(l[m.bufferView],m.byteOffset+g*Float32Array.BYTES_PER_ELEMENT),h+=g*Float32Array.BYTES_PER_ELEMENT,f+m.count*g},0);t=new Float32Array(Math.ceil(u/4)*4),a.forEach(f=>{const p=this.gltf.accessors[f],m=this.gltf.bufferViews[p.bufferView],g=xe.getVertexAttributeParamsFromType(p.type).size,{indices:v,values:x}=qt(this,Ht,es).call(this,p);for(let w=0;w<p.count;w++){const T=p.byteOffset/Float32Array.BYTES_PER_ELEMENT+w*h/Float32Array.BYTES_PER_ELEMENT,b=new Float32Array(this.gltf.arrayBuffers[m.buffer],m.byteOffset+p.byteOffset+w*l[p.bufferView],g);if(v&&x&&v.includes(w))for(let B=0;w<g;B++)b[B]=x[w*g+B];t.subarray(T,T+g).set(b)}});const d=Object.entries(n).map(f=>xe.getCleanAttributeName(f[0]));this.sortAttributesByNames(d,e)}}return t},"parsePrimitiveProperty_fn");let Sh=xe;const Sa=c((n,e={})=>{let{shadingModel:t}=e;t||(t="PBR"),n.extensionsUsed.includes("KHR_materials_unlit")&&(t="Unlit");const s=n.texturesDescriptors.find(b=>b.texture.options.name==="baseColorTexture"),r=n.texturesDescriptors.find(b=>b.texture.options.name==="normalTexture"),a=n.texturesDescriptors.find(b=>b.texture.options.name==="emissiveTexture"),o=n.texturesDescriptors.find(b=>b.texture.options.name==="occlusionTexture"),h=n.texturesDescriptors.find(b=>b.texture.options.name==="metallicRoughnessTexture"),l=n.texturesDescriptors.find(b=>b.texture.options.name==="specularTexture"),u=l||n.texturesDescriptors.find(b=>b.texture.options.name==="specularFactorTexture"),d=l||n.texturesDescriptors.find(b=>b.texture.options.name==="specularColorTexture"),f=n.texturesDescriptors.find(b=>b.texture.options.name==="transmissionTexture"),p=n.texturesDescriptors.find(b=>b.texture.options.name==="thicknessTexture"),m=n.texturesDescriptors.find(b=>b.texture.options.name==="transmissionBackgroundTexture");n.parameters.textures||(n.parameters.textures=[]),n.parameters.samplers||(n.parameters.samplers=[]),t!=="Unlit"?n.texturesDescriptors.forEach(b=>{n.parameters.samplers.find(M=>M.uuid===b.sampler.uuid)||n.parameters.samplers.push(b.sampler),n.parameters.textures.push(b.texture)}):s&&(n.parameters.samplers.find(B=>B.uuid===s.sampler.uuid)||n.parameters.samplers.push(s.sampler),n.parameters.textures.push(s.texture));let{vertexChunks:g,fragmentChunks:v}=e||{};const{environmentMap:x}=e||{};x&&(n.parameters.textures=[...n.parameters.textures,x.lutTexture,x.diffuseTexture,x.specularTexture],n.parameters.samplers=[...n.parameters.samplers,x.sampler]);const w=Js({bindings:n.parameters.bindings,geometry:n.parameters.geometry,chunks:g}),T=er({shadingModel:t,chunks:v,receiveShadows:!!n.parameters.receiveShadows,toneMapping:"Khronos",geometry:n.parameters.geometry,materialUniform:n.parameters.uniforms.material,materialUniformName:"material",extensionsUsed:n.extensionsUsed,baseColorTexture:s,normalTexture:r,metallicRoughnessTexture:h,specularTexture:l,specularFactorTexture:u,specularColorTexture:d,transmissionTexture:f,thicknessTexture:p,emissiveTexture:a,occlusionTexture:o,transmissionBackgroundTexture:m,environmentMap:x});return n.alternateDescriptors?.forEach(b=>{b.parameters.uniforms={...n.parameters.uniforms,...b.parameters.uniforms},b.parameters.shaders=Sa(b,e)}),{vertex:{code:w,entryPoint:"main"},fragment:{code:T,entryPoint:"main"}}},"buildShaders"),Ma=WebGLRenderingContext,Mh=1179937895,Fr={JSON:1313821514,BIN:5130562},Th=[0,0,0],Ph=[0,0,0,1],Rh=[1,1,1],Eh=typeof window<"u"&&new RegExp(`^${window.location.protocol}`,"i")||RegExp("^(http|https):","i"),zh=/^data:/;class is{static{c(this,"GLTFLoader")}constructor(){this.gltf=null}static resolveUri(e,t){return e.match(Eh)||e.match(zh)?e:t+e}async loadFromUrl(e){const t=e.lastIndexOf("/"),i=t!==0?e.substring(0,t+1):"",s=await fetch(e);if(e.endsWith(".gltf"))return this.loadFromJson(await s.json(),i);if(e.endsWith(".glb"))return this.loadFromBinary(await s.arrayBuffer(),i);throw new Error("Unrecognized file extension")}async loadFromJsonBase(e,t,i=null){if(!t)throw new Error("baseUrl must be specified.");if(!e.asset)throw new Error("Missing asset description.");if(e.asset.minVersion!=="2.0"&&e.asset.version!=="2.0")throw new Error("Incompatible asset version.");for(const a of e.accessors)a.byteOffset=a.byteOffset??0,a.normalized=a.normalized??!1;for(const a of e.bufferViews)a.byteOffset=a.byteOffset??0;for(const a of e.nodes)a.matrix||(a.rotation=a.rotation??Ph,a.scale=a.scale??Rh,a.translation=a.translation??Th);if(e.samplers)for(const a of e.samplers)a.wrapS=a.wrapS??Ma.REPEAT,a.wrapT=a.wrapT??Ma.REPEAT;const s=[];if(i)s.push(Promise.resolve(i));else for(const a in e.buffers){const o=e.buffers[a],h=is.resolveUri(o.uri,t);s[a]=fetch(h).then(l=>l.arrayBuffer())}const r=[];for(let a=0;a<e.images?.length;++a){const o=e.images[a];if(o.uri)r[a]=fetch(is.resolveUri(o.uri,t)).then(async h=>createImageBitmap(await h.blob()));else{const h=e.bufferViews[o.bufferView];r[a]=s[h.buffer].then(l=>{const u=new Blob([new Uint8Array(l,h.byteOffset,h.byteLength)],{type:o.mimeType});return createImageBitmap(u)})}}return{...e,arrayBuffers:await Promise.all(s),imagesBitmaps:await Promise.all(r)}}async loadFromBinary(e,t){const i=new DataView(e,0,12),s=i.getUint32(0,!0),r=i.getUint32(4,!0),a=i.getUint32(8,!0);if(s!==Mh)throw new Error("Invalid magic string in binary header.");if(r!==2)throw new Error("Incompatible version in binary header.");const o={};let h=12;for(;h<a;){const d=new DataView(e,h,8),f=d.getUint32(0,!0),p=d.getUint32(4,!0);o[p]=e.slice(h+8,h+8+f),h+=f+8}if(!o[Fr.JSON])throw new Error("File contained no json chunk.");const u=new TextDecoder("utf-8").decode(o[Fr.JSON]);return this.loadFromJson(JSON.parse(u),t,o[Fr.BIN])}async loadFromJson(e,t,i=null){return this.gltf=await this.loadFromJsonBase(e,t,i),this.gltf}}C.AmbientLight=no,C.BindGroup=Zt,C.Binding=Xt,C.Box3=Pe,C.BoxGeometry=xh,C.Buffer=qe,C.BufferBinding=Z,C.Camera=fs,C.ComputeMaterial=Xr,C.ComputePass=ui,C.ComputePipelineEntry=Ls,C.DOMElement=Ds,C.DOMFrustum=Qr,C.DOMMesh=ra,C.DOMObject3D=ia,C.DOMTexture=Xe,C.DirectionalLight=yo,C.EnvironmentMap=yh,C.FullscreenPlane=zs,C.GLTFLoader=is,C.GLTFScenesManager=Sh,C.GPUCameraRenderer=ks,C.GPUCurtains=uh,C.GPUCurtainsRenderer=Oi,C.GPUDeviceManager=_n,C.GPURenderer=$s,C.Geometry=gs,C.HDRLoader=ga,C.IndexedGeometry=Ct,C.IndirectBuffer=Ln,C.KeyframesAnimation=Er,C.LitMesh=bh,C.Mat3=Be,C.Mat4=D,C.Material=ms,C.Mesh=As,C.Object3D=pe,C.OrbitControls=dh,C.PingPongPlane=wh,C.PipelineEntry=bs,C.PipelineManager=Mn,C.Plane=na,C.PlaneGeometry=ys,C.PointLight=So,C.ProjectedObject3D=_s,C.Quat=re,C.Raycaster=Ch,C.RenderBundle=Xo,C.RenderMaterial=fi,C.RenderPass=pi,C.RenderPipelineEntry=rt,C.RenderTarget=vs,C.Sampler=Ke,C.SamplerBinding=jr,C.Scene=Tn,C.ShaderPass=Jo,C.SphereGeometry=vh,C.TargetsAnimationsManager=Ba,C.Texture=j,C.TextureBindGroup=ps,C.TextureBinding=cs,C.Vec2=z,C.Vec3=y,C.WritableBufferBinding=ds,C.buildShaders=Sa,C.common=Qe,C.constants=_e,C.getFragmentShaderCode=er,C.getLambert=Zo,C.getLambertFragmentShaderCode=Kn,C.getPBR=ih,C.getPbrFragmentShaderCode=ea,C.getPhong=Qo,C.getPhongFragmentShaderCode=Qn,C.getUnlitFragmentShaderCode=Xn,C.getVertexShaderCode=Js,C.lambertUtils=_i,C.toneMappingUtils=Ue});
//# sourceMappingURL=gpu-curtains.umd.min.js.map
