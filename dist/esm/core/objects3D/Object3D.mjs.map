{"version":3,"file":"Object3D.mjs","sources":["../../../../src/core/objects3D/Object3D.ts"],"sourcesContent":["import { Vec3 } from '../../math/Vec3'\nimport { Quat } from '../../math/Quat'\nimport { Mat4 } from '../../math/Mat4'\n\nlet objectIndex = 0\n\n/** Defines all kind of possible {@link Object3D} matrix types */\nexport type Object3DMatricesType = 'model' | 'world'\n\n/**\n * Defines an {@link Object3D} matrix object\n */\nexport interface Object3DTransformMatrix {\n  /** The {@link Mat4 | matrix} used */\n  matrix: Mat4\n  /** Whether we should update the {@link Mat4 | matrix} */\n  shouldUpdate: boolean\n  /** Function to update our {@link Mat4 | matrix} */\n  onUpdate: () => void\n}\n\n/** Defines all possible {@link Object3DTransformMatrix | matrix object} used by our {@link Object3D} */\nexport type Object3DMatrices = Record<Object3DMatricesType, Object3DTransformMatrix>\n\n/**\n * Defines all necessary {@link Vec3 | vectors}/{@link Quat | quaternions} to compute a 3D {@link Mat4 | model matrix}\n */\nexport interface Object3DTransforms {\n  /** Transformation origin object */\n  origin: {\n    /** Transformation origin {@link Vec3 | vector} relative to the {@link Object3D} */\n    model: Vec3\n  }\n  /** Model {@link Quat | quaternion} defining its rotation in 3D space */\n  quaternion: Quat\n  /** Model rotation {@link Vec3 | vector} used to compute its {@link Quat | quaternion} */\n  rotation: Vec3\n  /** Position object */\n  position: {\n    /** Position {@link Vec3 | vector} relative to the 3D world */\n    world: Vec3\n  }\n  /** Model 3D scale {@link Vec3 | vector} */\n  scale: Vec3\n}\n\n/**\n * Used to create an object with transformation properties such as position, scale, rotation and transform origin {@link Vec3 | vectors} and a {@link Quat | quaternion} in order to compute the {@link Object3D#modelMatrix | model matrix} and {@link Object3D#worldMatrix | world matrix}.\n *\n * If an {@link Object3D} does not have any {@link Object3D#parent | parent}, then its {@link Object3D#modelMatrix | model matrix} and {@link Object3D#worldMatrix | world matrix} are the same.\n *\n * The transformations {@link Vec3 | vectors} are reactive to changes, which mean that updating one of their components will automatically update the {@link Object3D#modelMatrix | model matrix} and {@link Object3D#worldMatrix | world matrix}.\n */\nexport class Object3D {\n  /** {@link Object3DTransforms | Transformation object} of the {@link Object3D} */\n  transforms: Object3DTransforms\n  /** {@link Object3DMatrices | Matrices object} of the {@link Object3D} */\n  matrices: Object3DMatrices\n\n  /** Parent {@link Object3D} in the scene graph, used to compute the {@link worldMatrix | world matrix} */\n  private _parent: null | Object3D\n  /** Children {@link Object3D} in the scene graph, used to compute their own {@link worldMatrix | world matrix} */\n  children: Object3D[]\n\n  /** Index (order of creation) of this {@link Object3D}. Used in the {@link parent} / {@link children} relation. */\n  object3DIndex: number\n\n  /**\n   * Object3D constructor\n   */\n  constructor() {\n    this.parent = null\n    this.children = []\n\n    Object.defineProperty(this as Object3D, 'object3DIndex', { value: objectIndex++ })\n\n    this.setMatrices()\n    this.setTransforms()\n  }\n\n  /* PARENT */\n\n  /**\n   * Get the parent of this {@link Object3D} if any\n   */\n  get parent(): Object3D | null {\n    return this._parent\n  }\n\n  /**\n   * Set the parent of this {@link Object3D}\n   * @param value - new parent to set, could be an {@link Object3D} or null\n   */\n  set parent(value: Object3D | null) {\n    if (this.parent) {\n      this.parent.children = this.parent.children.filter((child) => child.object3DIndex !== this.object3DIndex)\n    }\n    this._parent = value\n    this._parent?.children.push(this)\n  }\n\n  /* TRANSFORMS */\n\n  /**\n   * Set our transforms properties and {@link Vec3#onChange | vectors onChange} callbacks\n   */\n  setTransforms() {\n    this.transforms = {\n      origin: {\n        model: new Vec3(),\n      },\n      quaternion: new Quat(),\n      rotation: new Vec3(),\n      position: {\n        world: new Vec3(),\n      },\n      scale: new Vec3(1),\n    }\n\n    this.rotation.onChange(() => this.applyRotation())\n    this.position.onChange(() => this.applyPosition())\n    this.scale.onChange(() => this.applyScale())\n    this.transformOrigin.onChange(() => this.applyTransformOrigin())\n  }\n\n  /**\n   * Get our rotation {@link Vec3 | vector}\n   */\n  get rotation(): Vec3 {\n    return this.transforms.rotation\n  }\n\n  /**\n   * Set our rotation {@link Vec3 | vector}\n   * @param value - new rotation {@link Vec3 | vector}\n   */\n  set rotation(value: Vec3) {\n    this.transforms.rotation = value\n    this.applyRotation()\n  }\n\n  /**\n   * Get our {@link Quat | quaternion}\n   */\n  get quaternion(): Quat {\n    return this.transforms.quaternion\n  }\n\n  /**\n   * Set our {@link Quat | quaternion}\n   * @param value - new {@link Quat | quaternion}\n   */\n  set quaternion(value: Quat) {\n    this.transforms.quaternion = value\n  }\n\n  /**\n   * Get our position {@link Vec3 | vector}\n   */\n  get position(): Vec3 {\n    return this.transforms.position.world\n  }\n\n  /**\n   * Set our position {@link Vec3 | vector}\n   * @param value - new position {@link Vec3 | vector}\n   */\n  set position(value: Vec3) {\n    this.transforms.position.world = value\n  }\n\n  /**\n   * Get our scale {@link Vec3 | vector}\n   */\n  get scale(): Vec3 {\n    return this.transforms.scale\n  }\n\n  /**\n   * Set our scale {@link Vec3 | vector}\n   * @param value - new scale {@link Vec3 | vector}\n   */\n  set scale(value: Vec3) {\n    // force scale to 1 on Z axis\n    this.transforms.scale = value\n    this.applyScale()\n  }\n\n  /**\n   * Get our transform origin {@link Vec3 | vector}\n   */\n  get transformOrigin(): Vec3 {\n    return this.transforms.origin.model\n  }\n\n  /**\n   * Set our transform origin {@link Vec3 | vector}\n   * @param value - new transform origin {@link Vec3 | vector}\n   */\n  set transformOrigin(value: Vec3) {\n    this.transforms.origin.model = value\n  }\n\n  /**\n   * Apply our rotation and tell our {@link modelMatrix | model matrix} to update\n   */\n  applyRotation() {\n    this.quaternion.setFromVec3(this.rotation)\n\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Tell our {@link modelMatrix | model matrix} to update\n   */\n  applyPosition() {\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Tell our {@link modelMatrix | model matrix} to update\n   */\n  applyScale() {\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Tell our {@link modelMatrix | model matrix} to update\n   */\n  applyTransformOrigin() {\n    this.shouldUpdateModelMatrix()\n  }\n\n  /* MATRICES */\n\n  /**\n   * Set our {@link modelMatrix | model matrix} and {@link worldMatrix | world matrix}\n   */\n  setMatrices() {\n    this.matrices = {\n      model: {\n        matrix: new Mat4(),\n        shouldUpdate: false,\n        onUpdate: () => this.updateModelMatrix(),\n      },\n      world: {\n        matrix: new Mat4(),\n        shouldUpdate: false,\n        onUpdate: () => this.updateWorldMatrix(),\n      },\n    }\n  }\n\n  /**\n   * Get our {@link Mat4 | model matrix}\n   */\n  get modelMatrix(): Mat4 {\n    return this.matrices.model.matrix\n  }\n\n  /**\n   * Set our {@link Mat4 | model matrix}\n   * @param value - new {@link Mat4 | model matrix}\n   */\n  set modelMatrix(value: Mat4) {\n    this.matrices.model.matrix = value\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Set our {@link modelMatrix | model matrix} shouldUpdate flag to true (tell it to update)\n   */\n  shouldUpdateModelMatrix() {\n    this.matrices.model.shouldUpdate = true\n    this.shouldUpdateWorldMatrix()\n  }\n\n  /**\n   * Get our {@link Mat4 | world matrix}\n   */\n  get worldMatrix(): Mat4 {\n    return this.matrices.world.matrix\n  }\n\n  /**\n   * Set our {@link Mat4 | world matrix}\n   * @param value - new {@link Mat4 | world matrix}\n   */\n  set worldMatrix(value: Mat4) {\n    this.matrices.world.matrix = value\n    this.shouldUpdateWorldMatrix()\n  }\n\n  /**\n   * Set our {@link worldMatrix | world matrix} shouldUpdate flag to true (tell it to update)\n   */\n  shouldUpdateWorldMatrix() {\n    this.matrices.world.shouldUpdate = true\n  }\n\n  /**\n   * Rotate this {@link Object3D} so it looks at the {@link Vec3 | target}\n   * @param target - {@link Vec3 | target} to look at\n   */\n  lookAt(target: Vec3 = new Vec3()) {\n    const rotationMatrix = new Mat4().lookAt(target, this.position)\n    this.quaternion.setFromRotationMatrix(rotationMatrix)\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Update our {@link modelMatrix | model matrix}\n   */\n  updateModelMatrix() {\n    // compose our model transformation matrix from custom origin\n    this.modelMatrix = this.modelMatrix.composeFromOrigin(\n      this.position,\n      this.quaternion,\n      this.scale,\n      this.transformOrigin\n    )\n\n    // tell our world matrix to update\n    this.shouldUpdateWorldMatrix()\n  }\n\n  /**\n   * Update our {@link worldMatrix | model matrix}\n   */\n  updateWorldMatrix() {\n    if (!this.parent) {\n      this.worldMatrix.copy(this.modelMatrix)\n    } else {\n      this.worldMatrix.multiplyMatrices(this.parent.worldMatrix, this.modelMatrix)\n    }\n\n    // update the children world matrix as well\n    this.children.forEach((child) => {\n      child.shouldUpdateWorldMatrix()\n    })\n  }\n\n  /**\n   * Callback to run if at least one matrix of the stack has been updated\n   */\n  onAfterMatrixStackUpdate() {\n    /* will be used by the classes extending Object3D */\n  }\n\n  /**\n   * Check at each render whether we should update our matrices, and update them if needed\n   */\n  updateMatrixStack() {\n    // if it has a parent and it is an Object3D\n    // it means nothing updates it in the render loop, so do it from here\n    if (this.parent && this.parent.constructor.name === 'Object3D') {\n      this.parent.updateMatrixStack()\n    }\n\n    // check if at least one matrix should update\n    const matrixShouldUpdate = !!Object.keys(this.matrices).find((matrixName) => this.matrices[matrixName].shouldUpdate)\n\n    if (matrixShouldUpdate) {\n      for (const matrixName in this.matrices) {\n        if (this.matrices[matrixName].shouldUpdate) {\n          this.matrices[matrixName].onUpdate()\n          this.matrices[matrixName].shouldUpdate = false\n        }\n      }\n\n      // callback to run if at least one matrix of the stack has been updated\n      this.onAfterMatrixStackUpdate()\n    }\n  }\n}\n"],"names":[],"mappings":"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"}