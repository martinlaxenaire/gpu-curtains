{"version":3,"file":"ProjectedObject3D.mjs","sources":["../../../../src/core/objects3D/ProjectedObject3D.ts"],"sourcesContent":["import { Object3D, Object3DMatricesType, Object3DTransformMatrix } from './Object3D'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { CameraRenderer, isCameraRenderer } from '../renderers/utils'\r\nimport { Mat4 } from '../../math/Mat4'\r\nimport { Camera } from '../camera/Camera'\r\n\r\n/** Defines all kind of possible {@link ProjectedObject3D} matrix types */\r\nexport type ProjectedObject3DMatricesType = Object3DMatricesType | 'modelView' | 'modelViewProjection'\r\n/** Defines all possible {@link Object3DTransformMatrix | matrix object} used by our {@link ProjectedObject3D} */\r\nexport type ProjectedObject3DMatrices = Record<ProjectedObject3DMatricesType, Object3DTransformMatrix>\r\n\r\n/**\r\n * Used to apply the {@link Camera#projectionMatrix | projection} and {@link Camera#viewMatrix | view} matrices of a {@link Camera} to an {@link Object3D}, in order to compute {@link ProjectedObject3D#modelViewMatrix | modelView} and {@link ProjectedObject3D#modelViewProjectionMatrix | modelViewProjection} matrices.\r\n */\r\nexport class ProjectedObject3D extends Object3D {\r\n  /** {@link Camera | Camera} object used to compute {@link ProjectedObject3D#modelViewMatrix | model view} and {@link ProjectedObject3D#modelViewProjectionMatrix | model view projection} matrices */\r\n  camera: Camera\r\n\r\n  /** {@link ProjectedObject3DMatrices | Matrices object} of the {@link ProjectedObject3D} */\r\n  matrices: ProjectedObject3DMatrices\r\n\r\n  /**\r\n   * ProjectedObject3D constructor\r\n   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link ProjectedObject3D}\r\n   */\r\n  constructor(renderer: CameraRenderer | GPUCurtains) {\r\n    super()\r\n    // we could pass our curtains object OR our curtains renderer object\r\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as CameraRenderer)\r\n\r\n    isCameraRenderer(renderer, 'ProjectedObject3D')\r\n\r\n    this.camera = renderer.camera\r\n  }\r\n\r\n  /**\r\n   * Tell our projection matrix stack to update\r\n   */\r\n  applyPosition() {\r\n    super.applyPosition()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Tell our projection matrix stack to update\r\n   */\r\n  applyRotation() {\r\n    super.applyRotation()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Tell our projection matrix stack to update\r\n   */\r\n  applyScale() {\r\n    super.applyScale()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Tell our projection matrix stack to update\r\n   */\r\n  applyTransformOrigin() {\r\n    super.applyTransformOrigin()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Set our transform and projection matrices\r\n   */\r\n  setMatrices() {\r\n    super.setMatrices()\r\n\r\n    this.matrices = {\r\n      ...this.matrices,\r\n      modelView: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: false,\r\n        onUpdate: () => {\r\n          // our model view matrix is our model matrix multiplied with our camera view matrix\r\n          this.modelViewMatrix.multiplyMatrices(this.viewMatrix, this.worldMatrix)\r\n        },\r\n      },\r\n      modelViewProjection: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: false,\r\n        onUpdate: () => {\r\n          // our modelViewProjection matrix, useful for bounding box calculations and frustum culling\r\n          // this is the result of our projection matrix multiplied by our modelView matrix\r\n          this.modelViewProjectionMatrix.multiplyMatrices(this.projectionMatrix, this.modelViewMatrix)\r\n        },\r\n      },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get our {@link modelViewMatrix | model view matrix}\r\n   */\r\n  get modelViewMatrix(): Mat4 {\r\n    return this.matrices.modelView.matrix\r\n  }\r\n\r\n  /**\r\n   * Set our {@link modelViewMatrix | model view matrix}\r\n   * @param value - new {@link modelViewMatrix | model view matrix}\r\n   */\r\n  set modelViewMatrix(value: Mat4) {\r\n    this.matrices.modelView.matrix = value\r\n    this.matrices.modelView.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Get our {@link Camera#viewMatrix | camera view matrix}\r\n   * @readonly\r\n   */\r\n  get viewMatrix(): Mat4 {\r\n    return this.camera.viewMatrix\r\n  }\r\n\r\n  /**\r\n   * Get our {@link Camera#projectionMatrix | camera projection matrix}\r\n   * @readonly\r\n   */\r\n  get projectionMatrix(): Mat4 {\r\n    return this.camera.projectionMatrix\r\n  }\r\n\r\n  /**\r\n   * Get our {@link modelViewProjectionMatrix | model view projection matrix}\r\n   */\r\n  get modelViewProjectionMatrix(): Mat4 {\r\n    return this.matrices.modelViewProjection.matrix\r\n  }\r\n\r\n  /**\r\n   * Set our {@link modelViewProjectionMatrix | model view projection matrix}\r\n   * @param value - new {@link modelViewProjectionMatrix | model view projection matrix}s\r\n   */\r\n  set modelViewProjectionMatrix(value: Mat4) {\r\n    this.matrices.modelViewProjection.matrix = value\r\n    this.matrices.modelViewProjection.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Set our projection matrices shouldUpdate flags to true (tell them to update)\r\n   */\r\n  shouldUpdateProjectionMatrixStack() {\r\n    this.matrices.modelView.shouldUpdate = true\r\n    this.matrices.modelViewProjection.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * When the world matrix update, tell our projection matrix to update as well\r\n   */\r\n  shouldUpdateWorldMatrix() {\r\n    super.shouldUpdateWorldMatrix()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n\r\n  /**\r\n   * Tell all our matrices to update\r\n   */\r\n  shouldUpdateMatrixStack() {\r\n    this.shouldUpdateModelMatrix()\r\n    this.shouldUpdateProjectionMatrixStack()\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}