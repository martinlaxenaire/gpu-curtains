{"version":3,"file":"Binding.mjs","sources":["../../../../src/core/bindings/Binding.ts"],"sourcesContent":["import { toCamelCase } from '../../utils/utils'\nimport { MaterialShadersType } from '../../types/Materials'\nimport { TextureBinding } from './TextureBinding'\nimport { SamplerBinding } from './SamplerBinding'\n\n/** Defines all kind of texture binding types */\nexport type TextureBindingType = 'texture' | 'externalTexture' | 'storage' | 'depth'\n/** Defines all kind of binding types  */\nexport type BindingType = 'uniform' | 'storage' | TextureBindingType | 'sampler'\n\n// see https://www.w3.org/TR/WGSL/#memory-access-mode\n/** Defines buffer binding memory access types (read only or read/write) */\nexport type BufferBindingMemoryAccessType = 'read' | 'read_write'\n/** Defines texture binding memory access types (read only, write only or read/write) */\nexport type BindingMemoryAccessType = BufferBindingMemoryAccessType | 'write'\n\n/**\n * Defines all kind of {@link Binding} that are related to textures or samplers\n */\nexport type TextureSamplerBindings = TextureBinding | SamplerBinding\n\n/**\n * An object defining all possible {@link Binding} class instancing parameters\n */\nexport interface BindingParams {\n  /** {@link Binding} label */\n  label?: string\n  /** {@link Binding} name/key */\n  name?: string\n  /** {@link BindingType | binding type} to use with this {@link Binding} */\n  bindingType?: BindingType\n  /** {@link Binding} variables shaders visibility */\n  visibility?: MaterialShadersType | null\n}\n\n/**\n * Used as a shell to build actual bindings upon, like {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}, {@link core/bindings/WritableBufferBinding.WritableBufferBinding | WritableBufferBinding}, {@link TextureBinding} and {@link SamplerBinding}.\n *\n * Ultimately the goal of a {@link Binding} element is to provide correct resources for {@link GPUBindGroupLayoutEntry} and {@link GPUBindGroupEntry}\n *\n * ## WGSL\n *\n * Each {@link Binding} creates its own WGSL code snippet variable declaration, using structured types or not.\n */\nexport class Binding {\n  /** The label of the {@link Binding} */\n  label: string\n  /** The name/key of the {@link Binding} */\n  name: string\n  /** The binding type of the {@link Binding} */\n  bindingType: BindingType\n  /** The visibility of the {@link Binding} in the shaders */\n  visibility: GPUShaderStageFlags\n  /** Options used to create this {@link Binding} */\n  options: BindingParams\n\n  /** Flag indicating whether we should recreate the parentMesh {@link core/bindGroups/BindGroup.BindGroup#bindGroup | bind group}, usually when a resource has changed */\n  shouldResetBindGroup: boolean\n  /** Flag indicating whether we should recreate the parentMesh {@link core/bindGroups/BindGroup.BindGroup#bindGroupLayout | GPU bind group layout}, usually when a resource layout has changed */\n  shouldResetBindGroupLayout: boolean\n\n  /**\n   * Binding constructor\n   * @param parameters - {@link BindingParams | parameters} used to create our {@link Binding}\n   */\n  constructor({ label = 'Uniform', name = 'uniform', bindingType = 'uniform', visibility }: BindingParams) {\n    this.label = label\n    this.name = toCamelCase(name)\n    this.bindingType = bindingType\n\n    this.visibility = visibility\n      ? (() => {\n          switch (visibility) {\n            case 'vertex':\n              return GPUShaderStage.VERTEX\n            case 'fragment':\n              return GPUShaderStage.FRAGMENT\n            case 'compute':\n              return GPUShaderStage.COMPUTE\n            default:\n              return GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE\n          }\n        })()\n      : GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE\n\n    this.options = {\n      label,\n      name,\n      bindingType,\n      visibility,\n    }\n\n    this.shouldResetBindGroup = false\n    this.shouldResetBindGroupLayout = false\n  }\n}\n"],"names":[],"mappings":";;AA4CO,MAAM,OAAQ,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAqBnB,WAAA,CAAY,EAAE,KAAQ,GAAA,SAAA,EAAW,OAAO,SAAW,EAAA,WAAA,GAAc,SAAW,EAAA,UAAA,EAA6B,EAAA;AACvG,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AACb,IAAK,IAAA,CAAA,IAAA,GAAO,YAAY,IAAI,CAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,WAAc,GAAA,WAAA,CAAA;AAEnB,IAAK,IAAA,CAAA,UAAA,GAAa,cACb,MAAM;AACL,MAAA,QAAQ,UAAY;AAAA,QAClB,KAAK,QAAA;AACH,UAAA,OAAO,cAAe,CAAA,MAAA,CAAA;AAAA,QACxB,KAAK,UAAA;AACH,UAAA,OAAO,cAAe,CAAA,QAAA,CAAA;AAAA,QACxB,KAAK,SAAA;AACH,UAAA,OAAO,cAAe,CAAA,OAAA,CAAA;AAAA,QACxB;AACE,UAAA,OAAO,cAAe,CAAA,MAAA,GAAS,cAAe,CAAA,QAAA,GAAW,cAAe,CAAA,OAAA,CAAA;AAAA,OAC5E;AAAA,QAEF,GAAA,cAAA,CAAe,MAAS,GAAA,cAAA,CAAe,WAAW,cAAe,CAAA,OAAA,CAAA;AAErE,IAAA,IAAA,CAAK,OAAU,GAAA;AAAA,MACb,KAAA;AAAA,MACA,IAAA;AAAA,MACA,WAAA;AAAA,MACA,UAAA;AAAA,KACF,CAAA;AAEA,IAAA,IAAA,CAAK,oBAAuB,GAAA,KAAA,CAAA;AAC5B,IAAA,IAAA,CAAK,0BAA6B,GAAA,KAAA,CAAA;AAAA,GACpC;AACF;;;;"}