{"version":3,"file":"utils.mjs","sources":["../../../../src/core/bindings/utils.ts"],"sourcesContent":["import { BindingType } from './Binding'\nimport { BufferBinding } from './BufferBinding'\nimport { TextureBinding } from './TextureBinding'\n\n/** Defines a typed array */\nexport type TypedArray =\n  | Int8Array\n  | Uint8Array\n  | Uint8ClampedArray\n  | Int16Array\n  | Uint16Array\n  | Int32Array\n  | Uint32Array\n  | Float32Array\n  | Float64Array\n\n/** Defines a typed array constructor */\nexport type TypedArrayConstructor =\n  | Int8ArrayConstructor\n  | Uint8ArrayConstructor\n  | Int16ArrayConstructor\n  | Uint16ArrayConstructor\n  | Int32ArrayConstructor\n  | Uint32ArrayConstructor\n  | Float32ArrayConstructor\n  | Float64ArrayConstructor\n\n/** Defines the possible WGSL variable types */\nexport type WGSLVariableType = string // TODO 'mat4x4f', 'mat3x3f', 'vec3f', 'vec2f', 'f32' etc\n\n/**\n * Defines a {@link BufferLayout} object used to pad our {@link GPUBuffer} arrays\n */\nexport type BufferLayout = {\n  /** Number of elements hold by this variable type */\n  numElements: number\n  /** Required alignment by this variable type */\n  align: number\n  /** Size in bytes of this variable type */\n  size: number\n  /** Variable type */\n  type: WGSLVariableType\n  /** Typed array constructor required by this variable type */\n  View: TypedArrayConstructor\n  /** Pad values required by this variable type */\n  pad?: number[]\n}\n\n// from https://github.com/greggman/webgpu-utils/blob/main/src/buffer-views.ts\n/**\n * Get the correct [buffer layout]{@link BufferLayout} for given [variable type]{@link WGSLVariableType}\n * @param bufferType - [variable type]{@link WGSLVariableType} to use\n * @returns - the [buffer layout]{@link BufferLayout}\n */\nexport const getBufferLayout = (bufferType: WGSLVariableType): BufferLayout => {\n  const bufferLayouts = {\n    i32: { numElements: 1, align: 4, size: 4, type: 'i32', View: Int32Array },\n    u32: { numElements: 1, align: 4, size: 4, type: 'u32', View: Uint32Array },\n    f32: { numElements: 1, align: 4, size: 4, type: 'f32', View: Float32Array },\n    f16: { numElements: 1, align: 2, size: 2, type: 'u16', View: Uint16Array },\n\n    vec2f: { numElements: 2, align: 8, size: 8, type: 'f32', View: Float32Array },\n    vec2i: { numElements: 2, align: 8, size: 8, type: 'i32', View: Int32Array },\n    vec2u: { numElements: 2, align: 8, size: 8, type: 'u32', View: Uint32Array },\n    vec2h: { numElements: 2, align: 4, size: 4, type: 'u16', View: Uint16Array },\n    vec3i: { numElements: 3, align: 16, size: 12, type: 'i32', View: Int32Array },\n    vec3u: { numElements: 3, align: 16, size: 12, type: 'u32', View: Uint32Array },\n    vec3f: { numElements: 3, align: 16, size: 12, type: 'f32', View: Float32Array },\n    vec3h: { numElements: 3, align: 8, size: 6, type: 'u16', View: Uint16Array },\n    vec4i: { numElements: 4, align: 16, size: 16, type: 'i32', View: Int32Array },\n    vec4u: { numElements: 4, align: 16, size: 16, type: 'u32', View: Uint32Array },\n    vec4f: { numElements: 4, align: 16, size: 16, type: 'f32', View: Float32Array },\n    vec4h: { numElements: 4, align: 8, size: 8, type: 'u16', View: Uint16Array },\n\n    // AlignOf(vecR)\tSizeOf(array<vecR, C>)\n    mat2x2f: { numElements: 4, align: 8, size: 16, type: 'f32', View: Float32Array },\n    mat2x2h: { numElements: 4, align: 4, size: 8, type: 'u16', View: Uint16Array },\n    mat3x2f: { numElements: 6, align: 8, size: 24, type: 'f32', View: Float32Array },\n    mat3x2h: { numElements: 6, align: 4, size: 12, type: 'u16', View: Uint16Array },\n    mat4x2f: { numElements: 8, align: 8, size: 32, type: 'f32', View: Float32Array },\n    mat4x2h: { numElements: 8, align: 4, size: 16, type: 'u16', View: Uint16Array },\n    mat2x3f: { numElements: 8, align: 16, size: 32, pad: [3, 1], type: 'f32', View: Float32Array },\n    mat2x3h: { numElements: 8, align: 8, size: 16, pad: [3, 1], type: 'u16', View: Uint16Array },\n    mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n    mat3x3h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n    mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: 'f32', View: Float32Array },\n    mat4x3h: { numElements: 16, align: 8, size: 32, pad: [3, 1], type: 'u16', View: Uint16Array },\n    mat2x4f: { numElements: 8, align: 16, size: 32, type: 'f32', View: Float32Array },\n    mat2x4h: { numElements: 8, align: 8, size: 16, type: 'u16', View: Uint16Array },\n    mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: 'f32', View: Float32Array },\n    mat3x4h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: 'u16', View: Uint16Array },\n    mat4x4f: { numElements: 16, align: 16, size: 64, type: 'f32', View: Float32Array },\n    mat4x4h: { numElements: 16, align: 8, size: 32, type: 'u16', View: Uint16Array },\n  }\n\n  return bufferLayouts[bufferType]\n}\n\n/**\n * Get the correct WGSL variable declaration code fragment based on the given [buffer binding]{@link BufferBinding}\n * @param binding - [buffer binding]{@link BufferBinding} to use\n * @returns - WGSL variable declaration code fragment\n */\nexport const getBindingWGSLVarType = (binding: BufferBinding): string => {\n  return (() => {\n    switch (binding.bindingType) {\n      case 'storage':\n        return `var<${binding.bindingType}, ${binding.options.access}>`\n      case 'uniform':\n      default:\n        return 'var<uniform>'\n    }\n  })()\n}\n\n/**\n * Get the correct WGSL variable declaration code fragment based on the given [texture binding]{@link TextureBinding}\n * @param binding - [texture binding]{@link TextureBinding} to use\n * @returns - WGSL variable declaration code fragment\n */\nexport const getTextureBindingWGSLVarType = (binding: TextureBinding): string => {\n  if (binding.bindingType === 'externalTexture') {\n    return `var ${binding.name}: texture_external;`\n  }\n\n  return binding.bindingType === 'storage'\n    ? `var ${binding.name}: texture_storage_${binding.options.viewDimension}<${binding.options.format}, ${binding.options.access}>;`\n    : binding.bindingType === 'depth'\n    ? `var ${binding.name}: texture_depth${binding.options.multisampled ? '_multisampled' : ''}_${\n        binding.options.viewDimension\n      };`\n    : `var ${binding.name}: texture${binding.options.multisampled ? '_multisampled' : ''}_${\n        binding.options.viewDimension\n      }<f32>;`\n}\n\n/**\n * Get the correct [bind group layout]{@link GPUBindGroupLayout} resource type based on the given [binding type]{@link BindingType}\n * @param binding - [buffer binding]{@link BufferBinding} to use\n * @returns - {@link GPUBindGroupLayout | bind group layout} resource type\n */\nexport const getBindGroupLayoutBindingType = (binding: BufferBinding): GPUBufferBindingType => {\n  if (binding.bindingType === 'storage' && binding.options.access === 'read_write') {\n    return 'storage'\n  } else if (binding.bindingType === 'storage') {\n    return 'read-only-storage'\n  } else {\n    return 'uniform'\n  }\n}\n\n/**\n * Get the correct [bind group layout]{@link GPUBindGroupLayout} resource type based on the given [texture binding type]{@link BindingType}\n * @param binding - [texture binding]{@link TextureBinding} to use\n * @returns - [bind group layout]{@link GPUBindGroupLayout} resource type\n */\nexport const getBindGroupLayoutTextureBindingType = (\n  binding: TextureBinding\n): GPUTextureBindingLayout | GPUExternalTextureBindingLayout | GPUStorageTextureBindingLayout | null => {\n  return (() => {\n    switch (binding.bindingType) {\n      case 'externalTexture':\n        return { externalTexture: {} }\n      case 'storage':\n        return {\n          storageTexture: {\n            format: binding.options.format,\n            viewDimension: binding.options.viewDimension,\n          } as GPUStorageTextureBindingLayout,\n        }\n      case 'texture':\n        return {\n          texture: {\n            multisampled: binding.options.multisampled,\n            viewDimension: binding.options.viewDimension,\n            sampleType: binding.options.multisampled ? 'unfilterable-float' : 'float',\n          } as GPUTextureBindingLayout,\n        }\n      case 'depth':\n        return {\n          texture: {\n            multisampled: binding.options.multisampled,\n            format: binding.options.format,\n            viewDimension: binding.options.viewDimension,\n            sampleType: 'depth',\n          } as GPUTextureBindingLayout,\n        }\n      default:\n        return null\n    }\n  })()\n}\n"],"names":[],"mappings":"AAsDa,MAAA,eAAA,GAAkB,CAAC,UAA+C,KAAA;AAC7E,EAAA,MAAM,aAAgB,GAAA;AAAA,IACpB,GAAA,EAAK,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,UAAW,EAAA;AAAA,IACxE,GAAA,EAAK,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IACzE,GAAA,EAAK,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,YAAa,EAAA;AAAA,IAC1E,GAAA,EAAK,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAEzE,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,YAAa,EAAA;AAAA,IAC5E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,UAAW,EAAA;AAAA,IAC1E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAC3E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAC3E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,UAAW,EAAA;AAAA,IAC5E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAC7E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,YAAa,EAAA;AAAA,IAC9E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAC3E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,UAAW,EAAA;AAAA,IAC5E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAC7E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,YAAa,EAAA;AAAA,IAC9E,KAAA,EAAO,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA;AAAA,IAG3E,OAAA,EAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,YAAa,EAAA;AAAA,IAC/E,OAAA,EAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,CAAG,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAC7E,OAAA,EAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,YAAa,EAAA;AAAA,IAC/E,OAAA,EAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAC9E,OAAA,EAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,YAAa,EAAA;AAAA,IAC/E,OAAA,EAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAC9E,SAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,IAAI,IAAM,EAAA,EAAA,EAAI,GAAK,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,MAAM,YAAa,EAAA;AAAA,IAC7F,SAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,GAAG,IAAM,EAAA,EAAA,EAAI,GAAK,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,MAAM,WAAY,EAAA;AAAA,IAC3F,SAAS,EAAE,WAAA,EAAa,EAAI,EAAA,KAAA,EAAO,IAAI,IAAM,EAAA,EAAA,EAAI,GAAK,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,MAAM,YAAa,EAAA;AAAA,IAC9F,SAAS,EAAE,WAAA,EAAa,EAAI,EAAA,KAAA,EAAO,GAAG,IAAM,EAAA,EAAA,EAAI,GAAK,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,MAAM,WAAY,EAAA;AAAA,IAC5F,SAAS,EAAE,WAAA,EAAa,EAAI,EAAA,KAAA,EAAO,IAAI,IAAM,EAAA,EAAA,EAAI,GAAK,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,MAAM,YAAa,EAAA;AAAA,IAC9F,SAAS,EAAE,WAAA,EAAa,EAAI,EAAA,KAAA,EAAO,GAAG,IAAM,EAAA,EAAA,EAAI,GAAK,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,MAAM,WAAY,EAAA;AAAA,IAC5F,OAAA,EAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,YAAa,EAAA;AAAA,IAChF,OAAA,EAAS,EAAE,WAAA,EAAa,CAAG,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,IAC9E,SAAS,EAAE,WAAA,EAAa,EAAI,EAAA,KAAA,EAAO,IAAI,IAAM,EAAA,EAAA,EAAI,GAAK,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,MAAM,YAAa,EAAA;AAAA,IAC9F,SAAS,EAAE,WAAA,EAAa,EAAI,EAAA,KAAA,EAAO,GAAG,IAAM,EAAA,EAAA,EAAI,GAAK,EAAA,CAAC,GAAG,CAAC,CAAA,EAAG,IAAM,EAAA,KAAA,EAAO,MAAM,WAAY,EAAA;AAAA,IAC5F,OAAA,EAAS,EAAE,WAAA,EAAa,EAAI,EAAA,KAAA,EAAO,EAAI,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,YAAa,EAAA;AAAA,IACjF,OAAA,EAAS,EAAE,WAAA,EAAa,EAAI,EAAA,KAAA,EAAO,CAAG,EAAA,IAAA,EAAM,EAAI,EAAA,IAAA,EAAM,KAAO,EAAA,IAAA,EAAM,WAAY,EAAA;AAAA,GACjF,CAAA;AAEA,EAAA,OAAO,cAAc,UAAU,CAAA,CAAA;AACjC,EAAA;AAOa,MAAA,qBAAA,GAAwB,CAAC,OAAmC,KAAA;AACvE,EAAA,OAAA,CAAQ,MAAM;AACZ,IAAA,QAAQ,QAAQ,WAAa;AAAA,MAC3B,KAAK,SAAA;AACH,QAAA,OAAO,OAAO,OAAQ,CAAA,WAAW,CAAK,EAAA,EAAA,OAAA,CAAQ,QAAQ,MAAM,CAAA,CAAA,CAAA,CAAA;AAAA,MAC9D,KAAK,SAAA,CAAA;AAAA,MACL;AACE,QAAO,OAAA,cAAA,CAAA;AAAA,KACX;AAAA,GACC,GAAA,CAAA;AACL,EAAA;AAOa,MAAA,4BAAA,GAA+B,CAAC,OAAoC,KAAA;AAC/E,EAAI,IAAA,OAAA,CAAQ,gBAAgB,iBAAmB,EAAA;AAC7C,IAAO,OAAA,CAAA,IAAA,EAAO,QAAQ,IAAI,CAAA,mBAAA,CAAA,CAAA;AAAA,GAC5B;AAEA,EAAO,OAAA,OAAA,CAAQ,gBAAgB,SAC3B,GAAA,CAAA,IAAA,EAAO,QAAQ,IAAI,CAAA,kBAAA,EAAqB,OAAQ,CAAA,OAAA,CAAQ,aAAa,CAAA,CAAA,EAAI,QAAQ,OAAQ,CAAA,MAAM,KAAK,OAAQ,CAAA,OAAA,CAAQ,MAAM,CAC1H,EAAA,CAAA,GAAA,OAAA,CAAQ,WAAgB,KAAA,OAAA,GACxB,CAAO,IAAA,EAAA,OAAA,CAAQ,IAAI,CAAkB,eAAA,EAAA,OAAA,CAAQ,QAAQ,YAAe,GAAA,eAAA,GAAkB,EAAE,CACtF,CAAA,EAAA,OAAA,CAAQ,OAAQ,CAAA,aAClB,CACA,CAAA,CAAA,GAAA,CAAA,IAAA,EAAO,QAAQ,IAAI,CAAA,SAAA,EAAY,QAAQ,OAAQ,CAAA,YAAA,GAAe,kBAAkB,EAAE,CAAA,CAAA,EAChF,OAAQ,CAAA,OAAA,CAAQ,aAClB,CAAA,MAAA,CAAA,CAAA;AACN,EAAA;AAOa,MAAA,6BAAA,GAAgC,CAAC,OAAiD,KAAA;AAC7F,EAAA,IAAI,QAAQ,WAAgB,KAAA,SAAA,IAAa,OAAQ,CAAA,OAAA,CAAQ,WAAW,YAAc,EAAA;AAChF,IAAO,OAAA,SAAA,CAAA;AAAA,GACT,MAAA,IAAW,OAAQ,CAAA,WAAA,KAAgB,SAAW,EAAA;AAC5C,IAAO,OAAA,mBAAA,CAAA;AAAA,GACF,MAAA;AACL,IAAO,OAAA,SAAA,CAAA;AAAA,GACT;AACF,EAAA;AAOa,MAAA,oCAAA,GAAuC,CAClD,OACsG,KAAA;AACtG,EAAA,OAAA,CAAQ,MAAM;AACZ,IAAA,QAAQ,QAAQ,WAAa;AAAA,MAC3B,KAAK,iBAAA;AACH,QAAO,OAAA,EAAE,eAAiB,EAAA,EAAG,EAAA,CAAA;AAAA,MAC/B,KAAK,SAAA;AACH,QAAO,OAAA;AAAA,UACL,cAAgB,EAAA;AAAA,YACd,MAAA,EAAQ,QAAQ,OAAQ,CAAA,MAAA;AAAA,YACxB,aAAA,EAAe,QAAQ,OAAQ,CAAA,aAAA;AAAA,WACjC;AAAA,SACF,CAAA;AAAA,MACF,KAAK,SAAA;AACH,QAAO,OAAA;AAAA,UACL,OAAS,EAAA;AAAA,YACP,YAAA,EAAc,QAAQ,OAAQ,CAAA,YAAA;AAAA,YAC9B,aAAA,EAAe,QAAQ,OAAQ,CAAA,aAAA;AAAA,YAC/B,UAAY,EAAA,OAAA,CAAQ,OAAQ,CAAA,YAAA,GAAe,oBAAuB,GAAA,OAAA;AAAA,WACpE;AAAA,SACF,CAAA;AAAA,MACF,KAAK,OAAA;AACH,QAAO,OAAA;AAAA,UACL,OAAS,EAAA;AAAA,YACP,YAAA,EAAc,QAAQ,OAAQ,CAAA,YAAA;AAAA,YAC9B,MAAA,EAAQ,QAAQ,OAAQ,CAAA,MAAA;AAAA,YACxB,aAAA,EAAe,QAAQ,OAAQ,CAAA,aAAA;AAAA,YAC/B,UAAY,EAAA,OAAA;AAAA,WACd;AAAA,SACF,CAAA;AAAA,MACF;AACE,QAAO,OAAA,IAAA,CAAA;AAAA,KACX;AAAA,GACC,GAAA,CAAA;AACL;;;;"}