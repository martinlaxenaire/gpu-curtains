{"version":3,"file":"TextureBinding.mjs","sources":["../../../../src/core/bindings/TextureBinding.ts"],"sourcesContent":["import { Binding, BindingMemoryAccessType, BindingParams, BindingType } from './Binding'\nimport { getBindGroupLayoutTextureBindingType, getTextureBindingWGSLVarType } from './utils'\n\n/** Defines a {@link TextureBinding} {@link TextureBinding#resource | resource} */\nexport type TextureBindingResource = GPUTexture | GPUExternalTexture | null\n\n/**\n * An object defining all possible {@link TextureBinding} class instancing parameters\n */\nexport interface TextureBindingParams extends BindingParams {\n  /** {@link TextureBinding} {@link TextureBinding#resource | resource} */\n  texture: TextureBindingResource\n  /** The {@link GPUTexture | texture} format to use */\n  format?: GPUTextureFormat\n  /** The storage {@link GPUTexture | texture} binding memory access types (read only, write only or read/write) */\n  access?: BindingMemoryAccessType\n  /** The {@link GPUTexture | texture} view dimension to use */\n  viewDimension?: GPUTextureViewDimension\n  /** Whethe the {@link GPUTexture | texture} is a multisampled texture. Mainly used internally by depth textures if needed. */\n  multisampled?: boolean\n}\n\n/**\n * Used to handle {@link GPUTexture} and {@link GPUExternalTexture} bindings.\n *\n * Provide both {@link TextureBinding#resourceLayout | resourceLayout} and {@link TextureBinding#resource | resource} to the {@link GPUBindGroupLayout} and {@link GPUBindGroup}.<br>\n * Also create the appropriate WGSL code snippet to add to the shaders.\n */\nexport class TextureBinding extends Binding {\n  /** Our {@link TextureBinding} resource, i.e. a {@link GPUTexture} or {@link GPUExternalTexture} */\n  texture: TextureBindingResource\n  /** An array of strings to append to our shaders code declaring all the WGSL variables representing this {@link TextureBinding} */\n  wgslGroupFragment: string[]\n  /** Options used to create this {@link TextureBinding} */\n  options: TextureBindingParams\n\n  /**\n   * TextureBinding constructor\n   * @param parameters - {@link TextureBindingParams | parameters} used to create our {@link TextureBinding}\n   */\n  constructor({\n    label = 'Texture',\n    name = 'texture',\n    bindingType,\n    visibility,\n    texture,\n    format = 'rgba8unorm',\n    access = 'write',\n    viewDimension = '2d',\n    multisampled = false,\n  }: TextureBindingParams) {\n    bindingType = bindingType ?? 'texture'\n\n    if (bindingType === 'storage') {\n      visibility = 'compute'\n    }\n\n    super({ label, name, bindingType, visibility })\n\n    this.options = {\n      ...this.options,\n      texture,\n      format,\n      access,\n      viewDimension,\n      multisampled,\n    }\n\n    this.resource = texture // should be a texture or an external texture\n\n    this.setWGSLFragment()\n  }\n\n  /**\n   * Get bind group layout entry resource, either for {@link GPUBindGroupLayoutEntry#texture | texture} or {@link GPUBindGroupLayoutEntry#externalTexture | external texture}\n   * @readonly\n   */\n  get resourceLayout():\n    | GPUTextureBindingLayout\n    | GPUExternalTextureBindingLayout\n    | GPUStorageTextureBindingLayout\n    | null {\n    return getBindGroupLayoutTextureBindingType(this)\n  }\n\n  /**\n   * Get the {@link GPUBindGroupEntry#resource | bind group resource}\n   */\n  get resource(): GPUExternalTexture | GPUTextureView | null {\n    return this.texture instanceof GPUTexture\n      ? this.texture.createView({ label: this.options.label + ' view' })\n      : this.texture instanceof GPUExternalTexture\n      ? this.texture\n      : null\n  }\n\n  /**\n   * Set the {@link GPUBindGroupEntry#resource | bind group resource}\n   * @param value - new bind group resource\n   */\n  set resource(value: TextureBindingResource) {\n    // resource changed, update bind group!\n    if (value || this.texture) this.shouldResetBindGroup = true\n    this.texture = value\n  }\n\n  /**\n   * Set or update our {@link Binding#bindingType | bindingType} and our WGSL code snippet\n   * @param bindingType - the new {@link Binding#bindingType | binding type}\n   */\n  setBindingType(bindingType: BindingType) {\n    if (bindingType !== this.bindingType) {\n      // binding type has changed!\n      if (bindingType) this.shouldResetBindGroupLayout = true\n\n      this.bindingType = bindingType\n      this.setWGSLFragment()\n    }\n  }\n\n  /**\n   * Set the correct WGSL code snippet.\n   */\n  setWGSLFragment() {\n    this.wgslGroupFragment = [`${getTextureBindingWGSLVarType(this)}`]\n  }\n}\n"],"names":[],"mappings":";;;AA4BO,MAAM,uBAAuB,OAAQ,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAY1C,WAAY,CAAA;AAAA,IACV,KAAQ,GAAA,SAAA;AAAA,IACR,IAAO,GAAA,SAAA;AAAA,IACP,WAAA;AAAA,IACA,UAAA;AAAA,IACA,OAAA;AAAA,IACA,MAAS,GAAA,YAAA;AAAA,IACT,MAAS,GAAA,OAAA;AAAA,IACT,aAAgB,GAAA,IAAA;AAAA,IAChB,YAAe,GAAA,KAAA;AAAA,GACQ,EAAA;AACvB,IAAA,WAAA,GAAc,WAAe,IAAA,SAAA,CAAA;AAE7B,IAAA,IAAI,gBAAgB,SAAW,EAAA;AAC7B,MAAa,UAAA,GAAA,SAAA,CAAA;AAAA,KACf;AAEA,IAAA,KAAA,CAAM,EAAE,KAAA,EAAO,IAAM,EAAA,WAAA,EAAa,YAAY,CAAA,CAAA;AAE9C,IAAA,IAAA,CAAK,OAAU,GAAA;AAAA,MACb,GAAG,IAAK,CAAA,OAAA;AAAA,MACR,OAAA;AAAA,MACA,MAAA;AAAA,MACA,MAAA;AAAA,MACA,aAAA;AAAA,MACA,YAAA;AAAA,KACF,CAAA;AAEA,IAAA,IAAA,CAAK,QAAW,GAAA,OAAA,CAAA;AAEhB,IAAA,IAAA,CAAK,eAAgB,EAAA,CAAA;AAAA,GACvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,cAIK,GAAA;AACP,IAAA,OAAO,qCAAqC,IAAI,CAAA,CAAA;AAAA,GAClD;AAAA;AAAA;AAAA;AAAA,EAKA,IAAI,QAAuD,GAAA;AACzD,IAAA,OAAO,KAAK,OAAmB,YAAA,UAAA,GAC3B,KAAK,OAAQ,CAAA,UAAA,CAAW,EAAE,KAAO,EAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,GAAQ,SAAS,CAAA,GAC/D,KAAK,OAAmB,YAAA,kBAAA,GACxB,KAAK,OACL,GAAA,IAAA,CAAA;AAAA,GACN;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,SAAS,KAA+B,EAAA;AAE1C,IAAA,IAAI,SAAS,IAAK,CAAA,OAAA;AAAS,MAAA,IAAA,CAAK,oBAAuB,GAAA,IAAA,CAAA;AACvD,IAAA,IAAA,CAAK,OAAU,GAAA,KAAA,CAAA;AAAA,GACjB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,eAAe,WAA0B,EAAA;AACvC,IAAI,IAAA,WAAA,KAAgB,KAAK,WAAa,EAAA;AAEpC,MAAI,IAAA,WAAA;AAAa,QAAA,IAAA,CAAK,0BAA6B,GAAA,IAAA,CAAA;AAEnD,MAAA,IAAA,CAAK,WAAc,GAAA,WAAA,CAAA;AACnB,MAAA,IAAA,CAAK,eAAgB,EAAA,CAAA;AAAA,KACvB;AAAA,GACF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAkB,GAAA;AAChB,IAAA,IAAA,CAAK,oBAAoB,CAAC,CAAA,EAAG,4BAA6B,CAAA,IAAI,CAAC,CAAE,CAAA,CAAA,CAAA;AAAA,GACnE;AACF;;;;"}