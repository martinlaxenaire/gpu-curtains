{"version":3,"file":"RenderPass.mjs","sources":["../../../../src/core/renderPasses/RenderPass.ts"],"sourcesContent":["import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { generateUUID } from '../../utils/utils'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { RenderTexture } from '../textures/RenderTexture'\r\n\r\n/** Define the parameters of a color attachment */\r\nexport interface ColorAttachmentParams {\r\n  /** The {@link GPULoadOp | load operation} to perform while drawing this {@link RenderPass} */\r\n  loadOp?: GPULoadOp\r\n  /** The {@link GPUStoreOp | store operation} to perform while drawing this {@link RenderPass} */\r\n  storeOp?: GPUStoreOp\r\n  /** The {@link GPUColor | color values} to clear to before drawing this {@link RenderPass} */\r\n  clearValue?: GPUColor\r\n  /** Optional format of the color attachment texture */\r\n  targetFormat: GPUTextureFormat\r\n}\r\n\r\n/**\r\n * Parameters used to create this {@link RenderPass}\r\n */\r\nexport interface RenderPassParams {\r\n  /** The label of the {@link RenderPass}, sent to various GPU objects for debugging purpose */\r\n  label?: string\r\n\r\n  /** Whether the {@link RenderPass | view and depth textures} should use multisampling or not */\r\n  sampleCount?: GPUSize32\r\n\r\n  /** Force all the {@link RenderPass} textures size to be set to the given ratio of the {@link core/renderers/GPURenderer.GPURenderer#displayBoundingRect | renderer display bounding rectangle}. Used mainly to shrink the rendered definition. */\r\n  qualityRatio?: number\r\n\r\n  /** Whether this {@link RenderPass} should handle a view texture */\r\n  useColorAttachments?: boolean\r\n  /** Whether the main (first {@link colorAttachments}) view texture should be updated each frame */\r\n  shouldUpdateView?: boolean\r\n  /** The {@link GPULoadOp | load operation} to perform while drawing this {@link RenderPass} */\r\n  loadOp?: GPULoadOp\r\n  /** The {@link GPUStoreOp | store operation} to perform while drawing this {@link RenderPass} */\r\n  storeOp?: GPUStoreOp\r\n  /** The {@link GPUColor | color values} to clear to before drawing this {@link RenderPass} */\r\n  clearValue?: GPUColor\r\n  /** Optional format of the color attachment texture */\r\n  targetFormat: GPUTextureFormat\r\n  /** Define all the color attachments parameters to use here in case this {@link RenderPass} should output to multiple color attachments (Multiple Render Targets) */\r\n  colorAttachments?: ColorAttachmentParams[]\r\n\r\n  /** Whether this {@link RenderPass} should handle a depth texture */\r\n  useDepth?: boolean\r\n  /** Whether this {@link RenderPass} should use an already created depth texture */\r\n  depthTexture?: RenderTexture\r\n  /** The {@link GPULoadOp | depth load operation} to perform while drawing this {@link RenderPass} */\r\n  depthLoadOp?: GPULoadOp\r\n  /** The {@link GPUStoreOp | depth store operation} to perform while drawing this {@link RenderPass} */\r\n  depthStoreOp?: GPUStoreOp\r\n  /** The depth clear value to clear to before drawing this {@link RenderPass} */\r\n  depthClearValue?: number\r\n  /** Optional format of the depth texture */\r\n  depthFormat?: GPUTextureFormat\r\n}\r\n\r\n/**\r\n * Used by {@link core/renderPasses/RenderTarget.RenderTarget | RenderTarget} and the {@link Renderer} to render to one or multiple {@link RenderPass#viewTextures | view textures} (and optionally a {@link RenderPass#depthTexture | depth texture}), using a specific {@link GPURenderPassDescriptor | render pass descriptor}.\r\n */\r\nexport class RenderPass {\r\n  /** {@link Renderer} used by this {@link RenderPass} */\r\n  renderer: Renderer\r\n  /** The type of the {@link RenderPass} */\r\n  type: string\r\n  /** The universal unique id of this {@link RenderPass} */\r\n  readonly uuid: string\r\n\r\n  /** Options used to create this {@link RenderPass} */\r\n  options: RenderPassParams\r\n\r\n  /** Depth {@link RenderTexture} to use with this {@link RenderPass} if it should handle depth */\r\n  depthTexture: RenderTexture | undefined\r\n\r\n  /** Array of {@link RenderTexture} used for this {@link RenderPass} color attachments view textures */\r\n  viewTextures: RenderTexture[]\r\n\r\n  /** The {@link RenderPass} {@link GPURenderPassDescriptor | descriptor} */\r\n  descriptor: GPURenderPassDescriptor\r\n\r\n  /**\r\n   * RenderPass constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link RenderPass}\r\n   * @param parameters - {@link RenderPassParams | parameters} used to create this {@link RenderPass}\r\n   */\r\n  constructor(\r\n    renderer: Renderer | GPUCurtains,\r\n    {\r\n      label = 'Render Pass',\r\n      sampleCount = 4,\r\n      qualityRatio = 1,\r\n      // color\r\n      useColorAttachments = true,\r\n      shouldUpdateView = true,\r\n      loadOp = 'clear' as GPULoadOp,\r\n      storeOp = 'store' as GPUStoreOp,\r\n      clearValue = [0, 0, 0, 0],\r\n      targetFormat,\r\n      colorAttachments = [],\r\n      // depth\r\n      useDepth = true,\r\n      depthTexture = null,\r\n      depthLoadOp = 'clear' as GPULoadOp,\r\n      depthStoreOp = 'store' as GPUStoreOp,\r\n      depthClearValue = 1,\r\n      depthFormat = 'depth24plus' as GPUTextureFormat,\r\n    } = {} as RenderPassParams\r\n  ) {\r\n    // we could pass our curtains object OR our curtains renderer object\r\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\r\n\r\n    isRenderer(renderer, 'RenderPass')\r\n\r\n    this.type = 'RenderPass'\r\n    this.uuid = generateUUID()\r\n\r\n    this.renderer = renderer\r\n\r\n    if (useColorAttachments) {\r\n      const defaultColorAttachment = {\r\n        loadOp,\r\n        storeOp,\r\n        clearValue,\r\n        targetFormat: targetFormat ?? this.renderer.options.preferredFormat,\r\n      }\r\n\r\n      if (!colorAttachments.length) {\r\n        colorAttachments = [defaultColorAttachment]\r\n      } else {\r\n        colorAttachments = colorAttachments.map((colorAttachment) => {\r\n          return { ...defaultColorAttachment, ...colorAttachment }\r\n        })\r\n      }\r\n    }\r\n\r\n    this.options = {\r\n      label,\r\n      sampleCount,\r\n      qualityRatio,\r\n      // color\r\n      useColorAttachments,\r\n      shouldUpdateView,\r\n      loadOp,\r\n      storeOp,\r\n      clearValue,\r\n      targetFormat: targetFormat ?? this.renderer.options.preferredFormat,\r\n      colorAttachments,\r\n      // depth\r\n      useDepth,\r\n      ...(depthTexture !== undefined && { depthTexture }),\r\n      depthLoadOp,\r\n      depthStoreOp,\r\n      depthClearValue,\r\n      depthFormat,\r\n    }\r\n\r\n    this.setClearValue(clearValue)\r\n\r\n    // if needed, create a depth texture before our descriptor\r\n    if (this.options.useDepth) {\r\n      this.createDepthTexture()\r\n    }\r\n\r\n    // if needed, create a view texture before our descriptor\r\n    this.viewTextures = []\r\n    if (this.options.useColorAttachments && (!this.options.shouldUpdateView || this.options.sampleCount > 1)) {\r\n      this.createViewTextures()\r\n    }\r\n\r\n    this.setRenderPassDescriptor()\r\n  }\r\n\r\n  /**\r\n   * Create and set our {@link depthTexture | depth texture}\r\n   */\r\n  createDepthTexture() {\r\n    if (this.options.depthTexture) {\r\n      this.depthTexture = this.options.depthTexture\r\n      // adjust depth format as well\r\n      this.options.depthFormat = this.options.depthTexture.options.format\r\n    } else {\r\n      this.depthTexture = new RenderTexture(this.renderer, {\r\n        label: this.options.label + ' depth texture',\r\n        name: 'depthTexture',\r\n        usage: 'depth',\r\n        format: this.options.depthFormat,\r\n        sampleCount: this.options.sampleCount,\r\n        qualityRatio: this.options.qualityRatio,\r\n      })\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create and set our {@link viewTextures | view textures}\r\n   */\r\n  createViewTextures() {\r\n    this.options.colorAttachments.forEach((colorAttachment, index) => {\r\n      this.viewTextures.push(\r\n        new RenderTexture(this.renderer, {\r\n          label: `${this.options.label} colorAttachment[${index}] view texture`,\r\n          name: `colorAttachment${index}ViewTexture`,\r\n          format: colorAttachment.targetFormat,\r\n          sampleCount: this.options.sampleCount,\r\n          qualityRatio: this.options.qualityRatio,\r\n        })\r\n      )\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set our render pass {@link descriptor}\r\n   */\r\n  setRenderPassDescriptor() {\r\n    this.descriptor = {\r\n      label: this.options.label + ' descriptor',\r\n      colorAttachments: this.options.colorAttachments.map((colorAttachment, index) => {\r\n        return {\r\n          // view\r\n          view: this.viewTextures[index]?.texture.createView({\r\n            label: this.viewTextures[index]?.texture.label + ' view',\r\n          }),\r\n          // clear values\r\n          clearValue: colorAttachment.clearValue,\r\n          // loadOp: 'clear' specifies to clear the texture to the clear value before drawing\r\n          // The other option is 'load' which means load the existing contents of the texture into the GPU so we can draw over what's already there.\r\n          loadOp: colorAttachment.loadOp,\r\n          // storeOp: 'store' means store the result of what we draw.\r\n          // We could also pass 'discard' which would throw away what we draw.\r\n          // see https://webgpufundamentals.org/webgpu/lessons/webgpu-multisampling.html\r\n          storeOp: colorAttachment.storeOp,\r\n        }\r\n      }),\r\n\r\n      ...(this.options.useDepth && {\r\n        depthStencilAttachment: {\r\n          view: this.depthTexture.texture.createView({\r\n            label: this.depthTexture.texture.label + ' view',\r\n          }),\r\n          depthClearValue: this.options.depthClearValue,\r\n          // the same way loadOp is working, we can specify if we want to clear or load the previous depth buffer result\r\n          depthLoadOp: this.options.depthLoadOp,\r\n          depthStoreOp: this.options.depthStoreOp,\r\n        },\r\n      }),\r\n    } as GPURenderPassDescriptor\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link RenderPass}: reset its {@link RenderTexture}\r\n   */\r\n  resize() {\r\n    // reassign textures\r\n    if (this.options.useDepth) {\r\n      this.descriptor.depthStencilAttachment.view = this.depthTexture.texture.createView({\r\n        label: this.depthTexture.options.label + ' view',\r\n      })\r\n    }\r\n\r\n    this.viewTextures.forEach((viewTexture, index) => {\r\n      this.descriptor.colorAttachments[index].view = viewTexture.texture.createView({\r\n        label: viewTexture.options.label + ' view',\r\n      })\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Set the {@link descriptor} {@link GPULoadOp | load operation}\r\n   * @param loadOp - new {@link GPULoadOp | load operation} to use\r\n   * @param colorAttachmentIndex - index of the color attachment for which to use this load operation\r\n   */\r\n  setLoadOp(loadOp: GPULoadOp = 'clear', colorAttachmentIndex = 0) {\r\n    this.options.loadOp = loadOp\r\n    if (this.options.useColorAttachments && this.descriptor) {\r\n      if (this.descriptor.colorAttachments && this.descriptor.colorAttachments[colorAttachmentIndex]) {\r\n        this.descriptor.colorAttachments[colorAttachmentIndex].loadOp = loadOp\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the {@link descriptor} {@link GPULoadOp | depth load operation}\r\n   * @param depthLoadOp - new {@link GPULoadOp | depth load operation} to use\r\n   */\r\n  setDepthLoadOp(depthLoadOp: GPULoadOp = 'clear') {\r\n    this.options.depthLoadOp = depthLoadOp\r\n    if (this.options.useDepth && this.descriptor.depthStencilAttachment) {\r\n      this.descriptor.depthStencilAttachment.depthLoadOp = depthLoadOp\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set our {@link GPUColor | clear colors value}.<br>\r\n   * Beware that if the {@link renderer} is using {@link core/renderers/GPURenderer.GPURenderer#alphaMode | premultiplied alpha mode}, your R, G and B channels should be premultiplied by your alpha channel.\r\n   * @param clearValue - new {@link GPUColor | clear colors value} to use\r\n   * @param colorAttachmentIndex - index of the color attachment for which to use this clear value\r\n   */\r\n  setClearValue(clearValue: GPUColor = [0, 0, 0, 0], colorAttachmentIndex = 0) {\r\n    if (this.renderer.alphaMode === 'premultiplied') {\r\n      const alpha = clearValue[3]\r\n      clearValue[0] = Math.min(clearValue[0], alpha)\r\n      clearValue[1] = Math.min(clearValue[1], alpha)\r\n      clearValue[2] = Math.min(clearValue[2], alpha)\r\n    } else {\r\n      this.options.clearValue = clearValue\r\n    }\r\n\r\n    if (this.descriptor && this.descriptor.colorAttachments && this.descriptor.colorAttachments[colorAttachmentIndex]) {\r\n      this.descriptor.colorAttachments[colorAttachmentIndex].clearValue = clearValue\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set the current {@link descriptor} texture {@link GPURenderPassColorAttachment#view | view} and {@link GPURenderPassColorAttachment#resolveTarget | resolveTarget} (depending on whether we're using multisampling)\r\n   * @param renderTexture - {@link GPUTexture} to use, or the {@link core/renderers/GPURenderer.GPURenderer#context | context} {@link GPUTexture | current texture} if null.\r\n   * @returns - the {@link GPUTexture | texture} to render to.\r\n   */\r\n  updateView(renderTexture: GPUTexture | null = null): GPUTexture | null {\r\n    if (!this.options.colorAttachments.length || !this.options.shouldUpdateView) {\r\n      return renderTexture\r\n    }\r\n\r\n    if (!renderTexture) {\r\n      renderTexture = this.renderer.context.getCurrentTexture()\r\n      renderTexture.label = `${this.renderer.type} context current texture`\r\n    }\r\n\r\n    if (this.options.sampleCount > 1) {\r\n      this.descriptor.colorAttachments[0].view = this.viewTextures[0].texture.createView({\r\n        label: this.viewTextures[0].options.label + ' view',\r\n      })\r\n      this.descriptor.colorAttachments[0].resolveTarget = renderTexture.createView({\r\n        label: renderTexture.label + ' resolve target view',\r\n      })\r\n    } else {\r\n      this.descriptor.colorAttachments[0].view = renderTexture.createView({\r\n        label: renderTexture.label + ' view',\r\n      })\r\n    }\r\n\r\n    return renderTexture\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link RenderPass}\r\n   */\r\n  destroy() {\r\n    this.viewTextures.forEach((viewTexture) => viewTexture.destroy())\r\n\r\n    if (!this.options.depthTexture && this.depthTexture) {\r\n      this.depthTexture.destroy()\r\n    }\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}