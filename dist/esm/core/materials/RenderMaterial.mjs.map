{"version":3,"file":"RenderMaterial.mjs","sources":["../../../../src/core/materials/RenderMaterial.ts"],"sourcesContent":["import { Material } from './Material'\nimport { BindGroup } from '../bindGroups/BindGroup'\nimport { isRenderer, Renderer } from '../renderers/utils'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport {\n  AllowedGeometries,\n  RenderMaterialAttributes,\n  RenderMaterialOptions,\n  RenderMaterialParams,\n  RenderMaterialRenderingOptions,\n  ShaderOptions,\n} from '../../types/Materials'\nimport { RenderPipelineEntry } from '../pipelines/RenderPipelineEntry'\nimport { RenderPipelineEntryParams } from '../../types/PipelineEntries'\nimport { throwWarning } from '../../utils/utils'\n\n/**\n * Create a {@link Material} specifically built to draw the vertices of a {@link core/geometries/Geometry.Geometry | Geometry}. Internally used by all kind of Meshes.\n *\n * ## Render pipeline\n *\n * A {@link RenderMaterial} automatically creates a {@link RenderPipelineEntry}. Once all the {@link BindGroup} have been created, they are sent with the shaders code and the {@link RenderMaterialOptions#rendering | rendering options} to the {@link RenderPipelineEntry}, which is in turns responsible for creating the {@link GPURenderPipeline}.\n *\n * After the {@link GPURenderPipeline} has been successfully compiled, the {@link RenderMaterial} is considered to be ready.\n */\nexport class RenderMaterial extends Material {\n  /** {@link RenderPipelineEntry | Render pipeline entry} used by this {@link RenderMaterial} */\n  pipelineEntry: RenderPipelineEntry\n  /** Mandatory {@link RenderMaterialAttributes | geometry attributes} to pass to the {@link RenderPipelineEntry | render pipeline entry} */\n  attributes: RenderMaterialAttributes | null\n  /** Options used to create this {@link RenderMaterial} */\n  options: RenderMaterialOptions\n\n  /**\n   * RenderMaterial constructor\n   * @param renderer - our renderer class object\n   * @param parameters - {@link RenderMaterialParams | parameters} used to create our RenderMaterial\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters: RenderMaterialParams) {\n    // we could pass our curtains object OR our curtains renderer object\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\n\n    const type = 'RenderMaterial'\n\n    isRenderer(renderer, type)\n\n    super(renderer, parameters)\n\n    this.type = type\n    this.renderer = renderer\n\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars\n    const { shaders, label, useAsyncPipeline, uniforms, storages, bindGroups, ...renderingOptions } = parameters\n\n    if (!shaders.vertex.entryPoint) {\n      shaders.vertex.entryPoint = 'main'\n    }\n\n    if (shaders.fragment && !(shaders.fragment as ShaderOptions).entryPoint) {\n      ;(shaders.fragment as ShaderOptions).entryPoint = 'main'\n    }\n\n    // patch target format if not set\n    renderingOptions.targetFormat = renderingOptions.targetFormat ?? this.renderer.options.preferredFormat\n\n    this.options = {\n      ...this.options,\n      shaders,\n      rendering: renderingOptions,\n    } as RenderMaterialOptions\n\n    this.pipelineEntry = this.renderer.pipelineManager.createRenderPipeline({\n      renderer: this.renderer,\n      label: this.options.label + ' render pipeline',\n      shaders: this.options.shaders,\n      useAsync: this.options.useAsyncPipeline,\n      rendering: this.options.rendering,\n    })\n\n    this.attributes = null\n  }\n\n  /**\n   * When all bind groups and attributes are created, add them to the {@link RenderPipelineEntry}\n   */\n  setPipelineEntryProperties() {\n    this.pipelineEntry.setPipelineEntryProperties({\n      attributes: this.attributes,\n      bindGroups: this.bindGroups,\n    })\n  }\n\n  /**\n   * Compile the {@link RenderPipelineEntry}\n   * @async\n   */\n  async compilePipelineEntry(): Promise<void> {\n    await this.pipelineEntry.compilePipelineEntry()\n  }\n\n  /**\n   * Check if attributes and all bind groups are ready, create them if needed and set {@link RenderPipelineEntry} bind group buffers and compile the pipeline\n   * @async\n   */\n  async compileMaterial() {\n    super.compileMaterial()\n\n    if (this.attributes && this.pipelineEntry && this.pipelineEntry.canCompile) {\n      this.setPipelineEntryProperties()\n      await this.compilePipelineEntry()\n    }\n  }\n\n  /**\n   * Set or reset one of the {@link RenderMaterialRenderingOptions | rendering options}. Should be use with great caution, because if the {@link RenderPipelineEntry#pipeline | render pipeline} has already been compiled, it can cause a pipeline flush.\n   * @param renderingOptions - new {@link RenderMaterialRenderingOptions | rendering options} properties to be set\n   */\n  setRenderingOptions(renderingOptions: Partial<RenderMaterialRenderingOptions> = {}) {\n    const newProperties = Object.keys(renderingOptions).filter(\n      (key) => renderingOptions[key] !== this.options.rendering[key]\n    )\n\n    this.options.rendering = { ...this.options.rendering, ...renderingOptions }\n\n    if (this.pipelineEntry) {\n      this.pipelineEntry.options.rendering = { ...this.pipelineEntry.options.rendering, ...this.options.rendering }\n\n      if (this.pipelineEntry.ready && newProperties.length) {\n        throwWarning(\n          `${\n            this.options.label\n          }: the change of rendering options is causing this RenderMaterial pipeline to be flushed and recompiled. This should be avoided. Rendering options that caused this: { ${newProperties\n            .map(\n              (key) =>\n                `\"${key}\": ${\n                  Array.isArray(renderingOptions[key])\n                    ? renderingOptions[key].map((optKey) => `${JSON.stringify(optKey)}`).join(', ')\n                    : renderingOptions[key]\n                }`\n            )\n            .join(', ')} }`\n        )\n\n        this.pipelineEntry.flushPipelineEntry(this.bindGroups)\n      }\n    }\n  }\n\n  /* ATTRIBUTES */\n\n  /**\n   * Compute geometry if needed and get all useful geometry properties needed to create attributes buffers\n   * @param geometry - the geometry to draw\n   */\n  setAttributesFromGeometry(geometry: AllowedGeometries) {\n    this.attributes = {\n      wgslStructFragment: geometry.wgslStructFragment,\n      vertexBuffers: geometry.vertexBuffers,\n    }\n  }\n\n  /* BIND GROUPS */\n\n  /**\n   * Create the bind groups if they need to be created, but first add Camera bind group if needed\n   */\n  createBindGroups() {\n    // camera first!\n    // if ((this.renderer as CameraRenderer).cameraBindGroup && this.options.rendering.useProjection) {\n    //   this.bindGroups.push((this.renderer as CameraRenderer).cameraBindGroup)\n    // }\n    //\n    // super.createBindGroups()\n\n    // TODO! need to chose whether we should add the camera bind group here\n    // in such case we need to find a way not to bind it inside the render call\n    // because it is already bound by the scene class at each render to avoid extra WebGPU commands\n    const bindGroupStartIndex = this.options.rendering.useProjection ? 1 : 0\n\n    // textures first\n    if (this.texturesBindGroup.shouldCreateBindGroup) {\n      this.texturesBindGroup.setIndex(this.bindGroups.length + bindGroupStartIndex) // bindGroup 0 is our renderer camera\n      this.texturesBindGroup.createBindGroup()\n\n      this.bindGroups.push(this.texturesBindGroup)\n    }\n\n    // then uniforms\n    this.inputsBindGroups.forEach((bindGroup) => {\n      if (bindGroup.shouldCreateBindGroup) {\n        bindGroup.setIndex(this.bindGroups.length + bindGroupStartIndex)\n        bindGroup.createBindGroup()\n\n        this.bindGroups.push(bindGroup)\n      }\n    })\n  }\n}\n"],"names":[],"mappings":"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"}