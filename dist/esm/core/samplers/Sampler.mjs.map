{"version":3,"file":"Sampler.mjs","sources":["../../../../src/core/samplers/Sampler.ts"],"sourcesContent":["import { isRenderer, Renderer } from '../renderers/utils'\nimport { SamplerBinding } from '../bindings/SamplerBinding'\nimport { generateUUID, throwWarning } from '../../utils/utils'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/** Options used to create a {@link Sampler} */\nexport interface SamplerOptions extends Partial<GPUSamplerDescriptor>, GPUSamplerBindingLayout {}\n\n/**\n * Parameters used to create a {@link Sampler}\n */\nexport interface SamplerParams extends SamplerOptions {\n  /** Name of the {@link Sampler} to use in the {@link SamplerBinding | binding} */\n  name: string\n}\n\n/**\n * Used to create a {@link GPUSampler} and its associated {@link SamplerBinding}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * const mirrorSampler = new Sampler(gpuCurtains, {\n *   label: 'Mirror sampler',\n *   name: 'mirrorSampler',\n *   addressModeU: 'mirror-repeat',\n *   addressModeV: 'mirror-repeat',\n * })\n * ```\n */\nexport class Sampler {\n  /** The type of the {@link Sampler} */\n  type: string\n  /** The universal unique id of this {@link Sampler} */\n  readonly uuid: string\n  /** {@link Renderer} used by this {@link Sampler} */\n  renderer: Renderer\n  /** The label of the {@link Sampler}, used to create the {@link GPUSampler} for debugging purpose */\n  label: string\n  /** Name of the {@link Sampler} to use in the {@link SamplerBinding | binding} */\n  name: string\n  /** Options used to create this {@link Sampler} */\n  options: SamplerOptions\n\n  /** {@link GPUSampler} */\n  sampler: GPUSampler\n  /** {@link SamplerBinding | binding} to pass to a {@link core/bindGroups/TextureBindGroup.TextureBindGroup | bind group} */\n  binding: SamplerBinding\n\n  /**\n   * Sampler constructor\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Sampler}\n   * @param parameters - {@link SamplerParams | parameters} used to create this {@link Sampler}\n   */\n  constructor(\n    renderer: GPUCurtains | Renderer,\n    {\n      label = 'Sampler',\n      name,\n      addressModeU = 'repeat',\n      addressModeV = 'repeat',\n      magFilter = 'linear',\n      minFilter = 'linear',\n      mipmapFilter = 'linear',\n      maxAnisotropy = 1,\n      type = 'filtering',\n      compare,\n    } = {} as SamplerParams\n  ) {\n    this.type = 'Sampler'\n    this.uuid = generateUUID()\n\n    // we could pass our curtains object OR our curtains renderer object\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\n\n    isRenderer(renderer, label ? label + ' ' + this.type : this.type)\n\n    this.renderer = renderer\n\n    this.label = label\n\n    if (!name && !this.renderer.production) {\n      name = 'sampler' + this.renderer.samplers.length\n      throwWarning(\n        `Sampler: you are trying to create a sampler without the mandatory name parameter. A default name will be used instead: ${name}`\n      )\n    }\n\n    this.name = name\n\n    this.options = {\n      addressModeU,\n      addressModeV,\n      magFilter,\n      minFilter,\n      mipmapFilter,\n      maxAnisotropy,\n      type,\n      ...(compare !== undefined && { compare }),\n    } as SamplerOptions\n\n    this.createSampler()\n    this.createBinding()\n  }\n\n  /**\n   * Set the {@link GPUSampler}\n   */\n  createSampler() {\n    this.sampler = this.renderer.createSampler(this)\n  }\n\n  /**\n   * Set the {@link SamplerBinding | binding}\n   */\n  createBinding() {\n    this.binding = new SamplerBinding({\n      label: this.label,\n      name: this.name,\n      bindingType: 'sampler',\n      sampler: this.sampler,\n      type: this.options.type,\n    })\n  }\n}\n"],"names":[],"mappings":";;;;AAsCO,MAAM,OAAQ,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAwBnB,YACE,QACA,EAAA;AAAA,IACE,KAAQ,GAAA,SAAA;AAAA,IACR,IAAA;AAAA,IACA,YAAe,GAAA,QAAA;AAAA,IACf,YAAe,GAAA,QAAA;AAAA,IACf,SAAY,GAAA,QAAA;AAAA,IACZ,SAAY,GAAA,QAAA;AAAA,IACZ,YAAe,GAAA,QAAA;AAAA,IACf,aAAgB,GAAA,CAAA;AAAA,IAChB,IAAO,GAAA,WAAA;AAAA,IACP,OAAA;AAAA,GACF,GAAI,EACJ,EAAA;AACA,IAAA,IAAA,CAAK,IAAO,GAAA,SAAA,CAAA;AACZ,IAAA,IAAA,CAAK,OAAO,YAAa,EAAA,CAAA;AAGzB,IAAY,QAAA,GAAA,QAAA,IAAa,SAAyB,QAAc,IAAA,QAAA,CAAA;AAEhE,IAAA,UAAA,CAAW,UAAU,KAAQ,GAAA,KAAA,GAAQ,MAAM,IAAK,CAAA,IAAA,GAAO,KAAK,IAAI,CAAA,CAAA;AAEhE,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAEhB,IAAA,IAAA,CAAK,KAAQ,GAAA,KAAA,CAAA;AAEb,IAAA,IAAI,CAAC,IAAA,IAAQ,CAAC,IAAA,CAAK,SAAS,UAAY,EAAA;AACtC,MAAO,IAAA,GAAA,SAAA,GAAY,IAAK,CAAA,QAAA,CAAS,QAAS,CAAA,MAAA,CAAA;AAC1C,MAAA,YAAA;AAAA,QACE,0HAA0H,IAAI,CAAA,CAAA;AAAA,OAChI,CAAA;AAAA,KACF;AAEA,IAAA,IAAA,CAAK,IAAO,GAAA,IAAA,CAAA;AAEZ,IAAA,IAAA,CAAK,OAAU,GAAA;AAAA,MACb,YAAA;AAAA,MACA,YAAA;AAAA,MACA,SAAA;AAAA,MACA,SAAA;AAAA,MACA,YAAA;AAAA,MACA,aAAA;AAAA,MACA,IAAA;AAAA,MACA,GAAI,OAAA,KAAY,KAAa,CAAA,IAAA,EAAE,OAAQ,EAAA;AAAA,KACzC,CAAA;AAEA,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AAAA,GACrB;AAAA;AAAA;AAAA;AAAA,EAKA,aAAgB,GAAA;AACd,IAAA,IAAA,CAAK,OAAU,GAAA,IAAA,CAAK,QAAS,CAAA,aAAA,CAAc,IAAI,CAAA,CAAA;AAAA,GACjD;AAAA;AAAA;AAAA;AAAA,EAKA,aAAgB,GAAA;AACd,IAAK,IAAA,CAAA,OAAA,GAAU,IAAI,cAAe,CAAA;AAAA,MAChC,OAAO,IAAK,CAAA,KAAA;AAAA,MACZ,MAAM,IAAK,CAAA,IAAA;AAAA,MACX,WAAa,EAAA,SAAA;AAAA,MACb,SAAS,IAAK,CAAA,OAAA;AAAA,MACd,IAAA,EAAM,KAAK,OAAQ,CAAA,IAAA;AAAA,KACpB,CAAA,CAAA;AAAA,GACH;AACF;;;;"}