{"version":3,"file":"Camera.mjs","sources":["../../../../src/core/camera/Camera.ts"],"sourcesContent":["import { Mat4 } from '../../math/Mat4'\r\nimport { Object3D, Object3DMatricesType, Object3DTransformMatrix } from '../objects3D/Object3D'\r\nimport { RectSize } from '../DOM/DOMElement'\r\nimport { Vec3 } from '../../math/Vec3'\r\n\r\n/**\r\n * Defines Camera basic perspective options\r\n */\r\nexport interface CameraBasePerspectiveOptions {\r\n  /** {@link Camera} perspective field of view. Should be greater than 0 and lower than 180 */\r\n  fov?: number\r\n  /** {@link Camera} near plane, the closest point where a mesh vertex is drawn */\r\n  near?: number\r\n  /** {@link Camera} far plane, the farthest point where a mesh vertex is drawn */\r\n  far?: number\r\n}\r\n\r\n/**\r\n * Defines all Camera perspective options\r\n */\r\nexport interface CameraPerspectiveOptions extends CameraBasePerspectiveOptions {\r\n  /** {@link Camera} frustum width */\r\n  width?: number\r\n  /** {@link Camera} frustum height */\r\n  height?: number\r\n  /** {@link Camera} pixel ratio */\r\n  pixelRatio?: number\r\n}\r\n\r\n/**\r\n * An object defining all possible {@link Camera} class instancing parameters\r\n */\r\nexport interface CameraParams extends CameraPerspectiveOptions {\r\n  /** callback to execute when one of the {@link Camera#matrices | camera matrices} changed */\r\n  onMatricesChanged?: () => void\r\n}\r\n\r\n/** Defines all kind of possible {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D} matrix types */\r\nexport type CameraObject3DMatricesType = Object3DMatricesType | 'projection' | 'view'\r\n/** Defines all possible {@link Object3DTransformMatrix | matrix object} used by our {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D} */\r\nexport type CameraObject3DMatrices = Record<CameraObject3DMatricesType, Object3DTransformMatrix>\r\n\r\n/**\r\n * Used to create a perspective {@link Camera} and its projection, model and view matrices.\r\n *\r\n * {@link curtains/renderers/GPUCurtainsRenderer.GPUCurtainsRenderer | GPUCurtainsRenderer} and {@link core/renderers/GPUCameraRenderer.GPUCameraRenderer | GPUCameraRenderer} automatically create their own {@link Camera} under the hood, so it is unlikely you'd have to create one by yourself.\r\n *\r\n * {@link Camera} default perspective settings are:\r\n * - {@link Camera#fov | field of view}: 50\r\n * - {@link Camera#near | near plane}: 0.01\r\n * - {@link Camera#far | far plane}: 150\r\n *\r\n * Also note that the {@link Camera} default {@link Camera#position | position} is set at `(0, 0, 10)` so the object created with a default size do not appear too big nor too small.\r\n */\r\nexport class Camera extends Object3D {\r\n  /** {@link CameraObject3DMatrices | Matrices object} of the {@link Camera} */\r\n  matrices: CameraObject3DMatrices\r\n\r\n  /** Private {@link Camera} field of view */\r\n  #fov: number\r\n  /** Private {@link Camera} near plane */\r\n  #near: number\r\n  /** Private {@link Camera} far plane */\r\n  #far: number\r\n\r\n  /** The {@link Camera} frustum width and height */\r\n  size: RectSize\r\n  /** Private {@link Camera} pixel ratio, used in {@link CSSPerspective} calcs */\r\n  #pixelRatio: number\r\n\r\n  /** Callback to execute when one of the camera {@link matrices} changed */\r\n  onMatricesChanged?: () => void\r\n\r\n  /** A number representing what CSS perspective value (in pixel) should be used to obtain the same perspective effect as this {@link Camera} */\r\n  CSSPerspective: number\r\n  /** An object containing the visible width / height at a given z-depth from our camera parameters */\r\n  screenRatio: RectSize\r\n\r\n  /**\r\n   * Camera constructor\r\n   * @param parameters - {@link CameraParams | parameters} used to create our {@link Camera}\r\n   */\r\n  constructor(\r\n    {\r\n      fov = 50,\r\n      near = 0.1,\r\n      far = 150,\r\n      width = 1,\r\n      height = 1,\r\n      pixelRatio = 1,\r\n      onMatricesChanged = () => {\r\n        /* allow empty callback */\r\n      },\r\n    } = {} as CameraParams\r\n  ) {\r\n    // Object3D\r\n    super()\r\n\r\n    // camera can't be at position (0, 0, 0), it needs some recoil\r\n    // arbitrarily set to 10 so objects of default size (1, 1, 1) don't appear too big\r\n    this.position.set(0, 0, 10)\r\n\r\n    // callback to run if any of the matrices changed\r\n    this.onMatricesChanged = onMatricesChanged\r\n\r\n    // create size object, will be set right after\r\n    this.size = {\r\n      width: 1,\r\n      height: 1,\r\n    }\r\n\r\n    this.setPerspective({ fov, near, far, width, height, pixelRatio })\r\n  }\r\n\r\n  /**\r\n   * Set our transform and projection matrices\r\n   */\r\n  setMatrices() {\r\n    super.setMatrices()\r\n\r\n    this.matrices = {\r\n      ...this.matrices,\r\n      view: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: false,\r\n        onUpdate: () => {\r\n          this.viewMatrix.copy(this.worldMatrix).invert()\r\n        },\r\n      },\r\n      projection: {\r\n        matrix: new Mat4(),\r\n        shouldUpdate: false,\r\n        onUpdate: () => this.updateProjectionMatrix(),\r\n      },\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get our view matrix\r\n   * @readonly\r\n   */\r\n  get viewMatrix(): Mat4 {\r\n    return this.matrices.view.matrix\r\n  }\r\n\r\n  set viewMatrix(value: Mat4) {\r\n    this.matrices.view.matrix = value\r\n    this.matrices.view.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Get our projection matrix\r\n   * @readonly\r\n   */\r\n  get projectionMatrix(): Mat4 {\r\n    return this.matrices.projection.matrix\r\n  }\r\n\r\n  set projectionMatrix(value: Mat4) {\r\n    this.matrices.projection.matrix = value\r\n    this.shouldUpdateProjectionMatrix()\r\n  }\r\n\r\n  /**\r\n   * Set our projection matrix shouldUpdate flag to true (tell it to update)\r\n   */\r\n  shouldUpdateProjectionMatrix() {\r\n    this.matrices.projection.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Update our model matrix and tell our view matrix to update as well\r\n   */\r\n  updateModelMatrix() {\r\n    super.updateModelMatrix()\r\n    this.setScreenRatios()\r\n    this.matrices.view.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Update our world matrix and tell our view matrix to update as well\r\n   */\r\n  updateWorldMatrix() {\r\n    super.updateWorldMatrix()\r\n    this.matrices.view.shouldUpdate = true\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Camera} {@link fov | field of view}\r\n   */\r\n  get fov(): number {\r\n    return this.#fov\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link fov | field of view}. Update the {@link projectionMatrix} only if the field of view actually changed\r\n   * @param fov - new field of view\r\n   */\r\n  set fov(fov: number) {\r\n    // clamp between 1 and 179\r\n    fov = Math.max(1, Math.min(fov ?? this.fov, 179))\r\n\r\n    if (fov !== this.fov) {\r\n      this.#fov = fov\r\n      this.shouldUpdateProjectionMatrix()\r\n    }\r\n\r\n    this.setScreenRatios()\r\n    this.setCSSPerspective()\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Camera} {@link near} plane value.\r\n   */\r\n  get near(): number {\r\n    return this.#near\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link near} plane value. Update the {@link projectionMatrix} only if the near plane actually changed\r\n   * @param near - new near plane value\r\n   */\r\n  set near(near: number) {\r\n    near = Math.max(near ?? this.near, 0.01)\r\n\r\n    if (near !== this.near) {\r\n      this.#near = near\r\n      this.shouldUpdateProjectionMatrix()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get / set the {@link Camera} {@link far} plane value.\r\n   */\r\n  get far(): number {\r\n    return this.#far\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link far} plane value. Update {@link projectionMatrix} only if the far plane actually changed\r\n   * @param far - new far plane value\r\n   */\r\n  set far(far: number) {\r\n    far = Math.max(far ?? this.far, this.near + 1)\r\n\r\n    if (far !== this.far) {\r\n      this.#far = far\r\n      this.shouldUpdateProjectionMatrix()\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get the {@link Camera} {@link pixelRatio} value.\r\n   */\r\n  get pixelRatio() {\r\n    return this.#pixelRatio\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link pixelRatio} value. Update the {@link CSSPerspective} only if the pixel ratio actually changed\r\n   * @param pixelRatio - new pixel ratio value\r\n   */\r\n  set pixelRatio(pixelRatio: number) {\r\n    this.#pixelRatio = pixelRatio ?? this.pixelRatio\r\n    this.setCSSPerspective()\r\n  }\r\n\r\n  /**\r\n   * Set the {@link Camera} {@link width} and {@link height}. Update the {@link projectionMatrix} only if the width or height actually changed\r\n   * @param size - {@link width} and {@link height} values to use\r\n   */\r\n  setSize({ width, height }: RectSize) {\r\n    if (width !== this.size.width || height !== this.size.height) {\r\n      this.shouldUpdateProjectionMatrix()\r\n    }\r\n\r\n    this.size.width = width\r\n    this.size.height = height\r\n\r\n    this.setScreenRatios()\r\n    this.setCSSPerspective()\r\n  }\r\n\r\n  /**\r\n   * Sets the {@link Camera} perspective. Update the {@link projectionMatrix} if needed.\r\n   * @param parameters - {@link CameraPerspectiveOptions | parameters} to use for the perspective\r\n   */\r\n  setPerspective({\r\n    fov = this.fov,\r\n    near = this.near,\r\n    far = this.far,\r\n    width = this.size.width,\r\n    height = this.size.height,\r\n    pixelRatio = this.pixelRatio,\r\n  }: CameraPerspectiveOptions = {}) {\r\n    this.setSize({ width, height })\r\n    this.pixelRatio = pixelRatio\r\n    this.fov = fov\r\n    this.near = near\r\n    this.far = far\r\n  }\r\n\r\n  /**\r\n   * Callback to run when the camera {@link modelMatrix | model matrix} has been updated\r\n   */\r\n  onAfterMatrixStackUpdate() {\r\n    // callback because matrices changed\r\n    this.onMatricesChanged()\r\n  }\r\n\r\n  /**\r\n   * Sets a {@link CSSPerspective} property based on {@link size}, {@link pixelRatio} and {@link fov}.<br>\r\n   * Used to translate planes along the Z axis using pixel units as CSS would do.<br>\r\n   * {@link https://stackoverflow.com/questions/22421439/convert-field-of-view-value-to-css3d-perspective-value | See reference}\r\n   */\r\n  setCSSPerspective() {\r\n    this.CSSPerspective =\r\n      Math.pow(\r\n        Math.pow(this.size.width / (2 * this.pixelRatio), 2) + Math.pow(this.size.height / (2 * this.pixelRatio), 2),\r\n        0.5\r\n      ) / Math.tan((this.fov * 0.5 * Math.PI) / 180)\r\n  }\r\n\r\n  /**\r\n   * Sets visible width / height at a given z-depth from our {@link Camera} parameters.<br>\r\n   * {@link https://discourse.threejs.org/t/functions-to-calculate-the-visible-width-height-at-a-given-z-depth-from-a-perspective-camera/269 | See reference}\r\n   * @param depth - depth to use for calculations\r\n   */\r\n  setScreenRatios(depth = 0) {\r\n    // compensate for cameras not positioned at z=0\r\n    const cameraOffset = this.position.z\r\n    if (depth < cameraOffset) {\r\n      depth -= cameraOffset\r\n    } else {\r\n      depth += cameraOffset\r\n    }\r\n\r\n    // vertical fov in radians\r\n    const vFOV = (this.fov * Math.PI) / 180\r\n\r\n    // Math.abs to ensure the result is always positive\r\n    const height = 2 * Math.tan(vFOV / 2) * Math.abs(depth)\r\n\r\n    this.screenRatio = {\r\n      width: (height * this.size.width) / this.size.height,\r\n      height,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rotate this {@link Camera} so it looks at the {@link Vec3 | target}\r\n   * @param target - {@link Vec3 | target} to look at\r\n   */\r\n  lookAt(target: Vec3 = new Vec3()) {\r\n    // since we know it's a camera, inverse position and target\r\n    const rotationMatrix = new Mat4().lookAt(this.position, target)\r\n    this.quaternion.setFromRotationMatrix(rotationMatrix)\r\n    this.shouldUpdateModelMatrix()\r\n  }\r\n\r\n  /**\r\n   * Updates the {@link Camera} {@link projectionMatrix}\r\n   */\r\n  updateProjectionMatrix() {\r\n    this.projectionMatrix.makePerspective({\r\n      fov: this.fov,\r\n      aspect: this.size.width / this.size.height,\r\n      near: this.near,\r\n      far: this.far,\r\n    })\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}