{"version":3,"file":"DOMFrustum.mjs","sources":["../../../../src/core/DOM/DOMFrustum.ts"],"sourcesContent":["import { Box3 } from '../../math/Box3'\nimport { Mat4 } from '../../math/Mat4'\nimport { DOMElementBoundingRect, RectCoords } from './DOMElement'\n\n/**\n * An object defining all possible {@link DOMFrustum} class instancing parameters\n */\nexport interface DOMFrustumParams {\n  /** our 3D Object bounding box, i.e. size in world space before any transform. Usually defined by a {@link core/geometries/Geometry.Geometry | Geometry} */\n  boundingBox?: Box3\n  /** {@link core/objects3D/ProjectedObject3D.ProjectedObject3D#modelViewProjectionMatrix | model view projection matrix} to use for frustum calculations */\n  modelViewProjectionMatrix?: Mat4\n  /** the {@link DOMElementBoundingRect | bounding rectangle} to check against */\n  containerBoundingRect?: DOMElementBoundingRect\n  /** additional margins to add to {@link containerBoundingRect} */\n  DOMFrustumMargins?: RectCoords\n  /** callback to run when the {@link DOMFrustum#projectedBoundingRect | projectedBoundingRect} reenters the view frustum */\n  onReEnterView?: () => void\n  /** callback to run when the {@link DOMFrustum#projectedBoundingRect | projectedBoundingRect} leaves the view frustum */\n  onLeaveView?: () => void\n}\n\n/** @constant {RectCoords} - default {@link DOMFrustum#DOMFrustumMargins | DOMFrustumMargins} */\nconst defaultDOMFrustumMargins: RectCoords = {\n  top: 0,\n  right: 0,\n  bottom: 0,\n  left: 0,\n}\n\n/**\n * Used to check if a {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D} is currently contained inside a DOM bounding rectangle.\n *\n * Uses a {@link core/objects3D/ProjectedObject3D.ProjectedObject3D#modelViewProjectionMatrix | model view projection matrix} that contains both useful {@link core/objects3D/ProjectedObject3D.ProjectedObject3D#transforms | Object3D transforms} and {@link core/camera/Camera.Camera | Camera} projection information.\n * The DOM bounding rectangle to check against usually is the {@link core/renderers/GPURenderer.GPURenderer | renderer}'s {@link core/DOM/DOMElement.DOMElement | DOMElement} bounding rectangle, unless frustum margins are specified.\n */\nexport class DOMFrustum {\n  /** Our 3D Object bounding box, i.e. size in world space before any transform. Usually defined by a {@link core/geometries/Geometry.Geometry | Geometry} */\n  boundingBox: Box3\n  /** A model view projection matrix defining transformations, usually from a {@link core/objects3D/ProjectedObject3D.ProjectedObject3D | ProjectedObject3D}, to use for frustum calculations */\n  modelViewProjectionMatrix: Mat4\n\n  /** The DOM bounding rectangle to check against, usually the renderer DOM Element bounding rectangle */\n  containerBoundingRect: DOMElementBoundingRect\n  /** Additional margins to add to {@link containerBoundingRect} */\n  DOMFrustumMargins: RectCoords\n  /** A DOM Element bounding rectangle representing the result of our {@link boundingBox} with the {@link modelViewProjectionMatrix} applied */\n  projectedBoundingRect: DOMElementBoundingRect\n\n  /** Callback to run when the {@link projectedBoundingRect} reenters the view frustum */\n  onReEnterView: () => void\n  /** Callback to run when the {@link projectedBoundingRect} leaves the view frustum */\n  onLeaveView: () => void\n\n  /** Flag to indicate whether the given {@link projectedBoundingRect} is intersecting our view frustum */\n  isIntersecting: boolean\n  /** Flag to indicate whether we should update our {@link projectedBoundingRect} */\n  shouldUpdate: boolean\n\n  /**\n   * DOMFrustum constructor\n   * @param {DOMFrustumParams} parameters - {@link DOMFrustumParams | parameters} used to create our {@link DOMFrustum}\n   */\n  constructor({\n    boundingBox = new Box3(),\n    modelViewProjectionMatrix = new Mat4(),\n    containerBoundingRect = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n    },\n    DOMFrustumMargins = defaultDOMFrustumMargins,\n    onReEnterView = () => {\n      /* allow empty callbacks */\n    },\n    onLeaveView = () => {\n      /* allow empty callbacks */\n    },\n  }: DOMFrustumParams) {\n    this.boundingBox = boundingBox\n    this.modelViewProjectionMatrix = modelViewProjectionMatrix\n    this.containerBoundingRect = containerBoundingRect\n    this.DOMFrustumMargins = { ...defaultDOMFrustumMargins, ...DOMFrustumMargins }\n\n    this.projectedBoundingRect = {\n      top: 0,\n      right: 0,\n      bottom: 0,\n      left: 0,\n      width: 0,\n      height: 0,\n      x: 0,\n      y: 0,\n    }\n\n    this.onReEnterView = onReEnterView\n    this.onLeaveView = onLeaveView\n\n    this.isIntersecting = false\n    this.shouldUpdate = false\n  }\n\n  /**\n   * Set our {@link containerBoundingRect} (called on resize)\n   * @param boundingRect - new bounding rectangle\n   */\n  setContainerBoundingRect(boundingRect: DOMElementBoundingRect) {\n    this.containerBoundingRect = boundingRect\n  }\n\n  /**\n   * Get our DOM frustum bounding rectangle, i.e. our {@link containerBoundingRect} with the {@link DOMFrustumMargins} applied\n   * @readonly\n   */\n  get DOMFrustumBoundingRect(): RectCoords {\n    return {\n      top: this.projectedBoundingRect.top - this.DOMFrustumMargins.top,\n      right: this.projectedBoundingRect.right + this.DOMFrustumMargins.right,\n      bottom: this.projectedBoundingRect.bottom + this.DOMFrustumMargins.bottom,\n      left: this.projectedBoundingRect.left - this.DOMFrustumMargins.left,\n    }\n  }\n\n  /**\n   * Applies all {@link modelViewProjectionMatrix} transformations to our {@link boundingBox} and then check against intersections\n   */\n  computeProjectedToDocumentCoords() {\n    const projectedBox = this.boundingBox.applyMat4(this.modelViewProjectionMatrix)\n\n    // normalize [-1, 1] coords to [0, 1]\n    projectedBox.min.x = (projectedBox.min.x + 1) * 0.5\n    projectedBox.max.x = (projectedBox.max.x + 1) * 0.5\n\n    projectedBox.min.y = 1 - (projectedBox.min.y + 1) * 0.5\n    projectedBox.max.y = 1 - (projectedBox.max.y + 1) * 0.5\n\n    const { width, height, top, left } = this.containerBoundingRect\n\n    this.projectedBoundingRect = {\n      left: projectedBox.min.x * width + left,\n      x: projectedBox.min.x * width + left,\n      top: projectedBox.max.y * height + top,\n      y: projectedBox.max.y * height + top,\n      right: projectedBox.max.x * width + left,\n      bottom: projectedBox.min.y * height + top,\n      width: projectedBox.max.x * width + left - (projectedBox.min.x * width + left),\n      height: projectedBox.min.y * height + top - (projectedBox.max.y * height + top),\n    }\n\n    this.intersectsContainer()\n  }\n\n  /**\n   * Check whether our {@link projectedBoundingRect} intersects with our {@link DOMFrustumBoundingRect}\n   */\n  intersectsContainer() {\n    if (\n      Math.round(this.DOMFrustumBoundingRect.right) <= this.containerBoundingRect.left ||\n      Math.round(this.DOMFrustumBoundingRect.left) >=\n        this.containerBoundingRect.left + this.containerBoundingRect.width ||\n      Math.round(this.DOMFrustumBoundingRect.bottom) <= this.containerBoundingRect.top ||\n      Math.round(this.DOMFrustumBoundingRect.top) >= this.containerBoundingRect.top + this.containerBoundingRect.height\n    ) {\n      if (this.isIntersecting) {\n        this.onLeaveView()\n      }\n\n      this.isIntersecting = false\n    } else {\n      if (!this.isIntersecting) {\n        this.onReEnterView()\n      }\n\n      this.isIntersecting = true\n    }\n  }\n}\n"],"names":[],"mappings":"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"}