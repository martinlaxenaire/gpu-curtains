{"version":3,"file":"DOMElement.mjs","sources":["../../../../src/core/DOM/DOMElement.ts"],"sourcesContent":["import { resizeManager, ResizeManager, ResizeManagerEntry } from '../../utils/ResizeManager'\nimport { throwError } from '../../utils/utils'\n\n/**\n * Defines a rectangular coordinates object\n */\nexport interface RectCoords {\n  /** top position */\n  top: number\n  /** right position */\n  right: number\n  /** bottom position */\n  bottom: number\n  /** left position */\n  left: number\n}\n\n/**\n * Defines a size object\n */\nexport interface RectSize {\n  /** width of the rectangle */\n  width: number\n  /** height of the rectangle */\n  height: number\n}\n\n/**\n * Defines a rectangular bounding box object\n */\nexport interface RectBBox extends RectSize {\n  /** top position of the bounding box */\n  top: number\n  /** left position of the bounding box */\n  left: number\n}\n\n/**\n * Defines a DOM position object\n */\nexport interface DOMPosition {\n  /** X position */\n  x: number\n  /** Y position */\n  y: number\n}\n\n/**\n * Defines a complete DOM Element bounding rect object, similar to a {@link DOMRect}\n */\nexport interface DOMElementBoundingRect extends RectCoords, RectBBox, DOMPosition {}\n\n/**\n * Parameters used to create a {@link DOMElement}\n */\nexport interface DOMElementParams {\n  /** {@link HTMLElement} or string representing an {@link HTMLElement} selector of the element the resize observer should track */\n  element?: string | Element\n  /** Order in which the {@link resizeManager} callback is executed */\n  priority?: ResizeManagerEntry['priority']\n  /** Callback to tun when the {@link DOMElement#element | element} size changed */\n  onSizeChanged?: (boundingRect: DOMElementBoundingRect | null) => void | null\n  /** Callback to tun when the {@link DOMElement#element | element} position changed */\n  onPositionChanged?: (boundingRect: DOMElementBoundingRect | null) => void | null\n}\n\n/**\n * Used to track a DOM Element size and position by using a resize observer provided by {@link ResizeManager}.<br>\n * Execute callbacks when the bounding rectangle of the DOM Element changes, which means when its size and/or position change.\n */\nexport class DOMElement {\n  /** The HTML element to track */\n  element: HTMLElement\n  /** Priority at which this element {@link onSizeChanged} function must be called */\n  priority: ResizeManagerEntry['priority']\n  /** Flag indicating whether the timeout is still running and we should avoid a new computation */\n  isResizing: boolean\n  /** Callback to run whenever the {@link element} size changed */\n  onSizeChanged: (boundingRect: DOMElementBoundingRect | null) => void | null\n  /** Callback to run whenever the {@link element} position changed */\n  onPositionChanged: (boundingRect: DOMElementBoundingRect | null) => void | null\n  /** The {@link ResizeManager} used, basically a wrapper around a {@link ResizeObserver} */\n  resizeManager: ResizeManager\n  /** Current  {@link element} bounding rectangle */\n  _boundingRect: DOMElementBoundingRect\n\n  /**\n   * DOMElement constructor\n   * @param parameters - {@link DOMElementParams | parameters} used to create our DOMElement\n   */\n  constructor(\n    {\n      element = document.body,\n      priority = 1,\n      onSizeChanged = (boundingRect = null) => {\n        /* allow empty callback */\n      },\n      onPositionChanged = (boundingRect = null) => {\n        /* allow empty callback */\n      },\n    } = {} as DOMElementParams\n  ) {\n    if (typeof element === 'string') {\n      this.element = document.querySelector(element)\n\n      if (!this.element) {\n        const notFoundEl = typeof element === 'string' ? `'${element}' selector` : `${element} HTMLElement`\n        throwError(`DOMElement: corresponding ${notFoundEl} not found.`)\n      }\n    } else {\n      this.element = element as HTMLElement\n    }\n\n    this.priority = priority\n\n    this.isResizing = false\n\n    this.onSizeChanged = onSizeChanged\n    this.onPositionChanged = onPositionChanged\n\n    this.resizeManager = resizeManager\n\n    this.resizeManager.observe({\n      element: this.element,\n      priority: this.priority,\n      callback: () => {\n        this.setSize()\n      },\n    })\n\n    // set size right away on init\n    this.setSize()\n  }\n\n  /**\n   * Check whether 2 bounding rectangles are equals\n   * @param rect1 - first bounding rectangle\n   * @param rect2 - second bounding rectangle\n   * @returns - whether the rectangles are equals or not\n   */\n  compareBoundingRect(rect1: DOMRect | DOMElementBoundingRect, rect2: DOMRect | DOMElementBoundingRect): boolean {\n    return !['x', 'y', 'left', 'top', 'right', 'bottom', 'width', 'height'].some((k) => rect1[k] !== rect2[k])\n  }\n\n  /**\n   * Get our element bounding rectangle\n   */\n  get boundingRect(): DOMElementBoundingRect {\n    return this._boundingRect\n  }\n\n  /**\n   * Set our element bounding rectangle\n   * @param boundingRect - new bounding rectangle\n   */\n  set boundingRect(boundingRect: DOMElementBoundingRect) {\n    const isSameRect = !!this.boundingRect && this.compareBoundingRect(boundingRect, this.boundingRect)\n\n    this._boundingRect = {\n      top: boundingRect.top,\n      right: boundingRect.right,\n      bottom: boundingRect.bottom,\n      left: boundingRect.left,\n      width: boundingRect.width,\n      height: boundingRect.height,\n      x: boundingRect.x,\n      y: boundingRect.y,\n    }\n\n    if (!isSameRect) {\n      this.onSizeChanged(this.boundingRect)\n    }\n  }\n\n  /**\n   * Update our element bounding rectangle because the scroll position has changed\n   * @param delta - scroll delta values along X and Y axis\n   */\n  updateScrollPosition(delta: DOMPosition = { x: 0, y: 0 }) {\n    if (this.isResizing) return\n\n    this._boundingRect.top += delta.y\n    this._boundingRect.left += delta.x\n\n    if (delta.x || delta.y) {\n      this.onPositionChanged(this.boundingRect)\n    }\n  }\n\n  /**\n   * Set our element bounding rectangle, either by a value or a getBoundingClientRect call\n   * @param boundingRect - new bounding rectangle\n   */\n  setSize(boundingRect: DOMElementBoundingRect | null = null) {\n    if (!this.element) return\n\n    this.boundingRect = boundingRect ?? this.element.getBoundingClientRect()\n\n    this.isResizing = false\n  }\n\n  /**\n   * Destroy our DOMElement - remove from resize observer and clear throttle timeout\n   */\n  destroy() {\n    this.resizeManager.unobserve(this.element)\n  }\n}\n"],"names":[],"mappings":"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"}