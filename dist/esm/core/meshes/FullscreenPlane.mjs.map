{"version":3,"file":"FullscreenPlane.mjs","sources":["../../../../src/core/meshes/FullscreenPlane.ts"],"sourcesContent":["import { MeshBaseMixin, MeshBaseRenderParams } from './mixins/MeshBaseMixin'\nimport { isRenderer, Renderer } from '../renderers/utils'\nimport { PlaneGeometry } from '../geometries/PlaneGeometry'\nimport { DOMElementBoundingRect, RectBBox } from '../DOM/DOMElement'\nimport { Vec2 } from '../../math/Vec2'\nimport { cacheManager } from '../../utils/CacheManager'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/**\n * Create a 1x1 quad (or plane) covering the full viewport, useful for postprocessing or background effects.\n *\n * It consists of a {@link PlaneGeometry} and {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial} and a few utilities method to help create {@link core/textures/Texture.Texture | Texture} and {@link core/textures/RenderTexture.RenderTexture | RenderTexture}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a fullscreen plane\n * // will use the normals colors as default shading\n * const fullscreenPlane = new FullscreenPlane(gpuCurtains, {\n *   label: 'My fullscreen plane',\n *   shaders: {\n *     fragment: {\n *       code: fragmentCode, // assume it is a valid WGSL fragment shader\n *     },\n *   },\n * })\n * ```\n */\nexport class FullscreenPlane extends MeshBaseMixin(class {}) {\n  /** The type of the {@link FullscreenPlane} */\n  type: string\n  /** Object defining the  {@link FullscreenPlane} size */\n  size: {\n    /** document HTML size */\n    document: RectBBox\n  }\n\n  /**\n   * FullscreenPlane constructor\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link FullscreenPlane}\n   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link FullscreenPlane}\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters = {} as MeshBaseRenderParams) {\n    // we could pass our curtains object OR our curtains renderer object\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\n\n    isRenderer(renderer, parameters.label ? parameters.label + ' FullscreenQuadMesh' : 'FullscreenQuadMesh')\n\n    // can we get a cached geometry?\n    let geometry = cacheManager.getPlaneGeometryByID(2) // 1 * 1 + 1\n\n    if (!geometry) {\n      // we need to create a new plane geometry\n      geometry = new PlaneGeometry({ widthSegments: 1, heightSegments: 1 })\n      cacheManager.addPlaneGeometry(geometry)\n    }\n\n    // no vertex shader? patch uniforms/storages visibility\n    if (!parameters.shaders || !parameters.shaders.vertex) {\n      ;['uniforms', 'storages'].forEach((bindingType) => {\n        Object.keys(parameters[bindingType] ?? {}).forEach(\n          (bindingKey) => (parameters[bindingType][bindingKey].visibility = 'fragment')\n        )\n      })\n    }\n\n    // @ts-ignore\n    super(renderer, null, { geometry, ...parameters })\n\n    this.size = {\n      document: {\n        width: this.renderer.boundingRect.width,\n        height: this.renderer.boundingRect.height,\n        top: this.renderer.boundingRect.top,\n        left: this.renderer.boundingRect.left,\n      },\n    }\n\n    this.type = 'FullscreenQuadMesh'\n  }\n\n  /**\n   * Resize our {@link FullscreenPlane}\n   * @param boundingRect - the new bounding rectangle\n   */\n  resize(boundingRect: DOMElementBoundingRect | null = null) {\n    this.size.document = boundingRect ?? this.renderer.boundingRect\n\n    super.resize(boundingRect)\n  }\n\n  /**\n   * Take the pointer {@link Vec2 | vector} position relative to the document and returns it relative to our {@link FullscreenPlane}\n   * It ranges from -1 to 1 on both axis\n   * @param mouseCoords - pointer {@link Vec2 | vector} coordinates\n   * @returns - the mapped {@link Vec2 | vector} coordinates in the [-1, 1] range\n   */\n  mouseToPlaneCoords(mouseCoords: Vec2 = new Vec2()): Vec2 {\n    // mouse position conversion from document to plane space\n    return new Vec2(\n      ((mouseCoords.x - this.size.document.left) / this.size.document.width) * 2 - 1,\n      1 - ((mouseCoords.y - this.size.document.top) / this.size.document.height) * 2\n    )\n  }\n}\n"],"names":[],"mappings":";;;;;;AAoCa,MAAA,eAAA,SAAwB,cAAc,MAAM;AAAC,CAAC,CAAE,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAc3D,WAAY,CAAA,QAAA,EAAkC,UAAa,GAAA,EAA4B,EAAA;AAErF,IAAY,QAAA,GAAA,QAAA,IAAa,SAAyB,QAAc,IAAA,QAAA,CAAA;AAEhE,IAAA,UAAA,CAAW,UAAU,UAAW,CAAA,KAAA,GAAQ,UAAW,CAAA,KAAA,GAAQ,wBAAwB,oBAAoB,CAAA,CAAA;AAGvG,IAAI,IAAA,QAAA,GAAW,YAAa,CAAA,oBAAA,CAAqB,CAAC,CAAA,CAAA;AAElD,IAAA,IAAI,CAAC,QAAU,EAAA;AAEb,MAAA,QAAA,GAAW,IAAI,aAAc,CAAA,EAAE,eAAe,CAAG,EAAA,cAAA,EAAgB,GAAG,CAAA,CAAA;AACpE,MAAA,YAAA,CAAa,iBAAiB,QAAQ,CAAA,CAAA;AAAA,KACxC;AAGA,IAAA,IAAI,CAAC,UAAW,CAAA,OAAA,IAAW,CAAC,UAAA,CAAW,QAAQ,MAAQ,EAAA;AACpD,MAAA,CAAC,UAAY,EAAA,UAAU,CAAE,CAAA,OAAA,CAAQ,CAAC,WAAgB,KAAA;AACjD,QAAA,MAAA,CAAO,KAAK,UAAW,CAAA,WAAW,CAAK,IAAA,EAAE,CAAE,CAAA,OAAA;AAAA,UACzC,CAAC,UAAgB,KAAA,UAAA,CAAW,WAAW,CAAE,CAAA,UAAU,EAAE,UAAa,GAAA,UAAA;AAAA,SACpE,CAAA;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAGA,IAAA,KAAA,CAAM,UAAU,IAAM,EAAA,EAAE,QAAU,EAAA,GAAG,YAAY,CAAA,CAAA;AAEjD,IAAA,IAAA,CAAK,IAAO,GAAA;AAAA,MACV,QAAU,EAAA;AAAA,QACR,KAAA,EAAO,IAAK,CAAA,QAAA,CAAS,YAAa,CAAA,KAAA;AAAA,QAClC,MAAA,EAAQ,IAAK,CAAA,QAAA,CAAS,YAAa,CAAA,MAAA;AAAA,QACnC,GAAA,EAAK,IAAK,CAAA,QAAA,CAAS,YAAa,CAAA,GAAA;AAAA,QAChC,IAAA,EAAM,IAAK,CAAA,QAAA,CAAS,YAAa,CAAA,IAAA;AAAA,OACnC;AAAA,KACF,CAAA;AAEA,IAAA,IAAA,CAAK,IAAO,GAAA,oBAAA,CAAA;AAAA,GACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAA,CAAO,eAA8C,IAAM,EAAA;AACzD,IAAA,IAAA,CAAK,IAAK,CAAA,QAAA,GAAW,YAAgB,IAAA,IAAA,CAAK,QAAS,CAAA,YAAA,CAAA;AAEnD,IAAA,KAAA,CAAM,OAAO,YAAY,CAAA,CAAA;AAAA,GAC3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,kBAAmB,CAAA,WAAA,GAAoB,IAAI,IAAA,EAAc,EAAA;AAEvD,IAAA,OAAO,IAAI,IAAA;AAAA,MACP,CAAA,WAAA,CAAY,CAAI,GAAA,IAAA,CAAK,IAAK,CAAA,QAAA,CAAS,QAAQ,IAAK,CAAA,IAAA,CAAK,QAAS,CAAA,KAAA,GAAS,CAAI,GAAA,CAAA;AAAA,MAC7E,CAAA,GAAA,CAAM,WAAY,CAAA,CAAA,GAAI,IAAK,CAAA,IAAA,CAAK,SAAS,GAAO,IAAA,IAAA,CAAK,IAAK,CAAA,QAAA,CAAS,MAAU,GAAA,CAAA;AAAA,KAC/E,CAAA;AAAA,GACF;AACF;;;;"}