{"version":3,"file":"Mesh.mjs","sources":["../../../../src/core/meshes/Mesh.ts"],"sourcesContent":["import { CameraRenderer, isCameraRenderer } from '../renderers/utils'\nimport { ProjectedObject3D } from '../objects3D/ProjectedObject3D'\nimport { ProjectedMeshBaseMixin } from './mixins/ProjectedMeshBaseMixin'\nimport { MeshBaseParams } from './mixins/MeshBaseMixin'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\n\n/**\n * Create a 3D Mesh.\n *\n * A 3D Mesh is a basically a {@link ProjectedObject3D} with a {@link core/geometries/Geometry.Geometry | Geometry} and a {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}.\n *\n * You need to pass at least a valid {@link core/geometries/Geometry.Geometry | Geometry} as parameter.<br>\n * If no shaders are provided, it will use the normals colors as default shading.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a mesh with a box geometry\n * // will use the normals colors as default shading\n * const mesh = new Mesh(gpuCurtains, {\n *   label: 'My mesh',\n *   geometry: new BoxGeometry(),\n * })\n * ```\n */\nexport class Mesh extends ProjectedMeshBaseMixin(ProjectedObject3D) {\n  /**\n   * Mesh constructor\n   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link Mesh}\n   * @param parameters - {@link MeshBaseParams | parameters} use to create this {@link Mesh}\n   */\n  constructor(renderer: CameraRenderer | GPUCurtains, parameters: MeshBaseParams) {\n    // we could pass our curtains object OR our curtains renderer object\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as CameraRenderer)\n\n    isCameraRenderer(renderer, parameters.label ? parameters.label + ' Mesh' : 'Mesh')\n\n    // @ts-ignore\n    super(renderer, null, parameters)\n\n    this.type = 'Mesh'\n  }\n}\n"],"names":[],"mappings":";;;;AAiCa,MAAA,IAAA,SAAa,sBAAuB,CAAA,iBAAiB,CAAE,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAMlE,WAAA,CAAY,UAAwC,UAA4B,EAAA;AAE9E,IAAY,QAAA,GAAA,QAAA,IAAa,SAAyB,QAAc,IAAA,QAAA,CAAA;AAEhE,IAAA,gBAAA,CAAiB,UAAU,UAAW,CAAA,KAAA,GAAQ,UAAW,CAAA,KAAA,GAAQ,UAAU,MAAM,CAAA,CAAA;AAGjF,IAAM,KAAA,CAAA,QAAA,EAAU,MAAM,UAAU,CAAA,CAAA;AAEhC,IAAA,IAAA,CAAK,IAAO,GAAA,MAAA,CAAA;AAAA,GACd;AACF;;;;"}