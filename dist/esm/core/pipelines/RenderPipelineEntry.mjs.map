{"version":3,"file":"RenderPipelineEntry.mjs","sources":["../../../../src/core/pipelines/RenderPipelineEntry.ts"],"sourcesContent":["import { PipelineEntry } from './PipelineEntry'\nimport { ProjectedShaderChunks, ShaderChunks } from '../shaders/ShaderChunks'\nimport { isRenderer, Renderer } from '../renderers/utils'\nimport { throwError } from '../../utils/utils'\nimport {\n  PipelineEntryShaders,\n  RenderPipelineEntryOptions,\n  RenderPipelineEntryParams,\n  RenderPipelineEntryPropertiesParams,\n} from '../../types/PipelineEntries'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { AllowedBindGroups, BindGroupBufferBindingElement } from '../../types/BindGroups'\nimport { RenderMaterialAttributes, ShaderOptions } from '../../types/Materials'\n\n/**\n * Used to create a {@link PipelineEntry} specifically designed to handle {@link core/materials/RenderMaterial.RenderMaterial | RenderMaterial}.\n *\n * ## Shaders patching\n *\n * The {@link RenderPipelineEntry} uses each of its {@link RenderPipelineEntry#bindGroups | bind groups} {@link core/bindings/Binding.Binding | Binding} to patch the given compute shader before creating the {@link GPUShaderModule}.<br>\n * It will prepend every {@link core/bindings/Binding.Binding | Binding} WGSL code snippets (or fragments) with the correct bind group and bindings indices.\n *\n * ## Pipeline compilation\n *\n * The {@link RenderPipelineEntry} will then create a {@link GPURenderPipeline} (asynchronously by default).\n */\nexport class RenderPipelineEntry extends PipelineEntry {\n  /** Shaders to use with this {@link RenderPipelineEntry} */\n  shaders: PipelineEntryShaders\n  /** {@link RenderMaterialAttributes | Geometry attributes} sent to the {@link RenderPipelineEntry} */\n  attributes: RenderMaterialAttributes\n  /** {@link GPURenderPipelineDescriptor | Render pipeline descriptor} based on {@link layout} and {@link shaders} */\n  descriptor: GPURenderPipelineDescriptor | null\n  /** Options used to create this {@link RenderPipelineEntry} */\n  options: RenderPipelineEntryOptions\n\n  /**\n   * RenderPipelineEntry constructor\n   * @param parameters - {@link RenderPipelineEntryParams | parameters} used to create this {@link RenderPipelineEntry}\n   */\n  constructor(parameters: RenderPipelineEntryParams) {\n    let { renderer } = parameters\n    const { label, ...renderingOptions } = parameters\n\n    // we could pass our curtains object OR our curtains renderer object\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\n\n    const type = 'RenderPipelineEntry'\n\n    isRenderer(renderer, label ? label + ' ' + type : type)\n\n    super(parameters)\n\n    this.type = type\n\n    this.shaders = {\n      vertex: {\n        head: '',\n        code: '',\n        module: null,\n      },\n      fragment: {\n        head: '',\n        code: '',\n        module: null,\n      },\n      full: {\n        head: '',\n        code: '',\n        module: null,\n      },\n    }\n\n    this.descriptor = null\n\n    this.options = {\n      ...this.options,\n      ...renderingOptions,\n    } as RenderPipelineEntryOptions\n  }\n\n  // TODO! need to chose whether we should silently add the camera bind group here\n  // or explicitly in the RenderMaterial class createBindGroups() method\n  /**\n   * Merge our {@link bindGroups | pipeline entry bind groups} with the {@link core/renderers/GPUCameraRenderer.GPUCameraRenderer#cameraBindGroup | camera bind group} if needed and set them\n   * @param bindGroups - {@link core/materials/RenderMaterial.RenderMaterial#bindGroups | bind groups} to use with this {@link RenderPipelineEntry}\n   */\n  setPipelineEntryBindGroups(bindGroups: AllowedBindGroups[]) {\n    this.bindGroups =\n      'cameraBindGroup' in this.renderer && this.options.useProjection\n        ? [this.renderer.cameraBindGroup, ...bindGroups]\n        : bindGroups\n  }\n\n  /**\n   * Set {@link RenderPipelineEntry} properties (in this case the {@link bindGroups | bind groups} and {@link attributes})\n   * @param parameters - the {@link core/materials/RenderMaterial.RenderMaterial#bindGroups | bind groups} and {@link core/materials/RenderMaterial.RenderMaterial#attributes | attributes} to use\n   */\n  setPipelineEntryProperties(parameters: RenderPipelineEntryPropertiesParams) {\n    const { attributes, bindGroups } = parameters\n\n    this.attributes = attributes\n\n    this.setPipelineEntryBindGroups(bindGroups)\n  }\n\n  /* SHADERS */\n\n  /**\n   * Patch the shaders by appending all the necessary shader chunks, {@link bindGroups | bind groups}) and {@link attributes} WGSL code fragments to the given {@link types/PipelineEntries.PipelineEntryParams#shaders | parameter shader code}\n   */\n  patchShaders() {\n    this.shaders.vertex.head = ''\n    this.shaders.vertex.code = ''\n    this.shaders.fragment.head = ''\n    this.shaders.fragment.code = ''\n    this.shaders.full.head = ''\n    this.shaders.full.code = ''\n\n    // first add chunks\n    for (const chunk in ShaderChunks.vertex) {\n      this.shaders.vertex.head = `${ShaderChunks.vertex[chunk]}\\n${this.shaders.vertex.head}`\n      this.shaders.full.head = `${ShaderChunks.vertex[chunk]}\\n${this.shaders.full.head}`\n    }\n\n    if (this.options.shaders.fragment) {\n      for (const chunk in ShaderChunks.fragment) {\n        this.shaders.fragment.head = `${ShaderChunks.fragment[chunk]}\\n${this.shaders.fragment.head}`\n\n        if (this.shaders.full.head.indexOf(ShaderChunks.fragment[chunk]) === -1) {\n          this.shaders.full.head = `${ShaderChunks.fragment[chunk]}\\n${this.shaders.full.head}`\n        }\n      }\n    }\n\n    if (this.options.useProjection) {\n      for (const chunk in ProjectedShaderChunks.vertex) {\n        this.shaders.vertex.head = `${ProjectedShaderChunks.vertex[chunk]}\\n${this.shaders.vertex.head}`\n        this.shaders.full.head = `${ProjectedShaderChunks.vertex[chunk]}\\n${this.shaders.full.head}`\n      }\n\n      if (this.options.shaders.fragment) {\n        for (const chunk in ProjectedShaderChunks.fragment) {\n          this.shaders.fragment.head = `${ProjectedShaderChunks.fragment[chunk]}\\n${this.shaders.fragment.head}`\n\n          if (this.shaders.full.head.indexOf(ProjectedShaderChunks.fragment[chunk]) === -1) {\n            this.shaders.full.head = `${ProjectedShaderChunks.fragment[chunk]}\\n${this.shaders.full.head}`\n          }\n        }\n      }\n    }\n\n    const groupsBindings = []\n    this.bindGroups.forEach((bindGroup) => {\n      let bindIndex = 0\n      bindGroup.bindings.forEach((binding, bindingIndex) => {\n        binding.wgslGroupFragment.forEach((groupFragment, groupFragmentIndex) => {\n          groupsBindings.push({\n            groupIndex: bindGroup.index,\n            visibility: binding.visibility,\n            bindIndex,\n            wgslStructFragment: (binding as BindGroupBufferBindingElement).wgslStructFragment,\n            wgslGroupFragment: groupFragment,\n            newLine:\n              bindingIndex === bindGroup.bindings.length - 1 &&\n              groupFragmentIndex === binding.wgslGroupFragment.length - 1,\n          })\n\n          bindIndex++\n        })\n      })\n    })\n\n    groupsBindings.forEach((groupBinding) => {\n      if (\n        groupBinding.visibility === GPUShaderStage.VERTEX ||\n        groupBinding.visibility === (GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE)\n      ) {\n        // do not duplicate structs\n        if (\n          groupBinding.wgslStructFragment &&\n          this.shaders.vertex.head.indexOf(groupBinding.wgslStructFragment) === -1\n        ) {\n          this.shaders.vertex.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.vertex.head}`\n        }\n\n        // do not duplicate struct var as well\n        if (this.shaders.vertex.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n          this.shaders.vertex.head = `${this.shaders.vertex.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n\n          if (groupBinding.newLine) this.shaders.vertex.head += `\\n`\n        }\n      }\n\n      if (\n        this.options.shaders.fragment &&\n        (groupBinding.visibility === GPUShaderStage.FRAGMENT ||\n          groupBinding.visibility === (GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE))\n      ) {\n        // do not duplicate structs\n        if (\n          groupBinding.wgslStructFragment &&\n          this.shaders.fragment.head.indexOf(groupBinding.wgslStructFragment) === -1\n        ) {\n          this.shaders.fragment.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.fragment.head}`\n        }\n\n        // do not duplicate struct var as well\n        if (this.shaders.fragment.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n          this.shaders.fragment.head = `${this.shaders.fragment.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n\n          if (groupBinding.newLine) this.shaders.fragment.head += `\\n`\n        }\n      }\n\n      if (groupBinding.wgslStructFragment && this.shaders.full.head.indexOf(groupBinding.wgslStructFragment) === -1) {\n        this.shaders.full.head = `\\n${groupBinding.wgslStructFragment}\\n${this.shaders.full.head}`\n      }\n\n      if (this.shaders.full.head.indexOf(groupBinding.wgslGroupFragment) === -1) {\n        this.shaders.full.head = `${this.shaders.full.head}\\n@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`\n\n        if (groupBinding.newLine) this.shaders.full.head += `\\n`\n      }\n    })\n\n    // add attributes to vertex shader only\n    this.shaders.vertex.head = `${this.attributes.wgslStructFragment}\\n${this.shaders.vertex.head}`\n    this.shaders.full.head = `${this.attributes.wgslStructFragment}\\n${this.shaders.full.head}`\n\n    this.shaders.vertex.code = this.shaders.vertex.head + this.options.shaders.vertex.code\n\n    if (typeof this.options.shaders.fragment === 'object')\n      this.shaders.fragment.code = this.shaders.fragment.head + this.options.shaders.fragment.code\n\n    // check if its one shader string with different entry points\n    if (typeof this.options.shaders.fragment === 'object') {\n      if (\n        this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint &&\n        this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0\n      ) {\n        this.shaders.full.code = this.shaders.full.head + this.options.shaders.vertex.code\n      } else {\n        this.shaders.full.code =\n          this.shaders.full.head + this.options.shaders.vertex.code + this.options.shaders.fragment.code\n      }\n    }\n  }\n\n  /* SETUP */\n\n  /**\n   * Get whether the shaders modules have been created\n   * @readonly\n   */\n  get shadersModulesReady(): boolean {\n    return !(!this.shaders.vertex.module || (this.options.shaders.fragment && !this.shaders.fragment.module))\n  }\n\n  /**\n   * Create the {@link shaders}: patch them and create the {@link GPUShaderModule}\n   */\n  createShaders() {\n    this.patchShaders()\n\n    const isSameShader =\n      typeof this.options.shaders.fragment === 'object' &&\n      this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint &&\n      this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0\n\n    this.shaders.vertex.module = this.createShaderModule({\n      code: this.shaders[isSameShader ? 'full' : 'vertex'].code,\n      type: 'vertex',\n    })\n\n    if (this.options.shaders.fragment) {\n      this.shaders.fragment.module = this.createShaderModule({\n        code: this.shaders[isSameShader ? 'full' : 'fragment'].code,\n        type: 'fragment',\n      })\n    }\n  }\n\n  /**\n   * Create the render pipeline {@link descriptor}\n   */\n  createPipelineDescriptor() {\n    if (!this.shadersModulesReady) return\n\n    let vertexLocationIndex = -1\n\n    // we will assume our renderer alphaMode is set to 'premultiplied'\n    // we either disable blending if mesh if opaque\n    // use a custom blending if set\n    // or use this blend equation if mesh is transparent (see https://limnu.com/webgl-blending-youre-probably-wrong/)\n    const blend =\n      this.options.blend ??\n      (this.options.transparent && {\n        color: {\n          srcFactor: 'src-alpha',\n          dstFactor: 'one-minus-src-alpha',\n        },\n        alpha: {\n          srcFactor: 'one',\n          dstFactor: 'one-minus-src-alpha',\n        },\n      })\n\n    this.descriptor = {\n      label: this.options.label,\n      layout: this.layout,\n      vertex: {\n        module: this.shaders.vertex.module,\n        entryPoint: this.options.shaders.vertex.entryPoint,\n        buffers: this.attributes.vertexBuffers.map((vertexBuffer) => {\n          return {\n            stepMode: vertexBuffer.stepMode,\n            arrayStride: vertexBuffer.arrayStride * 4, // 4 bytes each\n            attributes: vertexBuffer.attributes.map((attribute) => {\n              vertexLocationIndex++\n              return {\n                shaderLocation: vertexLocationIndex,\n                offset: attribute.bufferOffset, // previous attribute size * 4\n                format: attribute.bufferFormat,\n              }\n            }),\n          }\n        }),\n      },\n      ...(this.options.shaders.fragment && {\n        fragment: {\n          module: this.shaders.fragment.module,\n          entryPoint: (this.options.shaders.fragment as ShaderOptions).entryPoint,\n          targets: [\n            {\n              format: this.options.targetFormat ?? this.renderer.options.preferredFormat,\n              ...(blend && {\n                blend,\n              }),\n            },\n            ...(this.options.additionalTargets ?? []), // merge with additional targets if any\n          ],\n        },\n      }),\n      primitive: {\n        topology: this.options.topology,\n        frontFace: this.options.verticesOrder,\n        cullMode: this.options.cullMode,\n      },\n      ...(this.options.depth && {\n        depthStencil: {\n          depthWriteEnabled: this.options.depthWriteEnabled,\n          depthCompare: this.options.depthCompare,\n          format: this.options.depthFormat,\n        },\n      }),\n      ...(this.options.sampleCount > 1 && {\n        multisample: {\n          count: this.options.sampleCount,\n        },\n      }),\n    } as GPURenderPipelineDescriptor\n  }\n\n  /**\n   * Create the render {@link pipeline}\n   */\n  createRenderPipeline() {\n    if (!this.shadersModulesReady) return\n\n    try {\n      this.pipeline = this.renderer.createRenderPipeline(this.descriptor)\n    } catch (error) {\n      this.status.error = error\n      throwError(error)\n    }\n  }\n\n  /**\n   * Asynchronously create the render {@link pipeline}\n   * @async\n   * @returns - void promise result\n   */\n  async createRenderPipelineAsync(): Promise<void> {\n    if (!this.shadersModulesReady) return\n\n    try {\n      this.pipeline = await this.renderer.createRenderPipelineAsync(this.descriptor)\n      this.status.compiled = true\n      this.status.compiling = false\n      this.status.error = null\n    } catch (error) {\n      this.status.error = error\n      throwError(error)\n    }\n  }\n\n  /**\n   * Call {@link PipelineEntry#compilePipelineEntry | PipelineEntry compilePipelineEntry} method, then create our render {@link pipeline}\n   * @async\n   */\n  async compilePipelineEntry(): Promise<void> {\n    super.compilePipelineEntry()\n\n    if (this.options.useAsync) {\n      await this.createRenderPipelineAsync()\n    } else {\n      this.createRenderPipeline()\n      this.status.compiled = true\n      this.status.compiling = false\n      this.status.error = null\n    }\n  }\n}\n"],"names":[],"mappings":"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"}