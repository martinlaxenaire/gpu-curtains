{"version":3,"file":"PipelineEntry.mjs","sources":["../../../../src/core/pipelines/PipelineEntry.ts"],"sourcesContent":["import { isRenderer, Renderer } from '../renderers/utils'\nimport { PipelineEntryOptions, PipelineEntryParams, PipelineEntryStatus } from '../../types/PipelineEntries'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { AllowedBindGroups } from '../../types/BindGroups'\nimport { MaterialShadersType } from '../../types/Materials'\n\nlet pipelineId = 0\n\n/**\n * Used as a base class to create a pipeline entry.<br>\n * {@link PipelineEntry} roles are:\n * - Patch the given {@link core/materials/Material.Material | Material} shaders code and create the corresponding {@link GPUShaderModule}.\n * - Create a {@link GPUPipelineLayout | pipeline layout} with the given {@link core/materials/Material.Material#bindGroups | bind groups}\n * - Create a GPU pipeline\n */\nexport class PipelineEntry {\n  /** The type of the {@link PipelineEntry} */\n  type: string\n  /** The {@link Renderer} used to create this {@link PipelineEntry} */\n  renderer: Renderer\n  /** Index of this {@link PipelineEntry}, i.e. creation order */\n  readonly index: number\n  /** {@link GPUPipelineLayout | Pipeline layout} created based on the given {@link bindGroups | bind groups} */\n  layout: GPUPipelineLayout | null\n  /** The GPU pipeline */\n  pipeline: GPURenderPipeline | GPUComputePipeline | null\n  /** The pipeline {@link PipelineEntryStatus | compilation status} */\n  status: PipelineEntryStatus\n  /** Options used to create this {@link PipelineEntry} */\n  options: PipelineEntryOptions\n\n  /** {@link core/materials/Material.Material#bindGroups | bind groups} used to patch the shaders and create the {@link PipelineEntry#layout | pipeline layout} */\n  bindGroups: AllowedBindGroups[]\n\n  /**\n   * PipelineEntry constructor\n   * @param parameters - {@link PipelineEntryParams | parameters} used to create this {@link PipelineEntry}\n   */\n  constructor(parameters: PipelineEntryParams) {\n    this.type = 'PipelineEntry'\n\n    let { renderer } = parameters\n    const { label, shaders, useAsync } = parameters\n\n    // we could pass our curtains object OR our curtains renderer object\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\n\n    isRenderer(renderer, label ? label + ' ' + this.type : this.type)\n\n    this.renderer = renderer\n\n    Object.defineProperty(this as PipelineEntry, 'index', { value: pipelineId++ })\n\n    this.layout = null\n    this.pipeline = null\n\n    this.status = {\n      compiling: false,\n      compiled: false,\n      error: null,\n    }\n\n    this.options = {\n      label,\n      shaders,\n      useAsync: useAsync !== undefined ? useAsync : true,\n    }\n  }\n\n  /**\n   * Get whether the {@link pipeline} is ready, i.e. successfully compiled\n   * @readonly\n   */\n  get ready(): boolean {\n    return !this.status.compiling && this.status.compiled && !this.status.error\n  }\n\n  /**\n   * Get whether the {@link pipeline} is ready to be compiled, i.e. we have not already tried to compile it, and it's not currently compiling neither\n   * @readonly\n   */\n  get canCompile(): boolean {\n    return !this.status.compiling && !this.status.compiled && !this.status.error\n  }\n\n  /**\n   * Set our {@link PipelineEntry#bindGroups | pipeline entry bind groups}\n   * @param bindGroups - {@link core/materials/Material.Material#bindGroups | bind groups} to use with this {@link PipelineEntry}\n   */\n  setPipelineEntryBindGroups(bindGroups: AllowedBindGroups[]) {\n    this.bindGroups = bindGroups\n  }\n\n  /* SHADERS */\n\n  /**\n   * Create a {@link GPUShaderModule}\n   * @param parameters - Parameters used\n   * @param parameters.code - patched WGSL code string\n   * @param parameters.type - {@link MaterialShadersType | shader type}\n   * @returns - compiled {@link GPUShaderModule} if successful\n   */\n  createShaderModule({ code = '', type = 'vertex' }: { code: string; type: MaterialShadersType }): GPUShaderModule {\n    const shaderModule = this.renderer.createShaderModule({\n      label: this.options.label + ': ' + type + 'Shader module',\n      code,\n    })\n\n    if ('getCompilationInfo' in shaderModule && !this.renderer.production) {\n      shaderModule.getCompilationInfo().then((compilationInfo) => {\n        for (const message of compilationInfo.messages) {\n          let formattedMessage = ''\n          if (message.lineNum) {\n            formattedMessage += `Line ${message.lineNum}:${message.linePos} - ${code.substring(\n              message.offset,\n              message.offset + message.length\n            )}\\n`\n          }\n          formattedMessage += message.message\n\n          switch (message.type) {\n            case 'error':\n              // TODO mesh onError?\n              console.error(`${this.options.label} compilation error:\\n${formattedMessage}`)\n              break\n            case 'warning':\n              console.warn(`${this.options.label} compilation warning:\\n${formattedMessage}`)\n              break\n            case 'info':\n              console.log(`${this.options.label} compilation information:\\n${formattedMessage}`)\n              break\n          }\n        }\n      })\n    }\n\n    return shaderModule\n  }\n\n  /* SETUP */\n\n  /**\n   * Create the {@link PipelineEntry} shaders\n   */\n  createShaders() {\n    /* will be overriden */\n  }\n\n  /**\n   * Create the pipeline entry {@link layout}\n   */\n  createPipelineLayout() {\n    this.layout = this.renderer.createPipelineLayout({\n      label: this.options.label + ' layout',\n      bindGroupLayouts: this.bindGroups.map((bindGroup) => bindGroup.bindGroupLayout),\n    })\n  }\n\n  /**\n   * Create the {@link PipelineEntry} descriptor\n   */\n  createPipelineDescriptor() {\n    /* will be overriden */\n  }\n\n  /**\n   * Flush a {@link PipelineEntry}, i.e. reset its {@link bindGroups | bind groups}, {@link layout} and descriptor and recompile the {@link pipeline}\n   * Used when one of the bind group or rendering property has changed\n   * @param newBindGroups - new {@link bindGroups | bind groups} in case they have changed\n   */\n  flushPipelineEntry(newBindGroups: AllowedBindGroups[] = []) {\n    this.status.compiling = false\n    this.status.compiled = false\n    this.status.error = null\n\n    this.setPipelineEntryBindGroups(newBindGroups)\n    this.compilePipelineEntry()\n  }\n\n  /**\n   * Set up a {@link pipeline} by creating the shaders, the {@link layout} and the descriptor\n   */\n  compilePipelineEntry() {\n    this.status.compiling = true\n\n    this.createShaders()\n    this.createPipelineLayout()\n    this.createPipelineDescriptor()\n  }\n}\n"],"names":[],"mappings":";;AAMA,IAAI,UAAa,GAAA,CAAA,CAAA;AASV,MAAM,aAAc,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAuBzB,YAAY,UAAiC,EAAA;AAC3C,IAAA,IAAA,CAAK,IAAO,GAAA,eAAA,CAAA;AAEZ,IAAI,IAAA,EAAE,UAAa,GAAA,UAAA,CAAA;AACnB,IAAA,MAAM,EAAE,KAAA,EAAO,OAAS,EAAA,QAAA,EAAa,GAAA,UAAA,CAAA;AAGrC,IAAY,QAAA,GAAA,QAAA,IAAa,SAAyB,QAAc,IAAA,QAAA,CAAA;AAEhE,IAAA,UAAA,CAAW,UAAU,KAAQ,GAAA,KAAA,GAAQ,MAAM,IAAK,CAAA,IAAA,GAAO,KAAK,IAAI,CAAA,CAAA;AAEhE,IAAA,IAAA,CAAK,QAAW,GAAA,QAAA,CAAA;AAEhB,IAAA,MAAA,CAAO,eAAe,IAAuB,EAAA,OAAA,EAAS,EAAE,KAAA,EAAO,cAAc,CAAA,CAAA;AAE7E,IAAA,IAAA,CAAK,MAAS,GAAA,IAAA,CAAA;AACd,IAAA,IAAA,CAAK,QAAW,GAAA,IAAA,CAAA;AAEhB,IAAA,IAAA,CAAK,MAAS,GAAA;AAAA,MACZ,SAAW,EAAA,KAAA;AAAA,MACX,QAAU,EAAA,KAAA;AAAA,MACV,KAAO,EAAA,IAAA;AAAA,KACT,CAAA;AAEA,IAAA,IAAA,CAAK,OAAU,GAAA;AAAA,MACb,KAAA;AAAA,MACA,OAAA;AAAA,MACA,QAAA,EAAU,QAAa,KAAA,KAAA,CAAA,GAAY,QAAW,GAAA,IAAA;AAAA,KAChD,CAAA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAiB,GAAA;AACnB,IAAO,OAAA,CAAC,KAAK,MAAO,CAAA,SAAA,IAAa,KAAK,MAAO,CAAA,QAAA,IAAY,CAAC,IAAA,CAAK,MAAO,CAAA,KAAA,CAAA;AAAA,GACxE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,UAAsB,GAAA;AACxB,IAAO,OAAA,CAAC,IAAK,CAAA,MAAA,CAAO,SAAa,IAAA,CAAC,KAAK,MAAO,CAAA,QAAA,IAAY,CAAC,IAAA,CAAK,MAAO,CAAA,KAAA,CAAA;AAAA,GACzE;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,2BAA2B,UAAiC,EAAA;AAC1D,IAAA,IAAA,CAAK,UAAa,GAAA,UAAA,CAAA;AAAA,GACpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAWA,mBAAmB,EAAE,IAAA,GAAO,EAAI,EAAA,IAAA,GAAO,UAA0E,EAAA;AAC/G,IAAM,MAAA,YAAA,GAAe,IAAK,CAAA,QAAA,CAAS,kBAAmB,CAAA;AAAA,MACpD,KAAO,EAAA,IAAA,CAAK,OAAQ,CAAA,KAAA,GAAQ,OAAO,IAAO,GAAA,eAAA;AAAA,MAC1C,IAAA;AAAA,KACD,CAAA,CAAA;AAED,IAAA,IAAI,oBAAwB,IAAA,YAAA,IAAgB,CAAC,IAAA,CAAK,SAAS,UAAY,EAAA;AACrE,MAAA,YAAA,CAAa,kBAAmB,EAAA,CAAE,IAAK,CAAA,CAAC,eAAoB,KAAA;AAC1D,QAAW,KAAA,MAAA,OAAA,IAAW,gBAAgB,QAAU,EAAA;AAC9C,UAAA,IAAI,gBAAmB,GAAA,EAAA,CAAA;AACvB,UAAA,IAAI,QAAQ,OAAS,EAAA;AACnB,YAAA,gBAAA,IAAoB,QAAQ,OAAQ,CAAA,OAAO,IAAI,OAAQ,CAAA,OAAO,MAAM,IAAK,CAAA,SAAA;AAAA,cACvE,OAAQ,CAAA,MAAA;AAAA,cACR,OAAA,CAAQ,SAAS,OAAQ,CAAA,MAAA;AAAA,aAC1B,CAAA;AAAA,CAAA,CAAA;AAAA,WACH;AACA,UAAA,gBAAA,IAAoB,OAAQ,CAAA,OAAA,CAAA;AAE5B,UAAA,QAAQ,QAAQ,IAAM;AAAA,YACpB,KAAK,OAAA;AAEH,cAAA,OAAA,CAAQ,KAAM,CAAA,CAAA,EAAG,IAAK,CAAA,OAAA,CAAQ,KAAK,CAAA;AAAA,EAAwB,gBAAgB,CAAE,CAAA,CAAA,CAAA;AAC7E,cAAA,MAAA;AAAA,YACF,KAAK,SAAA;AACH,cAAA,OAAA,CAAQ,IAAK,CAAA,CAAA,EAAG,IAAK,CAAA,OAAA,CAAQ,KAAK,CAAA;AAAA,EAA0B,gBAAgB,CAAE,CAAA,CAAA,CAAA;AAC9E,cAAA,MAAA;AAAA,YACF,KAAK,MAAA;AACH,cAAA,OAAA,CAAQ,GAAI,CAAA,CAAA,EAAG,IAAK,CAAA,OAAA,CAAQ,KAAK,CAAA;AAAA,EAA8B,gBAAgB,CAAE,CAAA,CAAA,CAAA;AACjF,cAAA,MAAA;AAAA,WACJ;AAAA,SACF;AAAA,OACD,CAAA,CAAA;AAAA,KACH;AAEA,IAAO,OAAA,YAAA,CAAA;AAAA,GACT;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,aAAgB,GAAA;AAAA,GAEhB;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAuB,GAAA;AACrB,IAAK,IAAA,CAAA,MAAA,GAAS,IAAK,CAAA,QAAA,CAAS,oBAAqB,CAAA;AAAA,MAC/C,KAAA,EAAO,IAAK,CAAA,OAAA,CAAQ,KAAQ,GAAA,SAAA;AAAA,MAC5B,kBAAkB,IAAK,CAAA,UAAA,CAAW,IAAI,CAAC,SAAA,KAAc,UAAU,eAAe,CAAA;AAAA,KAC/E,CAAA,CAAA;AAAA,GACH;AAAA;AAAA;AAAA;AAAA,EAKA,wBAA2B,GAAA;AAAA,GAE3B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAOA,kBAAA,CAAmB,aAAqC,GAAA,EAAI,EAAA;AAC1D,IAAA,IAAA,CAAK,OAAO,SAAY,GAAA,KAAA,CAAA;AACxB,IAAA,IAAA,CAAK,OAAO,QAAW,GAAA,KAAA,CAAA;AACvB,IAAA,IAAA,CAAK,OAAO,KAAQ,GAAA,IAAA,CAAA;AAEpB,IAAA,IAAA,CAAK,2BAA2B,aAAa,CAAA,CAAA;AAC7C,IAAA,IAAA,CAAK,oBAAqB,EAAA,CAAA;AAAA,GAC5B;AAAA;AAAA;AAAA;AAAA,EAKA,oBAAuB,GAAA;AACrB,IAAA,IAAA,CAAK,OAAO,SAAY,GAAA,IAAA,CAAA;AAExB,IAAA,IAAA,CAAK,aAAc,EAAA,CAAA;AACnB,IAAA,IAAA,CAAK,oBAAqB,EAAA,CAAA;AAC1B,IAAA,IAAA,CAAK,wBAAyB,EAAA,CAAA;AAAA,GAChC;AACF;;;;"}