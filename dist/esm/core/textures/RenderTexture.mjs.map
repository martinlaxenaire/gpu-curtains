{"version":3,"file":"RenderTexture.mjs","sources":["../../../../src/core/textures/RenderTexture.ts"],"sourcesContent":["import { isRenderer, Renderer } from '../renderers/utils'\nimport { TextureBinding, TextureBindingParams } from '../bindings/TextureBinding'\nimport { BindGroupBindingElement } from '../../types/BindGroups'\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\nimport { BindingMemoryAccessType, TextureBindingType } from '../bindings/Binding'\nimport { generateUUID } from '../../utils/utils'\nimport { Texture } from './Texture'\nimport { TextureSize } from '../../types/Textures'\n\n/**\n * Define the possible binding types of a {@link RenderTexture}\n */\nexport type RenderTextureBindingType = Exclude<TextureBindingType, 'externalTexture'>\n\n/**\n * Base parameters used to create a {@link RenderTexture}\n */\nexport interface RenderTextureBaseParams {\n  /** The label of the {@link RenderTexture}, used to create various GPU objects for debugging purpose */\n  label?: string\n  /** Name of the {@link RenderTexture} to use in the {@link TextureBinding | texture binding} */\n  name?: string\n\n  /** Optional fixed size of the {@link RenderTexture#texture | texture}. If set, the {@link RenderTexture} will never be resized and always keep that size. */\n  fixedSize?: TextureSize\n\n  /** Force the texture size to be set to the given ratio of the {@link core/renderers/GPURenderer.GPURenderer#displayBoundingRect | renderer display bounding rectangle} or {@link fixedSize}. Used mainly to shrink render target definition. */\n  qualityRatio?: number\n\n  /** Whether to use this {@link RenderTexture} as a regular, storage or depth texture */\n  usage?: RenderTextureBindingType\n  /** Optional format of the {@link RenderTexture#texture | texture}, mainly used for storage textures */\n  format?: GPUTextureFormat\n  /** Optional texture binding memory access type, mainly used for storage textures */\n  access?: BindingMemoryAccessType\n  /** Optional {@link RenderTexture#texture | texture} view dimension to use */\n  viewDimension?: GPUTextureViewDimension\n  /** Sample count of the {@link RenderTexture#texture | texture}, used for multisampling */\n  sampleCount?: GPUSize32\n}\n\n/**\n * Parameters used to create a {@link RenderTexture}\n */\nexport interface RenderTextureParams extends RenderTextureBaseParams {\n  /** Optional texture to use as a copy source input. Could be a {@link RenderTexture} or {@link Texture} */\n  fromTexture?: RenderTexture | Texture | null\n}\n\n/** @const - default {@link RenderTexture} parameters */\nconst defaultRenderTextureParams: RenderTextureParams = {\n  label: 'RenderTexture',\n  name: 'renderTexture',\n  usage: 'texture',\n  access: 'write',\n  fromTexture: null,\n  viewDimension: '2d',\n  sampleCount: 1,\n  qualityRatio: 1,\n}\n\n/**\n * Used to create {@link GPUTexture | texture} that can be used as copy source/destination for {@link core/renderPasses/RenderPass.RenderPass | RenderPass} and {@link core/renderPasses/RenderTarget.RenderTarget | RenderTarget}.<br >\n * Basically useful for copying anything outputted to the screen at one point or another.\n *\n * Will create a {@link GPUTexture} and its associated {@link TextureBinding}.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n *\n * // create a render texture\n * const renderTexture = new RenderTexture(gpuCurtains, {\n *   label: 'My render texture',\n *   name: 'renderTexture',\n * })\n * ```\n */\nexport class RenderTexture {\n  /** {@link Renderer | renderer} used by this {@link RenderTexture} */\n  renderer: Renderer\n  /** The type of the {@link RenderTexture} */\n  type: string\n  /** The universal unique id of this {@link RenderTexture} */\n  readonly uuid: string\n\n  /** The {@link GPUTexture} used */\n  texture: GPUTexture\n\n  /** Size of the {@link RenderTexture#texture | texture} source, usually our {@link Renderer#displayBoundingRect | renderer display bounding rectangle size} */\n  size: TextureSize\n\n  /** Options used to create this {@link RenderTexture} */\n  options: RenderTextureParams\n\n  /** Array of {@link core/bindings/Binding.Binding | bindings} that will actually only hold one {@link TextureBinding | texture binding} */\n  bindings: BindGroupBindingElement[]\n\n  /** Whether this texture should be automatically resized when the {@link Renderer renderer} size changes. Default to true. */\n  #autoResize = true\n\n  /**\n   * RenderTexture constructor\n   * @param renderer - {@link Renderer | renderer} object or {@link GPUCurtains} class object used to create this {@link RenderTexture}\n   * @param parameters - {@link RenderTextureParams | parameters} used to create this {@link RenderTexture}\n   */\n  constructor(renderer: Renderer | GPUCurtains, parameters = defaultRenderTextureParams) {\n    // we could pass our curtains object OR our curtains renderer object\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\n\n    isRenderer(renderer, parameters.label ? parameters.label + ' RenderTexture' : 'RenderTexture')\n\n    this.type = 'RenderTexture'\n\n    this.renderer = renderer\n\n    this.uuid = generateUUID()\n\n    this.options = { ...defaultRenderTextureParams, ...parameters }\n\n    if (!this.options.format) {\n      this.options.format = this.renderer.options.preferredFormat\n    }\n\n    // sizes\n    this.size = this.options.fixedSize\n      ? {\n          width: this.options.fixedSize.width * this.options.qualityRatio,\n          height: this.options.fixedSize.height * this.options.qualityRatio,\n          depth: this.options.fixedSize.depth,\n        }\n      : {\n          width: Math.floor(this.renderer.displayBoundingRect.width * this.options.qualityRatio),\n          height: Math.floor(this.renderer.displayBoundingRect.height * this.options.qualityRatio),\n          depth: 1,\n        }\n\n    if (this.options.fixedSize) {\n      this.#autoResize = false\n    }\n\n    // struct\n    this.setBindings()\n\n    // texture\n    this.renderer.addRenderTexture(this)\n    this.createTexture()\n  }\n\n  /**\n   * Copy another {@link RenderTexture} into this {@link RenderTexture}\n   * @param texture - {@link RenderTexture} to copy\n   */\n  copy(texture: RenderTexture | Texture) {\n    this.options.fromTexture = texture\n    this.createTexture()\n  }\n\n  /**\n   * Copy a {@link GPUTexture} directly into this {@link RenderTexture}. Mainly used for depth textures.\n   * @param texture - {@link GPUTexture} to copy\n   */\n  copyGPUTexture(texture: GPUTexture) {\n    this.size = {\n      width: texture.width,\n      height: texture.height,\n      depth: texture.depthOrArrayLayers,\n    }\n\n    this.texture = texture\n    this.textureBinding.resource = this.texture\n  }\n\n  /**\n   * Create the {@link GPUTexture | texture} (or copy it from source) and update the {@link TextureBinding#resource | binding resource}\n   */\n  createTexture() {\n    if (this.options.fromTexture) {\n      // copy the GPU texture\n      this.options.format = this.options.fromTexture.options.format\n      this.copyGPUTexture(this.options.fromTexture.texture)\n      return\n    }\n\n    this.texture?.destroy()\n\n    this.texture = this.renderer.createTexture({\n      label: this.options.label,\n      format: this.options.format,\n      size: [this.size.width, this.size.height, this.size.depth ?? 1],\n      dimensions: this.options.viewDimension === '1d' ? '1d' : this.options.viewDimension === '3d' ? '3d' : '2d',\n      sampleCount: this.options.sampleCount,\n      usage:\n        // TODO let user chose?\n        // see https://matrix.to/#/!MFogdGJfnZLrDmgkBN:matrix.org/$vESU70SeCkcsrJQdyQGMWBtCgVd3XqnHcBxFDKTKKSQ?via=matrix.org&via=mozilla.org&via=hej.im\n        this.options.usage !== 'storage'\n          ? GPUTextureUsage.TEXTURE_BINDING |\n            GPUTextureUsage.COPY_SRC |\n            GPUTextureUsage.COPY_DST |\n            GPUTextureUsage.RENDER_ATTACHMENT\n          : GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\n    } as GPUTextureDescriptor)\n\n    // update texture binding\n    this.textureBinding.resource = this.texture\n  }\n\n  /**\n   * Set our {@link RenderTexture#bindings | bindings}\n   */\n  setBindings() {\n    this.bindings = [\n      new TextureBinding({\n        label: this.options.label + ': ' + this.options.name + ' render texture',\n        name: this.options.name,\n        texture: this.texture,\n        bindingType: this.options.usage,\n        format: this.options.format,\n        viewDimension: this.options.viewDimension,\n        multisampled: this.options.sampleCount > 1,\n      } as TextureBindingParams),\n    ]\n  }\n\n  /**\n   * Get our {@link TextureBinding | texture binding}\n   * @readonly\n   */\n  get textureBinding(): TextureBinding {\n    return this.bindings[0] as TextureBinding\n  }\n\n  /**\n   * Resize our {@link RenderTexture}, which means recreate it/copy it again and tell the {@link core/bindGroups/TextureBindGroup.TextureBindGroup | texture bind group} to update\n   * @param size - the optional new {@link TextureSize | size} to set\n   */\n  resize(size: TextureSize | null = null) {\n    if (!this.#autoResize) return\n\n    if (!size) {\n      size = {\n        width: Math.floor(this.renderer.displayBoundingRect.width * this.options.qualityRatio),\n        height: Math.floor(this.renderer.displayBoundingRect.height * this.options.qualityRatio),\n        depth: 1,\n      }\n    }\n\n    // no real resize, bail!\n    if (size.width === this.size.width && size.height === this.size.height && size.depth === this.size.depth) {\n      return\n    }\n\n    this.size = size\n    this.createTexture()\n  }\n\n  /**\n   * Destroy our {@link RenderTexture}\n   */\n  destroy() {\n    this.renderer.removeRenderTexture(this)\n\n    // destroy the GPU texture only if it's not a copy of another texture\n    if (!this.options.fromTexture) {\n      this.texture?.destroy()\n    }\n\n    this.texture = null\n  }\n}\n"],"names":[],"mappings":"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"}