{"version":3,"file":"RenderTexture.mjs","sources":["../../../../src/core/textures/RenderTexture.ts"],"sourcesContent":["import { isRenderer, Renderer } from '../renderers/utils'\r\nimport { TextureBinding, TextureBindingParams } from '../bindings/TextureBinding'\r\nimport { BindGroupBindingElement } from '../../types/BindGroups'\r\nimport { GPUCurtains } from '../../curtains/GPUCurtains'\r\nimport { BindingMemoryAccessType, TextureBindingType } from '../bindings/Binding'\r\nimport { generateUUID } from '../../utils/utils'\r\nimport { Texture } from './Texture'\r\nimport { TextureSize } from '../../types/Textures'\r\n\r\n/**\r\n * Define the possible binding types of a {@link RenderTexture}\r\n */\r\nexport type RenderTextureBindingType = Exclude<TextureBindingType, 'externalTexture'>\r\n\r\n/**\r\n * Base parameters used to create a {@link RenderTexture}\r\n */\r\nexport interface RenderTextureBaseParams {\r\n  /** The label of the {@link RenderTexture}, used to create various GPU objects for debugging purpose */\r\n  label?: string\r\n  /** Name of the {@link RenderTexture} to use in the {@link TextureBinding | texture binding} */\r\n  name?: string\r\n\r\n  /** Optional fixed size of the {@link RenderTexture#texture | texture}. If set, the {@link RenderTexture} will never be resized and always keep that size. */\r\n  fixedSize?: TextureSize\r\n\r\n  /** Force the texture size to be set to the given ratio of the {@link core/renderers/GPURenderer.GPURenderer#displayBoundingRect | renderer display bounding rectangle} or {@link fixedSize}. Used mainly to shrink render target definition. */\r\n  qualityRatio?: number\r\n\r\n  /** Whether to use this {@link RenderTexture} as a regular, storage or depth texture */\r\n  usage?: RenderTextureBindingType\r\n  /** Optional format of the {@link RenderTexture#texture | texture}, mainly used for storage textures */\r\n  format?: GPUTextureFormat\r\n  /** Optional texture binding memory access type, mainly used for storage textures */\r\n  access?: BindingMemoryAccessType\r\n  /** Optional {@link RenderTexture#texture | texture} view dimension to use */\r\n  viewDimension?: GPUTextureViewDimension\r\n  /** Sample count of the {@link RenderTexture#texture | texture}, used for multisampling */\r\n  sampleCount?: GPUSize32\r\n}\r\n\r\n/**\r\n * Parameters used to create a {@link RenderTexture}\r\n */\r\nexport interface RenderTextureParams extends RenderTextureBaseParams {\r\n  /** Optional texture to use as a copy source input. Could be a {@link RenderTexture} or {@link Texture} */\r\n  fromTexture?: RenderTexture | Texture | null\r\n}\r\n\r\n/** @const - default {@link RenderTexture} parameters */\r\nconst defaultRenderTextureParams: RenderTextureParams = {\r\n  label: 'RenderTexture',\r\n  name: 'renderTexture',\r\n  usage: 'texture',\r\n  access: 'write',\r\n  fromTexture: null,\r\n  viewDimension: '2d',\r\n  sampleCount: 1,\r\n  qualityRatio: 1,\r\n}\r\n\r\n/**\r\n * Used to create {@link GPUTexture | texture} that can be used as copy source/destination for {@link core/renderPasses/RenderPass.RenderPass | RenderPass} and {@link core/renderPasses/RenderTarget.RenderTarget | RenderTarget}.<br >\r\n * Basically useful for copying anything outputted to the screen at one point or another.\r\n *\r\n * Will create a {@link GPUTexture} and its associated {@link TextureBinding}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a render texture\r\n * const renderTexture = new RenderTexture(gpuCurtains, {\r\n *   label: 'My render texture',\r\n *   name: 'renderTexture',\r\n * })\r\n * ```\r\n */\r\nexport class RenderTexture {\r\n  /** {@link Renderer | renderer} used by this {@link RenderTexture} */\r\n  renderer: Renderer\r\n  /** The type of the {@link RenderTexture} */\r\n  type: string\r\n  /** The universal unique id of this {@link RenderTexture} */\r\n  readonly uuid: string\r\n\r\n  /** The {@link GPUTexture} used */\r\n  texture: GPUTexture\r\n\r\n  /** Size of the {@link RenderTexture#texture | texture} source, usually our {@link Renderer#displayBoundingRect | renderer display bounding rectangle size} */\r\n  size: TextureSize\r\n\r\n  /** Options used to create this {@link RenderTexture} */\r\n  options: RenderTextureParams\r\n\r\n  /** Array of {@link core/bindings/Binding.Binding | bindings} that will actually only hold one {@link TextureBinding | texture binding} */\r\n  bindings: BindGroupBindingElement[]\r\n\r\n  /** Whether this texture should be automatically resized when the {@link Renderer renderer} size changes. Default to true. */\r\n  #autoResize = true\r\n\r\n  /**\r\n   * RenderTexture constructor\r\n   * @param renderer - {@link Renderer | renderer} object or {@link GPUCurtains} class object used to create this {@link RenderTexture}\r\n   * @param parameters - {@link RenderTextureParams | parameters} used to create this {@link RenderTexture}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters = defaultRenderTextureParams) {\r\n    // we could pass our curtains object OR our curtains renderer object\r\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\r\n\r\n    isRenderer(renderer, parameters.label ? parameters.label + ' RenderTexture' : 'RenderTexture')\r\n\r\n    this.type = 'RenderTexture'\r\n\r\n    this.renderer = renderer\r\n\r\n    this.uuid = generateUUID()\r\n\r\n    this.options = { ...defaultRenderTextureParams, ...parameters }\r\n\r\n    if (!this.options.format) {\r\n      this.options.format = this.renderer.options.preferredFormat\r\n    }\r\n\r\n    // sizes\r\n    this.size = this.options.fixedSize\r\n      ? {\r\n          width: this.options.fixedSize.width * this.options.qualityRatio,\r\n          height: this.options.fixedSize.height * this.options.qualityRatio,\r\n          depth: this.options.fixedSize.depth,\r\n        }\r\n      : {\r\n          width: Math.floor(this.renderer.displayBoundingRect.width * this.options.qualityRatio),\r\n          height: Math.floor(this.renderer.displayBoundingRect.height * this.options.qualityRatio),\r\n          depth: 1,\r\n        }\r\n\r\n    if (this.options.fixedSize) {\r\n      this.#autoResize = false\r\n    }\r\n\r\n    // struct\r\n    this.setBindings()\r\n\r\n    // texture\r\n    this.renderer.addRenderTexture(this)\r\n    this.createTexture()\r\n  }\r\n\r\n  /**\r\n   * Copy another {@link RenderTexture} into this {@link RenderTexture}\r\n   * @param texture - {@link RenderTexture} to copy\r\n   */\r\n  copy(texture: RenderTexture | Texture) {\r\n    this.options.fromTexture = texture\r\n    this.createTexture()\r\n  }\r\n\r\n  /**\r\n   * Copy a {@link GPUTexture} directly into this {@link RenderTexture}. Mainly used for depth textures.\r\n   * @param texture - {@link GPUTexture} to copy\r\n   */\r\n  copyGPUTexture(texture: GPUTexture) {\r\n    this.size = {\r\n      width: texture.width,\r\n      height: texture.height,\r\n      depth: texture.depthOrArrayLayers,\r\n    }\r\n\r\n    this.texture = texture\r\n    this.textureBinding.resource = this.texture\r\n  }\r\n\r\n  /**\r\n   * Create the {@link GPUTexture | texture} (or copy it from source) and update the {@link TextureBinding#resource | binding resource}\r\n   */\r\n  createTexture() {\r\n    if (this.options.fromTexture) {\r\n      // copy the GPU texture\r\n      this.options.format = this.options.fromTexture.options.format\r\n      this.copyGPUTexture(this.options.fromTexture.texture)\r\n      return\r\n    }\r\n\r\n    this.texture?.destroy()\r\n\r\n    this.texture = this.renderer.createTexture({\r\n      label: this.options.label,\r\n      format: this.options.format,\r\n      size: [this.size.width, this.size.height, this.size.depth ?? 1],\r\n      dimensions: this.options.viewDimension === '1d' ? '1d' : this.options.viewDimension === '3d' ? '3d' : '2d',\r\n      sampleCount: this.options.sampleCount,\r\n      usage:\r\n        // TODO let user chose?\r\n        // see https://matrix.to/#/!MFogdGJfnZLrDmgkBN:matrix.org/$vESU70SeCkcsrJQdyQGMWBtCgVd3XqnHcBxFDKTKKSQ?via=matrix.org&via=mozilla.org&via=hej.im\r\n        this.options.usage !== 'storage'\r\n          ? GPUTextureUsage.TEXTURE_BINDING |\r\n            GPUTextureUsage.COPY_SRC |\r\n            GPUTextureUsage.COPY_DST |\r\n            GPUTextureUsage.RENDER_ATTACHMENT\r\n          : GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST,\r\n    } as GPUTextureDescriptor)\r\n\r\n    // update texture binding\r\n    this.textureBinding.resource = this.texture\r\n  }\r\n\r\n  /**\r\n   * Set our {@link RenderTexture#bindings | bindings}\r\n   */\r\n  setBindings() {\r\n    this.bindings = [\r\n      new TextureBinding({\r\n        label: this.options.label + ': ' + this.options.name + ' render texture',\r\n        name: this.options.name,\r\n        texture: this.texture,\r\n        bindingType: this.options.usage,\r\n        format: this.options.format,\r\n        viewDimension: this.options.viewDimension,\r\n        multisampled: this.options.sampleCount > 1,\r\n      } as TextureBindingParams),\r\n    ]\r\n  }\r\n\r\n  /**\r\n   * Get our {@link TextureBinding | texture binding}\r\n   * @readonly\r\n   */\r\n  get textureBinding(): TextureBinding {\r\n    return this.bindings[0] as TextureBinding\r\n  }\r\n\r\n  /**\r\n   * Resize our {@link RenderTexture}, which means recreate it/copy it again and tell the {@link core/bindGroups/TextureBindGroup.TextureBindGroup | texture bind group} to update\r\n   * @param size - the optional new {@link TextureSize | size} to set\r\n   */\r\n  resize(size: TextureSize | null = null) {\r\n    if (!this.#autoResize) return\r\n\r\n    if (!size) {\r\n      size = {\r\n        width: Math.floor(this.renderer.displayBoundingRect.width * this.options.qualityRatio),\r\n        height: Math.floor(this.renderer.displayBoundingRect.height * this.options.qualityRatio),\r\n        depth: 1,\r\n      }\r\n    }\r\n\r\n    // no real resize, bail!\r\n    if (size.width === this.size.width && size.height === this.size.height && size.depth === this.size.depth) {\r\n      return\r\n    }\r\n\r\n    this.size = size\r\n    this.createTexture()\r\n  }\r\n\r\n  /**\r\n   * Destroy our {@link RenderTexture}\r\n   */\r\n  destroy() {\r\n    this.renderer.removeRenderTexture(this)\r\n\r\n    // destroy the GPU texture only if it's not a copy of another texture\r\n    if (!this.options.fromTexture) {\r\n      this.texture?.destroy()\r\n    }\r\n\r\n    this.texture = null\r\n  }\r\n}\r\n"],"names":[],"mappings":"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"}