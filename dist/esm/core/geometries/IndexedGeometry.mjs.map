{"version":3,"file":"IndexedGeometry.mjs","sources":["../../../../src/core/geometries/IndexedGeometry.ts"],"sourcesContent":["import { Geometry } from './Geometry'\r\nimport { GeometryParams } from '../../types/Geometries'\r\n\r\n/**\r\n * Defines the available options to create an {@link IndexedGeometry#indexBuffer | index buffer}\r\n */\r\nexport interface IndexedGeometryIndexBufferOptions {\r\n  /** index buffer format */\r\n  bufferFormat?: GPUIndexFormat\r\n  /** index buffer array */\r\n  array?: Uint16Array | Uint32Array\r\n}\r\n\r\n/**\r\n * Defines an {@link IndexedGeometry#indexBuffer | index buffer}\r\n */\r\nexport interface IndexBuffer {\r\n  /** index buffer format */\r\n  bufferFormat: GPUIndexFormat\r\n  /** index buffer array */\r\n  array: Uint16Array | Uint32Array\r\n  /** index buffer length */\r\n  bufferLength: number\r\n  /** index buffer {@link GPUBuffer} */\r\n  buffer?: GPUBuffer\r\n}\r\n\r\n/**\r\n * Used to create an {@link IndexedGeometry} which holds an index array to use as an index buffer.\r\n *\r\n * The index array represents the order in which the attributes should be processed. This allows to create smaller vertex, uv and normal arrays.\r\n *\r\n * During the {@link IndexedGeometry#render | render}, the {@link IndexedGeometry} is responsible for setting the {@link IndexedGeometry#vertexBuffers | vertexBuffers} and drawing the indexed vertices.\r\n *\r\n * @example\r\n * ```javascript\r\n * const vertices = new Float32Array([\r\n *   -1, -1,  0,\r\n *    1, -1,  0,\r\n *   -1,  1,  0,\r\n *    1,  1,  0\r\n * ])\r\n *\r\n * // vertices index (order in which they should be drawn)\r\n * const indexArray = new Uint16Array([0, 2, 1, 1, 2, 3])\r\n *\r\n * // create an indexed quad geometry made of 4 vertices\r\n * const indexedGeometry = new IndexedGeometry()\r\n *\r\n * indexedGeometry.setAttribute({\r\n *   name: 'position',\r\n *   type: 'vec3f',\r\n *   bufferFormat: 'float32x3',\r\n *   size: 3,\r\n *   bufferLength: vertices.length,\r\n *   array: vertices,\r\n * })\r\n *\r\n * indexedGeometry.setIndexBuffer({\r\n *   array: indexArray,\r\n *   bufferFormat: 'uint16',\r\n * })\r\n * ```\r\n */\r\nexport class IndexedGeometry extends Geometry {\r\n  /** Object containing our index buffer format & length, array and GPUBuffer */\r\n  indexBuffer: IndexBuffer\r\n\r\n  /**\r\n   * IndexedGeometry constructor\r\n   * @param parameters - {@link GeometryParams | parameters} used to create our IndexedGeometry\r\n   */\r\n  constructor({\r\n    verticesOrder = 'ccw',\r\n    topology = 'triangle-list',\r\n    instancesCount = 1,\r\n    vertexBuffers = [],\r\n  }: GeometryParams = {}) {\r\n    super({ verticesOrder, topology, instancesCount, vertexBuffers })\r\n\r\n    this.type = 'IndexedGeometry'\r\n  }\r\n\r\n  /**\r\n   * Get whether this geometry is ready to draw, i.e. it has been computed, all its vertex buffers have been created and its index buffer has been created as well\r\n   * @readonly\r\n   */\r\n  get ready(): boolean {\r\n    return (\r\n      !this.shouldCompute &&\r\n      !this.vertexBuffers.find((vertexBuffer) => !vertexBuffer.buffer) &&\r\n      this.indexBuffer &&\r\n      !!this.indexBuffer.buffer\r\n    )\r\n  }\r\n\r\n  /**\r\n   * If we have less than 65.536 vertices, we should use a Uin16Array to hold our index buffer values\r\n   * @readonly\r\n   */\r\n  get useUint16IndexArray(): boolean {\r\n    return this.verticesCount < 256 * 256\r\n  }\r\n\r\n  /**\r\n   * Set our {@link indexBuffer}\r\n   * @param parameters - {@link IndexedGeometryIndexBufferOptions | parameters} used to create our index buffer\r\n   */\r\n  setIndexBuffer({ bufferFormat = 'uint32', array = new Uint32Array(0) }: IndexedGeometryIndexBufferOptions) {\r\n    this.indexBuffer = {\r\n      array,\r\n      bufferFormat,\r\n      bufferLength: array.length,\r\n      buffer: null,\r\n    }\r\n  }\r\n\r\n  /** RENDER **/\r\n\r\n  /**\r\n   * First, set our render pass geometry vertex buffers\r\n   * Then, set our render pass geometry index buffer\r\n   * @param pass - current render pass\r\n   */\r\n  setGeometryBuffers(pass: GPURenderPassEncoder) {\r\n    super.setGeometryBuffers(pass)\r\n\r\n    pass.setIndexBuffer(this.indexBuffer.buffer, this.indexBuffer.bufferFormat)\r\n  }\r\n\r\n  /**\r\n   * Override the parentMesh draw method to draw indexed geometry\r\n   * @param pass - current render pass\r\n   */\r\n  drawGeometry(pass: GPURenderPassEncoder) {\r\n    pass.drawIndexed(this.indexBuffer.bufferLength, this.instancesCount)\r\n  }\r\n\r\n  /**\r\n   * Destroy our indexed geometry vertex buffers and index buffer\r\n   */\r\n  destroy() {\r\n    super.destroy()\r\n\r\n    this.indexBuffer?.buffer?.destroy()\r\n    this.indexBuffer.buffer = null\r\n  }\r\n}\r\n"],"names":[],"mappings":";;AAgEO,MAAM,wBAAwB,QAAS,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQ5C,WAAY,CAAA;AAAA,IACV,aAAgB,GAAA,KAAA;AAAA,IAChB,QAAW,GAAA,eAAA;AAAA,IACX,cAAiB,GAAA,CAAA;AAAA,IACjB,gBAAgB,EAAC;AAAA,GACnB,GAAoB,EAAI,EAAA;AACtB,IAAA,KAAA,CAAM,EAAE,aAAA,EAAe,QAAU,EAAA,cAAA,EAAgB,eAAe,CAAA,CAAA;AAEhE,IAAA,IAAA,CAAK,IAAO,GAAA,iBAAA,CAAA;AAAA,GACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,KAAiB,GAAA;AACnB,IAAA,OACE,CAAC,IAAK,CAAA,aAAA,IACN,CAAC,IAAK,CAAA,aAAA,CAAc,KAAK,CAAC,YAAA,KAAiB,CAAC,YAAA,CAAa,MAAM,CAC/D,IAAA,IAAA,CAAK,eACL,CAAC,CAAC,KAAK,WAAY,CAAA,MAAA,CAAA;AAAA,GAEvB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,mBAA+B,GAAA;AACjC,IAAO,OAAA,IAAA,CAAK,gBAAgB,GAAM,GAAA,GAAA,CAAA;AAAA,GACpC;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,cAAA,CAAe,EAAE,YAAe,GAAA,QAAA,EAAU,QAAQ,IAAI,WAAA,CAAY,CAAC,CAAA,EAAwC,EAAA;AACzG,IAAA,IAAA,CAAK,WAAc,GAAA;AAAA,MACjB,KAAA;AAAA,MACA,YAAA;AAAA,MACA,cAAc,KAAM,CAAA,MAAA;AAAA,MACpB,MAAQ,EAAA,IAAA;AAAA,KACV,CAAA;AAAA,GACF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASA,mBAAmB,IAA4B,EAAA;AAC7C,IAAA,KAAA,CAAM,mBAAmB,IAAI,CAAA,CAAA;AAE7B,IAAA,IAAA,CAAK,eAAe,IAAK,CAAA,WAAA,CAAY,MAAQ,EAAA,IAAA,CAAK,YAAY,YAAY,CAAA,CAAA;AAAA,GAC5E;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,aAAa,IAA4B,EAAA;AACvC,IAAA,IAAA,CAAK,WAAY,CAAA,IAAA,CAAK,WAAY,CAAA,YAAA,EAAc,KAAK,cAAc,CAAA,CAAA;AAAA,GACrE;AAAA;AAAA;AAAA;AAAA,EAKA,OAAU,GAAA;AACR,IAAA,KAAA,CAAM,OAAQ,EAAA,CAAA;AAEd,IAAK,IAAA,CAAA,WAAA,EAAa,QAAQ,OAAQ,EAAA,CAAA;AAClC,IAAA,IAAA,CAAK,YAAY,MAAS,GAAA,IAAA,CAAA;AAAA,GAC5B;AACF;;;;"}