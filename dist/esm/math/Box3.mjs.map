{"version":3,"file":"Box3.mjs","sources":["../../../src/math/Box3.ts"],"sourcesContent":["import { Vec3 } from './Vec3'\nimport { Mat4 } from './Mat4'\n\n// declare our corners once should be enough\nconst points: Vec3[] = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()]\n\n/**\n * Used to handle bounding boxes in 3D space.\n * Basically made of two min and max {@link Vec3 | vectors} that represents the edges of the 3D bounding box.\n */\nexport class Box3 {\n  /** Min {@link Vec3 | vector} of the {@link Box3} */\n  min: Vec3\n  /** Max {@link Vec3 | vector} of the {@link Box3} */\n  max: Vec3\n\n  /**\n   * Box3 constructor\n   * @param min - min {@link Vec3 | vector} of the {@link Box3}\n   * @param max - max {@link Vec3 | vector} of the {@link Box3}\n   */\n  constructor(min: Vec3 = new Vec3(Infinity), max: Vec3 = new Vec3(-Infinity)) {\n    this.min = min\n    this.max = max\n  }\n\n  /**\n   * Set a {@link Box3} from two min and max {@link Vec3 | vectors}\n   * @param min - min {@link Vec3 | vector} of the {@link Box3}\n   * @param max - max {@link Vec3 | vector} of the {@link Box3}\n   */\n  set(min: Vec3 = new Vec3(Infinity), max: Vec3 = new Vec3(-Infinity)): Box3 {\n    this.min.copy(min)\n    this.max.copy(max)\n\n    return this\n  }\n\n  /**\n   * Clone this {@link Box3}\n   * @returns - cloned {@link Box3}\n   */\n  clone(): Box3 {\n    return new Box3().set(this.min, this.max)\n  }\n\n  /**\n   * Get the {@link Box3} center\n   * @returns - {@link Vec3 | center vector} of the {@link Box3}\n   */\n  getCenter(): Vec3 {\n    return this.max.clone().add(this.min).multiplyScalar(0.5)\n  }\n\n  /**\n   * Get the {@link Box3} size\n   * @returns - {@link Vec3 | size vector} of the {@link Box3}\n   */\n  getSize(): Vec3 {\n    return this.max.clone().sub(this.min)\n  }\n\n  /**\n   * Apply a {@link Mat4 | matrix} to a {@link Box3}\n   * Useful to apply a transformation {@link Mat4 | matrix} to a {@link Box3}\n   * @param matrix - {@link Mat4 | matrix} to use\n   * @returns - this {@link Box3} after {@link Mat4 | matrix} application\n   */\n  applyMat4(matrix: Mat4 = new Mat4()): Box3 {\n    const corners: Vec3[] = []\n\n    // remember we're essentially dealing with plane geometries\n    // so if min Z and max Z are equals, it's actually a plane geometry\n    // just apply the matrix to its four corners\n    if (this.min.z === this.max.z) {\n      corners[0] = points[0].set(this.min.x, this.min.y, this.min.z).applyMat4(matrix)\n      corners[1] = points[2].set(this.min.x, this.max.y, this.min.z).applyMat4(matrix)\n      corners[2] = points[4].set(this.max.x, this.min.y, this.min.z).applyMat4(matrix)\n      corners[3] = points[6].set(this.max.x, this.max.y, this.min.z).applyMat4(matrix)\n    } else {\n      corners[0] = points[0].set(this.min.x, this.min.y, this.min.z).applyMat4(matrix)\n      corners[1] = points[1].set(this.min.x, this.min.y, this.max.z).applyMat4(matrix)\n      corners[2] = points[2].set(this.min.x, this.max.y, this.min.z).applyMat4(matrix)\n      corners[3] = points[3].set(this.min.x, this.max.y, this.max.z).applyMat4(matrix)\n      corners[4] = points[4].set(this.max.x, this.min.y, this.min.z).applyMat4(matrix)\n      corners[5] = points[5].set(this.max.x, this.min.y, this.max.z).applyMat4(matrix)\n      corners[6] = points[6].set(this.max.x, this.max.y, this.min.z).applyMat4(matrix)\n      corners[7] = points[7].set(this.max.x, this.max.y, this.max.z).applyMat4(matrix)\n    }\n\n    const transFormedBox = new Box3()\n\n    for (let i = 0, cornersCount = corners.length; i < cornersCount; i++) {\n      transFormedBox.min.min(corners[i])\n      transFormedBox.max.max(corners[i])\n    }\n\n    return transFormedBox\n  }\n}\n"],"names":[],"mappings":"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"}