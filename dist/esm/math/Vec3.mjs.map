{"version":3,"file":"Vec3.mjs","sources":["../../../src/math/Vec3.ts"],"sourcesContent":["import { Mat4 } from './Mat4'\nimport { Quat } from './Quat'\nimport { Camera } from '../core/camera/Camera'\n\n/**\n * Really basic 3D vector class used for vector calculations\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Vector3.js\n * @see http://glmatrix.net/docs/vec3.js.html\n */\nexport class Vec3 {\n  /** The type of the {@link Vec3} */\n  type: string\n  /** X component of our {@link Vec3} */\n  private _x: number\n  /** Y component of our {@link Vec3} */\n  private _y: number\n  /** Z component of our {@link Vec3} */\n  private _z: number\n\n  /** function assigned to the {@link onChange} callback */\n  _onChangeCallback?(): void\n\n  /**\n   * Vec3 constructor\n   * @param x - X component of our {@link Vec3}\n   * @param y - Y component of our {@link Vec3}\n   * @param z - Z component of our {@link Vec3}\n   */\n  constructor(x = 0, y = x, z = x) {\n    this.type = 'Vec3'\n\n    this._x = x\n    this._y = y\n    this._z = z\n  }\n\n  /**\n   * Get the X component of the {@link Vec3}\n   */\n  get x(): number {\n    return this._x\n  }\n\n  /**\n   * Set the X component of the {@link Vec3}\n   * Can trigger {@link onChange} callback\n   * @param value - X component to set\n   */\n  set x(value: number) {\n    const changed = value !== this._x\n    this._x = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Get the Y component of the {@link Vec3}\n   */\n  get y(): number {\n    return this._y\n  }\n\n  /**\n   * Set the Y component of the {@link Vec3}\n   * Can trigger {@link onChange} callback\n   * @param value - Y component to set\n   */\n  set y(value: number) {\n    const changed = value !== this._y\n    this._y = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Get the Z component of the {@link Vec3}\n   */\n  get z(): number {\n    return this._z\n  }\n\n  /**\n   * Set the Z component of the {@link Vec3}\n   * Can trigger {@link onChange} callback\n   * @param value - Z component to set\n   */\n  set z(value: number) {\n    const changed = value !== this._z\n    this._z = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Called when at least one component of the {@link Vec3} has changed\n   * @param callback - callback to run when at least one component of the {@link Vec3} has changed\n   * @returns - our {@link Vec3}\n   */\n  onChange(callback: () => void): Vec3 {\n    if (callback) {\n      this._onChangeCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Set the {@link Vec3} from values\n   * @param x - new X component to set\n   * @param y - new Y component to set\n   * @param z - new Z component to set\n   * @returns - this {@link Vec3} after being set\n   */\n  set(x = 0, y = x, z = x): Vec3 {\n    this.x = x\n    this.y = y\n    this.z = z\n\n    return this\n  }\n\n  /**\n   * Add a {@link Vec3} to this {@link Vec3}\n   * @param vector - {@link Vec3} to add\n   * @returns - this {@link Vec3} after addition\n   */\n  add(vector: Vec3 = new Vec3()): Vec3 {\n    this.x += vector.x\n    this.y += vector.y\n    this.z += vector.z\n\n    return this\n  }\n\n  /**\n   * Add a scalar to all the components of this {@link Vec3}\n   * @param value - number to add\n   * @returns - this {@link Vec3} after addition\n   */\n  addScalar(value = 0): Vec3 {\n    this.x += value\n    this.y += value\n    this.z += value\n\n    return this\n  }\n\n  /**\n   * Subtract a {@link Vec3} from this {@link Vec3}\n   * @param vector - {@link Vec3} to subtract\n   * @returns - this {@link Vec3} after subtraction\n   */\n  sub(vector: Vec3 = new Vec3()): Vec3 {\n    this.x -= vector.x\n    this.y -= vector.y\n    this.z -= vector.z\n\n    return this\n  }\n\n  /**\n   * Subtract a scalar to all the components of this {@link Vec3}\n   * @param value - number to subtract\n   * @returns - this {@link Vec3} after subtraction\n   */\n  subScalar(value = 0): Vec3 {\n    this.x -= value\n    this.y -= value\n    this.z -= value\n\n    return this\n  }\n\n  /**\n   * Multiply a {@link Vec3} with this {@link Vec3}\n   * @param vector - {@link Vec3} to multiply with\n   * @returns - this {@link Vec3} after multiplication\n   */\n  multiply(vector: Vec3 = new Vec3(1)): Vec3 {\n    this.x *= vector.x\n    this.y *= vector.y\n    this.z *= vector.z\n\n    return this\n  }\n\n  /**\n   * Multiply all components of this {@link Vec3} with a scalar\n   * @param value - number to multiply with\n   * @returns - this {@link Vec3} after multiplication\n   */\n  multiplyScalar(value = 1): Vec3 {\n    this.x *= value\n    this.y *= value\n    this.z *= value\n\n    return this\n  }\n\n  /**\n   * Divide a {@link Vec3} with this {@link Vec3}\n   * @param vector - {@link Vec3} to divide with\n   * @returns - this {@link Vec3} after division\n   */\n  divide(vector: Vec3 = new Vec3(1)): Vec3 {\n    this.x /= vector.x\n    this.y /= vector.y\n    this.z /= vector.z\n\n    return this\n  }\n\n  /**\n   * Divide all components of this {@link Vec3} with a scalar\n   * @param value - number to divide with\n   * @returns - this {@link Vec3} after division\n   */\n  divideScalar(value = 1): Vec3 {\n    this.x /= value\n    this.y /= value\n    this.z /= value\n\n    return this\n  }\n\n  /**\n   * Copy a {@link Vec3} into this {@link Vec3}\n   * @param vector - {@link Vec3} to copy\n   * @returns - this {@link Vec3} after copy\n   */\n  copy(vector: Vec3 = new Vec3()): Vec3 {\n    this.x = vector.x\n    this.y = vector.y\n    this.z = vector.z\n\n    return this\n  }\n\n  /**\n   * Clone this {@link Vec3}\n   * @returns - cloned {@link Vec3}\n   */\n  clone(): Vec3 {\n    return new Vec3(this.x, this.y, this.z)\n  }\n\n  /**\n   * Apply max values to this {@link Vec3} components\n   * @param vector - {@link Vec3} representing max values\n   * @returns - {@link Vec3} with max values applied\n   */\n  max(vector: Vec3 = new Vec3()): Vec3 {\n    this.x = Math.max(this.x, vector.x)\n    this.y = Math.max(this.y, vector.y)\n    this.z = Math.max(this.z, vector.z)\n\n    return this\n  }\n\n  /**\n   * Apply min values to this {@link Vec3} components\n   * @param vector - {@link Vec3} representing min values\n   * @returns - {@link Vec3} with min values applied\n   */\n  min(vector: Vec3 = new Vec3()): Vec3 {\n    this.x = Math.min(this.x, vector.x)\n    this.y = Math.min(this.y, vector.y)\n    this.z = Math.min(this.z, vector.z)\n\n    return this\n  }\n\n  /**\n   * Clamp this {@link Vec3} components by min and max {@link Vec3} vectors\n   * @param min - minimum {@link Vec3} components to compare with\n   * @param max - maximum {@link Vec3} components to compare with\n   * @returns - clamped {@link Vec3}\n   */\n  clamp(min: Vec3 = new Vec3(), max: Vec3 = new Vec3()): Vec3 {\n    this.x = Math.max(min.x, Math.min(max.x, this.x))\n    this.y = Math.max(min.y, Math.min(max.y, this.y))\n    this.z = Math.max(min.z, Math.min(max.z, this.z))\n\n    return this\n  }\n\n  /**\n   * Check if 2 {@link Vec3} are equal\n   * @param vector - {@link Vec3} to compare\n   * @returns - whether the {@link Vec3} are equals or not\n   */\n  equals(vector: Vec3 = new Vec3()): boolean {\n    return this.x === vector.x && this.y === vector.y && this.z === vector.z\n  }\n\n  /**\n   * Get the square length of this {@link Vec3}\n   * @returns - square length of this {@link Vec3}\n   */\n  lengthSq(): number {\n    return this.x * this.x + this.y * this.y + this.z * this.z\n  }\n\n  /**\n   * Get the length of this {@link Vec3}\n   * @returns - length of this {@link Vec3}\n   */\n  length(): number {\n    return Math.sqrt(this.lengthSq())\n  }\n\n  /**\n   * Normalize this {@link Vec3}\n   * @returns - normalized {@link Vec3}\n   */\n  normalize(): Vec3 {\n    // normalize\n    let len = this.lengthSq()\n    if (len > 0) {\n      len = 1 / Math.sqrt(len)\n    }\n    this.x *= len\n    this.y *= len\n    this.z *= len\n\n    return this\n  }\n\n  /**\n   * Calculate the dot product of 2 {@link Vec3}\n   * @param vector - {@link Vec3} to use for dot product\n   * @returns - dot product of the 2 {@link Vec3}\n   */\n  dot(vector: Vec3 = new Vec3()): number {\n    return this.x * vector.x + this.y * vector.y + this.z * vector.z\n  }\n\n  /**\n   * Get the cross product of this {@link Vec3} with another {@link Vec3}\n   * @param vector - {@link Vec3} to use for cross product\n   * @returns - this {@link Vec3} after cross product\n   */\n  cross(vector: Vec3 = new Vec3()): Vec3 {\n    return this.crossVectors(this, vector)\n  }\n\n  /**\n   * Set this {@link Vec3} as the result of the cross product of two {@link Vec3}\n   * @param a - first {@link Vec3} to use for cross product\n   * @param b - second {@link Vec3} to use for cross product\n   * @returns - this {@link Vec3} after cross product\n   */\n  crossVectors(a: Vec3 = new Vec3(), b: Vec3 = new Vec3()): Vec3 {\n    const ax = a.x,\n      ay = a.y,\n      az = a.z\n    const bx = b.x,\n      by = b.y,\n      bz = b.z\n\n    this.x = ay * bz - az * by\n    this.y = az * bx - ax * bz\n    this.z = ax * by - ay * bx\n\n    return this\n  }\n\n  /**\n   * Calculate the linear interpolation of this {@link Vec3} by given {@link Vec3} and alpha, where alpha is the percent distance along the line\n   * @param vector - {@link Vec3} to interpolate towards\n   * @param alpha - interpolation factor in the [0, 1] interval\n   * @returns - this {@link Vec3} after linear interpolation\n   */\n  lerp(vector: Vec3 = new Vec3(), alpha = 1): Vec3 {\n    this.x += (vector.x - this.x) * alpha\n    this.y += (vector.y - this.y) * alpha\n    this.z += (vector.z - this.z) * alpha\n\n    return this\n  }\n\n  /**\n   * Apply a {@link Mat4 | matrix} to a {@link Vec3}\n   * Useful to convert a position {@link Vec3} from plane local world to webgl space using projection view matrix for example\n   * Source code from: http://glmatrix.net/docs/vec3.js.html\n   * @param matrix - {@link Mat4 | matrix} to use\n   * @returns - this {@link Vec3} after {@link Mat4 | matrix} application\n   */\n  applyMat4(matrix: Mat4): Vec3 {\n    const x = this._x,\n      y = this._y,\n      z = this._z\n    const mArray = matrix.elements\n\n    let w = mArray[3] * x + mArray[7] * y + mArray[11] * z + mArray[15]\n    w = w || 1\n\n    this.x = (mArray[0] * x + mArray[4] * y + mArray[8] * z + mArray[12]) / w\n    this.y = (mArray[1] * x + mArray[5] * y + mArray[9] * z + mArray[13]) / w\n    this.z = (mArray[2] * x + mArray[6] * y + mArray[10] * z + mArray[14]) / w\n\n    return this\n  }\n\n  /**\n   * Apply a {@link Quat | quaternion} (rotation in 3D space) to this {@link Vec3}\n   * @param quaternion - {@link Quat | quaternion} to use\n   * @returns - this {@link Vec3} with the transformation applied\n   */\n  applyQuat(quaternion: Quat = new Quat()): Vec3 {\n    const x = this.x,\n      y = this.y,\n      z = this.z\n    const qx = quaternion.elements[0],\n      qy = quaternion.elements[1],\n      qz = quaternion.elements[2],\n      qw = quaternion.elements[3]\n\n    // calculate quat * vector\n\n    const ix = qw * x + qy * z - qz * y\n    const iy = qw * y + qz * x - qx * z\n    const iz = qw * z + qx * y - qy * x\n    const iw = -qx * x - qy * y - qz * z\n\n    // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx\n\n    return this\n  }\n\n  /**\n   * Rotate a {@link Vec3} around and axis by a given angle\n   * @param axis - normalized {@link Vec3} around which to rotate\n   * @param angle - angle (in radians) to rotate\n   * @param quaternion - optional {@link Quat | quaternion} to use for rotation computations\n   * @returns - this {@link Vec3} with the rotation applied\n   */\n  applyAxisAngle(axis = new Vec3(), angle = 0, quaternion = new Quat()) {\n    // https://github.com/mrdoob/three.js/blob/master/src/math/Vector3.js#L212\n    return this.applyQuat(quaternion.setFromAxisAngle(axis, angle))\n  }\n\n  /**\n   * Project a 3D coordinate {@link Vec3} to a 2D coordinate {@link Vec3}\n   * @param camera - {@link Camera} to use for projection\n   * @returns - projected {@link Vec3}\n   */\n  project(camera: Camera): Vec3 {\n    this.applyMat4(camera.viewMatrix).applyMat4(camera.projectionMatrix)\n    return this\n  }\n\n  /**\n   * Unproject a 2D coordinate {@link Vec3} to 3D coordinate {@link Vec3}\n   * @param camera - {@link Camera} to use for projection\n   * @returns - unprojected {@link Vec3}\n   */\n  unproject(camera: Camera): Vec3 {\n    this.applyMat4(camera.projectionMatrix.getInverse()).applyMat4(camera.modelMatrix)\n    return this\n  }\n}\n"],"names":[],"mappings":"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"}