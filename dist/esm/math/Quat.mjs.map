{"version":3,"file":"Quat.mjs","sources":["../../../src/math/Quat.ts"],"sourcesContent":["import { Vec3 } from './Vec3'\nimport { Mat4 } from './Mat4'\n\n/** Defines all possible rotations axis orders */\nexport type AxisOrder = 'XYZ' | 'XZY' | 'YXZ' | 'YZX' | 'ZXY' | 'ZYX'\n\n/**\n * Really basic quaternion class used for 3D rotation calculations\n * @see https://github.com/mrdoosb/three.js/blob/dev/src/math/Quaternion.js\n */\nexport class Quat {\n  /** The type of the {@link Quat} */\n  type: string\n  /** Our quaternion array */\n  elements: Float32Array\n  /** Rotation axis order */\n  axisOrder: AxisOrder\n\n  /**\n   * Quat constructor\n   * @param [elements] - initial array to use\n   * @param [axisOrder='XYZ'] - axis order to use\n   */\n  constructor(elements: Float32Array = new Float32Array([0, 0, 0, 1]), axisOrder: AxisOrder = 'XYZ') {\n    this.type = 'Quat'\n    this.elements = elements\n    // rotation axis order\n    this.axisOrder = axisOrder\n  }\n\n  /**\n   * Sets the {@link Quat} values from an array\n   * @param array - an array of at least 4 elements\n   * @returns - this {@link Quat} after being set\n   */\n  setFromArray(array: Float32Array | number[] = new Float32Array([0, 0, 0, 1])): Quat {\n    this.elements[0] = array[0]\n    this.elements[1] = array[1]\n    this.elements[2] = array[2]\n    this.elements[3] = array[3]\n\n    return this\n  }\n\n  /**\n   * Sets the {@link Quat} axis order\n   * @param axisOrder - axis order to use\n   * @returns - this {@link Quat} after axis order has been set\n   */\n  setAxisOrder(axisOrder: AxisOrder | string = 'XYZ'): Quat {\n    // force uppercase for strict equality tests\n    axisOrder = axisOrder.toUpperCase()\n\n    switch (axisOrder) {\n      case 'XYZ':\n      case 'YXZ':\n      case 'ZXY':\n      case 'ZYX':\n      case 'YZX':\n      case 'XZY':\n        this.axisOrder = axisOrder\n        break\n      default:\n        // apply a default axis order\n        this.axisOrder = 'XYZ'\n    }\n\n    return this\n  }\n\n  /**\n   * Copy a {@link Quat} into this {@link Quat}\n   * @param quaternion - {@link Quat} to copy\n   * @returns - this {@link Quat} after copy\n   */\n  copy(quaternion: Quat = new Quat()): Quat {\n    this.elements = quaternion.elements\n    this.axisOrder = quaternion.axisOrder\n\n    return this\n  }\n\n  /**\n   * Clone a {@link Quat}\n   * @returns - cloned {@link Quat}\n   */\n  clone(): Quat {\n    return new Quat().copy(this)\n  }\n\n  /**\n   * Check if 2 {@link Quat} are equal\n   * @param quaternion - {@link Quat} to check against\n   * @returns - whether the {@link Quat} are equal or not\n   */\n  equals(quaternion: Quat = new Quat()): boolean {\n    return (\n      this.elements[0] === quaternion.elements[0] &&\n      this.elements[1] === quaternion.elements[1] &&\n      this.elements[2] === quaternion.elements[2] &&\n      this.elements[3] === quaternion.elements[3] &&\n      this.axisOrder === quaternion.axisOrder\n    )\n  }\n\n  /**\n   * Sets a rotation {@link Quat} using Euler angles {@link Vec3 | vector} and its axis order\n   * @param vector - rotation {@link Vec3 | vector} to set our {@link Quat} from\n   * @returns - {@link Quat} after having applied the rotation\n   */\n  setFromVec3(vector: Vec3): Quat {\n    const ax = vector.x * 0.5\n    const ay = vector.y * 0.5\n    const az = vector.z * 0.5\n\n    const cosx = Math.cos(ax)\n    const cosy = Math.cos(ay)\n    const cosz = Math.cos(az)\n    const sinx = Math.sin(ax)\n    const siny = Math.sin(ay)\n    const sinz = Math.sin(az)\n\n    // XYZ order\n    if (this.axisOrder === 'XYZ') {\n      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz\n    } else if (this.axisOrder === 'YXZ') {\n      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz\n    } else if (this.axisOrder === 'ZXY') {\n      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz\n    } else if (this.axisOrder === 'ZYX') {\n      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz\n    } else if (this.axisOrder === 'YZX') {\n      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz\n    } else if (this.axisOrder === 'XZY') {\n      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz\n      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz\n      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz\n      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz\n    }\n\n    return this\n  }\n\n  /**\n   * Set a {@link Quat} from a rotation axis {@link Vec3 | vector} and an angle\n   * @param axis - normalized {@link Vec3 | vector} around which to rotate\n   * @param angle - angle (in radians) to rotate\n   * @returns - {@link Quat} after having applied the rotation\n   */\n  setFromAxisAngle(axis: Vec3, angle = 0): Quat {\n    // https://github.com/mrdoob/three.js/blob/dev/src/math/Quaternion.js#L275\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm\n\n    // assumes axis is normalized\n\n    const halfAngle = angle / 2,\n      s = Math.sin(halfAngle)\n\n    this.elements[0] = axis.x * s\n    this.elements[1] = axis.y * s\n    this.elements[2] = axis.z * s\n    this.elements[3] = Math.cos(halfAngle)\n\n    return this\n  }\n\n  /**\n   * Set a {@link Quat} from a rotation {@link Mat4 | matrix}\n   * @param matrix - rotation {@link Mat4 | matrix} to use\n   * @returns - {@link Quat} after having applied the rotation\n   */\n  setFromRotationMatrix(matrix: Mat4): Quat {\n    // http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n    // assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)\n    const te = matrix.elements,\n      m11 = te[0],\n      m12 = te[4],\n      m13 = te[8],\n      m21 = te[1],\n      m22 = te[5],\n      m23 = te[9],\n      m31 = te[2],\n      m32 = te[6],\n      m33 = te[10],\n      trace = m11 + m22 + m33\n\n    if (trace > 0) {\n      const s = 0.5 / Math.sqrt(trace + 1.0)\n\n      this.elements[3] = 0.25 / s\n      this.elements[0] = (m32 - m23) * s\n      this.elements[1] = (m13 - m31) * s\n      this.elements[2] = (m21 - m12) * s\n    } else if (m11 > m22 && m11 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m11 - m22 - m33)\n\n      this.elements[3] = (m32 - m23) / s\n      this.elements[0] = 0.25 * s\n      this.elements[1] = (m12 + m21) / s\n      this.elements[2] = (m13 + m31) / s\n    } else if (m22 > m33) {\n      const s = 2.0 * Math.sqrt(1.0 + m22 - m11 - m33)\n\n      this.elements[3] = (m13 - m31) / s\n      this.elements[0] = (m12 + m21) / s\n      this.elements[1] = 0.25 * s\n      this.elements[2] = (m23 + m32) / s\n    } else {\n      const s = 2.0 * Math.sqrt(1.0 + m33 - m11 - m22)\n\n      this.elements[3] = (m21 - m12) / s\n      this.elements[0] = (m13 + m31) / s\n      this.elements[1] = (m23 + m32) / s\n      this.elements[2] = 0.25 * s\n    }\n\n    return this\n  }\n}\n"],"names":[],"mappings":"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"}