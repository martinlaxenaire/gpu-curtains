{"version":3,"file":"Vec2.mjs","sources":["../../../src/math/Vec2.ts"],"sourcesContent":["/**\n * Really basic 2D vector class used for vector calculations\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Vector2.js\n * @see http://glmatrix.net/docs/vec2.js.html\n */\nexport class Vec2 {\n  /** The type of the {@link Vec2} */\n  type: string\n  /** X component of our {@link Vec2} */\n  private _x: number\n  /** Y component of our {@link Vec2} */\n  private _y: number\n\n  /** function assigned to the {@link onChange} callback */\n  _onChangeCallback?(): void\n\n  /**\n   * Vec2 constructor\n   * @param x - X component of our {@link Vec2}\n   * @param y - Y component of our {@link Vec2}\n   */\n  constructor(x = 0, y = x) {\n    this.type = 'Vec2'\n\n    this._x = x\n    this._y = y\n  }\n\n  /**\n   * Get the X component of the {@link Vec2}\n   */\n  get x(): number {\n    return this._x\n  }\n\n  /**\n   * Set the X component of the {@link Vec2}\n   * Can trigger {@link onChange} callback\n   * @param value - X component to set\n   */\n  set x(value: number) {\n    const changed = value !== this._x\n    this._x = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Get the Y component of the {@link Vec2}\n   */\n  get y(): number {\n    return this._y\n  }\n\n  /**\n   * Set the Y component of the {@link Vec2}\n   * Can trigger {@link onChange} callback\n   * @param value - Y component to set\n   */\n  set y(value: number) {\n    const changed = value !== this._y\n    this._y = value\n    changed && this._onChangeCallback && this._onChangeCallback()\n  }\n\n  /**\n   * Called when at least one component of the {@link Vec2} has changed\n   * @param callback - callback to run when at least one component of the {@link Vec2} has changed\n   * @returns - our {@link Vec2}\n   */\n  onChange(callback: () => void): Vec2 {\n    if (callback) {\n      this._onChangeCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Set the {@link Vec2} from values\n   * @param x - new X component to set\n   * @param y - new Y component to set\n   * @returns - this {@link Vec2} after being set\n   */\n  set(x = 0, y = x): Vec2 {\n    this.x = x\n    this.y = y\n\n    return this\n  }\n\n  /**\n   * Add a {@link Vec2} to this {@link Vec2}\n   * @param vector - {@link Vec2} to add\n   * @returns - this {@link Vec2} after addition\n   */\n  add(vector: Vec2 = new Vec2()): Vec2 {\n    this.x += vector.x\n    this.y += vector.y\n\n    return this\n  }\n\n  /**\n   * Add a scalar to all the components of this {@link Vec2}\n   * @param value - number to add\n   * @returns - this {@link Vec2} after addition\n   */\n  addScalar(value = 0): Vec2 {\n    this.x += value\n    this.y += value\n\n    return this\n  }\n\n  /**\n   * Subtract a {@link Vec2} from this {@link Vec2}\n   * @param vector - {@link Vec2} to subtract\n   * @returns - this {@link Vec2} after subtraction\n   */\n  sub(vector: Vec2 = new Vec2()): Vec2 {\n    this.x -= vector.x\n    this.y -= vector.y\n\n    return this\n  }\n\n  /**\n   * Subtract a scalar to all the components of this {@link Vec2}\n   * @param value - number to subtract\n   * @returns - this {@link Vec2} after subtraction\n   */\n  subScalar(value = 0): Vec2 {\n    this.x -= value\n    this.y -= value\n\n    return this\n  }\n\n  /**\n   * Multiply a {@link Vec2} with this {@link Vec2}\n   * @param vector - {@link Vec2} to multiply with\n   * @returns - this {@link Vec2} after multiplication\n   */\n  multiply(vector: Vec2 = new Vec2(1)): Vec2 {\n    this.x *= vector.x\n    this.y *= vector.y\n\n    return this\n  }\n\n  /**\n   * Multiply all components of this {@link Vec2} with a scalar\n   * @param value - number to multiply with\n   * @returns - this {@link Vec2} after multiplication\n   */\n  multiplyScalar(value = 1): Vec2 {\n    this.x *= value\n    this.y *= value\n\n    return this\n  }\n\n  /**\n   * Divide a {@link Vec2} with this {@link Vec2}\n   * @param vector - {@link Vec2} to divide with\n   * @returns - this {@link Vec2} after division\n   */\n  divide(vector: Vec2 = new Vec2(1)): Vec2 {\n    this.x /= vector.x\n    this.y /= vector.y\n\n    return this\n  }\n\n  /**\n   * Divide all components of this {@link Vec2} with a scalar\n   * @param value - number to divide with\n   * @returns - this {@link Vec2} after division\n   */\n  divideScalar(value = 1): Vec2 {\n    this.x /= value\n    this.y /= value\n\n    return this\n  }\n\n  /**\n   * Copy a {@link Vec2} into this {@link Vec2}\n   * @param vector - {@link Vec2} to copy\n   * @returns - this {@link Vec2} after copy\n   */\n  copy(vector: Vec2 = new Vec2()): Vec2 {\n    this.x = vector.x\n    this.y = vector.y\n\n    return this\n  }\n\n  /**\n   * Clone this {@link Vec2}\n   * @returns - cloned {@link Vec2}\n   */\n  clone(): Vec2 {\n    return new Vec2(this.x, this.y)\n  }\n\n  /**\n   * Apply max values to this {@link Vec2} components\n   * @param vector - {@link Vec2} representing max values\n   * @returns - {@link Vec2} with max values applied\n   */\n  max(vector: Vec2 = new Vec2()): Vec2 {\n    this.x = Math.max(this.x, vector.x)\n    this.y = Math.max(this.y, vector.y)\n\n    return this\n  }\n\n  /**\n   * Apply min values to this {@link Vec2} components\n   * @param vector - {@link Vec2} representing min values\n   * @returns - {@link Vec2} with min values applied\n   */\n  min(vector: Vec2 = new Vec2()): Vec2 {\n    this.x = Math.min(this.x, vector.x)\n    this.y = Math.min(this.y, vector.y)\n\n    return this\n  }\n\n  /**\n   * Clamp this {@link Vec2} components by min and max {@link Vec2} vectors\n   * @param min - minimum {@link Vec2} components to compare with\n   * @param max - maximum {@link Vec2} components to compare with\n   * @returns - clamped {@link Vec2}\n   */\n  clamp(min: Vec2 = new Vec2(), max: Vec2 = new Vec2()): Vec2 {\n    this.x = Math.max(min.x, Math.min(max.x, this.x))\n    this.y = Math.max(min.y, Math.min(max.y, this.y))\n\n    return this\n  }\n\n  /**\n   * Check if 2 {@link Vec2} are equal\n   * @param vector - {@link Vec2} to compare\n   * @returns - whether the {@link Vec2} are equals or not\n   */\n  equals(vector: Vec2 = new Vec2()): boolean {\n    return this.x === vector.x && this.y === vector.y\n  }\n\n  /**\n   * Get the square length of this {@link Vec2}\n   * @returns - square length of this {@link Vec2}\n   */\n  lengthSq(): number {\n    return this.x * this.x + this.y * this.y\n  }\n\n  /**\n   * Get the length of this {@link Vec2}\n   * @returns - length of this {@link Vec2}\n   */\n  length(): number {\n    return Math.sqrt(this.lengthSq())\n  }\n\n  /**\n   * Normalize this {@link Vec2}\n   * @returns - normalized {@link Vec2}\n   */\n  normalize(): Vec2 {\n    // normalize\n    let len = this.x * this.x + this.y * this.y\n    if (len > 0) {\n      len = 1 / Math.sqrt(len)\n    }\n    this.x *= len\n    this.y *= len\n\n    return this\n  }\n\n  /**\n   * Calculate the dot product of 2 {@link Vec2}\n   * @param vector - {@link Vec2} to use for dot product\n   * @returns - dot product of the 2 {@link Vec2}\n   */\n  dot(vector: Vec2 = new Vec2()): number {\n    return this.x * vector.x + this.y * vector.y\n  }\n\n  /**\n   * Calculate the linear interpolation of this {@link Vec2} by given {@link Vec2} and alpha, where alpha is the percent distance along the line\n   * @param vector - {@link Vec2} to interpolate towards\n   * @param [alpha=1] - interpolation factor in the [0, 1] interval\n   * @returns - this {@link Vec2} after linear interpolation\n   */\n  lerp(vector: Vec2 = new Vec2(), alpha = 1): Vec2 {\n    this.x += (vector.x - this.x) * alpha\n    this.y += (vector.y - this.y) * alpha\n\n    return this\n  }\n}\n"],"names":[],"mappings":"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"}