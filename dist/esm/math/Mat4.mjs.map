{"version":3,"file":"Mat4.mjs","sources":["../../../src/math/Mat4.ts"],"sourcesContent":["import { Vec3 } from './Vec3'\nimport { Quat } from './Quat'\n\nconst xAxis = new Vec3()\nconst yAxis = new Vec3()\nconst zAxis = new Vec3()\n\n/**\n * Basic 4x4 matrix class used for matrix calculations.\n *\n * Note that like three.js, the constructor and {@link set} method take arguments in row-major order, while internally they are stored in the {@link elements} array in column-major order.\n *\n * @see https://github.com/mrdoob/three.js/blob/dev/src/math/Matrix4.js\n * @see http://glmatrix.net/docs/mat4.js.html\n */\nexport class Mat4 {\n  /** The type of the {@link Mat4} */\n  type: string\n  /** Our matrix array */\n  elements: Float32Array\n\n  // prettier-ignore\n  /**\n   * Mat4 constructor\n   * @param elements - initial array to use, default to identity matrix\n   */\n  constructor(elements: Float32Array = new Float32Array([\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1\n  ])) {\n    this.type = 'Mat4'\n    this.elements = elements\n  }\n\n  /***\n   * Sets the matrix from 16 numbers\n   *\n   * @param n11 number\n   * @param n12 number\n   * @param n13 number\n   * @param n14 number\n   * @param n21 number\n   * @param n22 number\n   * @param n23 number\n   * @param n24 number\n   * @param n31 number\n   * @param n32 number\n   * @param n33 number\n   * @param n34 number\n   * @param n41 number\n   * @param n42 number\n   * @param n43 number\n   * @param n44 number\n   *\n   * @returns - this {@link Mat4} after being set\n   */\n  set(\n    n11: number,\n    n12: number,\n    n13: number,\n    n14: number,\n    n21: number,\n    n22: number,\n    n23: number,\n    n24: number,\n    n31: number,\n    n32: number,\n    n33: number,\n    n34: number,\n    n41: number,\n    n42: number,\n    n43: number,\n    n44: number\n  ): Mat4 {\n    const te = this.elements\n\n    te[0] = n11\n    te[1] = n12\n    te[2] = n13\n    te[3] = n14\n    te[4] = n21\n    te[5] = n22\n    te[6] = n23\n    te[7] = n24\n    te[8] = n31\n    te[9] = n32\n    te[10] = n33\n    te[11] = n34\n    te[12] = n41\n    te[13] = n42\n    te[14] = n43\n    te[15] = n44\n\n    return this\n  }\n\n  /**\n   * Sets the {@link Mat4} to an identity matrix\n   * @returns - this {@link Mat4} after being set\n   */\n  identity(): Mat4 {\n    // prettier-ignore\n    this.set(\n      1, 0, 0, 0,\n      0, 1, 0, 0,\n      0, 0, 1, 0,\n      0, 0, 0, 1\n    )\n\n    return this\n  }\n\n  /**\n   * Sets the {@link Mat4} values from an array\n   * @param array - array to use\n   * @returns - this {@link Mat4} after being set\n   */\n  // prettier-ignore\n  setFromArray(array: Float32Array | number[] = new Float32Array([\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1\n  ])): Mat4 {\n    for (let i = 0; i < this.elements.length; i++) {\n      this.elements[i] = array[i]\n    }\n\n    return this\n  }\n\n  /**\n   * Copy another {@link Mat4}\n   * @param matrix\n   * @returns - this {@link Mat4} after being set\n   */\n  copy(matrix: Mat4 = new Mat4()): Mat4 {\n    const array = matrix.elements\n    this.elements[0] = array[0]\n    this.elements[1] = array[1]\n    this.elements[2] = array[2]\n    this.elements[3] = array[3]\n    this.elements[4] = array[4]\n    this.elements[5] = array[5]\n    this.elements[6] = array[6]\n    this.elements[7] = array[7]\n    this.elements[8] = array[8]\n    this.elements[9] = array[9]\n    this.elements[10] = array[10]\n    this.elements[11] = array[11]\n    this.elements[12] = array[12]\n    this.elements[13] = array[13]\n    this.elements[14] = array[14]\n    this.elements[15] = array[15]\n\n    return this\n  }\n\n  /**\n   * Clone a {@link Mat4}\n   * @returns - cloned {@link Mat4}\n   */\n  clone(): Mat4 {\n    return new Mat4().copy(this)\n  }\n\n  /**\n   * Multiply this {@link Mat4} with another {@link Mat4}\n   * @param matrix - {@link Mat4} to multiply with\n   * @returns - this {@link Mat4} after multiplication\n   */\n  multiply(matrix: Mat4 = new Mat4()): Mat4 {\n    return this.multiplyMatrices(this, matrix)\n  }\n\n  /**\n   * Multiply another {@link Mat4} with this {@link Mat4}\n   * @param matrix - {@link Mat4} to multiply with\n   * @returns - this {@link Mat4} after multiplication\n   */\n  premultiply(matrix: Mat4 = new Mat4()): Mat4 {\n    return this.multiplyMatrices(matrix, this)\n  }\n\n  /**\n   * Multiply two {@link Mat4}\n   * @param a - first {@link Mat4}\n   * @param b - second {@link Mat4}\n   * @returns - {@link Mat4} resulting from the multiplication\n   */\n  multiplyMatrices(a: Mat4 = new Mat4(), b: Mat4 = new Mat4()): Mat4 {\n    const ae = a.elements\n    const be = b.elements\n    const te = this.elements\n\n    const a11 = ae[0],\n      a12 = ae[4],\n      a13 = ae[8],\n      a14 = ae[12]\n    const a21 = ae[1],\n      a22 = ae[5],\n      a23 = ae[9],\n      a24 = ae[13]\n    const a31 = ae[2],\n      a32 = ae[6],\n      a33 = ae[10],\n      a34 = ae[14]\n    const a41 = ae[3],\n      a42 = ae[7],\n      a43 = ae[11],\n      a44 = ae[15]\n\n    const b11 = be[0],\n      b12 = be[4],\n      b13 = be[8],\n      b14 = be[12]\n    const b21 = be[1],\n      b22 = be[5],\n      b23 = be[9],\n      b24 = be[13]\n    const b31 = be[2],\n      b32 = be[6],\n      b33 = be[10],\n      b34 = be[14]\n    const b41 = be[3],\n      b42 = be[7],\n      b43 = be[11],\n      b44 = be[15]\n\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41\n    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42\n    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43\n    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44\n\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41\n    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42\n    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43\n    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44\n\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41\n    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42\n    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43\n    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44\n\n    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41\n    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42\n    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43\n    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44\n\n    return this\n  }\n\n  /**\n   * {@link premultiply} this {@link Mat4} by a translate matrix (i.e. translateMatrix = new Mat4().translate(vector))\n   * @param vector - translation {@link Vec3 | vector} to use\n   * @returns - this {@link Mat4} after the premultiply translate operation\n   */\n  premultiplyTranslate(vector: Vec3 = new Vec3()): Mat4 {\n    // premultiply by a translateMatrix, ie translateMatrix = new Mat4().translate(vector)\n    // where translateMatrix[0] = 1, translateMatrix[5] = 1, scaleMatrix[10] = 1, translateMatrix[15] = 1 from identity\n    // and translateMatrix[12] = vector.x, translateMatrix[13] = vector.y, translateMatrix[14] = vector.z from translation\n    // equivalent (but faster) to this.multiply(translateMatrix, this)\n\n    // from identity matrix\n    const a11 = 1\n    const a22 = 1\n    const a33 = 1\n    const a44 = 1\n\n    // from translation\n    const a14 = vector.x\n    const a24 = vector.y\n    const a34 = vector.z\n\n    const be = this.elements\n    const te = this.elements\n\n    const b11 = be[0],\n      b12 = be[4],\n      b13 = be[8],\n      b14 = be[12]\n    const b21 = be[1],\n      b22 = be[5],\n      b23 = be[9],\n      b24 = be[13]\n    const b31 = be[2],\n      b32 = be[6],\n      b33 = be[10],\n      b34 = be[14]\n    const b41 = be[3],\n      b42 = be[7],\n      b43 = be[11],\n      b44 = be[15]\n\n    te[0] = a11 * b11 + a14 * b41\n    te[4] = a11 * b12 + a14 * b42\n    te[8] = a11 * b13 + a14 * b43\n    te[12] = a11 * b14 + a14 * b44\n\n    te[1] = a22 * b21 + a24 * b41\n    te[5] = a22 * b22 + a24 * b42\n    te[9] = a22 * b23 + a24 * b43\n    te[13] = a22 * b24 + a24 * b44\n\n    te[2] = a33 * b31 + a34 * b41\n    te[6] = a33 * b32 + a34 * b42\n    te[10] = a33 * b33 + a34 * b43\n    te[14] = a33 * b34 + a34 * b44\n\n    te[3] = a44 * b41\n    te[7] = a44 * b42\n    te[11] = a44 * b43\n    te[15] = a44 * b44\n\n    return this\n  }\n\n  /**\n   * {@link premultiply} this {@link Mat4} by a scale matrix (i.e. translateMatrix = new Mat4().scale(vector))\n   * @param vector - scale {@link Vec3 | vector} to use\n   * @returns - this {@link Mat4} after the premultiply scale operation\n   */\n  premultiplyScale(vector: Vec3 = new Vec3()): Mat4 {\n    // premultiply by a scaleMatrix, ie scaleMatrix = new Mat4().scale(vector)\n    // where scaleMatrix[0] = vector.x, scaleMatrix[5] = vector.y, scaleMatrix[10] = vector.z, scaleMatrix[15] = 1\n    // equivalent (but faster) to this.multiply(scaleMatrix, this)\n\n    const be = this.elements\n    const te = this.elements\n\n    const a11 = vector.x\n    const a22 = vector.y\n    const a33 = vector.z\n    const a44 = 1\n\n    const b11 = be[0],\n      b12 = be[4],\n      b13 = be[8],\n      b14 = be[12]\n    const b21 = be[1],\n      b22 = be[5],\n      b23 = be[9],\n      b24 = be[13]\n    const b31 = be[2],\n      b32 = be[6],\n      b33 = be[10],\n      b34 = be[14]\n    const b41 = be[3],\n      b42 = be[7],\n      b43 = be[11],\n      b44 = be[15]\n\n    te[0] = a11 * b11\n    te[4] = a11 * b12\n    te[8] = a11 * b13\n    te[12] = a11 * b14\n\n    te[1] = a22 * b21\n    te[5] = a22 * b22\n    te[9] = a22 * b23\n    te[13] = a22 * b24\n\n    te[2] = a33 * b31\n    te[6] = a33 * b32\n    te[10] = a33 * b33\n    te[14] = a33 * b34\n\n    te[3] = a44 * b41\n    te[7] = a44 * b42\n    te[11] = a44 * b43\n    te[15] = a44 * b44\n\n    return this\n  }\n\n  /**\n   * Get the {@link Mat4} inverse\n   * @returns - the inverted {@link Mat4}\n   */\n  invert() {\n    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    const te = this.elements,\n      n11 = te[0],\n      n21 = te[1],\n      n31 = te[2],\n      n41 = te[3],\n      n12 = te[4],\n      n22 = te[5],\n      n32 = te[6],\n      n42 = te[7],\n      n13 = te[8],\n      n23 = te[9],\n      n33 = te[10],\n      n43 = te[11],\n      n14 = te[12],\n      n24 = te[13],\n      n34 = te[14],\n      n44 = te[15],\n      t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,\n      t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,\n      t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,\n      t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34\n\n    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14\n\n    if (det === 0) return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0)\n\n    const detInv = 1 / det\n\n    te[0] = t11 * detInv\n    te[1] =\n      (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) *\n      detInv\n    te[2] =\n      (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) *\n      detInv\n    te[3] =\n      (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) *\n      detInv\n\n    te[4] = t12 * detInv\n    te[5] =\n      (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) *\n      detInv\n    te[6] =\n      (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) *\n      detInv\n    te[7] =\n      (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) *\n      detInv\n\n    te[8] = t13 * detInv\n    te[9] =\n      (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) *\n      detInv\n    te[10] =\n      (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) *\n      detInv\n    te[11] =\n      (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) *\n      detInv\n\n    te[12] = t14 * detInv\n    te[13] =\n      (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) *\n      detInv\n    te[14] =\n      (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) *\n      detInv\n    te[15] =\n      (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) *\n      detInv\n\n    return this\n  }\n\n  /**\n   * Clone and invert the {@link Mat4}\n   * @returns - inverted cloned {@link Mat4}\n   */\n  getInverse(): Mat4 {\n    return this.clone().invert()\n  }\n\n  /**\n   * Transpose this {@link Mat4}\n   * @returns - the transposed {@link Mat4}\n   */\n  transpose(): Mat4 {\n    let t\n    const te = this.elements\n\n    t = te[1]\n    te[1] = te[4]\n    te[4] = t\n\n    t = te[2]\n    te[2] = te[8]\n    te[8] = t\n\n    t = te[3]\n    te[3] = te[12]\n    te[12] = t\n\n    t = te[6]\n    te[6] = te[9]\n    te[9] = t\n\n    t = te[7]\n    te[7] = te[13]\n    te[13] = t\n\n    t = te[11]\n    te[11] = te[14]\n    te[14] = t\n\n    return this\n  }\n\n  /**\n   * Translate a {@link Mat4}\n   * @param vector - translation {@link Vec3 | vector} to use\n   * @returns - translated {@link Mat4}\n   */\n  translate(vector: Vec3 = new Vec3()): Mat4 {\n    const a = this.elements\n\n    a[12] = a[0] * vector.x + a[4] * vector.y + a[8] * vector.z + a[12]\n    a[13] = a[1] * vector.x + a[5] * vector.y + a[9] * vector.z + a[13]\n    a[14] = a[2] * vector.x + a[6] * vector.y + a[10] * vector.z + a[14]\n    a[15] = a[3] * vector.x + a[7] * vector.y + a[11] * vector.z + a[15]\n\n    return this\n  }\n\n  /**\n   * Get the translation {@link Vec3} component of a {@link Mat4}\n   * @param position - {@link Vec3} to set\n   * @returns - translation {@link Vec3} component of this {@link Mat4}\n   */\n  getTranslation(position = new Vec3()): Vec3 {\n    return position.set(this.elements[12], this.elements[13], this.elements[14])\n  }\n\n  /**\n   * Scale a {@link Mat4}\n   * @param vector - scale {@link Vec3 | vector} to use\n   * @returns - scaled {@link Mat4}\n   */\n  scale(vector: Vec3 = new Vec3()): Mat4 {\n    const a = this.elements\n\n    a[0] *= vector.x\n    a[1] *= vector.x\n    a[2] *= vector.x\n    a[3] *= vector.x\n    a[4] *= vector.y\n    a[5] *= vector.y\n    a[6] *= vector.y\n    a[7] *= vector.y\n    a[8] *= vector.z\n    a[9] *= vector.z\n    a[10] *= vector.z\n    a[11] *= vector.z\n\n    return this\n  }\n\n  /**\n   * Rotate a {@link Mat4} from a {@link Quat | quaternion}\n   * @param quaternion - {@link Quat | quaternion} to use\n   * @returns - rotated {@link Mat4}\n   */\n  rotateFromQuaternion(quaternion: Quat = new Quat()): Mat4 {\n    const te = this.elements\n\n    const x = quaternion.elements[0],\n      y = quaternion.elements[1],\n      z = quaternion.elements[2],\n      w = quaternion.elements[3]\n\n    const x2 = x + x,\n      y2 = y + y,\n      z2 = z + z\n    const xx = x * x2,\n      xy = x * y2,\n      xz = x * z2\n    const yy = y * y2,\n      yz = y * z2,\n      zz = z * z2\n    const wx = w * x2,\n      wy = w * y2,\n      wz = w * z2\n\n    te[0] = 1 - (yy + zz)\n    te[4] = xy - wz\n    te[8] = xz + wy\n\n    te[1] = xy + wz\n    te[5] = 1 - (xx + zz)\n    te[9] = yz - wx\n\n    te[2] = xz - wy\n    te[6] = yz + wx\n    te[10] = 1 - (xx + yy)\n\n    return this\n  }\n\n  /**\n   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale\n   * Equivalent for applying translation, rotation and scale matrices but much faster\n   * Source code from: http://glmatrix.net/docs/mat4.js.html\n   *\n   * @param translation - translation {@link Vec3 | vector} to use\n   * @param quaternion - {@link Quat | quaternion} to use\n   * @param scale - translation {@link Vec3 | vector} to use\n   * @returns - transformed {@link Mat4}\n   */\n  compose(translation: Vec3 = new Vec3(), quaternion: Quat = new Quat(), scale: Vec3 = new Vec3(1)): Mat4 {\n    const matrix = this.elements\n\n    // Quaternion math\n    const x = quaternion.elements[0],\n      y = quaternion.elements[1],\n      z = quaternion.elements[2],\n      w = quaternion.elements[3]\n\n    const x2 = x + x\n    const y2 = y + y\n    const z2 = z + z\n    const xx = x * x2\n    const xy = x * y2\n    const xz = x * z2\n    const yy = y * y2\n    const yz = y * z2\n    const zz = z * z2\n    const wx = w * x2\n    const wy = w * y2\n    const wz = w * z2\n    const sx = scale.x\n    const sy = scale.y\n    const sz = scale.z\n\n    matrix[0] = (1 - (yy + zz)) * sx\n    matrix[1] = (xy + wz) * sx\n    matrix[2] = (xz - wy) * sx\n    matrix[3] = 0\n    matrix[4] = (xy - wz) * sy\n    matrix[5] = (1 - (xx + zz)) * sy\n    matrix[6] = (yz + wx) * sy\n    matrix[7] = 0\n    matrix[8] = (xz + wy) * sz\n    matrix[9] = (yz - wx) * sz\n    matrix[10] = (1 - (xx + yy)) * sz\n    matrix[11] = 0\n    matrix[12] = translation.x\n    matrix[13] = translation.y\n    matrix[14] = translation.z\n    matrix[15] = 1\n\n    return this\n  }\n\n  /**\n   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale, rotating and scaling around the given {@link Vec3 | origin vector}\n   * Equivalent for applying translation, rotation and scale matrices but much faster\n   * Source code from: http://glmatrix.net/docs/mat4.js.html\n   *\n   * @param translation - translation {@link Vec3 | vector} to use\n   * @param quaternion - {@link Quat | quaternion} to use\n   * @param scale - translation {@link Vec3 | vector} to use\n   * @param origin - origin {@link Vec3 | vector} around which to scale and rotate\n   * @returns - transformed {@link Mat4}\n   */\n  composeFromOrigin(\n    translation: Vec3 = new Vec3(),\n    quaternion: Quat = new Quat(),\n    scale: Vec3 = new Vec3(1),\n    origin: Vec3 = new Vec3()\n  ): Mat4 {\n    const matrix = this.elements\n\n    // Quaternion math\n    const x = quaternion.elements[0],\n      y = quaternion.elements[1],\n      z = quaternion.elements[2],\n      w = quaternion.elements[3]\n\n    const x2 = x + x\n    const y2 = y + y\n    const z2 = z + z\n\n    const xx = x * x2\n    const xy = x * y2\n    const xz = x * z2\n    const yy = y * y2\n    const yz = y * z2\n    const zz = z * z2\n\n    const wx = w * x2\n    const wy = w * y2\n    const wz = w * z2\n\n    const sx = scale.x\n    const sy = scale.y\n    const sz = scale.z\n\n    const ox = origin.x\n    const oy = origin.y\n    const oz = origin.z\n\n    const out0 = (1 - (yy + zz)) * sx\n    const out1 = (xy + wz) * sx\n    const out2 = (xz - wy) * sx\n    const out4 = (xy - wz) * sy\n    const out5 = (1 - (xx + zz)) * sy\n    const out6 = (yz + wx) * sy\n    const out8 = (xz + wy) * sz\n    const out9 = (yz - wx) * sz\n    const out10 = (1 - (xx + yy)) * sz\n\n    matrix[0] = out0\n    matrix[1] = out1\n    matrix[2] = out2\n    matrix[3] = 0\n    matrix[4] = out4\n    matrix[5] = out5\n    matrix[6] = out6\n    matrix[7] = 0\n    matrix[8] = out8\n    matrix[9] = out9\n    matrix[10] = out10\n    matrix[11] = 0\n    matrix[12] = translation.x + ox - (out0 * ox + out4 * oy + out8 * oz)\n    matrix[13] = translation.y + oy - (out1 * ox + out5 * oy + out9 * oz)\n    matrix[14] = translation.z + oz - (out2 * ox + out6 * oy + out10 * oz)\n    matrix[15] = 1\n\n    return this\n  }\n\n  /**\n   * Set this {@link Mat4} as a rotation matrix based on an eye, target and up {@link Vec3 | vectors}\n   * @param eye - {@link Vec3 | position vector} of the object that should be rotated\n   * @param target - {@link Vec3 | target vector} to look at\n   * @param up - up {@link Vec3 | vector}\n   * @returns - rotated {@link Mat4}\n   */\n  lookAt(eye: Vec3 = new Vec3(), target: Vec3 = new Vec3(), up: Vec3 = new Vec3(0, 1, 0)): Mat4 {\n    const te = this.elements\n\n    zAxis.copy(eye).sub(target)\n\n    if (zAxis.lengthSq() === 0) {\n      // eye and target are in the same position\n      zAxis.z = 1\n    }\n\n    zAxis.normalize()\n    xAxis.crossVectors(up, zAxis)\n\n    if (xAxis.lengthSq() === 0) {\n      // up and z are parallel\n      if (Math.abs(up.z) === 1) {\n        zAxis.x += 0.0001\n      } else {\n        zAxis.z += 0.0001\n      }\n\n      zAxis.normalize()\n      xAxis.crossVectors(up, zAxis)\n    }\n\n    xAxis.normalize()\n    yAxis.crossVectors(zAxis, xAxis)\n\n    te[0] = xAxis.x\n    te[1] = xAxis.y\n    te[2] = xAxis.z\n    te[3] = 0\n    te[4] = yAxis.x\n    te[5] = yAxis.y\n    te[6] = yAxis.z\n    te[7] = 0\n    te[8] = zAxis.x\n    te[9] = zAxis.y\n    te[10] = zAxis.z\n    te[11] = 0\n    te[12] = eye.x\n    te[13] = eye.y\n    te[14] = eye.z\n    te[15] = 1\n\n    return this\n  }\n\n  /**\n   * Compute a view {@link Mat4} matrix.\n   *\n   * This is a view matrix which transforms all other objects\n   * to be in the space of the view defined by the parameters.\n   *\n   * @param eye - the position of the object.\n   * @param target - the position meant to be aimed at.\n   * @param up - a vector pointing up.\n   * @returns - the view {@link Mat4} matrix.\n   */\n  makeView(eye: Vec3 = new Vec3(), target: Vec3 = new Vec3(), up: Vec3 = new Vec3(0, 1, 0)): Mat4 {\n    // TODO can easily be confused with lookAt\n\n    zAxis.copy(eye).sub(target).normalize()\n    xAxis.crossVectors(up, zAxis).normalize()\n    yAxis.crossVectors(zAxis, xAxis).normalize()\n\n    const te = this.elements\n\n    te[0] = xAxis.x\n    te[1] = yAxis.x\n    te[2] = zAxis.x\n    te[3] = 0\n    te[4] = xAxis.y\n    te[5] = yAxis.y\n    te[6] = zAxis.y\n    te[7] = 0\n    te[8] = xAxis.z\n    te[9] = yAxis.z\n    te[10] = zAxis.z\n    te[11] = 0\n\n    te[12] = -(xAxis.x * eye.x + xAxis.y * eye.y + xAxis.z * eye.z)\n    te[13] = -(yAxis.x * eye.x + yAxis.y * eye.y + yAxis.z * eye.z)\n    te[14] = -(zAxis.x * eye.x + zAxis.y * eye.y + zAxis.z * eye.z)\n    te[15] = 1\n\n    return this\n  }\n\n  /**\n   * Create an orthographic {@link Mat4} matrix based on the parameters. Transforms from\n   *  * the given the left, right, bottom, and top dimensions to -1 +1 in x, and y\n   *  * and 0 to +1 in z.\n   *\n   * @param parameters - parameters used to create the camera orthographic matrix.\n   * @param parameters.left - the left side of the camera near clipping plane viewport.\n   * @param parameters.right - the right side of the camera near clipping plane viewport.\n   * @param parameters.bottom - the bottom of the camera near clipping plane viewport.\n   * @param parameters.top - the top of the camera near clipping plane viewport.\n   * @param parameters.near - the camera near plane.\n   * @param parameters.far - the camera far plane.\n   * @returns - the camera orthographic {@link Mat4} matrix.\n   */\n  makeOrthographic({\n    left,\n    right,\n    bottom,\n    top,\n    near,\n    far,\n  }: {\n    left: number\n    right: number\n    bottom: number\n    top: number\n    near: number\n    far: number\n  }): Mat4 {\n    const te = this.elements\n\n    te[0] = 2 / (right - left)\n    te[1] = 0\n    te[2] = 0\n    te[3] = 0\n\n    te[4] = 0\n    te[5] = 2 / (top - bottom)\n    te[6] = 0\n    te[7] = 0\n\n    te[8] = 0\n    te[9] = 0\n    te[10] = 1 / (near - far)\n    te[11] = 0\n\n    te[12] = (right + left) / (left - right)\n    te[13] = (top + bottom) / (bottom - top)\n    te[14] = near / (near - far)\n    te[15] = 1\n\n    return this\n  }\n\n  /**\n   * Create a perspective {@link Mat4} matrix based on the parameters.\n   *\n   * Note, The matrix generated sends the viewing frustum to the unit box.\n   * We assume a unit box extending from -1 to 1 in the x and y dimensions and\n   * from -1 to 1 in the z dimension, as three.js and more generally WebGL handles it.\n   *\n   * @param parameters - parameters used to create the camera perspective matrix.\n   * @param parameters.fov - the camera field of view (in radians).\n   * @param parameters.aspect - the camera aspect ratio (width / height).\n   * @param parameters.near - the camera near plane.\n   * @param parameters.far - the camera far plane.\n   * @returns - the camera perspective {@link Mat4} matrix.\n   */\n  makePerspective({ fov, aspect, near, far }: { fov: number; aspect: number; near: number; far: number }): Mat4 {\n    // TODO handle z from 0 to 1 like https://github.com/greggman/wgpu-matrix/blob/main/src/mat4-impl.ts#L756 does it?\n    // It would be aligned with the WebGPU specs but it breaks the Camera screenRatio and DOMObject3D position calcs\n\n    const top = near * Math.tan((Math.PI / 180) * 0.5 * fov)\n    const height = 2 * top\n    const width = aspect * height\n    const left = -0.5 * width\n\n    const right = left + width\n    const bottom = top - height\n\n    const x = (2 * near) / (right - left)\n    const y = (2 * near) / (top - bottom)\n\n    const a = (right + left) / (right - left)\n    const b = (top + bottom) / (top - bottom)\n    const c = -(far + near) / (far - near)\n    const d = (-2 * far * near) / (far - near)\n\n    // prettier-ignore\n    this.set(\n      x, 0, 0, 0,\n      0, y, 0, 0,\n      a, b, c, -1,\n      0, 0, d, 0\n    )\n\n    return this\n  }\n}\n"],"names":[],"mappings":"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"}