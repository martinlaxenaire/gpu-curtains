{"version":3,"file":"BoxGeometry.mjs","sources":["../../../../src/extras/geometries/BoxGeometry.ts"],"sourcesContent":["import { IndexedGeometry } from '../../core/geometries/IndexedGeometry'\nimport { Vec3 } from '../../math/Vec3'\nimport { GeometryBaseParams } from '../../types/Geometries'\n\n/**\n * Parameters used to create a {@link BoxGeometry}\n */\nexport interface BoxGeometryParams extends GeometryBaseParams {\n  /** Number of segments along the X axis */\n  widthSegments?: number\n  /** Number of segments along the Y axis */\n  heightSegments?: number\n  /** Number of segments along the Z axis */\n  depthSegments?: number\n}\n\n/**\n * Helper to easily create 3D box indexed geometries.\n *\n * @example\n * ```javascript\n * const boxGeometry = new BoxGeometry()\n * ```\n */\nexport class BoxGeometry extends IndexedGeometry {\n  constructor(\n    {\n      widthSegments = 1,\n      heightSegments = 1,\n      depthSegments = 1,\n      instancesCount = 1,\n      vertexBuffers = [],\n      topology,\n    } = {} as BoxGeometryParams\n  ) {\n    super({ verticesOrder: 'ccw', topology, instancesCount, vertexBuffers })\n\n    this.type = 'BoxGeometry'\n\n    // taken from threejs\n    // https://github.com/mrdoob/three.js/blob/dev/src/geometries/BoxGeometry.js\n    widthSegments = Math.floor(widthSegments)\n    heightSegments = Math.floor(heightSegments)\n    depthSegments = Math.floor(depthSegments)\n\n    const vertices = []\n    const uvs = []\n    const normals = []\n    const indices = []\n\n    let numberOfVertices = 0\n\n    const buildPlane = (u, v, w, udir, vdir, width, height, depth, gridX, gridY) => {\n      const segmentWidth = width / gridX\n      const segmentHeight = height / gridY\n\n      const widthHalf = width / 2\n      const heightHalf = height / 2\n      const depthHalf = depth / 2\n\n      const gridX1 = gridX + 1\n      const gridY1 = gridY + 1\n\n      let vertexCounter = 0\n\n      const vector = new Vec3()\n\n      // generate vertices, normals and uvs\n\n      for (let iy = 0; iy < gridY1; iy++) {\n        const y = iy * segmentHeight - heightHalf\n\n        for (let ix = 0; ix < gridX1; ix++) {\n          const x = ix * segmentWidth - widthHalf\n\n          // set values to correct vector component\n\n          vector[u] = x * udir\n          vector[v] = y * vdir\n          vector[w] = depthHalf\n\n          // now apply vector to vertex buffer\n\n          vertices.push(vector.x, vector.y, vector.z)\n\n          // set values to correct vector component\n\n          vector[u] = 0\n          vector[v] = 0\n          vector[w] = depth > 0 ? 1 : -1\n\n          // now apply vector to normal buffer\n\n          normals.push(vector.x, vector.y, vector.z)\n\n          // uvs\n\n          uvs.push(ix / gridX)\n          uvs.push(iy / gridY)\n\n          // counters\n\n          vertexCounter += 1\n        }\n      }\n\n      // indices\n\n      // 1. you need three indices to draw a single face\n      // 2. a single segment consists of two faces\n      // 3. so we need to generate six (2*3) indices per segment\n\n      for (let iy = 0; iy < gridY; iy++) {\n        for (let ix = 0; ix < gridX; ix++) {\n          const a = numberOfVertices + ix + gridX1 * iy\n          const b = numberOfVertices + ix + gridX1 * (iy + 1)\n          const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1)\n          const d = numberOfVertices + (ix + 1) + gridX1 * iy\n\n          // faces\n\n          indices.push(a, b, d)\n          indices.push(b, c, d)\n\n          // update total number of vertices\n\n          numberOfVertices += vertexCounter\n        }\n      }\n    }\n\n    buildPlane('z', 'y', 'x', -1, -1, 2, 2, 2, depthSegments, heightSegments) // px\n    buildPlane('z', 'y', 'x', 1, -1, 2, 2, -2, depthSegments, heightSegments) // nx\n    buildPlane('x', 'z', 'y', 1, 1, 2, 2, 2, widthSegments, depthSegments) // py\n    buildPlane('x', 'z', 'y', 1, -1, 2, 2, -2, widthSegments, depthSegments) // ny\n    buildPlane('x', 'y', 'z', 1, -1, 2, 2, 2, widthSegments, heightSegments) // pz\n    buildPlane('x', 'y', 'z', -1, -1, 2, 2, -2, widthSegments, heightSegments) // nz\n\n    this.setAttribute({\n      name: 'position',\n      type: 'vec3f',\n      bufferFormat: 'float32x3',\n      size: 3,\n      array: new Float32Array(vertices),\n    })\n\n    this.setAttribute({\n      name: 'uv',\n      type: 'vec2f',\n      bufferFormat: 'float32x2',\n      size: 2,\n      array: new Float32Array(uvs),\n    })\n\n    this.setAttribute({\n      name: 'normal',\n      type: 'vec3f',\n      bufferFormat: 'float32x3',\n      size: 3,\n      array: new Float32Array(normals),\n    })\n\n    this.setIndexBuffer({\n      array: this.useUint16IndexArray ? new Uint16Array(indices) : new Uint32Array(indices),\n      bufferFormat: this.useUint16IndexArray ? 'uint16' : 'uint32',\n    })\n  }\n}\n"],"names":[],"mappings":"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"}