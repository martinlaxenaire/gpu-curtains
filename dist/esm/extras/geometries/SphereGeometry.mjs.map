{"version":3,"file":"SphereGeometry.mjs","sources":["../../../../src/extras/geometries/SphereGeometry.ts"],"sourcesContent":["import { IndexedGeometry } from '../../core/geometries/IndexedGeometry'\nimport { Vec3 } from '../../math/Vec3'\nimport { GeometryBaseParams } from '../../types/Geometries'\n\n/**\n * Parameters used to create a {@link SphereGeometry}\n */\nexport interface SphereGeometryParams extends GeometryBaseParams {\n  /** Number of horizontal segments */\n  widthSegments?: number\n  /** Number of vertical segments */\n  heightSegments?: number\n  /** Horizontal starting angle */\n  phiStart?: number\n  /** Horizontal sweep angle size */\n  phiLength?: number\n  /** Vertical starting angle */\n  thetaStart?: number\n  /** Vertical sweep angle size */\n  thetaLength?: number\n}\n\n/**\n * Helper to easily create 3D sphere indexed geometries.\n *\n * @example\n * ```javascript\n * const sphereGeometry = new SphereGeometry()\n * ```\n */\nexport class SphereGeometry extends IndexedGeometry {\n  constructor(\n    {\n      widthSegments = 32,\n      heightSegments = 16,\n      phiStart = 0,\n      phiLength = Math.PI * 2,\n      thetaStart = 0,\n      thetaLength = Math.PI,\n      instancesCount = 1,\n      vertexBuffers = [],\n      topology,\n    } = {} as SphereGeometryParams\n  ) {\n    super({ verticesOrder: 'ccw', topology, instancesCount, vertexBuffers })\n\n    this.type = 'SphereGeometry'\n\n    // taken from threejs\n    // https://github.com/mrdoob/three.js/blob/dev/src/geometries/SphereGeometry.js\n    widthSegments = Math.max(3, Math.floor(widthSegments))\n    heightSegments = Math.max(2, Math.floor(heightSegments))\n\n    const radius = 1\n    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI)\n\n    let index = 0\n    const grid = []\n\n    const vertex = new Vec3()\n    const normal = new Vec3()\n\n    // buffers\n\n    const indices = []\n    const vertices = []\n    const normals = []\n    const uvs = []\n\n    // generate vertices, normals and uvs\n\n    for (let iy = 0; iy <= heightSegments; iy++) {\n      const verticesRow = []\n\n      const v = iy / heightSegments\n\n      // special case for the poles\n\n      let uOffset = 0\n\n      if (iy === 0 && thetaStart === 0) {\n        uOffset = 0.5 / widthSegments\n      } else if (iy === heightSegments && thetaEnd === Math.PI) {\n        uOffset = -0.5 / widthSegments\n      }\n\n      for (let ix = 0; ix <= widthSegments; ix++) {\n        const u = ix / widthSegments\n\n        // vertex\n\n        vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\n        vertex.y = radius * Math.cos(thetaStart + v * thetaLength)\n        vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength)\n\n        vertices.push(vertex.x, vertex.y, vertex.z)\n\n        // normal\n\n        normal.copy(vertex).normalize()\n        normals.push(normal.x, normal.y, normal.z)\n\n        // uv\n\n        uvs.push(u + uOffset, v)\n\n        verticesRow.push(index++)\n      }\n\n      grid.push(verticesRow)\n    }\n\n    // indices\n\n    for (let iy = 0; iy < heightSegments; iy++) {\n      for (let ix = 0; ix < widthSegments; ix++) {\n        const a = grid[iy][ix + 1]\n        const b = grid[iy][ix]\n        const c = grid[iy + 1][ix]\n        const d = grid[iy + 1][ix + 1]\n\n        if (iy !== 0 || thetaStart > 0) indices.push(a, b, d)\n        if (iy !== heightSegments - 1 || thetaEnd < Math.PI) indices.push(b, c, d)\n      }\n    }\n\n    this.setAttribute({\n      name: 'position',\n      type: 'vec3f',\n      bufferFormat: 'float32x3',\n      size: 3,\n      array: new Float32Array(vertices),\n    })\n\n    this.setAttribute({\n      name: 'uv',\n      type: 'vec2f',\n      bufferFormat: 'float32x2',\n      size: 2,\n      array: new Float32Array(uvs),\n    })\n\n    this.setAttribute({\n      name: 'normal',\n      type: 'vec3f',\n      bufferFormat: 'float32x3',\n      size: 3,\n      array: new Float32Array(normals),\n    })\n\n    this.setIndexBuffer({\n      array: this.useUint16IndexArray ? new Uint16Array(indices) : new Uint32Array(indices),\n      bufferFormat: this.useUint16IndexArray ? 'uint16' : 'uint32',\n    })\n  }\n}\n"],"names":[],"mappings":"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"}