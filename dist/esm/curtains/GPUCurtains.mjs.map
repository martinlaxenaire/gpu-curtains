{"version":3,"file":"GPUCurtains.mjs","sources":["../../../src/curtains/GPUCurtains.ts"],"sourcesContent":["import { GPUCurtainsRenderer } from './renderers/GPUCurtainsRenderer'\nimport { ScrollManager } from '../utils/ScrollManager'\nimport { resizeManager } from '../utils/ResizeManager'\nimport { Vec3 } from '../math/Vec3'\nimport { PingPongPlane } from './meshes/PingPongPlane'\nimport { ShaderPass } from '../core/renderPasses/ShaderPass'\nimport { GPURenderer, GPURendererParams, ProjectedMesh } from '../core/renderers/GPURenderer'\nimport { DOMMesh } from './meshes/DOMMesh'\nimport { Plane } from './meshes/Plane'\nimport { ComputePass } from '../core/computePasses/ComputePass'\nimport { Camera, CameraBasePerspectiveOptions } from '../core/camera/Camera'\nimport { DOMElementBoundingRect, DOMElementParams, DOMPosition } from '../core/DOM/DOMElement'\nimport { GPUCameraRenderer, GPUCameraRendererParams } from '../core/renderers/GPUCameraRenderer'\nimport { GPUDeviceManager } from '../core/renderers/GPUDeviceManager'\nimport { Renderer } from '../core/renderers/utils'\n\n/**\n * Options used to create a {@link GPUCurtains}\n */\nexport interface GPUCurtainsOptions extends Omit<GPUCameraRendererParams, 'deviceManager'> {\n  /** Whether {@link GPUCurtains} should create its own requestAnimationFrame loop to render or not */\n  autoRender?: boolean\n  /** Whether {@link GPUCurtains} should handle all resizing by itself or not */\n  autoResize?: boolean\n  /** Whether {@link GPUCurtains} should listen to scroll event or not */\n  watchScroll?: boolean\n  /** Flag indicating whether we're running the production mode or not. If not, useful warnings could be logged to the console */\n  production: GPUDeviceManager['production']\n}\n\n/**\n * Parameters used to create a {@link GPUCurtains}\n */\nexport interface GPUCurtainsParams extends Partial<Omit<GPUCurtainsOptions, 'container'>> {\n  /** {@link HTMLElement} or string representing an {@link HTMLElement} selector that will hold the WebGPU {@link HTMLCanvasElement}. Could be set later if not specified. */\n  container?: string | HTMLElement | null\n}\n\n/**\n * Used as a global class to create a {@link GPUCurtainsRenderer}, create all objects that need a reference to a renderer, listen to various events such as scroll and resize and render.\n *\n * @example\n * ```javascript\n * // set our main GPUCurtains instance\n * const gpuCurtains = new GPUCurtains({\n *   container: '#canvas' // selector of our WebGPU canvas container\n * })\n *\n * // set the GPU device\n * // note this is asynchronous\n * await gpuCurtains.setDevice()\n * ```\n */\nexport class GPUCurtains {\n  /** The type of this {@link GPUCurtains} */\n  type: string\n  /** Options used to create this {@link GPUCurtains} */\n  options: GPUCurtainsOptions\n  /** {@link HTMLElement} that will hold the WebGPU {@link HTMLCanvasElement} */\n  container: HTMLElement\n\n  /** {@link GPUDeviceManager} used to handle the {@link GPUAdapter} and {@link GPUDevice} */\n  deviceManager: GPUDeviceManager\n\n  /** Tiny scroll event listener wrapper */\n  scrollManager: ScrollManager\n\n  /** Request animation frame callback returned id if used */\n  animationFrameID: null | number\n\n  // callbacks / events\n  /** function assigned to the {@link onRender} callback */\n  _onRenderCallback: () => void = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onScroll} callback */\n  _onScrollCallback: () => void = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onError} callback */\n  _onErrorCallback: () => void = () => {\n    /* allow empty callback */\n  }\n  /** function assigned to the {@link onContextLost} callback */\n  _onContextLostCallback: (info?: GPUDeviceLostInfo) => void = () => {\n    /* allow empty callback */\n  }\n\n  /**\n   * GPUCurtains constructor\n   * @param parameters - {@link GPUCurtainsParams | parameters} used to create this {@link GPUCurtains}\n   */\n  constructor({\n    container,\n    pixelRatio = window.devicePixelRatio ?? 1,\n    preferredFormat,\n    alphaMode = 'premultiplied',\n    production = false,\n    renderPass,\n    camera,\n    autoRender = true,\n    autoResize = true,\n    watchScroll = true,\n  }: GPUCurtainsParams = {}) {\n    this.type = 'CurtainsGPU'\n\n    this.options = {\n      container,\n      pixelRatio,\n      camera,\n      production,\n      preferredFormat,\n      alphaMode,\n      renderPass,\n      autoRender,\n      autoResize,\n      watchScroll,\n    }\n\n    this.setDeviceManager()\n\n    if (container) {\n      this.setContainer(container)\n    }\n  }\n\n  /**\n   * Set the {@link container}\n   * @param container - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\n   */\n  setContainer(container: DOMElementParams['element']) {\n    if (!container) {\n      const container = document.createElement('div')\n      container.setAttribute('id', 'curtains-gpu-canvas')\n      document.body.appendChild(container)\n      this.options.container = container\n    } else {\n      if (typeof container === 'string') {\n        container = document.querySelector(container)\n\n        if (!container) {\n          const container = document.createElement('div')\n          container.setAttribute('id', 'curtains-gpu-canvas')\n          document.body.appendChild(container)\n          this.options.container = container\n        } else {\n          this.options.container = container as HTMLElement\n        }\n      } else if (container instanceof Element) {\n        this.options.container = container as HTMLElement\n      }\n    }\n\n    this.container = this.options.container as HTMLElement\n\n    this.setCurtains()\n  }\n\n  /**\n   * Set the default {@link GPUCurtainsRenderer | renderer}\n   */\n  setMainRenderer() {\n    this.createCurtainsRenderer({\n      deviceManager: this.deviceManager,\n      // TODO ...this.options?\n      container: this.options.container,\n      pixelRatio: this.options.pixelRatio,\n      preferredFormat: this.options.preferredFormat,\n      alphaMode: this.options.alphaMode,\n      renderPass: this.options.renderPass,\n      camera: this.options.camera,\n    })\n  }\n\n  /**\n   * Patch the options with default values before creating a {@link Renderer}\n   * @param parameters - parameters to patch\n   */\n  patchRendererOptions<T extends GPURendererParams | GPUCameraRendererParams>(parameters: T): T {\n    if (parameters.pixelRatio === undefined) parameters.pixelRatio = this.options.pixelRatio\n\n    return parameters\n  }\n\n  /**\n   * Create a new {@link GPURenderer} instance\n   * @param parameters - {@link GPURendererParams | parameters} to use\n   */\n  createRenderer(parameters: GPURendererParams): GPURenderer {\n    parameters = this.patchRendererOptions(parameters)\n\n    return new GPURenderer({ ...parameters, deviceManager: this.deviceManager })\n  }\n\n  /**\n   * Create a new {@link GPUCameraRenderer} instance\n   * @param parameters - {@link GPUCameraRendererParams | parameters} to use\n   */\n  createCameraRenderer(parameters: GPUCameraRendererParams): GPUCameraRenderer {\n    parameters = this.patchRendererOptions(parameters)\n\n    return new GPUCameraRenderer({ ...parameters, deviceManager: this.deviceManager })\n  }\n\n  /**\n   * Create a new {@link GPUCurtainsRenderer} instance\n   * @param parameters - {@link GPUCameraRendererParams | parameters} to use\n   */\n  createCurtainsRenderer(parameters: GPUCameraRendererParams): GPUCurtainsRenderer {\n    parameters = this.patchRendererOptions(parameters)\n\n    return new GPUCurtainsRenderer({ ...parameters, deviceManager: this.deviceManager })\n  }\n\n  /**\n   * Set our {@link GPUDeviceManager}\n   */\n  setDeviceManager() {\n    this.deviceManager = new GPUDeviceManager({\n      label: 'GPUCurtains default device',\n      production: this.options.production,\n      onError: () =>\n        setTimeout(() => {\n          this._onErrorCallback && this._onErrorCallback()\n        }, 0),\n      onDeviceLost: (info) => this._onContextLostCallback && this._onContextLostCallback(info),\n    })\n  }\n\n  /**\n   * Get all created {@link Renderer}\n   * @readonly\n   */\n  get renderers(): Renderer[] {\n    return this.deviceManager.renderers\n  }\n\n  /**\n   * Get the default {@link GPUCurtainsRenderer} created\n   * @readonly\n   */\n  get renderer(): GPUCurtainsRenderer {\n    return this.renderers[0] as GPUCurtainsRenderer\n  }\n\n  /**\n   * Set the {@link GPUDeviceManager} {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device} if possible, then set all created {@link Renderer} contexts\n   */\n  async setDevice() {\n    await this.deviceManager.init()\n  }\n\n  /**\n   * Restore the {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device}\n   * @async\n   */\n  async restoreContext() {\n    await this.deviceManager.restoreDevice()\n  }\n\n  /**\n   * Set the various event listeners, set the {@link GPUCurtainsRenderer} and start rendering if needed\n   */\n  setCurtains() {\n    this.initEvents()\n\n    this.setMainRenderer()\n\n    // only if auto render\n    if (this.options.autoRender) {\n      this.animate()\n    }\n  }\n\n  /* RENDERER TRACKED OBJECTS */\n\n  /**\n   * Get all the created {@link PingPongPlane}\n   * @readonly\n   */\n  get pingPongPlanes(): PingPongPlane[] {\n    return this.renderers?.map((renderer) => renderer.pingPongPlanes).flat()\n  }\n\n  /**\n   * Get all the created {@link ShaderPass}\n   * @readonly\n   */\n  get shaderPasses(): ShaderPass[] {\n    return this.renderers?.map((renderer) => renderer.shaderPasses).flat()\n  }\n\n  /**\n   * Get all the created {@link ProjectedMesh | projected meshes}\n   * @readonly\n   */\n  get meshes(): ProjectedMesh[] {\n    return this.renderers?.map((renderer) => renderer.meshes).flat()\n  }\n\n  /**\n   * Get all the created {@link DOMMesh | DOM Meshes} (including {@link Plane | planes})\n   * @readonly\n   */\n  get domMeshes(): DOMMesh[] {\n    return this.renderers\n      ?.filter((renderer) => renderer instanceof GPUCurtainsRenderer)\n      .map((renderer: GPUCurtainsRenderer) => renderer.domMeshes)\n      .flat()\n  }\n\n  /**\n   * Get all the created {@link Plane | planes}\n   * @readonly\n   */\n  get planes(): Plane[] {\n    return this.domMeshes.filter((domMesh) => domMesh instanceof Plane) as Plane[]\n  }\n\n  /**\n   * Get all the created {@link ComputePass | compute passes}\n   * @readonly\n   */\n  get computePasses(): ComputePass[] {\n    return this.renderers?.map((renderer) => renderer.computePasses).flat()\n  }\n\n  /**\n   * Get the {@link GPUCurtainsRenderer#camera | default GPUCurtainsRenderer camera}\n   * @readonly\n   */\n  get camera(): Camera {\n    return this.renderer?.camera\n  }\n\n  /**\n   * Set the {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer camera} perspective\n   * @param parameters - {@link CameraBasePerspectiveOptions | parameters} to use for the perspective\n   */\n  setPerspective({ fov = 50, near = 0.01, far = 50 }: CameraBasePerspectiveOptions = {}) {\n    this.renderer?.setPerspective({ fov, near, far })\n  }\n\n  /**\n   * Set the default {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer camera} {@link Camera#position | position}\n   * @param position - new {@link Camera#position | position}\n   */\n  setCameraPosition(position: Vec3 = new Vec3(0, 0, 1)) {\n    this.renderer?.setCameraPosition(position)\n  }\n\n  /**\n   * Get our {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer bounding rectangle}\n   */\n  get boundingRect(): DOMElementBoundingRect {\n    return this.renderer?.boundingRect\n  }\n\n  /* SCROLL */\n\n  /**\n   * Set the {@link scrollManager}\n   */\n  initScroll() {\n    this.scrollManager = new ScrollManager({\n      // init values\n      scroll: {\n        x: window.pageXOffset,\n        y: window.pageYOffset,\n      },\n      delta: {\n        x: 0,\n        y: 0,\n      },\n      shouldWatch: this.options.watchScroll,\n      onScroll: (delta) => this.updateScroll(delta),\n    })\n  }\n\n  /**\n   * Update all {@link DOMMesh#updateScrollPosition | DOMMesh scroll positions}\n   * @param delta - last {@link ScrollManager#delta | scroll delta values}\n   */\n  updateScroll(delta: DOMPosition = { x: 0, y: 0 }) {\n    this.domMeshes.forEach((mesh) => {\n      if (mesh.domElement) {\n        mesh.updateScrollPosition(delta)\n      }\n    })\n\n    this._onScrollCallback && this._onScrollCallback()\n  }\n\n  /**\n   * Update our {@link ScrollManager#scroll | scrollManager scroll values}. Called each time the scroll has changed if {@link GPUCurtains#options.watchScroll | watchScroll option} is set to true. Could be called externally as well.\n   * @param scroll - new {@link DOMPosition | scroll values}\n   */\n  updateScrollValues(scroll: DOMPosition = { x: 0, y: 0 }) {\n    this.scrollManager.updateScrollValues(scroll)\n  }\n\n  /**\n   * Get our {@link ScrollManager#delta | scrollManager delta values}\n   * @readonly\n   */\n  get scrollDelta(): DOMPosition {\n    return this.scrollManager.delta\n  }\n\n  /**\n   * Get our {@link ScrollManager#scroll | scrollManager scroll values}\n   * @readonly\n   */\n  get scrollValues(): DOMPosition {\n    return this.scrollManager.scroll\n  }\n\n  /* EVENT LISTENERS */\n\n  /**\n   * Set the resize and scroll event listeners\n   */\n  initEvents() {\n    resizeManager.useObserver(this.options.autoResize)\n\n    this.initScroll()\n  }\n\n  /* EVENTS */\n\n  /**\n   * Called at each render frame\n   * @param callback - callback to run at each render\n   * @returns - our {@link GPUCurtains}\n   */\n  onRender(callback: () => void): GPUCurtains {\n    if (callback) {\n      this._onRenderCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Called each time the {@link ScrollManager#scroll | scrollManager scroll values} changed\n   * @param callback - callback to run each time the {@link ScrollManager#scroll | scrollManager scroll values} changed\n   * @returns - our {@link GPUCurtains}\n   */\n  onScroll(callback: () => void): GPUCurtains {\n    if (callback) {\n      this._onScrollCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Called if there's been an error while trying to create the {@link GPUDeviceManager#device | device}\n   * @param callback - callback to run if there's been an error while trying to create the {@link GPUDeviceManager#device | device}\n   * @returns - our {@link GPUCurtains}\n   */\n  onError(callback: () => void): GPUCurtains {\n    if (callback) {\n      this._onErrorCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Called whenever the {@link GPUDeviceManager#device | device} is lost\n   * @param callback - callback to run whenever the {@link GPUDeviceManager#device | device} is lost\n   * @returns - our {@link GPUCurtains}\n   */\n  onContextLost(callback: (info?: GPUDeviceLostInfo) => void): GPUCurtains {\n    if (callback) {\n      this._onContextLostCallback = callback\n    }\n\n    return this\n  }\n\n  /**\n   * Create a requestAnimationFrame loop and run it\n   */\n  animate() {\n    this.render()\n    this.animationFrameID = window.requestAnimationFrame(this.animate.bind(this))\n  }\n\n  /**\n   * Render our {@link GPUDeviceManager}\n   */\n  render() {\n    this._onRenderCallback && this._onRenderCallback()\n\n    this.deviceManager.render()\n  }\n\n  /**\n   * Destroy our {@link GPUCurtains} and {@link GPUDeviceManager}\n   */\n  destroy() {\n    if (this.animationFrameID) {\n      window.cancelAnimationFrame(this.animationFrameID)\n    }\n\n    this.deviceManager.destroy()\n    this.scrollManager?.destroy()\n    resizeManager.destroy()\n  }\n}\n"],"names":["container"],"mappings":"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"}