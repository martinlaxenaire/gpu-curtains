{"version":3,"file":"PingPongPlane.mjs","sources":["../../../../src/curtains/meshes/PingPongPlane.ts"],"sourcesContent":["import { isRenderer, Renderer } from '../../core/renderers/utils'\r\nimport { RenderTarget } from '../../core/renderPasses/RenderTarget'\r\nimport { FullscreenPlane } from '../../core/meshes/FullscreenPlane'\r\nimport { GPUCurtains } from '../GPUCurtains'\r\nimport { RenderTexture, RenderTextureParams } from '../../core/textures/RenderTexture'\r\nimport { MeshBaseRenderParams } from '../../core/meshes/mixins/MeshBaseMixin'\r\n\r\n/**\r\n * Used to create a special type of {@link FullscreenPlane} that allows to use the previous frame fragment shader output as an input texture.\r\n *\r\n * @example\r\n * ```javascript\r\n * // set our main GPUCurtains instance\r\n * const gpuCurtains = new GPUCurtains({\r\n *   container: '#canvas' // selector of our WebGPU canvas container\r\n * })\r\n *\r\n * // set the GPU device\r\n * // note this is asynchronous\r\n * await gpuCurtains.setDevice()\r\n *\r\n * // create a PingPongPlane\r\n * const shaderPass = new PingPongPlane(gpuCurtain, {\r\n *   label: 'My ping pong plane',\r\n *   shaders: {\r\n *     fragment: {\r\n *       code: pingPongCode, // assume it is a valid WGSL fragment shader\r\n *     },\r\n *   },\r\n * })\r\n * ```\r\n */\r\nexport class PingPongPlane extends FullscreenPlane {\r\n  /** {@link RenderTarget} content to use as an input */\r\n  outputTarget: RenderTarget\r\n\r\n  /**\r\n   * PingPongPlane constructor\r\n   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link PingPongPlane}\r\n   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link PingPongPlane}\r\n   */\r\n  constructor(renderer: Renderer | GPUCurtains, parameters = {} as MeshBaseRenderParams) {\r\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as Renderer)\r\n\r\n    isRenderer(renderer, parameters.label ? parameters.label + ' PingPongPlane' : 'PingPongPlane')\r\n\r\n    // we will render into a separate texture\r\n    parameters.outputTarget = new RenderTarget(renderer, {\r\n      label: parameters.label ? parameters.label + ' render target' : 'Ping Pong render target',\r\n      useDepth: false,\r\n      ...(parameters.targetFormat && { targetFormat: parameters.targetFormat }),\r\n    })\r\n\r\n    // no blending and depth for ping pong planes\r\n    parameters.transparent = false\r\n    parameters.depth = false\r\n    parameters.label = parameters.label ?? 'PingPongPlane ' + renderer.pingPongPlanes?.length\r\n\r\n    super(renderer, parameters)\r\n\r\n    this.type = 'PingPongPlane'\r\n\r\n    this.createRenderTexture({\r\n      label: parameters.label ? `${parameters.label} render texture` : 'PingPongPlane render texture',\r\n      name: 'renderTexture',\r\n      ...(parameters.targetFormat && { format: parameters.targetFormat }),\r\n    } as RenderTextureParams)\r\n  }\r\n\r\n  /**\r\n   * Get our main {@link RenderTexture}, the one that contains our ping pong content\r\n   * @readonly\r\n   */\r\n  get renderTexture(): RenderTexture | undefined {\r\n    return this.renderTextures.find((texture) => texture.options.name === 'renderTexture')\r\n  }\r\n\r\n  /**\r\n   * Add the {@link PingPongPlane} to the renderer and the {@link core/scenes/Scene.Scene | Scene}\r\n   */\r\n  addToScene() {\r\n    this.renderer.pingPongPlanes.push(this)\r\n\r\n    if (this.autoRender) {\r\n      this.renderer.scene.addPingPongPlane(this)\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove the {@link PingPongPlane} from the renderer and the {@link core/scenes/Scene.Scene | Scene}\r\n   */\r\n  removeFromScene() {\r\n    if (this.outputTarget) {\r\n      this.outputTarget.destroy()\r\n    }\r\n\r\n    if (this.autoRender) {\r\n      this.renderer.scene.removePingPongPlane(this)\r\n    }\r\n\r\n    this.renderer.pingPongPlanes = this.renderer.pingPongPlanes.filter((pPP) => pPP.uuid !== this.uuid)\r\n  }\r\n}\r\n"],"names":[],"mappings":";;;;AAgCO,MAAM,sBAAsB,eAAgB,CAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EASjD,WAAY,CAAA,QAAA,EAAkC,UAAa,GAAA,EAA4B,EAAA;AACrF,IAAY,QAAA,GAAA,QAAA,IAAa,SAAyB,QAAc,IAAA,QAAA,CAAA;AAEhE,IAAA,UAAA,CAAW,UAAU,UAAW,CAAA,KAAA,GAAQ,UAAW,CAAA,KAAA,GAAQ,mBAAmB,eAAe,CAAA,CAAA;AAG7F,IAAW,UAAA,CAAA,YAAA,GAAe,IAAI,YAAA,CAAa,QAAU,EAAA;AAAA,MACnD,KAAO,EAAA,UAAA,CAAW,KAAQ,GAAA,UAAA,CAAW,QAAQ,gBAAmB,GAAA,yBAAA;AAAA,MAChE,QAAU,EAAA,KAAA;AAAA,MACV,GAAI,UAAW,CAAA,YAAA,IAAgB,EAAE,YAAA,EAAc,WAAW,YAAa,EAAA;AAAA,KACxE,CAAA,CAAA;AAGD,IAAA,UAAA,CAAW,WAAc,GAAA,KAAA,CAAA;AACzB,IAAA,UAAA,CAAW,KAAQ,GAAA,KAAA,CAAA;AACnB,IAAA,UAAA,CAAW,KAAQ,GAAA,UAAA,CAAW,KAAS,IAAA,gBAAA,GAAmB,SAAS,cAAgB,EAAA,MAAA,CAAA;AAEnF,IAAA,KAAA,CAAM,UAAU,UAAU,CAAA,CAAA;AAE1B,IAAA,IAAA,CAAK,IAAO,GAAA,eAAA,CAAA;AAEZ,IAAA,IAAA,CAAK,mBAAoB,CAAA;AAAA,MACvB,OAAO,UAAW,CAAA,KAAA,GAAQ,CAAG,EAAA,UAAA,CAAW,KAAK,CAAoB,eAAA,CAAA,GAAA,8BAAA;AAAA,MACjE,IAAM,EAAA,eAAA;AAAA,MACN,GAAI,UAAW,CAAA,YAAA,IAAgB,EAAE,MAAA,EAAQ,WAAW,YAAa,EAAA;AAAA,KAC3C,CAAA,CAAA;AAAA,GAC1B;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,IAAI,aAA2C,GAAA;AAC7C,IAAO,OAAA,IAAA,CAAK,eAAe,IAAK,CAAA,CAAC,YAAY,OAAQ,CAAA,OAAA,CAAQ,SAAS,eAAe,CAAA,CAAA;AAAA,GACvF;AAAA;AAAA;AAAA;AAAA,EAKA,UAAa,GAAA;AACX,IAAK,IAAA,CAAA,QAAA,CAAS,cAAe,CAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAEtC,IAAA,IAAI,KAAK,UAAY,EAAA;AACnB,MAAK,IAAA,CAAA,QAAA,CAAS,KAAM,CAAA,gBAAA,CAAiB,IAAI,CAAA,CAAA;AAAA,KAC3C;AAAA,GACF;AAAA;AAAA;AAAA;AAAA,EAKA,eAAkB,GAAA;AAChB,IAAA,IAAI,KAAK,YAAc,EAAA;AACrB,MAAA,IAAA,CAAK,aAAa,OAAQ,EAAA,CAAA;AAAA,KAC5B;AAEA,IAAA,IAAI,KAAK,UAAY,EAAA;AACnB,MAAK,IAAA,CAAA,QAAA,CAAS,KAAM,CAAA,mBAAA,CAAoB,IAAI,CAAA,CAAA;AAAA,KAC9C;AAEA,IAAK,IAAA,CAAA,QAAA,CAAS,cAAiB,GAAA,IAAA,CAAK,QAAS,CAAA,cAAA,CAAe,MAAO,CAAA,CAAC,GAAQ,KAAA,GAAA,CAAI,IAAS,KAAA,IAAA,CAAK,IAAI,CAAA,CAAA;AAAA,GACpG;AACF;;;;"}