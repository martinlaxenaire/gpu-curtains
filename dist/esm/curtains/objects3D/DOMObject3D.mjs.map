{"version":3,"file":"DOMObject3D.mjs","sources":["../../../../src/curtains/objects3D/DOMObject3D.ts"],"sourcesContent":["import { ProjectedObject3D } from '../../core/objects3D/ProjectedObject3D'\nimport { GPUCurtainsRenderer } from '../renderers/GPUCurtainsRenderer'\nimport { GPUCurtains } from '../GPUCurtains'\nimport { isCurtainsRenderer } from '../../core/renderers/utils'\nimport { DOMElement, DOMElementBoundingRect, DOMElementParams, DOMPosition, RectBBox } from '../../core/DOM/DOMElement'\nimport { Vec3 } from '../../math/Vec3'\nimport { Object3DTransforms } from '../../core/objects3D/Object3D'\n\n/** Defines the {@link DOMObject3D} bounding boxes in both document and world spaces */\nexport interface DOMObject3DSize {\n  /** The {@link DOMObject3D} bounding box in world space */\n  world: RectBBox\n  /** The {@link DOMObject3D} bounding box in document space */\n  document: RectBBox\n}\n\n/**\n * Defines all necessary {@link Vec3 | vectors}/{@link math/Quat.Quat | quaternions} to compute a 3D {@link math/Mat4.Mat4 | model matrix} based on a DOM {@link HTMLElement}\n */\nexport interface DOMObject3DTransforms extends Omit<Object3DTransforms, 'origin' | 'position'> {\n  /** Transformation origin object */\n  origin: {\n    /** Transformation origin {@link Vec3 | vector} relative to the {@link DOMObject3D} */\n    model: Vec3\n    /** Transformation origin {@link Vec3 | vector} relative to the 3D world */\n    world: Vec3\n  }\n  /** Position object */\n  position: {\n    /** Position {@link Vec3 | vector} relative to the 3D world */\n    world: Vec3\n    /** Additional translation {@link Vec3 | vector} relative to the DOM document */\n    document: Vec3\n  }\n}\n\n/**\n * Parameters used to create a {@link DOMObject3D}\n */\nexport interface DOMObject3DParams {\n  /** Whether to automatically update the {@link DOMObject3D} document and world positions on scroll */\n  watchScroll?: boolean\n}\n\n/**\n * This special kind of {@link ProjectedObject3D} uses an {@link HTMLElement} to convert the corresponding X and Y {@link DOMObject3D#scale | scale} and {@link DOMObject3D#position | position} relative to the 3D world space.\n *\n * Internally used by the {@link curtains/meshes/DOMMesh.DOMMesh | DOMMesh} and {@link curtains/meshes/Plane.Plane | Plane}\n */\nexport class DOMObject3D extends ProjectedObject3D {\n  /** {@link GPUCurtainsRenderer} used to create this {@link DOMObject3D} */\n  renderer: GPUCurtainsRenderer\n\n  /** Defines the {@link DOMObject3D} bounding boxes in both document and world spaces */\n  size: DOMObject3DSize\n  /** {@link DOMElement} used to track the given {@link HTMLElement} size change */\n  domElement: DOMElement\n\n  /** Whether to automatically update the {@link DOMObject3D} document and world positions on scroll */\n  watchScroll: boolean\n\n  /** {@link DOMObject3DTransforms | Transformation object} of the {@link DOMObject3D} */\n  transforms: DOMObject3DTransforms\n\n  /** Private {@link Vec3 | vector} used to keep track of the actual {@link DOMObject3DTransforms#position.world | world position} accounting the {@link DOMObject3DTransforms#position.document | additional document translation} converted into world space */\n  #DOMObjectWorldPosition: Vec3 = new Vec3()\n  /** Private {@link Vec3 | vector} used to keep track of the actual {@link DOMObject3D} world scale accounting the {@link DOMObject3D#size.world | DOMObject3D world size} */\n  #DOMObjectWorldScale: Vec3 = new Vec3()\n\n  /**\n   * DOMObject3D constructor\n   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link DOMObject3D}\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link DOMObject3D}\n   * @param parameters - {@link DOMObject3DParams | parameters} used to create this {@link DOMObject3D}\n   */\n  constructor(\n    renderer: GPUCurtainsRenderer | GPUCurtains,\n    element: DOMElementParams['element'],\n    parameters: DOMObject3DParams\n  ) {\n    super(renderer)\n\n    // we could pass our curtains object OR our curtains renderer object\n    renderer = (renderer && (renderer as GPUCurtains).renderer) || (renderer as GPUCurtainsRenderer)\n\n    isCurtainsRenderer(renderer, 'DOM3DObject')\n\n    this.renderer = renderer\n\n    this.size = {\n      world: {\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n      },\n      document: {\n        width: 0,\n        height: 0,\n        top: 0,\n        left: 0,\n      },\n    }\n\n    this.watchScroll = parameters.watchScroll\n\n    this.camera = this.renderer.camera\n\n    this.setDOMElement(element)\n  }\n\n  /**\n   * Set the {@link domElement | DOM Element}\n   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\n   */\n  setDOMElement(element: DOMElementParams['element']) {\n    this.domElement = new DOMElement({\n      element,\n      onSizeChanged: (boundingRect) => this.resize(boundingRect),\n      onPositionChanged: (boundingRect) => this.onPositionChanged(boundingRect),\n    })\n  }\n\n  /**\n   * Update size and position when the {@link domElement | DOM Element} position changed\n   * @param boundingRect - the new bounding rectangle\n   */\n  onPositionChanged(boundingRect?: DOMElementBoundingRect | null) {\n    if (this.watchScroll) {\n      this.size.document = boundingRect ?? this.domElement.element.getBoundingClientRect()\n      this.updateSizeAndPosition()\n    }\n  }\n\n  /**\n   * Reset the {@link domElement | DOMElement}\n   * @param element - the new {@link HTMLElement} or string representing an {@link HTMLElement} selector to use\n   */\n  resetDOMElement(element: string | HTMLElement) {\n    if (this.domElement) {\n      this.domElement.destroy()\n    }\n\n    this.setDOMElement(element)\n  }\n\n  /**\n   * Update the {@link DOMObject3D} sizes and position\n   */\n  updateSizeAndPosition() {\n    this.setWorldSizes()\n    this.applyPosition()\n\n    this.shouldUpdateModelMatrix()\n  }\n\n  /**\n   * Update the {@link DOMObject3D} sizes, position and projection\n   */\n  shouldUpdateMatrixStack() {\n    this.updateSizeAndPosition()\n\n    super.shouldUpdateMatrixStack()\n  }\n\n  /**\n   * Resize the {@link DOMObject3D}\n   * @param boundingRect - new {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}\n   */\n  resize(boundingRect?: DOMElementBoundingRect | null) {\n    if (!boundingRect && (!this.domElement || this.domElement?.isResizing)) return\n\n    this.size.document = boundingRect ?? this.domElement.element.getBoundingClientRect()\n    this.shouldUpdateMatrixStack()\n  }\n\n  /* BOUNDING BOXES GETTERS */\n\n  /**\n   * Get the {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}\n   * @readonly\n   */\n  get boundingRect(): DOMElementBoundingRect {\n    return this.domElement.boundingRect\n  }\n\n  /* TRANSFOMS */\n\n  /**\n   * Set our transforms properties and {@link Vec3#onChange | onChange vector} callbacks\n   */\n  setTransforms() {\n    super.setTransforms()\n\n    // reset our model transform origin to reflect CSS transform origins\n    this.transforms.origin.model.set(0.5, 0.5, 0)\n\n    this.transforms.origin.world = new Vec3()\n    this.transforms.position.document = new Vec3()\n\n    this.documentPosition.onChange(() => this.applyPosition())\n    this.transformOrigin.onChange(() => this.setWorldTransformOrigin())\n  }\n\n  /**\n   * Get the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}\n   */\n  get documentPosition(): Vec3 {\n    return this.transforms.position.document\n  }\n\n  /**\n   * Set the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}\n   * @param value - additional translation relative to the document to apply\n   */\n  set documentPosition(value: Vec3) {\n    this.transforms.position.document = value\n    this.applyPosition()\n  }\n\n  /**\n   * Get the {@link domElement | DOM element} scale in world space\n   * @readonly\n   */\n  get DOMObjectWorldScale(): Vec3 {\n    return this.#DOMObjectWorldScale.clone()\n  }\n\n  /**\n   * Get the {@link DOMObject3D} scale in world space (accounting for {@link scale})\n   * @readonly\n   */\n  get worldScale(): Vec3 {\n    return this.DOMObjectWorldScale.multiply(this.scale)\n  }\n\n  /**\n   * Get the {@link DOMObject3D} position in world space\n   * @readonly\n   */\n  get worldPosition(): Vec3 {\n    return this.#DOMObjectWorldPosition.clone()\n  }\n\n  /**\n   * Get the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}\n   */\n  get transformOrigin(): Vec3 {\n    return this.transforms.origin.model\n  }\n\n  /**\n   * Set the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}\n   * @param value - new transform origin\n   */\n  set transformOrigin(value: Vec3) {\n    this.transforms.origin.model = value\n    this.setWorldTransformOrigin()\n  }\n\n  /**\n   * Get the {@link DOMObject3D} transform origin in world space\n   */\n  get worldTransformOrigin(): Vec3 {\n    return this.transforms.origin.world\n  }\n\n  /**\n   * Set the {@link DOMObject3D} transform origin in world space\n   * @param value - new world space transform origin\n   */\n  set worldTransformOrigin(value: Vec3) {\n    this.transforms.origin.world = value\n  }\n\n  /**\n   * Set the {@link DOMObject3D} world position using its world position and document translation converted to world space\n   */\n  applyPosition() {\n    this.applyDocumentPosition()\n    super.applyPosition()\n  }\n\n  /**\n   * Compute the {@link DOMObject3D} world position using its world position and document translation converted to world space\n   */\n  applyDocumentPosition() {\n    // avoid unnecessary calculations if we don't have a users set relative position\n    let worldPosition = new Vec3(0, 0, 0)\n    if (!this.documentPosition.equals(worldPosition)) {\n      worldPosition = this.documentToWorldSpace(this.documentPosition)\n    }\n\n    this.#DOMObjectWorldPosition.set(\n      this.position.x + this.size.world.left + worldPosition.x,\n      this.position.y + this.size.world.top + worldPosition.y,\n      this.position.z + this.documentPosition.z / this.camera.CSSPerspective\n    )\n  }\n\n  /**\n   * Apply the transform origin and set the {@link DOMObject3D} world transform origin\n   */\n  applyTransformOrigin() {\n    if (!this.size) return\n\n    this.setWorldTransformOrigin()\n\n    super.applyTransformOrigin()\n  }\n\n  /* MATRICES */\n\n  /**\n   * Update the {@link modelMatrix | model matrix} accounting the {@link DOMObject3D} world position and {@link DOMObject3D} world scale\n   */\n  updateModelMatrix() {\n    // override for this special case\n    // compose our model transformation matrix from custom origin\n    this.modelMatrix.composeFromOrigin(\n      this.#DOMObjectWorldPosition,\n      this.quaternion,\n      this.scale,\n      this.worldTransformOrigin\n    )\n\n    // we need to scale our meshes, from a square to a right sized rectangle\n    // we're doing this after our transformation matrix because this scale transformation always have the same origin\n    this.modelMatrix.scale(this.#DOMObjectWorldScale)\n\n    this.shouldUpdateWorldMatrix()\n  }\n\n  /**\n   * Convert a document position {@link Vec3 | vector} to a world position {@link Vec3 | vector}\n   * @param vector - document position {@link Vec3 | vector} converted to world space\n   */\n  documentToWorldSpace(vector: Vec3 = new Vec3()): Vec3 {\n    return new Vec3(\n      ((vector.x * this.renderer.pixelRatio) / this.renderer.boundingRect.width) * this.camera.screenRatio.width,\n      -((vector.y * this.renderer.pixelRatio) / this.renderer.boundingRect.height) * this.camera.screenRatio.height,\n      vector.z\n    )\n  }\n\n  /**\n   * Set the {@link DOMObject3D#size.world | world size} and set the {@link DOMObject3D} world transform origin\n   */\n  setWorldSizes() {\n    const containerBoundingRect = this.renderer.boundingRect\n\n    // dimensions and positions of our plane in the document and clip spaces\n    // don't forget positions in webgl space are referring to the center of our plane and canvas\n    const planeCenter = {\n      x: this.size.document.width / 2 + this.size.document.left,\n      y: this.size.document.height / 2 + this.size.document.top,\n    }\n\n    const containerCenter = {\n      x: containerBoundingRect.width / 2 + containerBoundingRect.left,\n      y: containerBoundingRect.height / 2 + containerBoundingRect.top,\n    }\n\n    // our DOM object world size\n    // since our vertices values range from -1 to 1, we need to scale it relatively to our canvas\n    // to display an accurately sized object\n    this.size.world = {\n      width: ((this.size.document.width / containerBoundingRect.width) * this.camera.screenRatio.width) / 2,\n      height: ((this.size.document.height / containerBoundingRect.height) * this.camera.screenRatio.height) / 2,\n      top: ((containerCenter.y - planeCenter.y) / containerBoundingRect.height) * this.camera.screenRatio.height,\n      left: ((planeCenter.x - containerCenter.x) / containerBoundingRect.width) * this.camera.screenRatio.width,\n    }\n\n    this.#DOMObjectWorldScale.set(this.size.world.width, this.size.world.height, 1)\n\n    this.setWorldTransformOrigin()\n  }\n\n  /**\n   * Set the {@link DOMObject3D} world transform origin and tell the matrices to update\n   */\n  setWorldTransformOrigin() {\n    // set transformation origin relative to world space as well\n    this.transforms.origin.world = new Vec3(\n      (this.transformOrigin.x * 2 - 1) * // between -1 and 1\n        this.size.world.width,\n      -(this.transformOrigin.y * 2 - 1) * // between -1 and 1\n        this.size.world.height,\n      this.transformOrigin.z\n    )\n\n    this.shouldUpdateModelMatrix()\n    this.shouldUpdateProjectionMatrixStack()\n  }\n\n  /**\n   * Update the {@link domElement | DOM Element} scroll position\n   * @param delta - last {@link utils/ScrollManager.ScrollManager.delta | scroll delta values}\n   */\n  updateScrollPosition(delta: DOMPosition = { x: 0, y: 0 }) {\n    // actually update the plane position only if last X delta or last Y delta is not equal to 0\n    if (delta.x || delta.y) {\n      // set new positions based on our delta without triggering reflow\n      this.domElement.updateScrollPosition(delta)\n    }\n  }\n\n  /**\n   * Destroy our {@link DOMObject3D}\n   */\n  destroy() {\n    this.domElement?.destroy()\n  }\n}\n"],"names":[],"mappings":"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"}