{"version":3,"file":"debug.mjs","sources":["../../../src/utils/debug.ts"],"sourcesContent":["import { WritableBufferBinding } from '../core/bindings/WritableBufferBinding'\r\nimport { Renderer } from '../core/renderers/utils'\r\n\r\n/**\r\n * Logs all the main commands executed during each {@link core/scenes/Scene.Scene#render | Scene render} calls.\r\n */\r\nexport const logSceneCommands = (renderer: Renderer) => {\r\n  const { scene } = renderer\r\n\r\n  if (!scene) return\r\n\r\n  const renderCommands = []\r\n\r\n  scene.computePassEntries.forEach((computePass) => {\r\n    renderCommands.push({\r\n      command: 'Render ComputePass',\r\n      content: computePass.options.label,\r\n    })\r\n\r\n    computePass.material.bindGroups.forEach((bindGroup) => {\r\n      bindGroup.bufferBindings.forEach((binding: WritableBufferBinding) => {\r\n        if (binding.shouldCopyResult) {\r\n          renderCommands.push({\r\n            command: `Copy buffer to buffer`,\r\n            source: `${binding.name} buffer`,\r\n            destination: `${binding.name} result buffer`,\r\n          })\r\n        }\r\n      })\r\n    })\r\n  })\r\n\r\n  for (const renderPassEntryType in scene.renderPassEntries) {\r\n    let passDrawnCount = 0\r\n\r\n    scene.renderPassEntries[renderPassEntryType].forEach((renderPassEntry) => {\r\n      // early bail if there's nothing to draw\r\n      if (!scene.getRenderPassEntryLength(renderPassEntry)) return\r\n\r\n      const destination = !renderPassEntry.renderPass.options.useColorAttachments\r\n        ? undefined\r\n        : renderPassEntry.renderTexture\r\n        ? `${renderPassEntry.renderTexture.options.label}`\r\n        : renderPassEntry.renderPass.options.colorAttachments.length > 1\r\n        ? 'Multiple render target'\r\n        : 'Context current texture'\r\n\r\n      let descriptor = renderPassEntry.renderPass.options.label\r\n\r\n      const operations = {\r\n        loadOp: renderPassEntry.renderPass.options.useColorAttachments\r\n          ? renderPassEntryType === 'screen' && passDrawnCount > 0\r\n            ? 'load'\r\n            : renderPassEntry.renderPass.options.loadOp\r\n          : undefined,\r\n        depthLoadOp: undefined,\r\n        sampleCount: renderPassEntry.renderPass.options.sampleCount,\r\n      }\r\n\r\n      if (renderPassEntry.renderPass.options.useDepth) {\r\n        operations.depthLoadOp = renderPassEntry.renderPass.options.depthLoadOp\r\n      }\r\n\r\n      passDrawnCount++\r\n\r\n      if (renderPassEntry.element) {\r\n        if (\r\n          renderPassEntry.element.type === 'ShaderPass' &&\r\n          !(renderPassEntry.element.inputTarget || renderPassEntry.element.outputTarget)\r\n        ) {\r\n          renderCommands.push({\r\n            command: `Copy texture to texture`,\r\n            source: destination,\r\n            destination: `${renderPassEntry.element.options.label} renderTexture`,\r\n          })\r\n\r\n          operations.loadOp = 'clear'\r\n        }\r\n\r\n        descriptor += ' ' + JSON.stringify(operations)\r\n\r\n        renderCommands.push({\r\n          command: `Render ${renderPassEntry.element.type}`,\r\n          source: renderPassEntry.element.options.label,\r\n          destination,\r\n          descriptor,\r\n        })\r\n\r\n        if (\r\n          renderPassEntry.element.type === 'ShaderPass' &&\r\n          !renderPassEntry.element.outputTarget &&\r\n          renderPassEntry.element.options.copyOutputToRenderTexture\r\n        ) {\r\n          renderCommands.push({\r\n            command: `Copy texture to texture`,\r\n            source: destination,\r\n            destination: `${renderPassEntry.element.options.label} renderTexture`,\r\n          })\r\n        } else if (renderPassEntry.element.type === 'PingPongPlane') {\r\n          renderCommands.push({\r\n            command: `Copy texture to texture`,\r\n            source: destination,\r\n            destination: `${renderPassEntry.element.renderTexture.options.label}`,\r\n          })\r\n        }\r\n      } else if (renderPassEntry.stack) {\r\n        descriptor += ' ' + JSON.stringify(operations)\r\n\r\n        for (const stackType in renderPassEntry.stack) {\r\n          for (const objectType in renderPassEntry.stack[stackType]) {\r\n            if (renderPassEntry.stack[stackType][objectType].length) {\r\n              renderCommands.push({\r\n                command: `Render stack (${stackType} ${objectType} objects)`,\r\n                source: renderPassEntry.stack[stackType][objectType],\r\n                destination,\r\n                descriptor,\r\n              })\r\n            }\r\n          }\r\n        }\r\n      }\r\n    })\r\n  }\r\n\r\n  console.table(renderCommands)\r\n}\r\n"],"names":[],"mappings":"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"}