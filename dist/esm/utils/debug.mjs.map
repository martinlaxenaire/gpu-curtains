{"version":3,"file":"debug.mjs","sources":["../../../src/utils/debug.ts"],"sourcesContent":["import { WritableBufferBinding } from '../core/bindings/WritableBufferBinding'\nimport { Renderer } from '../core/renderers/utils'\n\n/**\n * Logs all the main commands executed during each {@link core/scenes/Scene.Scene#render | Scene render} calls.\n */\nexport const logSceneCommands = (renderer: Renderer) => {\n  const { scene } = renderer\n\n  if (!scene) return\n\n  const renderCommands = []\n\n  scene.computePassEntries.forEach((computePass) => {\n    renderCommands.push({\n      command: 'Render ComputePass',\n      content: computePass.options.label,\n    })\n\n    computePass.material.bindGroups.forEach((bindGroup) => {\n      bindGroup.bufferBindings.forEach((binding: WritableBufferBinding) => {\n        if (binding.shouldCopyResult) {\n          renderCommands.push({\n            command: `Copy buffer to buffer`,\n            source: `${binding.name} buffer`,\n            destination: `${binding.name} result buffer`,\n          })\n        }\n      })\n    })\n  })\n\n  for (const renderPassEntryType in scene.renderPassEntries) {\n    let passDrawnCount = 0\n\n    scene.renderPassEntries[renderPassEntryType].forEach((renderPassEntry) => {\n      // early bail if there's nothing to draw\n      if (!scene.getRenderPassEntryLength(renderPassEntry)) return\n\n      const destination = !renderPassEntry.renderPass.options.useColorAttachments\n        ? undefined\n        : renderPassEntry.renderPass.options.colorAttachments.length === 0 &&\n          renderPassEntry.renderPass.options.useDepth\n        ? `${renderPassEntry.renderTexture.options.label} depth pass`\n        : renderPassEntry.renderPass.options.colorAttachments.length > 1\n        ? `${renderPassEntry.renderTexture.options.label} multiple targets`\n        : renderPassEntry.renderTexture\n        ? `${renderPassEntry.renderTexture.options.label}`\n        : 'Context current texture'\n\n      let descriptor = renderPassEntry.renderPass.options.label\n\n      const operations = {\n        loadOp: renderPassEntry.renderPass.options.useColorAttachments\n          ? renderPassEntryType === 'screen' && passDrawnCount > 0\n            ? 'load'\n            : renderPassEntry.renderPass.options.loadOp\n          : undefined,\n        depthLoadOp: undefined,\n        sampleCount: renderPassEntry.renderPass.options.sampleCount,\n        ...(renderPassEntry.renderPass.options.qualityRatio !== 1 && {\n          qualityRatio: renderPassEntry.renderPass.options.qualityRatio,\n        }),\n      }\n\n      if (renderPassEntry.renderPass.options.useDepth) {\n        operations.depthLoadOp = renderPassEntry.renderPass.options.depthLoadOp\n      }\n\n      passDrawnCount++\n\n      if (renderPassEntry.element) {\n        if (\n          renderPassEntry.element.type === 'ShaderPass' &&\n          !(renderPassEntry.element.inputTarget || renderPassEntry.element.outputTarget)\n        ) {\n          renderCommands.push({\n            command: `Copy texture to texture`,\n            source: destination,\n            destination: `${renderPassEntry.element.options.label} renderTexture`,\n          })\n\n          operations.loadOp = 'clear'\n        }\n\n        descriptor += ' ' + JSON.stringify(operations)\n\n        renderCommands.push({\n          command: `Render ${renderPassEntry.element.type}`,\n          source: renderPassEntry.element.options.label,\n          destination,\n          descriptor,\n        })\n\n        if (\n          renderPassEntry.element.type === 'ShaderPass' &&\n          !renderPassEntry.element.outputTarget &&\n          renderPassEntry.element.options.copyOutputToRenderTexture\n        ) {\n          renderCommands.push({\n            command: `Copy texture to texture`,\n            source: destination,\n            destination: `${renderPassEntry.element.options.label} renderTexture`,\n          })\n        } else if (renderPassEntry.element.type === 'PingPongPlane') {\n          renderCommands.push({\n            command: `Copy texture to texture`,\n            source: destination,\n            destination: `${renderPassEntry.element.renderTexture.options.label}`,\n          })\n        }\n      } else if (renderPassEntry.stack) {\n        descriptor += ' ' + JSON.stringify(operations)\n\n        for (const stackType in renderPassEntry.stack) {\n          for (const objectType in renderPassEntry.stack[stackType]) {\n            if (renderPassEntry.stack[stackType][objectType].length) {\n              renderCommands.push({\n                command: `Render stack (${stackType} ${objectType} objects)`,\n                source: renderPassEntry.stack[stackType][objectType],\n                destination,\n                descriptor,\n              })\n            }\n          }\n        }\n      }\n    })\n  }\n\n  console.table(renderCommands)\n}\n"],"names":[],"mappings":"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"}