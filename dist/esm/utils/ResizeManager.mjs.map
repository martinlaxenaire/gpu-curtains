{"version":3,"file":"ResizeManager.mjs","sources":["../../../src/utils/ResizeManager.ts"],"sourcesContent":["import { DOMElement } from '../core/DOM/DOMElement'\n\n/**\n * Defines a {@link ResizeManager} entry\n */\nexport interface ResizeManagerEntry {\n  /** {@link HTMLElement} to track */\n  element: DOMElement['element'] | Element\n  /** Priority in which to call the callback function */\n  priority?: number\n  /** Function to execute when the {@link element} is resized */\n  callback: () => void | null\n}\n\n/**\n * Tiny wrapper around {@link ResizeObserver} used to execute callbacks when given {@link HTMLElement} size changes.\n */\nexport class ResizeManager {\n  /** Whether we should add elements to our {@link resizeObserver} or not */\n  shouldWatch: boolean\n  /** Array of {@link ResizeManagerEntry | entries} */\n  entries: ResizeManagerEntry[]\n  /** {@link ResizeObserver} used */\n  resizeObserver: ResizeObserver\n\n  /**\n   * ResizeManager constructor\n   */\n  constructor() {\n    // default to true\n    this.shouldWatch = true\n\n    this.entries = []\n\n    this.resizeObserver = new ResizeObserver((observedEntries) => {\n      // get all entries corresponding to that element, and sort them by priority\n      const allEntries = observedEntries\n        .map((observedEntry) => {\n          return this.entries.filter((e) => e.element.isSameNode(observedEntry.target))\n        })\n        .flat()\n        .sort((a, b) => b.priority - a.priority)\n\n      allEntries?.forEach((entry) => {\n        if (entry && entry.callback) {\n          entry.callback()\n        }\n      })\n    })\n  }\n\n  /**\n   * Set {@link shouldWatch}\n   * @param shouldWatch - whether to watch or not\n   */\n  useObserver(shouldWatch = true) {\n    this.shouldWatch = shouldWatch\n  }\n\n  /**\n   * Track an {@link HTMLElement} size change and execute a callback function when it happens\n   * @param entry - {@link ResizeManagerEntry | entry} to watch\n   */\n  observe({ element, priority, callback }: ResizeManagerEntry) {\n    if (!element || !this.shouldWatch) return\n\n    this.resizeObserver.observe(element)\n\n    const entry = {\n      element,\n      priority,\n      callback,\n    }\n\n    this.entries.push(entry)\n  }\n\n  /**\n   * Unobserve an {@link HTMLElement} and remove it from our {@link entries} array\n   * @param element - {@link HTMLElement} to unobserve\n   */\n  unobserve(element: DOMElement['element'] | Element) {\n    this.resizeObserver.unobserve(element)\n    this.entries = this.entries.filter((e) => !e.element.isSameNode(element))\n  }\n\n  /**\n   * Destroy our {@link ResizeManager}\n   */\n  destroy() {\n    this.resizeObserver.disconnect()\n  }\n}\n\n/** @exports @const resizeManager - {@link ResizeManager} class object */\nexport const resizeManager = new ResizeManager() as ResizeManager\n"],"names":[],"mappings":"AAiBO,MAAM,aAAc,CAAA;AAAA;AAAA;AAAA;AAAA,EAWzB,WAAc,GAAA;AAEZ,IAAA,IAAA,CAAK,WAAc,GAAA,IAAA,CAAA;AAEnB,IAAA,IAAA,CAAK,UAAU,EAAC,CAAA;AAEhB,IAAA,IAAA,CAAK,cAAiB,GAAA,IAAI,cAAe,CAAA,CAAC,eAAoB,KAAA;AAE5D,MAAA,MAAM,UAAa,GAAA,eAAA,CAChB,GAAI,CAAA,CAAC,aAAkB,KAAA;AACtB,QAAO,OAAA,IAAA,CAAK,OAAQ,CAAA,MAAA,CAAO,CAAC,CAAA,KAAM,EAAE,OAAQ,CAAA,UAAA,CAAW,aAAc,CAAA,MAAM,CAAC,CAAA,CAAA;AAAA,OAC7E,CACA,CAAA,IAAA,EACA,CAAA,IAAA,CAAK,CAAC,CAAA,EAAG,CAAM,KAAA,CAAA,CAAE,QAAW,GAAA,CAAA,CAAE,QAAQ,CAAA,CAAA;AAEzC,MAAY,UAAA,EAAA,OAAA,CAAQ,CAAC,KAAU,KAAA;AAC7B,QAAI,IAAA,KAAA,IAAS,MAAM,QAAU,EAAA;AAC3B,UAAA,KAAA,CAAM,QAAS,EAAA,CAAA;AAAA,SACjB;AAAA,OACD,CAAA,CAAA;AAAA,KACF,CAAA,CAAA;AAAA,GACH;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,WAAA,CAAY,cAAc,IAAM,EAAA;AAC9B,IAAA,IAAA,CAAK,WAAc,GAAA,WAAA,CAAA;AAAA,GACrB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,OAAQ,CAAA,EAAE,OAAS,EAAA,QAAA,EAAU,UAAgC,EAAA;AAC3D,IAAI,IAAA,CAAC,OAAW,IAAA,CAAC,IAAK,CAAA,WAAA;AAAa,MAAA,OAAA;AAEnC,IAAK,IAAA,CAAA,cAAA,CAAe,QAAQ,OAAO,CAAA,CAAA;AAEnC,IAAA,MAAM,KAAQ,GAAA;AAAA,MACZ,OAAA;AAAA,MACA,QAAA;AAAA,MACA,QAAA;AAAA,KACF,CAAA;AAEA,IAAK,IAAA,CAAA,OAAA,CAAQ,KAAK,KAAK,CAAA,CAAA;AAAA,GACzB;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,UAAU,OAA0C,EAAA;AAClD,IAAK,IAAA,CAAA,cAAA,CAAe,UAAU,OAAO,CAAA,CAAA;AACrC,IAAK,IAAA,CAAA,OAAA,GAAU,IAAK,CAAA,OAAA,CAAQ,MAAO,CAAA,CAAC,CAAM,KAAA,CAAC,CAAE,CAAA,OAAA,CAAQ,UAAW,CAAA,OAAO,CAAC,CAAA,CAAA;AAAA,GAC1E;AAAA;AAAA;AAAA;AAAA,EAKA,OAAU,GAAA;AACR,IAAA,IAAA,CAAK,eAAe,UAAW,EAAA,CAAA;AAAA,GACjC;AACF,CAAA;AAGa,MAAA,aAAA,GAAgB,IAAI,aAAc;;;;"}