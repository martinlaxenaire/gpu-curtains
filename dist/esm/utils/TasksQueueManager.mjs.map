{"version":3,"file":"TasksQueueManager.mjs","sources":["../../../src/utils/TasksQueueManager.ts"],"sourcesContent":["/** Defines a task queue item */\nexport interface TaskQueueItem {\n  /** Unique id of the task queue item */\n  id: number\n  /** Priority order in the {@link TasksQueueManager#queue | tasks queue array} */\n  order: number\n  /** Callback to execute */\n  callback: (args?: any) => void\n  /** Whether to execute the task only once and them automatically remove it from the {@link TasksQueueManager#queue | tasks queue array} */\n  once: boolean\n}\n\n/** Parameters used to add a task to the {@link TasksQueueManager#queue | tasks queue array} */\nexport type TaskQueueItemParams = Partial<Omit<TaskQueueItem, 'id' | 'callback'>>\n\n/**\n * Used to keep track of a bunch of callbacks and execute them in the right order when needed\n */\nexport class TasksQueueManager {\n  /** Array of {@link TaskQueueItem | task queue item} to execute */\n  queue: TaskQueueItem[]\n  /** Private number to assign a unique id to each {@link TaskQueueItem | task queue item} */\n  #taskCount = 0\n\n  /**\n   * TaskQueueManager constructor\n   */\n  constructor() {\n    this.queue = []\n  }\n\n  /**\n   * Add a {@link TaskQueueItem | task queue item} to the queue\n   * @param callback - callback to add to the {@link TaskQueueItem | task queue item}\n   * @param parameters - {@link TaskQueueItemParams | parameters} of the {@link TaskQueueItem | task queue item} to add\n   * @returns - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item}, useful to later remove the task if needed\n   */\n  add(\n    callback: TaskQueueItem['callback'] = (args?: any) => {\n      /* allow empty callbacks */\n    },\n    { order = this.queue.length, once = false } = {} as TaskQueueItemParams\n  ): TaskQueueItem['id'] {\n    const task = {\n      callback,\n      order,\n      once,\n      id: this.#taskCount,\n    }\n\n    // increment id\n    this.#taskCount++\n\n    this.queue.push(task)\n    this.queue.sort((a, b) => {\n      return a.order - b.order\n    })\n\n    return task.id\n  }\n\n  /**\n   * Remove a {@link TaskQueueItem | task queue item} from the queue\n   * @param taskId - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item} to remove\n   */\n  remove(taskId = 0) {\n    this.queue = this.queue.filter((task) => task.id !== taskId)\n  }\n\n  /**\n   * Execute the {@link TasksQueueManager#queue | tasks queue array}\n   */\n  execute(args?: any) {\n    this.queue.forEach((task) => {\n      task.callback(args)\n\n      // if it was a one time callback, remove it\n      if (task.once) {\n        this.remove(task.id)\n      }\n    })\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,IAAA,UAAA,CAAA;AAkBO,MAAM,iBAAkB,CAAA;AAAA;AAAA;AAAA;AAAA,EAS7B,WAAc,GAAA;AALd;AAAA,IAAa,YAAA,CAAA,IAAA,EAAA,UAAA,EAAA,CAAA,CAAA,CAAA;AAMX,IAAA,IAAA,CAAK,QAAQ,EAAC,CAAA;AAAA,GAChB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAQA,GAAA,CACE,QAAsC,GAAA,CAAC,IAAe,KAAA;AAAA,GAEtD,EACA,EAAE,KAAA,GAAQ,IAAK,CAAA,KAAA,CAAM,QAAQ,IAAO,GAAA,KAAA,EAAU,GAAA,EACzB,EAAA;AACrB,IAAA,MAAM,IAAO,GAAA;AAAA,MACX,QAAA;AAAA,MACA,KAAA;AAAA,MACA,IAAA;AAAA,MACA,IAAI,YAAK,CAAA,IAAA,EAAA,UAAA,CAAA;AAAA,KACX,CAAA;AAGA,IAAA,gBAAA,CAAA,IAAA,EAAK,UAAL,CAAA,CAAA,CAAA,EAAA,CAAA;AAEA,IAAK,IAAA,CAAA,KAAA,CAAM,KAAK,IAAI,CAAA,CAAA;AACpB,IAAA,IAAA,CAAK,KAAM,CAAA,IAAA,CAAK,CAAC,CAAA,EAAG,CAAM,KAAA;AACxB,MAAO,OAAA,CAAA,CAAE,QAAQ,CAAE,CAAA,KAAA,CAAA;AAAA,KACpB,CAAA,CAAA;AAED,IAAA,OAAO,IAAK,CAAA,EAAA,CAAA;AAAA,GACd;AAAA;AAAA;AAAA;AAAA;AAAA,EAMA,MAAA,CAAO,SAAS,CAAG,EAAA;AACjB,IAAK,IAAA,CAAA,KAAA,GAAQ,KAAK,KAAM,CAAA,MAAA,CAAO,CAAC,IAAS,KAAA,IAAA,CAAK,OAAO,MAAM,CAAA,CAAA;AAAA,GAC7D;AAAA;AAAA;AAAA;AAAA,EAKA,QAAQ,IAAY,EAAA;AAClB,IAAK,IAAA,CAAA,KAAA,CAAM,OAAQ,CAAA,CAAC,IAAS,KAAA;AAC3B,MAAA,IAAA,CAAK,SAAS,IAAI,CAAA,CAAA;AAGlB,MAAA,IAAI,KAAK,IAAM,EAAA;AACb,QAAK,IAAA,CAAA,MAAA,CAAO,KAAK,EAAE,CAAA,CAAA;AAAA,OACrB;AAAA,KACD,CAAA,CAAA;AAAA,GACH;AACF,CAAA;AA5DE,UAAA,GAAA,IAAA,OAAA,EAAA;;;;"}