export declare const common = "\nstruct ReflectedLight {\n  directDiffuse: vec3f,\n  directSpecular: vec3f,\n  indirectDiffuse: vec3f,\n  indirectSpecular: vec3f,\n}\n\nstruct DirectLight {\n  color: vec3f,\n  direction: vec3f,\n  visible: bool,\n}\n\nfn lessThan3(a: vec3f, b: vec3f) -> vec3f {\n  return vec3f(vec3<bool>(a.x < b.x, a.y < b.y, a.z < b.z));\n}\n\nfn pow2( x: f32 ) -> f32 {\n  return x * x;\n}\n\nfn pow3( x: f32 ) -> f32 {\n  return x * x * x;\n}\n\nfn pow4( x: f32 ) -> f32 {\n  return pow2(x) * pow2(x);\n}\n\nfn isinf(value: f32) -> bool {\n  return value > 1.0e38 || value < -1.0e38;\n}\n\nfn BRDF_Lambert(diffuseColor: vec3f) -> vec3f {\n  return RECIPROCAL_PI * diffuseColor;\n}\n\nfn F_Schlick(VdotH: f32, f0: vec3f, f90: f32) -> vec3f {\n  let fresnel: f32 = pow( 1.0 - VdotH, 5.0 );\n  return f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\n";
