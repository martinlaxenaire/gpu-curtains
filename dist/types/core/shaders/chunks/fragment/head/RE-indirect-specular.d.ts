/** WGSL functions to calculate the indirect specular contribution of lights. */
export declare const REIndirectSpecular = "\nfn DFGApprox(\n  normal: vec3f,\n  viewDirection: vec3f,\n  roughness: f32,\n) -> vec2f {\n  let dotNV: f32 = saturate(dot( normal, viewDirection ));\n\n\tlet c0: vec4f = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tlet c1: vec4f = vec4( 1, 0.0425, 1.04, - 0.04 );\n\n\tlet r: vec4f = roughness * c0 + c1;\n\tlet a004: f32 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\t\n\tlet fab: vec2f = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\n\treturn fab;\n}\n\nstruct TotalScattering {\n  single: vec3f,\n  multi: vec3f,\n}\n\nfn computeMultiscattering(\n  normal: vec3f,\n  viewDirection: vec3f,\n  specularColor: vec3f,\n  f90: f32,\n  roughness: f32,\n  ptr_totalScattering: ptr<function, TotalScattering>\n) {\n  let fab: vec2f = DFGApprox( normal, viewDirection, roughness );\n\n\tlet Fr: vec3f = specularColor;\n\n\tlet FssEss: vec3f = Fr * fab.x + f90 * fab.y;\n\n\tlet Ess: f32 = fab.x + fab.y;\n\tlet Ems: f32 = 1.0 - Ess;\n\n\tlet Favg: vec3f = Fr + ( 1.0 - Fr ) * 0.047619; // 1/21\n\tlet Fms: vec3f = FssEss * Favg / ( 1.0 - Ems * Favg );\n\n\t(*ptr_totalScattering).single += FssEss;\n\t(*ptr_totalScattering).multi += Fms * Ems;\n}\n\n// Indirect Specular RenderEquations\nfn RE_IndirectSpecular(\n  radiance: vec3f,\n  irradiance: vec3f,\n  normal: vec3f,\n  diffuseColor: vec3f,\n  specularFactor: f32,\n  specularColorFactor: vec3f,\n  viewDirection: vec3f,\n  metallic: f32,\n  roughness: f32,\n  ptr_reflectedLight: ptr<function, ReflectedLight>\n) {\n  var totalScattering: TotalScattering;\n  let cosineWeightedIrradiance: vec3f = irradiance * RECIPROCAL_PI;\n    \n  computeMultiscattering( normal, viewDirection, specularColorFactor, specularFactor, roughness, &totalScattering );\n  \n  let totalScatter: vec3f = totalScattering.single + totalScattering.multi;\n  let diffuse: vec3f = diffuseColor * ( 1.0 - max( max( totalScatter.r, totalScatter.g ), totalScatter.b ) );\n\n  (*ptr_reflectedLight).indirectSpecular += radiance * totalScattering.single;\n  (*ptr_reflectedLight).indirectSpecular += totalScattering.multi * cosineWeightedIrradiance;\n\n  (*ptr_reflectedLight).indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n";
