/** WGSL BRDF GGX functions. Need the `constants` and `common` chunks. */
export declare const BRDF_GGX = "\nfn DistributionGGX(NdotH: f32, roughness: f32) -> f32 {\n  let a: f32 = pow2( roughness );\n  let a2: f32 = pow2( a );\n\n  let denom: f32 = (pow2( NdotH ) * (a2 - 1.0) + 1.0);\n\n  return RECIPROCAL_PI * a2 / ( pow2( denom ) );\n}\n\nfn GeometrySmith(NdotL: f32, NdotV: f32, roughness: f32) -> f32 {\n  let a: f32 = pow2( roughness );\n  let a2: f32 = pow2( a );\n  \n  let gv: f32 = NdotL * sqrt( a2 + ( 1.0 - a2 ) * pow2( NdotV ) );\n  let gl: f32 = NdotV * sqrt( a2 + ( 1.0 - a2 ) * pow2( NdotL ) );\n\n  return 0.5 / max( gv + gl, EPSILON );\n}\n\nfn BRDF_GGX(\n  NdotV: f32,\n  NdotL: f32,\n  NdotH: f32,\n  VdotH: f32,\n  roughness: f32,\n  specularFactor: f32,\n  specularColor: vec3f\n) -> vec3f {\n  // cook-torrance brdf\n  let G: f32 = GeometrySmith(NdotL, NdotV, roughness);\n  let D: f32 = DistributionGGX(NdotH, roughness);\n  let F: vec3f = F_Schlick(specularColor, specularFactor, VdotH);\n  \n  return G * D * F;\n}\n";
