const generateUUID = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, (c) => {
    const r = Math.random() * 16 | 0, v = c === "x" ? r : r & 3 | 8;
    return v.toString(16).toUpperCase();
  });
};
const toCamelCase = (string) => {
  return string.replace(/(?:^\w|[A-Z]|\b\w)/g, (ltr, idx) => idx === 0 ? ltr.toLowerCase() : ltr.toUpperCase()).replace(/\s+/g, "");
};
const toKebabCase = (string) => {
  const camelCase = toCamelCase(string);
  return camelCase.charAt(0).toUpperCase() + camelCase.slice(1);
};
let warningThrown = 0;
const throwWarning = (warning) => {
  if (warningThrown > 100) {
    return;
  } else if (warningThrown === 100) {
    console.warn("GPUCurtains: too many warnings thrown, stop logging.");
  } else {
    console.warn(warning);
  }
  warningThrown++;
};
const throwError = (error) => {
  throw new Error(error);
};

const formatRendererError = (renderer, rendererType = "GPURenderer", type) => {
  const error = type ? `Unable to create ${type} because the ${rendererType} is not defined: ${renderer}` : `The ${rendererType} is not defined: ${renderer}`;
  throwError(error);
};
const isRenderer = (renderer, type) => {
  const isRenderer2 = renderer && (renderer.type === "GPURenderer" || renderer.type === "GPUCameraRenderer" || renderer.type === "GPUCurtainsRenderer");
  if (!isRenderer2) {
    formatRendererError(renderer, "GPURenderer", type);
  }
  return isRenderer2;
};
const isCameraRenderer = (renderer, type) => {
  const isCameraRenderer2 = renderer && (renderer.type === "GPUCameraRenderer" || renderer.type === "GPUCurtainsRenderer");
  if (!isCameraRenderer2) {
    formatRendererError(renderer, "GPUCameraRenderer", type);
  }
  return isCameraRenderer2;
};
const isCurtainsRenderer = (renderer, type) => {
  const isCurtainsRenderer2 = renderer && renderer.type === "GPUCurtainsRenderer";
  if (!isCurtainsRenderer2) {
    formatRendererError(renderer, "GPUCurtainsRenderer", type);
  }
  return isCurtainsRenderer2;
};
const generateMips = /* @__PURE__ */ (() => {
  let sampler;
  let module;
  const pipelineByFormat = {};
  return function generateMips2(device, texture) {
    if (!module) {
      module = device.createShaderModule({
        label: "textured quad shaders for mip level generation",
        code: `
            struct VSOutput {
              @builtin(position) position: vec4f,
              @location(0) texcoord: vec2f,
            };

            @vertex fn vs(
              @builtin(vertex_index) vertexIndex : u32
            ) -> VSOutput {
              var pos = array<vec2f, 6>(

                vec2f( 0.0,  0.0),  // center
                vec2f( 1.0,  0.0),  // right, center
                vec2f( 0.0,  1.0),  // center, top

                // 2st triangle
                vec2f( 0.0,  1.0),  // center, top
                vec2f( 1.0,  0.0),  // right, center
                vec2f( 1.0,  1.0),  // right, top
              );

              var vsOutput: VSOutput;
              let xy = pos[vertexIndex];
              vsOutput.position = vec4f(xy * 2.0 - 1.0, 0.0, 1.0);
              vsOutput.texcoord = vec2f(xy.x, 1.0 - xy.y);
              return vsOutput;
            }

            @group(0) @binding(0) var ourSampler: sampler;
            @group(0) @binding(1) var ourTexture: texture_2d<f32>;

            @fragment fn fs(fsInput: VSOutput) -> @location(0) vec4f {
              return textureSample(ourTexture, ourSampler, fsInput.texcoord);
            }
          `
      });
      sampler = device.createSampler({
        minFilter: "linear"
      });
    }
    if (!pipelineByFormat[texture.format]) {
      pipelineByFormat[texture.format] = device.createRenderPipeline({
        label: "mip level generator pipeline",
        layout: "auto",
        vertex: {
          module,
          entryPoint: "vs"
        },
        fragment: {
          module,
          entryPoint: "fs",
          targets: [{ format: texture.format }]
        }
      });
    }
    const pipeline = pipelineByFormat[texture.format];
    const encoder = device.createCommandEncoder({
      label: "mip gen encoder"
    });
    let width = texture.width;
    let height = texture.height;
    let baseMipLevel = 0;
    while (width > 1 || height > 1) {
      width = Math.max(1, width / 2 | 0);
      height = Math.max(1, height / 2 | 0);
      const bindGroup = device.createBindGroup({
        layout: pipeline.getBindGroupLayout(0),
        entries: [
          { binding: 0, resource: sampler },
          {
            binding: 1,
            resource: texture.createView({
              baseMipLevel,
              mipLevelCount: 1
            })
          }
        ]
      });
      ++baseMipLevel;
      const renderPassDescriptor = {
        label: "our basic canvas renderPass",
        colorAttachments: [
          {
            view: texture.createView({ baseMipLevel, mipLevelCount: 1 }),
            loadOp: "clear",
            storeOp: "store"
          }
        ]
      };
      const pass = encoder.beginRenderPass(renderPassDescriptor);
      pass.setPipeline(pipeline);
      pass.setBindGroup(0, bindGroup);
      pass.draw(6);
      pass.end();
    }
    const commandBuffer = encoder.finish();
    device.queue.submit([commandBuffer]);
  };
})();

class Binding {
  /**
   * Binding constructor
   * @param parameters - {@link BindingParams | parameters} used to create our {@link Binding}
   */
  constructor({ label = "Uniform", name = "uniform", bindingType = "uniform", visibility }) {
    this.label = label;
    this.name = toCamelCase(name);
    this.bindingType = bindingType;
    this.visibility = visibility ? (() => {
      switch (visibility) {
        case "vertex":
          return GPUShaderStage.VERTEX;
        case "fragment":
          return GPUShaderStage.FRAGMENT;
        case "compute":
          return GPUShaderStage.COMPUTE;
        default:
          return GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE;
      }
    })() : GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE;
    this.options = {
      label,
      name,
      bindingType,
      visibility
    };
    this.shouldResetBindGroup = false;
    this.shouldResetBindGroupLayout = false;
  }
}

const getBufferLayout = (bufferType) => {
  const bufferLayouts = {
    i32: { numElements: 1, align: 4, size: 4, type: "i32", View: Int32Array },
    u32: { numElements: 1, align: 4, size: 4, type: "u32", View: Uint32Array },
    f32: { numElements: 1, align: 4, size: 4, type: "f32", View: Float32Array },
    f16: { numElements: 1, align: 2, size: 2, type: "u16", View: Uint16Array },
    vec2f: { numElements: 2, align: 8, size: 8, type: "f32", View: Float32Array },
    vec2i: { numElements: 2, align: 8, size: 8, type: "i32", View: Int32Array },
    vec2u: { numElements: 2, align: 8, size: 8, type: "u32", View: Uint32Array },
    vec2h: { numElements: 2, align: 4, size: 4, type: "u16", View: Uint16Array },
    vec3i: { numElements: 3, align: 16, size: 12, type: "i32", View: Int32Array },
    vec3u: { numElements: 3, align: 16, size: 12, type: "u32", View: Uint32Array },
    vec3f: { numElements: 3, align: 16, size: 12, type: "f32", View: Float32Array },
    vec3h: { numElements: 3, align: 8, size: 6, type: "u16", View: Uint16Array },
    vec4i: { numElements: 4, align: 16, size: 16, type: "i32", View: Int32Array },
    vec4u: { numElements: 4, align: 16, size: 16, type: "u32", View: Uint32Array },
    vec4f: { numElements: 4, align: 16, size: 16, type: "f32", View: Float32Array },
    vec4h: { numElements: 4, align: 8, size: 8, type: "u16", View: Uint16Array },
    // AlignOf(vecR)	SizeOf(array<vecR, C>)
    mat2x2f: { numElements: 4, align: 8, size: 16, type: "f32", View: Float32Array },
    mat2x2h: { numElements: 4, align: 4, size: 8, type: "u16", View: Uint16Array },
    mat3x2f: { numElements: 6, align: 8, size: 24, type: "f32", View: Float32Array },
    mat3x2h: { numElements: 6, align: 4, size: 12, type: "u16", View: Uint16Array },
    mat4x2f: { numElements: 8, align: 8, size: 32, type: "f32", View: Float32Array },
    mat4x2h: { numElements: 8, align: 4, size: 16, type: "u16", View: Uint16Array },
    mat2x3f: { numElements: 8, align: 16, size: 32, pad: [3, 1], type: "f32", View: Float32Array },
    mat2x3h: { numElements: 8, align: 8, size: 16, pad: [3, 1], type: "u16", View: Uint16Array },
    mat3x3f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: "f32", View: Float32Array },
    mat3x3h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: "u16", View: Uint16Array },
    mat4x3f: { numElements: 16, align: 16, size: 64, pad: [3, 1], type: "f32", View: Float32Array },
    mat4x3h: { numElements: 16, align: 8, size: 32, pad: [3, 1], type: "u16", View: Uint16Array },
    mat2x4f: { numElements: 8, align: 16, size: 32, type: "f32", View: Float32Array },
    mat2x4h: { numElements: 8, align: 8, size: 16, type: "u16", View: Uint16Array },
    mat3x4f: { numElements: 12, align: 16, size: 48, pad: [3, 1], type: "f32", View: Float32Array },
    mat3x4h: { numElements: 12, align: 8, size: 24, pad: [3, 1], type: "u16", View: Uint16Array },
    mat4x4f: { numElements: 16, align: 16, size: 64, type: "f32", View: Float32Array },
    mat4x4h: { numElements: 16, align: 8, size: 32, type: "u16", View: Uint16Array }
  };
  return bufferLayouts[bufferType];
};
const getBindingWGSLVarType = (binding) => {
  return (() => {
    switch (binding.bindingType) {
      case "storage":
        return `var<${binding.bindingType}, ${binding.options.access}>`;
      case "uniform":
      default:
        return "var<uniform>";
    }
  })();
};
const getTextureBindingWGSLVarType = (binding) => {
  if (binding.bindingType === "externalTexture") {
    return `var ${binding.name}: texture_external;`;
  }
  return binding.bindingType === "storageTexture" ? `var ${binding.name}: texture_storage_${binding.options.viewDimension}<${binding.options.format}, ${binding.options.access}>;` : binding.bindingType === "depthTexture" ? `var ${binding.name}: texture_depth${binding.options.multisampled ? "_multisampled" : ""}_${binding.options.viewDimension};` : `var ${binding.name}: texture${binding.options.multisampled ? "_multisampled" : ""}_${binding.options.viewDimension}<f32>;`;
};
const getBindGroupLayoutBindingType = (binding) => {
  if (binding.bindingType === "storage" && binding.options.access === "read_write") {
    return "storage";
  } else if (binding.bindingType === "storage") {
    return "read-only-storage";
  } else {
    return "uniform";
  }
};
const getBindGroupLayoutTextureBindingType = (binding) => {
  return (() => {
    switch (binding.bindingType) {
      case "externalTexture":
        return { externalTexture: {} };
      case "storageTexture":
        return {
          storageTexture: {
            format: binding.options.format,
            viewDimension: binding.options.viewDimension
          }
        };
      case "texture":
        return {
          texture: {
            multisampled: binding.options.multisampled,
            viewDimension: binding.options.viewDimension
          }
        };
      case "depthTexture":
        return {
          texture: {
            multisampled: binding.options.multisampled,
            format: binding.options.format,
            viewDimension: binding.options.viewDimension,
            sampleType: "depth"
          }
        };
      default:
        return null;
    }
  })();
};

class Vec2 {
  /**
   * Vec2 constructor
   * @param x - X component of our {@link Vec2}
   * @param y - Y component of our {@link Vec2}
   */
  constructor(x = 0, y = x) {
    this.type = "Vec2";
    this._x = x;
    this._y = y;
  }
  /**
   * Get the X component of the {@link Vec2}
   */
  get x() {
    return this._x;
  }
  /**
   * Set the X component of the {@link Vec2}
   * Can trigger {@link onChange} callback
   * @param value - X component to set
   */
  set x(value) {
    const changed = value !== this._x;
    this._x = value;
    changed && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Get the Y component of the {@link Vec2}
   */
  get y() {
    return this._y;
  }
  /**
   * Set the Y component of the {@link Vec2}
   * Can trigger {@link onChange} callback
   * @param value - Y component to set
   */
  set y(value) {
    const changed = value !== this._y;
    this._y = value;
    changed && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Called when at least one component of the {@link Vec2} has changed
   * @param callback - callback to run when at least one component of the {@link Vec2} has changed
   * @returns - our {@link Vec2}
   */
  onChange(callback) {
    if (callback) {
      this._onChangeCallback = callback;
    }
    return this;
  }
  /**
   * Set the {@link Vec2} from values
   * @param x - new X component to set
   * @param y - new Y component to set
   * @returns - this {@link Vec2} after being set
   */
  set(x = 0, y = x) {
    this.x = x;
    this.y = y;
    return this;
  }
  /**
   * Add a {@link Vec2} to this {@link Vec2}
   * @param vector - {@link Vec2} to add
   * @returns - this {@link Vec2} after addition
   */
  add(vector = new Vec2()) {
    this.x += vector.x;
    this.y += vector.y;
    return this;
  }
  /**
   * Add a scalar to all the components of this {@link Vec2}
   * @param value - number to add
   * @returns - this {@link Vec2} after addition
   */
  addScalar(value = 0) {
    this.x += value;
    this.y += value;
    return this;
  }
  /**
   * Subtract a {@link Vec2} from this {@link Vec2}
   * @param vector - {@link Vec2} to subtract
   * @returns - this {@link Vec2} after subtraction
   */
  sub(vector = new Vec2()) {
    this.x -= vector.x;
    this.y -= vector.y;
    return this;
  }
  /**
   * Subtract a scalar to all the components of this {@link Vec2}
   * @param value - number to subtract
   * @returns - this {@link Vec2} after subtraction
   */
  subScalar(value = 0) {
    this.x -= value;
    this.y -= value;
    return this;
  }
  /**
   * Multiply a {@link Vec2} with this {@link Vec2}
   * @param vector - {@link Vec2} to multiply with
   * @returns - this {@link Vec2} after multiplication
   */
  multiply(vector = new Vec2(1)) {
    this.x *= vector.x;
    this.y *= vector.y;
    return this;
  }
  /**
   * Multiply all components of this {@link Vec2} with a scalar
   * @param value - number to multiply with
   * @returns - this {@link Vec2} after multiplication
   */
  multiplyScalar(value = 1) {
    this.x *= value;
    this.y *= value;
    return this;
  }
  /**
   * Copy a {@link Vec2} into this {@link Vec2}
   * @param vector - {@link Vec2} to copy
   * @returns - this {@link Vec2} after copy
   */
  copy(vector = new Vec2()) {
    this.x = vector.x;
    this.y = vector.y;
    return this;
  }
  /**
   * Clone this {@link Vec2}
   * @returns - cloned {@link Vec2}
   */
  clone() {
    return new Vec2(this.x, this.y);
  }
  /**
   * Apply max values to this {@link Vec2} components
   * @param vector - {@link Vec2} representing max values
   * @returns - {@link Vec2} with max values applied
   */
  max(vector = new Vec2()) {
    this.x = Math.max(this.x, vector.x);
    this.y = Math.max(this.y, vector.y);
    return this;
  }
  /**
   * Apply min values to this {@link Vec2} components
   * @param vector - {@link Vec2} representing min values
   * @returns - {@link Vec2} with min values applied
   */
  min(vector = new Vec2()) {
    this.x = Math.min(this.x, vector.x);
    this.y = Math.min(this.y, vector.y);
    return this;
  }
  /**
   * Clamp this {@link Vec2} components by min and max {@link Vec2} vectors
   * @param min - minimum {@link Vec2} components to compare with
   * @param max - maximum {@link Vec2} components to compare with
   * @returns - clamped {@link Vec2}
   */
  clamp(min = new Vec2(), max = new Vec2()) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    return this;
  }
  /**
   * Check if 2 {@link Vec2} are equal
   * @param vector - {@link Vec2} to compare
   * @returns - whether the {@link Vec2} are equals or not
   */
  equals(vector = new Vec2()) {
    return this.x === vector.x && this.y === vector.y;
  }
  /**
   * Get the square length of this {@link Vec2}
   * @returns - square length of this {@link Vec2}
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y;
  }
  /**
   * Get the length of this {@link Vec2}
   * @returns - length of this {@link Vec2}
   */
  length() {
    return Math.sqrt(this.lengthSq());
  }
  /**
   * Normalize this {@link Vec2}
   * @returns - normalized {@link Vec2}
   */
  normalize() {
    let len = this.x * this.x + this.y * this.y;
    if (len > 0) {
      len = 1 / Math.sqrt(len);
    }
    this.x *= len;
    this.y *= len;
    return this;
  }
  /**
   * Calculate the dot product of 2 {@link Vec2}
   * @param vector - {@link Vec2} to use for dot product
   * @returns - dot product of the 2 {@link Vec2}
   */
  dot(vector = new Vec2()) {
    return this.x * vector.x + this.y * vector.y;
  }
  /**
   * Calculate the linear interpolation of this {@link Vec2} by given {@link Vec2} and alpha, where alpha is the percent distance along the line
   * @param vector - {@link Vec2} to interpolate towards
   * @param [alpha=1] - interpolation factor in the [0, 1] interval
   * @returns - this {@link Vec2} after linear interpolation
   */
  lerp(vector = new Vec2(), alpha = 1) {
    this.x += (vector.x - this.x) * alpha;
    this.y += (vector.y - this.y) * alpha;
    return this;
  }
}

class Quat {
  /**
   * Quat constructor
   * @param [elements] - initial array to use
   * @param [axisOrder='XYZ'] - axis order to use
   */
  constructor(elements = new Float32Array([0, 0, 0, 1]), axisOrder = "XYZ") {
    this.type = "Quat";
    this.elements = elements;
    this.axisOrder = axisOrder;
  }
  /**
   * Sets the {@link Quat} values from an array
   * @param array - an array of at least 4 elements
   * @returns - this {@link Quat} after being set
   */
  setFromArray(array = new Float32Array([0, 0, 0, 1])) {
    this.elements[0] = array[0];
    this.elements[1] = array[1];
    this.elements[2] = array[2];
    this.elements[3] = array[3];
    return this;
  }
  /**
   * Sets the {@link Quat} axis order
   * @param axisOrder - axis order to use
   * @returns - this {@link Quat} after axis order has been set
   */
  setAxisOrder(axisOrder = "XYZ") {
    axisOrder = axisOrder.toUpperCase();
    switch (axisOrder) {
      case "XYZ":
      case "YXZ":
      case "ZXY":
      case "ZYX":
      case "YZX":
      case "XZY":
        this.axisOrder = axisOrder;
        break;
      default:
        this.axisOrder = "XYZ";
    }
    return this;
  }
  /**
   * Copy a {@link Quat} into this {@link Quat}
   * @param quaternion - {@link Quat} to copy
   * @returns - this {@link Quat} after copy
   */
  copy(quaternion = new Quat()) {
    this.elements = quaternion.elements;
    this.axisOrder = quaternion.axisOrder;
    return this;
  }
  /**
   * Clone a {@link Quat}
   * @returns - cloned {@link Quat}
   */
  clone() {
    return new Quat().copy(this);
  }
  /**
   * Check if 2 {@link Quat} are equal
   * @param quaternion - {@link Quat} to check against
   * @returns - whether the {@link Quat} are equal or not
   */
  equals(quaternion = new Quat()) {
    return this.elements[0] === quaternion.elements[0] && this.elements[1] === quaternion.elements[1] && this.elements[2] === quaternion.elements[2] && this.elements[3] === quaternion.elements[3] && this.axisOrder === quaternion.axisOrder;
  }
  /**
   * Sets a rotation {@link Quat} using Euler angles {@link Vec3 | vector} and its axis order
   * @param vector - rotation {@link Vec3 | vector} to set our {@link Quat} from
   * @returns - {@link Quat} after having applied the rotation
   */
  setFromVec3(vector = new Vec3()) {
    const ax = vector.x * 0.5;
    const ay = vector.y * 0.5;
    const az = vector.z * 0.5;
    const cosx = Math.cos(ax);
    const cosy = Math.cos(ay);
    const cosz = Math.cos(az);
    const sinx = Math.sin(ax);
    const siny = Math.sin(ay);
    const sinz = Math.sin(az);
    if (this.axisOrder === "XYZ") {
      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz;
      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz;
      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz;
      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz;
    } else if (this.axisOrder === "YXZ") {
      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz;
      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz;
      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz;
      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz;
    } else if (this.axisOrder === "ZXY") {
      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz;
      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz;
      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz;
      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz;
    } else if (this.axisOrder === "ZYX") {
      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz;
      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz;
      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz;
      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz;
    } else if (this.axisOrder === "YZX") {
      this.elements[0] = sinx * cosy * cosz + cosx * siny * sinz;
      this.elements[1] = cosx * siny * cosz + sinx * cosy * sinz;
      this.elements[2] = cosx * cosy * sinz - sinx * siny * cosz;
      this.elements[3] = cosx * cosy * cosz - sinx * siny * sinz;
    } else if (this.axisOrder === "XZY") {
      this.elements[0] = sinx * cosy * cosz - cosx * siny * sinz;
      this.elements[1] = cosx * siny * cosz - sinx * cosy * sinz;
      this.elements[2] = cosx * cosy * sinz + sinx * siny * cosz;
      this.elements[3] = cosx * cosy * cosz + sinx * siny * sinz;
    }
    return this;
  }
  /**
   * Set a {@link Quat} from a rotation axis {@link Vec3 | vector} and an angle
   * @param axis - normalized {@link Vec3 | vector} around which to rotate
   * @param angle - angle (in radians) to rotate
   * @returns - {@link Quat} after having applied the rotation
   */
  setFromAxisAngle(axis = new Vec3(), angle = 0) {
    const halfAngle = angle / 2, s = Math.sin(halfAngle);
    this.elements[0] = axis.x * s;
    this.elements[1] = axis.y * s;
    this.elements[2] = axis.z * s;
    this.elements[3] = Math.cos(halfAngle);
    return this;
  }
  /**
   * Set a {@link Quat} from a rotation {@link Mat4 | matrix}
   * @param matrix - rotation {@link Mat4 | matrix} to use
   * @returns - {@link Quat} after having applied the rotation
   */
  setFromRotationMatrix(matrix) {
    const te = matrix.elements, m11 = te[0], m12 = te[4], m13 = te[8], m21 = te[1], m22 = te[5], m23 = te[9], m31 = te[2], m32 = te[6], m33 = te[10], trace = m11 + m22 + m33;
    if (trace > 0) {
      const s = 0.5 / Math.sqrt(trace + 1);
      this.elements[3] = 0.25 / s;
      this.elements[0] = (m32 - m23) * s;
      this.elements[1] = (m13 - m31) * s;
      this.elements[2] = (m21 - m12) * s;
    } else if (m11 > m22 && m11 > m33) {
      const s = 2 * Math.sqrt(1 + m11 - m22 - m33);
      this.elements[3] = (m32 - m23) / s;
      this.elements[0] = 0.25 * s;
      this.elements[1] = (m12 + m21) / s;
      this.elements[2] = (m13 + m31) / s;
    } else if (m22 > m33) {
      const s = 2 * Math.sqrt(1 + m22 - m11 - m33);
      this.elements[3] = (m13 - m31) / s;
      this.elements[0] = (m12 + m21) / s;
      this.elements[1] = 0.25 * s;
      this.elements[2] = (m23 + m32) / s;
    } else {
      const s = 2 * Math.sqrt(1 + m33 - m11 - m22);
      this.elements[3] = (m21 - m12) / s;
      this.elements[0] = (m13 + m31) / s;
      this.elements[1] = (m23 + m32) / s;
      this.elements[2] = 0.25 * s;
    }
    return this;
  }
}

class Mat4 {
  // prettier-ignore
  /**
   * Mat4 constructor
   * @param elements - initial array to use, default to identity matrix
   */
  constructor(elements = new Float32Array([
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
  ])) {
    this.type = "Mat4";
    this.elements = elements;
  }
  /***
   * Sets the matrix from 16 numbers
   *
   * @param n11 number
   * @param n12 number
   * @param n13 number
   * @param n14 number
   * @param n21 number
   * @param n22 number
   * @param n23 number
   * @param n24 number
   * @param n31 number
   * @param n32 number
   * @param n33 number
   * @param n34 number
   * @param n41 number
   * @param n42 number
   * @param n43 number
   * @param n44 number
   *
   * @returns - this {@link Mat4} after being set
   */
  set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {
    const te = this.elements;
    te[0] = n11;
    te[1] = n12;
    te[2] = n13;
    te[3] = n14;
    te[4] = n21;
    te[5] = n22;
    te[6] = n23;
    te[7] = n24;
    te[8] = n31;
    te[9] = n32;
    te[10] = n33;
    te[11] = n34;
    te[12] = n41;
    te[13] = n42;
    te[14] = n43;
    te[15] = n44;
    return this;
  }
  /**
   * Sets the {@link Mat4} to an identity matrix
   * @returns - this {@link Mat4} after being set
   */
  identity() {
    this.set(
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1,
      0,
      0,
      0,
      0,
      1
    );
    return this;
  }
  /**
   * Sets the {@link Mat4} values from an array
   * @param array - array to use
   * @returns - this {@link Mat4} after being set
   */
  // prettier-ignore
  setFromArray(array = new Float32Array([
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    0,
    1
  ])) {
    for (let i = 0; i < this.elements.length; i++) {
      this.elements[i] = array[i];
    }
    return this;
  }
  /**
   * Copy another {@link Mat4}
   * @param matrix
   * @returns - this {@link Mat4} after being set
   */
  copy(matrix = new Mat4()) {
    const array = matrix.elements;
    this.elements[0] = array[0];
    this.elements[1] = array[1];
    this.elements[2] = array[2];
    this.elements[3] = array[3];
    this.elements[4] = array[4];
    this.elements[5] = array[5];
    this.elements[6] = array[6];
    this.elements[7] = array[7];
    this.elements[8] = array[8];
    this.elements[9] = array[9];
    this.elements[10] = array[10];
    this.elements[11] = array[11];
    this.elements[12] = array[12];
    this.elements[13] = array[13];
    this.elements[14] = array[14];
    this.elements[15] = array[15];
    return this;
  }
  /**
   * Clone a {@link Mat4}
   * @returns - cloned {@link Mat4}
   */
  clone() {
    return new Mat4().copy(this);
  }
  /**
   * Multiply this {@link Mat4} with another {@link Mat4}
   * @param matrix - {@link Mat4} to multiply with
   * @returns - this {@link Mat4} after multiplication
   */
  multiply(matrix = new Mat4()) {
    return this.multiplyMatrices(this, matrix);
  }
  /**
   * Multiply another {@link Mat4} with this {@link Mat4}
   * @param matrix - {@link Mat4} to multiply with
   * @returns - this {@link Mat4} after multiplication
   */
  premultiply(matrix = new Mat4()) {
    return this.multiplyMatrices(matrix, this);
  }
  /**
   * Multiply two {@link Mat4}
   * @param a - first {@link Mat4}
   * @param b - second {@link Mat4}
   * @returns - {@link Mat4} resulting from the multiplication
   */
  multiplyMatrices(a = new Mat4(), b = new Mat4()) {
    const ae = a.elements;
    const be = b.elements;
    const te = this.elements;
    const a11 = ae[0], a12 = ae[4], a13 = ae[8], a14 = ae[12];
    const a21 = ae[1], a22 = ae[5], a23 = ae[9], a24 = ae[13];
    const a31 = ae[2], a32 = ae[6], a33 = ae[10], a34 = ae[14];
    const a41 = ae[3], a42 = ae[7], a43 = ae[11], a44 = ae[15];
    const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
    const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
    const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
    const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;
    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;
    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;
    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;
    return this;
  }
  /**
   * {@link premultiply} this {@link Mat4} by a translate matrix (i.e. translateMatrix = new Mat4().translate(vector))
   * @param vector - translation {@link Vec3 | vector} to use
   * @returns - this {@link Mat4} after the premultiply translate operation
   */
  premultiplyTranslate(vector = new Vec3()) {
    const a11 = 1;
    const a22 = 1;
    const a33 = 1;
    const a44 = 1;
    const a14 = vector.x;
    const a24 = vector.y;
    const a34 = vector.z;
    const be = this.elements;
    const te = this.elements;
    const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
    const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
    const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
    const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
    te[0] = a11 * b11 + a14 * b41;
    te[4] = a11 * b12 + a14 * b42;
    te[8] = a11 * b13 + a14 * b43;
    te[12] = a11 * b14 + a14 * b44;
    te[1] = a22 * b21 + a24 * b41;
    te[5] = a22 * b22 + a24 * b42;
    te[9] = a22 * b23 + a24 * b43;
    te[13] = a22 * b24 + a24 * b44;
    te[2] = a33 * b31 + a34 * b41;
    te[6] = a33 * b32 + a34 * b42;
    te[10] = a33 * b33 + a34 * b43;
    te[14] = a33 * b34 + a34 * b44;
    te[3] = a44 * b41;
    te[7] = a44 * b42;
    te[11] = a44 * b43;
    te[15] = a44 * b44;
    return this;
  }
  /**
   * {@link premultiply} this {@link Mat4} by a scale matrix (i.e. translateMatrix = new Mat4().scale(vector))
   * @param vector - scale {@link Vec3 | vector} to use
   * @returns - this {@link Mat4} after the premultiply scale operation
   */
  premultiplyScale(vector = new Vec3()) {
    const be = this.elements;
    const te = this.elements;
    const a11 = vector.x;
    const a22 = vector.y;
    const a33 = vector.z;
    const a44 = 1;
    const b11 = be[0], b12 = be[4], b13 = be[8], b14 = be[12];
    const b21 = be[1], b22 = be[5], b23 = be[9], b24 = be[13];
    const b31 = be[2], b32 = be[6], b33 = be[10], b34 = be[14];
    const b41 = be[3], b42 = be[7], b43 = be[11], b44 = be[15];
    te[0] = a11 * b11;
    te[4] = a11 * b12;
    te[8] = a11 * b13;
    te[12] = a11 * b14;
    te[1] = a22 * b21;
    te[5] = a22 * b22;
    te[9] = a22 * b23;
    te[13] = a22 * b24;
    te[2] = a33 * b31;
    te[6] = a33 * b32;
    te[10] = a33 * b33;
    te[14] = a33 * b34;
    te[3] = a44 * b41;
    te[7] = a44 * b42;
    te[11] = a44 * b43;
    te[15] = a44 * b44;
    return this;
  }
  /**
   * Get the {@link Mat4} inverse
   * @returns - the {@link Mat4} inverted
   */
  invert() {
    const te = this.elements, n11 = te[0], n21 = te[1], n31 = te[2], n41 = te[3], n12 = te[4], n22 = te[5], n32 = te[6], n42 = te[7], n13 = te[8], n23 = te[9], n33 = te[10], n43 = te[11], n14 = te[12], n24 = te[13], n34 = te[14], n44 = te[15], t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44, t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44, t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44, t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;
    const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;
    if (det === 0)
      return this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    const detInv = 1 / det;
    te[0] = t11 * detInv;
    te[1] = (n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44) * detInv;
    te[2] = (n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44) * detInv;
    te[3] = (n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43) * detInv;
    te[4] = t12 * detInv;
    te[5] = (n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44) * detInv;
    te[6] = (n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44) * detInv;
    te[7] = (n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43) * detInv;
    te[8] = t13 * detInv;
    te[9] = (n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44) * detInv;
    te[10] = (n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44) * detInv;
    te[11] = (n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43) * detInv;
    te[12] = t14 * detInv;
    te[13] = (n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34) * detInv;
    te[14] = (n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34) * detInv;
    te[15] = (n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33) * detInv;
    return this;
  }
  /**
   * Clone and invert the {@link Mat4}
   * @returns - inverted cloned {@link Mat4}
   */
  getInverse() {
    return this.clone().invert();
  }
  /**
   * Translate a {@link Mat4}
   * @param vector - translation {@link Vec3 | vector} to use
   * @returns - translated {@link Mat4}
   */
  translate(vector = new Vec3()) {
    const a = this.elements;
    a[12] = a[0] * vector.x + a[4] * vector.y + a[8] * vector.z + a[12];
    a[13] = a[1] * vector.x + a[5] * vector.y + a[9] * vector.z + a[13];
    a[14] = a[2] * vector.x + a[6] * vector.y + a[10] * vector.z + a[14];
    a[15] = a[3] * vector.x + a[7] * vector.y + a[11] * vector.z + a[15];
    return this;
  }
  /**
   * Scale a {@link Mat4}
   * @param vector - scale {@link Vec3 | vector} to use
   * @returns - scaled {@link Mat4}
   */
  scale(vector = new Vec3()) {
    const a = this.elements;
    a[0] *= vector.x;
    a[1] *= vector.x;
    a[2] *= vector.x;
    a[3] *= vector.x;
    a[4] *= vector.y;
    a[5] *= vector.y;
    a[6] *= vector.y;
    a[7] *= vector.y;
    a[8] *= vector.z;
    a[9] *= vector.z;
    a[10] *= vector.z;
    a[11] *= vector.z;
    return this;
  }
  /**
   * Rotate a {@link Mat4} from a {@link Quat | quaternion}
   * @param quaternion - {@link Quat | quaternion} to use
   * @returns - rotated {@link Mat4}
   */
  rotateFromQuaternion(quaternion = new Quat()) {
    const te = this.elements;
    const x = quaternion.elements[0], y = quaternion.elements[1], z = quaternion.elements[2], w = quaternion.elements[3];
    const x2 = x + x, y2 = y + y, z2 = z + z;
    const xx = x * x2, xy = x * y2, xz = x * z2;
    const yy = y * y2, yz = y * z2, zz = z * z2;
    const wx = w * x2, wy = w * y2, wz = w * z2;
    te[0] = 1 - (yy + zz);
    te[4] = xy - wz;
    te[8] = xz + wy;
    te[1] = xy + wz;
    te[5] = 1 - (xx + zz);
    te[9] = yz - wx;
    te[2] = xz - wy;
    te[6] = yz + wx;
    te[10] = 1 - (xx + yy);
    return this;
  }
  /**
   * Set this {@link Mat4} as a rotation matrix based on an eye, target and up {@link Vec3 | vectors}
   * @param eye - {@link Vec3 | position vector} of the object that should be rotated
   * @param target - {@link Vec3 | target vector} to look at
   * @param up - up {@link Vec3 | vector}
   * @returns - rotated {@link Mat4}
   */
  lookAt(eye = new Vec3(), target = new Vec3(), up = new Vec3(0, 1, 0)) {
    const te = this.elements;
    const _z = eye.clone().sub(target);
    if (_z.lengthSq() === 0) {
      _z.z = 1;
    }
    _z.normalize();
    const _x = new Vec3().crossVectors(up, _z);
    if (_x.lengthSq() === 0) {
      if (Math.abs(up.z) === 1) {
        _z.x += 1e-4;
      } else {
        _z.z += 1e-4;
      }
      _z.normalize();
      _x.crossVectors(up, _z);
    }
    _x.normalize();
    const _y = new Vec3().crossVectors(_z, _x);
    te[0] = _x.x;
    te[4] = _y.x;
    te[8] = _z.x;
    te[1] = _x.y;
    te[5] = _y.y;
    te[9] = _z.y;
    te[2] = _x.z;
    te[6] = _y.z;
    te[10] = _z.z;
    return this;
  }
  /**
   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale
   * Equivalent for applying translation, rotation and scale matrices but much faster
   * Source code from: http://glmatrix.net/docs/mat4.js.html
   *
   * @param translation - translation {@link Vec3 | vector} to use
   * @param quaternion - {@link Quat | quaternion} to use
   * @param scale - translation {@link Vec3 | vector} to use
   * @returns - transformed {@link Mat4}
   */
  compose(translation = new Vec3(), quaternion = new Quat(), scale = new Vec3(1)) {
    const matrix = this.elements;
    const x = quaternion.elements[0], y = quaternion.elements[1], z = quaternion.elements[2], w = quaternion.elements[3];
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const xy = x * y2;
    const xz = x * z2;
    const yy = y * y2;
    const yz = y * z2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;
    const sx = scale.x;
    const sy = scale.y;
    const sz = scale.z;
    matrix[0] = (1 - (yy + zz)) * sx;
    matrix[1] = (xy + wz) * sx;
    matrix[2] = (xz - wy) * sx;
    matrix[3] = 0;
    matrix[4] = (xy - wz) * sy;
    matrix[5] = (1 - (xx + zz)) * sy;
    matrix[6] = (yz + wx) * sy;
    matrix[7] = 0;
    matrix[8] = (xz + wy) * sz;
    matrix[9] = (yz - wx) * sz;
    matrix[10] = (1 - (xx + yy)) * sz;
    matrix[11] = 0;
    matrix[12] = translation.x;
    matrix[13] = translation.y;
    matrix[14] = translation.z;
    matrix[15] = 1;
    return this;
  }
  /**
   * Creates a {@link Mat4} from a {@link Quat | quaternion} rotation, {@link Vec3 | vector} translation and {@link Vec3 | vector} scale, rotating and scaling around the given {@link Vec3 | origin vector}
   * Equivalent for applying translation, rotation and scale matrices but much faster
   * Source code from: http://glmatrix.net/docs/mat4.js.html
   *
   * @param translation - translation {@link Vec3 | vector} to use
   * @param quaternion - {@link Quat | quaternion} to use
   * @param scale - translation {@link Vec3 | vector} to use
   * @param origin - origin {@link Vec3 | vector} around which to scale and rotate
   * @returns - transformed {@link Mat4}
   */
  composeFromOrigin(translation = new Vec3(), quaternion = new Quat(), scale = new Vec3(1), origin = new Vec3()) {
    const matrix = this.elements;
    const x = quaternion.elements[0], y = quaternion.elements[1], z = quaternion.elements[2], w = quaternion.elements[3];
    const x2 = x + x;
    const y2 = y + y;
    const z2 = z + z;
    const xx = x * x2;
    const xy = x * y2;
    const xz = x * z2;
    const yy = y * y2;
    const yz = y * z2;
    const zz = z * z2;
    const wx = w * x2;
    const wy = w * y2;
    const wz = w * z2;
    const sx = scale.x;
    const sy = scale.y;
    const sz = scale.z;
    const ox = origin.x;
    const oy = origin.y;
    const oz = origin.z;
    const out0 = (1 - (yy + zz)) * sx;
    const out1 = (xy + wz) * sx;
    const out2 = (xz - wy) * sx;
    const out4 = (xy - wz) * sy;
    const out5 = (1 - (xx + zz)) * sy;
    const out6 = (yz + wx) * sy;
    const out8 = (xz + wy) * sz;
    const out9 = (yz - wx) * sz;
    const out10 = (1 - (xx + yy)) * sz;
    matrix[0] = out0;
    matrix[1] = out1;
    matrix[2] = out2;
    matrix[3] = 0;
    matrix[4] = out4;
    matrix[5] = out5;
    matrix[6] = out6;
    matrix[7] = 0;
    matrix[8] = out8;
    matrix[9] = out9;
    matrix[10] = out10;
    matrix[11] = 0;
    matrix[12] = translation.x + ox - (out0 * ox + out4 * oy + out8 * oz);
    matrix[13] = translation.y + oy - (out1 * ox + out5 * oy + out9 * oz);
    matrix[14] = translation.z + oz - (out2 * ox + out6 * oy + out10 * oz);
    matrix[15] = 1;
    return this;
  }
  /**
   * Get the translation {@link Vec3} component of a {@link Mat4}
   * @param position - {@link Vec3} to set
   * @returns - translation {@link Vec3} component of this {@link Mat4}
   */
  getTranslation(position = new Vec3()) {
    return position.set(this.elements[12], this.elements[13], this.elements[14]);
  }
}

class Vec3 {
  /**
   * Vec3 constructor
   * @param x - X component of our {@link Vec3}
   * @param y - Y component of our {@link Vec3}
   * @param z - Z component of our {@link Vec3}
   */
  constructor(x = 0, y = x, z = x) {
    this.type = "Vec3";
    this._x = x;
    this._y = y;
    this._z = z;
  }
  /**
   * Get the X component of the {@link Vec3}
   */
  get x() {
    return this._x;
  }
  /**
   * Set the X component of the {@link Vec3}
   * Can trigger {@link onChange} callback
   * @param value - X component to set
   */
  set x(value) {
    const changed = value !== this._x;
    this._x = value;
    changed && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Get the Y component of the {@link Vec3}
   */
  get y() {
    return this._y;
  }
  /**
   * Set the Y component of the {@link Vec3}
   * Can trigger {@link onChange} callback
   * @param value - Y component to set
   */
  set y(value) {
    const changed = value !== this._y;
    this._y = value;
    changed && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Get the Z component of the {@link Vec3}
   */
  get z() {
    return this._z;
  }
  /**
   * Set the Z component of the {@link Vec3}
   * Can trigger {@link onChange} callback
   * @param value - Z component to set
   */
  set z(value) {
    const changed = value !== this._z;
    this._z = value;
    changed && this._onChangeCallback && this._onChangeCallback();
  }
  /**
   * Called when at least one component of the {@link Vec3} has changed
   * @param callback - callback to run when at least one component of the {@link Vec3} has changed
   * @returns - our {@link Vec3}
   */
  onChange(callback) {
    if (callback) {
      this._onChangeCallback = callback;
    }
    return this;
  }
  /**
   * Set the {@link Vec3} from values
   * @param x - new X component to set
   * @param y - new Y component to set
   * @param z - new Z component to set
   * @returns - this {@link Vec3} after being set
   */
  set(x = 0, y = x, z = x) {
    this.x = x;
    this.y = y;
    this.z = z;
    return this;
  }
  /**
   * Add a {@link Vec3} to this {@link Vec3}
   * @param vector - {@link Vec3} to add
   * @returns - this {@link Vec3} after addition
   */
  add(vector = new Vec3()) {
    this.x += vector.x;
    this.y += vector.y;
    this.z += vector.z;
    return this;
  }
  /**
   * Add a scalar to all the components of this {@link Vec3}
   * @param value - number to add
   * @returns - this {@link Vec3} after addition
   */
  addScalar(value = 0) {
    this.x += value;
    this.y += value;
    this.z += value;
    return this;
  }
  /**
   * Subtract a {@link Vec3} from this {@link Vec3}
   * @param vector - {@link Vec3} to subtract
   * @returns - this {@link Vec3} after subtraction
   */
  sub(vector = new Vec3()) {
    this.x -= vector.x;
    this.y -= vector.y;
    this.z -= vector.z;
    return this;
  }
  /**
   * Subtract a scalar to all the components of this {@link Vec3}
   * @param value - number to subtract
   * @returns - this {@link Vec3} after subtraction
   */
  subScalar(value = 0) {
    this.x -= value;
    this.y -= value;
    this.z -= value;
    return this;
  }
  /**
   * Multiply a {@link Vec3} with this {@link Vec3}
   * @param vector - {@link Vec3} to multiply with
   * @returns - this {@link Vec3} after multiplication
   */
  multiply(vector = new Vec3(1)) {
    this.x *= vector.x;
    this.y *= vector.y;
    this.z *= vector.z;
    return this;
  }
  /**
   * Multiply all components of this {@link Vec3} with a scalar
   * @param value - number to multiply with
   * @returns - this {@link Vec3} after multiplication
   */
  multiplyScalar(value = 1) {
    this.x *= value;
    this.y *= value;
    this.z *= value;
    return this;
  }
  /**
   * Copy a {@link Vec3} into this {@link Vec3}
   * @param vector - {@link Vec3} to copy
   * @returns - this {@link Vec3} after copy
   */
  copy(vector = new Vec3()) {
    this.x = vector.x;
    this.y = vector.y;
    this.z = vector.z;
    return this;
  }
  /**
   * Clone this {@link Vec3}
   * @returns - cloned {@link Vec3}
   */
  clone() {
    return new Vec3(this.x, this.y, this.z);
  }
  /**
   * Apply max values to this {@link Vec3} components
   * @param vector - {@link Vec3} representing max values
   * @returns - {@link Vec3} with max values applied
   */
  max(vector = new Vec3()) {
    this.x = Math.max(this.x, vector.x);
    this.y = Math.max(this.y, vector.y);
    this.z = Math.max(this.z, vector.z);
    return this;
  }
  /**
   * Apply min values to this {@link Vec3} components
   * @param vector - {@link Vec3} representing min values
   * @returns - {@link Vec3} with min values applied
   */
  min(vector = new Vec3()) {
    this.x = Math.min(this.x, vector.x);
    this.y = Math.min(this.y, vector.y);
    this.z = Math.min(this.z, vector.z);
    return this;
  }
  /**
   * Clamp this {@link Vec3} components by min and max {@link Vec3} vectors
   * @param min - minimum {@link Vec3} components to compare with
   * @param max - maximum {@link Vec3} components to compare with
   * @returns - clamped {@link Vec3}
   */
  clamp(min = new Vec3(), max = new Vec3()) {
    this.x = Math.max(min.x, Math.min(max.x, this.x));
    this.y = Math.max(min.y, Math.min(max.y, this.y));
    this.z = Math.max(min.z, Math.min(max.z, this.z));
    return this;
  }
  /**
   * Check if 2 {@link Vec3} are equal
   * @param vector - {@link Vec3} to compare
   * @returns - whether the {@link Vec3} are equals or not
   */
  equals(vector = new Vec3()) {
    return this.x === vector.x && this.y === vector.y && this.z === vector.z;
  }
  /**
   * Get the square length of this {@link Vec3}
   * @returns - square length of this {@link Vec3}
   */
  lengthSq() {
    return this.x * this.x + this.y * this.y + this.z * this.z;
  }
  /**
   * Get the length of this {@link Vec3}
   * @returns - length of this {@link Vec3}
   */
  length() {
    return Math.sqrt(this.lengthSq());
  }
  /**
   * Normalize this {@link Vec3}
   * @returns - normalized {@link Vec3}
   */
  normalize() {
    let len = this.lengthSq();
    if (len > 0) {
      len = 1 / Math.sqrt(len);
    }
    this.x *= len;
    this.y *= len;
    this.z *= len;
    return this;
  }
  /**
   * Calculate the dot product of 2 {@link Vec3}
   * @param vector - {@link Vec3} to use for dot product
   * @returns - dot product of the 2 {@link Vec3}
   */
  dot(vector = new Vec3()) {
    return this.x * vector.x + this.y * vector.y + this.z * vector.z;
  }
  /**
   * Get the cross product of this {@link Vec3} with another {@link Vec3}
   * @param vector - {@link Vec3} to use for cross product
   * @returns - this {@link Vec3} after cross product
   */
  cross(vector = new Vec3()) {
    return this.crossVectors(this, vector);
  }
  /**
   * Set this {@link Vec3} as the result of the cross product of two {@link Vec3}
   * @param a - first {@link Vec3} to use for cross product
   * @param b - second {@link Vec3} to use for cross product
   * @returns - this {@link Vec3} after cross product
   */
  crossVectors(a = new Vec3(), b = new Vec3()) {
    const ax = a.x, ay = a.y, az = a.z;
    const bx = b.x, by = b.y, bz = b.z;
    this.x = ay * bz - az * by;
    this.y = az * bx - ax * bz;
    this.z = ax * by - ay * bx;
    return this;
  }
  /**
   * Calculate the linear interpolation of this {@link Vec3} by given {@link Vec3} and alpha, where alpha is the percent distance along the line
   * @param vector - {@link Vec3} to interpolate towards
   * @param alpha - interpolation factor in the [0, 1] interval
   * @returns - this {@link Vec3} after linear interpolation
   */
  lerp(vector = new Vec3(), alpha = 1) {
    this.x += (vector.x - this.x) * alpha;
    this.y += (vector.y - this.y) * alpha;
    this.z += (vector.z - this.z) * alpha;
    return this;
  }
  /**
   * Apply a {@link Mat4 | matrix} to a {@link Vec3}
   * Useful to convert a position {@link Vec3} from plane local world to webgl space using projection view matrix for example
   * Source code from: http://glmatrix.net/docs/vec3.js.html
   * @param matrix - {@link Mat4 | matrix} to use
   * @returns - this {@link Vec3} after {@link Mat4 | matrix} application
   */
  applyMat4(matrix = new Mat4()) {
    const x = this._x, y = this._y, z = this._z;
    const mArray = matrix.elements;
    let w = mArray[3] * x + mArray[7] * y + mArray[11] * z + mArray[15];
    w = w || 1;
    this.x = (mArray[0] * x + mArray[4] * y + mArray[8] * z + mArray[12]) / w;
    this.y = (mArray[1] * x + mArray[5] * y + mArray[9] * z + mArray[13]) / w;
    this.z = (mArray[2] * x + mArray[6] * y + mArray[10] * z + mArray[14]) / w;
    return this;
  }
  /**
   * Apply a {@link Quat | quaternion} (rotation in 3D space) to this {@link Vec3}
   * @param quaternion - {@link Quat | quaternion} to use
   * @returns - this {@link Vec3} with the transformation applied
   */
  applyQuat(quaternion = new Quat()) {
    const x = this.x, y = this.y, z = this.z;
    const qx = quaternion.elements[0], qy = quaternion.elements[1], qz = quaternion.elements[2], qw = quaternion.elements[3];
    const ix = qw * x + qy * z - qz * y;
    const iy = qw * y + qz * x - qx * z;
    const iz = qw * z + qx * y - qy * x;
    const iw = -qx * x - qy * y - qz * z;
    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;
    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;
    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;
    return this;
  }
  /**
   * Rotate a {@link Vec3} around and axis by a given angle
   * @param axis - normalized {@link Vec3} around which to rotate
   * @param angle - angle (in radians) to rotate
   * @param quaternion - optional {@link Quat | quaternion} to use for rotation computations
   * @returns - this {@link Vec3} with the rotation applied
   */
  applyAxisAngle(axis = new Vec3(), angle = 0, quaternion = new Quat()) {
    return this.applyQuat(quaternion.setFromAxisAngle(axis, angle));
  }
  /**
   * Project a 3D coordinate {@link Vec3} to a 2D coordinate {@link Vec3}
   * @param camera - {@link Camera} to use for projection
   * @returns - projected {@link Vec3}
   */
  project(camera) {
    this.applyMat4(camera.viewMatrix).applyMat4(camera.projectionMatrix);
    return this;
  }
  /**
   * Unproject a 2D coordinate {@link Vec3} to 3D coordinate {@link Vec3}
   * @param camera - {@link Camera} to use for projection
   * @returns - unprojected {@link Vec3}
   */
  unproject(camera) {
    this.applyMat4(camera.projectionMatrix.getInverse()).applyMat4(camera.modelMatrix);
    return this;
  }
}

const slotsPerRow = 4;
const bytesPerSlot = 4;
const bytesPerRow = slotsPerRow * bytesPerSlot;
class BufferElement {
  /**
   * BufferElement constructor
   * @param parameters - {@link BufferElementParams | parameters} used to create our {@link BufferElement}
   */
  constructor({ name, key, type = "f32" }) {
    this.name = name;
    this.key = key;
    this.type = type;
    this.bufferLayout = getBufferLayout(this.type.replace("array", "").replace("<", "").replace(">", ""));
    this.alignment = {
      start: {
        row: 0,
        byte: 0
      },
      end: {
        row: 0,
        byte: 0
      }
    };
  }
  /**
   * Get the total number of rows used by this {@link BufferElement}
   * @readonly
   */
  get rowCount() {
    return this.alignment.end.row - this.alignment.start.row + 1;
  }
  /**
   * Get the total number of bytes used by this {@link BufferElement} based on {@link BufferElementAlignment | alignment} start and end offsets
   * @readonly
   */
  get byteCount() {
    return Math.abs(this.endOffset - this.startOffset) + 1;
  }
  /**
   * Get the total number of bytes used by this {@link BufferElement}, including final padding
   * @readonly
   */
  get paddedByteCount() {
    return (this.alignment.end.row + 1) * bytesPerRow;
  }
  /**
   * Get the offset (i.e. byte index) at which our {@link BufferElement} starts
   * @readonly
   */
  get startOffset() {
    return this.getByteCountAtPosition(this.alignment.start);
  }
  /**
   * Get the array offset (i.e. array index) at which our {@link BufferElement} starts
   * @readonly
   */
  get startOffsetToIndex() {
    return this.startOffset / bytesPerSlot;
  }
  /**
   * Get the offset (i.e. byte index) at which our {@link BufferElement} ends
   * @readonly
   */
  get endOffset() {
    return this.getByteCountAtPosition(this.alignment.end);
  }
  /**
   * Get the array offset (i.e. array index) at which our {@link BufferElement} ends
   * @readonly
   */
  get endOffsetToIndex() {
    return Math.floor(this.endOffset / bytesPerSlot);
  }
  /**
   * Get the position at given offset (i.e. byte index)
   * @param offset - byte index to use
   */
  getPositionAtOffset(offset = 0) {
    return {
      row: Math.floor(offset / bytesPerRow),
      byte: offset % bytesPerRow
    };
  }
  /**
   * Get the number of bytes at a given {@link BufferElementAlignmentPosition | position}
   * @param position - {@link BufferElementAlignmentPosition | position} from which to count
   * @returns - byte count at the given {@link BufferElementAlignmentPosition | position}
   */
  getByteCountAtPosition(position = { row: 0, byte: 0 }) {
    return position.row * bytesPerRow + position.byte;
  }
  /**
   * Check that a {@link BufferElementAlignmentPosition#byte | byte position} does not overflow its max value (16)
   * @param position - {@link BufferElementAlignmentPosition | position}
   * @returns - updated {@link BufferElementAlignmentPosition | position}
   */
  applyOverflowToPosition(position = { row: 0, byte: 0 }) {
    if (position.byte > bytesPerRow - 1) {
      const overflow = position.byte % bytesPerRow;
      position.row += Math.floor(position.byte / bytesPerRow);
      position.byte = overflow;
    }
    return position;
  }
  /**
   * Get the number of bytes between two {@link BufferElementAlignmentPosition | positions}
   * @param p1 - first {@link BufferElementAlignmentPosition | position}
   * @param p2 - second {@link BufferElementAlignmentPosition | position}
   * @returns - number of bytes
   */
  getByteCountBetweenPositions(p1 = { row: 0, byte: 0 }, p2 = { row: 0, byte: 0 }) {
    return Math.abs(this.getByteCountAtPosition(p2) - this.getByteCountAtPosition(p1));
  }
  /**
   * Compute the right alignment (i.e. start and end rows and bytes) given the size and align properties and the next available {@link BufferElementAlignmentPosition | position}
   * @param nextPositionAvailable - next {@link BufferElementAlignmentPosition | position} at which we should insert this element
   * @returns - computed {@link BufferElementAlignment | alignment}
   */
  getElementAlignment(nextPositionAvailable = { row: 0, byte: 0 }) {
    const alignment = {
      start: nextPositionAvailable,
      end: nextPositionAvailable
    };
    const { size, align } = this.bufferLayout;
    if (nextPositionAvailable.byte % align !== 0) {
      nextPositionAvailable.byte += nextPositionAvailable.byte % align;
    }
    if (size <= bytesPerRow && nextPositionAvailable.byte + size > bytesPerRow) {
      nextPositionAvailable.row += 1;
      nextPositionAvailable.byte = 0;
    }
    alignment.end = {
      row: nextPositionAvailable.row + Math.ceil(size / bytesPerRow) - 1,
      byte: nextPositionAvailable.byte + (size % bytesPerRow === 0 ? bytesPerRow - 1 : size % bytesPerRow - 1)
      // end of row ? then it ends on slot (bytesPerRow - 1)
    };
    alignment.end = this.applyOverflowToPosition(alignment.end);
    return alignment;
  }
  /**
   * Set the {@link BufferElementAlignment | alignment} from a {@link BufferElementAlignmentPosition | position}
   * @param position - {@link BufferElementAlignmentPosition | position} at which to start inserting the values in the {@link !core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   */
  setAlignmentFromPosition(position = { row: 0, byte: 0 }) {
    this.alignment = this.getElementAlignment(position);
  }
  /**
   * Set the {@link BufferElementAlignment | alignment} from an offset (byte count)
   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   */
  setAlignment(startOffset = 0) {
    this.setAlignmentFromPosition(this.getPositionAtOffset(startOffset));
  }
  /**
   * Set the {@link view}
   * @param arrayBuffer - the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   * @param arrayView - the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view}
   */
  setView(arrayBuffer, arrayView) {
    this.view = new this.bufferLayout.View(
      arrayBuffer,
      this.startOffset,
      this.byteCount / this.bufferLayout.View.BYTES_PER_ELEMENT
    );
  }
  /**
   * Update the {@link view} based on the new value
   * @param value - new value to use
   */
  update(value) {
    if (this.type === "f32" || this.type === "u32" || this.type === "i32") {
      this.view[0] = value;
    } else if (this.type === "vec2f") {
      this.view[0] = value.x ?? value[0] ?? 0;
      this.view[1] = value.y ?? value[1] ?? 0;
    } else if (this.type === "vec3f") {
      this.view[0] = value.x ?? value[0] ?? 0;
      this.view[1] = value.y ?? value[1] ?? 0;
      this.view[2] = value.z ?? value[2] ?? 0;
    } else if (value.elements) {
      this.view.set(value.elements);
    } else if (ArrayBuffer.isView(value) || Array.isArray(value)) {
      this.view.set(value);
    }
  }
  /**
   * Extract the data corresponding to this specific {@link BufferElement} from a {@link Float32Array} holding the {@link GPUBuffer} data of the parentMesh {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}
   * @param result - {@link Float32Array} holding {@link GPUBuffer} data
   * @returns - extracted data from the {@link Float32Array}
   */
  extractDataFromBufferResult(result) {
    return result.slice(this.startOffsetToIndex, this.endOffsetToIndex);
  }
}

class BufferArrayElement extends BufferElement {
  /**
   * BufferArrayElement constructor
   * @param parameters - {@link BufferArrayElementParams | parameters} used to create our {@link BufferArrayElement}
   */
  constructor({ name, key, type = "f32", arrayLength = 1 }) {
    super({ name, key, type });
    this.arrayLength = arrayLength;
    this.numElements = this.arrayLength / this.bufferLayout.numElements;
  }
  /**
   * Get the array stride between two elements of the array, in indices
   * @readonly
   */
  get arrayStrideToIndex() {
    return this.arrayStride / bytesPerSlot;
  }
  /**
   * Set the {@link core/bindings/bufferElements/BufferElement.BufferElementAlignment | alignment}
   * To compute how arrays are packed, we get the second item alignment as well and use it to calculate the arrayStride between two array elements. Using the arrayStride and the total number of elements, we can easily get the end alignment position.
   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array buffer}
   */
  setAlignment(startOffset = 0) {
    super.setAlignment(startOffset);
    const nextAlignment = this.getElementAlignment(this.getPositionAtOffset(this.endOffset + 1));
    this.arrayStride = this.getByteCountBetweenPositions(this.alignment.end, nextAlignment.end);
    this.alignment.end = this.getPositionAtOffset(this.endOffset + this.arrayStride * (this.numElements - 1));
  }
  /**
   * Update the {@link view} based on the new value
   * @param value - new value to use
   */
  update(value) {
    if (ArrayBuffer.isView(value) || Array.isArray(value)) {
      let valueIndex = 0;
      const viewLength = this.byteCount / this.bufferLayout.View.BYTES_PER_ELEMENT;
      const stride = Math.ceil(viewLength / this.numElements);
      for (let i = 0; i < this.numElements; i++) {
        for (let j = 0; j < this.bufferLayout.numElements; j++) {
          this.view[j + i * stride] = value[valueIndex];
          valueIndex++;
        }
      }
    } else {
      throwWarning(`BufferArrayElement: value passed to ${this.name} is not an array: ${value}`);
    }
  }
}

class BufferInterleavedArrayElement extends BufferArrayElement {
  /**
   * BufferInterleavedArrayElement constructor
   * @param parameters - {@link BufferArrayElementParams | parameters} used to create our {@link BufferInterleavedArrayElement}
   */
  constructor({ name, key, type = "f32", arrayLength = 1 }) {
    super({ name, key, type, arrayLength });
    this.arrayStride = 1;
    this.arrayLength = arrayLength;
    this.numElements = this.arrayLength / this.bufferLayout.numElements;
  }
  /**
   * Get the total number of slots used by this {@link BufferInterleavedArrayElement} based on buffer layout size and total number of elements
   * @readonly
   */
  get byteCount() {
    return this.bufferLayout.size * this.numElements;
  }
  /**
   * Set the {@link core/bindings/bufferElements/BufferElement.BufferElementAlignment | alignment}
   * To compute how arrays are packed, we need to compute the arrayStride between two elements beforehand and pass it here. Using the arrayStride and the total number of elements, we can easily get the end alignment position.
   * @param startOffset - offset at which to start inserting the values in the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   * @param stride - Stride in the {@link ArrayBuffer} between two elements of the array
   */
  setAlignment(startOffset = 0, stride = 0) {
    this.alignment = this.getElementAlignment(this.getPositionAtOffset(startOffset));
    this.arrayStride = stride;
    this.alignment.end = this.getPositionAtOffset(this.endOffset + stride * (this.numElements - 1));
  }
  /**
   * Set the {@link view} and {@link viewSetFunction}
   * @param arrayBuffer - the {@link core/bindings/BufferBinding.BufferBinding#arrayBuffer | buffer binding array}
   * @param arrayView - the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view}
   */
  setView(arrayBuffer, arrayView) {
    this.view = new this.bufferLayout.View(this.bufferLayout.numElements * this.numElements);
    this.viewSetFunction = ((arrayView2) => {
      switch (this.bufferLayout.View) {
        case Int32Array:
          return arrayView2.setInt32.bind(arrayView2);
        case Uint16Array:
          return arrayView2.setUint16.bind(arrayView2);
        case Uint32Array:
          return arrayView2.setUint32.bind(arrayView2);
        case Float32Array:
        default:
          return arrayView2.setFloat32.bind(arrayView2);
      }
    })(arrayView);
  }
  /**
   * Update the {@link view} based on the new value, and then update the {@link core/bindings/BufferBinding.BufferBinding#arrayView | buffer binding array view} using sub arrays
   * @param value - new value to use
   */
  update(value) {
    super.update(value);
    for (let i = 0; i < this.numElements; i++) {
      const subarray = this.view.subarray(
        i * this.bufferLayout.numElements,
        i * this.bufferLayout.numElements + this.bufferLayout.numElements
      );
      const startByteOffset = this.startOffset + i * this.arrayStride;
      subarray.forEach((value2, index) => {
        this.viewSetFunction(startByteOffset + index * this.bufferLayout.View.BYTES_PER_ELEMENT, value2, true);
      });
    }
  }
  /**
   * Extract the data corresponding to this specific {@link BufferInterleavedArrayElement} from a {@link Float32Array} holding the {@link GPUBuffer} data of the parentMesh {@link core/bindings/BufferBinding.BufferBinding | BufferBinding}
   * @param result - {@link Float32Array} holding {@link GPUBuffer} data
   */
  extractDataFromBufferResult(result) {
    const interleavedResult = new Float32Array(this.arrayLength);
    for (let i = 0; i < this.numElements; i++) {
      const resultOffset = this.startOffsetToIndex + i * this.arrayStrideToIndex;
      for (let j = 0; j < this.bufferLayout.numElements; j++) {
        interleavedResult[i * this.bufferLayout.numElements + j] = result[resultOffset + j];
      }
    }
    return interleavedResult;
  }
}

class BufferBinding extends Binding {
  /**
   * BufferBinding constructor
   * @param parameters - {@link BufferBindingParams | parameters} used to create our BufferBindings
   */
  constructor({
    label = "Uniform",
    name = "uniform",
    bindingType,
    visibility,
    useStruct = true,
    access = "read",
    struct = {}
  }) {
    bindingType = bindingType ?? "uniform";
    super({ label, name, bindingType, visibility });
    this.options = {
      ...this.options,
      useStruct,
      access,
      struct
    };
    this.arrayBufferSize = 0;
    this.shouldUpdate = false;
    this.useStruct = useStruct;
    this.bufferElements = [];
    this.inputs = {};
    this.buffer = null;
    this.setBindings(struct);
    this.setBufferAttributes();
    this.setWGSLFragment();
  }
  /**
   * Get {@link GPUBindGroupLayoutEntry#buffer | bind group layout entry resource}
   * @readonly
   */
  get resourceLayout() {
    return {
      buffer: {
        type: getBindGroupLayoutBindingType(this)
      }
    };
  }
  /**
   * Get {@link GPUBindGroupEntry#resource | bind group resource}
   * @readonly
   */
  get resource() {
    return { buffer: this.buffer };
  }
  /**
   * Format bindings struct and set our {@link inputs}
   * @param bindings - bindings inputs
   */
  setBindings(bindings) {
    Object.keys(bindings).forEach((bindingKey) => {
      const binding = {};
      for (const key in bindings[bindingKey]) {
        if (key !== "value") {
          binding[key] = bindings[bindingKey][key];
        }
      }
      Object.defineProperty(binding, "value", {
        get() {
          return binding._value;
        },
        set(v) {
          binding._value = v;
          binding.shouldUpdate = true;
        }
      });
      binding.value = bindings[bindingKey].value;
      if (binding.value instanceof Vec2 || binding.value instanceof Vec3) {
        binding.value.onChange(() => binding.shouldUpdate = true);
      }
      this.inputs[bindingKey] = binding;
    });
  }
  /**
   * Set our buffer attributes:
   * Takes all the {@link inputs} and adds them to the {@link bufferElements} array with the correct start and end offsets (padded), then fill our {@link arrayBuffer} typed array accordingly.
   */
  setBufferAttributes() {
    const arrayBindings = Object.keys(this.inputs).filter(
      (bindingKey) => this.inputs[bindingKey].type.indexOf("array") !== -1
    );
    let orderedBindings = Object.keys(this.inputs).sort((bindingKeyA, bindingKeyB) => {
      const isBindingAArray = Math.min(0, this.inputs[bindingKeyA].type.indexOf("array"));
      const isBindingBArray = Math.min(0, this.inputs[bindingKeyB].type.indexOf("array"));
      return isBindingAArray - isBindingBArray;
    });
    if (arrayBindings.length > 1) {
      orderedBindings = orderedBindings.filter((bindingKey) => !arrayBindings.includes(bindingKey));
    }
    orderedBindings.forEach((bindingKey) => {
      const binding = this.inputs[bindingKey];
      const bufferElementOptions = {
        name: toCamelCase(binding.name ?? bindingKey),
        key: bindingKey,
        type: binding.type
      };
      const isArray = binding.type.indexOf("array") !== -1 && (Array.isArray(binding.value) || ArrayBuffer.isView(binding.value));
      this.bufferElements.push(
        isArray ? new BufferArrayElement({
          ...bufferElementOptions,
          arrayLength: binding.value.length
        }) : new BufferElement(bufferElementOptions)
      );
    });
    this.bufferElements.forEach((bufferElement, index) => {
      const startOffset = index === 0 ? 0 : this.bufferElements[index - 1].endOffset + 1;
      bufferElement.setAlignment(startOffset);
    });
    if (arrayBindings.length > 1) {
      const arraySizes = arrayBindings.map((bindingKey) => {
        const binding = this.inputs[bindingKey];
        const bufferLayout = getBufferLayout(binding.type.replace("array", "").replace("<", "").replace(">", ""));
        return binding.value.length / bufferLayout.numElements;
      });
      const equalSize = arraySizes.every((size, i, array) => size === array[0]);
      if (equalSize) {
        const interleavedBufferElements = arrayBindings.map((bindingKey) => {
          const binding = this.inputs[bindingKey];
          return new BufferInterleavedArrayElement({
            name: toCamelCase(binding.name ?? bindingKey),
            key: bindingKey,
            type: binding.type,
            arrayLength: binding.value.length
          });
        });
        const tempBufferElements = arrayBindings.map((bindingKey) => {
          const binding = this.inputs[bindingKey];
          return new BufferElement({
            name: toCamelCase(binding.name ?? bindingKey),
            key: bindingKey,
            type: binding.type.replace("array", "").replace("<", "").replace(">", "")
          });
        });
        tempBufferElements.forEach((bufferElement, index) => {
          if (index === 0) {
            if (this.bufferElements.length) {
              bufferElement.setAlignmentFromPosition({
                row: this.bufferElements[this.bufferElements.length - 1].alignment.end.row + 1,
                byte: 0
              });
            } else {
              bufferElement.setAlignment(0);
            }
          } else {
            bufferElement.setAlignment(tempBufferElements[index - 1].endOffset + 1);
          }
        });
        const totalStride = tempBufferElements[tempBufferElements.length - 1].endOffset + 1 - tempBufferElements[0].startOffset;
        interleavedBufferElements.forEach((bufferElement, index) => {
          bufferElement.setAlignment(tempBufferElements[index].startOffset, totalStride);
        });
        this.bufferElements = [...this.bufferElements, ...interleavedBufferElements];
      } else {
        throwWarning(
          `BufferBinding: "${this.label}" contains multiple array inputs that should use an interleaved array, but their sizes do not match. These inputs cannot be added to the BufferBinding: "${arrayBindings.join(
            ", "
          )}"`
        );
      }
    }
    this.arrayBufferSize = this.bufferElements.length ? this.bufferElements[this.bufferElements.length - 1].paddedByteCount : 0;
    this.arrayBuffer = new ArrayBuffer(this.arrayBufferSize);
    this.arrayView = new DataView(this.arrayBuffer, 0, this.arrayBuffer.byteLength);
    this.bufferElements.forEach((bufferElement) => {
      bufferElement.setView(this.arrayBuffer, this.arrayView);
    });
    this.shouldUpdate = this.arrayBufferSize > 0;
  }
  /**
   * Set the WGSL code snippet to append to the shaders code. It consists of variable (and Struct structures if needed) declarations.
   */
  setWGSLFragment() {
    const kebabCaseLabel = toKebabCase(this.label);
    if (this.useStruct) {
      const bufferElements = this.bufferElements.filter(
        (bufferElement) => !(bufferElement instanceof BufferInterleavedArrayElement)
      );
      const interleavedBufferElements = this.bufferElements.filter(
        (bufferElement) => bufferElement instanceof BufferInterleavedArrayElement
      );
      if (interleavedBufferElements.length) {
        const arrayLength = this.bindingType === "uniform" ? `, ${interleavedBufferElements[0].numElements}` : "";
        if (bufferElements.length) {
          this.wgslStructFragment = `struct ${kebabCaseLabel}Element {
	${interleavedBufferElements.map((binding) => binding.name + ": " + binding.type.replace("array", "").replace("<", "").replace(">", "")).join(",\n	")}
};

`;
          const interleavedBufferStructDeclaration = `${this.name}Element: array<${kebabCaseLabel}Element${arrayLength}>,`;
          this.wgslStructFragment += `struct ${kebabCaseLabel} {
	${bufferElements.map((bufferElement) => bufferElement.name + ": " + bufferElement.type).join(",\n	")}
	${interleavedBufferStructDeclaration}
};`;
          const varType = getBindingWGSLVarType(this);
          this.wgslGroupFragment = [`${varType} ${this.name}: ${kebabCaseLabel};`];
        } else {
          this.wgslStructFragment = `struct ${kebabCaseLabel} {
	${this.bufferElements.map((binding) => binding.name + ": " + binding.type.replace("array", "").replace("<", "").replace(">", "")).join(",\n	")}
};`;
          const varType = getBindingWGSLVarType(this);
          this.wgslGroupFragment = [`${varType} ${this.name}: array<${kebabCaseLabel}${arrayLength}>;`];
        }
      } else {
        this.wgslStructFragment = `struct ${kebabCaseLabel} {
	${this.bufferElements.map((binding) => {
          const bindingType = this.bindingType === "uniform" && "numElements" in binding ? `array<${binding.type.replace("array", "").replace("<", "").replace(">", "")}, ${binding.numElements}>` : binding.type;
          return binding.name + ": " + bindingType;
        }).join(",\n	")}
};`;
        const varType = getBindingWGSLVarType(this);
        this.wgslGroupFragment = [`${varType} ${this.name}: ${kebabCaseLabel};`];
      }
    } else {
      this.wgslStructFragment = "";
      this.wgslGroupFragment = this.bufferElements.map((binding) => {
        const varType = getBindingWGSLVarType(this);
        return `${varType} ${binding.name}: ${binding.type};`;
      });
    }
  }
  /**
   * Set a binding shouldUpdate flag to true to update our {@link arrayBuffer} array during next render.
   * @param bindingName - the binding name/key to update
   */
  shouldUpdateBinding(bindingName = "") {
    const bindingKey = Object.keys(this.inputs).find((bindingKey2) => this.inputs[bindingKey2].name === bindingName);
    if (bindingKey)
      this.inputs[bindingKey].shouldUpdate = true;
  }
  /**
   * Executed at the beginning of a Material render call.
   * If any of the {@link inputs} has changed, run its onBeforeUpdate callback then updates our {@link arrayBuffer} array.
   * Also sets the {@link shouldUpdate} property to true so the {@link core/bindGroups/BindGroup.BindGroup | BindGroup} knows it will need to update the {@link GPUBuffer}.
   */
  update() {
    Object.keys(this.inputs).forEach((bindingKey) => {
      const binding = this.inputs[bindingKey];
      const bufferElement = this.bufferElements.find((bufferEl) => bufferEl.key === bindingKey);
      if (binding.shouldUpdate && bufferElement) {
        binding.onBeforeUpdate && binding.onBeforeUpdate();
        bufferElement.update(binding.value);
        this.shouldUpdate = true;
        binding.shouldUpdate = false;
      }
    });
  }
  /**
   * Extract the data corresponding to a specific {@link BufferElement} from a {@link Float32Array} holding the {@link BufferBinding#buffer | GPU buffer} data of this {@link BufferBinding}
   * @param parameters - parameters used to extract the data
   * @param parameters.result - {@link Float32Array} holding {@link GPUBuffer} data
   * @param parameters.bufferElementName - name of the {@link BufferElement} to use to extract the data
   * @returns - extracted data from the {@link Float32Array}
   */
  extractBufferElementDataFromBufferResult({
    result,
    bufferElementName
  }) {
    const bufferElement = this.bufferElements.find((bufferElement2) => bufferElement2.name === bufferElementName);
    if (bufferElement) {
      return bufferElement.extractDataFromBufferResult(result);
    } else {
      return result;
    }
  }
}

class WritableBufferBinding extends BufferBinding {
  /**
   * WritableBufferBinding constructor
   * @param parameters - {@link WritableBufferBindingParams | parameters} used to create our {@link WritableBufferBinding}
   */
  constructor({
    label = "Work",
    name = "work",
    bindingType,
    useStruct = true,
    struct = {},
    visibility,
    access = "read_write",
    shouldCopyResult = false
  }) {
    bindingType = "storage";
    visibility = "compute";
    super({ label, name, bindingType, useStruct, struct, visibility, access });
    this.options = {
      ...this.options,
      shouldCopyResult
    };
    this.shouldCopyResult = shouldCopyResult;
    this.resultBuffer = null;
  }
}

class BindGroup {
  /**
   * BindGroup constructor
   * @param renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object
   * @param parameters - {@link BindGroupParams | parameters} used to create our {@link BindGroup}
   */
  constructor(renderer, { label = "BindGroup", index = 0, bindings = [], uniforms, storages } = {}) {
    this.type = "BindGroup";
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, this.type);
    this.renderer = renderer;
    this.options = {
      label,
      index,
      bindings,
      ...uniforms && { uniforms },
      ...storages && { storages }
    };
    this.index = index;
    this.uuid = generateUUID();
    this.bindings = [];
    bindings.length && this.addBindings(bindings);
    if (this.options.uniforms || this.options.storages)
      this.setInputBindings();
    this.resetEntries();
    this.bindGroupLayout = null;
    this.bindGroup = null;
    this.needsPipelineFlush = false;
    this.renderer.addBindGroup(this);
  }
  /**
   * Sets our {@link BindGroup#index | bind group index}
   * @param index - {@link BindGroup#index | bind group index} to set
   */
  setIndex(index) {
    this.index = index;
  }
  /**
   * Adds an array of already created {@link bindings} (buffers, texture, etc.) to the {@link bindings} array
   * @param bindings - {@link bindings} to add
   */
  addBindings(bindings = []) {
    this.bindings = [...this.bindings, ...bindings];
  }
  /**
   * Adds an already created {@link bindings} (buffers, texture, etc.) to the {@link bindings} array
   * @param binding - binding to add
   */
  addBinding(binding) {
    this.bindings.push(binding);
  }
  /**
   * Creates Bindings based on a list of inputs
   * @param bindingType - {@link core/bindings/Binding.Binding#bindingType | binding type}
   * @param inputs - {@link ReadOnlyInputBindings | inputs (uniform or storage)} that will be used to create the binding
   * @returns - a {@link bindings} array
   */
  createInputBindings(bindingType = "uniform", inputs = {}) {
    return [
      ...Object.keys(inputs).map((inputKey) => {
        const binding = inputs[inputKey];
        const bindingParams = {
          label: toKebabCase(binding.label || inputKey),
          name: inputKey,
          bindingType,
          useStruct: true,
          // by default
          visibility: binding.access === "read_write" ? "compute" : binding.visibility,
          access: binding.access ?? "read",
          // read by default
          struct: binding.struct,
          ...binding.shouldCopyResult !== void 0 && { shouldCopyResult: binding.shouldCopyResult }
        };
        const BufferBindingConstructor = bindingParams.access === "read_write" ? WritableBufferBinding : BufferBinding;
        return binding.useStruct !== false ? new BufferBindingConstructor(bindingParams) : Object.keys(binding.struct).map((bindingKey) => {
          bindingParams.label = toKebabCase(binding.label ? binding.label + bindingKey : inputKey + bindingKey);
          bindingParams.name = inputKey + bindingKey;
          bindingParams.useStruct = false;
          bindingParams.struct = { [bindingKey]: binding.struct[bindingKey] };
          return new BufferBindingConstructor(bindingParams);
        });
      })
    ].flat();
  }
  /**
   * Create and adds {@link bindings} based on inputs provided upon creation
   */
  setInputBindings() {
    this.addBindings([
      ...this.createInputBindings("uniform", this.options.uniforms),
      ...this.createInputBindings("storage", this.options.storages)
    ]);
  }
  /**
   * Get whether the GPU bind group is ready to be created
   * It can be created if it has {@link bindings} and has not been created yet
   * @readonly
   */
  get shouldCreateBindGroup() {
    return !this.bindGroup && !!this.bindings.length;
  }
  /**
   * Reset our {@link BindGroup} {@link entries}
   */
  resetEntries() {
    this.entries = {
      bindGroupLayout: [],
      bindGroup: []
    };
  }
  /**
   * Create the GPU buffers, {@link bindings}, {@link entries}, {@link bindGroupLayout} and {@link bindGroup}
   */
  createBindGroup() {
    this.fillEntries();
    this.setBindGroupLayout();
    this.setBindGroup();
  }
  /**
   * Reset the {@link BindGroup#entries.bindGroup | bindGroup entries}, recreates them and then recreate the {@link BindGroup#bindGroup | GPU bind group}
   */
  resetBindGroup() {
    this.entries.bindGroup = [];
    this.bindings.forEach((binding) => {
      this.entries.bindGroup.push({
        binding: this.entries.bindGroup.length,
        resource: binding.resource
      });
    });
    this.setBindGroup();
  }
  /**
   * Reset the {@link BindGroup#entries.bindGroupLayout | bindGroupLayout entries}, recreates them and then recreate the {@link BindGroup#bindGroupLayout | GPU bind group layout}
   */
  resetBindGroupLayout() {
    this.entries.bindGroupLayout = [];
    this.bindings.forEach((binding) => {
      this.entries.bindGroupLayout.push({
        binding: this.entries.bindGroupLayout.length,
        ...binding.resourceLayout,
        visibility: binding.visibility
      });
    });
    this.setBindGroupLayout();
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration
   */
  loseContext() {
    this.resetEntries();
    this.bufferBindings.forEach((binding) => {
      binding.buffer = null;
      if ("resultBuffer" in binding) {
        binding.resultBuffer = null;
      }
    });
    this.bindGroup = null;
    this.bindGroupLayout = null;
    this.needsPipelineFlush = true;
  }
  /**
   * Get all {@link BindGroup#bindings | bind group bindings} that handle a {@link GPUBuffer}
   */
  get bufferBindings() {
    return this.bindings.filter(
      (binding) => binding instanceof BufferBinding || binding instanceof WritableBufferBinding
    );
  }
  /**
   * Creates binding GPUBuffer with correct params
   * @param binding - the binding element
   */
  createBindingBuffer(binding) {
    binding.buffer = this.renderer.createBuffer({
      label: this.options.label + ": " + binding.bindingType + " buffer from: " + binding.label,
      size: binding.arrayBuffer.byteLength,
      usage: binding.bindingType === "uniform" ? GPUBufferUsage.UNIFORM | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX : GPUBufferUsage.STORAGE | GPUBufferUsage.COPY_DST | GPUBufferUsage.COPY_SRC | GPUBufferUsage.VERTEX
    });
    if ("resultBuffer" in binding) {
      binding.resultBuffer = this.renderer.createBuffer({
        label: this.options.label + ": Result buffer from: " + binding.label,
        size: binding.arrayBuffer.byteLength,
        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
      });
    }
  }
  /**
   * Fill in our entries bindGroupLayout and bindGroup arrays with the correct binding resources.
   * For buffer struct, create a GPUBuffer first if needed
   */
  fillEntries() {
    this.bindings.forEach((binding) => {
      if (!binding.visibility) {
        binding.visibility = GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE;
      }
      if ("buffer" in binding && !binding.buffer) {
        this.createBindingBuffer(binding);
      }
      this.entries.bindGroupLayout.push({
        binding: this.entries.bindGroupLayout.length,
        ...binding.resourceLayout,
        visibility: binding.visibility
      });
      this.entries.bindGroup.push({
        binding: this.entries.bindGroup.length,
        resource: binding.resource
      });
    });
  }
  /**
   * Get a bind group binding by name/key
   * @param bindingName - the binding name or key
   * @returns - the found binding, or null if not found
   */
  getBindingByName(bindingName = "") {
    return this.bindings.find((binding) => binding.name === bindingName);
  }
  /**
   * Create a GPUBindGroupLayout and set our {@link bindGroupLayout}
   */
  setBindGroupLayout() {
    this.bindGroupLayout = this.renderer.createBindGroupLayout({
      label: this.options.label + " layout",
      entries: this.entries.bindGroupLayout
    });
  }
  /**
   * Create a GPUBindGroup and set our {@link bindGroup}
   */
  setBindGroup() {
    this.bindGroup = this.renderer.createBindGroup({
      label: this.options.label,
      layout: this.bindGroupLayout,
      entries: this.entries.bindGroup
    });
  }
  /**
   * Check whether we should update (write) our {@link GPUBuffer} or not.
   */
  updateBufferBindings() {
    this.bufferBindings.forEach((binding, index) => {
      binding.update();
      if (binding.shouldUpdate) {
        if (!binding.useStruct && binding.bufferElements.length > 1) {
          this.renderer.queueWriteBuffer(binding.buffer, 0, binding.bufferElements[index].view);
        } else {
          this.renderer.queueWriteBuffer(binding.buffer, 0, binding.arrayBuffer);
        }
      }
      binding.shouldUpdate = false;
    });
  }
  /**
   * Update the {@link BindGroup}, which means update its {@link BindGroup#bufferBindings | buffer bindings} and {@link BindGroup#resetBindGroup | reset it} if needed.
   * Called at each render from the parentMesh {@link core/materials/Material.Material | material}
   */
  update() {
    this.updateBufferBindings();
    const needBindGroupReset = this.bindings.some((binding) => binding.shouldResetBindGroup);
    const needBindGroupLayoutReset = this.bindings.some((binding) => binding.shouldResetBindGroupLayout);
    if (needBindGroupReset || needBindGroupLayoutReset) {
      this.renderer.onAfterCommandEncoderSubmission.add(
        () => {
          this.bindings.forEach((binding) => {
            binding.shouldResetBindGroup = false;
            binding.shouldResetBindGroupLayout = false;
          });
        },
        { once: true }
      );
    }
    if (needBindGroupLayoutReset) {
      this.resetBindGroupLayout();
      this.needsPipelineFlush = true;
    }
    if (needBindGroupReset) {
      this.resetBindGroup();
    }
  }
  /**
   * Clones a {@link BindGroup} from a list of {@link bindings}
   * Useful to create a new bind group with already created buffers, but swapped
   * @param parameters - parameters to use for cloning
   * @param parameters.bindings - our input {@link bindings}
   * @param [parameters.keepLayout=false] - whether we should keep original {@link bindGroupLayout} or not
   * @returns - the cloned {@link BindGroup}
   */
  clone({
    bindings = [],
    keepLayout = false
  } = {}) {
    const params = { ...this.options };
    params.label += " (copy)";
    const bindGroupCopy = new this.constructor(this.renderer, {
      label: params.label
    });
    bindGroupCopy.setIndex(this.index);
    bindGroupCopy.options = params;
    const bindingsRef = bindings.length ? bindings : this.bindings;
    bindingsRef.forEach((binding, index) => {
      bindGroupCopy.addBinding(binding);
      if ("buffer" in binding && !binding.buffer) {
        bindGroupCopy.createBindingBuffer(binding);
      }
      if (!keepLayout) {
        bindGroupCopy.entries.bindGroupLayout.push({
          binding: bindGroupCopy.entries.bindGroupLayout.length,
          ...binding.resourceLayout,
          visibility: binding.visibility
        });
      }
      bindGroupCopy.entries.bindGroup.push({
        binding: bindGroupCopy.entries.bindGroup.length,
        resource: binding.resource
      });
    });
    if (keepLayout) {
      bindGroupCopy.entries.bindGroupLayout = [...this.entries.bindGroupLayout];
    }
    bindGroupCopy.setBindGroupLayout();
    bindGroupCopy.setBindGroup();
    return bindGroupCopy;
  }
  /**
   * Destroy our {@link BindGroup}
   * Most important is to destroy the GPUBuffers to free the memory
   */
  destroy() {
    this.renderer.removeBindGroup(this);
    this.bufferBindings.forEach((binding) => {
      if ("buffer" in binding) {
        this.renderer.removeBuffer(binding.buffer);
        binding.buffer?.destroy();
        binding.buffer = null;
      }
      if ("resultBuffer" in binding) {
        this.renderer.removeBuffer(binding.resultBuffer);
        binding.resultBuffer?.destroy();
        binding.resultBuffer = null;
      }
    });
    this.bindings = [];
    this.bindGroupLayout = null;
    this.bindGroup = null;
    this.resetEntries();
  }
}

class TextureBinding extends Binding {
  /**
   * TextureBinding constructor
   * @param parameters - {@link TextureBindingParams | parameters} used to create our {@link TextureBinding}
   */
  constructor({
    label = "Texture",
    name = "texture",
    bindingType,
    visibility,
    texture,
    format = "rgba8unorm",
    access = "write",
    viewDimension = "2d",
    multisampled = false
  }) {
    bindingType = bindingType ?? "texture";
    if (bindingType === "storageTexture") {
      visibility = "compute";
    }
    super({ label, name, bindingType, visibility });
    this.options = {
      ...this.options,
      texture,
      format,
      access,
      viewDimension,
      multisampled
    };
    this.resource = texture;
    this.setWGSLFragment();
  }
  /**
   * Get bind group layout entry resource, either for {@link GPUBindGroupLayoutEntry#texture | texture} or {@link GPUBindGroupLayoutEntry#externalTexture | external texture}
   * @readonly
   */
  get resourceLayout() {
    return getBindGroupLayoutTextureBindingType(this);
  }
  /**
   * Get the {@link GPUBindGroupEntry#resource | bind group resource}
   */
  get resource() {
    return this.texture instanceof GPUTexture ? this.texture.createView({ label: this.options.label + " view" }) : this.texture instanceof GPUExternalTexture ? this.texture : null;
  }
  /**
   * Set the {@link GPUBindGroupEntry#resource | bind group resource}
   * @param value - new bind group resource
   */
  set resource(value) {
    if (value || this.texture)
      this.shouldResetBindGroup = true;
    this.texture = value;
  }
  /**
   * Set or update our {@link Binding#bindingType | bindingType} and our WGSL code snippet
   * @param bindingType - the new {@link Binding#bindingType | binding type}
   */
  setBindingType(bindingType) {
    if (bindingType !== this.bindingType) {
      if (bindingType)
        this.shouldResetBindGroupLayout = true;
      this.bindingType = bindingType;
      this.setWGSLFragment();
    }
  }
  /**
   * Set the correct WGSL code snippet.
   */
  setWGSLFragment() {
    this.wgslGroupFragment = [`${getTextureBindingWGSLVarType(this)}`];
  }
}

let objectIndex = 0;
class Object3D {
  /**
   * Object3D constructor
   */
  constructor() {
    this.parent = null;
    this.children = [];
    Object.defineProperty(this, "object3DIndex", { value: objectIndex++ });
    this.setMatrices();
    this.setTransforms();
  }
  /* PARENT */
  /**
   * Get the parent of this {@link Object3D} if any
   */
  get parent() {
    return this._parent;
  }
  /**
   * Set the parent of this {@link Object3D}
   * @param value - new parent to set, could be an {@link Object3D} or null
   */
  set parent(value) {
    if (this.parent) {
      this.parent.children = this.parent.children.filter((child) => child.object3DIndex !== this.object3DIndex);
    }
    this._parent = value;
    this._parent?.children.push(this);
  }
  /* TRANSFORMS */
  /**
   * Set our transforms properties and {@link Vec3#onChange | vectors onChange} callbacks
   */
  setTransforms() {
    this.transforms = {
      origin: {
        model: new Vec3()
      },
      quaternion: new Quat(),
      rotation: new Vec3(),
      position: {
        world: new Vec3()
      },
      scale: new Vec3(1)
    };
    this.rotation.onChange(() => this.applyRotation());
    this.position.onChange(() => this.applyPosition());
    this.scale.onChange(() => this.applyScale());
    this.transformOrigin.onChange(() => this.applyTransformOrigin());
  }
  /**
   * Get our rotation {@link Vec3 | vector}
   */
  get rotation() {
    return this.transforms.rotation;
  }
  /**
   * Set our rotation {@link Vec3 | vector}
   * @param value - new rotation {@link Vec3 | vector}
   */
  set rotation(value) {
    this.transforms.rotation = value;
    this.applyRotation();
  }
  /**
   * Get our {@link Quat | quaternion}
   */
  get quaternion() {
    return this.transforms.quaternion;
  }
  /**
   * Set our {@link Quat | quaternion}
   * @param value - new {@link Quat | quaternion}
   */
  set quaternion(value) {
    this.transforms.quaternion = value;
  }
  /**
   * Get our position {@link Vec3 | vector}
   */
  get position() {
    return this.transforms.position.world;
  }
  /**
   * Set our position {@link Vec3 | vector}
   * @param value - new position {@link Vec3 | vector}
   */
  set position(value) {
    this.transforms.position.world = value;
  }
  /**
   * Get our scale {@link Vec3 | vector}
   */
  get scale() {
    return this.transforms.scale;
  }
  /**
   * Set our scale {@link Vec3 | vector}
   * @param value - new scale {@link Vec3 | vector}
   */
  set scale(value) {
    this.transforms.scale = value;
    this.applyScale();
  }
  /**
   * Get our transform origin {@link Vec3 | vector}
   */
  get transformOrigin() {
    return this.transforms.origin.model;
  }
  /**
   * Set our transform origin {@link Vec3 | vector}
   * @param value - new transform origin {@link Vec3 | vector}
   */
  set transformOrigin(value) {
    this.transforms.origin.model = value;
  }
  /**
   * Apply our rotation and tell our {@link modelMatrix | model matrix} to update
   */
  applyRotation() {
    this.quaternion.setFromVec3(this.rotation);
    this.shouldUpdateModelMatrix();
  }
  /**
   * Tell our {@link modelMatrix | model matrix} to update
   */
  applyPosition() {
    this.shouldUpdateModelMatrix();
  }
  /**
   * Tell our {@link modelMatrix | model matrix} to update
   */
  applyScale() {
    this.shouldUpdateModelMatrix();
  }
  /**
   * Tell our {@link modelMatrix | model matrix} to update
   */
  applyTransformOrigin() {
    this.shouldUpdateModelMatrix();
  }
  /* MATRICES */
  /**
   * Set our {@link modelMatrix | model matrix} and {@link worldMatrix | world matrix}
   */
  setMatrices() {
    this.matrices = {
      model: {
        matrix: new Mat4(),
        shouldUpdate: false,
        onUpdate: () => this.updateModelMatrix()
      },
      world: {
        matrix: new Mat4(),
        shouldUpdate: false,
        onUpdate: () => this.updateWorldMatrix()
      }
    };
  }
  /**
   * Get our {@link Mat4 | model matrix}
   */
  get modelMatrix() {
    return this.matrices.model.matrix;
  }
  /**
   * Set our {@link Mat4 | model matrix}
   * @param value - new {@link Mat4 | model matrix}
   */
  set modelMatrix(value) {
    this.matrices.model.matrix = value;
    this.shouldUpdateModelMatrix();
  }
  /**
   * Set our {@link modelMatrix | model matrix} shouldUpdate flag to true (tell it to update)
   */
  shouldUpdateModelMatrix() {
    this.matrices.model.shouldUpdate = true;
    this.shouldUpdateWorldMatrix();
  }
  /**
   * Get our {@link Mat4 | world matrix}
   */
  get worldMatrix() {
    return this.matrices.world.matrix;
  }
  /**
   * Set our {@link Mat4 | world matrix}
   * @param value - new {@link Mat4 | world matrix}
   */
  set worldMatrix(value) {
    this.matrices.world.matrix = value;
    this.shouldUpdateWorldMatrix();
  }
  /**
   * Set our {@link worldMatrix | world matrix} shouldUpdate flag to true (tell it to update)
   */
  shouldUpdateWorldMatrix() {
    this.matrices.world.shouldUpdate = true;
  }
  /**
   * Rotate this {@link Object3D} so it looks at the {@link Vec3 | target}
   * @param target - {@link Vec3 | target} to look at
   */
  lookAt(target = new Vec3()) {
    const rotationMatrix = new Mat4().lookAt(target, this.position);
    this.quaternion.setFromRotationMatrix(rotationMatrix);
    this.shouldUpdateModelMatrix();
  }
  /**
   * Update our {@link modelMatrix | model matrix}
   */
  updateModelMatrix() {
    this.modelMatrix = this.modelMatrix.composeFromOrigin(
      this.position,
      this.quaternion,
      this.scale,
      this.transformOrigin
    );
    this.shouldUpdateWorldMatrix();
  }
  /**
   * Update our {@link worldMatrix | model matrix}
   */
  updateWorldMatrix() {
    if (!this.parent) {
      this.worldMatrix.copy(this.modelMatrix);
    } else {
      this.worldMatrix.multiplyMatrices(this.parent.worldMatrix, this.modelMatrix);
    }
    this.children.forEach((child) => {
      child.shouldUpdateWorldMatrix();
    });
  }
  /**
   * Callback to run if at least one matrix of the stack has been updated
   */
  onAfterMatrixStackUpdate() {
  }
  /**
   * Check at each render whether we should update our matrices, and update them if needed
   */
  updateMatrixStack() {
    if (this.parent && this.parent.constructor.name === "Object3D") {
      this.parent.updateMatrixStack();
    }
    const matrixShouldUpdate = !!Object.keys(this.matrices).find((matrixName) => this.matrices[matrixName].shouldUpdate);
    if (matrixShouldUpdate) {
      for (const matrixName in this.matrices) {
        if (this.matrices[matrixName].shouldUpdate) {
          this.matrices[matrixName].onUpdate();
          this.matrices[matrixName].shouldUpdate = false;
        }
      }
      this.onAfterMatrixStackUpdate();
    }
  }
}

var __accessCheck$7 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet$6 = (obj, member, getter) => {
  __accessCheck$7(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$7 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var _parentRatio, _sourceRatio, _coverScale, _rotationMatrix;
const defaultTextureParams = {
  name: "texture",
  generateMips: false,
  flipY: false,
  format: "rgba8unorm",
  premultipliedAlpha: true,
  placeholderColor: [0, 0, 0, 255],
  // default to black
  useExternalTextures: true,
  fromTexture: null,
  viewDimension: "2d",
  cache: true
};
class Texture extends Object3D {
  /**
   * Texture constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Texture}
   * @param parameters - {@link TextureParams | parameters} used to create this {@link Texture}
   */
  constructor(renderer, parameters = defaultTextureParams) {
    super();
    /** Private {@link Vec3 | vector} used for {@link#modelMatrix} calculations, based on {@link parentMesh} {@link RectSize | size} */
    __privateAdd$7(this, _parentRatio, new Vec3(1));
    /** Private {@link Vec3 | vector} used for {@link modelMatrix} calculations, based on {@link size | source size} */
    __privateAdd$7(this, _sourceRatio, new Vec3(1));
    /** Private {@link Vec3 | vector} used for {@link modelMatrix} calculations, based on #parentRatio and #sourceRatio */
    __privateAdd$7(this, _coverScale, new Vec3(1));
    /** Private rotation {@link Mat4 | matrix} based on texture {@link quaternion} */
    __privateAdd$7(this, _rotationMatrix, new Mat4());
    // callbacks / events
    /** function assigned to the {@link onSourceLoaded} callback */
    this._onSourceLoadedCallback = () => {
    };
    /** function assigned to the {@link onSourceUploaded} callback */
    this._onSourceUploadedCallback = () => {
    };
    this.type = "Texture";
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, parameters.label ? parameters.label + " " + this.type : this.type);
    this.renderer = renderer;
    this.uuid = generateUUID();
    const defaultOptions = {
      ...defaultTextureParams,
      source: parameters.fromTexture ? parameters.fromTexture.options.source : null,
      sourceType: parameters.fromTexture ? parameters.fromTexture.options.sourceType : null
    };
    this.options = { ...defaultOptions, ...parameters };
    this.options.label = this.options.label ?? this.options.name;
    this.texture = null;
    this.externalTexture = null;
    this.source = null;
    this.size = {
      width: 1,
      height: 1,
      depth: 1
    };
    this.textureMatrix = new BufferBinding({
      label: this.options.label + ": model matrix",
      name: this.options.name + "Matrix",
      useStruct: false,
      struct: {
        matrix: {
          name: this.options.name + "Matrix",
          type: "mat4x4f",
          value: this.modelMatrix
        }
      }
    });
    this.setBindings();
    this._parentMesh = null;
    this.sourceLoaded = false;
    this.sourceUploaded = false;
    this.shouldUpdate = false;
    this.renderer.addTexture(this);
    this.createTexture();
  }
  /**
   * Set our {@link bindings}
   */
  setBindings() {
    this.bindings = [
      new TextureBinding({
        label: this.options.label + ": texture",
        name: this.options.name,
        texture: this.options.sourceType === "externalVideo" ? this.externalTexture : this.texture,
        bindingType: this.options.sourceType === "externalVideo" ? "externalTexture" : "texture",
        viewDimension: this.options.viewDimension
      }),
      this.textureMatrix
    ];
  }
  /**
   * Get our {@link TextureBinding | GPU texture binding}
   * @readonly
   */
  get textureBinding() {
    return this.bindings[0];
  }
  /**
   * Get our texture {@link parentMesh}
   */
  get parentMesh() {
    return this._parentMesh;
  }
  /**
   * Set our texture {@link parentMesh}
   * @param value - texture {@link parentMesh} to set (i.e. any kind of {@link core/renderers/GPURenderer.RenderedMesh | Mesh}
   */
  set parentMesh(value) {
    this._parentMesh = value;
    this.resize();
  }
  /**
   * Get whether our {@link source} has been loaded
   */
  get sourceLoaded() {
    return this._sourceLoaded;
  }
  /**
   * Set whether our {@link source} has been loaded
   * @param value - boolean flag indicating if the {@link source} has been loaded
   */
  set sourceLoaded(value) {
    if (value && !this.sourceLoaded) {
      this._onSourceLoadedCallback && this._onSourceLoadedCallback();
    }
    this._sourceLoaded = value;
  }
  /**
   * Get whether our {@link source} has been uploaded
   */
  get sourceUploaded() {
    return this._sourceUploaded;
  }
  /**
   * Set whether our {@link source} has been uploaded
   * @param value - boolean flag indicating if the {@link source} has been uploaded
   */
  set sourceUploaded(value) {
    if (value && !this.sourceUploaded) {
      this._onSourceUploadedCallback && this._onSourceUploadedCallback();
    }
    this._sourceUploaded = value;
  }
  /**
   * Set our texture {@link transforms} object
   */
  setTransforms() {
    super.setTransforms();
    this.transforms.quaternion.setAxisOrder("ZXY");
    this.transforms.origin.model.set(0.5, 0.5, 0);
  }
  /* TEXTURE MATRIX */
  /**
   * Update the {@link modelMatrix}
   */
  updateModelMatrix() {
    if (!this.parentMesh)
      return;
    const parentScale = this.parentMesh.scale ? this.parentMesh.scale : new Vec3(1, 1, 1);
    const parentWidth = this.parentMesh.boundingRect ? this.parentMesh.boundingRect.width * parentScale.x : this.size.width;
    const parentHeight = this.parentMesh.boundingRect ? this.parentMesh.boundingRect.height * parentScale.y : this.size.height;
    const parentRatio = parentWidth / parentHeight;
    const sourceRatio = this.size.width / this.size.height;
    if (parentWidth > parentHeight) {
      __privateGet$6(this, _parentRatio).set(parentRatio, 1, 1);
      __privateGet$6(this, _sourceRatio).set(1 / sourceRatio, 1, 1);
    } else {
      __privateGet$6(this, _parentRatio).set(1, 1 / parentRatio, 1);
      __privateGet$6(this, _sourceRatio).set(1, sourceRatio, 1);
    }
    const coverRatio = parentRatio > sourceRatio !== parentWidth > parentHeight ? 1 : parentWidth > parentHeight ? __privateGet$6(this, _parentRatio).x * __privateGet$6(this, _sourceRatio).x : __privateGet$6(this, _sourceRatio).y * __privateGet$6(this, _parentRatio).y;
    __privateGet$6(this, _coverScale).set(1 / (coverRatio * this.scale.x), 1 / (coverRatio * this.scale.y), 1);
    __privateGet$6(this, _rotationMatrix).rotateFromQuaternion(this.quaternion);
    this.modelMatrix.identity().premultiplyTranslate(this.transformOrigin.clone().multiplyScalar(-1)).premultiplyScale(__privateGet$6(this, _coverScale)).premultiplyScale(__privateGet$6(this, _parentRatio)).premultiply(__privateGet$6(this, _rotationMatrix)).premultiplyScale(__privateGet$6(this, _sourceRatio)).premultiplyTranslate(this.transformOrigin).translate(this.position);
  }
  /**
   * If our {@link modelMatrix} has been updated, tell the {@link textureMatrix | texture matrix binding} to update as well
   */
  onAfterMatrixStackUpdate() {
    this.textureMatrix.shouldUpdateBinding(this.options.name + "Matrix");
  }
  /**
   * Resize our {@link Texture}
   */
  resize() {
    if (this.source && this.source instanceof HTMLCanvasElement && (this.source.width !== this.size.width || this.source.height !== this.size.height)) {
      this.setSourceSize();
      this.createTexture();
    }
    this.shouldUpdateModelMatrix();
  }
  /**
   * Get the number of mip levels create based on {@link size}
   * @param sizes - Array containing our texture width, height and depth
   * @returns - number of mip levels
   */
  getNumMipLevels(...sizes) {
    const maxSize = Math.max(...sizes);
    return 1 + Math.log2(maxSize) | 0;
  }
  /**
   * Tell the {@link Renderer} to upload or texture
   */
  uploadTexture() {
    this.renderer.uploadTexture(this);
    this.shouldUpdate = false;
  }
  /**
   * Import a {@link GPUExternalTexture} from the {@link Renderer}, update the  {@link textureBinding} and its {@link core/bindGroups/TextureBindGroup.TextureBindGroup | bind group}
   */
  uploadVideoTexture() {
    this.externalTexture = this.renderer.importExternalTexture(this.source);
    this.textureBinding.resource = this.externalTexture;
    this.textureBinding.setBindingType("externalTexture");
    this.shouldUpdate = false;
    this.sourceUploaded = true;
  }
  /**
   * Copy a {@link Texture}
   * @param texture - {@link Texture} to copy
   */
  copy(texture) {
    if (this.options.sourceType === "externalVideo" && texture.options.sourceType !== "externalVideo") {
      throwWarning(`${this.options.label}: cannot copy a GPUTexture to a GPUExternalTexture`);
      return;
    } else if (this.options.sourceType !== "externalVideo" && texture.options.sourceType === "externalVideo") {
      throwWarning(`${this.options.label}: cannot copy a GPUExternalTexture to a GPUTexture`);
      return;
    }
    this.options.fromTexture = texture;
    this.options.sourceType = texture.options.sourceType;
    this.options.generateMips = texture.options.generateMips;
    this.options.flipY = texture.options.flipY;
    this.options.format = texture.options.format;
    this.options.premultipliedAlpha = texture.options.premultipliedAlpha;
    this.options.placeholderColor = texture.options.placeholderColor;
    this.options.useExternalTextures = texture.options.useExternalTextures;
    this.sourceLoaded = texture.sourceLoaded;
    this.sourceUploaded = texture.sourceUploaded;
    if (texture.texture) {
      if (texture.sourceLoaded) {
        this.size = texture.size;
        this.source = texture.source;
        this.resize();
      }
      if (texture.sourceUploaded) {
        this.texture = texture.texture;
        this.textureBinding.resource = this.texture;
      } else {
        this.createTexture();
      }
    }
  }
  /**
   * Set the {@link texture | GPU texture}
   */
  createTexture() {
    const options = {
      label: this.options.label,
      format: this.options.format,
      size: [this.size.width, this.size.height, this.size.depth],
      // [1, 1] if no source
      dimensions: this.options.viewDimension === "1d" ? "1d" : this.options.viewDimension === "3d" ? "3d" : "2d",
      //sampleCount: this.source ? this.renderer.sampleCount : 1,
      usage: !!this.source ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT : GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST
    };
    if (this.options.sourceType !== "externalVideo") {
      options.mipLevelCount = this.options.generateMips ? this.getNumMipLevels(this.size.width, this.size.height) : 1;
      this.texture?.destroy();
      this.texture = this.renderer.createTexture(options);
      this.textureBinding.resource = this.texture;
    }
    this.shouldUpdate = true;
  }
  /* SOURCES */
  /**
   * Set the {@link size} based on the {@link source}
   */
  setSourceSize() {
    this.size = {
      width: this.source.naturalWidth || this.source.width || this.source.videoWidth,
      height: this.source.naturalHeight || this.source.height || this.source.videoHeight,
      depth: 1
    };
  }
  /**
   * Load an {@link HTMLImageElement} from a URL and create an {@link ImageBitmap} to use as a {@link source}
   * @async
   * @param url - URL of the image to load
   * @returns - the newly created {@link ImageBitmap}
   */
  async loadImageBitmap(url) {
    const res = await fetch(url);
    const blob = await res.blob();
    return await createImageBitmap(blob, { colorSpaceConversion: "none" });
  }
  /**
   * Load and create an {@link ImageBitmap} from a URL or {@link HTMLImageElement}, use it as a {@link source} and create the {@link GPUTexture}
   * @async
   * @param source - the image URL or {@link HTMLImageElement} to load
   * @returns - the newly created {@link ImageBitmap}
   */
  async loadImage(source) {
    const url = typeof source === "string" ? source : source.getAttribute("src");
    this.options.source = url;
    this.options.sourceType = "image";
    const cachedTexture = this.renderer.textures.find((t) => t.options.source === url);
    if (cachedTexture && cachedTexture.texture && cachedTexture.sourceUploaded) {
      this.copy(cachedTexture);
      return;
    }
    this.sourceLoaded = false;
    this.sourceUploaded = false;
    this.source = await this.loadImageBitmap(this.options.source);
    this.setSourceSize();
    this.resize();
    this.sourceLoaded = true;
    this.createTexture();
  }
  // weirldy enough, we don't have to do anything in that callback
  // because the <video> is not visible in the viewport, the video playback is throttled
  // and the rendering is janky
  // using requestVideoFrameCallback helps preventing this but is unsupported in Firefox at the moment
  // WebCodecs may be the way to go when time comes!
  // https://developer.chrome.com/blog/new-in-webgpu-113/#use-webcodecs-videoframe-source-in-importexternaltexture
  /**
   * Set our {@link shouldUpdate} flag to true at each new video frame
   */
  onVideoFrameCallback() {
    if (this.videoFrameCallbackId) {
      this.shouldUpdate = true;
      this.source.requestVideoFrameCallback(this.onVideoFrameCallback.bind(this));
    }
  }
  /**
   * Callback to run when a {@link HTMLVideoElement} has loaded (when it has enough data to play).
   * Set the {@link HTMLVideoElement} as a {@link source} and create the {@link GPUTexture} or {@link GPUExternalTexture}
   * @param video - the newly loaded {@link HTMLVideoElement}
   */
  onVideoLoaded(video) {
    if (!this.sourceLoaded) {
      this.source = video;
      this.setSourceSize();
      this.resize();
      if (this.options.useExternalTextures) {
        this.options.sourceType = "externalVideo";
        this.texture?.destroy();
      } else {
        this.options.sourceType = "video";
        this.createTexture();
      }
      if ("requestVideoFrameCallback" in HTMLVideoElement.prototype) {
        this.videoFrameCallbackId = this.source.requestVideoFrameCallback(
          this.onVideoFrameCallback.bind(this)
        );
      }
      this.sourceLoaded = true;
    }
  }
  /**
   * Get whether the {@link source} is a video
   * @readonly
   */
  get isVideoSource() {
    return this.source && (this.options.sourceType === "video" || this.options.sourceType === "externalVideo");
  }
  /**
   * Load a video from a URL or {@link HTMLVideoElement} and register {@link onVideoLoaded} callback
   * @param source - the video URL or {@link HTMLVideoElement} to load
   */
  loadVideo(source) {
    let video;
    if (typeof source === "string") {
      video = document.createElement("video");
      video.src = source;
    } else {
      video = source;
    }
    video.preload = "auto";
    video.muted = true;
    video.loop = true;
    video.crossOrigin = "anonymous";
    video.setAttribute("playsinline", "");
    this.options.source = video.src;
    this.sourceLoaded = false;
    this.sourceUploaded = false;
    if (video.readyState >= video.HAVE_ENOUGH_DATA) {
      this.onVideoLoaded(video);
    } else {
      video.addEventListener("canplaythrough", this.onVideoLoaded.bind(this, video), {
        once: true
      });
    }
    if (isNaN(video.duration)) {
      video.load();
    }
  }
  /**
   * Load a {@link HTMLCanvasElement}, use it as a {@link source} and create the {@link GPUTexture}
   * @param source - the {@link HTMLCanvasElement} to use
   */
  loadCanvas(source) {
    this.options.source = source;
    this.options.sourceType = "canvas";
    this.sourceLoaded = false;
    this.sourceUploaded = false;
    this.source = source;
    this.setSourceSize();
    this.resize();
    this.sourceLoaded = true;
    this.createTexture();
  }
  /* EVENTS */
  /**
   * Callback to run when the {@link source} has been loaded
   * @param callback - callback to run when the {@link source} has been loaded
   * @returns - our {@link Texture}
   */
  onSourceLoaded(callback) {
    if (callback) {
      this._onSourceLoadedCallback = callback;
    }
    return this;
  }
  /**
   * Callback to run when the {@link source} has been uploaded
   * @param callback - callback to run when the {@link source} been uploaded
   * @returns - our {@link Texture}
   */
  onSourceUploaded(callback) {
    if (callback) {
      this._onSourceUploadedCallback = callback;
    }
    return this;
  }
  /* RENDER */
  /**
   * Render a {@link Texture}:
   * - Update its {@link modelMatrix} and {@link bindings} if needed
   * - Upload the texture if it needs to be done
   */
  render() {
    this.updateMatrixStack();
    this.textureMatrix.update();
    if (this.options.sourceType === "externalVideo") {
      this.shouldUpdate = true;
    }
    if (this.isVideoSource && !this.videoFrameCallbackId && this.source.readyState >= this.source.HAVE_CURRENT_DATA && !this.source.paused) {
      this.shouldUpdate = true;
    }
    if (this.shouldUpdate && this.options.sourceType && this.options.sourceType !== "externalVideo") {
      this.uploadTexture();
    }
  }
  /* DESTROY */
  /**
   * Destroy the {@link Texture}
   */
  destroy() {
    if (this.videoFrameCallbackId) {
      this.source.cancelVideoFrameCallback(this.videoFrameCallbackId);
    }
    if (this.isVideoSource) {
      this.source.removeEventListener(
        "canplaythrough",
        this.onVideoLoaded.bind(this, this.source),
        {
          once: true
        }
      );
    }
    this.renderer.removeTexture(this);
    this.texture?.destroy();
    this.texture = null;
  }
}
_parentRatio = new WeakMap();
_sourceRatio = new WeakMap();
_coverScale = new WeakMap();
_rotationMatrix = new WeakMap();

class TextureBindGroup extends BindGroup {
  /**
   * TextureBindGroup constructor
   * @param  renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object
   * @param parameters - {@link TextureBindGroupParams | parameters} used to create our {@link TextureBindGroup}
   */
  constructor(renderer, { label, index = 0, bindings = [], uniforms, storages, textures = [], samplers = [] } = {}) {
    const type = "TextureBindGroup";
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, type);
    super(renderer, { label, index, bindings, uniforms, storages });
    this.options = {
      ...this.options,
      // will be filled after
      textures: [],
      samplers: []
    };
    if (textures.length) {
      textures.forEach((texture) => this.addTexture(texture));
    }
    if (samplers.length) {
      samplers.forEach((sampler) => this.addSampler(sampler));
    }
    this.type = type;
  }
  /**
   * Adds a texture to the textures array and the struct
   * @param texture - texture to add
   */
  addTexture(texture) {
    this.textures.push(texture);
    this.addBindings([...texture.bindings]);
  }
  /**
   * Get the current textures array
   * @readonly
   */
  get textures() {
    return this.options.textures;
  }
  /**
   * Adds a sampler to the samplers array and the struct
   * @param sampler
   */
  addSampler(sampler) {
    this.samplers.push(sampler);
    this.addBindings([sampler.binding]);
  }
  /**
   * Get the current samplers array
   * @readonly
   */
  get samplers() {
    return this.options.samplers;
  }
  /**
   * Get whether the GPU bind group is ready to be created
   * It can be created if it has {@link BindGroup#bindings} and has not been created yet and all GPU textures and samplers are created
   * @readonly
   */
  get shouldCreateBindGroup() {
    return !this.bindGroup && !!this.bindings.length && !this.textures.find((texture) => !(texture.texture || texture.externalTexture)) && !this.samplers.find((sampler) => !sampler.sampler);
  }
  /**
   * Update the {@link TextureBindGroup#textures | bind group textures}:
   * - Check if they need to copy their source texture
   * - Upload video texture if needed
   */
  updateTextures() {
    this.textures.forEach((texture, textureIndex) => {
      if (texture instanceof Texture) {
        if (texture.options.fromTexture && texture.options.fromTexture.sourceUploaded && !texture.sourceUploaded) {
          texture.copy(texture.options.fromTexture);
        }
        if (texture.shouldUpdate && texture.options.sourceType && texture.options.sourceType === "externalVideo") {
          texture.uploadVideoTexture();
        }
      }
    });
  }
  /**
   * Update the {@link TextureBindGroup}, which means update its {@link TextureBindGroup#textures | textures}, then update its {@link TextureBindGroup#bufferBindings | buffer bindings} and finally {@link TextureBindGroup#resetBindGroup | reset it} if needed
   */
  update() {
    this.updateTextures();
    super.update();
  }
  /**
   * Destroy our {@link TextureBindGroup}
   */
  destroy() {
    super.destroy();
    this.options.textures = [];
    this.options.samplers = [];
  }
}

class SamplerBinding extends Binding {
  /**
   * SamplerBinding constructor
   * @param parameters - {@link SamplerBindingParams | parameters} used to create our SamplerBindings
   */
  constructor({
    label = "Sampler",
    name = "sampler",
    bindingType,
    visibility,
    sampler,
    type = "filtering"
  }) {
    bindingType = bindingType ?? "sampler";
    super({ label, name, bindingType, visibility });
    this.options = {
      ...this.options,
      sampler,
      type
    };
    this.resource = sampler;
    this.setWGSLFragment();
  }
  /**
   * Get {@link GPUBindGroupLayoutEntry#sampler | bind group layout entry resource}
   * @readonly
   */
  get resourceLayout() {
    return {
      sampler: {
        type: this.options.type
        // TODO set shouldResetBindGroupLayout to true if it changes afterwards
      }
    };
  }
  /**
   * Get the {@link GPUBindGroupEntry#resource | bind group resource}
   */
  get resource() {
    return this.sampler;
  }
  /**
   * Set the {@link GPUBindGroupEntry#resource | bind group resource}
   * @param value - new bind group resource
   */
  set resource(value) {
    if (value && this.sampler)
      this.shouldResetBindGroup = true;
    this.sampler = value;
  }
  /**
   * Set the correct WGSL code snippet.
   */
  setWGSLFragment() {
    this.wgslGroupFragment = [`var ${this.name}: ${this.bindingType};`];
  }
}

var __accessCheck$6 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet$5 = (obj, member, getter) => {
  __accessCheck$6(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$6 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$4 = (obj, member, value, setter) => {
  __accessCheck$6(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _fov, _near, _far, _pixelRatio;
class Camera extends Object3D {
  /**
   * Camera constructor
   * @param parameters - {@link CameraParams | parameters} used to create our {@link Camera}
   */
  constructor({
    fov = 50,
    near = 0.01,
    far = 150,
    width = 1,
    height = 1,
    pixelRatio = 1,
    onMatricesChanged = () => {
    }
  } = {}) {
    super();
    /** Private {@link Camera} field of view */
    __privateAdd$6(this, _fov, void 0);
    /** Private {@link Camera} near plane */
    __privateAdd$6(this, _near, void 0);
    /** Private {@link Camera} far plane */
    __privateAdd$6(this, _far, void 0);
    /** Private {@link Camera} pixel ratio, used in {@link CSSPerspective} calcs */
    __privateAdd$6(this, _pixelRatio, void 0);
    this.position.set(0, 0, 10);
    this.onMatricesChanged = onMatricesChanged;
    this.size = {
      width: 1,
      height: 1
    };
    this.setPerspective({ fov, near, far, width, height, pixelRatio });
  }
  /**
   * Set our transform and projection matrices
   */
  setMatrices() {
    super.setMatrices();
    this.matrices = {
      ...this.matrices,
      view: {
        matrix: new Mat4(),
        shouldUpdate: false,
        onUpdate: () => {
          this.viewMatrix.copy(this.modelMatrix).invert();
        }
      },
      projection: {
        matrix: new Mat4(),
        shouldUpdate: false,
        onUpdate: () => this.updateProjectionMatrix()
      }
    };
  }
  /**
   * Get our view matrix
   * @readonly
   */
  get viewMatrix() {
    return this.matrices.view.matrix;
  }
  set viewMatrix(value) {
    this.matrices.view.matrix = value;
    this.matrices.view.shouldUpdate = true;
  }
  /**
   * Get our projection matrix
   * @readonly
   */
  get projectionMatrix() {
    return this.matrices.projection.matrix;
  }
  set projectionMatrix(value) {
    this.matrices.projection.matrix = value;
    this.shouldUpdateProjectionMatrix();
  }
  /**
   * Set our projection matrix shouldUpdate flag to true (tell it to update)
   */
  shouldUpdateProjectionMatrix() {
    this.matrices.projection.shouldUpdate = true;
  }
  /**
   * Update our model matrix and tell our view matrix to update as well
   */
  updateModelMatrix() {
    super.updateModelMatrix();
    this.setScreenRatios();
    this.matrices.view.shouldUpdate = true;
  }
  /**
   * Get the {@link Camera} {@link fov | field of view}
   */
  get fov() {
    return __privateGet$5(this, _fov);
  }
  /**
   * Set the {@link Camera} {@link fov | field of view}. Update the {@link projectionMatrix} only if the field of view actually changed
   * @param fov - new field of view
   */
  set fov(fov) {
    fov = Math.max(1, Math.min(fov ?? this.fov, 179));
    if (fov !== this.fov) {
      __privateSet$4(this, _fov, fov);
      this.shouldUpdateProjectionMatrix();
    }
    this.setScreenRatios();
    this.setCSSPerspective();
  }
  /**
   * Get the {@link Camera} {@link near} plane value.
   */
  get near() {
    return __privateGet$5(this, _near);
  }
  /**
   * Set the {@link Camera} {@link near} plane value. Update the {@link projectionMatrix} only if the near plane actually changed
   * @param near - new near plane value
   */
  set near(near) {
    near = Math.max(near ?? this.near, 0.01);
    if (near !== this.near) {
      __privateSet$4(this, _near, near);
      this.shouldUpdateProjectionMatrix();
    }
  }
  /**
   * Get / set the {@link Camera} {@link far} plane value.
   */
  get far() {
    return __privateGet$5(this, _far);
  }
  /**
   * Set the {@link Camera} {@link far} plane value. Update {@link projectionMatrix} only if the far plane actually changed
   * @param far - new far plane value
   */
  set far(far) {
    far = Math.max(far ?? this.far, this.near + 1);
    if (far !== this.far) {
      __privateSet$4(this, _far, far);
      this.shouldUpdateProjectionMatrix();
    }
  }
  /**
   * Get the {@link Camera} {@link pixelRatio} value.
   */
  get pixelRatio() {
    return __privateGet$5(this, _pixelRatio);
  }
  /**
   * Set the {@link Camera} {@link pixelRatio} value. Update the {@link CSSPerspective} only if the pixel ratio actually changed
   * @param pixelRatio - new pixel ratio value
   */
  set pixelRatio(pixelRatio) {
    __privateSet$4(this, _pixelRatio, pixelRatio ?? this.pixelRatio);
    this.setCSSPerspective();
  }
  /**
   * Set the {@link Camera} {@link width} and {@link height}. Update the {@link projectionMatrix} only if the width or height actually changed
   * @param size - {@link width} and {@link height} values to use
   */
  setSize({ width, height }) {
    if (width !== this.size.width || height !== this.size.height) {
      this.shouldUpdateProjectionMatrix();
    }
    this.size.width = width;
    this.size.height = height;
    this.setScreenRatios();
    this.setCSSPerspective();
  }
  /**
   * Sets the {@link Camera} perspective. Update the {@link projectionMatrix} if needed.
   * @param parameters - {@link CameraPerspectiveOptions | parameters} to use for the perspective
   */
  setPerspective({
    fov = this.fov,
    near = this.near,
    far = this.far,
    width = this.size.width,
    height = this.size.height,
    pixelRatio = this.pixelRatio
  } = {}) {
    this.setSize({ width, height });
    this.pixelRatio = pixelRatio;
    this.fov = fov;
    this.near = near;
    this.far = far;
  }
  /**
   * Callback to run when the camera {@link modelMatrix | model matrix} has been updated
   */
  onAfterMatrixStackUpdate() {
    this.onMatricesChanged();
  }
  /**
   * Sets a {@link CSSPerspective} property based on {@link size}, {@link pixelRatio} and {@link fov}.<br>
   * Used to translate planes along the Z axis using pixel units as CSS would do.<br>
   * {@link https://stackoverflow.com/questions/22421439/convert-field-of-view-value-to-css3d-perspective-value | See reference}
   */
  setCSSPerspective() {
    this.CSSPerspective = Math.pow(
      Math.pow(this.size.width / (2 * this.pixelRatio), 2) + Math.pow(this.size.height / (2 * this.pixelRatio), 2),
      0.5
    ) / Math.tan(this.fov * 0.5 * Math.PI / 180);
  }
  /**
   * Sets visible width / height at a given z-depth from our {@link Camera} parameters.<br>
   * {@link https://discourse.threejs.org/t/functions-to-calculate-the-visible-width-height-at-a-given-z-depth-from-a-perspective-camera/269 | See reference}
   * @param depth - depth to use for calculations
   */
  setScreenRatios(depth = 0) {
    const cameraOffset = this.position.z;
    if (depth < cameraOffset) {
      depth -= cameraOffset;
    } else {
      depth += cameraOffset;
    }
    const vFOV = this.fov * Math.PI / 180;
    const height = 2 * Math.tan(vFOV / 2) * Math.abs(depth);
    this.screenRatio = {
      width: height * this.size.width / this.size.height,
      height
    };
  }
  /**
   * Rotate this {@link Camera} so it looks at the {@link Vec3 | target}
   * @param target - {@link Vec3 | target} to look at
   */
  lookAt(target = new Vec3()) {
    const rotationMatrix = new Mat4().lookAt(this.position, target);
    this.quaternion.setFromRotationMatrix(rotationMatrix);
    this.shouldUpdateModelMatrix();
  }
  /**
   * Updates the {@link Camera} {@link projectionMatrix}
   */
  updateProjectionMatrix() {
    const aspect = this.size.width / this.size.height;
    const top = this.near * Math.tan(Math.PI / 180 * 0.5 * this.fov);
    const height = 2 * top;
    const width = aspect * height;
    const left = -0.5 * width;
    const right = left + width;
    const bottom = top - height;
    const x = 2 * this.near / (right - left);
    const y = 2 * this.near / (top - bottom);
    const a = (right + left) / (right - left);
    const b = (top + bottom) / (top - bottom);
    const c = -(this.far + this.near) / (this.far - this.near);
    const d = -2 * this.far * this.near / (this.far - this.near);
    this.projectionMatrix.set(
      x,
      0,
      0,
      0,
      0,
      y,
      0,
      0,
      a,
      b,
      c,
      -1,
      0,
      0,
      d,
      0
    );
  }
}
_fov = new WeakMap();
_near = new WeakMap();
_far = new WeakMap();
_pixelRatio = new WeakMap();

class Sampler {
  /**
   * Sampler constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Sampler}
   * @param parameters - {@link SamplerParams | parameters} used to create this {@link Sampler}
   */
  constructor(renderer, {
    label = "Sampler",
    name,
    addressModeU = "repeat",
    addressModeV = "repeat",
    magFilter = "linear",
    minFilter = "linear",
    mipmapFilter = "linear",
    maxAnisotropy = 1,
    type = "filtering"
  } = {}) {
    this.type = "Sampler";
    this.uuid = generateUUID();
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, label ? label + " " + this.type : this.type);
    this.renderer = renderer;
    this.label = label;
    if (!name && !this.renderer.production) {
      name = "sampler" + this.renderer.samplers.length;
      throwWarning(
        `Sampler: you are trying to create a sampler without the mandatory name parameter. A default name will be used instead: ${name}`
      );
    }
    this.name = name;
    this.options = {
      addressModeU,
      addressModeV,
      magFilter,
      minFilter,
      mipmapFilter,
      maxAnisotropy,
      type
    };
    this.createSampler();
    this.createBinding();
  }
  /**
   * Set the {@link GPUSampler}
   */
  createSampler() {
    this.sampler = this.renderer.createSampler(this);
  }
  /**
   * Set the {@link SamplerBinding | binding}
   */
  createBinding() {
    this.binding = new SamplerBinding({
      label: this.label,
      name: this.name,
      bindingType: "sampler",
      sampler: this.sampler,
      type: this.options.type
    });
  }
}

const defaultRenderTextureParams = {
  label: "RenderTexture",
  name: "renderTexture",
  usage: "texture",
  access: "write",
  fromTexture: null,
  viewDimension: "2d",
  sampleCount: 1
};
class RenderTexture {
  /**
   * RenderTexture constructor
   * @param renderer - {@link Renderer | renderer} object or {@link GPUCurtains} class object used to create this {@link RenderTexture}
   * @param parameters - {@link RenderTextureParams | parameters} used to create this {@link RenderTexture}
   */
  constructor(renderer, parameters = defaultRenderTextureParams) {
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, parameters.label ? parameters.label + " RenderTexture" : "RenderTexture");
    this.type = "RenderTexture";
    this.renderer = renderer;
    this.uuid = generateUUID();
    this.options = { ...defaultRenderTextureParams, ...parameters };
    if (!this.options.format) {
      this.options.format = this.renderer.options.preferredFormat;
    }
    this.size = this.options.size ?? {
      width: Math.floor(this.renderer.pixelRatioBoundingRect.width),
      height: Math.floor(this.renderer.pixelRatioBoundingRect.height),
      depth: 1
    };
    this.setBindings();
    this.renderer.addRenderTexture(this);
    this.createTexture();
  }
  /**
   * Copy another {@link RenderTexture} into this {@link RenderTexture}
   * @param texture - {@link RenderTexture} to copy
   */
  copy(texture) {
    this.options.fromTexture = texture;
    this.createTexture();
  }
  /**
   * Copy a {@link GPUTexture} directly into this {@link RenderTexture}. Mainly used for depth textures.
   * @param texture - {@link GPUTexture} to copy
   */
  copyGPUTexture(texture) {
    this.size = {
      width: texture.width,
      height: texture.height,
      depth: texture.depthOrArrayLayers
    };
    this.texture = texture;
    this.textureBinding.resource = this.texture;
  }
  /**
   * Create the {@link GPUTexture | texture} (or copy it from source) and update the {@link TextureBinding#resource | binding resource}
   */
  createTexture() {
    if (this.options.fromTexture) {
      this.copyGPUTexture(this.options.fromTexture.texture);
      return;
    }
    this.texture?.destroy();
    this.texture = this.renderer.createTexture({
      label: this.options.label,
      format: this.options.format,
      size: [this.size.width, this.size.height, this.size.depth],
      dimensions: this.options.viewDimension === "1d" ? "1d" : this.options.viewDimension === "3d" ? "3d" : "2d",
      sampleCount: this.options.sampleCount,
      usage: (
        // TODO let user chose?
        // see https://matrix.to/#/!MFogdGJfnZLrDmgkBN:matrix.org/$vESU70SeCkcsrJQdyQGMWBtCgVd3XqnHcBxFDKTKKSQ?via=matrix.org&via=mozilla.org&via=hej.im
        this.options.usage !== "storageTexture" ? GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST | GPUTextureUsage.RENDER_ATTACHMENT : GPUTextureUsage.STORAGE_BINDING | GPUTextureUsage.TEXTURE_BINDING | GPUTextureUsage.COPY_DST
      )
    });
    this.textureBinding.resource = this.texture;
  }
  /**
   * Set our {@link RenderTexture#bindings | bindings}
   */
  setBindings() {
    this.bindings = [
      new TextureBinding({
        label: this.options.label + ": " + this.options.name + " render texture",
        name: this.options.name,
        texture: this.texture,
        bindingType: this.options.usage,
        format: this.options.format,
        viewDimension: this.options.viewDimension,
        multisampled: this.options.sampleCount > 1
      })
    ];
  }
  /**
   * Get our {@link TextureBinding | texture binding}
   * @readonly
   */
  get textureBinding() {
    return this.bindings[0];
  }
  /**
   * Force a {@link RenderTexture} to be recreated with the new size
   * @param size - new {@link TextureSize | size} to set
   */
  forceResize(size) {
    this.size = size;
    this.createTexture();
  }
  /**
   * Resize our {@link RenderTexture}, which means recreate it/copy it again and tell the {@link core/bindGroups/TextureBindGroup.TextureBindGroup | texture bind group} to update
   * @param size - the optional new {@link TextureSize | size} to set
   */
  resize(size = null) {
    if (!size) {
      size = {
        width: Math.floor(this.renderer.pixelRatioBoundingRect.width),
        height: Math.floor(this.renderer.pixelRatioBoundingRect.height),
        depth: 1
      };
    }
    if (size.width === this.size.width && size.height === this.size.height && size.depth === this.size.depth) {
      return;
    }
    this.forceResize(size);
  }
  /**
   * Destroy our {@link RenderTexture}
   */
  destroy() {
    this.renderer.removeRenderTexture(this);
    if (!this.options.fromTexture) {
      this.texture?.destroy();
    }
    this.texture = null;
  }
}

class Material {
  /**
   * Material constructor
   * @param renderer - our renderer class object
   * @param parameters - {@link types/Materials.MaterialParams | parameters} used to create our Material
   */
  constructor(renderer, parameters) {
    this.type = "Material";
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, this.type);
    this.renderer = renderer;
    this.uuid = generateUUID();
    const { shaders, label, useAsyncPipeline, uniforms, storages, bindGroups, samplers, textures, renderTextures } = parameters;
    this.options = {
      shaders,
      label,
      ...useAsyncPipeline !== void 0 && { useAsyncPipeline },
      ...uniforms !== void 0 && { uniforms },
      ...storages !== void 0 && { storages },
      ...bindGroups !== void 0 && { bindGroups },
      ...samplers !== void 0 && { samplers },
      ...textures !== void 0 && { textures },
      ...renderTextures !== void 0 && { renderTextures }
    };
    this.bindGroups = [];
    this.texturesBindGroups = [];
    this.clonedBindGroups = [];
    this.setBindGroups();
    this.setTextures();
    this.setSamplers();
  }
  /**
   * Check if all bind groups are ready, and create them if needed
   */
  compileMaterial() {
    const texturesBindGroupLength = this.texturesBindGroup.bindings.length ? 1 : 0;
    const bindGroupsReady = this.bindGroups.length >= this.inputsBindGroups.length + texturesBindGroupLength;
    if (!bindGroupsReady) {
      this.createBindGroups();
    }
  }
  /**
   * Get whether the renderer is ready, our pipeline entry and pipeline have been created and successfully compiled
   * @readonly
   */
  get ready() {
    return !!(this.renderer.ready && this.pipelineEntry && this.pipelineEntry.pipeline && this.pipelineEntry.ready);
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.
   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to render
   */
  loseContext() {
    this.textures.forEach((texture) => {
      texture.texture = null;
      texture.sourceUploaded = false;
    });
    this.renderTextures.forEach((texture) => {
      texture.texture = null;
    });
    [...this.bindGroups, ...this.clonedBindGroups, ...this.inputsBindGroups].forEach(
      (bindGroup) => bindGroup.loseContext()
    );
    this.pipelineEntry.pipeline = null;
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored to recreate our bind groups.
   */
  restoreContext() {
    this.samplers.forEach((sampler) => {
      sampler.createSampler();
      sampler.binding.resource = sampler.sampler;
    });
    this.textures.forEach((texture) => {
      texture.createTexture();
      texture.resize();
    });
    this.renderTextures.forEach((texture) => {
      texture.resize(texture.size);
    });
    [...this.bindGroups, ...this.clonedBindGroups, ...this.inputsBindGroups].forEach((bindGroup) => {
      if (bindGroup.shouldCreateBindGroup) {
        bindGroup.createBindGroup();
      }
      bindGroup.bufferBindings.forEach((bufferBinding) => bufferBinding.shouldUpdate = true);
    });
  }
  /**
   * Get the complete code of a given shader including all the WGSL fragment code snippets added by the pipeline
   * @param [shaderType="full"] - shader to get the code from
   * @returns - The corresponding shader code
   */
  getShaderCode(shaderType = "full") {
    if (!this.pipelineEntry)
      return "";
    shaderType = (() => {
      switch (shaderType) {
        case "vertex":
        case "fragment":
        case "compute":
        case "full":
          return shaderType;
        default:
          return "full";
      }
    })();
    return this.pipelineEntry.shaders[shaderType].code;
  }
  /**
   * Get the added code of a given shader, i.e. all the WGSL fragment code snippets added by the pipeline
   * @param [shaderType="vertex"] - shader to get the code from
   * @returns - The corresponding shader code
   */
  getAddedShaderCode(shaderType = "vertex") {
    if (!this.pipelineEntry)
      return "";
    shaderType = (() => {
      switch (shaderType) {
        case "vertex":
        case "fragment":
        case "compute":
          return shaderType;
        default:
          return "vertex";
      }
    })();
    return this.pipelineEntry.shaders[shaderType].head;
  }
  /* BIND GROUPS */
  /**
   * Prepare and set our bind groups based on inputs and bindGroups Material parameters
   */
  setBindGroups() {
    this.uniforms = {};
    this.storages = {};
    this.inputsBindGroups = [];
    this.inputsBindings = [];
    if (this.options.uniforms || this.options.storages) {
      const inputsBindGroup = new BindGroup(this.renderer, {
        label: this.options.label + ": Bindings bind group",
        uniforms: this.options.uniforms,
        storages: this.options.storages
      });
      this.processBindGroupBindings(inputsBindGroup);
      this.inputsBindGroups.push(inputsBindGroup);
    }
    this.options.bindGroups?.forEach((bindGroup) => {
      this.processBindGroupBindings(bindGroup);
      this.inputsBindGroups.push(bindGroup);
    });
  }
  /**
   * Get the main {@link TextureBindGroup | texture bind group} created by this {@link Material} to manage all textures related struct
   * @readonly
   */
  get texturesBindGroup() {
    return this.texturesBindGroups[0];
  }
  /**
   * Process all {@link BindGroup} struct and add them to the corresponding objects based on their binding types. Also store them in a inputsBindings array to facilitate further access to struct.
   * @param bindGroup - The {@link BindGroup} to process
   */
  processBindGroupBindings(bindGroup) {
    bindGroup.bindings.forEach((inputBinding) => {
      if (inputBinding.bindingType === "uniform")
        this.uniforms = {
          ...this.uniforms,
          [inputBinding.name]: inputBinding.inputs
        };
      if (inputBinding.bindingType === "storage")
        this.storages = {
          ...this.storages,
          [inputBinding.name]: inputBinding.inputs
        };
      this.inputsBindings.push(inputBinding);
    });
  }
  /**
   * Create the bind groups if they need to be created
   */
  createBindGroups() {
    if (this.texturesBindGroup.shouldCreateBindGroup) {
      this.texturesBindGroup.setIndex(this.bindGroups.length);
      this.texturesBindGroup.createBindGroup();
      this.bindGroups.push(this.texturesBindGroup);
    }
    this.inputsBindGroups.forEach((bindGroup) => {
      if (bindGroup.shouldCreateBindGroup) {
        bindGroup.setIndex(this.bindGroups.length);
        bindGroup.createBindGroup();
        this.bindGroups.push(bindGroup);
      }
    });
    this.options.bindGroups?.forEach((bindGroup) => {
      if (!bindGroup.shouldCreateBindGroup && !this.bindGroups.find((bG) => bG.uuid === bindGroup.uuid)) {
        bindGroup.setIndex(this.bindGroups.length);
        this.bindGroups.push(bindGroup);
      }
      if (bindGroup instanceof TextureBindGroup && !this.texturesBindGroups.find((bG) => bG.uuid === bindGroup.uuid)) {
        this.texturesBindGroups.push(bindGroup);
        bindGroup.textures.forEach((texture) => {
          if (texture instanceof Texture && !this.textures.find((t) => t.uuid === texture.uuid)) {
            this.textures.push(texture);
          } else if (texture instanceof RenderTexture && !this.renderTextures.find((t) => t.uuid === texture.uuid)) {
            this.renderTextures.push(texture);
          }
        });
      }
    });
  }
  /**
   * Clones a {@link BindGroup} from a list of buffers
   * Useful to create a new bind group with already created buffers, but swapped
   * @param parameters - parameters used to clone the {@link BindGroup | bind group}
   * @param parameters.bindGroup - the BindGroup to clone
   * @param parameters.bindings - our input binding buffers
   * @param parameters.keepLayout - whether we should keep original bind group layout or not
   * @returns - the cloned BindGroup
   */
  cloneBindGroup({
    bindGroup,
    bindings = [],
    keepLayout = true
  }) {
    if (!bindGroup)
      return null;
    const clone = bindGroup.clone({ bindings, keepLayout });
    this.clonedBindGroups.push(clone);
    return clone;
  }
  /**
   * Get a corresponding {@link BindGroup} or {@link TextureBindGroup} from one of its binding name/key
   * @param bindingName - the binding name/key to look for
   * @returns - bind group found or null if not found
   */
  getBindGroupByBindingName(bindingName = "") {
    return (this.ready ? this.bindGroups : this.inputsBindGroups).find((bindGroup) => {
      return bindGroup.bindings.find((binding) => binding.name === bindingName);
    });
  }
  /**
   * Destroy a bind group, only if it is not used by another object
   * @param bindGroup - bind group to eventually destroy
   */
  destroyBindGroup(bindGroup) {
    const objectsUsingBindGroup = this.renderer.getObjectsByBindGroup(bindGroup);
    const shouldDestroy = !objectsUsingBindGroup || !objectsUsingBindGroup.find((object) => object.material.uuid !== this.uuid);
    if (shouldDestroy) {
      bindGroup.destroy();
    }
  }
  /**
   * Destroy all bind groups
   */
  destroyBindGroups() {
    this.bindGroups.forEach((bindGroup) => this.destroyBindGroup(bindGroup));
    this.clonedBindGroups.forEach((bindGroup) => this.destroyBindGroup(bindGroup));
    this.texturesBindGroups.forEach((bindGroup) => this.destroyBindGroup(bindGroup));
    this.texturesBindGroups = [];
    this.inputsBindGroups = [];
    this.bindGroups = [];
    this.clonedBindGroups = [];
  }
  /**
   * {@link BindGroup#update | Update} all bind groups:
   * - Update all {@link texturesBindGroups | textures bind groups} textures
   * - Update its {@link BindGroup#bufferBindings | buffer bindings}
   * - Check if it eventually needs a {@link BindGroup#resetBindGroup | reset}
   * - Check if we need to flush the pipeline
   */
  updateBindGroups() {
    this.bindGroups.forEach((bindGroup) => {
      bindGroup.update();
      if (bindGroup.needsPipelineFlush && this.pipelineEntry.ready) {
        this.pipelineEntry.flushPipelineEntry(this.bindGroups);
        bindGroup.needsPipelineFlush = false;
      }
    });
  }
  /* INPUTS */
  /**
   * Look for a {@link BindGroupBindingElement | binding} by name in all {@link inputsBindings | input bindings}
   * @param bindingName - the binding name or key
   * @returns - the found binding, or null if not found
   */
  getBindingByName(bindingName = "") {
    return this.inputsBindings.find((binding) => binding.name === bindingName);
  }
  /**
   * Look for a {@link BindGroupBufferBindingElement | buffer binding} by name in all {@link inputsBindings | input bindings}
   * @param bindingName - the binding name or key
   * @returns - the found binding, or null if not found
   */
  getBufferBindingByName(bindingName = "") {
    return this.inputsBindings.find((binding) => binding.name === bindingName && "buffer" in binding);
  }
  /**
   * Force a given buffer binding update flag to update it at next render
   * @param bufferBindingName - the buffer binding name
   * @param bindingName - the binding name
   */
  shouldUpdateInputsBindings(bufferBindingName, bindingName) {
    if (!bufferBindingName)
      return;
    const bufferBinding = this.getBindingByName(bufferBindingName);
    if (bufferBinding) {
      if (!bindingName) {
        Object.keys(bufferBinding.inputs).forEach(
          (bindingKey) => bufferBinding.shouldUpdateBinding(bindingKey)
        );
      } else {
        bufferBinding.shouldUpdateBinding(bindingName);
      }
    }
  }
  /* SAMPLERS & TEXTURES */
  /**
   * Prepare our textures array and set the {@link TextureBindGroup}
   */
  setTextures() {
    this.textures = [];
    this.renderTextures = [];
    this.texturesBindGroups.push(
      new TextureBindGroup(this.renderer, {
        label: this.options.label + ": Textures bind group"
      })
    );
    this.options.textures?.forEach((texture) => {
      this.addTexture(texture);
    });
    this.options.renderTextures?.forEach((texture) => {
      this.addTexture(texture);
    });
  }
  /**
   * Add a texture to our array, and add it to the textures bind group only if used in the shaders (avoid binding useless data)
   * @param texture - texture to add
   */
  addTexture(texture) {
    if (texture instanceof Texture) {
      this.textures.push(texture);
    } else if (texture instanceof RenderTexture) {
      this.renderTextures.push(texture);
    }
    if (this.options.shaders.vertex && this.options.shaders.vertex.code.indexOf(texture.options.name) !== -1 || this.options.shaders.fragment && this.options.shaders.fragment.code.indexOf(texture.options.name) !== -1 || this.options.shaders.compute && this.options.shaders.compute.code.indexOf(texture.options.name) !== -1) {
      this.texturesBindGroup.addTexture(texture);
    }
  }
  /**
   * Destroy a {@link Texture} or {@link RenderTexture}, only if it is not used by another object or cached.
   * @param texture - {@link Texture} or {@link RenderTexture} to eventually destroy
   */
  destroyTexture(texture) {
    if (texture.options.cache)
      return;
    const objectsUsingTexture = this.renderer.getObjectsByTexture(texture);
    const shouldDestroy = !objectsUsingTexture || !objectsUsingTexture.some((object) => object.material.uuid !== this.uuid);
    if (shouldDestroy) {
      texture.destroy();
    }
  }
  /**
   * Destroy all the Material textures
   */
  destroyTextures() {
    this.textures?.forEach((texture) => this.destroyTexture(texture));
    this.renderTextures?.forEach((texture) => this.destroyTexture(texture));
    this.textures = [];
    this.renderTextures = [];
  }
  /**
   * Prepare our samplers array and always add a default sampler if not already passed as parameter
   */
  setSamplers() {
    this.samplers = [];
    this.options.samplers?.forEach((sampler) => {
      this.addSampler(sampler);
    });
    const hasDefaultSampler = this.samplers.find((sampler) => sampler.name === "defaultSampler");
    if (!hasDefaultSampler) {
      const sampler = new Sampler(this.renderer, { name: "defaultSampler" });
      this.addSampler(sampler);
    }
  }
  /**
   * Add a sampler to our array, and add it to the textures bind group only if used in the shaders (avoid binding useless data)
   * @param sampler - sampler to add
   */
  addSampler(sampler) {
    this.samplers.push(sampler);
    if (this.options.shaders.vertex && this.options.shaders.vertex.code.indexOf(sampler.name) !== -1 || this.options.shaders.fragment && this.options.shaders.fragment.code.indexOf(sampler.name) !== -1 || this.options.shaders.compute && this.options.shaders.compute.code.indexOf(sampler.name) !== -1) {
      this.texturesBindGroup.addSampler(sampler);
    }
  }
  /* BUFFER RESULTS */
  /**
   * Map a {@link GPUBuffer} and put a copy of the data into a {@link Float32Array}
   * @param buffer - {@link GPUBuffer} to map
   * @async
   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data
   */
  async getBufferResult(buffer) {
    await buffer.mapAsync(GPUMapMode.READ);
    const result = new Float32Array(buffer.getMappedRange().slice(0));
    buffer.unmap();
    return result;
  }
  /**
   * Map the content of a {@link BufferBinding#buffer | GPU buffer} and put a copy of the data into a {@link Float32Array}
   * @param bindingName - The name of the {@link inputsBindings | input bindings} from which to map the {@link BufferBinding#buffer | GPU buffer}
   * @async
   * @returns - {@link Float32Array} holding the {@link GPUBuffer} data
   */
  async getBufferBindingResultByBindingName(bindingName = "") {
    const binding = this.getBufferBindingByName(bindingName);
    if (binding && "buffer" in binding) {
      const dstBuffer = this.renderer.copyBufferToBuffer({
        srcBuffer: binding.buffer
      });
      return await this.getBufferResult(dstBuffer);
    } else {
      return new Float32Array(0);
    }
  }
  /**
   * Map the content of a specific {@link BufferElement | buffer element} belonging to a {@link BufferBinding#buffer | GPU buffer} and put a copy of the data into a {@link Float32Array}
   * @param parameters - parameters used to get the result
   * @param parameters.bindingName - The name of the {@link inputsBindings | input bindings} from which to map the {@link BufferBinding#buffer | GPU buffer}
   * @param parameters.bufferElementName - The name of the {@link BufferElement | buffer element} from which to extract the data afterwards
   * @returns - {@link Float32Array} holding {@link GPUBuffer} data
   */
  async getBufferElementResultByNames({
    bindingName,
    bufferElementName
  }) {
    const result = await this.getBufferBindingResultByBindingName(bindingName);
    if (!bufferElementName || result.length) {
      return result;
    } else {
      const binding = this.getBufferBindingByName(bindingName);
      if (binding) {
        return binding.extractBufferElementDataFromBufferResult({ result, bufferElementName });
      } else {
        return result;
      }
    }
  }
  /* RENDER */
  /**
   * Called before rendering the Material.
   * First, check if we need to create our bind groups or pipeline
   * Then render the {@link textures}
   * Finally updates all the {@link bindGroups | bind groups}
   */
  onBeforeRender() {
    this.compileMaterial();
    this.textures.forEach((texture) => {
      texture.render();
    });
    this.updateBindGroups();
  }
  /**
   * Set the current pipeline
   * @param pass - current pass encoder
   */
  setPipeline(pass) {
    this.renderer.pipelineManager.setCurrentPipeline(pass, this.pipelineEntry);
  }
  /**
   * Render the material if it is ready:
   * Set the current pipeline and set the bind groups
   * @param pass - current pass encoder
   */
  render(pass) {
    if (!this.ready)
      return;
    this.setPipeline(pass);
    this.bindGroups.forEach((bindGroup) => {
      pass.setBindGroup(bindGroup.index, bindGroup.bindGroup);
    });
  }
  /**
   * Destroy the Material
   */
  destroy() {
    this.destroyBindGroups();
    this.destroyTextures();
  }
}

class ComputeMaterial extends Material {
  /**
   * ComputeMaterial constructor
   * @param renderer - our {@link Renderer} class object
   * @param parameters - {@link ComputeMaterialParams | parameters} used to create our {@link ComputeMaterial}
   */
  constructor(renderer, parameters) {
    renderer = renderer && renderer.renderer || renderer;
    const type = "ComputeMaterial";
    isRenderer(renderer, type);
    super(renderer, parameters);
    this.type = type;
    this.renderer = renderer;
    let { shaders, dispatchSize } = parameters;
    if (!shaders || !shaders.compute) {
      shaders = {
        compute: {
          code: "",
          entryPoint: "main"
        }
      };
    }
    if (!shaders.compute.code) {
      shaders.compute.code = "@compute @workgroup_size(1) fn main(){}";
    }
    if (!shaders.compute.entryPoint) {
      shaders.compute.entryPoint = "main";
    }
    this.options = {
      ...this.options,
      shaders,
      ...parameters.dispatchSize !== void 0 && { dispatchSize: parameters.dispatchSize }
    };
    if (!dispatchSize) {
      dispatchSize = 1;
    }
    if (Array.isArray(dispatchSize)) {
      dispatchSize[0] = Math.ceil(dispatchSize[0] ?? 1);
      dispatchSize[1] = Math.ceil(dispatchSize[1] ?? 1);
      dispatchSize[2] = Math.ceil(dispatchSize[2] ?? 1);
    } else if (!isNaN(dispatchSize)) {
      dispatchSize = [Math.ceil(dispatchSize), 1, 1];
    }
    this.dispatchSize = dispatchSize;
    this.pipelineEntry = this.renderer.pipelineManager.createComputePipeline({
      renderer: this.renderer,
      label: this.options.label + " compute pipeline",
      shaders: this.options.shaders,
      useAsync: this.options.useAsyncPipeline
    });
  }
  /**
   * When all bind groups are created, add them to the {@link ComputePipelineEntry}
   */
  setPipelineEntryProperties() {
    this.pipelineEntry.setPipelineEntryProperties({
      bindGroups: this.bindGroups
    });
  }
  /**
   * Compile the {@link ComputePipelineEntry}
   * @async
   */
  async compilePipelineEntry() {
    await this.pipelineEntry.compilePipelineEntry();
  }
  /**
   * Check if all bind groups are ready, create them if needed, set {@link ComputePipelineEntry} bind group buffers and compile the pipeline
   * @async
   */
  async compileMaterial() {
    super.compileMaterial();
    if (this.pipelineEntry && this.pipelineEntry.canCompile) {
      this.setPipelineEntryProperties();
      await this.compilePipelineEntry();
    }
  }
  /**
   * Get the complete code of a given shader including all the WGSL fragment code snippets added by the pipeline
   * @param [shaderType="compute"] - shader to get the code from
   * @returns - The corresponding shader code
   */
  getShaderCode(shaderType = "compute") {
    return super.getShaderCode(shaderType);
  }
  /**
   * Get the added code of a given shader, i.e. all the WGSL fragment code snippets added by the pipeline
   * @param [shaderType="compute"] - shader to get the code from
   * @returns - The corresponding shader code
   */
  getAddedShaderCode(shaderType = "compute") {
    return super.getAddedShaderCode(shaderType);
  }
  /* RENDER */
  /**
   * If a custom render function has been defined instead of the default one, register the callback
   * @param callback - callback to run instead of the default render behaviour, which is to set the {@link bindGroups | bind groups} and dispatch the work groups based on the {@link dispatchSize | default dispatch size}. This is where you will have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.
   */
  useCustomRender(callback) {
    if (callback) {
      this._useCustomRenderCallback = callback;
    }
  }
  /**
   * Render the material if it is ready:
   * Set the current pipeline, set the bind groups and dispatch the work groups
   * @param pass - current compute pass encoder
   */
  render(pass) {
    if (!this.ready)
      return;
    this.setPipeline(pass);
    if (this._useCustomRenderCallback !== void 0) {
      this._useCustomRenderCallback(pass);
    } else {
      this.bindGroups.forEach((bindGroup) => {
        pass.setBindGroup(bindGroup.index, bindGroup.bindGroup);
      });
      pass.dispatchWorkgroups(this.dispatchSize[0], this.dispatchSize[1], this.dispatchSize[2]);
    }
  }
  /* RESULT BUFFER */
  /**
   * Copy all writable binding buffers that need it
   * @param commandEncoder - current command encoder
   */
  copyBufferToResult(commandEncoder) {
    this.bindGroups.forEach((bindGroup) => {
      bindGroup.bufferBindings.forEach((binding) => {
        if (binding.shouldCopyResult && binding.resultBuffer.mapState === "unmapped") {
          commandEncoder.copyBufferToBuffer(binding.buffer, 0, binding.resultBuffer, 0, binding.resultBuffer.size);
        }
      });
    });
  }
  /**
   * Get the {@link core/bindings/WritableBufferBinding.WritableBufferBinding#resultBuffer | result GPU buffer} content by {@link core/bindings/WritableBufferBinding.WritableBufferBinding | binding} and {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} names
   * @param parameters - parameters used to get the result
   * @param parameters.bindingName - {@link core/bindings/WritableBufferBinding.WritableBufferBinding#name | binding name} from which to get the result
   * @param parameters.bufferElementName - optional {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} (i.e. struct member) name if the result needs to be restrained to only one element
   * @async
   * @returns - the mapped content of the {@link GPUBuffer} as a {@link Float32Array}
   */
  async getComputeResult({
    bindingName = "",
    bufferElementName = ""
  }) {
    const binding = this.getBufferBindingByName(bindingName);
    if (binding && "resultBuffer" in binding && binding.resultBuffer.mapState === "unmapped") {
      const result = await this.getBufferResult(binding.resultBuffer);
      if (bufferElementName) {
        return binding.extractBufferElementDataFromBufferResult({ result, bufferElementName });
      } else {
        return result;
      }
    } else {
      return new Float32Array(0);
    }
  }
}

var __accessCheck$5 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet$4 = (obj, member, getter) => {
  __accessCheck$5(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$5 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$3 = (obj, member, value, setter) => {
  __accessCheck$5(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _autoRender$1;
let computePassIndex = 0;
class ComputePass {
  /**
   * ComputePass constructor
   * @param renderer - a {@link Renderer} class object or a {@link GPUCurtains} class object
   * @param parameters - {@link ComputePassParams | parameters} used to create our {@link ComputePass}
   */
  constructor(renderer, parameters = {}) {
    /**
     * Whether this {@link ComputePass} should be added to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically
     * @private
     */
    __privateAdd$5(this, _autoRender$1, true);
    // callbacks / events
    /** function assigned to the {@link onReady} callback */
    this._onReadyCallback = () => {
    };
    /** function assigned to the {@link onBeforeRender} callback */
    this._onBeforeRenderCallback = () => {
    };
    /** function assigned to the {@link onRender} callback */
    this._onRenderCallback = () => {
    };
    /** function assigned to the {@link onAfterRender} callback */
    this._onAfterRenderCallback = () => {
    };
    /** function assigned to the {@link onAfterResize} callback */
    this._onAfterResizeCallback = () => {
    };
    const type = "ComputePass";
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, parameters.label ? `${parameters.label} ${type}` : type);
    parameters.label = parameters.label ?? "ComputePass " + renderer.computePasses?.length;
    this.renderer = renderer;
    this.type = type;
    this.uuid = generateUUID();
    Object.defineProperty(this, "index", { value: computePassIndex++ });
    const {
      label,
      shaders,
      renderOrder,
      uniforms,
      storages,
      bindGroups,
      samplers,
      textures,
      renderTextures,
      autoRender,
      useAsyncPipeline,
      texturesOptions,
      dispatchSize
    } = parameters;
    this.options = {
      label,
      shaders,
      ...autoRender !== void 0 && { autoRender },
      ...renderOrder !== void 0 && { renderOrder },
      ...useAsyncPipeline !== void 0 && { useAsyncPipeline },
      ...dispatchSize !== void 0 && { dispatchSize },
      texturesOptions
      // TODO default
    };
    this.renderOrder = renderOrder ?? 0;
    if (autoRender !== void 0) {
      __privateSet$3(this, _autoRender$1, autoRender);
    }
    this.userData = {};
    this.ready = false;
    this.setComputeMaterial({
      label: this.options.label,
      shaders: this.options.shaders,
      uniforms,
      storages,
      bindGroups,
      samplers,
      textures,
      renderTextures,
      useAsyncPipeline,
      dispatchSize
    });
    this.addToScene();
  }
  /**
   * Get or set whether the compute pass is ready to render (the material has been successfully compiled)
   * @readonly
   */
  get ready() {
    return this._ready;
  }
  set ready(value) {
    if (value) {
      this._onReadyCallback && this._onReadyCallback();
    }
    this._ready = value;
  }
  /**
   * Add our compute pass to the scene and the renderer
   */
  addToScene() {
    this.renderer.computePasses.push(this);
    if (__privateGet$4(this, _autoRender$1)) {
      this.renderer.scene.addComputePass(this);
    }
  }
  /**
   * Remove our compute pass from the scene and the renderer
   */
  removeFromScene() {
    if (__privateGet$4(this, _autoRender$1)) {
      this.renderer.scene.removeComputePass(this);
    }
    this.renderer.computePasses = this.renderer.computePasses.filter((computePass) => computePass.uuid !== this.uuid);
  }
  /**
   * Create the compute pass material
   * @param computeParameters - {@link ComputeMaterial} parameters
   */
  setComputeMaterial(computeParameters) {
    this.material = new ComputeMaterial(this.renderer, computeParameters);
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.
   * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to render
   */
  loseContext() {
    this.material.loseContext();
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored
   */
  restoreContext() {
    this.material.restoreContext();
  }
  /* TEXTURES */
  /**
   * Get our {@link ComputeMaterial#textures | ComputeMaterial textures array}
   * @readonly
   */
  get textures() {
    return this.material?.textures || [];
  }
  /**
   * Get our {@link ComputeMaterial#renderTextures | ComputeMaterial render textures array}
   * @readonly
   */
  get renderTextures() {
    return this.material?.renderTextures || [];
  }
  /**
   * Create a new {@link Texture}
   * @param options - {@link TextureParams | Texture parameters}
   * @returns - newly created {@link Texture}
   */
  createTexture(options) {
    if (!options.name) {
      options.name = "texture" + this.textures.length;
    }
    if (!options.label) {
      options.label = this.options.label + " " + options.name;
    }
    const texture = new Texture(this.renderer, { ...options, ...this.options.texturesOptions });
    this.addTexture(texture);
    return texture;
  }
  /**
   * Add a {@link Texture}
   * @param texture - {@link Texture} to add
   */
  addTexture(texture) {
    this.material.addTexture(texture);
  }
  /**
   * Create a new {@link RenderTexture}
   * @param  options - {@link RenderTextureParams | RenderTexture parameters}
   * @returns - newly created {@link RenderTexture}
   */
  createRenderTexture(options) {
    if (!options.name) {
      options.name = "renderTexture" + this.renderTextures.length;
    }
    const renderTexture = new RenderTexture(this.renderer, options);
    this.addRenderTexture(renderTexture);
    return renderTexture;
  }
  /**
   * Add a {@link RenderTexture}
   * @param renderTexture - {@link RenderTexture} to add
   */
  addRenderTexture(renderTexture) {
    this.material.addTexture(renderTexture);
  }
  /**
   * Get our {@link ComputeMaterial#uniforms | ComputeMaterial uniforms}
   * @readonly
   */
  get uniforms() {
    return this.material?.uniforms;
  }
  /**
   * Get our {@link ComputeMaterial#storages | ComputeMaterial storages}
   * @readonly
   */
  get storages() {
    return this.material?.storages;
  }
  /**
   * Called from the renderer, useful to trigger an after resize callback.
   */
  resize() {
    this._onAfterResizeCallback && this._onAfterResizeCallback();
  }
  /** EVENTS **/
  /**
   * Callback to run when the {@link ComputePass} is ready
   * @param callback - callback to run when {@link ComputePass} is ready
   */
  onReady(callback) {
    if (callback) {
      this._onReadyCallback = callback;
    }
    return this;
  }
  /**
   * Callback to run before the {@link ComputePass} is rendered
   * @param callback - callback to run just before {@link ComputePass} will be rendered
   */
  onBeforeRender(callback) {
    if (callback) {
      this._onBeforeRenderCallback = callback;
    }
    return this;
  }
  /**
   * Callback to run when the {@link ComputePass} is rendered
   * @param callback - callback to run when {@link ComputePass} is rendered
   */
  onRender(callback) {
    if (callback) {
      this._onRenderCallback = callback;
    }
    return this;
  }
  /**
   * Callback to run after the {@link ComputePass} has been rendered
   * @param callback - callback to run just after {@link ComputePass} has been rendered
   */
  onAfterRender(callback) {
    if (callback) {
      this._onAfterRenderCallback = callback;
    }
    return this;
  }
  /**
   * Callback used to run a custom render function instead of the default one.
   * @param callback - Your custom render function where you will have to set all the {@link core/bindGroups/BindGroup.BindGroup | bind groups} and dispatch the workgroups by yourself.
   */
  useCustomRender(callback) {
    this.material.useCustomRender(callback);
    return this;
  }
  /**
   * Callback to run after the {@link core/renderers/GPURenderer.GPURenderer | renderer} has been resized
   * @param callback - callback to run just after {@link core/renderers/GPURenderer.GPURenderer | renderer} has been resized
   */
  onAfterResize(callback) {
    if (callback) {
      this._onAfterResizeCallback = callback;
    }
    return this;
  }
  /**
   * Called before rendering the ComputePass
   * Checks if the material is ready and eventually update its struct
   */
  onBeforeRenderPass() {
    if (!this.renderer.ready)
      return;
    if (this.material && this.material.ready && !this.ready) {
      this.ready = true;
    }
    this._onBeforeRenderCallback && this._onBeforeRenderCallback();
    this.material.onBeforeRender();
  }
  /**
   * Render our {@link ComputeMaterial}
   * @param pass - current compute pass encoder
   */
  onRenderPass(pass) {
    if (!this.material.ready)
      return;
    this._onRenderCallback && this._onRenderCallback();
    this.material.render(pass);
  }
  /**
   * Called after having rendered the ComputePass
   */
  onAfterRenderPass() {
    this._onAfterRenderCallback && this._onAfterRenderCallback();
  }
  /**
   * Render our compute pass
   * Basically just check if our {@link core/renderers/GPURenderer.GPURenderer | renderer} is ready, and then render our {@link ComputeMaterial}
   * @param pass
   */
  render(pass) {
    this.onBeforeRenderPass();
    if (!this.renderer.ready)
      return;
    !this.renderer.production && pass.pushDebugGroup(this.options.label);
    this.onRenderPass(pass);
    !this.renderer.production && pass.popDebugGroup();
    this.onAfterRenderPass();
  }
  /**
   * Copy the result of our read/write GPUBuffer into our result binding array
   * @param commandEncoder - current GPU command encoder
   */
  copyBufferToResult(commandEncoder) {
    this.material?.copyBufferToResult(commandEncoder);
  }
  /**
   * Get the {@link core/bindings/WritableBufferBinding.WritableBufferBinding#resultBuffer | result GPU buffer} content by {@link core/bindings/WritableBufferBinding.WritableBufferBinding | binding} and {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} names
   * @param parameters - parameters used to get the result
   * @param parameters.bindingName - {@link core/bindings/WritableBufferBinding.WritableBufferBinding#name | binding name} from which to get the result
   * @param parameters.bufferElementName - optional {@link core/bindings/bufferElements/BufferElement.BufferElement | buffer element} (i.e. struct member) name if the result needs to be restrained to only one element
   * @async
   * @returns - the mapped content of the {@link GPUBuffer} as a {@link Float32Array}
   */
  async getComputeResult({
    bindingName,
    bufferElementName
  }) {
    return await this.material?.getComputeResult({ bindingName, bufferElementName });
  }
  /**
   * Remove the ComputePass from the scene and destroy it
   */
  remove() {
    this.removeFromScene();
    this.destroy();
  }
  /**
   * Destroy the ComputePass
   */
  destroy() {
    this.material?.destroy();
  }
}
_autoRender$1 = new WeakMap();

const points = [new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3(), new Vec3()];
class Box3 {
  /**
   * Box3 constructor
   * @param min - min {@link Vec3 | vector} of the {@link Box3}
   * @param max - max {@link Vec3 | vector} of the {@link Box3}
   */
  constructor(min = new Vec3(Infinity), max = new Vec3(-Infinity)) {
    this.min = min;
    this.max = max;
  }
  /**
   * Set a {@link Box3} from two min and max {@link Vec3 | vectors}
   * @param min - min {@link Vec3 | vector} of the {@link Box3}
   * @param max - max {@link Vec3 | vector} of the {@link Box3}
   */
  set(min = new Vec3(Infinity), max = new Vec3(-Infinity)) {
    this.min.copy(min);
    this.max.copy(max);
    return this;
  }
  /**
   * Clone this {@link Box3}
   * @returns - cloned {@link Box3}
   */
  clone() {
    return new Box3().set(this.min, this.max);
  }
  /**
   * Get the {@link Box3} center
   * @returns - {@link Vec3 | center vector} of the {@link Box3}
   */
  getCenter() {
    return this.max.clone().add(this.min).multiplyScalar(0.5);
  }
  /**
   * Get the {@link Box3} size
   * @returns - {@link Vec3 | size vector} of the {@link Box3}
   */
  getSize() {
    return this.max.clone().sub(this.min);
  }
  /**
   * Apply a {@link Mat4 | matrix} to a {@link Box3}
   * Useful to apply a transformation {@link Mat4 | matrix} to a {@link Box3}
   * @param matrix - {@link Mat4 | matrix} to use
   * @returns - this {@link Box3} after {@link Mat4 | matrix} application
   */
  applyMat4(matrix = new Mat4()) {
    const corners = [];
    if (this.min.z === this.max.z) {
      corners[0] = points[0].set(this.min.x, this.min.y, this.min.z).applyMat4(matrix);
      corners[1] = points[2].set(this.min.x, this.max.y, this.min.z).applyMat4(matrix);
      corners[2] = points[4].set(this.max.x, this.min.y, this.min.z).applyMat4(matrix);
      corners[3] = points[6].set(this.max.x, this.max.y, this.min.z).applyMat4(matrix);
    } else {
      corners[0] = points[0].set(this.min.x, this.min.y, this.min.z).applyMat4(matrix);
      corners[1] = points[1].set(this.min.x, this.min.y, this.max.z).applyMat4(matrix);
      corners[2] = points[2].set(this.min.x, this.max.y, this.min.z).applyMat4(matrix);
      corners[3] = points[3].set(this.min.x, this.max.y, this.max.z).applyMat4(matrix);
      corners[4] = points[4].set(this.max.x, this.min.y, this.min.z).applyMat4(matrix);
      corners[5] = points[5].set(this.max.x, this.min.y, this.max.z).applyMat4(matrix);
      corners[6] = points[6].set(this.max.x, this.max.y, this.min.z).applyMat4(matrix);
      corners[7] = points[7].set(this.max.x, this.max.y, this.max.z).applyMat4(matrix);
    }
    const transFormedBox = new Box3();
    for (let i = 0, cornersCount = corners.length; i < cornersCount; i++) {
      transFormedBox.min.min(corners[i]);
      transFormedBox.max.max(corners[i]);
    }
    return transFormedBox;
  }
}

const defaultDOMFrustumMargins = {
  top: 0,
  right: 0,
  bottom: 0,
  left: 0
};
class DOMFrustum {
  /**
   * DOMFrustum constructor
   * @param {DOMFrustumParams} parameters - {@link DOMFrustumParams | parameters} used to create our {@link DOMFrustum}
   */
  constructor({
    boundingBox = new Box3(),
    modelViewProjectionMatrix = new Mat4(),
    containerBoundingRect = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      width: 0,
      height: 0,
      x: 0,
      y: 0
    },
    DOMFrustumMargins = defaultDOMFrustumMargins,
    onReEnterView = () => {
    },
    onLeaveView = () => {
    }
  }) {
    this.boundingBox = boundingBox;
    this.modelViewProjectionMatrix = modelViewProjectionMatrix;
    this.containerBoundingRect = containerBoundingRect;
    this.DOMFrustumMargins = { ...defaultDOMFrustumMargins, ...DOMFrustumMargins };
    this.projectedBoundingRect = {
      top: 0,
      right: 0,
      bottom: 0,
      left: 0,
      width: 0,
      height: 0,
      x: 0,
      y: 0
    };
    this.onReEnterView = onReEnterView;
    this.onLeaveView = onLeaveView;
    this.isIntersecting = false;
    this.shouldUpdate = false;
  }
  /**
   * Set our {@link containerBoundingRect} (called on resize)
   * @param boundingRect - new bounding rectangle
   */
  setContainerBoundingRect(boundingRect) {
    this.containerBoundingRect = boundingRect;
  }
  /**
   * Get our DOM frustum bounding rectangle, i.e. our {@link containerBoundingRect} with the {@link DOMFrustumMargins} applied
   * @readonly
   */
  get DOMFrustumBoundingRect() {
    return {
      top: this.projectedBoundingRect.top - this.DOMFrustumMargins.top,
      right: this.projectedBoundingRect.right + this.DOMFrustumMargins.right,
      bottom: this.projectedBoundingRect.bottom + this.DOMFrustumMargins.bottom,
      left: this.projectedBoundingRect.left - this.DOMFrustumMargins.left
    };
  }
  /**
   * Applies all {@link modelViewProjectionMatrix} transformations to our {@link boundingBox} and then check against intersections
   */
  computeProjectedToDocumentCoords() {
    const projectedBox = this.boundingBox.applyMat4(this.modelViewProjectionMatrix);
    projectedBox.min.x = (projectedBox.min.x + 1) * 0.5;
    projectedBox.max.x = (projectedBox.max.x + 1) * 0.5;
    projectedBox.min.y = 1 - (projectedBox.min.y + 1) * 0.5;
    projectedBox.max.y = 1 - (projectedBox.max.y + 1) * 0.5;
    const { width, height, top, left } = this.containerBoundingRect;
    this.projectedBoundingRect = {
      left: projectedBox.min.x * width + left,
      x: projectedBox.min.x * width + left,
      top: projectedBox.max.y * height + top,
      y: projectedBox.max.y * height + top,
      right: projectedBox.max.x * width + left,
      bottom: projectedBox.min.y * height + top,
      width: projectedBox.max.x * width + left - (projectedBox.min.x * width + left),
      height: projectedBox.min.y * height + top - (projectedBox.max.y * height + top)
    };
    this.intersectsContainer();
  }
  /**
   * Check whether our {@link projectedBoundingRect} intersects with our {@link DOMFrustumBoundingRect}
   */
  intersectsContainer() {
    if (Math.round(this.DOMFrustumBoundingRect.right) <= this.containerBoundingRect.left || Math.round(this.DOMFrustumBoundingRect.left) >= this.containerBoundingRect.left + this.containerBoundingRect.width || Math.round(this.DOMFrustumBoundingRect.bottom) <= this.containerBoundingRect.top || Math.round(this.DOMFrustumBoundingRect.top) >= this.containerBoundingRect.top + this.containerBoundingRect.height) {
      if (this.isIntersecting) {
        this.onLeaveView();
      }
      this.isIntersecting = false;
    } else {
      if (!this.isIntersecting) {
        this.onReEnterView();
      }
      this.isIntersecting = true;
    }
  }
}

var __accessCheck$4 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateAdd$4 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateMethod = (obj, member, method) => {
  __accessCheck$4(obj, member, "access private method");
  return method;
};
var _setWGSLFragment, setWGSLFragment_fn;
class Geometry {
  /**
   * Geometry constructor
   * @param parameters - {@link GeometryParams | parameters} used to create our Geometry
   */
  constructor({
    verticesOrder = "ccw",
    topology = "triangle-list",
    instancesCount = 1,
    vertexBuffers = []
  } = {}) {
    /**
     * Set the WGSL code snippet that will be appended to the vertex shader.
     * @private
     */
    __privateAdd$4(this, _setWGSLFragment);
    this.verticesCount = 0;
    this.verticesOrder = verticesOrder;
    this.topology = topology;
    this.instancesCount = instancesCount;
    this.boundingBox = new Box3();
    this.type = "Geometry";
    this.vertexBuffers = [];
    this.addVertexBuffer({
      name: "attributes"
    });
    this.options = {
      verticesOrder,
      instancesCount,
      vertexBuffers,
      topology
    };
    vertexBuffers.forEach((vertexBuffer) => {
      this.addVertexBuffer({
        stepMode: vertexBuffer.stepMode ?? "vertex",
        name: vertexBuffer.name,
        attributes: vertexBuffer.attributes
      });
    });
  }
  /**
   * Get whether this Geometry is ready to compute, i.e. if its first vertex buffer array has not been created yet
   * @readonly
   */
  get shouldCompute() {
    return this.vertexBuffers.length && !this.vertexBuffers[0].array;
  }
  /**
   * Get whether this geometry is ready to draw, i.e. it has been computed and all its vertex buffers have been created
   * @readonly
   */
  get ready() {
    return !this.shouldCompute && !this.vertexBuffers.find((vertexBuffer) => !vertexBuffer.buffer);
  }
  /**
   * Add a vertex buffer to our Geometry, set its attributes and return it
   * @param parameters - vertex buffer {@link VertexBufferParams | parameters}
   * @returns - newly created {@link VertexBuffer | vertex buffer}
   */
  addVertexBuffer({ stepMode = "vertex", name, attributes = [] } = {}) {
    const vertexBuffer = {
      name: name ?? "attributes" + this.vertexBuffers.length,
      stepMode,
      arrayStride: 0,
      bufferLength: 0,
      attributes: [],
      buffer: null
    };
    attributes?.forEach((attribute) => {
      this.setAttribute({
        vertexBuffer,
        ...attribute
      });
    });
    this.vertexBuffers.push(vertexBuffer);
    return vertexBuffer;
  }
  /**
   * Get a vertex buffer by name
   * @param name - our vertex buffer name
   * @returns - found {@link VertexBuffer | vertex buffer} or null if not found
   */
  getVertexBufferByName(name = "") {
    return this.vertexBuffers.find((vertexBuffer) => vertexBuffer.name === name);
  }
  /**
   * Set a vertex buffer attribute
   * @param parameters - attributes {@link VertexBufferAttributeParams | parameters}
   */
  setAttribute({
    vertexBuffer = this.vertexBuffers[0],
    name,
    type = "vec3f",
    bufferFormat = "float32x3",
    size = 3,
    array = new Float32Array(this.verticesCount * size),
    verticesStride = 1
  }) {
    const attributes = vertexBuffer.attributes;
    const attributesLength = attributes.length;
    if (!name)
      name = "geometryAttribute" + attributesLength;
    if (name === "position" && (type !== "vec3f" || bufferFormat !== "float32x3" || size !== 3)) {
      throwWarning(
        `Geometry 'position' attribute must have this exact properties set:
	type: 'vec3f',
	bufferFormat: 'float32x3',
	size: 3`
      );
      type = "vec3f";
      bufferFormat = "float32x3";
      size = 3;
    }
    const attributeCount = array.length / size;
    if (name === "position") {
      this.verticesCount = attributeCount;
    }
    if (vertexBuffer.stepMode === "vertex" && this.verticesCount && this.verticesCount !== attributeCount * verticesStride) {
      throwError(
        `Geometry vertex attribute error. Attribute array of size ${size} must be of length: ${this.verticesCount * size}, current given: ${array.length}. (${this.verticesCount} vertices).`
      );
    } else if (vertexBuffer.stepMode === "instance" && attributeCount !== this.instancesCount) {
      throwError(
        `Geometry instance attribute error. Attribute array of size ${size} must be of length: ${this.instancesCount * size}, current given: ${array.length}. (${this.instancesCount} instances).`
      );
    }
    const attribute = {
      name,
      type,
      bufferFormat,
      size,
      bufferLength: array.length,
      offset: attributesLength ? attributes.reduce((accumulator, currentValue) => {
        return accumulator + currentValue.bufferLength;
      }, 0) : 0,
      bufferOffset: attributesLength ? attributes[attributesLength - 1].bufferOffset + attributes[attributesLength - 1].size * 4 : 0,
      array,
      verticesStride
    };
    vertexBuffer.bufferLength += attribute.bufferLength * verticesStride;
    vertexBuffer.arrayStride += attribute.size;
    vertexBuffer.attributes.push(attribute);
  }
  /**
   * Get an attribute by name
   * @param name - name of the attribute to find
   * @returns - found {@link VertexBufferAttribute | attribute} or null if not found
   */
  getAttributeByName(name) {
    let attribute;
    this.vertexBuffers.forEach((vertexBuffer) => {
      attribute = vertexBuffer.attributes.find((attribute2) => attribute2.name === name);
    });
    return attribute;
  }
  /**
   * Compute a Geometry, which means iterate through all vertex buffers and create the attributes array that will be sent as buffers.
   * Also compute the Geometry bounding box.
   */
  computeGeometry() {
    if (!this.shouldCompute)
      return;
    this.vertexBuffers.forEach((vertexBuffer, index) => {
      if (index === 0) {
        const hasPositionAttribute = vertexBuffer.attributes.find(
          (attribute) => attribute.name === "position"
        );
        if (!hasPositionAttribute) {
          throwError(`Geometry must have a 'position' attribute`);
        }
        if (hasPositionAttribute.type !== "vec3f" || hasPositionAttribute.bufferFormat !== "float32x3" || hasPositionAttribute.size !== 3) {
          throwWarning(
            `Geometry 'position' attribute must have this exact properties set:
	type: 'vec3f',
	bufferFormat: 'float32x3',
	size: 3`
          );
          hasPositionAttribute.type = "vec3f";
          hasPositionAttribute.bufferFormat = "float32x3";
          hasPositionAttribute.size = 3;
        }
      }
      vertexBuffer.array = new Float32Array(vertexBuffer.bufferLength);
      let currentIndex = 0;
      let attributeIndex = 0;
      for (let i = 0; i < vertexBuffer.bufferLength; i += vertexBuffer.arrayStride) {
        for (let j = 0; j < vertexBuffer.attributes.length; j++) {
          const { name, size, array, verticesStride } = vertexBuffer.attributes[j];
          for (let s = 0; s < size; s++) {
            const attributeValue = array[Math.floor(attributeIndex / verticesStride) * size + s];
            vertexBuffer.array[currentIndex] = attributeValue;
            if (name === "position") {
              if (s % 3 === 0) {
                if (this.boundingBox.min.x > attributeValue)
                  this.boundingBox.min.x = attributeValue;
                if (this.boundingBox.max.x < attributeValue)
                  this.boundingBox.max.x = attributeValue;
              } else if (s % 3 === 1) {
                if (this.boundingBox.min.y > attributeValue)
                  this.boundingBox.min.y = attributeValue;
                if (this.boundingBox.max.y < attributeValue)
                  this.boundingBox.max.y = attributeValue;
              } else if (s % 3 === 2) {
                if (this.boundingBox.min.z > attributeValue)
                  this.boundingBox.min.z = attributeValue;
                if (this.boundingBox.max.z < attributeValue)
                  this.boundingBox.max.z = attributeValue;
              }
            }
            currentIndex++;
          }
        }
        attributeIndex++;
      }
    });
    __privateMethod(this, _setWGSLFragment, setWGSLFragment_fn).call(this);
  }
  /** RENDER **/
  /**
   * Set our render pass geometry vertex buffers
   * @param pass - current render pass
   */
  setGeometryBuffers(pass) {
    this.vertexBuffers.forEach((vertexBuffer, index) => {
      pass.setVertexBuffer(index, vertexBuffer.buffer);
    });
  }
  /**
   * Draw our geometry
   * @param pass - current render pass
   */
  drawGeometry(pass) {
    pass.draw(this.verticesCount, this.instancesCount);
  }
  /**
   * Set our vertex buffers then draw the geometry
   * @param pass - current render pass
   */
  render(pass) {
    if (!this.ready)
      return;
    this.setGeometryBuffers(pass);
    this.drawGeometry(pass);
  }
  /**
   * Destroy our geometry vertex buffers
   */
  destroy() {
    this.vertexBuffers.forEach((vertexBuffer) => {
      vertexBuffer.buffer?.destroy();
      vertexBuffer.buffer = null;
    });
  }
}
_setWGSLFragment = new WeakSet();
setWGSLFragment_fn = function() {
  let locationIndex = -1;
  this.wgslStructFragment = `struct Attributes {
	@builtin(vertex_index) vertexIndex : u32,
	@builtin(instance_index) instanceIndex : u32,${this.vertexBuffers.map((vertexBuffer) => {
    return vertexBuffer.attributes.map((attribute) => {
      locationIndex++;
      return `
	@location(${locationIndex}) ${attribute.name}: ${attribute.type}`;
    });
  }).join(",")}
};`;
};

class IndexedGeometry extends Geometry {
  /**
   * IndexedGeometry constructor
   * @param parameters - {@link GeometryParams | parameters} used to create our IndexedGeometry
   */
  constructor({
    verticesOrder = "ccw",
    topology = "triangle-list",
    instancesCount = 1,
    vertexBuffers = []
  } = {}) {
    super({ verticesOrder, topology, instancesCount, vertexBuffers });
    this.type = "IndexedGeometry";
  }
  /**
   * Get whether this geometry is ready to draw, i.e. it has been computed, all its vertex buffers have been created and its index buffer has been created as well
   * @readonly
   */
  get ready() {
    return !this.shouldCompute && !this.vertexBuffers.find((vertexBuffer) => !vertexBuffer.buffer) && this.indexBuffer && !!this.indexBuffer.buffer;
  }
  /**
   * If we have less than 65.536 vertices, we should use a Uin16Array to hold our index buffer values
   * @readonly
   */
  get useUint16IndexArray() {
    return this.verticesCount < 256 * 256;
  }
  /**
   * Set our {@link indexBuffer}
   * @param parameters - {@link IndexedGeometryIndexBufferOptions | parameters} used to create our index buffer
   */
  setIndexBuffer({ bufferFormat = "uint32", array = new Uint32Array(0) }) {
    this.indexBuffer = {
      array,
      bufferFormat,
      bufferLength: array.length,
      buffer: null
    };
  }
  /** RENDER **/
  /**
   * First, set our render pass geometry vertex buffers
   * Then, set our render pass geometry index buffer
   * @param pass - current render pass
   */
  setGeometryBuffers(pass) {
    super.setGeometryBuffers(pass);
    pass.setIndexBuffer(this.indexBuffer.buffer, this.indexBuffer.bufferFormat);
  }
  /**
   * Override the parentMesh draw method to draw indexed geometry
   * @param pass - current render pass
   */
  drawGeometry(pass) {
    pass.drawIndexed(this.indexBuffer.bufferLength, this.instancesCount);
  }
  /**
   * Destroy our indexed geometry vertex buffers and index buffer
   */
  destroy() {
    super.destroy();
    this.indexBuffer?.buffer?.destroy();
    this.indexBuffer.buffer = null;
  }
}

class PlaneGeometry extends IndexedGeometry {
  /**
   * PlaneGeometry constructor
   * @param parameters - {@link PlaneGeometryParams | parameters} used to create our PlaneGeometry
   */
  constructor({
    widthSegments = 1,
    heightSegments = 1,
    instancesCount = 1,
    vertexBuffers = [],
    topology
  } = {}) {
    super({ verticesOrder: "cw", topology, instancesCount, vertexBuffers });
    this.type = "PlaneGeometry";
    widthSegments = Math.floor(widthSegments);
    heightSegments = Math.floor(heightSegments);
    this.definition = {
      id: widthSegments * heightSegments + widthSegments,
      width: widthSegments,
      height: heightSegments,
      count: widthSegments * heightSegments
    };
    const verticesCount = (this.definition.width + 1) * (this.definition.height + 1);
    const attributes = this.getIndexedVerticesAndUVs(verticesCount);
    Object.keys(attributes).forEach((attributeKey) => {
      this.setAttribute(attributes[attributeKey]);
    });
    this.setIndexArray();
  }
  /**
   * Set our PlaneGeometry index array
   */
  setIndexArray() {
    const indexArray = this.useUint16IndexArray ? new Uint16Array(this.definition.count * 6) : new Uint32Array(this.definition.count * 6);
    let index = 0;
    for (let y = 0; y < this.definition.height; y++) {
      for (let x = 0; x < this.definition.width; x++) {
        indexArray[index++] = x + y * (this.definition.width + 1);
        indexArray[index++] = this.definition.width + x + 1 + y * (this.definition.width + 1);
        indexArray[index++] = x + 1 + y * (this.definition.width + 1);
        indexArray[index++] = x + 1 + y * (this.definition.width + 1);
        indexArray[index++] = this.definition.width + x + 1 + y * (this.definition.width + 1);
        indexArray[index++] = this.definition.width + x + 2 + y * (this.definition.width + 1);
      }
    }
    this.setIndexBuffer({
      array: indexArray,
      bufferFormat: this.useUint16IndexArray ? "uint16" : "uint32"
    });
  }
  /**
   * Compute the UV and position arrays based on our plane widthSegments and heightSegments values and return the corresponding attributes
   * @param verticesCount - {@link Geometry#verticesCount | number of vertices} of our {@link PlaneGeometry}
   * @returns - our position and uv {@link VertexBufferAttributeParams | attributes}
   */
  getIndexedVerticesAndUVs(verticesCount) {
    const uv = {
      name: "uv",
      type: "vec2f",
      bufferFormat: "float32x2",
      size: 2,
      array: new Float32Array(verticesCount * 2)
    };
    const position = {
      name: "position",
      type: "vec3f",
      bufferFormat: "float32x3",
      // nb of triangles * 3 vertices per triangle * 3 coordinates per triangle
      size: 3,
      array: new Float32Array(verticesCount * 3)
    };
    const normal = {
      name: "normal",
      type: "vec3f",
      bufferFormat: "float32x3",
      // nb of triangles * 3 vertices per triangle * 3 coordinates per triangle
      size: 3,
      array: new Float32Array(verticesCount * 3)
    };
    let positionOffset = 0;
    let normalOffset = 0;
    let uvOffset = 0;
    for (let y = 0; y <= this.definition.height; y++) {
      for (let x = 0; x <= this.definition.width; x++) {
        uv.array[uvOffset++] = x / this.definition.width;
        uv.array[uvOffset++] = 1 - y / this.definition.height;
        position.array[positionOffset++] = x * 2 / this.definition.width - 1;
        position.array[positionOffset++] = y * 2 / this.definition.height - 1;
        position.array[positionOffset++] = 0;
        normal.array[normalOffset++] = 0;
        normal.array[normalOffset++] = 0;
        normal.array[normalOffset++] = 1;
      }
    }
    return { position, uv, normal };
  }
}

class RenderMaterial extends Material {
  /**
   * RenderMaterial constructor
   * @param renderer - our renderer class object
   * @param parameters - {@link RenderMaterialParams | parameters} used to create our RenderMaterial
   */
  constructor(renderer, parameters) {
    renderer = renderer && renderer.renderer || renderer;
    const type = "RenderMaterial";
    isRenderer(renderer, type);
    super(renderer, parameters);
    this.type = type;
    this.renderer = renderer;
    const { shaders, label, useAsyncPipeline, uniforms, storages, bindGroups, ...renderingOptions } = parameters;
    if (!shaders.vertex.entryPoint) {
      shaders.vertex.entryPoint = "main";
    }
    if (!shaders.fragment.entryPoint) {
      shaders.fragment.entryPoint = "main";
    }
    this.options = {
      ...this.options,
      shaders,
      rendering: renderingOptions
    };
    this.pipelineEntry = this.renderer.pipelineManager.createRenderPipeline({
      renderer: this.renderer,
      label: this.options.label + " render pipeline",
      shaders: this.options.shaders,
      useAsync: this.options.useAsyncPipeline,
      ...this.options.rendering
    });
    this.attributes = null;
  }
  /**
   * When all bind groups and attributes are created, add them to the {@link RenderPipelineEntry}
   */
  setPipelineEntryProperties() {
    this.pipelineEntry.setPipelineEntryProperties({
      attributes: this.attributes,
      bindGroups: this.bindGroups
    });
  }
  /**
   * Compile the {@link RenderPipelineEntry}
   * @async
   */
  async compilePipelineEntry() {
    await this.pipelineEntry.compilePipelineEntry();
  }
  /**
   * Check if attributes and all bind groups are ready, create them if needed and set {@link RenderPipelineEntry} bind group buffers and compile the pipeline
   * @async
   */
  async compileMaterial() {
    super.compileMaterial();
    if (this.attributes && this.pipelineEntry && this.pipelineEntry.canCompile) {
      this.setPipelineEntryProperties();
      await this.compilePipelineEntry();
    }
  }
  /**
   * Set or reset one of the {@link RenderMaterialRenderingOptions | rendering options}. Should be use with great caution, because if the {@link RenderPipelineEntry#pipeline | render pipeline} has already been compiled, it can cause a pipeline flush.
   * @param renderingOptions - new {@link RenderMaterialRenderingOptions | rendering options} properties to be set
   */
  setRenderingOptions(renderingOptions = {}) {
    const newProperties = Object.keys(renderingOptions).filter(
      (key) => renderingOptions[key] !== this.options.rendering[key]
    );
    this.options.rendering = { ...this.options.rendering, ...renderingOptions };
    if (this.pipelineEntry) {
      this.pipelineEntry.options = { ...this.pipelineEntry.options, ...this.options.rendering };
      if (this.pipelineEntry.ready && newProperties.length) {
        throwWarning(
          `${this.options.label}: the change of rendering options is causing this RenderMaterial pipeline to be flushed and recompiled. This should be avoided. Rendering options that caused this: { ${newProperties.map((key) => `"${key}": ${renderingOptions[key]}`).join(", ")} }`
        );
        this.pipelineEntry.flushPipelineEntry(this.bindGroups);
      }
    }
  }
  /* ATTRIBUTES */
  /**
   * Compute geometry if needed and get all useful geometry properties needed to create attributes buffers
   * @param geometry - the geometry to draw
   */
  setAttributesFromGeometry(geometry) {
    this.attributes = {
      wgslStructFragment: geometry.wgslStructFragment,
      vertexBuffers: geometry.vertexBuffers
    };
  }
  /* BIND GROUPS */
  /**
   * Create the bind groups if they need to be created, but first add Camera bind group if needed
   */
  createBindGroups() {
    const bindGroupStartIndex = this.options.rendering.useProjection ? 1 : 0;
    if (this.texturesBindGroup.shouldCreateBindGroup) {
      this.texturesBindGroup.setIndex(this.bindGroups.length + bindGroupStartIndex);
      this.texturesBindGroup.createBindGroup();
      this.bindGroups.push(this.texturesBindGroup);
    }
    this.inputsBindGroups.forEach((bindGroup) => {
      if (bindGroup.shouldCreateBindGroup) {
        bindGroup.setIndex(this.bindGroups.length + bindGroupStartIndex);
        bindGroup.createBindGroup();
        this.bindGroups.push(bindGroup);
      }
    });
  }
}

var default_vsWgsl = (
  /* wgsl */
  `
struct VertexOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
};

@vertex fn main(
  attributes: Attributes,
) -> VertexOutput {
  var vsOutput: VertexOutput;

  vsOutput.position = vec4f(attributes.position, 1.0);
  vsOutput.uv = attributes.uv;
  
  return vsOutput;
}`
);

var default_fsWgsl = (
  /* wgsl */
  `
@fragment fn main() -> @location(0) vec4f {
  return vec4(0.0, 0.0, 0.0, 1.0);
}`
);

var __accessCheck$3 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet$3 = (obj, member, getter) => {
  __accessCheck$3(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$3 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$2 = (obj, member, value, setter) => {
  __accessCheck$3(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
let meshIndex = 0;
const defaultMeshBaseParams = {
  // geometry
  geometry: new Geometry(),
  // material
  shaders: {},
  autoRender: true,
  useProjection: false,
  // rendering
  cullMode: "back",
  depth: true,
  depthWriteEnabled: true,
  depthCompare: "less",
  transparent: false,
  visible: true,
  renderOrder: 0,
  // textures
  texturesOptions: {}
};
function MeshBaseMixin(Base) {
  var _autoRender, _a;
  return _a = class extends Base {
    /**
     * MeshBase constructor
     *
     * @typedef MeshBaseArrayParams
     * @type {array}
     * @property {(Renderer|GPUCurtains)} 0 - our {@link Renderer} class object
     * @property {(string|HTMLElement|null)} 1 - a DOM HTML Element that can be bound to a Mesh
     * @property {MeshBaseParams} 2 - {@link MeshBaseParams | Mesh base parameters}
     *
     * @param {MeshBaseArrayParams} params - our MeshBaseMixin parameters
     */
    constructor(...params) {
      super(
        params[0],
        params[1],
        { ...defaultMeshBaseParams, ...params[2] }
      );
      /** Whether we should add this {@link MeshBase} to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */
      __privateAdd$3(this, _autoRender, true);
      // callbacks / events
      /** function assigned to the {@link onReady} callback */
      this._onReadyCallback = () => {
      };
      /** function assigned to the {@link onBeforeRender} callback */
      this._onBeforeRenderCallback = () => {
      };
      /** function assigned to the {@link onRender} callback */
      this._onRenderCallback = () => {
      };
      /** function assigned to the {@link onAfterRender} callback */
      this._onAfterRenderCallback = () => {
      };
      /** function assigned to the {@link onAfterResize} callback */
      this._onAfterResizeCallback = () => {
      };
      let renderer = params[0];
      const parameters = { ...defaultMeshBaseParams, ...params[2] };
      this.type = "MeshBase";
      this.uuid = generateUUID();
      Object.defineProperty(this, "index", { value: meshIndex++ });
      renderer = renderer && renderer.renderer || renderer;
      isRenderer(renderer, parameters.label ? parameters.label + " " + this.type : this.type);
      this.renderer = renderer;
      const {
        label,
        shaders,
        geometry,
        visible,
        renderOrder,
        renderTarget,
        texturesOptions,
        autoRender,
        ...meshParameters
      } = parameters;
      meshParameters.sampleCount = meshParameters.sampleCount ?? (this.renderer && this.renderer.renderPass) ? this.renderer.renderPass.options.sampleCount : 1;
      this.options = {
        ...this.options ?? {},
        // merge possible lower options?
        label: label ?? "Mesh " + this.renderer.meshes.length,
        shaders,
        texturesOptions,
        ...renderTarget !== void 0 && { renderTarget },
        ...autoRender !== void 0 && { autoRender },
        ...meshParameters.useAsyncPipeline !== void 0 && { useAsyncPipeline: meshParameters.useAsyncPipeline }
      };
      this.renderTarget = renderTarget ?? null;
      this.geometry = geometry;
      if (autoRender !== void 0) {
        __privateSet$2(this, _autoRender, autoRender);
      }
      this.visible = visible;
      this.renderOrder = renderOrder;
      this.ready = false;
      this.userData = {};
      this.computeGeometry();
      this.setMaterial({
        label: this.options.label,
        shaders: this.options.shaders,
        ...{ ...meshParameters, verticesOrder: geometry.verticesOrder, topology: geometry.topology }
      });
      this.addToScene();
    }
    /**
     * Get private #autoRender value
     * @readonly
     */
    get autoRender() {
      return __privateGet$3(this, _autoRender);
    }
    /**
     * Get/set whether a Mesh is ready or not
     * @readonly
     */
    get ready() {
      return this._ready;
    }
    set ready(value) {
      if (value) {
        this._onReadyCallback && this._onReadyCallback();
      }
      this._ready = value;
    }
    /* SCENE */
    /**
     * Add a Mesh to the renderer and the {@link core/scenes/Scene.Scene | Scene}
     */
    addToScene() {
      this.renderer.meshes.push(this);
      this.material?.setRenderingOptions({
        sampleCount: this.renderTarget ? this.renderTarget.renderPass.options.sampleCount : this.renderer.renderPass.options.sampleCount
      });
      if (__privateGet$3(this, _autoRender)) {
        this.renderer.scene.addMesh(this);
      }
    }
    /**
     * Remove a Mesh from the renderer and the {@link core/scenes/Scene.Scene | Scene}
     */
    removeFromScene() {
      if (__privateGet$3(this, _autoRender)) {
        this.renderer.scene.removeMesh(this);
      }
      this.renderer.meshes = this.renderer.meshes.filter((m) => m.uuid !== this.uuid);
    }
    /**
     * Set a new {@link Renderer} for this Mesh
     * @param renderer - new {@link Renderer} to set
     */
    setRenderer(renderer) {
      renderer = renderer && renderer.renderer || renderer;
      if (!renderer || !(renderer.type === "GPURenderer" || renderer.type === "GPUCameraRenderer" || renderer.type === "GPUCurtainsRenderer")) {
        throwWarning(
          `${this.options.label}: Cannot set ${renderer} as a renderer because it is not of a valid Renderer type.`
        );
        return;
      }
      const oldRenderer = this.renderer;
      this.removeFromScene();
      this.renderer = renderer;
      this.addToScene();
      if (!oldRenderer.meshes.length) {
        oldRenderer.onBeforeRenderScene.add(
          (commandEncoder) => {
            oldRenderer.forceClear(commandEncoder);
          },
          { once: true }
        );
      }
    }
    /**
     * Assign or remove a {@link RenderTarget} to this Mesh
     * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a RenderTarget as well.
     * @param renderTarget - the RenderTarget to assign or null if we want to remove the current RenderTarget
     */
    setRenderTarget(renderTarget) {
      if (renderTarget && renderTarget.type !== "RenderTarget") {
        throwWarning(`${this.options.label ?? this.type}: renderTarget is not a RenderTarget: ${renderTarget}`);
        return;
      }
      this.removeFromScene();
      this.renderTarget = renderTarget;
      this.addToScene();
    }
    /**
     * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been lost to prepare everything for restoration.
     * Basically set all the {@link GPUBuffer} to null so they will be reset next time we try to draw the Mesh
     */
    loseContext() {
      this.geometry.vertexBuffers.forEach((vertexBuffer) => {
        vertexBuffer.buffer = null;
      });
      if ("indexBuffer" in this.geometry) {
        this.geometry.indexBuffer.buffer = null;
      }
      this.material.loseContext();
    }
    /**
     * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} has been restored
     */
    restoreContext() {
      this.material.restoreContext();
    }
    /* SHADERS */
    /**
     * Set default shaders if one or both of them are missing
     */
    setShaders() {
      let { shaders } = this.options;
      if (!shaders) {
        shaders = {
          vertex: {
            code: default_vsWgsl,
            entryPoint: "main"
          },
          fragment: {
            code: default_fsWgsl,
            entryPoint: "main"
          }
        };
      } else {
        if (!shaders.vertex || !shaders.vertex.code) {
          shaders.vertex = {
            code: default_vsWgsl,
            entryPoint: "main"
          };
        }
        if (!shaders.fragment || !shaders.fragment.code) {
          shaders.fragment = {
            code: default_fsWgsl,
            entryPoint: "main"
          };
        }
      }
    }
    /* GEOMETRY */
    /**
     * Compute the Mesh geometry if needed
     */
    computeGeometry() {
      if (this.geometry.shouldCompute) {
        this.geometry.computeGeometry();
      }
    }
    /**
     * Create the Mesh Geometry vertex and index buffers if needed
     */
    createGeometryBuffers() {
      if (!this.geometry.ready) {
        this.geometry.vertexBuffers.forEach((vertexBuffer) => {
          if (!vertexBuffer.buffer) {
            vertexBuffer.buffer = this.renderer.createBuffer({
              label: this.options.label + " geometry: " + vertexBuffer.name + " buffer",
              size: vertexBuffer.array.byteLength,
              usage: GPUBufferUsage.VERTEX | GPUBufferUsage.COPY_DST
            });
            this.renderer.queueWriteBuffer(vertexBuffer.buffer, 0, vertexBuffer.array);
          }
        });
        if ("indexBuffer" in this.geometry && this.geometry.indexBuffer && !this.geometry.indexBuffer.buffer) {
          this.geometry.indexBuffer.buffer = this.renderer.createBuffer({
            label: this.options.label + " geometry: index buffer",
            size: this.geometry.indexBuffer.array.byteLength,
            usage: GPUBufferUsage.INDEX | GPUBufferUsage.COPY_DST
          });
          this.renderer.queueWriteBuffer(this.geometry.indexBuffer.buffer, 0, this.geometry.indexBuffer.array);
        }
      }
    }
    /**
     * Set our Mesh geometry: create buffers and add attributes to material
     */
    setGeometry() {
      if (this.geometry && this.renderer.ready) {
        this.createGeometryBuffers();
        this.setMaterialGeometryAttributes();
      }
    }
    /* MATERIAL */
    /**
     * Set a Mesh transparent property, then set its material
     * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}
     */
    setMaterial(meshParameters) {
      this.transparent = meshParameters.transparent;
      this.setShaders();
      this.material = new RenderMaterial(this.renderer, meshParameters);
      this.material.options.textures?.filter((texture) => texture instanceof Texture).forEach((texture) => this.onTextureAdded(texture));
    }
    /**
     * Set Mesh material attributes
     */
    setMaterialGeometryAttributes() {
      if (this.material && !this.material.attributes) {
        this.material.setAttributesFromGeometry(this.geometry);
      }
    }
    /* TEXTURES */
    /**
     * Get our {@link RenderMaterial#textures | RenderMaterial textures array}
     * @readonly
     */
    get textures() {
      return this.material?.textures || [];
    }
    /**
     * Get our {@link RenderMaterial#renderTextures | RenderMaterial render textures array}
     * @readonly
     */
    get renderTextures() {
      return this.material?.renderTextures || [];
    }
    /**
     * Create a new {@link Texture}
     * @param options - {@link TextureParams | Texture parameters}
     * @returns - newly created {@link Texture}
     */
    createTexture(options) {
      if (!options.name) {
        options.name = "texture" + this.textures.length;
      }
      if (!options.label) {
        options.label = this.options.label + " " + options.name;
      }
      const texture = new Texture(this.renderer, { ...options, ...this.options.texturesOptions });
      this.addTexture(texture);
      return texture;
    }
    /**
     * Add a {@link Texture}
     * @param texture - {@link Texture} to add
     */
    addTexture(texture) {
      this.material.addTexture(texture);
      this.onTextureAdded(texture);
    }
    /**
     * Callback run when a new {@link Texture} has been added
     * @param texture - newly created Texture
     */
    onTextureAdded(texture) {
      texture.parentMesh = this;
    }
    /**
     * Create a new {@link RenderTexture}
     * @param  options - {@link RenderTextureParams | RenderTexture parameters}
     * @returns - newly created {@link RenderTexture}
     */
    createRenderTexture(options) {
      if (!options.name) {
        options.name = "renderTexture" + this.renderTextures.length;
      }
      const renderTexture = new RenderTexture(this.renderer, options);
      this.addRenderTexture(renderTexture);
      return renderTexture;
    }
    /**
     * Add a {@link RenderTexture}
     * @param renderTexture - {@link RenderTexture} to add
     */
    addRenderTexture(renderTexture) {
      this.material.addTexture(renderTexture);
    }
    /* BINDINGS */
    /**
     * Get the current {@link RenderMaterial} uniforms
     * @readonly
     */
    get uniforms() {
      return this.material?.uniforms;
    }
    /**
     * Get the current {@link RenderMaterial} storages
     * @readonly
     */
    get storages() {
      return this.material?.storages;
    }
    /* RESIZE */
    /**
     * Resize the Mesh's render textures only if they're not storage textures
     */
    resizeRenderTextures() {
      this.renderTextures?.filter((renderTexture) => renderTexture.options.usage !== "storageTexture").forEach((renderTexture) => renderTexture.resize());
    }
    /**
     * Resize the Mesh's textures
     * @param boundingRect
     */
    resize(boundingRect) {
      this.resizeRenderTextures();
      if (super.resize) {
        super.resize(boundingRect);
      }
      this.textures?.forEach((texture) => {
        texture.resize();
      });
      this._onAfterResizeCallback && this._onAfterResizeCallback();
    }
    /* EVENTS */
    /**
     * Assign a callback function to _onReadyCallback
     * @param callback - callback to run when {@link MeshBase} is ready
     * @returns - our Mesh
     */
    onReady(callback) {
      if (callback) {
        this._onReadyCallback = callback;
      }
      return this;
    }
    /**
     * Assign a callback function to _onBeforeRenderCallback
     * @param callback - callback to run just before {@link MeshBase} will be rendered
     * @returns - our Mesh
     */
    onBeforeRender(callback) {
      if (callback) {
        this._onBeforeRenderCallback = callback;
      }
      return this;
    }
    /**
     * Assign a callback function to _onRenderCallback
     * @param callback - callback to run when {@link MeshBase} is rendered
     * @returns - our Mesh
     */
    onRender(callback) {
      if (callback) {
        this._onRenderCallback = callback;
      }
      return this;
    }
    /**
     * Assign a callback function to _onAfterRenderCallback
     * @param callback - callback to run just after {@link MeshBase} has been rendered
     * @returns - our Mesh
     */
    onAfterRender(callback) {
      if (callback) {
        this._onAfterRenderCallback = callback;
      }
      return this;
    }
    /**
     * Assign a callback function to _onBeforeRenderCallback
     * @param callback - callback to run just after {@link MeshBase} has been resized
     * @returns - our Mesh
     */
    onAfterResize(callback) {
      if (callback) {
        this._onAfterResizeCallback = callback;
      }
      return this;
    }
    /* RENDER */
    /**
     * Called before rendering the Mesh
     * Set the geometry if needed (create buffers and add attributes to the {@link RenderMaterial})
     * Then executes {@link RenderMaterial#onBeforeRender}: create its bind groups and pipeline if needed and eventually update its struct
     */
    onBeforeRenderPass() {
      if (!this.renderer.ready)
        return;
      if (this.material && this.material.ready && this.geometry && this.geometry.ready && !this.ready) {
        this.ready = true;
      }
      this.setGeometry();
      this._onBeforeRenderCallback && this._onBeforeRenderCallback();
      this.material.onBeforeRender();
    }
    /**
     * Render our {@link MeshBase} if the {@link RenderMaterial} is ready
     * @param pass - current render pass encoder
     */
    onRenderPass(pass) {
      if (!this.material.ready)
        return;
      this._onRenderCallback && this._onRenderCallback();
      this.material.render(pass);
      this.geometry.render(pass);
    }
    /**
     * Called after having rendered the Mesh
     */
    onAfterRenderPass() {
      this._onAfterRenderCallback && this._onAfterRenderCallback();
    }
    /**
     * Render our Mesh
     * - Execute {@link onBeforeRenderPass}
     * - Stop here if {@link Renderer} is not ready or Mesh is not {@link visible}
     * - Execute super render call if it exists
     * - {@link onRenderPass | render} our {@link material} and {@link geometry}
     * - Execute {@link onAfterRenderPass}
     * @param pass - current render pass encoder
     */
    render(pass) {
      this.onBeforeRenderPass();
      if (!this.renderer.ready || !this.visible)
        return;
      if (super.render) {
        super.render();
      }
      !this.renderer.production && pass.pushDebugGroup(this.options.label);
      this.onRenderPass(pass);
      !this.renderer.production && pass.popDebugGroup();
      this.onAfterRenderPass();
    }
    /* DESTROY */
    /**
     * Remove the Mesh from the {@link core/scenes/Scene.Scene | Scene} and destroy it
     */
    remove() {
      this.removeFromScene();
      this.destroy();
      if (!this.renderer.meshes.length) {
        this.renderer.onBeforeRenderScene.add(
          (commandEncoder) => {
            this.renderer.forceClear(commandEncoder);
          },
          { once: true }
        );
      }
    }
    /**
     * Destroy the Mesh
     */
    destroy() {
      if (super.destroy) {
        super.destroy();
      }
      this.material?.destroy();
      this.geometry.vertexBuffers.forEach((vertexBuffer) => {
        this.renderer.removeBuffer(
          vertexBuffer.buffer,
          this.options.label + " geometry: " + vertexBuffer.name + " buffer"
        );
      });
      if ("indexBuffer" in this.geometry) {
        this.renderer.removeBuffer(this.geometry.indexBuffer.buffer);
      }
      this.geometry?.destroy();
    }
  }, _autoRender = new WeakMap(), _a;
}

class CacheManager {
  /**
   * CacheManager constructor
   */
  constructor() {
    this.planeGeometries = [];
  }
  /**
   * Check if a given {@link PlaneGeometry} is already cached based on its {@link PlaneGeometry#definition.id | definition id}
   * @param planeGeometry - {@link PlaneGeometry} to check
   * @returns - {@link PlaneGeometry} found or null if not found
   */
  getPlaneGeometry(planeGeometry) {
    return this.planeGeometries.find((element) => element.definition.id === planeGeometry.definition.id);
  }
  /**
   * Check if a given {@link PlaneGeometry} is already cached based on its {@link PlaneGeometry#definition | definition id}
   * @param planeGeometryID - {@link PlaneGeometry#definition.id | PlaneGeometry definition id}
   * @returns - {@link PlaneGeometry} found or null if not found
   */
  getPlaneGeometryByID(planeGeometryID) {
    return this.planeGeometries.find((element) => element.definition.id === planeGeometryID);
  }
  /**
   * Add a {@link PlaneGeometry} to our cache {@link planeGeometries} array
   * @param planeGeometry
   */
  addPlaneGeometry(planeGeometry) {
    this.planeGeometries.push(planeGeometry);
  }
  /**
   * Destroy our {@link CacheManager}
   */
  destroy() {
    this.planeGeometries = [];
  }
}
const cacheManager = new CacheManager();

class FullscreenPlane extends MeshBaseMixin(class {
}) {
  /**
   * FullscreenPlane constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link FullscreenPlane}
   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link FullscreenPlane}
   */
  constructor(renderer, parameters = {}) {
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, parameters.label ? parameters.label + " FullscreenQuadMesh" : "FullscreenQuadMesh");
    let geometry = cacheManager.getPlaneGeometryByID(2);
    if (!geometry) {
      geometry = new PlaneGeometry({ widthSegments: 1, heightSegments: 1 });
      cacheManager.addPlaneGeometry(geometry);
    }
    super(renderer, null, { geometry, ...parameters });
    this.size = {
      document: {
        width: this.renderer.boundingRect.width,
        height: this.renderer.boundingRect.height,
        top: this.renderer.boundingRect.top,
        left: this.renderer.boundingRect.left
      }
    };
    this.type = "FullscreenQuadMesh";
  }
  /**
   * Resize our {@link FullscreenPlane}
   * @param boundingRect - the new bounding rectangle
   */
  resize(boundingRect = null) {
    this.size.document = boundingRect ?? this.renderer.boundingRect;
    super.resize(boundingRect);
  }
  /**
   * Take the pointer {@link Vec2 | vector} position relative to the document and returns it relative to our {@link FullscreenPlane}
   * It ranges from -1 to 1 on both axis
   * @param mouseCoords - pointer {@link Vec2 | vector} coordinates
   * @returns - the mapped {@link Vec2 | vector} coordinates in the [-1, 1] range
   */
  mouseToPlaneCoords(mouseCoords = new Vec2()) {
    return new Vec2(
      (mouseCoords.x - this.size.document.left) / this.size.document.width * 2 - 1,
      1 - (mouseCoords.y - this.size.document.top) / this.size.document.height * 2
    );
  }
}

class ProjectedObject3D extends Object3D {
  /**
   * ProjectedObject3D constructor
   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link ProjectedObject3D}
   */
  constructor(renderer) {
    super();
    renderer = renderer && renderer.renderer || renderer;
    isCameraRenderer(renderer, "ProjectedObject3D");
    this.camera = renderer.camera;
  }
  /**
   * Tell our projection matrix stack to update
   */
  applyPosition() {
    super.applyPosition();
    this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Tell our projection matrix stack to update
   */
  applyRotation() {
    super.applyRotation();
    this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Tell our projection matrix stack to update
   */
  applyScale() {
    super.applyScale();
    this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Tell our projection matrix stack to update
   */
  applyTransformOrigin() {
    super.applyTransformOrigin();
    this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Set our transform and projection matrices
   */
  setMatrices() {
    super.setMatrices();
    this.matrices = {
      ...this.matrices,
      modelView: {
        matrix: new Mat4(),
        shouldUpdate: false,
        onUpdate: () => {
          this.modelViewMatrix.multiplyMatrices(this.viewMatrix, this.worldMatrix);
        }
      },
      modelViewProjection: {
        matrix: new Mat4(),
        shouldUpdate: false,
        onUpdate: () => {
          this.modelViewProjectionMatrix.multiplyMatrices(this.projectionMatrix, this.modelViewMatrix);
        }
      }
    };
  }
  /**
   * Get our {@link modelViewMatrix | model view matrix}
   */
  get modelViewMatrix() {
    return this.matrices.modelView.matrix;
  }
  /**
   * Set our {@link modelViewMatrix | model view matrix}
   * @param value - new {@link modelViewMatrix | model view matrix}
   */
  set modelViewMatrix(value) {
    this.matrices.modelView.matrix = value;
    this.matrices.modelView.shouldUpdate = true;
  }
  /**
   * Get our {@link Camera#viewMatrix | camera view matrix}
   * @readonly
   */
  get viewMatrix() {
    return this.camera.viewMatrix;
  }
  /**
   * Get our {@link Camera#projectionMatrix | camera projection matrix}
   * @readonly
   */
  get projectionMatrix() {
    return this.camera.projectionMatrix;
  }
  /**
   * Get our {@link modelViewProjectionMatrix | model view projection matrix}
   */
  get modelViewProjectionMatrix() {
    return this.matrices.modelViewProjection.matrix;
  }
  /**
   * Set our {@link modelViewProjectionMatrix | model view projection matrix}
   * @param value - new {@link modelViewProjectionMatrix | model view projection matrix}s
   */
  set modelViewProjectionMatrix(value) {
    this.matrices.modelViewProjection.matrix = value;
    this.matrices.modelViewProjection.shouldUpdate = true;
  }
  /**
   * Set our projection matrices shouldUpdate flags to true (tell them to update)
   */
  shouldUpdateProjectionMatrixStack() {
    this.matrices.modelView.shouldUpdate = true;
    this.matrices.modelViewProjection.shouldUpdate = true;
  }
  /**
   * When the world matrix update, tell our projection matrix to update as well
   */
  shouldUpdateWorldMatrix() {
    super.shouldUpdateWorldMatrix();
    this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Tell all our matrices to update
   */
  shouldUpdateMatrixStack() {
    this.shouldUpdateModelMatrix();
    this.shouldUpdateProjectionMatrixStack();
  }
}

var default_projected_vsWgsl = (
  /* wgsl */
  `
struct VertexOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
  @location(1) normal: vec3f,
};

@vertex fn main(
  attributes: Attributes,
) -> VertexOutput {
  var vsOutput: VertexOutput;

  vsOutput.position = getOutputPosition(attributes.position);
  vsOutput.uv = attributes.uv;
  vsOutput.normal = attributes.normal;
  
  return vsOutput;
}`
);

var default_normal_fsWgsl = (
  /* wgsl */
  `
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
  @location(1) normal: vec3f,
};

@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {
  // normals
  return vec4(normalize(fsInput.normal) * 0.5 + 0.5, 1.0);
}`
);

const defaultProjectedMeshParams = {
  // frustum culling and visibility
  frustumCulled: true,
  DOMFrustumMargins: {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  }
};
function ProjectedMeshBaseMixin(Base) {
  return class ProjectedMeshBase extends MeshBaseMixin(Base) {
    /**
     * ProjectedMeshBase constructor
     *
     * @typedef MeshBaseArrayParams
     * @type {array}
     * @property {(CameraRenderer|GPUCurtains)} 0 - our renderer class object
     * @property {(string|HTMLElement|null)} 1 - the DOM HTML Element that can be bound to a Mesh
     * @property {ProjectedMeshParameters} 2 - Projected Mesh parameters
     *
     * @param {MeshBaseArrayParams} params - our MeshBaseMixin parameters
     */
    constructor(...params) {
      super(
        params[0],
        params[1],
        { ...defaultProjectedMeshParams, ...params[2], ...{ useProjection: true } }
      );
      // callbacks / events
      /** function assigned to the {@link onReEnterView} callback */
      this._onReEnterViewCallback = () => {
      };
      /** function assigned to the {@link onLeaveView} callback */
      this._onLeaveViewCallback = () => {
      };
      let renderer = params[0];
      const parameters = {
        ...defaultProjectedMeshParams,
        ...params[2],
        ...{ useProjection: true }
      };
      this.type = "MeshTransformed";
      renderer = renderer && renderer.renderer || renderer;
      isCameraRenderer(renderer, parameters.label ? parameters.label + " " + this.type : this.type);
      this.renderer = renderer;
      const { geometry, frustumCulled, DOMFrustumMargins } = parameters;
      this.options = {
        ...this.options ?? {},
        // merge possible lower options?
        frustumCulled,
        DOMFrustumMargins
      };
      this.setDOMFrustum();
      this.geometry = geometry;
      this.shouldUpdateMatrixStack();
    }
    /* SHADERS */
    /**
     * Set default shaders if one or both of them are missing
     */
    setShaders() {
      let { shaders } = this.options;
      if (!shaders) {
        shaders = {
          vertex: {
            code: default_projected_vsWgsl,
            entryPoint: "main"
          },
          fragment: {
            code: default_normal_fsWgsl,
            entryPoint: "main"
          }
        };
      } else {
        if (!shaders.vertex || !shaders.vertex.code) {
          shaders.vertex = {
            code: default_projected_vsWgsl,
            entryPoint: "main"
          };
        }
        if (!shaders.fragment || !shaders.fragment.code) {
          shaders.fragment = {
            code: default_normal_fsWgsl,
            entryPoint: "main"
          };
        }
      }
    }
    /* GEOMETRY */
    /**
     * Set the Mesh frustum culling
     */
    setDOMFrustum() {
      this.domFrustum = new DOMFrustum({
        boundingBox: this.geometry.boundingBox,
        modelViewProjectionMatrix: this.modelViewProjectionMatrix,
        containerBoundingRect: this.renderer.boundingRect,
        DOMFrustumMargins: this.options.DOMFrustumMargins,
        onReEnterView: () => {
          this._onReEnterViewCallback && this._onReEnterViewCallback();
        },
        onLeaveView: () => {
          this._onLeaveViewCallback && this._onLeaveViewCallback();
        }
      });
      this.DOMFrustumMargins = this.domFrustum.DOMFrustumMargins;
      this.frustumCulled = this.options.frustumCulled;
      this.domFrustum.shouldUpdate = this.frustumCulled;
    }
    /* MATERIAL */
    /**
     * Set a Mesh matrices uniforms inputs then call {@link MeshBaseClass} super method
     * @param meshParameters - {@link RenderMaterialParams | RenderMaterial parameters}
     */
    setMaterial(meshParameters) {
      const matricesUniforms = {
        label: "Matrices",
        struct: {
          model: {
            name: "model",
            type: "mat4x4f",
            value: this.modelMatrix
          },
          world: {
            name: "world",
            type: "mat4x4f",
            value: this.worldMatrix
          },
          modelView: {
            // model view matrix (world matrix multiplied by camera view matrix)
            name: "modelView",
            type: "mat4x4f",
            value: this.modelViewMatrix
          },
          modelViewProjection: {
            name: "modelViewProjection",
            type: "mat4x4f",
            value: this.modelViewProjectionMatrix
          }
        }
      };
      if (!meshParameters.uniforms)
        meshParameters.uniforms = {};
      meshParameters.uniforms.matrices = matricesUniforms;
      super.setMaterial(meshParameters);
    }
    /* SIZE & TRANSFORMS */
    /**
     * Resize our {@link ProjectedMeshBaseClass}
     * @param boundingRect - the new bounding rectangle
     */
    resize(boundingRect) {
      if (this.domFrustum)
        this.domFrustum.setContainerBoundingRect(this.renderer.boundingRect);
      super.resize(boundingRect);
    }
    /**
     * Apply scale and resize textures
     */
    applyScale() {
      super.applyScale();
      this.textures.forEach((texture) => texture.resize());
    }
    /**
     * Get our {@link DOMFrustum} projected bounding rectangle
     * @readonly
     */
    get projectedBoundingRect() {
      return this.domFrustum?.projectedBoundingRect;
    }
    /**
     * At least one of the matrix has been updated, update according uniforms and frustum
     */
    onAfterMatrixStackUpdate() {
      if (this.material) {
        this.material.shouldUpdateInputsBindings("matrices");
      }
      if (this.domFrustum)
        this.domFrustum.shouldUpdate = true;
    }
    /* EVENTS */
    /**
     * Assign a callback function to _onReEnterViewCallback
     * @param callback - callback to run when {@link ProjectedMeshBaseClass} is reentering the view frustum
     * @returns - our Mesh
     */
    onReEnterView(callback) {
      if (callback) {
        this._onReEnterViewCallback = callback;
      }
      return this;
    }
    /**
     * Assign a callback function to _onLeaveViewCallback
     * @param callback - callback to run when {@link ProjectedMeshBaseClass} is leaving the view frustum
     * @returns - our Mesh
     */
    onLeaveView(callback) {
      if (callback) {
        this._onLeaveViewCallback = callback;
      }
      return this;
    }
    /* RENDER */
    /**
     * Called before rendering the Mesh to update matrices and {@link DOMFrustum}.
     * First, we update our matrices to have fresh results. It eventually calls onAfterMatrixStackUpdate() if at least one matrix has been updated.
     * Then we check if we need to update the {@link DOMFrustum} projected bounding rectangle.
     * Finally we call {@link MeshBaseClass#onBeforeRenderPass | Mesh base onBeforeRenderPass} super
     */
    onBeforeRenderPass() {
      this.updateMatrixStack();
      if (this.domFrustum && this.domFrustum.shouldUpdate && this.frustumCulled) {
        this.domFrustum.computeProjectedToDocumentCoords();
        this.domFrustum.shouldUpdate = false;
      }
      super.onBeforeRenderPass();
    }
    /**
     * Only render the Mesh if it is in view frustum.
     * Since render() is actually called before onRenderPass(), we are sure to have fresh frustum bounding rectangle values here.
     * @param pass - current render pass
     */
    onRenderPass(pass) {
      if (!this.material.ready)
        return;
      this._onRenderCallback && this._onRenderCallback();
      if (this.domFrustum && this.domFrustum.isIntersecting || !this.frustumCulled) {
        this.material.render(pass);
        this.geometry.render(pass);
      }
    }
  };
}

class Mesh extends ProjectedMeshBaseMixin(ProjectedObject3D) {
  /**
   * Mesh constructor
   * @param renderer - {@link CameraRenderer} object or {@link GPUCurtains} class object used to create this {@link Mesh}
   * @param parameters - {@link MeshBaseParams | parameters} use to create this {@link Mesh}
   */
  constructor(renderer, parameters) {
    renderer = renderer && renderer.renderer || renderer;
    isCameraRenderer(renderer, parameters.label ? parameters.label + " Mesh" : "Mesh");
    super(renderer, null, parameters);
    this.type = "Mesh";
  }
}

let pipelineId = 0;
class PipelineEntry {
  /**
   * PipelineEntry constructor
   * @param parameters - {@link PipelineEntryParams | parameters} used to create this {@link PipelineEntry}
   */
  constructor(parameters) {
    this.type = "PipelineEntry";
    let { renderer } = parameters;
    const { label, shaders, useAsync } = parameters;
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, label ? label + " " + this.type : this.type);
    this.renderer = renderer;
    Object.defineProperty(this, "index", { value: pipelineId++ });
    this.layout = null;
    this.pipeline = null;
    this.status = {
      compiling: false,
      compiled: false,
      error: null
    };
    this.options = {
      label,
      shaders,
      useAsync: useAsync !== void 0 ? useAsync : true
    };
  }
  /**
   * Get whether the {@link pipeline} is ready, i.e. successfully compiled
   * @readonly
   */
  get ready() {
    return !this.status.compiling && this.status.compiled && !this.status.error;
  }
  /**
   * Get whether the {@link pipeline} is ready to be compiled, i.e. we have not already tried to compile it, and it's not currently compiling neither
   * @readonly
   */
  get canCompile() {
    return !this.status.compiling && !this.status.compiled && !this.status.error;
  }
  /**
   * Set our {@link PipelineEntry#bindGroups | pipeline entry bind groups}
   * @param bindGroups - {@link core/materials/Material.Material#bindGroups | bind groups} to use with this {@link PipelineEntry}
   */
  setPipelineEntryBindGroups(bindGroups) {
    this.bindGroups = bindGroups;
  }
  /* SHADERS */
  /**
   * Create a {@link GPUShaderModule}
   * @param parameters - Parameters used
   * @param parameters.code - patched WGSL code string
   * @param parameters.type - {@link MaterialShadersType | shader type}
   * @returns - compiled {@link GPUShaderModule} if successful
   */
  createShaderModule({ code = "", type = "vertex" }) {
    const shaderModule = this.renderer.createShaderModule({
      label: this.options.label + ": " + type + "Shader module",
      code
    });
    if ("getCompilationInfo" in shaderModule && !this.renderer.production) {
      shaderModule.getCompilationInfo().then((compilationInfo) => {
        for (const message of compilationInfo.messages) {
          let formattedMessage = "";
          if (message.lineNum) {
            formattedMessage += `Line ${message.lineNum}:${message.linePos} - ${code.substring(
              message.offset,
              message.offset + message.length
            )}
`;
          }
          formattedMessage += message.message;
          switch (message.type) {
            case "error":
              console.error(`${this.options.label} compilation error:
${formattedMessage}`);
              break;
            case "warning":
              console.warn(`${this.options.label} compilation warning:
${formattedMessage}`);
              break;
            case "info":
              console.log(`${this.options.label} compilation information:
${formattedMessage}`);
              break;
          }
        }
      });
    }
    return shaderModule;
  }
  /* SETUP */
  /**
   * Create the {@link PipelineEntry} shaders
   */
  createShaders() {
  }
  /**
   * Create the pipeline entry {@link layout}
   */
  createPipelineLayout() {
    this.layout = this.renderer.createPipelineLayout({
      label: this.options.label + " layout",
      bindGroupLayouts: this.bindGroups.map((bindGroup) => bindGroup.bindGroupLayout)
    });
  }
  /**
   * Create the {@link PipelineEntry} descriptor
   */
  createPipelineDescriptor() {
  }
  /**
   * Flush a {@link PipelineEntry}, i.e. reset its {@link bindGroups | bind groups}, {@link layout} and descriptor and recompile the {@link pipeline}
   * Used when one of the bind group or rendering property has changed
   * @param newBindGroups - new {@link bindGroups | bind groups} in case they have changed
   */
  flushPipelineEntry(newBindGroups = []) {
    this.status.compiling = false;
    this.status.compiled = false;
    this.status.error = null;
    this.setPipelineEntryBindGroups(newBindGroups);
    this.compilePipelineEntry();
  }
  /**
   * Set up a {@link pipeline} by creating the shaders, the {@link layout} and the descriptor
   */
  compilePipelineEntry() {
    this.status.compiling = true;
    this.createShaders();
    this.createPipelineLayout();
    this.createPipelineDescriptor();
  }
}

var get_output_position = (
  /* wgsl */
  `
fn getOutputPosition(position: vec3f) -> vec4f {
  return matrices.modelViewProjection * vec4f(position, 1.0);
}`
);

var get_uv_cover = (
  /* wgsl */
  `
fn getUVCover(uv: vec2f, textureMatrix: mat4x4f) -> vec2f {
  return (textureMatrix * vec4f(uv, 0.0, 1.0)).xy;
}`
);

var get_vertex_to_uv_coords = (
  /* wgsl */
  `
fn getVertex2DToUVCoords(vertex: vec2f) -> vec2f {
  return vec2(
    vertex.x * 0.5 + 0.5,
    0.5 - vertex.y * 0.5
  );
}

fn getVertex3DToUVCoords(vertex: vec3f) -> vec2f {
  return vec2(
    vertex.x * 0.5 + 0.5,
    0.5 - vertex.y * 0.5
  );
}
`
);

const ShaderChunks = {
  /** WGSL code chunks added to the vertex shader */
  vertex: {
    /** Applies given texture matrix to given uv coordinates */
    get_uv_cover
  },
  /** WGSL code chunks added to the fragment shader */
  fragment: {
    /** Applies given texture matrix to given uv coordinates */
    get_uv_cover,
    /** Convert vertex position to uv coordinates */
    get_vertex_to_uv_coords
  }
};
const ProjectedShaderChunks = {
  /** WGSL code chunks added to the vertex shader */
  vertex: {
    /** Get output vec4f position vector by applying model view projection matrix to vec3f attribute position vector */
    get_output_position
  },
  /** WGSL code chunks added to the fragment shader */
  fragment: {}
};

class RenderPipelineEntry extends PipelineEntry {
  /**
   * RenderPipelineEntry constructor
   * @param parameters - {@link RenderPipelineEntryParams | parameters} used to create this {@link RenderPipelineEntry}
   */
  constructor(parameters) {
    let { renderer } = parameters;
    const { label, ...renderingOptions } = parameters;
    renderer = renderer && renderer.renderer || renderer;
    const type = "RenderPipelineEntry";
    isRenderer(renderer, label ? label + " " + type : type);
    super(parameters);
    this.type = type;
    this.shaders = {
      vertex: {
        head: "",
        code: "",
        module: null
      },
      fragment: {
        head: "",
        code: "",
        module: null
      },
      full: {
        head: "",
        code: "",
        module: null
      }
    };
    this.descriptor = null;
    this.options = {
      ...this.options,
      ...renderingOptions
    };
  }
  // TODO! need to chose whether we should silently add the camera bind group here
  // or explicitly in the RenderMaterial class createBindGroups() method
  /**
   * Merge our {@link bindGroups | pipeline entry bind groups} with the {@link CameraRenderer#cameraBindGroup | camera bind group} if needed and set them
   * @param bindGroups - {@link core/materials/RenderMaterial.RenderMaterial#bindGroups | bind groups} to use with this {@link RenderPipelineEntry}
   */
  setPipelineEntryBindGroups(bindGroups) {
    this.bindGroups = "cameraBindGroup" in this.renderer && this.options.useProjection ? [this.renderer.cameraBindGroup, ...bindGroups] : bindGroups;
  }
  /**
   * Set {@link RenderPipelineEntry} properties (in this case the {@link bindGroups | bind groups} and {@link attributes})
   * @param parameters - the {@link core/materials/RenderMaterial.RenderMaterial#bindGroups | bind groups} and {@link core/materials/RenderMaterial.RenderMaterial#attributes | attributes} to use
   */
  setPipelineEntryProperties(parameters) {
    const { attributes, bindGroups } = parameters;
    this.attributes = attributes;
    this.setPipelineEntryBindGroups(bindGroups);
  }
  /* SHADERS */
  /**
   * Patch the shaders by appending all the necessary shader chunks, {@link bindGroups | bind groups}) and {@link attributes} WGSL code fragments to the given {@link PipelineEntryParams#shaders | parameter shader code}
   */
  patchShaders() {
    this.shaders.vertex.head = "";
    this.shaders.vertex.code = "";
    this.shaders.fragment.head = "";
    this.shaders.fragment.code = "";
    this.shaders.full.head = "";
    this.shaders.full.code = "";
    for (const chunk in ShaderChunks.vertex) {
      this.shaders.vertex.head = `${ShaderChunks.vertex[chunk]}
${this.shaders.vertex.head}`;
      this.shaders.full.head = `${ShaderChunks.vertex[chunk]}
${this.shaders.full.head}`;
    }
    for (const chunk in ShaderChunks.fragment) {
      this.shaders.fragment.head = `${ShaderChunks.fragment[chunk]}
${this.shaders.fragment.head}`;
      if (this.shaders.full.head.indexOf(ShaderChunks.fragment[chunk]) === -1) {
        this.shaders.full.head = `${ShaderChunks.fragment[chunk]}
${this.shaders.full.head}`;
      }
    }
    if (this.options.useProjection) {
      for (const chunk in ProjectedShaderChunks.vertex) {
        this.shaders.vertex.head = `${ProjectedShaderChunks.vertex[chunk]}
${this.shaders.vertex.head}`;
        this.shaders.full.head = `${ProjectedShaderChunks.vertex[chunk]}
${this.shaders.full.head}`;
      }
      for (const chunk in ProjectedShaderChunks.fragment) {
        this.shaders.fragment.head = `${ProjectedShaderChunks.fragment[chunk]}
${this.shaders.fragment.head}`;
        if (this.shaders.full.head.indexOf(ProjectedShaderChunks.fragment[chunk]) === -1) {
          this.shaders.full.head = `${ProjectedShaderChunks.fragment[chunk]}
${this.shaders.full.head}`;
        }
      }
    }
    const groupsBindings = [];
    this.bindGroups.forEach((bindGroup) => {
      let bindIndex = 0;
      bindGroup.bindings.forEach((binding, bindingIndex) => {
        binding.wgslGroupFragment.forEach((groupFragment, groupFragmentIndex) => {
          groupsBindings.push({
            groupIndex: bindGroup.index,
            visibility: binding.visibility,
            bindIndex,
            wgslStructFragment: binding.wgslStructFragment,
            wgslGroupFragment: groupFragment,
            newLine: bindingIndex === bindGroup.bindings.length - 1 && groupFragmentIndex === binding.wgslGroupFragment.length - 1
          });
          bindIndex++;
        });
      });
    });
    groupsBindings.forEach((groupBinding) => {
      if (groupBinding.visibility === GPUShaderStage.VERTEX || groupBinding.visibility === (GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE)) {
        if (groupBinding.wgslStructFragment && this.shaders.vertex.head.indexOf(groupBinding.wgslStructFragment) === -1) {
          this.shaders.vertex.head = `
${groupBinding.wgslStructFragment}
${this.shaders.vertex.head}`;
        }
        if (this.shaders.vertex.head.indexOf(groupBinding.wgslGroupFragment) === -1) {
          this.shaders.vertex.head = `${this.shaders.vertex.head}
@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`;
          if (groupBinding.newLine)
            this.shaders.vertex.head += `
`;
        }
      }
      if (groupBinding.visibility === GPUShaderStage.FRAGMENT || groupBinding.visibility === (GPUShaderStage.VERTEX | GPUShaderStage.FRAGMENT | GPUShaderStage.COMPUTE)) {
        if (groupBinding.wgslStructFragment && this.shaders.fragment.head.indexOf(groupBinding.wgslStructFragment) === -1) {
          this.shaders.fragment.head = `
${groupBinding.wgslStructFragment}
${this.shaders.fragment.head}`;
        }
        if (this.shaders.fragment.head.indexOf(groupBinding.wgslGroupFragment) === -1) {
          this.shaders.fragment.head = `${this.shaders.fragment.head}
@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`;
          if (groupBinding.newLine)
            this.shaders.fragment.head += `
`;
        }
      }
      if (groupBinding.wgslStructFragment && this.shaders.full.head.indexOf(groupBinding.wgslStructFragment) === -1) {
        this.shaders.full.head = `
${groupBinding.wgslStructFragment}
${this.shaders.full.head}`;
      }
      if (this.shaders.full.head.indexOf(groupBinding.wgslGroupFragment) === -1) {
        this.shaders.full.head = `${this.shaders.full.head}
@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`;
        if (groupBinding.newLine)
          this.shaders.full.head += `
`;
      }
    });
    this.shaders.vertex.head = `${this.attributes.wgslStructFragment}
${this.shaders.vertex.head}`;
    this.shaders.full.head = `${this.attributes.wgslStructFragment}
${this.shaders.full.head}`;
    this.shaders.vertex.code = this.shaders.vertex.head + this.options.shaders.vertex.code;
    this.shaders.fragment.code = this.shaders.fragment.head + this.options.shaders.fragment.code;
    if (this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint && this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0) {
      this.shaders.full.code = this.shaders.full.head + this.options.shaders.vertex.code;
    } else {
      this.shaders.full.code = this.shaders.full.head + this.options.shaders.vertex.code + this.options.shaders.fragment.code;
    }
  }
  /* SETUP */
  /**
   * Create the {@link shaders}: patch them and create the {@link GPUShaderModule}
   */
  createShaders() {
    this.patchShaders();
    const isSameShader = this.options.shaders.vertex.entryPoint !== this.options.shaders.fragment.entryPoint && this.options.shaders.vertex.code.localeCompare(this.options.shaders.fragment.code) === 0;
    this.shaders.vertex.module = this.createShaderModule({
      code: this.shaders[isSameShader ? "full" : "vertex"].code,
      type: "vertex"
    });
    this.shaders.fragment.module = this.createShaderModule({
      code: this.shaders[isSameShader ? "full" : "fragment"].code,
      type: "fragment"
    });
  }
  /**
   * Create the render pipeline {@link descriptor}
   */
  createPipelineDescriptor() {
    if (!this.shaders.vertex.module || !this.shaders.fragment.module)
      return;
    let vertexLocationIndex = -1;
    const blend = this.options.blend ?? (this.options.transparent && {
      color: {
        srcFactor: "src-alpha",
        dstFactor: "one-minus-src-alpha"
      },
      alpha: {
        srcFactor: "one",
        dstFactor: "one-minus-src-alpha"
      }
    });
    this.descriptor = {
      label: this.options.label,
      layout: this.layout,
      vertex: {
        module: this.shaders.vertex.module,
        entryPoint: this.options.shaders.vertex.entryPoint,
        buffers: this.attributes.vertexBuffers.map((vertexBuffer) => {
          return {
            stepMode: vertexBuffer.stepMode,
            arrayStride: vertexBuffer.arrayStride * 4,
            // 4 bytes each
            attributes: vertexBuffer.attributes.map((attribute) => {
              vertexLocationIndex++;
              return {
                shaderLocation: vertexLocationIndex,
                offset: attribute.bufferOffset,
                // previous attribute size * 4
                format: attribute.bufferFormat
              };
            })
          };
        })
      },
      fragment: {
        module: this.shaders.fragment.module,
        entryPoint: this.options.shaders.fragment.entryPoint,
        targets: [
          {
            format: this.options.targetFormat ?? this.renderer.options.preferredFormat,
            ...blend && {
              blend
            }
          }
        ]
      },
      primitive: {
        topology: this.options.topology,
        frontFace: this.options.verticesOrder,
        cullMode: this.options.cullMode
      },
      ...this.options.depth && {
        depthStencil: {
          depthWriteEnabled: this.options.depthWriteEnabled,
          depthCompare: this.options.depthCompare,
          format: "depth24plus"
        }
      },
      ...this.options.sampleCount > 1 && {
        multisample: {
          count: this.options.sampleCount
        }
      }
    };
  }
  /**
   * Create the render {@link pipeline}
   */
  createRenderPipeline() {
    if (!this.shaders.vertex.module || !this.shaders.fragment.module)
      return;
    try {
      this.pipeline = this.renderer.createRenderPipeline(this.descriptor);
    } catch (error) {
      this.status.error = error;
      throwError(error);
    }
  }
  /**
   * Asynchronously create the render {@link pipeline}
   * @async
   * @returns - void promise result
   */
  async createRenderPipelineAsync() {
    if (!this.shaders.vertex.module || !this.shaders.fragment.module)
      return;
    try {
      this.pipeline = await this.renderer.createRenderPipelineAsync(this.descriptor);
      this.status.compiled = true;
      this.status.compiling = false;
      this.status.error = null;
    } catch (error) {
      this.status.error = error;
      throwError(error);
    }
  }
  /**
   * Call {@link PipelineEntry#compilePipelineEntry | PipelineEntry compilePipelineEntry} method, then create our render {@link pipeline}
   * @async
   */
  async compilePipelineEntry() {
    super.compilePipelineEntry();
    if (this.options.useAsync) {
      await this.createRenderPipelineAsync();
    } else {
      this.createRenderPipeline();
      this.status.compiled = true;
      this.status.compiling = false;
      this.status.error = null;
    }
  }
}

class ComputePipelineEntry extends PipelineEntry {
  /**
   * ComputePipelineEntry constructor
   * @param parameters - {@link PipelineEntryParams | parameters} used to create this {@link ComputePipelineEntry}
   */
  constructor(parameters) {
    let { renderer } = parameters;
    const { label } = parameters;
    renderer = renderer && renderer.renderer || renderer;
    const type = "ComputePipelineEntry";
    isRenderer(renderer, label ? label + " " + type : type);
    super(parameters);
    this.type = type;
    this.shaders = {
      compute: {
        head: "",
        code: "",
        module: null
      }
    };
    this.descriptor = null;
  }
  /**
   * Set {@link ComputePipelineEntry} properties (in this case the {@link bindGroups | bind groups})
   * @param parameters - the {@link core/materials/ComputeMaterial.ComputeMaterial#bindGroups | bind groups} to use
   */
  setPipelineEntryProperties(parameters) {
    const { bindGroups } = parameters;
    this.setPipelineEntryBindGroups(bindGroups);
  }
  /* SHADERS */
  /**
   * Patch the shaders by appending all the {@link bindGroups | bind groups}) WGSL code fragments to the given {@link PipelineEntryParams#shaders | parameter shader code}
   */
  patchShaders() {
    this.shaders.compute.head = "";
    this.shaders.compute.code = "";
    const groupsBindings = [];
    this.bindGroups.forEach((bindGroup) => {
      let bindIndex = 0;
      bindGroup.bindings.forEach((binding, bindingIndex) => {
        binding.wgslGroupFragment.forEach((groupFragment, groupFragmentIndex) => {
          groupsBindings.push({
            groupIndex: bindGroup.index,
            visibility: binding.visibility,
            bindIndex,
            wgslStructFragment: binding.wgslStructFragment,
            wgslGroupFragment: groupFragment,
            newLine: bindingIndex === bindGroup.bindings.length - 1 && groupFragmentIndex === binding.wgslGroupFragment.length - 1
          });
          bindIndex++;
        });
      });
    });
    groupsBindings.forEach((groupBinding) => {
      if (groupBinding.wgslStructFragment && this.shaders.compute.head.indexOf(groupBinding.wgslStructFragment) === -1) {
        this.shaders.compute.head = `
${groupBinding.wgslStructFragment}
${this.shaders.compute.head}`;
      }
      if (this.shaders.compute.head.indexOf(groupBinding.wgslGroupFragment) === -1) {
        this.shaders.compute.head = `${this.shaders.compute.head}
@group(${groupBinding.groupIndex}) @binding(${groupBinding.bindIndex}) ${groupBinding.wgslGroupFragment}`;
      }
      if (groupBinding.newLine)
        this.shaders.compute.head += `
`;
    });
    this.shaders.compute.code = this.shaders.compute.head + this.options.shaders.compute.code;
  }
  /* SETUP */
  /**
   * Create the {@link shaders}: patch them and create the {@link GPUShaderModule}
   */
  createShaders() {
    this.patchShaders();
    this.shaders.compute.module = this.createShaderModule({
      code: this.shaders.compute.code,
      type: "compute"
    });
  }
  /**
   * Create the compute pipeline {@link descriptor}
   */
  createPipelineDescriptor() {
    if (!this.shaders.compute.module)
      return;
    this.descriptor = {
      label: this.options.label,
      layout: this.layout,
      compute: {
        module: this.shaders.compute.module,
        entryPoint: this.options.shaders.compute.entryPoint
      }
    };
  }
  /**
   * Create the compute {@link pipeline}
   */
  createComputePipeline() {
    if (!this.shaders.compute.module)
      return;
    try {
      this.pipeline = this.renderer.createComputePipeline(this.descriptor);
    } catch (error) {
      this.status.error = error;
      throwError(error);
    }
  }
  /**
   * Asynchronously create the compute {@link pipeline}
   * @async
   * @returns - void promise result
   */
  async createComputePipelineAsync() {
    if (!this.shaders.compute.module)
      return;
    try {
      this.pipeline = await this.renderer.createComputePipelineAsync(this.descriptor);
      this.status.compiled = true;
      this.status.compiling = false;
      this.status.error = null;
    } catch (error) {
      this.status.error = error;
      throwError(error);
    }
  }
  /**
   * Call {@link PipelineEntry#compilePipelineEntry | PipelineEntry compilePipelineEntry} method, then create our compute {@link pipeline}
   * @async
   */
  async compilePipelineEntry() {
    super.compilePipelineEntry();
    if (this.options.useAsync) {
      await this.createComputePipelineAsync();
    } else {
      this.createComputePipeline();
      this.status.compiled = true;
      this.status.compiling = false;
      this.status.error = null;
    }
  }
}

class PipelineManager {
  constructor() {
    this.type = "PipelineManager";
    this.currentPipelineIndex = null;
    this.pipelineEntries = [];
  }
  /**
   * Checks if the provided {@link RenderPipelineEntryBaseParams | RenderPipelineEntry parameters} belongs to an already created {@link RenderPipelineEntry}.
   * @param parameters - {@link RenderPipelineEntryBaseParams | RenderPipelineEntry parameters}
   * @returns - the found {@link RenderPipelineEntry}, or null if not found
   */
  isSameRenderPipeline(parameters) {
    const {
      shaders,
      cullMode,
      depth,
      depthWriteEnabled,
      depthCompare,
      transparent,
      verticesOrder,
      topology,
      sampleCount
    } = parameters;
    return this.pipelineEntries.filter((pipelineEntry) => pipelineEntry instanceof RenderPipelineEntry).find((pipelineEntry) => {
      const { options } = pipelineEntry;
      return shaders.vertex.code.localeCompare(options.shaders.vertex.code) === 0 && shaders.vertex.entryPoint === options.shaders.vertex.entryPoint && shaders.fragment.code.localeCompare(options.shaders.fragment.code) === 0 && shaders.fragment.entryPoint === options.shaders.fragment.entryPoint && cullMode === options.cullMode && depth === options.depth && depthWriteEnabled === options.depthWriteEnabled && depthCompare === options.depthCompare && transparent === options.transparent && sampleCount === options.sampleCount && verticesOrder === options.verticesOrder && topology === options.topology;
    });
  }
  /**
   * Check if a {@link RenderPipelineEntry} has already been created with the given {@link RenderPipelineEntryParams | parameters}.
   * Use it if found, else create a new one and add it to the {@link pipelineEntries} array.
   * @param parameters - {@link RenderPipelineEntryParams | RenderPipelineEntry parameters}
   * @returns - {@link RenderPipelineEntry}, either from cache or newly created
   */
  createRenderPipeline(parameters) {
    const existingPipelineEntry = this.isSameRenderPipeline(parameters);
    if (existingPipelineEntry) {
      return existingPipelineEntry;
    } else {
      const pipelineEntry = new RenderPipelineEntry(parameters);
      this.pipelineEntries.push(pipelineEntry);
      return pipelineEntry;
    }
  }
  /**
   * Checks if the provided {@link PipelineEntryParams | parameters} belongs to an already created {@link ComputePipelineEntry}.
   * @param parameters - {@link PipelineEntryParams | PipelineEntry parameters}
   * @returns - the found {@link ComputePipelineEntry}, or null if not found
   */
  isSameComputePipeline(parameters) {
    const { shaders } = parameters;
    return this.pipelineEntries.filter((pipelineEntry) => pipelineEntry instanceof ComputePipelineEntry).find((pipelineEntry) => {
      const { options } = pipelineEntry;
      return shaders.compute.code.localeCompare(options.shaders.compute.code) === 0 && shaders.compute.entryPoint === options.shaders.compute.entryPoint;
    });
  }
  /**
   * Check if a {@link ComputePipelineEntry} has already been created with the given {@link PipelineEntryParams | parameters}.
   * Use it if found, else create a new one and add it to the {@link pipelineEntries} array.
   * @param parameters - {@link PipelineEntryParams | PipelineEntry parameters}
   * @returns - newly created {@link ComputePipelineEntry}
   */
  createComputePipeline(parameters) {
    const existingPipelineEntry = this.isSameComputePipeline(parameters);
    if (existingPipelineEntry) {
      return existingPipelineEntry;
    } else {
      const pipelineEntry = new ComputePipelineEntry(parameters);
      this.pipelineEntries.push(pipelineEntry);
      return pipelineEntry;
    }
  }
  /**
   * Check if the given {@link AllowedPipelineEntries | PipelineEntry} is already set, if not set it
   * @param pass - current pass encoder
   * @param pipelineEntry - the {@link AllowedPipelineEntries | PipelineEntry} to set
   */
  setCurrentPipeline(pass, pipelineEntry) {
    if (pipelineEntry.index !== this.currentPipelineIndex) {
      pass.setPipeline(pipelineEntry.pipeline);
      this.currentPipelineIndex = pipelineEntry.index;
    }
  }
  /**
   * Reset the {@link PipelineManager#currentPipelineIndex | current pipeline index} so the next {@link AllowedPipelineEntries | PipelineEntry} will be set for sure
   */
  resetCurrentPipeline() {
    this.currentPipelineIndex = null;
  }
}

class ResizeManager {
  /**
   * ResizeManager constructor
   */
  constructor() {
    this.shouldWatch = true;
    this.entries = [];
    this.resizeObserver = new ResizeObserver((observedEntries) => {
      const allEntries = observedEntries.map((observedEntry) => {
        return this.entries.filter((e) => e.element.isSameNode(observedEntry.target));
      }).flat().sort((a, b) => b.priority - a.priority);
      allEntries?.forEach((entry) => {
        if (entry && entry.callback) {
          entry.callback();
        }
      });
    });
  }
  /**
   * Set {@link shouldWatch}
   * @param shouldWatch - whether to watch or not
   */
  useObserver(shouldWatch = true) {
    this.shouldWatch = shouldWatch;
  }
  /**
   * Track an {@link HTMLElement} size change and execute a callback function when it happens
   * @param entry - {@link ResizeManagerEntry | entry} to watch
   */
  observe({ element, priority, callback }) {
    if (!element || !this.shouldWatch)
      return;
    this.resizeObserver.observe(element);
    const entry = {
      element,
      priority,
      callback
    };
    this.entries.push(entry);
  }
  /**
   * Unobserve an {@link HTMLElement} and remove it from our {@link entries} array
   * @param element - {@link HTMLElement} to unobserve
   */
  unobserve(element) {
    this.resizeObserver.unobserve(element);
    this.entries = this.entries.filter((e) => !e.element.isSameNode(element));
  }
  /**
   * Destroy our {@link ResizeManager}
   */
  destroy() {
    this.resizeObserver.disconnect();
  }
}
const resizeManager = new ResizeManager();

class DOMElement {
  /**
   * DOMElement constructor
   * @param parameters - {@link DOMElementParams | parameters} used to create our DOMElement
   */
  constructor({
    element = document.body,
    priority = 1,
    onSizeChanged = (boundingRect = null) => {
    },
    onPositionChanged = (boundingRect = null) => {
    }
  } = {}) {
    if (typeof element === "string") {
      this.element = document.querySelector(element);
      if (!this.element) {
        const notFoundEl = typeof element === "string" ? `'${element}' selector` : `${element} HTMLElement`;
        throwError(`DOMElement: corresponding ${notFoundEl} not found.`);
      }
    } else {
      this.element = element;
    }
    this.priority = priority;
    this.isResizing = false;
    this.onSizeChanged = onSizeChanged;
    this.onPositionChanged = onPositionChanged;
    this.resizeManager = resizeManager;
    this.resizeManager.observe({
      element: this.element,
      priority: this.priority,
      callback: () => {
        this.setSize();
      }
    });
    this.setSize();
  }
  /**
   * Check whether 2 bounding rectangles are equals
   * @param rect1 - first bounding rectangle
   * @param rect2 - second bounding rectangle
   * @returns - whether the rectangles are equals or not
   */
  compareBoundingRect(rect1, rect2) {
    return !["x", "y", "left", "top", "right", "bottom", "width", "height"].some((k) => rect1[k] !== rect2[k]);
  }
  /**
   * Get our element bounding rectangle
   */
  get boundingRect() {
    return this._boundingRect;
  }
  /**
   * Set our element bounding rectangle
   * @param boundingRect - new bounding rectangle
   */
  set boundingRect(boundingRect) {
    const isSameRect = !!this.boundingRect && this.compareBoundingRect(boundingRect, this.boundingRect);
    this._boundingRect = {
      top: boundingRect.top,
      right: boundingRect.right,
      bottom: boundingRect.bottom,
      left: boundingRect.left,
      width: boundingRect.width,
      height: boundingRect.height,
      x: boundingRect.x,
      y: boundingRect.y
    };
    if (!isSameRect) {
      this.onSizeChanged(this.boundingRect);
    }
  }
  /**
   * Update our element bounding rectangle because the scroll position has changed
   * @param delta - scroll delta values along X and Y axis
   */
  updateScrollPosition(delta = { x: 0, y: 0 }) {
    if (this.isResizing)
      return;
    this._boundingRect.top += delta.y;
    this._boundingRect.left += delta.x;
    if (delta.x || delta.y) {
      this.onPositionChanged(this.boundingRect);
    }
  }
  /**
   * Set our element bounding rectangle, either by a value or a getBoundingClientRect call
   * @param boundingRect - new bounding rectangle
   */
  setSize(boundingRect = null) {
    if (!this.element)
      return;
    this.boundingRect = boundingRect ?? this.element.getBoundingClientRect();
    this.isResizing = false;
  }
  /**
   * Destroy our DOMElement - remove from resize observer and clear throttle timeout
   */
  destroy() {
    this.resizeManager.unobserve(this.element);
  }
}

var default_pass_fsWGSl = (
  /* wgsl */
  `
struct VSOutput {
  @builtin(position) position: vec4f,
  @location(0) uv: vec2f,
};

@fragment fn main(fsInput: VSOutput) -> @location(0) vec4f {
  return textureSample(renderTexture, defaultSampler, fsInput.uv);
}`
);

class ShaderPass extends FullscreenPlane {
  /**
   * ShaderPass constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link ShaderPass}
   * @param parameters - {@link ShaderPassParams | parameters} use to create this {@link ShaderPass}
   */
  constructor(renderer, parameters = {}) {
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, parameters.label ? parameters.label + " ShaderPass" : "ShaderPass");
    parameters.transparent = true;
    parameters.label = parameters.label ?? "ShaderPass " + renderer.shaderPasses?.length;
    if (!parameters.shaders) {
      parameters.shaders = {};
    }
    if (!parameters.shaders.fragment) {
      parameters.shaders.fragment = {
        code: default_pass_fsWGSl,
        entryPoint: "main"
      };
    }
    parameters.depth = false;
    super(renderer, parameters);
    this.type = "ShaderPass";
    this.createRenderTexture({
      label: parameters.label ? `${parameters.label} render texture` : "Shader pass render texture",
      name: "renderTexture",
      fromTexture: this.renderTarget ? this.renderTarget.renderTexture : null
    });
  }
  /**
   * Get our main {@link RenderTexture}, the one that contains our post processed content
   * @readonly
   */
  get renderTexture() {
    return this.renderTextures.find((texture) => texture.options.name === "renderTexture");
  }
  /**
   * Assign or remove a {@link RenderTarget} to this {@link ShaderPass}
   * Since this manipulates the {@link core/scenes/Scene.Scene | Scene} stacks, it can be used to remove a RenderTarget as well.
   * Also copy or remove the {@link RenderTarget#renderTexture | render target render texture} into the {@link ShaderPass} {@link renderTexture}
   * @param renderTarget - the {@link RenderTarget} to assign or null if we want to remove the current {@link RenderTarget}
   */
  setRenderTarget(renderTarget) {
    super.setRenderTarget(renderTarget);
    if (renderTarget) {
      this.renderTexture.copy(this.renderTarget.renderTexture);
    } else {
      this.renderTexture.options.fromTexture = null;
      this.renderTexture.createTexture();
    }
  }
  /**
   * Add the {@link ShaderPass} to the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  addToScene() {
    this.renderer.shaderPasses.push(this);
    if (this.autoRender) {
      this.renderer.scene.addShaderPass(this);
    }
  }
  /**
   * Remove the {@link ShaderPass} from the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  removeFromScene() {
    if (this.renderTarget) {
      this.renderTarget.destroy();
    }
    if (this.autoRender) {
      this.renderer.scene.removeShaderPass(this);
    }
    this.renderer.shaderPasses = this.renderer.shaderPasses.filter((sP) => sP.uuid !== this.uuid);
  }
}

class RenderPass {
  /**
   * RenderPass constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link RenderPass}
   * @param parameters - {@link RenderPassParams | parameters} used to create this {@link RenderPass}
   */
  constructor(renderer, {
    label = "Render Pass",
    sampleCount = 4,
    loadOp = "clear",
    clearValue = [0, 0, 0, 0],
    targetFormat,
    depth = true,
    depthTexture,
    depthLoadOp = "clear",
    depthClearValue = 1
  } = {}) {
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, "RenderPass");
    this.type = "RenderPass";
    this.uuid = generateUUID();
    this.renderer = renderer;
    this.options = {
      label,
      sampleCount,
      // color
      loadOp,
      clearValue,
      targetFormat: targetFormat ?? this.renderer.options.preferredFormat,
      // depth
      depth,
      ...depthTexture !== void 0 && { depthTexture },
      depthLoadOp,
      depthClearValue
    };
    this.setClearValue(clearValue);
    if (this.options.depth) {
      this.createDepthTexture();
    }
    this.viewTexture = new RenderTexture(this.renderer, {
      label: this.options.label + " view texture",
      name: "viewTexture",
      format: this.options.targetFormat,
      sampleCount: this.options.sampleCount
    });
    this.setRenderPassDescriptor();
  }
  /**
   * Set our {@link depthTexture | depth texture}
   */
  createDepthTexture() {
    this.depthTexture = new RenderTexture(this.renderer, {
      label: this.options.label + " depth texture",
      name: "depthTexture",
      usage: "depthTexture",
      format: "depth24plus",
      sampleCount: this.options.sampleCount,
      ...this.options.depthTexture && { fromTexture: this.options.depthTexture }
    });
  }
  /**
   * Reset our {@link depthTexture | depth texture}
   */
  resetRenderPassDepth() {
    this.depthTexture.forceResize({
      width: Math.floor(this.renderer.pixelRatioBoundingRect.width),
      height: Math.floor(this.renderer.pixelRatioBoundingRect.height),
      depth: 1
    });
    this.descriptor.depthStencilAttachment.view = this.depthTexture.texture.createView({
      label: this.depthTexture.options.label + " view"
    });
  }
  /**
   * Reset our {@link viewTexture | view texture}
   */
  resetRenderPassView() {
    this.viewTexture.forceResize({
      width: Math.floor(this.renderer.pixelRatioBoundingRect.width),
      height: Math.floor(this.renderer.pixelRatioBoundingRect.height),
      depth: 1
    });
    this.descriptor.colorAttachments[0].view = this.viewTexture.texture.createView({
      label: this.viewTexture.options.label + " view"
    });
  }
  /**
   * Set our render pass {@link descriptor}
   */
  setRenderPassDescriptor() {
    this.descriptor = {
      label: this.options.label + " descriptor",
      colorAttachments: [
        {
          // view: <- to be filled out when we set our render pass view
          view: this.viewTexture.texture.createView({
            label: this.viewTexture.options.label + " view"
          }),
          // ...(this.options.sampleCount > 1 && {
          //   resolveTarget: this.resolveTexture.texture.createView({
          //     label: this.resolveTexture.options.label + ' view',
          //   }),
          // }),
          // clear values
          clearValue: this.options.clearValue,
          // loadOp: 'clear' specifies to clear the texture to the clear value before drawing
          // The other option is 'load' which means load the existing contents of the texture into the GPU so we can draw over what's already there.
          loadOp: this.options.loadOp,
          // storeOp: 'store' means store the result of what we draw.
          // We could also pass 'discard' which would throw away what we draw.
          // see https://webgpufundamentals.org/webgpu/lessons/webgpu-multisampling.html
          storeOp: "store"
        }
      ],
      ...this.options.depth && {
        depthStencilAttachment: {
          view: this.depthTexture.texture.createView({
            label: this.depthTexture.options.label + " view"
          }),
          depthClearValue: this.options.depthClearValue,
          // the same way loadOp is working, we can specify if we want to clear or load the previous depth buffer result
          depthLoadOp: this.options.depthLoadOp,
          depthStoreOp: "store"
        }
      }
    };
  }
  /**
   * Resize our {@link RenderPass}: reset its {@link RenderTexture}
   */
  resize() {
    if (this.options.depth)
      this.resetRenderPassDepth();
    this.resetRenderPassView();
  }
  /**
   * Set the {@link descriptor} {@link GPULoadOp | load operation}
   * @param loadOp - new {@link GPULoadOp | load operation} to use
   */
  setLoadOp(loadOp = "clear") {
    this.options.loadOp = loadOp;
    if (this.descriptor) {
      if (this.descriptor.colorAttachments) {
        this.descriptor.colorAttachments[0].loadOp = loadOp;
      }
    }
  }
  /**
   * Set the {@link descriptor} {@link GPULoadOp | depth load operation}
   * @param depthLoadOp - new {@link GPULoadOp | depth load operation} to use
   */
  setDepthLoadOp(depthLoadOp = "clear") {
    this.options.depthLoadOp = depthLoadOp;
    if (this.options.depth && this.descriptor.depthStencilAttachment) {
      this.descriptor.depthStencilAttachment.depthLoadOp = depthLoadOp;
    }
  }
  /**
   * Set our {@link GPUColor | clear colors value}.<br>
   * Beware that if the {@link renderer} is using {@link core/renderers/GPURenderer.GPURenderer#alphaMode | premultiplied alpha mode}, your R, G and B channels should be premultiplied by your alpha channel.
   * @param clearValue - new {@link GPUColor | clear colors value} to use
   */
  setClearValue(clearValue = [0, 0, 0, 0]) {
    if (this.renderer.alphaMode === "premultiplied") {
      const alpha = clearValue[3];
      clearValue[0] = Math.min(clearValue[0], alpha);
      clearValue[1] = Math.min(clearValue[1], alpha);
      clearValue[2] = Math.min(clearValue[2], alpha);
    } else {
      this.options.clearValue = clearValue;
    }
    if (this.descriptor && this.descriptor.colorAttachments) {
      this.descriptor.colorAttachments[0].clearValue = clearValue;
    }
  }
  /**
   * Destroy our {@link RenderPass}
   */
  destroy() {
    this.viewTexture?.destroy();
    if (!this.options.depthTexture && this.depthTexture) {
      this.depthTexture.destroy();
    }
  }
}

var __accessCheck$2 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet$2 = (obj, member, getter) => {
  __accessCheck$2(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$2 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet$1 = (obj, member, value, setter) => {
  __accessCheck$2(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var _autoRender;
class RenderTarget {
  /**
   * RenderTarget constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link RenderTarget}
   * @param parameters - {@link RenderTargetParams | parameters} use to create this {@link RenderTarget}
   */
  constructor(renderer, parameters) {
    /** Whether we should add this {@link RenderTarget} to our {@link core/scenes/Scene.Scene | Scene} to let it handle the rendering process automatically */
    __privateAdd$2(this, _autoRender, true);
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, "RenderTarget");
    this.type = "RenderTarget";
    this.renderer = renderer;
    this.uuid = generateUUID();
    const { label, targetFormat, autoRender, ...renderPassParams } = parameters;
    this.options = {
      label,
      ...renderPassParams,
      targetFormat: targetFormat ?? this.renderer.options.preferredFormat,
      autoRender
    };
    if (autoRender !== void 0) {
      __privateSet$1(this, _autoRender, autoRender);
    }
    this.renderPass = new RenderPass(this.renderer, {
      label: this.options.label ? `${this.options.label} Render Pass` : "Render Target Render Pass",
      targetFormat: this.options.targetFormat,
      depthTexture: this.renderer.renderPass.depthTexture,
      // reuse renderer depth texture for every pass
      ...renderPassParams
    });
    this.renderTexture = new RenderTexture(this.renderer, {
      label: this.options.label ? `${this.options.label} Render Texture` : "Render Target Render Texture",
      name: "renderTexture",
      format: this.options.targetFormat
    });
    this.addToScene();
  }
  /**
   * Add the {@link RenderTarget} to the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  addToScene() {
    this.renderer.renderTargets.push(this);
    if (__privateGet$2(this, _autoRender)) {
      this.renderer.scene.addRenderTarget(this);
    }
  }
  /**
   * Remove the {@link RenderTarget} from the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  removeFromScene() {
    if (__privateGet$2(this, _autoRender)) {
      this.renderer.scene.removeRenderTarget(this);
    }
    this.renderer.renderTargets = this.renderer.renderTargets.filter((renderTarget) => renderTarget.uuid !== this.uuid);
  }
  /**
   * Resize our {@link renderPass} and {@link renderTexture}
   * @param boundingRect - new {@link DOMElementBoundingRect | bounding rectangle}
   */
  resize(boundingRect) {
    this.renderPass.options.depthTexture.texture = this.renderer.renderPass.depthTexture.texture;
    this.renderPass?.resize();
    this.renderTexture?.resize();
  }
  /**
   * Remove our {@link RenderTarget}. Alias of {@link RenderTarget#destroy}
   */
  remove() {
    this.destroy();
  }
  /**
   * Destroy our {@link RenderTarget}
   */
  destroy() {
    this.renderer.meshes.forEach((mesh) => {
      if (mesh.renderTarget && mesh.renderTarget.uuid === this.uuid) {
        mesh.setRenderTarget(null);
      }
    });
    this.renderer.shaderPasses.forEach((shaderPass) => {
      if (shaderPass.renderTarget && shaderPass.renderTarget.uuid === this.uuid) {
        shaderPass.renderTarget = null;
        shaderPass.setRenderTarget(null);
      }
    });
    this.removeFromScene();
    this.renderPass?.destroy();
    this.renderTexture?.destroy();
  }
}
_autoRender = new WeakMap();

class PingPongPlane extends FullscreenPlane {
  /**
   * PingPongPlane constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link PingPongPlane}
   * @param parameters - {@link MeshBaseRenderParams | parameters} use to create this {@link PingPongPlane}
   */
  constructor(renderer, parameters = {}) {
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, parameters.label ? parameters.label + " PingPongPlane" : "PingPongPlane");
    parameters.renderTarget = new RenderTarget(renderer, {
      label: parameters.label ? parameters.label + " render target" : "Ping Pong render target",
      depth: false,
      ...parameters.targetFormat && { targetFormat: parameters.targetFormat }
    });
    parameters.transparent = false;
    parameters.depth = false;
    parameters.label = parameters.label ?? "PingPongPlane " + renderer.pingPongPlanes?.length;
    super(renderer, parameters);
    this.type = "PingPongPlane";
    this.createRenderTexture({
      label: parameters.label ? `${parameters.label} render texture` : "PingPongPlane render texture",
      name: "renderTexture",
      ...parameters.targetFormat && { format: parameters.targetFormat }
    });
  }
  /**
   * Get our main {@link RenderTexture}, the one that contains our ping pong content
   * @readonly
   */
  get renderTexture() {
    return this.renderTextures.find((texture) => texture.options.name === "renderTexture");
  }
  /**
   * Add the {@link PingPongPlane} to the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  addToScene() {
    this.renderer.pingPongPlanes.push(this);
    if (this.autoRender) {
      this.renderer.scene.addPingPongPlane(this);
    }
  }
  /**
   * Remove the {@link PingPongPlane} from the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  removeFromScene() {
    if (this.renderTarget) {
      this.renderTarget.destroy();
    }
    if (this.autoRender) {
      this.renderer.scene.removePingPongPlane(this);
    }
    this.renderer.pingPongPlanes = this.renderer.pingPongPlanes.filter((pPP) => pPP.uuid !== this.uuid);
  }
}

var __accessCheck$1 = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet$1 = (obj, member, getter) => {
  __accessCheck$1(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd$1 = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var _DOMObjectWorldPosition, _DOMObjectWorldScale;
class DOMObject3D extends ProjectedObject3D {
  /**
   * DOMObject3D constructor
   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link DOMObject3D}
   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link DOMObject3D}
   * @param parameters - {@link DOMObject3DParams | parameters} used to create this {@link DOMObject3D}
   */
  constructor(renderer, element, parameters) {
    super(renderer);
    /** Private {@link Vec3 | vector} used to keep track of the actual {@link DOMObject3DTransforms#position.world | world position} accounting the {@link DOMObject3DTransforms#position.document | additional document translation} converted into world space */
    __privateAdd$1(this, _DOMObjectWorldPosition, new Vec3());
    /** Private {@link Vec3 | vector} used to keep track of the actual {@link DOMObject3D} world scale accounting the {@link DOMObject3D#size.world | DOMObject3D world size} */
    __privateAdd$1(this, _DOMObjectWorldScale, new Vec3());
    renderer = renderer && renderer.renderer || renderer;
    isCurtainsRenderer(renderer, "DOM3DObject");
    this.renderer = renderer;
    this.size = {
      world: {
        width: 0,
        height: 0,
        top: 0,
        left: 0
      },
      document: {
        width: 0,
        height: 0,
        top: 0,
        left: 0
      }
    };
    this.watchScroll = parameters.watchScroll;
    this.camera = this.renderer.camera;
    this.setDOMElement(element);
  }
  /**
   * Set the {@link domElement | DOM Element}
   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use
   */
  setDOMElement(element) {
    this.domElement = new DOMElement({
      element,
      onSizeChanged: (boundingRect) => this.resize(boundingRect),
      onPositionChanged: (boundingRect) => this.onPositionChanged(boundingRect)
    });
  }
  /**
   * Update size and position when the {@link domElement | DOM Element} position changed
   * @param boundingRect - the new bounding rectangle
   */
  onPositionChanged(boundingRect) {
    if (this.watchScroll) {
      this.size.document = boundingRect ?? this.domElement.element.getBoundingClientRect();
      this.updateSizeAndPosition();
    }
  }
  /**
   * Reset the {@link domElement | DOMElement}
   * @param element - the new {@link HTMLElement} or string representing an {@link HTMLElement} selector to use
   */
  resetDOMElement(element) {
    if (this.domElement) {
      this.domElement.destroy();
    }
    this.setDOMElement(element);
  }
  /**
   * Update the {@link DOMObject3D} sizes and position
   */
  updateSizeAndPosition() {
    this.setWorldSizes();
    this.applyPosition();
    this.shouldUpdateModelMatrix();
  }
  /**
   * Update the {@link DOMObject3D} sizes, position and projection
   */
  shouldUpdateMatrixStack() {
    this.updateSizeAndPosition();
    super.shouldUpdateMatrixStack();
  }
  /**
   * Resize the {@link DOMObject3D}
   * @param boundingRect - new {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   */
  resize(boundingRect) {
    if (!boundingRect && (!this.domElement || this.domElement?.isResizing))
      return;
    this.size.document = boundingRect ?? this.domElement.element.getBoundingClientRect();
    this.shouldUpdateMatrixStack();
  }
  /* BOUNDING BOXES GETTERS */
  /**
   * Get the {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   * @readonly
   */
  get boundingRect() {
    return this.domElement.boundingRect;
  }
  /* TRANSFOMS */
  /**
   * Set our transforms properties and {@link Vec3#onChange | onChange vector} callbacks
   */
  setTransforms() {
    super.setTransforms();
    this.transforms.origin.model.set(0.5, 0.5, 0);
    this.transforms.origin.world = new Vec3();
    this.transforms.position.document = new Vec3();
    this.documentPosition.onChange(() => this.applyPosition());
    this.transformOrigin.onChange(() => this.setWorldTransformOrigin());
  }
  /**
   * Get the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}
   */
  get documentPosition() {
    return this.transforms.position.document;
  }
  /**
   * Set the {@link DOMObject3DTransforms#position.document | additional translation relative to the document}
   * @param value - additional translation relative to the document to apply
   */
  set documentPosition(value) {
    this.transforms.position.document = value;
    this.applyPosition();
  }
  /**
   * Get the {@link domElement | DOM element} scale in world space
   * @readonly
   */
  get DOMObjectWorldScale() {
    return __privateGet$1(this, _DOMObjectWorldScale).clone();
  }
  /**
   * Get the {@link DOMObject3D} scale in world space (accounting for {@link scale})
   * @readonly
   */
  get worldScale() {
    return this.DOMObjectWorldScale.multiply(this.scale);
  }
  /**
   * Get the {@link DOMObject3D} position in world space
   * @readonly
   */
  get worldPosition() {
    return __privateGet$1(this, _DOMObjectWorldPosition).clone();
  }
  /**
   * Get the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}
   */
  get transformOrigin() {
    return this.transforms.origin.model;
  }
  /**
   * Set the {@link DOMObject3D} transform origin relative to the {@link DOMObject3D}
   * @param value - new transform origin
   */
  set transformOrigin(value) {
    this.transforms.origin.model = value;
    this.setWorldTransformOrigin();
  }
  /**
   * Get the {@link DOMObject3D} transform origin in world space
   */
  get worldTransformOrigin() {
    return this.transforms.origin.world;
  }
  /**
   * Set the {@link DOMObject3D} transform origin in world space
   * @param value - new world space transform origin
   */
  set worldTransformOrigin(value) {
    this.transforms.origin.world = value;
  }
  /**
   * Set the {@link DOMObject3D} world position using its world position and document translation converted to world space
   */
  applyPosition() {
    this.applyDocumentPosition();
    super.applyPosition();
  }
  /**
   * Compute the {@link DOMObject3D} world position using its world position and document translation converted to world space
   */
  applyDocumentPosition() {
    let worldPosition = new Vec3(0, 0, 0);
    if (!this.documentPosition.equals(worldPosition)) {
      worldPosition = this.documentToWorldSpace(this.documentPosition);
    }
    __privateGet$1(this, _DOMObjectWorldPosition).set(
      this.position.x + this.size.world.left + worldPosition.x,
      this.position.y + this.size.world.top + worldPosition.y,
      this.position.z + this.documentPosition.z / this.camera.CSSPerspective
    );
  }
  /**
   * Apply the transform origin and set the {@link DOMObject3D} world transform origin
   */
  applyTransformOrigin() {
    if (!this.size)
      return;
    this.setWorldTransformOrigin();
    super.applyTransformOrigin();
  }
  /* MATRICES */
  /**
   * Update the {@link modelMatrix | model matrix} accounting the {@link DOMObject3D} world position and {@link DOMObject3D} world scale
   */
  updateModelMatrix() {
    this.modelMatrix.composeFromOrigin(
      __privateGet$1(this, _DOMObjectWorldPosition),
      this.quaternion,
      this.scale,
      this.worldTransformOrigin
    );
    this.modelMatrix.scale(__privateGet$1(this, _DOMObjectWorldScale));
    this.shouldUpdateWorldMatrix();
  }
  /**
   * Convert a document position {@link Vec3 | vector} to a world position {@link Vec3 | vector}
   * @param vector - document position {@link Vec3 | vector} converted to world space
   */
  documentToWorldSpace(vector = new Vec3()) {
    return new Vec3(
      vector.x * this.renderer.pixelRatio / this.renderer.boundingRect.width * this.camera.screenRatio.width,
      -(vector.y * this.renderer.pixelRatio / this.renderer.boundingRect.height) * this.camera.screenRatio.height,
      vector.z
    );
  }
  /**
   * Set the {@link DOMObject3D#size.world | world size} and set the {@link DOMObject3D} world transform origin
   */
  setWorldSizes() {
    const containerBoundingRect = this.renderer.boundingRect;
    const planeCenter = {
      x: this.size.document.width / 2 + this.size.document.left,
      y: this.size.document.height / 2 + this.size.document.top
    };
    const containerCenter = {
      x: containerBoundingRect.width / 2 + containerBoundingRect.left,
      y: containerBoundingRect.height / 2 + containerBoundingRect.top
    };
    this.size.world = {
      width: this.size.document.width / containerBoundingRect.width * this.camera.screenRatio.width / 2,
      height: this.size.document.height / containerBoundingRect.height * this.camera.screenRatio.height / 2,
      top: (containerCenter.y - planeCenter.y) / containerBoundingRect.height * this.camera.screenRatio.height,
      left: (planeCenter.x - containerCenter.x) / containerBoundingRect.width * this.camera.screenRatio.width
    };
    __privateGet$1(this, _DOMObjectWorldScale).set(this.size.world.width, this.size.world.height, 1);
    this.setWorldTransformOrigin();
  }
  /**
   * Set the {@link DOMObject3D} world transform origin and tell the matrices to update
   */
  setWorldTransformOrigin() {
    this.transforms.origin.world = new Vec3(
      (this.transformOrigin.x * 2 - 1) * // between -1 and 1
      this.size.world.width,
      -(this.transformOrigin.y * 2 - 1) * // between -1 and 1
      this.size.world.height,
      this.transformOrigin.z
    );
    this.shouldUpdateModelMatrix();
    this.shouldUpdateProjectionMatrixStack();
  }
  /**
   * Update the {@link domElement | DOM Element} scroll position
   * @param delta - last {@link utils/ScrollManager.ScrollManager.delta | scroll delta values}
   */
  updateScrollPosition(delta = { x: 0, y: 0 }) {
    if (delta.x || delta.y) {
      this.domElement.updateScrollPosition(delta);
    }
  }
  /**
   * Destroy our {@link DOMObject3D}
   */
  destroy() {
    this.domElement?.destroy();
  }
}
_DOMObjectWorldPosition = new WeakMap();
_DOMObjectWorldScale = new WeakMap();

const defaultDOMMeshParams = {
  autoloadSources: true,
  watchScroll: true
};
class DOMMesh extends ProjectedMeshBaseMixin(DOMObject3D) {
  /**
   * DOMMesh constructor
   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link DOMMesh}
   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link DOMMesh}
   * @param parameters - {@link DOMMeshParams | parameters} used to create this {@link DOMMesh}
   */
  constructor(renderer, element, parameters) {
    super(renderer, element, { ...defaultDOMMeshParams, ...parameters });
    // callbacks / events
    /** function assigned to the {@link onLoading} callback */
    this._onLoadingCallback = (texture) => {
    };
    parameters = { ...defaultDOMMeshParams, ...parameters };
    renderer = renderer && renderer.renderer || renderer;
    isCurtainsRenderer(renderer, parameters.label ? parameters.label + " DOMMesh" : "DOMMesh");
    this.type = "DOMMesh";
    const { autoloadSources } = parameters;
    this.autoloadSources = autoloadSources;
    this.sourcesReady = false;
    this.setInitSources();
  }
  /**
   * Get/set whether our {@link material} and {@link geometry} are ready
   * @readonly
   */
  get ready() {
    return this._ready;
  }
  set ready(value) {
    this._ready = value;
    if (this.DOMMeshReady) {
      this._onReadyCallback && this._onReadyCallback();
    }
  }
  /**
   * Get/set whether all the initial {@link DOMMesh} sources have been successfully loaded
   * @readonly
   */
  get sourcesReady() {
    return this._sourcesReady;
  }
  set sourcesReady(value) {
    this._sourcesReady = value;
    if (this.DOMMeshReady) {
      this._onReadyCallback && this._onReadyCallback();
    }
  }
  /**
   * Get whether our {@link DOMMesh} is ready. A {@link DOMMesh} is ready when its {@link sourcesReady | sources are ready} and its {@link material} and {@link geometry} are ready.
   * @readonly
   */
  get DOMMeshReady() {
    return this.ready && this.sourcesReady;
  }
  /**
   * Add a {@link DOMMesh} to the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  addToScene() {
    super.addToScene();
    this.renderer.domMeshes.push(this);
  }
  /**
   * Remove a {@link DOMMesh} from the renderer and the {@link core/scenes/Scene.Scene | Scene}
   */
  removeFromScene() {
    super.removeFromScene();
    this.renderer.domMeshes = this.renderer.domMeshes.filter(
      (m) => m.uuid !== this.uuid
    );
  }
  /**
   * Load initial {@link DOMMesh} sources if needed and create associated {@link Texture}
   */
  setInitSources() {
    let loaderSize = 0;
    let sourcesLoaded = 0;
    if (this.autoloadSources) {
      const images = this.domElement.element.querySelectorAll("img");
      const videos = this.domElement.element.querySelectorAll("video");
      const canvases = this.domElement.element.querySelectorAll("canvas");
      loaderSize = images.length + videos.length + canvases.length;
      const onSourceUploaded = (texture) => {
        sourcesLoaded++;
        this._onLoadingCallback && this._onLoadingCallback(texture);
        if (sourcesLoaded === loaderSize) {
          this.sourcesReady = true;
        }
      };
      if (!loaderSize) {
        this.sourcesReady = true;
      }
      if (images.length) {
        images.forEach((image) => {
          const texture = this.createTexture({
            name: image.getAttribute("data-texture-name") ?? "texture" + this.textures.length
          });
          texture.onSourceUploaded(() => onSourceUploaded(texture)).loadImage(image.src);
        });
      }
      if (videos.length) {
        videos.forEach((video) => {
          const texture = this.createTexture({
            name: video.getAttribute("data-texture-name") ?? "texture" + this.textures.length
          });
          texture.onSourceUploaded(() => onSourceUploaded(texture)).loadVideo(video);
        });
      }
      if (canvases.length) {
        canvases.forEach((canvas) => {
          const texture = this.createTexture({
            name: canvas.getAttribute("data-texture-name") ?? "texture" + this.textures.length
          });
          texture.onSourceUploaded(() => onSourceUploaded(texture)).loadCanvas(canvas);
        });
      }
    } else {
      this.sourcesReady = true;
    }
  }
  /**
   * Reset/change the {@link domElement | DOM Element}
   * @param element - new {@link HTMLElement} or string representing an {@link HTMLElement} selector to use
   */
  resetDOMElement(element) {
    if (!!element) {
      super.resetDOMElement(element);
    } else if (!element && !this.renderer.production) {
      throwWarning(
        `${this.options.label}: You are trying to reset a ${this.type} with a HTML element that does not exist. The old HTML element will be kept instead.`
      );
    }
  }
  /**
   * Get our {@link DOMMesh#domElement | DOM Element} {@link core/DOM/DOMElement.DOMElement#boundingRect | bounding rectangle} accounting for current {@link core/renderers/GPURenderer.GPURenderer#pixelRatio | renderer pixel ratio}
   */
  get pixelRatioBoundingRect() {
    const devicePixelRatio = window.devicePixelRatio ?? 1;
    const scaleBoundingRect = this.renderer.pixelRatio / devicePixelRatio;
    return Object.keys(this.domElement.boundingRect).reduce(
      (a, key) => ({ ...a, [key]: this.domElement.boundingRect[key] * scaleBoundingRect }),
      {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }
    );
  }
  /**
   * Create a new {@link RenderTexture}
   * @param  options - {@link RenderTextureParams | RenderTexture parameters}
   * @returns - newly created {@link RenderTexture}
   */
  createRenderTexture(options) {
    options = {
      ...options,
      size: { width: this.pixelRatioBoundingRect.width, height: this.pixelRatioBoundingRect.height }
    };
    return super.createRenderTexture(options);
  }
  /**
   * Resize the Mesh's render textures only if they're not storage textures
   */
  resizeRenderTextures() {
    this.renderTextures?.filter((renderTexture) => renderTexture.options.usage === "texture").forEach(
      (renderTexture) => renderTexture.resize({ width: this.pixelRatioBoundingRect.width, height: this.pixelRatioBoundingRect.height })
    );
  }
  /* EVENTS */
  /**
   * Called each time one of the initial sources associated {@link Texture#texture | GPU texture} has been uploaded to the GPU
   * @param callback - callback to call each time a {@link Texture#texture | GPU texture} has been uploaded to the GPU
   * @returns - our {@link DOMMesh}
   */
  onLoading(callback) {
    if (callback) {
      this._onLoadingCallback = callback;
    }
    return this;
  }
}

const defaultPlaneParams = {
  label: "Plane",
  // geometry
  instancesCount: 1,
  vertexBuffers: []
};
class Plane extends DOMMesh {
  /**
   * Plane constructor
   * @param renderer - {@link GPUCurtainsRenderer} object or {@link GPUCurtains} class object used to create this {@link Plane}
   * @param element - {@link HTMLElement} or string representing an {@link HTMLElement} selector used to scale and position the {@link Plane}
   * @param parameters - {@link PlaneParams | parameters} used to create this {@link Plane}
   */
  constructor(renderer, element, parameters = {}) {
    renderer = renderer && renderer.renderer || renderer;
    isCurtainsRenderer(renderer, parameters.label ? parameters.label + " Plane" : "Plane");
    const params = { ...defaultPlaneParams, ...parameters };
    let { geometry, widthSegments, heightSegments, ...DOMMeshParams2 } = params;
    const { instancesCount, vertexBuffers, ...materialParams } = DOMMeshParams2;
    if (!geometry || geometry.type !== "PlaneGeometry") {
      widthSegments = widthSegments ?? 1;
      heightSegments = heightSegments ?? 1;
      const geometryID = widthSegments * heightSegments + widthSegments;
      if (!vertexBuffers.length) {
        geometry = cacheManager.getPlaneGeometryByID(geometryID);
      }
      if (!geometry) {
        geometry = new PlaneGeometry({ widthSegments, heightSegments, instancesCount, vertexBuffers });
        cacheManager.addPlaneGeometry(geometry);
      } else {
        geometry.instancesCount = instancesCount;
      }
    }
    super(renderer, element, { geometry, ...materialParams });
    this.type = "Plane";
  }
  /**
   * Take the pointer {@link Vec2 | vector} position relative to the document and returns it relative to our {@link Plane}
   * It ranges from -1 to 1 on both axis
   * @param mouseCoords - pointer {@link Vec2 | vector} coordinates
   * @returns - raycasted {@link Vec2 | vector} coordinates relative to the {@link Plane}
   */
  mouseToPlaneCoords(mouseCoords = new Vec2()) {
    const worldMouse = {
      x: 2 * (mouseCoords.x / this.renderer.pixelRatioBoundingRect.width) - 1,
      y: 2 * (1 - mouseCoords.y / this.renderer.pixelRatioBoundingRect.height) - 1
    };
    const rayOrigin = this.camera.position.clone();
    const rayDirection = new Vec3(worldMouse.x, worldMouse.y, -0.5);
    rayDirection.unproject(this.camera);
    rayDirection.sub(rayOrigin).normalize();
    const planeNormals = new Vec3(0, 0, 1);
    planeNormals.applyQuat(this.quaternion).normalize();
    const result = new Vec3(0, 0, 0);
    const denominator = planeNormals.dot(rayDirection);
    if (Math.abs(denominator) >= 1e-4) {
      const inverseViewMatrix = this.modelMatrix.getInverse().premultiply(this.camera.viewMatrix);
      const planeOrigin = this.worldTransformOrigin.clone().add(this.worldPosition);
      const rotatedOrigin = new Vec3(
        this.worldPosition.x - planeOrigin.x,
        this.worldPosition.y - planeOrigin.y,
        this.worldPosition.z - planeOrigin.z
      );
      rotatedOrigin.applyQuat(this.quaternion);
      planeOrigin.add(rotatedOrigin);
      const distance = planeNormals.dot(planeOrigin.clone().sub(rayOrigin)) / denominator;
      result.copy(rayOrigin.add(rayDirection.multiplyScalar(distance)));
      result.applyMat4(inverseViewMatrix);
    } else {
      result.set(Infinity, Infinity, Infinity);
    }
    return new Vec2(result.x, result.y);
  }
}

class Scene {
  /**
   * Scene constructor
   * @param renderer - {@link Renderer} object or {@link GPUCurtains} class object used to create this {@link Scene}
   */
  constructor({ renderer }) {
    renderer = renderer && renderer.renderer || renderer;
    isRenderer(renderer, "Scene");
    this.renderer = renderer;
    this.computePassEntries = [];
    this.renderPassEntries = {
      /** Array of {@link RenderPassEntry} that will handle {@link PingPongPlane}. Each {@link PingPongPlane} will be added as a distinct {@link RenderPassEntry} here */
      pingPong: [],
      /** Array of {@link RenderPassEntry} that will render to a specific {@link RenderTarget}. Each {@link RenderTarget} will be added as a distinct {@link RenderPassEntry} here */
      renderTarget: [],
      /** Array of {@link RenderPassEntry} that will render directly to the screen. Our first entry will contain all the Meshes that do not have any {@link RenderTarget} assigned. Following entries will be created for every global {@link ShaderPass} */
      screen: [
        // add our basic scene entry
        {
          renderPass: this.renderer.renderPass,
          renderTexture: null,
          onBeforeRenderPass: null,
          onAfterRenderPass: null,
          element: null,
          // explicitly set to null
          stack: {
            unProjected: {
              opaque: [],
              transparent: []
            },
            projected: {
              opaque: [],
              transparent: []
            }
          }
        }
      ]
    };
  }
  /**
   * Get the number of meshes a {@link RenderPassEntry | render pass entry} should draw.
   * @param renderPassEntry - The {@link RenderPassEntry | render pass entry} to test
   */
  getRenderPassEntryLength(renderPassEntry) {
    if (!renderPassEntry) {
      return 0;
    } else {
      return renderPassEntry.element ? 1 : renderPassEntry.stack.unProjected.opaque.length + renderPassEntry.stack.unProjected.transparent.length + renderPassEntry.stack.projected.opaque.length + renderPassEntry.stack.projected.transparent.length;
    }
  }
  /**
   * Add a {@link ComputePass} to our scene {@link computePassEntries} array
   * @param computePass - {@link ComputePass} to add
   */
  addComputePass(computePass) {
    this.computePassEntries.push(computePass);
    this.computePassEntries.sort((a, b) => {
      if (a.renderOrder !== b.renderOrder) {
        return a.renderOrder - b.renderOrder;
      } else {
        return a.index - b.index;
      }
    });
  }
  /**
   * Remove a {@link ComputePass} from our scene {@link computePassEntries} array
   * @param computePass - {@link ComputePass} to remove
   */
  removeComputePass(computePass) {
    this.computePassEntries = this.computePassEntries.filter((cP) => cP.uuid !== computePass.uuid);
  }
  /**
   * Add a {@link RenderTarget} to our scene {@link renderPassEntries} renderTarget array.
   * Every Meshes later added to this {@link RenderTarget} will be rendered to the {@link RenderTarget#renderTexture | RenderTarget RenderTexture} using the {@link RenderTarget#renderPass.descriptor | RenderTarget RenderPass descriptor}
   * @param renderTarget - {@link RenderTarget} to add
   */
  addRenderTarget(renderTarget) {
    if (!this.renderPassEntries.renderTarget.find((entry) => entry.renderPass.uuid === renderTarget.renderPass.uuid))
      this.renderPassEntries.renderTarget.push({
        renderPass: renderTarget.renderPass,
        renderTexture: renderTarget.renderTexture,
        onBeforeRenderPass: null,
        onAfterRenderPass: null,
        element: null,
        // explicitly set to null
        stack: {
          unProjected: {
            opaque: [],
            transparent: []
          },
          projected: {
            opaque: [],
            transparent: []
          }
        }
      });
  }
  /**
   * Remove a {@link RenderTarget} from our scene {@link renderPassEntries} renderTarget array.
   * @param renderTarget - {@link RenderTarget} to add
   */
  removeRenderTarget(renderTarget) {
    this.renderPassEntries.renderTarget = this.renderPassEntries.renderTarget.filter(
      (entry) => entry.renderPass.uuid !== renderTarget.renderPass.uuid
    );
  }
  /**
   * Get the correct {@link renderPassEntries | render pass entry} (either {@link renderPassEntries} renderTarget or {@link renderPassEntries} screen) {@link Stack} onto which this Mesh should be added, depending on whether it's projected or not
   * @param mesh - Mesh to check
   * @returns - the corresponding render pass entry {@link Stack}
   */
  getMeshProjectionStack(mesh) {
    const renderPassEntry = mesh.renderTarget ? this.renderPassEntries.renderTarget.find(
      (passEntry) => passEntry.renderPass.uuid === mesh.renderTarget.renderPass.uuid
    ) : this.renderPassEntries.screen[0];
    const { stack } = renderPassEntry;
    return mesh.material.options.rendering.useProjection ? stack.projected : stack.unProjected;
  }
  /**
   * Add a Mesh to the correct {@link renderPassEntries | render pass entry} {@link Stack} array.
   * Meshes are then ordered by their {@link core/meshes/mixins/MeshBaseMixin.MeshBaseClass#index | indexes (order of creation]}, position along the Z axis in case they are transparent and then {@link core/meshes/mixins/MeshBaseMixin.MeshBaseClass#renderOrder | renderOrder}
   * @param mesh - Mesh to add
   */
  addMesh(mesh) {
    const projectionStack = this.getMeshProjectionStack(mesh);
    const similarMeshes = mesh.transparent ? [...projectionStack.transparent] : [...projectionStack.opaque];
    let siblingMeshIndex = -1;
    for (let i = similarMeshes.length - 1; i >= 0; i--) {
      if (similarMeshes[i].material.pipelineEntry.index === mesh.material.pipelineEntry.index) {
        siblingMeshIndex = i + 1;
        break;
      }
    }
    siblingMeshIndex = Math.max(0, siblingMeshIndex);
    similarMeshes.splice(siblingMeshIndex, 0, mesh);
    similarMeshes.sort((a, b) => a.index - b.index);
    if ((mesh instanceof DOMMesh || mesh instanceof Plane) && mesh.transparent) {
      similarMeshes.sort(
        (a, b) => b.documentPosition.z - a.documentPosition.z
      );
    }
    similarMeshes.sort((a, b) => a.renderOrder - b.renderOrder);
    mesh.transparent ? projectionStack.transparent = similarMeshes : projectionStack.opaque = similarMeshes;
  }
  /**
   * Remove a Mesh from our {@link Scene}
   * @param mesh - Mesh to remove
   */
  removeMesh(mesh) {
    const projectionStack = this.getMeshProjectionStack(mesh);
    if (mesh.transparent) {
      projectionStack.transparent = projectionStack.transparent.filter((m) => m.uuid !== mesh.uuid);
    } else {
      projectionStack.opaque = projectionStack.opaque.filter((m) => m.uuid !== mesh.uuid);
    }
  }
  /**
   * Add a {@link ShaderPass} to our scene {@link renderPassEntries} screen array.
   * Before rendering the {@link ShaderPass}, we will copy the correct input texture into its {@link ShaderPass#renderTexture | renderTexture}
   * This also handles the {@link renderPassEntries} screen array entries order: We will first draw selective passes, then our main screen pass and finally global post processing passes.
   * @see {@link https://codesandbox.io/p/sandbox/webgpu-render-to-2-textures-without-texture-copy-c4sx4s?file=%2Fsrc%2Findex.js%3A10%2C4 | minimal code example}
   * @param shaderPass - {@link ShaderPass} to add
   */
  addShaderPass(shaderPass) {
    const onBeforeRenderPass = shaderPass.renderTarget ? null : (commandEncoder, swapChainTexture) => {
      if (shaderPass.renderTexture) {
        commandEncoder.copyTextureToTexture(
          {
            texture: swapChainTexture
          },
          {
            texture: shaderPass.renderTexture.texture
          },
          [shaderPass.renderTexture.size.width, shaderPass.renderTexture.size.height]
        );
      }
      this.renderer.postProcessingPass.setLoadOp("clear");
    };
    const onAfterRenderPass = shaderPass.renderTarget ? (commandEncoder, swapChainTexture) => {
      if (shaderPass.renderTarget && shaderPass.renderTarget.renderTexture) {
        commandEncoder.copyTextureToTexture(
          {
            texture: swapChainTexture
          },
          {
            texture: shaderPass.renderTarget.renderTexture.texture
          },
          [shaderPass.renderTarget.renderTexture.size.width, shaderPass.renderTarget.renderTexture.size.height]
        );
      }
    } : null;
    const shaderPassEntry = {
      renderPass: this.renderer.postProcessingPass,
      // render directly to screen
      renderTexture: null,
      onBeforeRenderPass,
      onAfterRenderPass,
      element: shaderPass,
      stack: null
      // explicitly set to null
    };
    this.renderPassEntries.screen.push(shaderPassEntry);
    this.renderPassEntries.screen.sort((a, b) => {
      const isPostProA = a.element && !a.element.renderTarget;
      const renderOrderA = a.element ? a.element.renderOrder : 0;
      const indexA = a.element ? a.element.index : 0;
      const isPostProB = b.element && !b.element.renderTarget;
      const renderOrderB = b.element ? b.element.renderOrder : 0;
      const indexB = b.element ? b.element.index : 0;
      if (isPostProA && !isPostProB) {
        return 1;
      } else if (!isPostProA && isPostProB) {
        return -1;
      } else if (renderOrderA !== renderOrderB) {
        return renderOrderA - renderOrderB;
      } else {
        return indexA - indexB;
      }
    });
  }
  /**
   * Remove a {@link ShaderPass} from our scene {@link renderPassEntries} screen array
   * @param shaderPass - {@link ShaderPass} to remove
   */
  removeShaderPass(shaderPass) {
    this.renderPassEntries.screen = this.renderPassEntries.screen.filter(
      (entry) => !entry.element || entry.element.uuid !== shaderPass.uuid
    );
  }
  /**
   * Add a {@link PingPongPlane} to our scene {@link renderPassEntries} pingPong array.
   * After rendering the {@link PingPongPlane}, we will copy the context current texture into its {@link PingPongPlane#renderTexture | renderTexture} so we'll be able to use it as an input for the next pass
   * @see {@link https://codesandbox.io/p/sandbox/webgpu-render-ping-pong-to-texture-use-in-quad-gwjx9p | minimal code example}
   * @param pingPongPlane
   */
  addPingPongPlane(pingPongPlane) {
    this.renderPassEntries.pingPong.push({
      renderPass: pingPongPlane.renderTarget.renderPass,
      renderTexture: pingPongPlane.renderTarget.renderTexture,
      onBeforeRenderPass: null,
      onAfterRenderPass: (commandEncoder, swapChainTexture) => {
        commandEncoder.copyTextureToTexture(
          {
            texture: swapChainTexture
          },
          {
            texture: pingPongPlane.renderTexture.texture
          },
          [pingPongPlane.renderTexture.size.width, pingPongPlane.renderTexture.size.height]
        );
      },
      element: pingPongPlane,
      stack: null
      // explicitly set to null
    });
    this.renderPassEntries.pingPong.sort((a, b) => a.element.renderOrder - b.element.renderOrder);
  }
  /**
   * Remove a {@link PingPongPlane} from our scene {@link renderPassEntries} pingPong array.
   * @param pingPongPlane - {@link PingPongPlane} to remove
   */
  removePingPongPlane(pingPongPlane) {
    this.renderPassEntries.pingPong = this.renderPassEntries.pingPong.filter(
      (entry) => entry.element.uuid !== pingPongPlane.uuid
    );
  }
  /**
   * Get any rendered object or {@link RenderTarget} {@link RenderPassEntry}. Useful to override a {@link RenderPassEntry#onBeforeRenderPass | RenderPassEntry onBeforeRenderPass} or {@link RenderPassEntry#onAfterRenderPass | RenderPassEntry onAfterRenderPass} default behavior.
   * @param object - The object from which we want to get the parentMesh {@link RenderPassEntry}
   * @returns - the {@link RenderPassEntry} if found
   */
  getObjectRenderPassEntry(object) {
    if (object instanceof RenderTarget) {
      return this.renderPassEntries.renderTarget.find((entry) => entry.renderPass.uuid === object.renderPass.uuid);
    } else if (object instanceof PingPongPlane) {
      return this.renderPassEntries.pingPong.find((entry) => entry.element.uuid === object.uuid);
    } else if (object instanceof ShaderPass) {
      return this.renderPassEntries.screen.find((entry) => entry.element?.uuid === object.uuid);
    } else {
      const entryType = object.renderTarget ? "renderTarget" : "screen";
      return this.renderPassEntries[entryType].find((entry) => {
        return [
          ...entry.stack.unProjected.opaque,
          ...entry.stack.unProjected.transparent,
          ...entry.stack.projected.opaque,
          ...entry.stack.projected.transparent
        ].some((mesh) => mesh.uuid === object.uuid);
      });
    }
  }
  /**
   * Here we render a {@link RenderPassEntry}:
   * - Set its {@link RenderPass#descriptor | renderPass descriptor} view or resolveTarget and get it at as swap chain texture
   * - Execute {@link RenderPassEntry#onBeforeRenderPass | onBeforeRenderPass} callback if specified
   * - Begin the {@link GPURenderPassEncoder | GPU render pass encoder} using our {@link RenderPass#descriptor | renderPass descriptor}
   * - Render the single element if specified or the render pass entry {@link Stack}: draw unprojected opaque / transparent meshes first, then set the {@link CameraRenderer#cameraBindGroup | camera bind group} and draw projected opaque / transparent meshes
   * - End the {@link GPURenderPassEncoder | GPU render pass encoder}
   * - Execute {@link RenderPassEntry#onAfterRenderPass | onAfterRenderPass} callback if specified
   * - Reset {@link core/pipelines/PipelineManager.PipelineManager#currentPipelineIndex | pipeline manager current pipeline}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   * @param renderPassEntry - {@link RenderPassEntry} to render
   */
  renderSinglePassEntry(commandEncoder, renderPassEntry) {
    const swapChainTexture = this.renderer.setRenderPassCurrentTexture(
      renderPassEntry.renderPass,
      renderPassEntry.renderTexture?.texture
    );
    renderPassEntry.onBeforeRenderPass && renderPassEntry.onBeforeRenderPass(commandEncoder, swapChainTexture);
    const pass = commandEncoder.beginRenderPass(renderPassEntry.renderPass.descriptor);
    !this.renderer.production && pass.pushDebugGroup(
      renderPassEntry.element ? `${renderPassEntry.element.options.label} render pass using ${renderPassEntry.renderPass.options.label} descriptor` : `Render stack pass using ${renderPassEntry.renderPass.options.label}${renderPassEntry.renderTexture ? " onto " + renderPassEntry.renderTexture.options.label : ""}`
    );
    if (renderPassEntry.element) {
      renderPassEntry.element.render(pass);
    } else if (renderPassEntry.stack) {
      renderPassEntry.stack.unProjected.opaque.forEach((mesh) => mesh.render(pass));
      renderPassEntry.stack.unProjected.transparent.forEach((mesh) => mesh.render(pass));
      if (renderPassEntry.stack.projected.opaque.length || renderPassEntry.stack.projected.transparent.length) {
        if (this.renderer.cameraBindGroup) {
          pass.setBindGroup(
            this.renderer.cameraBindGroup.index,
            this.renderer.cameraBindGroup.bindGroup
          );
        }
        renderPassEntry.stack.projected.opaque.forEach((mesh) => mesh.render(pass));
        renderPassEntry.stack.projected.transparent.forEach((mesh) => mesh.render(pass));
      }
    }
    !this.renderer.production && pass.popDebugGroup();
    pass.end();
    renderPassEntry.onAfterRenderPass && renderPassEntry.onAfterRenderPass(commandEncoder, swapChainTexture);
    this.renderer.pipelineManager.resetCurrentPipeline();
  }
  /**
   * Render our {@link Scene}
   * - Render {@link computePassEntries} first
   * - Then our {@link renderPassEntries}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   */
  render(commandEncoder) {
    this.computePassEntries.forEach((computePass) => {
      const pass = commandEncoder.beginComputePass();
      computePass.render(pass);
      pass.end();
      computePass.copyBufferToResult(commandEncoder);
      this.renderer.pipelineManager.resetCurrentPipeline();
    });
    for (const renderPassEntryType in this.renderPassEntries) {
      let passDrawnCount = 0;
      this.renderPassEntries[renderPassEntryType].forEach((renderPassEntry) => {
        if (!this.getRenderPassEntryLength(renderPassEntry))
          return;
        renderPassEntry.renderPass.setLoadOp(
          renderPassEntryType === "screen" && passDrawnCount !== 0 ? "load" : "clear"
        );
        passDrawnCount++;
        this.renderSinglePassEntry(commandEncoder, renderPassEntry);
      });
    }
  }
  /**
   * Logs all the main commands executed during each {@link Scene#render | Scene render} calls.
   */
  logRenderCommands() {
    const renderCommands = [];
    this.computePassEntries.forEach((computePass) => {
      renderCommands.push({
        command: "Render ComputePass",
        content: computePass.options.label
      });
      computePass.material.bindGroups.forEach((bindGroup) => {
        bindGroup.bufferBindings.forEach((binding) => {
          if (binding.shouldCopyResult) {
            renderCommands.push({
              command: `Copy buffer to buffer`,
              source: `${binding.name} buffer`,
              destination: `${binding.name} result buffer`
            });
          }
        });
      });
    });
    for (const renderPassEntryType in this.renderPassEntries) {
      let passDrawnCount = 0;
      this.renderPassEntries[renderPassEntryType].forEach((renderPassEntry) => {
        if (!this.getRenderPassEntryLength(renderPassEntry))
          return;
        const destination = renderPassEntry.renderTexture ? `${renderPassEntry.renderTexture.options.label}` : "Context current texture";
        let descriptor = renderPassEntry.renderPass.options.label;
        const operations = {
          loadOp: renderPassEntryType === "screen" && passDrawnCount > 0 ? "load" : renderPassEntry.renderPass.options.loadOp,
          depthLoadOp: void 0
        };
        if (renderPassEntry.renderPass.options.depth) {
          operations.depthLoadOp = renderPassEntry.renderPass.options.depthLoadOp;
        }
        passDrawnCount++;
        if (renderPassEntry.element) {
          if (renderPassEntry.element.type === "ShaderPass" && !renderPassEntry.element.renderTarget) {
            renderCommands.push({
              command: `Copy texture to texture`,
              source: destination,
              destination: `${renderPassEntry.element.options.label} renderTexture`
            });
            operations.loadOp = "clear";
          }
          descriptor += " " + JSON.stringify(operations);
          renderCommands.push({
            command: `Render ${renderPassEntry.element.type}`,
            source: renderPassEntry.element.options.label,
            destination,
            descriptor
          });
          if (renderPassEntry.element.type === "ShaderPass" && renderPassEntry.element.renderTarget) {
            renderCommands.push({
              command: `Copy texture to texture`,
              source: destination,
              destination: `${renderPassEntry.element.renderTarget.options.label} renderTexture`
            });
          } else if (renderPassEntry.element.type === "PingPongPlane") {
            renderCommands.push({
              command: `Copy texture to texture`,
              source: destination,
              destination: `${renderPassEntry.element.renderTexture.options.label}`
            });
          }
        } else if (renderPassEntry.stack) {
          descriptor += " " + JSON.stringify(operations);
          for (const stackType in renderPassEntry.stack) {
            for (const objectType in renderPassEntry.stack[stackType]) {
              if (renderPassEntry.stack[stackType][objectType].length) {
                renderCommands.push({
                  command: `Render stack (${stackType} ${objectType} objects)`,
                  source: renderPassEntry.stack[stackType][objectType],
                  destination,
                  descriptor
                });
              }
            }
          }
        }
      });
    }
    console.table(renderCommands);
  }
}

var __accessCheck = (obj, member, msg) => {
  if (!member.has(obj))
    throw TypeError("Cannot " + msg);
};
var __privateGet = (obj, member, getter) => {
  __accessCheck(obj, member, "read from private field");
  return getter ? getter.call(obj) : member.get(obj);
};
var __privateAdd = (obj, member, value) => {
  if (member.has(obj))
    throw TypeError("Cannot add the same private member more than once");
  member instanceof WeakSet ? member.add(obj) : member.set(obj, value);
};
var __privateSet = (obj, member, value, setter) => {
  __accessCheck(obj, member, "write to private field");
  setter ? setter.call(obj, value) : member.set(obj, value);
  return value;
};
var __privateWrapper = (obj, member, setter, getter) => ({
  set _(value) {
    __privateSet(obj, member, value, setter);
  },
  get _() {
    return __privateGet(obj, member, getter);
  }
});
var _taskCount;
class TasksQueueManager {
  /**
   * TaskQueueManager constructor
   */
  constructor() {
    /** Private number to assign a unique id to each {@link TaskQueueItem | task queue item} */
    __privateAdd(this, _taskCount, 0);
    this.queue = [];
  }
  /**
   * Add a {@link TaskQueueItem | task queue item} to the queue
   * @param callback - callback to add to the {@link TaskQueueItem | task queue item}
   * @param parameters - {@link TaskQueueItemParams | parameters} of the {@link TaskQueueItem | task queue item} to add
   * @returns - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item}, useful to later remove the task if needed
   */
  add(callback = (args) => {
  }, { order = this.queue.length, once = false } = {}) {
    const task = {
      callback,
      order,
      once,
      id: __privateGet(this, _taskCount)
    };
    __privateWrapper(this, _taskCount)._++;
    this.queue.push(task);
    this.queue.sort((a, b) => {
      return a.order - b.order;
    });
    return task.id;
  }
  /**
   * Remove a {@link TaskQueueItem | task queue item} from the queue
   * @param taskId - {@link TaskQueueItem#id | id} of the new {@link TaskQueueItem | task queue item} to remove
   */
  remove(taskId = 0) {
    this.queue = this.queue.filter((task) => task.id !== taskId);
  }
  /**
   * Execute the {@link TasksQueueManager#queue | tasks queue array}
   */
  execute(args) {
    this.queue.forEach((task) => {
      task.callback(args);
      if (task.once) {
        this.remove(task.id);
      }
    });
  }
}
_taskCount = new WeakMap();

class GPURenderer {
  /**
   * GPURenderer constructor
   * @param parameters - {@link GPURendererParams | parameters} used to create this {@link GPURenderer}
   */
  constructor({
    deviceManager,
    container,
    pixelRatio = 1,
    preferredFormat,
    alphaMode = "premultiplied",
    multisampled = true,
    renderPass
  }) {
    // callbacks / events
    /** function assigned to the {@link onBeforeRender} callback */
    this._onBeforeRenderCallback = (commandEncoder) => {
    };
    /** function assigned to the {@link onAfterRender} callback */
    this._onAfterRenderCallback = (commandEncoder) => {
    };
    /** function assigned to the {@link onAfterResize} callback */
    this._onAfterResizeCallback = () => {
    };
    this.type = "GPURenderer";
    this.uuid = generateUUID();
    this.deviceManager = deviceManager;
    this.deviceManager.addRenderer(this);
    renderPass = { ...{ depth: true, sampleCount: 4, clearValue: [0, 0, 0, 0] }, ...renderPass };
    preferredFormat = preferredFormat ?? this.deviceManager.gpu?.getPreferredCanvasFormat();
    this.options = {
      deviceManager,
      container,
      pixelRatio,
      preferredFormat,
      alphaMode,
      multisampled,
      renderPass
    };
    this.pixelRatio = pixelRatio ?? window.devicePixelRatio ?? 1;
    this.alphaMode = alphaMode;
    this.setTasksQueues();
    this.setRendererObjects();
    const isContainerCanvas = container instanceof HTMLCanvasElement;
    this.canvas = isContainerCanvas ? container : document.createElement("canvas");
    this.domElement = new DOMElement({
      element: container,
      priority: 5,
      // renderer callback need to be called first
      onSizeChanged: (boundingRect) => this.resize(boundingRect)
    });
    if (!isContainerCanvas) {
      this.domElement.element.appendChild(this.canvas);
    }
    if (this.deviceManager.device) {
      this.setContext();
    }
  }
  /**
   * Set {@link canvas} size
   * @param boundingRect - new {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   */
  setSize(boundingRect) {
    const devicePixelRatio = window.devicePixelRatio ?? 1;
    const scaleBoundingRect = this.pixelRatio / devicePixelRatio;
    this.canvas.style.width = Math.floor(boundingRect.width) + "px";
    this.canvas.style.height = Math.floor(boundingRect.height) + "px";
    const renderingSize = {
      width: Math.floor(boundingRect.width * scaleBoundingRect),
      height: Math.floor(boundingRect.height * scaleBoundingRect)
    };
    this.canvas.width = this.device ? Math.min(renderingSize.width, this.device.limits.maxTextureDimension2D) : renderingSize.width;
    this.canvas.height = this.device ? Math.min(renderingSize.height, this.device.limits.maxTextureDimension2D) : renderingSize.height;
  }
  /**
   * Resize our {@link GPURenderer}
   * @param boundingRect - new {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   */
  resize(boundingRect = null) {
    if (!this.domElement && !boundingRect)
      return;
    if (!boundingRect)
      boundingRect = this.domElement.element.getBoundingClientRect();
    this.setSize(boundingRect);
    this.onResize();
    this._onAfterResizeCallback && this._onAfterResizeCallback();
  }
  /**
   * Resize all tracked objects
   */
  onResize() {
    this.renderPass?.resize();
    this.postProcessingPass?.resize();
    this.renderTargets.forEach((renderTarget) => renderTarget.resize(this.pixelRatioBoundingRect));
    this.renderTextures.forEach((renderTexture) => renderTexture.resize());
    this.computePasses.forEach((computePass) => computePass.resize());
    this.pingPongPlanes.forEach((pingPongPlane) => pingPongPlane.resize(this.boundingRect));
    this.shaderPasses.forEach((shaderPass) => shaderPass.resize(this.boundingRect));
    this.meshes.forEach((mesh) => {
      if (!("domElement" in mesh)) {
        mesh.resize(this.boundingRect);
      } else {
        this.onBeforeCommandEncoderCreation.add(
          () => {
            if (!mesh.domElement.isResizing) {
              mesh.domElement.setSize();
            }
          },
          { once: true }
        );
      }
    });
  }
  /**
   * Get our {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle}
   */
  get boundingRect() {
    if (!!this.domElement.boundingRect) {
      return this.domElement.boundingRect;
    } else {
      const boundingRect = this.domElement.element?.getBoundingClientRect();
      return {
        top: boundingRect.top,
        right: boundingRect.right,
        bottom: boundingRect.bottom,
        left: boundingRect.left,
        width: boundingRect.width,
        height: boundingRect.height,
        x: boundingRect.x,
        y: boundingRect.y
      };
    }
  }
  /**
   * Get our {@link domElement | DOM Element} {@link DOMElement#boundingRect | bounding rectangle} accounting for current {@link pixelRatio | pixel ratio}
   */
  get pixelRatioBoundingRect() {
    const devicePixelRatio = window.devicePixelRatio ?? 1;
    const scaleBoundingRect = this.pixelRatio / devicePixelRatio;
    return Object.keys(this.boundingRect).reduce(
      (a, key) => ({ ...a, [key]: this.boundingRect[key] * scaleBoundingRect }),
      {
        x: 0,
        y: 0,
        width: 0,
        height: 0,
        top: 0,
        right: 0,
        bottom: 0,
        left: 0
      }
    );
  }
  /* USEFUL DEVICE MANAGER OBJECTS */
  /**
   * Get our {@link GPUDeviceManager#device | device}
   * @readonly
   */
  get device() {
    return this.deviceManager.device;
  }
  /**
   * Get whether our {@link GPUDeviceManager} is ready (i.e. its {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device} are set) its {@link context} is set and its size is set
   * @readonly
   */
  get ready() {
    return this.deviceManager.ready && !!this.context && !!this.canvas.style.width;
  }
  /**
   * Get our {@link GPUDeviceManager#production | GPUDeviceManager production flag}
   * @readonly
   */
  get production() {
    return this.deviceManager.production;
  }
  /**
   * Get all the created {@link GPUDeviceManager#samplers | samplers}
   * @readonly
   */
  get samplers() {
    return this.deviceManager.samplers;
  }
  /**
   * Get all the created {@link GPUDeviceManager#buffers | GPU buffers}
   * @readonly
   */
  get buffers() {
    return this.deviceManager.buffers;
  }
  /**
   * Get the {@link GPUDeviceManager#pipelineManager | pipeline manager}
   * @readonly
   */
  get pipelineManager() {
    return this.deviceManager.pipelineManager;
  }
  /**
   * Get all the rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes) created by the {@link GPUDeviceManager}
   * @readonly
   */
  get deviceRenderedObjects() {
    return this.deviceManager.deviceRenderedObjects;
  }
  /**
   * Configure our {@link context} with the given options
   */
  configureContext() {
    this.context.configure({
      device: this.device,
      format: this.options.preferredFormat,
      alphaMode: this.alphaMode,
      // needed so we can copy textures for post processing usage
      usage: GPUTextureUsage.RENDER_ATTACHMENT | GPUTextureUsage.COPY_SRC | GPUTextureUsage.COPY_DST
      //viewFormats: []
    });
  }
  /**
   * Set our {@link context} if possible and set {@link renderPass | main render pass} and {@link scene}
   */
  setContext() {
    this.context = this.canvas.getContext("webgpu");
    if (this.device) {
      this.configureContext();
      this.setMainRenderPasses();
      this.setScene();
    }
  }
  /**
   * Called when the {@link GPUDeviceManager#device | device} is lost.
   * Force all our scene objects to lose context.
   */
  loseContext() {
    this.renderedObjects.forEach((sceneObject) => sceneObject.loseContext());
  }
  /**
   * Called when the {@link GPUDeviceManager#device | device} should be restored.
   * Configure the context again, resize the {@link RenderTarget | render targets} and {@link RenderTexture | render textures}, restore our {@link renderedObjects | rendered objects} context.
   * @async
   */
  restoreContext() {
    this.configureContext();
    this.renderTextures.forEach((renderTexture) => {
      renderTexture.forceResize({
        width: Math.floor(this.pixelRatioBoundingRect.width),
        height: Math.floor(this.pixelRatioBoundingRect.height),
        depth: 1
      });
    });
    this.renderPass?.resize();
    this.postProcessingPass?.resize();
    this.renderTargets.forEach((renderTarget) => renderTarget.resize(this.pixelRatioBoundingRect));
    this.renderedObjects.forEach((sceneObject) => sceneObject.restoreContext());
  }
  /* PIPELINES, SCENE & MAIN RENDER PASS */
  /**
   * Set our {@link renderPass | main render pass} that will be used to render the result of our draw commands back to the screen
   */
  setMainRenderPasses() {
    this.renderPass = new RenderPass(this, {
      label: "Main render pass",
      targetFormat: this.options.preferredFormat,
      ...this.options.renderPass
    });
    this.postProcessingPass = new RenderPass(this, {
      label: "Post processing render pass",
      targetFormat: this.options.preferredFormat,
      depth: false,
      sampleCount: this.options.renderPass.sampleCount
      // TODO?
    });
  }
  /**
   * Set our {@link scene}
   */
  setScene() {
    this.scene = new Scene({ renderer: this });
  }
  /* BUFFERS & BINDINGS */
  /**
   * Create a {@link GPUBuffer}
   * @param bufferDescriptor - {@link GPUBufferDescriptor | GPU buffer descriptor}
   * @returns - newly created {@link GPUBuffer}
   */
  createBuffer(bufferDescriptor) {
    const buffer = this.device?.createBuffer(bufferDescriptor);
    this.deviceManager.addBuffer(buffer);
    return buffer;
  }
  /**
   * Remove a {@link GPUBuffer} from our {@link GPUDeviceManager#buffers | GPU buffers array}
   * @param buffer - {@link GPUBuffer} to remove
   * @param [originalLabel] - original {@link GPUBuffer} label in case the buffer has been swapped and its label has changed
   */
  removeBuffer(buffer, originalLabel) {
    this.deviceManager.removeBuffer(buffer, originalLabel);
  }
  /**
   * Write to a {@link GPUBuffer}
   * @param buffer - {@link GPUBuffer} to write to
   * @param bufferOffset - {@link GPUSize64 | buffer offset}
   * @param data - {@link BufferSource | data} to write
   */
  queueWriteBuffer(buffer, bufferOffset, data) {
    this.device?.queue.writeBuffer(buffer, bufferOffset, data);
  }
  /**
   * Copy a source {@link GPUBuffer} into a destination {@link GPUBuffer}
   * @param parameters - parameters used to realize the copy
   * @param parameters.srcBuffer - source {@link GPUBuffer}
   * @param [parameters.dstBuffer] - destination {@link GPUBuffer}. Will create a new one if none provided.
   * @param [parameters.commandEncoder] - {@link GPUCommandEncoder} to use for the copy. Will create a new one and submit the command buffer if none provided.
   * @returns - destination {@link GPUBuffer} after copy
   */
  copyBufferToBuffer({
    srcBuffer,
    dstBuffer,
    commandEncoder
  }) {
    if (!srcBuffer) {
      throwWarning(`${this.type}: cannot copy to buffer because the source buffer has not been provided`);
      return null;
    }
    if (!dstBuffer) {
      dstBuffer = this.createBuffer({
        label: this.type + ": destination copy buffer from: " + srcBuffer.label,
        size: srcBuffer.size,
        usage: GPUBufferUsage.MAP_READ | GPUBufferUsage.COPY_DST
      });
    }
    if (srcBuffer.mapState !== "unmapped") {
      throwWarning(`${this.type}: Cannot copy from ${srcBuffer} because it is currently mapped`);
      return;
    }
    if (dstBuffer.mapState !== "unmapped") {
      throwWarning(`${this.type}: Cannot copy from ${dstBuffer} because it is currently mapped`);
      return;
    }
    const hasCommandEncoder = !!commandEncoder;
    if (!hasCommandEncoder) {
      commandEncoder = this.device?.createCommandEncoder({ label: "Copy buffer command encoder" });
      !this.production && commandEncoder.pushDebugGroup("Copy buffer command encoder");
    }
    commandEncoder.copyBufferToBuffer(srcBuffer, 0, dstBuffer, 0, dstBuffer.size);
    if (!hasCommandEncoder) {
      !this.production && commandEncoder.popDebugGroup();
      const commandBuffer = commandEncoder.finish();
      this.device?.queue.submit([commandBuffer]);
    }
    return dstBuffer;
  }
  /* BIND GROUPS & LAYOUTS */
  /**
   * Get all created {@link AllowedBindGroups | bind group} tracked by our {@link GPUDeviceManager}
   * @readonly
   */
  get bindGroups() {
    return this.deviceManager.bindGroups;
  }
  /**
   * Add a {@link AllowedBindGroups | bind group} to our {@link GPUDeviceManager#bindGroups | bind groups array}
   * @param bindGroup - {@link AllowedBindGroups | bind group} to add
   */
  addBindGroup(bindGroup) {
    this.deviceManager.addBindGroup(bindGroup);
  }
  /**
   * Remove a {@link AllowedBindGroups | bind group} from our {@link GPUDeviceManager#bindGroups | bind groups array}
   * @param bindGroup - {@link AllowedBindGroups | bind group} to remove
   */
  removeBindGroup(bindGroup) {
    this.deviceManager.removeBindGroup(bindGroup);
  }
  /**
   * Create a {@link GPUBindGroupLayout}
   * @param bindGroupLayoutDescriptor - {@link GPUBindGroupLayoutDescriptor | GPU bind group layout descriptor}
   * @returns - newly created {@link GPUBindGroupLayout}
   */
  createBindGroupLayout(bindGroupLayoutDescriptor) {
    return this.device?.createBindGroupLayout(bindGroupLayoutDescriptor);
  }
  /**
   * Create a {@link GPUBindGroup}
   * @param bindGroupDescriptor - {@link GPUBindGroupDescriptor | GPU bind group descriptor}
   * @returns - newly created {@link GPUBindGroup}
   */
  createBindGroup(bindGroupDescriptor) {
    return this.device?.createBindGroup(bindGroupDescriptor);
  }
  /* SHADERS & PIPELINES */
  /**
   * Create a {@link GPUShaderModule}
   * @param shaderModuleDescriptor - {@link shaderModuleDescriptor | shader module descriptor}
   * @returns - newly created {@link GPUShaderModule}
   */
  createShaderModule(shaderModuleDescriptor) {
    return this.device?.createShaderModule(shaderModuleDescriptor);
  }
  /**
   * Create a {@link GPUPipelineLayout}
   * @param pipelineLayoutDescriptor - {@link GPUPipelineLayoutDescriptor | GPU pipeline layout descriptor}
   * @returns - newly created {@link GPUPipelineLayout}
   */
  createPipelineLayout(pipelineLayoutDescriptor) {
    return this.device?.createPipelineLayout(pipelineLayoutDescriptor);
  }
  /**
   * Create a {@link GPURenderPipeline}
   * @param pipelineDescriptor - {@link GPURenderPipelineDescriptor | GPU render pipeline descriptor}
   * @returns - newly created {@link GPURenderPipeline}
   */
  createRenderPipeline(pipelineDescriptor) {
    return this.device?.createRenderPipeline(pipelineDescriptor);
  }
  /**
   * Asynchronously create a {@link GPURenderPipeline}
   * @async
   * @param pipelineDescriptor - {@link GPURenderPipelineDescriptor | GPU render pipeline descriptor}
   * @returns - newly created {@link GPURenderPipeline}
   */
  async createRenderPipelineAsync(pipelineDescriptor) {
    return await this.device?.createRenderPipelineAsync(pipelineDescriptor);
  }
  /**
   * Create a {@link GPUComputePipeline}
   * @param pipelineDescriptor - {@link GPUComputePipelineDescriptor | GPU compute pipeline descriptor}
   * @returns - newly created {@link GPUComputePipeline}
   */
  createComputePipeline(pipelineDescriptor) {
    return this.device?.createComputePipeline(pipelineDescriptor);
  }
  /**
   * Asynchronously create a {@link GPUComputePipeline}
   * @async
   * @param pipelineDescriptor - {@link GPUComputePipelineDescriptor | GPU compute pipeline descriptor}
   * @returns - newly created {@link GPUComputePipeline}
   */
  async createComputePipelineAsync(pipelineDescriptor) {
    return await this.device?.createComputePipelineAsync(pipelineDescriptor);
  }
  /* TEXTURES */
  /**
   * Get all created {@link Texture} tracked by our {@link GPUDeviceManager}
   * @readonly
   */
  get textures() {
    return this.deviceManager.textures;
  }
  /**
   * Add a {@link Texture} to our {@link GPUDeviceManager#textures | textures array}
   * @param texture - {@link Texture} to add
   */
  addTexture(texture) {
    this.deviceManager.addTexture(texture);
  }
  /**
   * Remove a {@link Texture} from our {@link GPUDeviceManager#textures | textures array}
   * @param texture - {@link Texture} to remove
   */
  removeTexture(texture) {
    this.deviceManager.removeTexture(texture);
  }
  /**
   * Add a {@link RenderTexture} to our {@link renderTextures} array
   * @param texture - {@link RenderTexture} to add
   */
  addRenderTexture(texture) {
    this.renderTextures.push(texture);
  }
  /**
   * Remove a {@link RenderTexture} from our {@link renderTextures} array
   * @param texture - {@link RenderTexture} to remove
   */
  removeRenderTexture(texture) {
    this.renderTextures = this.renderTextures.filter((t) => t.uuid !== texture.uuid);
  }
  /**
   * Create a {@link GPUTexture}
   * @param textureDescriptor - {@link GPUTextureDescriptor | GPU texture descriptor}
   * @returns - newly created {@link GPUTexture}
   */
  createTexture(textureDescriptor) {
    return this.device?.createTexture(textureDescriptor);
  }
  /**
   * Upload a {@link Texture#texture | texture} to the GPU
   * @param texture - {@link Texture} class object with the {@link Texture#texture | texture} to upload
   */
  uploadTexture(texture) {
    this.deviceManager.uploadTexture(texture);
  }
  /**
   * Import a {@link GPUExternalTexture}
   * @param video - {@link HTMLVideoElement} source
   * @returns - {@link GPUExternalTexture}
   */
  importExternalTexture(video) {
    return this.device?.importExternalTexture({ source: video });
  }
  /**
   * Check if a {@link Sampler} has already been created with the same {@link Sampler#options | parameters}.
   * Use it if found, else create a new one and add it to the {@link GPUDeviceManager#samplers | samplers array}.
   * @param sampler - {@link Sampler} to create
   * @returns - the {@link GPUSampler}
   */
  createSampler(sampler) {
    const existingSampler = this.samplers.find((existingSampler2) => {
      return JSON.stringify(existingSampler2.options) === JSON.stringify(sampler.options) && existingSampler2.sampler;
    });
    if (existingSampler) {
      return existingSampler.sampler;
    } else {
      const { type, ...samplerOptions } = sampler.options;
      const gpuSampler = this.device?.createSampler({
        label: sampler.label,
        ...samplerOptions
      });
      this.deviceManager.addSampler(sampler);
      return gpuSampler;
    }
  }
  /**
   * Remove a {@link Sampler} from our {@link GPUDeviceManager#samplers | samplers array}
   * @param sampler - {@link Sampler} to remove
   */
  removeSampler(sampler) {
    this.deviceManager.removeSampler(sampler);
  }
  /* OBJECTS & TASKS */
  /**
   * Set different tasks queue managers to execute callbacks at different phases of our render call:
   * - {@link onBeforeCommandEncoderCreation}: callbacks executed before the creation of the command encoder
   * - {@link onBeforeRenderScene}: callbacks executed after the creation of the command encoder and before rendering the {@link Scene}
   * - {@link onAfterRenderScene}: callbacks executed after the creation of the command encoder and after rendering the {@link Scene}
   * - {@link onAfterCommandEncoderSubmission}: callbacks executed after the submission of the command encoder
   */
  setTasksQueues() {
    this.onBeforeCommandEncoderCreation = new TasksQueueManager();
    this.onBeforeRenderScene = new TasksQueueManager();
    this.onAfterRenderScene = new TasksQueueManager();
    this.onAfterCommandEncoderSubmission = new TasksQueueManager();
  }
  /**
   * Set all objects arrays that we'll keep track of
   */
  setRendererObjects() {
    this.computePasses = [];
    this.pingPongPlanes = [];
    this.shaderPasses = [];
    this.renderTargets = [];
    this.meshes = [];
    this.renderTextures = [];
  }
  /**
   * Get all this {@link GPURenderer} rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes)
   * @readonly
   */
  get renderedObjects() {
    return [...this.computePasses, ...this.meshes, ...this.shaderPasses, ...this.pingPongPlanes];
  }
  /**
   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link ComputePass | compute passes}) using a given {@link AllowedBindGroups | bind group}.
   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.
   * @param bindGroup - {@link AllowedBindGroups | bind group} to check
   */
  getObjectsByBindGroup(bindGroup) {
    return this.deviceRenderedObjects.filter((object) => {
      return [
        ...object.material.bindGroups,
        ...object.material.inputsBindGroups,
        ...object.material.clonedBindGroups
      ].some((bG) => bG.uuid === bindGroup.uuid);
    });
  }
  /**
   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link ComputePass | compute passes}) using a given {@link Texture} or {@link RenderTexture}.
   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.
   * @param texture - {@link Texture} or {@link RenderTexture} to check
   */
  getObjectsByTexture(texture) {
    return this.deviceRenderedObjects.filter((object) => {
      return [...object.material.textures, ...object.material.renderTextures].some((t) => t.uuid === texture.uuid);
    });
  }
  /* EVENTS */
  /**
   * Assign a callback function to _onBeforeRenderCallback
   * @param callback - callback to run just before the {@link render} method will be executed
   * @returns - our {@link GPURenderer}
   */
  onBeforeRender(callback) {
    if (callback) {
      this._onBeforeRenderCallback = callback;
    }
    return this;
  }
  /**
   * Assign a callback function to _onAfterRenderCallback
   * @param callback - callback to run just after the {@link render} method has been executed
   * @returns - our {@link GPURenderer}
   */
  onAfterRender(callback) {
    if (callback) {
      this._onAfterRenderCallback = callback;
    }
    return this;
  }
  /**
   * Assign a callback function to _onAfterResizeCallback
   * @param callback - callback to run just after the {@link GPURenderer} has been resized
   * @returns - our {@link GPURenderer}
   */
  onAfterResize(callback) {
    if (callback) {
      this._onAfterResizeCallback = callback;
    }
    return this;
  }
  /* RENDER */
  /**
   * Set the current {@link RenderPass#descriptor | render pass descriptor} texture {@link GPURenderPassColorAttachment#view | view} and {@link GPURenderPassColorAttachment#resolveTarget | resolveTarget} (depending on whether we're using multisampling)
   * @param renderPass - current {@link RenderPass}
   * @param renderTexture - {@link GPUTexture} to use, or the {@link context} {@link GPUTexture | current texture} if null
   * @returns - the {@link GPUTexture | current render texture}
   */
  setRenderPassCurrentTexture(renderPass, renderTexture = null) {
    if (!renderTexture) {
      renderTexture = this.context.getCurrentTexture();
      renderTexture.label = `${this.type} context current texture`;
    }
    if (renderPass.options.sampleCount > 1) {
      renderPass.descriptor.colorAttachments[0].view = renderPass.viewTexture.texture.createView({
        label: renderPass.viewTexture.options.label + " view"
      });
      renderPass.descriptor.colorAttachments[0].resolveTarget = renderTexture.createView({
        label: renderTexture.label + " resolve target view"
      });
    } else {
      renderPass.descriptor.colorAttachments[0].view = renderTexture.createView({
        label: renderTexture.label + " view"
      });
    }
    return renderTexture;
  }
  /**
   * Render a single {@link ComputePass}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   * @param computePass - {@link ComputePass}
   */
  renderSingleComputePass(commandEncoder, computePass) {
    const pass = commandEncoder.beginComputePass();
    computePass.render(pass);
    pass.end();
    computePass.copyBufferToResult(commandEncoder);
  }
  /**
   * Render a single {@link RenderedMesh | Mesh}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   * @param mesh - {@link RenderedMesh | Mesh} to render
   */
  renderSingleMesh(commandEncoder, mesh) {
    const pass = commandEncoder.beginRenderPass(this.renderPass.descriptor);
    mesh.render(pass);
    pass.end();
  }
  /**
   * Render an array of objects (either {@link RenderedMesh | Meshes} or {@link ComputePass}) once. This method won't call any of the renderer render hooks like {@link onBeforeRender}, {@link onAfterRender}
   * @param objects - Array of {@link RenderedMesh | Meshes} or {@link ComputePass} to render
   */
  renderOnce(objects) {
    const commandEncoder = this.device?.createCommandEncoder({
      label: "Render once command encoder"
    });
    !this.production && commandEncoder.pushDebugGroup("Render once command encoder");
    this.pipelineManager.resetCurrentPipeline();
    objects.forEach((object) => {
      if (object instanceof ComputePass) {
        this.renderSingleComputePass(commandEncoder, object);
      } else {
        this.renderSingleMesh(commandEncoder, object);
      }
    });
    !this.production && commandEncoder.popDebugGroup();
    const commandBuffer = commandEncoder.finish();
    this.device?.queue.submit([commandBuffer]);
    this.pipelineManager.resetCurrentPipeline();
  }
  /**
   * Force to clear a {@link GPURenderer} content to its {@link RenderPass#options.clearValue | clear value} by rendering and empty pass.
   * @param commandEncoder
   */
  forceClear(commandEncoder) {
    const hasCommandEncoder = !!commandEncoder;
    if (!hasCommandEncoder) {
      commandEncoder = this.device?.createCommandEncoder({ label: "Force clear command encoder" });
      !this.production && commandEncoder.pushDebugGroup("Force clear command encoder");
    }
    this.setRenderPassCurrentTexture(this.renderPass);
    const pass = commandEncoder.beginRenderPass(this.renderPass.descriptor);
    pass.end();
    if (!hasCommandEncoder) {
      !this.production && commandEncoder.popDebugGroup();
      const commandBuffer = commandEncoder.finish();
      this.device?.queue.submit([commandBuffer]);
    }
  }
  /**
   * Called by the {@link GPUDeviceManager#render | GPUDeviceManager render method} before the {@link GPUCommandEncoder} has been created
   */
  onBeforeCommandEncoder() {
    if (!this.ready)
      return;
    this.onBeforeCommandEncoderCreation.execute();
  }
  /**
   * Called by the {@link GPUDeviceManager#render | GPUDeviceManager render method} after the {@link GPUCommandEncoder} has been created.
   */
  onAfterCommandEncoder() {
    if (!this.ready)
      return;
    this.onAfterCommandEncoderSubmission.execute();
  }
  /**
   * Called at each draw call to render our scene and its content
   * @param commandEncoder - current {@link GPUCommandEncoder}
   */
  render(commandEncoder) {
    if (!this.ready)
      return;
    this._onBeforeRenderCallback && this._onBeforeRenderCallback(commandEncoder);
    this.onBeforeRenderScene.execute(commandEncoder);
    this.scene?.render(commandEncoder);
    this._onAfterRenderCallback && this._onAfterRenderCallback(commandEncoder);
    this.onAfterRenderScene.execute(commandEncoder);
  }
  /**
   * Destroy our {@link GPURenderer} and everything that needs to be destroyed as well
   */
  destroy() {
    this.domElement?.destroy();
    this.renderPass?.destroy();
    this.postProcessingPass?.destroy();
    this.renderTargets.forEach((renderTarget) => renderTarget.destroy());
    this.renderedObjects.forEach((sceneObject) => sceneObject.remove());
    this.renderTextures.forEach((texture) => texture.destroy());
    this.context?.unconfigure();
  }
}

class GPUCameraRenderer extends GPURenderer {
  /**
   * GPUCameraRenderer constructor
   * @param parameters - {@link GPUCameraRendererParams | parameters} used to create this {@link GPUCameraRenderer}
   */
  constructor({
    deviceManager,
    container,
    pixelRatio = 1,
    preferredFormat,
    alphaMode = "premultiplied",
    multisampled = true,
    renderPass,
    camera = {}
  }) {
    super({
      deviceManager,
      container,
      pixelRatio,
      preferredFormat,
      alphaMode,
      multisampled,
      renderPass
    });
    this.type = "GPUCameraRenderer";
    camera = { ...{ fov: 50, near: 0.01, far: 50 }, ...camera };
    this.options = {
      ...this.options,
      camera
    };
    this.setCamera(camera);
    this.setCameraBindGroupAndBinding();
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} is lost.
   * Reset all our samplers, force all our scene objects and camera bind group to lose context.
   */
  loseContext() {
    super.loseContext();
    this.cameraBindGroup.loseContext();
  }
  /**
   * Called when the {@link core/renderers/GPUDeviceManager.GPUDeviceManager#device | device} should be restored.
   * Configure the context again, resize the {@link core/renderPasses/RenderTarget.RenderTarget | render targets} and {@link core/textures/RenderTexture.RenderTexture | render textures}, restore our {@link renderedObjects | rendered objects} context, re-write our {@link cameraBufferBinding | camera buffer binding}.
   * @async
   */
  async restoreContext() {
    this.cameraBufferBinding.shouldUpdate = true;
    return super.restoreContext();
  }
  /**
   * Set the {@link camera}
   * @param cameraParameters - {@link CameraBasePerspectiveOptions | parameters} used to create the {@link camera}
   */
  setCamera(cameraParameters) {
    const width = this.boundingRect ? this.boundingRect.width : 1;
    const height = this.boundingRect ? this.boundingRect.height : 1;
    this.camera = new Camera({
      fov: cameraParameters.fov,
      near: cameraParameters.near,
      far: cameraParameters.far,
      width,
      height,
      pixelRatio: this.pixelRatio,
      onMatricesChanged: () => {
        this.onCameraMatricesChanged();
      }
    });
  }
  /**
   * Update the {@link ProjectedMesh | projected meshes} sizes and positions when the {@link camera} {@link Camera#position | position} changes
   */
  onCameraMatricesChanged() {
    this.updateCameraBindings();
    this.meshes.forEach((mesh) => {
      if ("modelViewMatrix" in mesh) {
        mesh.shouldUpdateMatrixStack();
      }
    });
  }
  /**
   * Set the {@link cameraBufferBinding | camera buffer binding} and {@link cameraBindGroup | camera bind group}
   */
  setCameraBindGroupAndBinding() {
    this.cameraBufferBinding = new BufferBinding({
      label: "Camera",
      name: "camera",
      visibility: "vertex",
      struct: {
        model: {
          // camera model matrix
          name: "model",
          type: "mat4x4f",
          value: this.camera.modelMatrix,
          onBeforeUpdate: () => {
            this.cameraBufferBinding.inputs.model.value = this.camera.modelMatrix;
          }
        },
        view: {
          // camera view matrix
          name: "view",
          type: "mat4x4f",
          value: this.camera.viewMatrix,
          onBeforeUpdate: () => {
            this.cameraBufferBinding.inputs.view.value = this.camera.viewMatrix;
          }
        },
        projection: {
          // camera projection matrix
          name: "projection",
          type: "mat4x4f",
          value: this.camera.projectionMatrix,
          onBeforeUpdate: () => {
            this.cameraBufferBinding.inputs.projection.value = this.camera.projectionMatrix;
          }
        }
      }
    });
    this.cameraBindGroup = new BindGroup(this, {
      label: "Camera Uniform bind group",
      bindings: [this.cameraBufferBinding]
    });
  }
  /**
   * Create the {@link cameraBindGroup | camera bind group} buffers
   */
  setCameraBindGroup() {
    if (this.cameraBindGroup && this.cameraBindGroup.shouldCreateBindGroup) {
      this.cameraBindGroup.setIndex(0);
      this.cameraBindGroup.createBindGroup();
    }
  }
  /**
   * Tell our {@link cameraBufferBinding | camera buffer binding} that we should update its struct
   */
  updateCameraBindings() {
    this.cameraBufferBinding?.shouldUpdateBinding("model");
    this.cameraBufferBinding?.shouldUpdateBinding("view");
    this.cameraBufferBinding?.shouldUpdateBinding("projection");
  }
  /**
   * Get all objects ({@link RenderedMesh | rendered meshes} or {@link core/computePasses/ComputePass.ComputePass | compute passes}) using a given {@link AllowedBindGroups | bind group}, including {@link cameraBindGroup | camera bind group}.
   * Useful to know if a resource is used by multiple objects and if it is safe to destroy it or not.
   * @param bindGroup - {@link AllowedBindGroups | bind group} to check
   */
  getObjectsByBindGroup(bindGroup) {
    return this.deviceRenderedObjects.filter((object) => {
      return [
        ...object.material.bindGroups,
        ...object.material.inputsBindGroups,
        ...object.material.clonedBindGroups,
        this.cameraBindGroup
      ].some((bG) => bG.uuid === bindGroup.uuid);
    });
  }
  /**
   * Set our {@link camera} perspective matrix new parameters (fov, near plane and far plane)
   * @param parameters - {@link CameraBasePerspectiveOptions | parameters} to use for the perspective
   */
  setPerspective({ fov, near, far } = {}) {
    this.camera?.setPerspective({
      fov,
      near,
      far,
      width: this.boundingRect.width,
      height: this.boundingRect.height,
      pixelRatio: this.pixelRatio
    });
  }
  /**
   * Set our {@link camera} {@link Camera#position | position}
   * @param position - new {@link Camera#position | position}
   */
  setCameraPosition(position = new Vec3(0, 0, 1)) {
    this.camera.position.copy(position);
  }
  /**
   * Call our {@link GPURenderer#onResize | GPURenderer onResize method} and resize our {@link camera} as well
   */
  onResize() {
    super.onResize();
    this.setPerspective();
    this.updateCameraBindings();
  }
  /* RENDER */
  /**
   * Update the camera model matrix, check if the {@link cameraBindGroup | camera bind group} should be created, create it if needed and then update it
   */
  updateCamera() {
    this.camera?.updateMatrixStack();
    this.setCameraBindGroup();
    this.cameraBindGroup?.update();
  }
  /**
   * Render a single {@link RenderedMesh | mesh} (binds the {@link cameraBindGroup | camera bind group} if needed)
   * @param commandEncoder - current {@link GPUCommandEncoder}
   * @param mesh - {@link RenderedMesh | mesh} to render
   */
  renderSingleMesh(commandEncoder, mesh) {
    const pass = commandEncoder.beginRenderPass(this.renderPass.descriptor);
    if (mesh.material.options.rendering.useProjection) {
      pass.setBindGroup(this.cameraBindGroup.index, this.cameraBindGroup.bindGroup);
    }
    mesh.render(pass);
    pass.end();
  }
  /**
   * {@link updateCamera | Update the camera} and then call our {@link GPURenderer#render | GPURenderer render method}
   * @param commandEncoder - current {@link GPUCommandEncoder}
   */
  render(commandEncoder) {
    if (!this.ready)
      return;
    this.updateCamera();
    super.render(commandEncoder);
  }
  /**
   * Destroy our {@link GPUCameraRenderer}
   */
  destroy() {
    this.cameraBindGroup?.destroy();
    super.destroy();
  }
}

class GPUDeviceManager {
  /**
   * GPUDeviceManager constructor
   * @param parameters - {@link GPUDeviceManagerParams | parameters} used to create this {@link GPUDeviceManager}
   */
  constructor({
    label,
    production = false,
    onError = () => {
    },
    onDeviceLost = (info) => {
    }
  }) {
    this.index = 0;
    this.label = label ?? "GPUDeviceManager instance";
    this.production = production;
    this.ready = false;
    this.onError = onError;
    this.onDeviceLost = onDeviceLost;
    this.gpu = navigator.gpu;
    this.setPipelineManager();
    this.setDeviceObjects();
  }
  /**
   * Set our {@link adapter} and {@link device} if possible
   */
  async setAdapterAndDevice() {
    await this.setAdapter();
    await this.setDevice();
  }
  /**
   * Set up our {@link adapter} and {@link device} and all the already created {@link renderers} contexts
   */
  async init() {
    await this.setAdapterAndDevice();
    if (this.device) {
      this.renderers.forEach((renderer) => {
        if (!renderer.context) {
          renderer.setContext();
        }
      });
    }
  }
  /**
   * Set our {@link adapter} if possible.
   * The adapter represents a specific GPU. Some devices have multiple GPUs.
   * @async
   */
  async setAdapter() {
    if (!this.gpu) {
      this.onError();
      throwError("GPURenderer: WebGPU is not supported on your browser/OS. No 'gpu' object in 'navigator'.");
    }
    try {
      this.adapter = await this.gpu?.requestAdapter();
      this.adapter?.requestAdapterInfo().then((infos) => {
        this.adapterInfos = infos;
      });
    } catch (error) {
      this.onError();
      throwError("GPUDeviceManager: WebGPU is not supported on your browser/OS. 'requestAdapter' failed.");
    }
  }
  /**
   * Set our {@link device}
   * @async
   */
  async setDevice() {
    try {
      this.device = await this.adapter?.requestDevice({
        label: this.label + " " + this.index
      });
      if (this.device) {
        this.ready = true;
        this.index++;
      }
    } catch (error) {
      this.onError();
      throwError(`${this.label}: WebGPU is not supported on your browser/OS. 'requestDevice' failed: ${error}`);
    }
    this.device?.lost.then((info) => {
      throwWarning(`${this.label}: WebGPU device was lost: ${info.message}`);
      this.loseDevice();
      if (info.reason !== "destroyed") {
        this.onDeviceLost(info);
      }
    });
  }
  /**
   * Set our {@link pipelineManager | pipeline manager}
   */
  setPipelineManager() {
    this.pipelineManager = new PipelineManager();
  }
  /**
   * Called when the {@link device} is lost.
   * Reset all our renderers
   */
  loseDevice() {
    this.ready = false;
    this.samplers.forEach((sampler) => sampler.sampler = null);
    this.renderers.forEach((renderer) => renderer.loseContext());
    this.buffers = [];
  }
  /**
   * Called when the {@link device} should be restored.
   * Restore all our renderers
   */
  async restoreDevice() {
    await this.setAdapterAndDevice();
    if (this.device) {
      this.samplers.forEach((sampler) => {
        const { type, ...samplerOptions } = sampler.options;
        sampler.sampler = this.device.createSampler({
          label: sampler.label,
          ...samplerOptions
        });
      });
      this.renderers.forEach((renderer) => renderer.restoreContext());
    }
  }
  /**
   * Set all objects arrays that we'll keep track of
   */
  setDeviceObjects() {
    this.renderers = [];
    this.bindGroups = [];
    this.buffers = [];
    this.samplers = [];
    this.textures = [];
    this.texturesQueue = [];
  }
  /**
   * Add a {@link Renderer} to our {@link renderers} array
   * @param renderer - {@link Renderer} to add
   */
  addRenderer(renderer) {
    this.renderers.push(renderer);
  }
  /**
   * Remove a {@link Renderer} from our {@link renderers} array
   * @param renderer - {@link Renderer} to remove
   */
  removeRenderer(renderer) {
    this.renderers = this.renderers.filter((r) => r.uuid !== renderer.uuid);
  }
  /**
   * Get all the rendered objects (i.e. compute passes, meshes, ping pong planes and shader passes) created by this {@link GPUDeviceManager}
   * @readonly
   */
  get deviceRenderedObjects() {
    return this.renderers.map((renderer) => renderer.renderedObjects).flat();
  }
  /**
   * Add a {@link AllowedBindGroups | bind group} to our {@link bindGroups | bind groups array}
   * @param bindGroup - {@link AllowedBindGroups | bind group} to add
   */
  addBindGroup(bindGroup) {
    if (!this.bindGroups.find((bG) => bG.uuid === bindGroup.uuid)) {
      this.bindGroups.push(bindGroup);
    }
  }
  /**
   * Remove a {@link AllowedBindGroups | bind group} from our {@link bindGroups | bind groups array}
   * @param bindGroup - {@link AllowedBindGroups | bind group} to remove
   */
  removeBindGroup(bindGroup) {
    this.bindGroups = this.bindGroups.filter((bG) => bG.uuid !== bindGroup.uuid);
  }
  /**
   * Add a {@link GPUBuffer} to our our {@link buffers} array
   * @param buffer - {@link GPUBuffer} to add
   */
  addBuffer(buffer) {
    this.buffers.push(buffer);
  }
  /**
   * Remove a {@link GPUBuffer} from our {@link buffers} array
   * @param buffer - {@link GPUBuffer} to remove
   * @param [originalLabel] - original {@link GPUBuffer} label in case the buffer has been swapped and its label has changed
   */
  removeBuffer(buffer, originalLabel) {
    if (buffer) {
      this.buffers = this.buffers.filter((b) => {
        return !(b.label === (originalLabel ?? buffer.label) && b.size === buffer.size);
      });
    }
  }
  /**
   * Add a {@link Sampler} to our {@link samplers} array
   * @param sampler - {@link Sampler} to add
   */
  addSampler(sampler) {
    this.samplers.push(sampler);
  }
  /**
   * Remove a {@link Sampler} from our {@link samplers} array
   * @param sampler - {@link Sampler} to remove
   */
  removeSampler(sampler) {
    this.samplers = this.samplers.filter((s) => s.uuid !== sampler.uuid);
  }
  /**
   * Add a {@link Texture} to our {@link textures} array
   * @param texture - {@link Texture} to add
   */
  addTexture(texture) {
    this.textures.push(texture);
  }
  /**
   * Upload a {@link Texture#texture | texture} to the GPU
   * @param texture - {@link Texture} class object with the {@link Texture#texture | texture} to upload
   */
  uploadTexture(texture) {
    if (texture.source) {
      try {
        this.device?.queue.copyExternalImageToTexture(
          {
            source: texture.source,
            flipY: texture.options.flipY
          },
          { texture: texture.texture, premultipliedAlpha: texture.options.premultipliedAlpha },
          { width: texture.size.width, height: texture.size.height }
        );
        if (texture.texture.mipLevelCount > 1) {
          generateMips(this.device, texture.texture);
        }
        this.texturesQueue.push(texture);
      } catch ({ message }) {
        throwError(`GPUDeviceManager: could not upload texture: ${texture.options.name} because: ${message}`);
      }
    } else {
      this.device?.queue.writeTexture(
        { texture: texture.texture },
        new Uint8Array(texture.options.placeholderColor),
        { bytesPerRow: texture.size.width * 4 },
        { width: texture.size.width, height: texture.size.height }
      );
    }
  }
  /**
   * Remove a {@link Texture} from our {@link textures} array
   * @param texture - {@link Texture} to remove
   */
  removeTexture(texture) {
    this.textures = this.textures.filter((t) => t.uuid !== texture.uuid);
  }
  /**
   * Render everything:
   * - call all our {@link renderers} {@link core/renderers/GPURenderer.GPURenderer#onBeforeCommandEncoder | onBeforeCommandEncoder} callbacks
   * - create a {@link GPUCommandEncoder}
   * - render all our {@link renderers}
   * - submit our {@link GPUCommandBuffer}
   * - upload {@link Texture#texture | textures} that do not have a parentMesh
   * - empty our {@link texturesQueue} array
   * - call all our {@link renderers} {@link core/renderers/GPURenderer.GPURenderer#onAfterCommandEncoder | onAfterCommandEncoder} callbacks
   */
  render() {
    if (!this.ready)
      return;
    this.renderers.forEach((renderer) => renderer.onBeforeCommandEncoder());
    const commandEncoder = this.device?.createCommandEncoder({ label: this.label + " command encoder" });
    !this.production && commandEncoder.pushDebugGroup(this.label + " command encoder: main render loop");
    this.renderers.forEach((renderer) => renderer.render(commandEncoder));
    !this.production && commandEncoder.popDebugGroup();
    const commandBuffer = commandEncoder.finish();
    this.device?.queue.submit([commandBuffer]);
    this.textures.filter((texture) => !texture.parentMesh && texture.sourceLoaded && !texture.sourceUploaded).forEach((texture) => this.uploadTexture(texture));
    this.texturesQueue.forEach((texture) => {
      texture.sourceUploaded = true;
    });
    this.texturesQueue = [];
    this.renderers.forEach((renderer) => renderer.onAfterCommandEncoder());
  }
  /**
   * Destroy the {@link GPUDeviceManager} and its {@link renderers}
   */
  destroy() {
    this.device?.destroy();
    this.device = null;
    this.renderers.forEach((renderer) => renderer.destroy());
    this.bindGroups.forEach((bindGroup) => bindGroup.destroy());
    this.buffers.forEach((buffer) => buffer?.destroy());
    this.textures.forEach((texture) => texture.destroy());
    this.setDeviceObjects();
  }
}

class GPUCurtainsRenderer extends GPUCameraRenderer {
  /**
   * GPUCurtainsRenderer constructor
   * @param parameters - {@link GPUCameraRendererParams | parameters} used to create this {@link GPUCurtainsRenderer}
   */
  constructor({
    deviceManager,
    container,
    pixelRatio = 1,
    preferredFormat,
    alphaMode = "premultiplied",
    multisampled = true,
    renderPass,
    camera
  }) {
    super({
      deviceManager,
      container,
      pixelRatio,
      preferredFormat,
      alphaMode,
      renderPass,
      multisampled,
      camera
    });
    this.type = "GPUCurtainsRenderer";
  }
  /**
   * Add the {@link GPUCurtainsRenderer#domMeshes | domMeshes} to our tracked elements
   */
  setRendererObjects() {
    super.setRendererObjects();
    this.domMeshes = [];
  }
}

class ScrollManager {
  /**
   * ScrollManager constructor
   * @param parameters - {@link ScrollManagerParams | parameters} used to create this {@link ScrollManager}
   */
  constructor({
    scroll = { x: 0, y: 0 },
    delta = { x: 0, y: 0 },
    shouldWatch = true,
    onScroll = (delta2 = { x: 0, y: 0 }) => {
    }
  } = {}) {
    this.scroll = scroll;
    this.delta = delta;
    this.shouldWatch = shouldWatch;
    this.onScroll = onScroll;
    if (this.shouldWatch) {
      window.addEventListener("scroll", this.setScroll.bind(this), { passive: true });
    }
  }
  /**
   * Called by the scroll event listener
   */
  setScroll() {
    this.updateScrollValues({ x: window.pageXOffset, y: window.pageYOffset });
  }
  /**
   * Updates the scroll manager X and Y scroll values as well as last X and Y deltas
   * Internally called by the scroll event listener
   * Could be called externally as well if the user wants to handle the scroll by himself
   * @param parameters - {@link core/DOM/DOMElement.DOMPosition | scroll values}
   */
  updateScrollValues({ x, y }) {
    const lastScroll = this.scroll;
    this.scroll = { x, y };
    this.delta = {
      x: lastScroll.x - this.scroll.x,
      y: lastScroll.y - this.scroll.y
    };
    if (this.onScroll) {
      this.onScroll(this.delta);
    }
  }
  /**
   * Destroy our scroll manager (just remove our event listner if it had been added previously)
   */
  destroy() {
    if (this.shouldWatch) {
      window.removeEventListener("scroll", this.setScroll.bind(this), { passive: true });
    }
  }
}

class GPUCurtains {
  /**
   * GPUCurtains constructor
   * @param parameters - {@link GPUCurtainsParams | parameters} used to create this {@link GPUCurtains}
   */
  constructor({
    container,
    pixelRatio = window.devicePixelRatio ?? 1,
    preferredFormat,
    alphaMode = "premultiplied",
    production = false,
    multisampled = true,
    renderPass,
    camera,
    autoRender = true,
    autoResize = true,
    watchScroll = true
  } = {}) {
    // callbacks / events
    /** function assigned to the {@link onRender} callback */
    this._onRenderCallback = () => {
    };
    /** function assigned to the {@link onScroll} callback */
    this._onScrollCallback = () => {
    };
    /** function assigned to the {@link onError} callback */
    this._onErrorCallback = () => {
    };
    /** function assigned to the {@link onContextLost} callback */
    this._onContextLostCallback = () => {
    };
    this.type = "CurtainsGPU";
    this.options = {
      container,
      pixelRatio,
      camera,
      production,
      preferredFormat,
      alphaMode,
      multisampled,
      renderPass,
      autoRender,
      autoResize,
      watchScroll
    };
    this.setDeviceManager();
    if (container) {
      this.setContainer(container);
    }
  }
  /**
   * Set the {@link container}
   * @param container - {@link HTMLElement} or string representing an {@link HTMLElement} selector to use
   */
  setContainer(container) {
    if (!container) {
      const container2 = document.createElement("div");
      container2.setAttribute("id", "curtains-gpu-canvas");
      document.body.appendChild(container2);
      this.options.container = container2;
    } else {
      if (typeof container === "string") {
        container = document.querySelector(container);
        if (!container) {
          const container2 = document.createElement("div");
          container2.setAttribute("id", "curtains-gpu-canvas");
          document.body.appendChild(container2);
          this.options.container = container2;
        } else {
          this.options.container = container;
        }
      } else if (container instanceof Element) {
        this.options.container = container;
      }
    }
    this.container = this.options.container;
    this.setCurtains();
  }
  /**
   * Set the default {@link GPUCurtainsRenderer | renderer}
   */
  setMainRenderer() {
    this.createCurtainsRenderer({
      deviceManager: this.deviceManager,
      // TODO ...this.options?
      container: this.options.container,
      pixelRatio: this.options.pixelRatio,
      preferredFormat: this.options.preferredFormat,
      alphaMode: this.options.alphaMode,
      multisampled: this.options.multisampled,
      renderPass: this.options.renderPass,
      camera: this.options.camera
    });
  }
  /**
   * Patch the options with default values before creating a {@link Renderer}
   * @param parameters - parameters to patch
   */
  patchRendererOptions(parameters) {
    if (parameters.pixelRatio === void 0)
      parameters.pixelRatio = this.options.pixelRatio;
    return parameters;
  }
  /**
   * Create a new {@link GPURenderer} instance
   * @param parameters - {@link GPURendererParams | parameters} to use
   */
  createRenderer(parameters) {
    parameters = this.patchRendererOptions(parameters);
    return new GPURenderer({ ...parameters, deviceManager: this.deviceManager });
  }
  /**
   * Create a new {@link GPUCameraRenderer} instance
   * @param parameters - {@link GPUCameraRendererParams | parameters} to use
   */
  createCameraRenderer(parameters) {
    parameters = this.patchRendererOptions(parameters);
    return new GPUCameraRenderer({ ...parameters, deviceManager: this.deviceManager });
  }
  /**
   * Create a new {@link GPUCurtainsRenderer} instance
   * @param parameters - {@link GPUCameraRendererParams | parameters} to use
   */
  createCurtainsRenderer(parameters) {
    parameters = this.patchRendererOptions(parameters);
    return new GPUCurtainsRenderer({ ...parameters, deviceManager: this.deviceManager });
  }
  /**
   * Set our {@link GPUDeviceManager}
   */
  setDeviceManager() {
    this.deviceManager = new GPUDeviceManager({
      label: "GPUCurtains default device",
      production: this.options.production,
      onError: () => setTimeout(() => {
        this._onErrorCallback && this._onErrorCallback();
      }, 0),
      onDeviceLost: (info) => this._onContextLostCallback && this._onContextLostCallback(info)
    });
  }
  /**
   * Get all created {@link Renderer}
   * @readonly
   */
  get renderers() {
    return this.deviceManager.renderers;
  }
  /**
   * Get the default {@link GPUCurtainsRenderer} created
   * @readonly
   */
  get renderer() {
    return this.renderers[0];
  }
  /**
   * Set the {@link GPUDeviceManager} {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device} if possible, then set all created {@link Renderer} contexts
   */
  async setDevice() {
    await this.deviceManager.init();
  }
  /**
   * Restore the {@link GPUDeviceManager#adapter | adapter} and {@link GPUDeviceManager#device | device}
   * @async
   */
  async restoreContext() {
    await this.deviceManager.restoreDevice();
  }
  /**
   * Set the various event listeners, set the {@link GPUCurtainsRenderer} and start rendering if needed
   */
  setCurtains() {
    this.initEvents();
    this.setMainRenderer();
    if (this.options.autoRender) {
      this.animate();
    }
  }
  /* RENDERER TRACKED OBJECTS */
  /**
   * Get all the created {@link PingPongPlane}
   * @readonly
   */
  get pingPongPlanes() {
    return this.renderers?.map((renderer) => renderer.pingPongPlanes).flat();
  }
  /**
   * Get all the created {@link ShaderPass}
   * @readonly
   */
  get shaderPasses() {
    return this.renderers?.map((renderer) => renderer.shaderPasses).flat();
  }
  /**
   * Get all the created {@link ProjectedMesh | projected meshes}
   * @readonly
   */
  get meshes() {
    return this.renderers?.map((renderer) => renderer.meshes).flat();
  }
  /**
   * Get all the created {@link DOMMesh | DOM Meshes} (including {@link Plane | planes})
   * @readonly
   */
  get domMeshes() {
    return this.renderers?.filter((renderer) => renderer instanceof GPUCurtainsRenderer).map((renderer) => renderer.domMeshes).flat();
  }
  /**
   * Get all the created {@link Plane | planes}
   * @readonly
   */
  get planes() {
    return this.domMeshes.filter((domMesh) => domMesh instanceof Plane);
  }
  /**
   * Get all the created {@link ComputePass | compute passes}
   * @readonly
   */
  get computePasses() {
    return this.renderers?.map((renderer) => renderer.computePasses).flat();
  }
  /**
   * Get the {@link GPUCurtainsRenderer#camera | default GPUCurtainsRenderer camera}
   * @readonly
   */
  get camera() {
    return this.renderer?.camera;
  }
  /**
   * Set the {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer camera} perspective
   * @param parameters - {@link CameraBasePerspectiveOptions | parameters} to use for the perspective
   */
  setPerspective({ fov = 50, near = 0.01, far = 50 } = {}) {
    this.renderer?.setPerspective({ fov, near, far });
  }
  /**
   * Set the default {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer camera} {@link Camera#position | position}
   * @param position - new {@link Camera#position | position}
   */
  setCameraPosition(position = new Vec3(0, 0, 1)) {
    this.renderer?.setCameraPosition(position);
  }
  /**
   * Get our {@link GPUCurtainsRenderer#setPerspective | default GPUCurtainsRenderer bounding rectangle}
   */
  get boundingRect() {
    return this.renderer?.boundingRect;
  }
  /* SCROLL */
  /**
   * Set the {@link scrollManager}
   */
  initScroll() {
    this.scrollManager = new ScrollManager({
      // init values
      scroll: {
        x: window.pageXOffset,
        y: window.pageYOffset
      },
      delta: {
        x: 0,
        y: 0
      },
      shouldWatch: this.options.watchScroll,
      onScroll: (delta) => this.updateScroll(delta)
    });
  }
  /**
   * Update all {@link DOMMesh#updateScrollPosition | DOMMesh scroll positions}
   * @param delta - last {@link ScrollManager#delta | scroll delta values}
   */
  updateScroll(delta = { x: 0, y: 0 }) {
    this.domMeshes.forEach((mesh) => {
      if (mesh.domElement) {
        mesh.updateScrollPosition(delta);
      }
    });
    this._onScrollCallback && this._onScrollCallback();
  }
  /**
   * Update our {@link ScrollManager#scroll | scrollManager scroll values}. Called each time the scroll has changed if {@link GPUCurtains#options.watchScroll | watchScroll option} is set to true. Could be called externally as well.
   * @param scroll - new {@link DOMPosition | scroll values}
   */
  updateScrollValues(scroll = { x: 0, y: 0 }) {
    this.scrollManager.updateScrollValues(scroll);
  }
  /**
   * Get our {@link ScrollManager#delta | scrollManager delta values}
   * @readonly
   */
  get scrollDelta() {
    return this.scrollManager.delta;
  }
  /**
   * Get our {@link ScrollManager#scroll | scrollManager scroll values}
   * @readonly
   */
  get scrollValues() {
    return this.scrollManager.scroll;
  }
  /* EVENT LISTENERS */
  /**
   * Set the resize and scroll event listeners
   */
  initEvents() {
    resizeManager.useObserver(this.options.autoResize);
    this.initScroll();
  }
  /* EVENTS */
  /**
   * Called at each render frame
   * @param callback - callback to run at each render
   * @returns - our {@link GPUCurtains}
   */
  onRender(callback) {
    if (callback) {
      this._onRenderCallback = callback;
    }
    return this;
  }
  /**
   * Called each time the {@link ScrollManager#scroll | scrollManager scroll values} changed
   * @param callback - callback to run each time the {@link ScrollManager#scroll | scrollManager scroll values} changed
   * @returns - our {@link GPUCurtains}
   */
  onScroll(callback) {
    if (callback) {
      this._onScrollCallback = callback;
    }
    return this;
  }
  /**
   * Called if there's been an error while trying to create the {@link GPUDeviceManager#device | device}
   * @param callback - callback to run if there's been an error while trying to create the {@link GPUDeviceManager#device | device}
   * @returns - our {@link GPUCurtains}
   */
  onError(callback) {
    if (callback) {
      this._onErrorCallback = callback;
    }
    return this;
  }
  /**
   * Called whenever the {@link GPUDeviceManager#device | device} is lost
   * @param callback - callback to run whenever the {@link GPUDeviceManager#device | device} is lost
   * @returns - our {@link GPUCurtains}
   */
  onContextLost(callback) {
    if (callback) {
      this._onContextLostCallback = callback;
    }
    return this;
  }
  /**
   * Create a requestAnimationFrame loop and run it
   */
  animate() {
    this.render();
    this.animationFrameID = window.requestAnimationFrame(this.animate.bind(this));
  }
  /**
   * Render our {@link GPUDeviceManager}
   */
  render() {
    this._onRenderCallback && this._onRenderCallback();
    this.deviceManager.render();
  }
  /**
   * Destroy our {@link GPUCurtains} and {@link GPUDeviceManager}
   */
  destroy() {
    if (this.animationFrameID) {
      window.cancelAnimationFrame(this.animationFrameID);
    }
    this.deviceManager.destroy();
    this.scrollManager?.destroy();
    resizeManager.destroy();
  }
}

class BoxGeometry extends IndexedGeometry {
  constructor({
    widthSegments = 1,
    heightSegments = 1,
    depthSegments = 1,
    instancesCount = 1,
    vertexBuffers = [],
    topology
  } = {}) {
    super({ verticesOrder: "ccw", topology, instancesCount, vertexBuffers });
    this.type = "BoxGeometry";
    widthSegments = Math.floor(widthSegments);
    heightSegments = Math.floor(heightSegments);
    depthSegments = Math.floor(depthSegments);
    const vertices = [];
    const uvs = [];
    const normals = [];
    const indices = [];
    let numberOfVertices = 0;
    const buildPlane = (u, v, w, udir, vdir, width, height, depth, gridX, gridY) => {
      const segmentWidth = width / gridX;
      const segmentHeight = height / gridY;
      const widthHalf = width / 2;
      const heightHalf = height / 2;
      const depthHalf = depth / 2;
      const gridX1 = gridX + 1;
      const gridY1 = gridY + 1;
      let vertexCounter = 0;
      const vector = new Vec3();
      for (let iy = 0; iy < gridY1; iy++) {
        const y = iy * segmentHeight - heightHalf;
        for (let ix = 0; ix < gridX1; ix++) {
          const x = ix * segmentWidth - widthHalf;
          vector[u] = x * udir;
          vector[v] = y * vdir;
          vector[w] = depthHalf;
          vertices.push(vector.x, vector.y, vector.z);
          vector[u] = 0;
          vector[v] = 0;
          vector[w] = depth > 0 ? 1 : -1;
          normals.push(vector.x, vector.y, vector.z);
          uvs.push(ix / gridX);
          uvs.push(iy / gridY);
          vertexCounter += 1;
        }
      }
      for (let iy = 0; iy < gridY; iy++) {
        for (let ix = 0; ix < gridX; ix++) {
          const a = numberOfVertices + ix + gridX1 * iy;
          const b = numberOfVertices + ix + gridX1 * (iy + 1);
          const c = numberOfVertices + (ix + 1) + gridX1 * (iy + 1);
          const d = numberOfVertices + (ix + 1) + gridX1 * iy;
          indices.push(a, b, d);
          indices.push(b, c, d);
          numberOfVertices += vertexCounter;
        }
      }
    };
    buildPlane("z", "y", "x", -1, -1, 2, 2, 2, depthSegments, heightSegments);
    buildPlane("z", "y", "x", 1, -1, 2, 2, -2, depthSegments, heightSegments);
    buildPlane("x", "z", "y", 1, 1, 2, 2, 2, widthSegments, depthSegments);
    buildPlane("x", "z", "y", 1, -1, 2, 2, -2, widthSegments, depthSegments);
    buildPlane("x", "y", "z", 1, -1, 2, 2, 2, widthSegments, heightSegments);
    buildPlane("x", "y", "z", -1, -1, 2, 2, -2, widthSegments, heightSegments);
    this.setAttribute({
      name: "position",
      type: "vec3f",
      bufferFormat: "float32x3",
      size: 3,
      array: new Float32Array(vertices)
    });
    this.setAttribute({
      name: "uv",
      type: "vec2f",
      bufferFormat: "float32x2",
      size: 2,
      array: new Float32Array(uvs)
    });
    this.setAttribute({
      name: "normal",
      type: "vec3f",
      bufferFormat: "float32x3",
      size: 3,
      array: new Float32Array(normals)
    });
    this.setIndexBuffer({
      array: this.useUint16IndexArray ? new Uint16Array(indices) : new Uint32Array(indices),
      bufferFormat: this.useUint16IndexArray ? "uint16" : "uint32"
    });
  }
}

class SphereGeometry extends IndexedGeometry {
  constructor({
    widthSegments = 32,
    heightSegments = 16,
    phiStart = 0,
    phiLength = Math.PI * 2,
    thetaStart = 0,
    thetaLength = Math.PI,
    instancesCount = 1,
    vertexBuffers = [],
    topology
  } = {}) {
    super({ verticesOrder: "ccw", topology, instancesCount, vertexBuffers });
    this.type = "SphereGeometry";
    widthSegments = Math.max(3, Math.floor(widthSegments));
    heightSegments = Math.max(2, Math.floor(heightSegments));
    const radius = 1;
    const thetaEnd = Math.min(thetaStart + thetaLength, Math.PI);
    let index = 0;
    const grid = [];
    const vertex = new Vec3();
    const normal = new Vec3();
    const indices = [];
    const vertices = [];
    const normals = [];
    const uvs = [];
    for (let iy = 0; iy <= heightSegments; iy++) {
      const verticesRow = [];
      const v = iy / heightSegments;
      let uOffset = 0;
      if (iy === 0 && thetaStart === 0) {
        uOffset = 0.5 / widthSegments;
      } else if (iy === heightSegments && thetaEnd === Math.PI) {
        uOffset = -0.5 / widthSegments;
      }
      for (let ix = 0; ix <= widthSegments; ix++) {
        const u = ix / widthSegments;
        vertex.x = -radius * Math.cos(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
        vertex.y = radius * Math.cos(thetaStart + v * thetaLength);
        vertex.z = radius * Math.sin(phiStart + u * phiLength) * Math.sin(thetaStart + v * thetaLength);
        vertices.push(vertex.x, vertex.y, vertex.z);
        normal.copy(vertex).normalize();
        normals.push(normal.x, normal.y, normal.z);
        uvs.push(u + uOffset, v);
        verticesRow.push(index++);
      }
      grid.push(verticesRow);
    }
    for (let iy = 0; iy < heightSegments; iy++) {
      for (let ix = 0; ix < widthSegments; ix++) {
        const a = grid[iy][ix + 1];
        const b = grid[iy][ix];
        const c = grid[iy + 1][ix];
        const d = grid[iy + 1][ix + 1];
        if (iy !== 0 || thetaStart > 0)
          indices.push(a, b, d);
        if (iy !== heightSegments - 1 || thetaEnd < Math.PI)
          indices.push(b, c, d);
      }
    }
    this.setAttribute({
      name: "position",
      type: "vec3f",
      bufferFormat: "float32x3",
      size: 3,
      array: new Float32Array(vertices)
    });
    this.setAttribute({
      name: "uv",
      type: "vec2f",
      bufferFormat: "float32x2",
      size: 2,
      array: new Float32Array(uvs)
    });
    this.setAttribute({
      name: "normal",
      type: "vec3f",
      bufferFormat: "float32x3",
      size: 3,
      array: new Float32Array(normals)
    });
    this.setIndexBuffer({
      array: this.useUint16IndexArray ? new Uint16Array(indices) : new Uint32Array(indices),
      bufferFormat: this.useUint16IndexArray ? "uint16" : "uint32"
    });
  }
}

export { BindGroup, Binding, Box3, BoxGeometry, BufferBinding, Camera, ComputeMaterial, ComputePass, ComputePipelineEntry, DOMElement, DOMFrustum, DOMMesh, DOMObject3D, FullscreenPlane, GPUCameraRenderer, GPUCurtains, GPUCurtainsRenderer, GPUDeviceManager, GPURenderer, Geometry, IndexedGeometry, Mat4, Material, Mesh, Object3D, PingPongPlane, PipelineEntry, PipelineManager, Plane, PlaneGeometry, ProjectedObject3D, Quat, RenderMaterial, RenderPass, RenderPipelineEntry, RenderTarget, RenderTexture, Sampler, SamplerBinding, Scene, ShaderPass, SphereGeometry, Texture, TextureBindGroup, TextureBinding, Vec2, Vec3, WritableBufferBinding };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3B1LWN1cnRhaW5zLm1qcyIsInNvdXJjZXMiOlsiLi4vc3JjL3V0aWxzL3V0aWxzLnRzIiwiLi4vc3JjL2NvcmUvcmVuZGVyZXJzL3V0aWxzLnRzIiwiLi4vc3JjL2NvcmUvYmluZGluZ3MvQmluZGluZy50cyIsIi4uL3NyYy9jb3JlL2JpbmRpbmdzL3V0aWxzLnRzIiwiLi4vc3JjL21hdGgvVmVjMi50cyIsIi4uL3NyYy9tYXRoL1F1YXQudHMiLCIuLi9zcmMvbWF0aC9NYXQ0LnRzIiwiLi4vc3JjL21hdGgvVmVjMy50cyIsIi4uL3NyYy9jb3JlL2JpbmRpbmdzL2J1ZmZlckVsZW1lbnRzL0J1ZmZlckVsZW1lbnQudHMiLCIuLi9zcmMvY29yZS9iaW5kaW5ncy9idWZmZXJFbGVtZW50cy9CdWZmZXJBcnJheUVsZW1lbnQudHMiLCIuLi9zcmMvY29yZS9iaW5kaW5ncy9idWZmZXJFbGVtZW50cy9CdWZmZXJJbnRlcmxlYXZlZEFycmF5RWxlbWVudC50cyIsIi4uL3NyYy9jb3JlL2JpbmRpbmdzL0J1ZmZlckJpbmRpbmcudHMiLCIuLi9zcmMvY29yZS9iaW5kaW5ncy9Xcml0YWJsZUJ1ZmZlckJpbmRpbmcudHMiLCIuLi9zcmMvY29yZS9iaW5kR3JvdXBzL0JpbmRHcm91cC50cyIsIi4uL3NyYy9jb3JlL2JpbmRpbmdzL1RleHR1cmVCaW5kaW5nLnRzIiwiLi4vc3JjL2NvcmUvb2JqZWN0czNEL09iamVjdDNELnRzIiwiLi4vc3JjL2NvcmUvdGV4dHVyZXMvVGV4dHVyZS50cyIsIi4uL3NyYy9jb3JlL2JpbmRHcm91cHMvVGV4dHVyZUJpbmRHcm91cC50cyIsIi4uL3NyYy9jb3JlL2JpbmRpbmdzL1NhbXBsZXJCaW5kaW5nLnRzIiwiLi4vc3JjL2NvcmUvY2FtZXJhL0NhbWVyYS50cyIsIi4uL3NyYy9jb3JlL3NhbXBsZXJzL1NhbXBsZXIudHMiLCIuLi9zcmMvY29yZS90ZXh0dXJlcy9SZW5kZXJUZXh0dXJlLnRzIiwiLi4vc3JjL2NvcmUvbWF0ZXJpYWxzL01hdGVyaWFsLnRzIiwiLi4vc3JjL2NvcmUvbWF0ZXJpYWxzL0NvbXB1dGVNYXRlcmlhbC50cyIsIi4uL3NyYy9jb3JlL2NvbXB1dGVQYXNzZXMvQ29tcHV0ZVBhc3MudHMiLCIuLi9zcmMvbWF0aC9Cb3gzLnRzIiwiLi4vc3JjL2NvcmUvRE9NL0RPTUZydXN0dW0udHMiLCIuLi9zcmMvY29yZS9nZW9tZXRyaWVzL0dlb21ldHJ5LnRzIiwiLi4vc3JjL2NvcmUvZ2VvbWV0cmllcy9JbmRleGVkR2VvbWV0cnkudHMiLCIuLi9zcmMvY29yZS9nZW9tZXRyaWVzL1BsYW5lR2VvbWV0cnkudHMiLCIuLi9zcmMvY29yZS9tYXRlcmlhbHMvUmVuZGVyTWF0ZXJpYWwudHMiLCIuLi9zcmMvY29yZS9zaGFkZXJzL2NodW5rcy9kZWZhdWx0X3ZzLndnc2wuanMiLCIuLi9zcmMvY29yZS9zaGFkZXJzL2NodW5rcy9kZWZhdWx0X2ZzLndnc2wuanMiLCIuLi9zcmMvY29yZS9tZXNoZXMvbWl4aW5zL01lc2hCYXNlTWl4aW4udHMiLCIuLi9zcmMvdXRpbHMvQ2FjaGVNYW5hZ2VyLnRzIiwiLi4vc3JjL2NvcmUvbWVzaGVzL0Z1bGxzY3JlZW5QbGFuZS50cyIsIi4uL3NyYy9jb3JlL29iamVjdHMzRC9Qcm9qZWN0ZWRPYmplY3QzRC50cyIsIi4uL3NyYy9jb3JlL3NoYWRlcnMvY2h1bmtzL2RlZmF1bHRfcHJvamVjdGVkX3ZzLndnc2wuanMiLCIuLi9zcmMvY29yZS9zaGFkZXJzL2NodW5rcy9kZWZhdWx0X25vcm1hbF9mcy53Z3NsLmpzIiwiLi4vc3JjL2NvcmUvbWVzaGVzL21peGlucy9Qcm9qZWN0ZWRNZXNoQmFzZU1peGluLnRzIiwiLi4vc3JjL2NvcmUvbWVzaGVzL01lc2gudHMiLCIuLi9zcmMvY29yZS9waXBlbGluZXMvUGlwZWxpbmVFbnRyeS50cyIsIi4uL3NyYy9jb3JlL3NoYWRlcnMvY2h1bmtzL2dldF9vdXRwdXRfcG9zaXRpb24ud2dzbC5qcyIsIi4uL3NyYy9jb3JlL3NoYWRlcnMvY2h1bmtzL2dldF91dl9jb3Zlci53Z3NsLmpzIiwiLi4vc3JjL2NvcmUvc2hhZGVycy9jaHVua3MvZ2V0X3ZlcnRleF90b191dl9jb29yZHMud2dzbC5qcyIsIi4uL3NyYy9jb3JlL3NoYWRlcnMvU2hhZGVyQ2h1bmtzLnRzIiwiLi4vc3JjL2NvcmUvcGlwZWxpbmVzL1JlbmRlclBpcGVsaW5lRW50cnkudHMiLCIuLi9zcmMvY29yZS9waXBlbGluZXMvQ29tcHV0ZVBpcGVsaW5lRW50cnkudHMiLCIuLi9zcmMvY29yZS9waXBlbGluZXMvUGlwZWxpbmVNYW5hZ2VyLnRzIiwiLi4vc3JjL3V0aWxzL1Jlc2l6ZU1hbmFnZXIudHMiLCIuLi9zcmMvY29yZS9ET00vRE9NRWxlbWVudC50cyIsIi4uL3NyYy9jb3JlL3NoYWRlcnMvY2h1bmtzL2RlZmF1bHRfcGFzc19mcy53Z3NsLmpzIiwiLi4vc3JjL2NvcmUvcmVuZGVyUGFzc2VzL1NoYWRlclBhc3MudHMiLCIuLi9zcmMvY29yZS9yZW5kZXJQYXNzZXMvUmVuZGVyUGFzcy50cyIsIi4uL3NyYy9jb3JlL3JlbmRlclBhc3Nlcy9SZW5kZXJUYXJnZXQudHMiLCIuLi9zcmMvY3VydGFpbnMvbWVzaGVzL1BpbmdQb25nUGxhbmUudHMiLCIuLi9zcmMvY3VydGFpbnMvb2JqZWN0czNEL0RPTU9iamVjdDNELnRzIiwiLi4vc3JjL2N1cnRhaW5zL21lc2hlcy9ET01NZXNoLnRzIiwiLi4vc3JjL2N1cnRhaW5zL21lc2hlcy9QbGFuZS50cyIsIi4uL3NyYy9jb3JlL3NjZW5lcy9TY2VuZS50cyIsIi4uL3NyYy91dGlscy9UYXNrc1F1ZXVlTWFuYWdlci50cyIsIi4uL3NyYy9jb3JlL3JlbmRlcmVycy9HUFVSZW5kZXJlci50cyIsIi4uL3NyYy9jb3JlL3JlbmRlcmVycy9HUFVDYW1lcmFSZW5kZXJlci50cyIsIi4uL3NyYy9jb3JlL3JlbmRlcmVycy9HUFVEZXZpY2VNYW5hZ2VyLnRzIiwiLi4vc3JjL2N1cnRhaW5zL3JlbmRlcmVycy9HUFVDdXJ0YWluc1JlbmRlcmVyLnRzIiwiLi4vc3JjL3V0aWxzL1Njcm9sbE1hbmFnZXIudHMiLCIuLi9zcmMvY3VydGFpbnMvR1BVQ3VydGFpbnMudHMiLCIuLi9zcmMvZXh0cmFzL2dlb21ldHJpZXMvQm94R2VvbWV0cnkudHMiLCIuLi9zcmMvZXh0cmFzL2dlb21ldHJpZXMvU3BoZXJlR2VvbWV0cnkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBHZW5lcmF0ZSBhIHVuaXF1ZSB1bml2ZXJzYWwgaWRcbiAqIEByZXR1cm5zIC0gdW5pcXVlIHVuaXZlcnNhbCBpZCBnZW5lcmF0ZWRcbiAqL1xuZXhwb3J0IGNvbnN0IGdlbmVyYXRlVVVJRCA9ICgpOiBzdHJpbmcgPT4ge1xuICByZXR1cm4gJ3h4eHh4eHh4LXh4eHgtNHh4eC15eHh4LXh4eHh4eHh4eHh4eCcucmVwbGFjZSgvW3h5XS9nLCAoYykgPT4ge1xuICAgIGNvbnN0IHIgPSAoTWF0aC5yYW5kb20oKSAqIDE2KSB8IDAsXG4gICAgICB2ID0gYyA9PT0gJ3gnID8gciA6IChyICYgMHgzKSB8IDB4OFxuICAgIHJldHVybiB2LnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpXG4gIH0pXG59XG5cbi8qKlxuICogVHVybnMgYSBzdHJpbmcgaW50byBhIGNhbWVsIGNhc2Ugc3RyaW5nXG4gKiBAcGFyYW0gc3RyaW5nIC0gc3RyaW5nIHRvIHRyYW5zZm9ybVxuICogQHJldHVybnMgLSBjYW1lbCBjYXNlIHN0cmluZyBjcmVhdGVkXG4gKi9cbmV4cG9ydCBjb25zdCB0b0NhbWVsQ2FzZSA9IChzdHJpbmc6IHN0cmluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiBzdHJpbmdcbiAgICAucmVwbGFjZSgvKD86Xlxcd3xbQS1aXXxcXGJcXHcpL2csIChsdHIsIGlkeCkgPT4gKGlkeCA9PT0gMCA/IGx0ci50b0xvd2VyQ2FzZSgpIDogbHRyLnRvVXBwZXJDYXNlKCkpKVxuICAgIC5yZXBsYWNlKC9cXHMrL2csICcnKVxufVxuXG4vKipcbiAqIFR1cm5zIGEgc3RyaW5nIGludG8gYSBrZWJhYiBjYXNlIHN0cmluZ1xuICogQHBhcmFtIHN0cmluZyAtIHN0cmluZyB0byB0cmFuc2Zvcm1cbiAqIEByZXR1cm5zIC0ga2ViYWIgY2FzZSBzdHJpbmcgY3JlYXRlZFxuICovXG5leHBvcnQgY29uc3QgdG9LZWJhYkNhc2UgPSAoc3RyaW5nOiBzdHJpbmcpOiBzdHJpbmcgPT4ge1xuICBjb25zdCBjYW1lbENhc2UgPSB0b0NhbWVsQ2FzZShzdHJpbmcpXG4gIHJldHVybiBjYW1lbENhc2UuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBjYW1lbENhc2Uuc2xpY2UoMSlcbn1cblxubGV0IHdhcm5pbmdUaHJvd24gPSAwXG5cbi8qKlxuICogVGhyb3cgYSBjb25zb2xlIHdhcm5pbmcgd2l0aCB0aGUgcGFzc2VkIGFyZ3VtZW50c1xuICogQHBhcmFtIHdhcm5pbmcgLSB3YXJuaW5nIHRvIGJlIHRocm93blxuICovXG5leHBvcnQgY29uc3QgdGhyb3dXYXJuaW5nID0gKHdhcm5pbmc6IHN0cmluZykgPT4ge1xuICBpZiAod2FybmluZ1Rocm93biA+IDEwMCkge1xuICAgIHJldHVyblxuICB9IGVsc2UgaWYgKHdhcm5pbmdUaHJvd24gPT09IDEwMCkge1xuICAgIGNvbnNvbGUud2FybignR1BVQ3VydGFpbnM6IHRvbyBtYW55IHdhcm5pbmdzIHRocm93biwgc3RvcCBsb2dnaW5nLicpXG4gIH0gZWxzZSB7XG4gICAgY29uc29sZS53YXJuKHdhcm5pbmcpXG4gIH1cblxuICB3YXJuaW5nVGhyb3duKytcbn1cblxuLyoqXG4gKiBUaHJvdyBhIGphdmFzY3JpcHQgZXJyb3Igd2l0aCB0aGUgcGFzc2VkIGFyZ3VtZW50c1xuICogQHBhcmFtIGVycm9yIC0gZXJyb3IgdG8gYmUgdGhyb3duXG4gKi9cbmV4cG9ydCBjb25zdCB0aHJvd0Vycm9yID0gKGVycm9yOiBzdHJpbmcpID0+IHtcbiAgdGhyb3cgbmV3IEVycm9yKGVycm9yKVxufVxuIiwiaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJ1xuaW1wb3J0IHsgR1BVUmVuZGVyZXIgfSBmcm9tICcuL0dQVVJlbmRlcmVyJ1xuaW1wb3J0IHsgR1BVQ2FtZXJhUmVuZGVyZXIgfSBmcm9tICcuL0dQVUNhbWVyYVJlbmRlcmVyJ1xuaW1wb3J0IHsgR1BVQ3VydGFpbnNSZW5kZXJlciB9IGZyb20gJy4uLy4uL2N1cnRhaW5zL3JlbmRlcmVycy9HUFVDdXJ0YWluc1JlbmRlcmVyJ1xuXG4vKipcbiAqIEEgUmVuZGVyZXIgY291bGQgYmUgZWl0aGVyIGEge0BsaW5rIEdQVVJlbmRlcmVyfSwgYSB7QGxpbmsgR1BVQ2FtZXJhUmVuZGVyZXJ9IG9yIGEge0BsaW5rIEdQVUN1cnRhaW5zUmVuZGVyZXJ9XG4gKiBAdHlwZSB7UmVuZGVyZXJ9XG4gKi9cbmV4cG9ydCB0eXBlIFJlbmRlcmVyID0gR1BVQ3VydGFpbnNSZW5kZXJlciB8IEdQVUNhbWVyYVJlbmRlcmVyIHwgR1BVUmVuZGVyZXJcbi8qKlxuICogQSBDYW1lcmFSZW5kZXJlciBjb3VsZCBiZSBlaXRoZXIgYSB7QGxpbmsgR1BVQ2FtZXJhUmVuZGVyZXJ9IG9yIGEge0BsaW5rIEdQVUN1cnRhaW5zUmVuZGVyZXJ9XG4gKiBAdHlwZSB7Q2FtZXJhUmVuZGVyZXJ9XG4gKi9cbmV4cG9ydCB0eXBlIENhbWVyYVJlbmRlcmVyID0gR1BVQ3VydGFpbnNSZW5kZXJlciB8IEdQVUNhbWVyYVJlbmRlcmVyXG5cbi8qKlxuICogRm9ybWF0IGEgcmVuZGVyZXIgZXJyb3IgYmFzZWQgb24gZ2l2ZW4gcmVuZGVyZXIsIHJlbmRlcmVyIHR5cGUgYW5kIG9iamVjdCB0eXBlXG4gKiBAcGFyYW0gcmVuZGVyZXIgLSByZW5kZXJlciB0aGF0IGZhaWxlZCB0aGUgdGVzdFxuICogQHBhcmFtIHJlbmRlcmVyVHlwZSAtIGV4cGVjdGVkIHJlbmRlcmVyIHR5cGVcbiAqIEBwYXJhbSB0eXBlIC0gb2JqZWN0IHR5cGVcbiAqL1xuY29uc3QgZm9ybWF0UmVuZGVyZXJFcnJvciA9IChyZW5kZXJlcjogUmVuZGVyZXIsIHJlbmRlcmVyVHlwZSA9ICdHUFVSZW5kZXJlcicsIHR5cGU6IHN0cmluZyB8IG51bGwpOiB2b2lkID0+IHtcbiAgY29uc3QgZXJyb3IgPSB0eXBlXG4gICAgPyBgVW5hYmxlIHRvIGNyZWF0ZSAke3R5cGV9IGJlY2F1c2UgdGhlICR7cmVuZGVyZXJUeXBlfSBpcyBub3QgZGVmaW5lZDogJHtyZW5kZXJlcn1gXG4gICAgOiBgVGhlICR7cmVuZGVyZXJUeXBlfSBpcyBub3QgZGVmaW5lZDogJHtyZW5kZXJlcn1gXG4gIHRocm93RXJyb3IoZXJyb3IpXG59XG5cbi8qKlxuICogQ2hlY2sgaWYgdGhlIGdpdmVuIHJlbmRlcmVyIGlzIGEge0BsaW5rIFJlbmRlcmVyfVxuICogQHBhcmFtIHJlbmRlcmVyIC0gcmVuZGVyZXIgdG8gdGVzdFxuICogQHBhcmFtIHR5cGUgLSBvYmplY3QgdHlwZSB1c2VkIHRvIGZvcm1hdCB0aGUgZXJyb3IgaWYgbmVlZGVkXG4gKiBAcmV0dXJucyAtIHdoZXRoZXIgdGhlIGdpdmVuIHJlbmRlcmVyIGlzIGEge0BsaW5rIFJlbmRlcmVyfVxuICovXG5leHBvcnQgY29uc3QgaXNSZW5kZXJlciA9IChyZW5kZXJlcjogUmVuZGVyZXIgfCB1bmRlZmluZWQsIHR5cGU6IHN0cmluZyB8IG51bGwpOiBib29sZWFuID0+IHtcbiAgY29uc3QgaXNSZW5kZXJlciA9XG4gICAgcmVuZGVyZXIgJiZcbiAgICAocmVuZGVyZXIudHlwZSA9PT0gJ0dQVVJlbmRlcmVyJyB8fFxuICAgICAgcmVuZGVyZXIudHlwZSA9PT0gJ0dQVUNhbWVyYVJlbmRlcmVyJyB8fFxuICAgICAgcmVuZGVyZXIudHlwZSA9PT0gJ0dQVUN1cnRhaW5zUmVuZGVyZXInKVxuXG4gIGlmICghaXNSZW5kZXJlcikge1xuICAgIGZvcm1hdFJlbmRlcmVyRXJyb3IocmVuZGVyZXIsICdHUFVSZW5kZXJlcicsIHR5cGUpXG4gIH1cblxuICByZXR1cm4gaXNSZW5kZXJlclxufVxuXG4vKipcbiAqIENoZWNrIGlmIHRoZSBnaXZlbiByZW5kZXJlciBpcyBhIHtAbGluayBDYW1lcmFSZW5kZXJlcn1cbiAqIEBwYXJhbSByZW5kZXJlciAtIHJlbmRlcmVyIHRvIHRlc3RcbiAqIEBwYXJhbSB0eXBlIC0gb2JqZWN0IHR5cGUgdXNlZCB0byBmb3JtYXQgdGhlIGVycm9yIGlmIG5lZWRlZFxuICogQHJldHVybnMgLSB3aGV0aGVyIHRoZSBnaXZlbiByZW5kZXJlciBpcyBhIHtAbGluayBDYW1lcmFSZW5kZXJlcn1cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQ2FtZXJhUmVuZGVyZXIgPSAocmVuZGVyZXI6IENhbWVyYVJlbmRlcmVyIHwgdW5kZWZpbmVkLCB0eXBlOiBzdHJpbmcgfCBudWxsKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IGlzQ2FtZXJhUmVuZGVyZXIgPVxuICAgIHJlbmRlcmVyICYmIChyZW5kZXJlci50eXBlID09PSAnR1BVQ2FtZXJhUmVuZGVyZXInIHx8IHJlbmRlcmVyLnR5cGUgPT09ICdHUFVDdXJ0YWluc1JlbmRlcmVyJylcblxuICBpZiAoIWlzQ2FtZXJhUmVuZGVyZXIpIHtcbiAgICBmb3JtYXRSZW5kZXJlckVycm9yKHJlbmRlcmVyLCAnR1BVQ2FtZXJhUmVuZGVyZXInLCB0eXBlKVxuICB9XG5cbiAgcmV0dXJuIGlzQ2FtZXJhUmVuZGVyZXJcbn1cblxuLyoqXG4gKiBDaGVjayBpZiB0aGUgZ2l2ZW4gcmVuZGVyZXIgaXMgYSB7QGxpbmsgR1BVQ3VydGFpbnNSZW5kZXJlcn1cbiAqIEBwYXJhbSByZW5kZXJlciAtIHJlbmRlcmVyIHRvIHRlc3RcbiAqIEBwYXJhbSB0eXBlIC0gb2JqZWN0IHR5cGUgdXNlZCB0byBmb3JtYXQgdGhlIGVycm9yIGlmIG5lZWRlZFxuICogQHJldHVybnMgLSB3aGV0aGVyIHRoZSBnaXZlbiByZW5kZXJlciBpcyBhIHtAbGluayBHUFVDdXJ0YWluc1JlbmRlcmVyfVxuICovXG5leHBvcnQgY29uc3QgaXNDdXJ0YWluc1JlbmRlcmVyID0gKHJlbmRlcmVyOiBHUFVDdXJ0YWluc1JlbmRlcmVyIHwgdW5kZWZpbmVkLCB0eXBlOiBzdHJpbmcgfCBudWxsKTogYm9vbGVhbiA9PiB7XG4gIGNvbnN0IGlzQ3VydGFpbnNSZW5kZXJlciA9IHJlbmRlcmVyICYmIHJlbmRlcmVyLnR5cGUgPT09ICdHUFVDdXJ0YWluc1JlbmRlcmVyJ1xuXG4gIGlmICghaXNDdXJ0YWluc1JlbmRlcmVyKSB7XG4gICAgZm9ybWF0UmVuZGVyZXJFcnJvcihyZW5kZXJlciwgJ0dQVUN1cnRhaW5zUmVuZGVyZXInLCB0eXBlKVxuICB9XG5cbiAgcmV0dXJuIGlzQ3VydGFpbnNSZW5kZXJlclxufVxuXG4vKipcbiAqIEhlbHBlciB0byBnZW5lcmF0ZSBtaXBzIG9uIHRoZSBHUFVcbiAqIFRha2VuIGZyb20gaHR0cHM6Ly93ZWJncHVmdW5kYW1lbnRhbHMub3JnL3dlYmdwdS9sZXNzb25zL3dlYmdwdS1pbXBvcnRpbmctdGV4dHVyZXMuaHRtbFxuICovXG5leHBvcnQgY29uc3QgZ2VuZXJhdGVNaXBzID0gKCgpID0+IHtcbiAgbGV0IHNhbXBsZXJcbiAgbGV0IG1vZHVsZVxuICBjb25zdCBwaXBlbGluZUJ5Rm9ybWF0ID0ge31cblxuICByZXR1cm4gZnVuY3Rpb24gZ2VuZXJhdGVNaXBzKGRldmljZTogR1BVRGV2aWNlLCB0ZXh0dXJlOiBHUFVUZXh0dXJlKSB7XG4gICAgaWYgKCFtb2R1bGUpIHtcbiAgICAgIG1vZHVsZSA9IGRldmljZS5jcmVhdGVTaGFkZXJNb2R1bGUoe1xuICAgICAgICBsYWJlbDogJ3RleHR1cmVkIHF1YWQgc2hhZGVycyBmb3IgbWlwIGxldmVsIGdlbmVyYXRpb24nLFxuICAgICAgICBjb2RlOiBgXG4gICAgICAgICAgICBzdHJ1Y3QgVlNPdXRwdXQge1xuICAgICAgICAgICAgICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb246IHZlYzRmLFxuICAgICAgICAgICAgICBAbG9jYXRpb24oMCkgdGV4Y29vcmQ6IHZlYzJmLFxuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgQHZlcnRleCBmbiB2cyhcbiAgICAgICAgICAgICAgQGJ1aWx0aW4odmVydGV4X2luZGV4KSB2ZXJ0ZXhJbmRleCA6IHUzMlxuICAgICAgICAgICAgKSAtPiBWU091dHB1dCB7XG4gICAgICAgICAgICAgIHZhciBwb3MgPSBhcnJheTx2ZWMyZiwgNj4oXG5cbiAgICAgICAgICAgICAgICB2ZWMyZiggMC4wLCAgMC4wKSwgIC8vIGNlbnRlclxuICAgICAgICAgICAgICAgIHZlYzJmKCAxLjAsICAwLjApLCAgLy8gcmlnaHQsIGNlbnRlclxuICAgICAgICAgICAgICAgIHZlYzJmKCAwLjAsICAxLjApLCAgLy8gY2VudGVyLCB0b3BcblxuICAgICAgICAgICAgICAgIC8vIDJzdCB0cmlhbmdsZVxuICAgICAgICAgICAgICAgIHZlYzJmKCAwLjAsICAxLjApLCAgLy8gY2VudGVyLCB0b3BcbiAgICAgICAgICAgICAgICB2ZWMyZiggMS4wLCAgMC4wKSwgIC8vIHJpZ2h0LCBjZW50ZXJcbiAgICAgICAgICAgICAgICB2ZWMyZiggMS4wLCAgMS4wKSwgIC8vIHJpZ2h0LCB0b3BcbiAgICAgICAgICAgICAgKTtcblxuICAgICAgICAgICAgICB2YXIgdnNPdXRwdXQ6IFZTT3V0cHV0O1xuICAgICAgICAgICAgICBsZXQgeHkgPSBwb3NbdmVydGV4SW5kZXhdO1xuICAgICAgICAgICAgICB2c091dHB1dC5wb3NpdGlvbiA9IHZlYzRmKHh5ICogMi4wIC0gMS4wLCAwLjAsIDEuMCk7XG4gICAgICAgICAgICAgIHZzT3V0cHV0LnRleGNvb3JkID0gdmVjMmYoeHkueCwgMS4wIC0geHkueSk7XG4gICAgICAgICAgICAgIHJldHVybiB2c091dHB1dDtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKDApIHZhciBvdXJTYW1wbGVyOiBzYW1wbGVyO1xuICAgICAgICAgICAgQGdyb3VwKDApIEBiaW5kaW5nKDEpIHZhciBvdXJUZXh0dXJlOiB0ZXh0dXJlXzJkPGYzMj47XG5cbiAgICAgICAgICAgIEBmcmFnbWVudCBmbiBmcyhmc0lucHV0OiBWU091dHB1dCkgLT4gQGxvY2F0aW9uKDApIHZlYzRmIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRleHR1cmVTYW1wbGUob3VyVGV4dHVyZSwgb3VyU2FtcGxlciwgZnNJbnB1dC50ZXhjb29yZCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgYCxcbiAgICAgIH0pXG5cbiAgICAgIHNhbXBsZXIgPSBkZXZpY2UuY3JlYXRlU2FtcGxlcih7XG4gICAgICAgIG1pbkZpbHRlcjogJ2xpbmVhcicsXG4gICAgICB9KVxuICAgIH1cblxuICAgIGlmICghcGlwZWxpbmVCeUZvcm1hdFt0ZXh0dXJlLmZvcm1hdF0pIHtcbiAgICAgIHBpcGVsaW5lQnlGb3JtYXRbdGV4dHVyZS5mb3JtYXRdID0gZGV2aWNlLmNyZWF0ZVJlbmRlclBpcGVsaW5lKHtcbiAgICAgICAgbGFiZWw6ICdtaXAgbGV2ZWwgZ2VuZXJhdG9yIHBpcGVsaW5lJyxcbiAgICAgICAgbGF5b3V0OiAnYXV0bycsXG4gICAgICAgIHZlcnRleDoge1xuICAgICAgICAgIG1vZHVsZSxcbiAgICAgICAgICBlbnRyeVBvaW50OiAndnMnLFxuICAgICAgICB9LFxuICAgICAgICBmcmFnbWVudDoge1xuICAgICAgICAgIG1vZHVsZSxcbiAgICAgICAgICBlbnRyeVBvaW50OiAnZnMnLFxuICAgICAgICAgIHRhcmdldHM6IFt7IGZvcm1hdDogdGV4dHVyZS5mb3JtYXQgfV0sXG4gICAgICAgIH0sXG4gICAgICB9KVxuICAgIH1cbiAgICBjb25zdCBwaXBlbGluZSA9IHBpcGVsaW5lQnlGb3JtYXRbdGV4dHVyZS5mb3JtYXRdXG5cbiAgICBjb25zdCBlbmNvZGVyID0gZGV2aWNlLmNyZWF0ZUNvbW1hbmRFbmNvZGVyKHtcbiAgICAgIGxhYmVsOiAnbWlwIGdlbiBlbmNvZGVyJyxcbiAgICB9KVxuXG4gICAgbGV0IHdpZHRoID0gdGV4dHVyZS53aWR0aFxuICAgIGxldCBoZWlnaHQgPSB0ZXh0dXJlLmhlaWdodFxuICAgIGxldCBiYXNlTWlwTGV2ZWwgPSAwXG4gICAgd2hpbGUgKHdpZHRoID4gMSB8fCBoZWlnaHQgPiAxKSB7XG4gICAgICB3aWR0aCA9IE1hdGgubWF4KDEsICh3aWR0aCAvIDIpIHwgMClcbiAgICAgIGhlaWdodCA9IE1hdGgubWF4KDEsIChoZWlnaHQgLyAyKSB8IDApXG5cbiAgICAgIGNvbnN0IGJpbmRHcm91cCA9IGRldmljZS5jcmVhdGVCaW5kR3JvdXAoe1xuICAgICAgICBsYXlvdXQ6IHBpcGVsaW5lLmdldEJpbmRHcm91cExheW91dCgwKSxcbiAgICAgICAgZW50cmllczogW1xuICAgICAgICAgIHsgYmluZGluZzogMCwgcmVzb3VyY2U6IHNhbXBsZXIgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBiaW5kaW5nOiAxLFxuICAgICAgICAgICAgcmVzb3VyY2U6IHRleHR1cmUuY3JlYXRlVmlldyh7XG4gICAgICAgICAgICAgIGJhc2VNaXBMZXZlbCxcbiAgICAgICAgICAgICAgbWlwTGV2ZWxDb3VudDogMSxcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgIH0sXG4gICAgICAgIF0sXG4gICAgICB9KVxuXG4gICAgICArK2Jhc2VNaXBMZXZlbFxuXG4gICAgICBjb25zdCByZW5kZXJQYXNzRGVzY3JpcHRvciA9IHtcbiAgICAgICAgbGFiZWw6ICdvdXIgYmFzaWMgY2FudmFzIHJlbmRlclBhc3MnLFxuICAgICAgICBjb2xvckF0dGFjaG1lbnRzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgdmlldzogdGV4dHVyZS5jcmVhdGVWaWV3KHsgYmFzZU1pcExldmVsLCBtaXBMZXZlbENvdW50OiAxIH0pLFxuICAgICAgICAgICAgbG9hZE9wOiAnY2xlYXInLFxuICAgICAgICAgICAgc3RvcmVPcDogJ3N0b3JlJyxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBwYXNzID0gZW5jb2Rlci5iZWdpblJlbmRlclBhc3MocmVuZGVyUGFzc0Rlc2NyaXB0b3IgYXMgR1BVUmVuZGVyUGFzc0Rlc2NyaXB0b3IpXG4gICAgICBwYXNzLnNldFBpcGVsaW5lKHBpcGVsaW5lKVxuICAgICAgcGFzcy5zZXRCaW5kR3JvdXAoMCwgYmluZEdyb3VwKVxuICAgICAgcGFzcy5kcmF3KDYpIC8vIGNhbGwgb3VyIHZlcnRleCBzaGFkZXIgNiB0aW1lc1xuICAgICAgcGFzcy5lbmQoKVxuICAgIH1cblxuICAgIGNvbnN0IGNvbW1hbmRCdWZmZXIgPSBlbmNvZGVyLmZpbmlzaCgpXG4gICAgZGV2aWNlLnF1ZXVlLnN1Ym1pdChbY29tbWFuZEJ1ZmZlcl0pXG4gIH1cbn0pKClcbiIsImltcG9ydCB7IHRvQ2FtZWxDYXNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnXHJcbmltcG9ydCB7IE1hdGVyaWFsU2hhZGVyc1R5cGUgfSBmcm9tICcuLi8uLi90eXBlcy9NYXRlcmlhbHMnXHJcbmltcG9ydCB7IFRleHR1cmVCaW5kaW5nIH0gZnJvbSAnLi9UZXh0dXJlQmluZGluZydcclxuaW1wb3J0IHsgU2FtcGxlckJpbmRpbmcgfSBmcm9tICcuL1NhbXBsZXJCaW5kaW5nJ1xyXG5cclxuLyoqIERlZmluZXMgYWxsIGtpbmQgb2YgdGV4dHVyZSBiaW5kaW5nIHR5cGVzICovXHJcbmV4cG9ydCB0eXBlIFRleHR1cmVCaW5kaW5nVHlwZSA9ICd0ZXh0dXJlJyB8ICdleHRlcm5hbFRleHR1cmUnIHwgJ3N0b3JhZ2VUZXh0dXJlJyB8ICdkZXB0aFRleHR1cmUnXHJcbi8qKiBEZWZpbmVzIGFsbCBraW5kIG9mIGJpbmRpbmcgdHlwZXMgICovXHJcbmV4cG9ydCB0eXBlIEJpbmRpbmdUeXBlID0gJ3VuaWZvcm0nIHwgJ3N0b3JhZ2UnIHwgVGV4dHVyZUJpbmRpbmdUeXBlIHwgJ3NhbXBsZXInXHJcblxyXG4vLyBzZWUgaHR0cHM6Ly93d3cudzMub3JnL1RSL1dHU0wvI21lbW9yeS1hY2Nlc3MtbW9kZVxyXG4vKiogRGVmaW5lcyBidWZmZXIgYmluZGluZyBtZW1vcnkgYWNjZXNzIHR5cGVzIChyZWFkIG9ubHkgb3IgcmVhZC93cml0ZSkgKi9cclxuZXhwb3J0IHR5cGUgQnVmZmVyQmluZGluZ01lbW9yeUFjY2Vzc1R5cGUgPSAncmVhZCcgfCAncmVhZF93cml0ZSdcclxuLyoqIERlZmluZXMgdGV4dHVyZSBiaW5kaW5nIG1lbW9yeSBhY2Nlc3MgdHlwZXMgKHJlYWQgb25seSwgd3JpdGUgb25seSBvciByZWFkL3dyaXRlKSAqL1xyXG5leHBvcnQgdHlwZSBCaW5kaW5nTWVtb3J5QWNjZXNzVHlwZSA9IEJ1ZmZlckJpbmRpbmdNZW1vcnlBY2Nlc3NUeXBlIHwgJ3dyaXRlJ1xyXG5cclxuLyoqXHJcbiAqIERlZmluZXMgYWxsIGtpbmQgb2Yge0BsaW5rIEJpbmRpbmd9IHRoYXQgYXJlIHJlbGF0ZWQgdG8gdGV4dHVyZXMgb3Igc2FtcGxlcnNcclxuICovXHJcbmV4cG9ydCB0eXBlIFRleHR1cmVTYW1wbGVyQmluZGluZ3MgPSBUZXh0dXJlQmluZGluZyB8IFNhbXBsZXJCaW5kaW5nXHJcblxyXG4vKipcclxuICogQW4gb2JqZWN0IGRlZmluaW5nIGFsbCBwb3NzaWJsZSB7QGxpbmsgQmluZGluZ30gY2xhc3MgaW5zdGFuY2luZyBwYXJhbWV0ZXJzXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEJpbmRpbmdQYXJhbXMge1xyXG4gIC8qKiB7QGxpbmsgQmluZGluZ30gbGFiZWwgKi9cclxuICBsYWJlbD86IHN0cmluZ1xyXG4gIC8qKiB7QGxpbmsgQmluZGluZ30gbmFtZS9rZXkgKi9cclxuICBuYW1lPzogc3RyaW5nXHJcbiAgLyoqIHtAbGluayBCaW5kaW5nVHlwZSB8IGJpbmRpbmcgdHlwZX0gdG8gdXNlIHdpdGggdGhpcyB7QGxpbmsgQmluZGluZ30gKi9cclxuICBiaW5kaW5nVHlwZT86IEJpbmRpbmdUeXBlXHJcbiAgLyoqIHtAbGluayBCaW5kaW5nfSB2YXJpYWJsZXMgc2hhZGVycyB2aXNpYmlsaXR5ICovXHJcbiAgdmlzaWJpbGl0eT86IE1hdGVyaWFsU2hhZGVyc1R5cGUgfCBudWxsXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVc2VkIGFzIGEgc2hlbGwgdG8gYnVpbGQgYWN0dWFsIGJpbmRpbmdzIHVwb24sIGxpa2Uge0BsaW5rIGNvcmUvYmluZGluZ3MvQnVmZmVyQmluZGluZy5CdWZmZXJCaW5kaW5nIHwgQnVmZmVyQmluZGluZ30sIHtAbGluayBjb3JlL2JpbmRpbmdzL1dyaXRhYmxlQnVmZmVyQmluZGluZy5Xcml0YWJsZUJ1ZmZlckJpbmRpbmcgfCBXcml0YWJsZUJ1ZmZlckJpbmRpbmd9LCB7QGxpbmsgVGV4dHVyZUJpbmRpbmd9IGFuZCB7QGxpbmsgU2FtcGxlckJpbmRpbmd9LlxyXG4gKlxyXG4gKiBVbHRpbWF0ZWx5IHRoZSBnb2FsIG9mIGEge0BsaW5rIEJpbmRpbmd9IGVsZW1lbnQgaXMgdG8gcHJvdmlkZSBjb3JyZWN0IHJlc291cmNlcyBmb3Ige0BsaW5rIEdQVUJpbmRHcm91cExheW91dEVudHJ5fSBhbmQge0BsaW5rIEdQVUJpbmRHcm91cEVudHJ5fVxyXG4gKlxyXG4gKiAjIyBXR1NMXHJcbiAqXHJcbiAqIEVhY2gge0BsaW5rIEJpbmRpbmd9IGNyZWF0ZXMgaXRzIG93biBXR1NMIGNvZGUgc25pcHBldCB2YXJpYWJsZSBkZWNsYXJhdGlvbiwgdXNpbmcgc3RydWN0dXJlZCB0eXBlcyBvciBub3QuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgQmluZGluZyB7XHJcbiAgLyoqIFRoZSBsYWJlbCBvZiB0aGUge0BsaW5rIEJpbmRpbmd9ICovXHJcbiAgbGFiZWw6IHN0cmluZ1xyXG4gIC8qKiBUaGUgbmFtZS9rZXkgb2YgdGhlIHtAbGluayBCaW5kaW5nfSAqL1xyXG4gIG5hbWU6IHN0cmluZ1xyXG4gIC8qKiBUaGUgYmluZGluZyB0eXBlIG9mIHRoZSB7QGxpbmsgQmluZGluZ30gKi9cclxuICBiaW5kaW5nVHlwZTogQmluZGluZ1R5cGVcclxuICAvKiogVGhlIHZpc2liaWxpdHkgb2YgdGhlIHtAbGluayBCaW5kaW5nfSBpbiB0aGUgc2hhZGVycyAqL1xyXG4gIHZpc2liaWxpdHk6IEdQVVNoYWRlclN0YWdlRmxhZ3NcclxuICAvKiogT3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBCaW5kaW5nfSAqL1xyXG4gIG9wdGlvbnM6IEJpbmRpbmdQYXJhbXNcclxuXHJcbiAgLyoqIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHdlIHNob3VsZCByZWNyZWF0ZSB0aGUgcGFyZW50TWVzaCB7QGxpbmsgY29yZS9iaW5kR3JvdXBzL0JpbmRHcm91cC5CaW5kR3JvdXAjYmluZEdyb3VwIHwgYmluZCBncm91cH0sIHVzdWFsbHkgd2hlbiBhIHJlc291cmNlIGhhcyBjaGFuZ2VkICovXHJcbiAgc2hvdWxkUmVzZXRCaW5kR3JvdXA6IGJvb2xlYW5cclxuICAvKiogRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgd2Ugc2hvdWxkIHJlY3JlYXRlIHRoZSBwYXJlbnRNZXNoIHtAbGluayBjb3JlL2JpbmRHcm91cHMvQmluZEdyb3VwLkJpbmRHcm91cCNiaW5kR3JvdXBMYXlvdXQgfCBHUFUgYmluZCBncm91cCBsYXlvdXR9LCB1c3VhbGx5IHdoZW4gYSByZXNvdXJjZSBsYXlvdXQgaGFzIGNoYW5nZWQgKi9cclxuICBzaG91bGRSZXNldEJpbmRHcm91cExheW91dDogYm9vbGVhblxyXG5cclxuICAvKipcclxuICAgKiBCaW5kaW5nIGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgQmluZGluZ1BhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIG91ciB7QGxpbmsgQmluZGluZ31cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcih7IGxhYmVsID0gJ1VuaWZvcm0nLCBuYW1lID0gJ3VuaWZvcm0nLCBiaW5kaW5nVHlwZSA9ICd1bmlmb3JtJywgdmlzaWJpbGl0eSB9OiBCaW5kaW5nUGFyYW1zKSB7XHJcbiAgICB0aGlzLmxhYmVsID0gbGFiZWxcclxuICAgIHRoaXMubmFtZSA9IHRvQ2FtZWxDYXNlKG5hbWUpXHJcbiAgICB0aGlzLmJpbmRpbmdUeXBlID0gYmluZGluZ1R5cGVcclxuXHJcbiAgICB0aGlzLnZpc2liaWxpdHkgPSB2aXNpYmlsaXR5XHJcbiAgICAgID8gKCgpID0+IHtcclxuICAgICAgICAgIHN3aXRjaCAodmlzaWJpbGl0eSkge1xyXG4gICAgICAgICAgICBjYXNlICd2ZXJ0ZXgnOlxyXG4gICAgICAgICAgICAgIHJldHVybiBHUFVTaGFkZXJTdGFnZS5WRVJURVhcclxuICAgICAgICAgICAgY2FzZSAnZnJhZ21lbnQnOlxyXG4gICAgICAgICAgICAgIHJldHVybiBHUFVTaGFkZXJTdGFnZS5GUkFHTUVOVFxyXG4gICAgICAgICAgICBjYXNlICdjb21wdXRlJzpcclxuICAgICAgICAgICAgICByZXR1cm4gR1BVU2hhZGVyU3RhZ2UuQ09NUFVURVxyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgIHJldHVybiBHUFVTaGFkZXJTdGFnZS5WRVJURVggfCBHUFVTaGFkZXJTdGFnZS5GUkFHTUVOVCB8IEdQVVNoYWRlclN0YWdlLkNPTVBVVEVcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KSgpXHJcbiAgICAgIDogR1BVU2hhZGVyU3RhZ2UuVkVSVEVYIHwgR1BVU2hhZGVyU3RhZ2UuRlJBR01FTlQgfCBHUFVTaGFkZXJTdGFnZS5DT01QVVRFXHJcblxyXG4gICAgdGhpcy5vcHRpb25zID0ge1xyXG4gICAgICBsYWJlbCxcclxuICAgICAgbmFtZSxcclxuICAgICAgYmluZGluZ1R5cGUsXHJcbiAgICAgIHZpc2liaWxpdHksXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zaG91bGRSZXNldEJpbmRHcm91cCA9IGZhbHNlXHJcbiAgICB0aGlzLnNob3VsZFJlc2V0QmluZEdyb3VwTGF5b3V0ID0gZmFsc2VcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmluZGluZ1R5cGUgfSBmcm9tICcuL0JpbmRpbmcnXG5pbXBvcnQgeyBCdWZmZXJCaW5kaW5nIH0gZnJvbSAnLi9CdWZmZXJCaW5kaW5nJ1xuaW1wb3J0IHsgVGV4dHVyZUJpbmRpbmcgfSBmcm9tICcuL1RleHR1cmVCaW5kaW5nJ1xuXG4vKiogRGVmaW5lcyBhIHR5cGVkIGFycmF5ICovXG5leHBvcnQgdHlwZSBUeXBlZEFycmF5ID1cbiAgfCBJbnQ4QXJyYXlcbiAgfCBVaW50OEFycmF5XG4gIHwgVWludDhDbGFtcGVkQXJyYXlcbiAgfCBJbnQxNkFycmF5XG4gIHwgVWludDE2QXJyYXlcbiAgfCBJbnQzMkFycmF5XG4gIHwgVWludDMyQXJyYXlcbiAgfCBGbG9hdDMyQXJyYXlcbiAgfCBGbG9hdDY0QXJyYXlcblxuLyoqIERlZmluZXMgYSB0eXBlZCBhcnJheSBjb25zdHJ1Y3RvciAqL1xuZXhwb3J0IHR5cGUgVHlwZWRBcnJheUNvbnN0cnVjdG9yID1cbiAgfCBJbnQ4QXJyYXlDb25zdHJ1Y3RvclxuICB8IFVpbnQ4QXJyYXlDb25zdHJ1Y3RvclxuICB8IEludDE2QXJyYXlDb25zdHJ1Y3RvclxuICB8IFVpbnQxNkFycmF5Q29uc3RydWN0b3JcbiAgfCBJbnQzMkFycmF5Q29uc3RydWN0b3JcbiAgfCBVaW50MzJBcnJheUNvbnN0cnVjdG9yXG4gIHwgRmxvYXQzMkFycmF5Q29uc3RydWN0b3JcbiAgfCBGbG9hdDY0QXJyYXlDb25zdHJ1Y3RvclxuXG4vKiogRGVmaW5lcyB0aGUgcG9zc2libGUgV0dTTCB2YXJpYWJsZSB0eXBlcyAqL1xuZXhwb3J0IHR5cGUgV0dTTFZhcmlhYmxlVHlwZSA9IHN0cmluZyAvLyBUT0RPICdtYXQ0eDRmJywgJ21hdDN4M2YnLCAndmVjM2YnLCAndmVjMmYnLCAnZjMyJyBldGNcblxuLyoqXG4gKiBEZWZpbmVzIGEge0BsaW5rIEJ1ZmZlckxheW91dH0gb2JqZWN0IHVzZWQgdG8gcGFkIG91ciB7QGxpbmsgR1BVQnVmZmVyfSBhcnJheXNcbiAqL1xuZXhwb3J0IHR5cGUgQnVmZmVyTGF5b3V0ID0ge1xuICAvKiogTnVtYmVyIG9mIGVsZW1lbnRzIGhvbGQgYnkgdGhpcyB2YXJpYWJsZSB0eXBlICovXG4gIG51bUVsZW1lbnRzOiBudW1iZXJcbiAgLyoqIFJlcXVpcmVkIGFsaWdubWVudCBieSB0aGlzIHZhcmlhYmxlIHR5cGUgKi9cbiAgYWxpZ246IG51bWJlclxuICAvKiogU2l6ZSBpbiBieXRlcyBvZiB0aGlzIHZhcmlhYmxlIHR5cGUgKi9cbiAgc2l6ZTogbnVtYmVyXG4gIC8qKiBWYXJpYWJsZSB0eXBlICovXG4gIHR5cGU6IFdHU0xWYXJpYWJsZVR5cGVcbiAgLyoqIFR5cGVkIGFycmF5IGNvbnN0cnVjdG9yIHJlcXVpcmVkIGJ5IHRoaXMgdmFyaWFibGUgdHlwZSAqL1xuICBWaWV3OiBUeXBlZEFycmF5Q29uc3RydWN0b3JcbiAgLyoqIFBhZCB2YWx1ZXMgcmVxdWlyZWQgYnkgdGhpcyB2YXJpYWJsZSB0eXBlICovXG4gIHBhZD86IG51bWJlcltdXG59XG5cbi8vIGZyb20gaHR0cHM6Ly9naXRodWIuY29tL2dyZWdnbWFuL3dlYmdwdS11dGlscy9ibG9iL21haW4vc3JjL2J1ZmZlci12aWV3cy50c1xuLyoqXG4gKiBHZXQgdGhlIGNvcnJlY3QgW2J1ZmZlciBsYXlvdXRde0BsaW5rIEJ1ZmZlckxheW91dH0gZm9yIGdpdmVuIFt2YXJpYWJsZSB0eXBlXXtAbGluayBXR1NMVmFyaWFibGVUeXBlfVxuICogQHBhcmFtIGJ1ZmZlclR5cGUgLSBbdmFyaWFibGUgdHlwZV17QGxpbmsgV0dTTFZhcmlhYmxlVHlwZX0gdG8gdXNlXG4gKiBAcmV0dXJucyAtIHRoZSBbYnVmZmVyIGxheW91dF17QGxpbmsgQnVmZmVyTGF5b3V0fVxuICovXG5leHBvcnQgY29uc3QgZ2V0QnVmZmVyTGF5b3V0ID0gKGJ1ZmZlclR5cGU6IFdHU0xWYXJpYWJsZVR5cGUpOiBCdWZmZXJMYXlvdXQgPT4ge1xuICBjb25zdCBidWZmZXJMYXlvdXRzID0ge1xuICAgIGkzMjogeyBudW1FbGVtZW50czogMSwgYWxpZ246IDQsIHNpemU6IDQsIHR5cGU6ICdpMzInLCBWaWV3OiBJbnQzMkFycmF5IH0sXG4gICAgdTMyOiB7IG51bUVsZW1lbnRzOiAxLCBhbGlnbjogNCwgc2l6ZTogNCwgdHlwZTogJ3UzMicsIFZpZXc6IFVpbnQzMkFycmF5IH0sXG4gICAgZjMyOiB7IG51bUVsZW1lbnRzOiAxLCBhbGlnbjogNCwgc2l6ZTogNCwgdHlwZTogJ2YzMicsIFZpZXc6IEZsb2F0MzJBcnJheSB9LFxuICAgIGYxNjogeyBudW1FbGVtZW50czogMSwgYWxpZ246IDIsIHNpemU6IDIsIHR5cGU6ICd1MTYnLCBWaWV3OiBVaW50MTZBcnJheSB9LFxuXG4gICAgdmVjMmY6IHsgbnVtRWxlbWVudHM6IDIsIGFsaWduOiA4LCBzaXplOiA4LCB0eXBlOiAnZjMyJywgVmlldzogRmxvYXQzMkFycmF5IH0sXG4gICAgdmVjMmk6IHsgbnVtRWxlbWVudHM6IDIsIGFsaWduOiA4LCBzaXplOiA4LCB0eXBlOiAnaTMyJywgVmlldzogSW50MzJBcnJheSB9LFxuICAgIHZlYzJ1OiB7IG51bUVsZW1lbnRzOiAyLCBhbGlnbjogOCwgc2l6ZTogOCwgdHlwZTogJ3UzMicsIFZpZXc6IFVpbnQzMkFycmF5IH0sXG4gICAgdmVjMmg6IHsgbnVtRWxlbWVudHM6IDIsIGFsaWduOiA0LCBzaXplOiA0LCB0eXBlOiAndTE2JywgVmlldzogVWludDE2QXJyYXkgfSxcbiAgICB2ZWMzaTogeyBudW1FbGVtZW50czogMywgYWxpZ246IDE2LCBzaXplOiAxMiwgdHlwZTogJ2kzMicsIFZpZXc6IEludDMyQXJyYXkgfSxcbiAgICB2ZWMzdTogeyBudW1FbGVtZW50czogMywgYWxpZ246IDE2LCBzaXplOiAxMiwgdHlwZTogJ3UzMicsIFZpZXc6IFVpbnQzMkFycmF5IH0sXG4gICAgdmVjM2Y6IHsgbnVtRWxlbWVudHM6IDMsIGFsaWduOiAxNiwgc2l6ZTogMTIsIHR5cGU6ICdmMzInLCBWaWV3OiBGbG9hdDMyQXJyYXkgfSxcbiAgICB2ZWMzaDogeyBudW1FbGVtZW50czogMywgYWxpZ246IDgsIHNpemU6IDYsIHR5cGU6ICd1MTYnLCBWaWV3OiBVaW50MTZBcnJheSB9LFxuICAgIHZlYzRpOiB7IG51bUVsZW1lbnRzOiA0LCBhbGlnbjogMTYsIHNpemU6IDE2LCB0eXBlOiAnaTMyJywgVmlldzogSW50MzJBcnJheSB9LFxuICAgIHZlYzR1OiB7IG51bUVsZW1lbnRzOiA0LCBhbGlnbjogMTYsIHNpemU6IDE2LCB0eXBlOiAndTMyJywgVmlldzogVWludDMyQXJyYXkgfSxcbiAgICB2ZWM0ZjogeyBudW1FbGVtZW50czogNCwgYWxpZ246IDE2LCBzaXplOiAxNiwgdHlwZTogJ2YzMicsIFZpZXc6IEZsb2F0MzJBcnJheSB9LFxuICAgIHZlYzRoOiB7IG51bUVsZW1lbnRzOiA0LCBhbGlnbjogOCwgc2l6ZTogOCwgdHlwZTogJ3UxNicsIFZpZXc6IFVpbnQxNkFycmF5IH0sXG5cbiAgICAvLyBBbGlnbk9mKHZlY1IpXHRTaXplT2YoYXJyYXk8dmVjUiwgQz4pXG4gICAgbWF0MngyZjogeyBudW1FbGVtZW50czogNCwgYWxpZ246IDgsIHNpemU6IDE2LCB0eXBlOiAnZjMyJywgVmlldzogRmxvYXQzMkFycmF5IH0sXG4gICAgbWF0MngyaDogeyBudW1FbGVtZW50czogNCwgYWxpZ246IDQsIHNpemU6IDgsIHR5cGU6ICd1MTYnLCBWaWV3OiBVaW50MTZBcnJheSB9LFxuICAgIG1hdDN4MmY6IHsgbnVtRWxlbWVudHM6IDYsIGFsaWduOiA4LCBzaXplOiAyNCwgdHlwZTogJ2YzMicsIFZpZXc6IEZsb2F0MzJBcnJheSB9LFxuICAgIG1hdDN4Mmg6IHsgbnVtRWxlbWVudHM6IDYsIGFsaWduOiA0LCBzaXplOiAxMiwgdHlwZTogJ3UxNicsIFZpZXc6IFVpbnQxNkFycmF5IH0sXG4gICAgbWF0NHgyZjogeyBudW1FbGVtZW50czogOCwgYWxpZ246IDgsIHNpemU6IDMyLCB0eXBlOiAnZjMyJywgVmlldzogRmxvYXQzMkFycmF5IH0sXG4gICAgbWF0NHgyaDogeyBudW1FbGVtZW50czogOCwgYWxpZ246IDQsIHNpemU6IDE2LCB0eXBlOiAndTE2JywgVmlldzogVWludDE2QXJyYXkgfSxcbiAgICBtYXQyeDNmOiB7IG51bUVsZW1lbnRzOiA4LCBhbGlnbjogMTYsIHNpemU6IDMyLCBwYWQ6IFszLCAxXSwgdHlwZTogJ2YzMicsIFZpZXc6IEZsb2F0MzJBcnJheSB9LFxuICAgIG1hdDJ4M2g6IHsgbnVtRWxlbWVudHM6IDgsIGFsaWduOiA4LCBzaXplOiAxNiwgcGFkOiBbMywgMV0sIHR5cGU6ICd1MTYnLCBWaWV3OiBVaW50MTZBcnJheSB9LFxuICAgIG1hdDN4M2Y6IHsgbnVtRWxlbWVudHM6IDEyLCBhbGlnbjogMTYsIHNpemU6IDQ4LCBwYWQ6IFszLCAxXSwgdHlwZTogJ2YzMicsIFZpZXc6IEZsb2F0MzJBcnJheSB9LFxuICAgIG1hdDN4M2g6IHsgbnVtRWxlbWVudHM6IDEyLCBhbGlnbjogOCwgc2l6ZTogMjQsIHBhZDogWzMsIDFdLCB0eXBlOiAndTE2JywgVmlldzogVWludDE2QXJyYXkgfSxcbiAgICBtYXQ0eDNmOiB7IG51bUVsZW1lbnRzOiAxNiwgYWxpZ246IDE2LCBzaXplOiA2NCwgcGFkOiBbMywgMV0sIHR5cGU6ICdmMzInLCBWaWV3OiBGbG9hdDMyQXJyYXkgfSxcbiAgICBtYXQ0eDNoOiB7IG51bUVsZW1lbnRzOiAxNiwgYWxpZ246IDgsIHNpemU6IDMyLCBwYWQ6IFszLCAxXSwgdHlwZTogJ3UxNicsIFZpZXc6IFVpbnQxNkFycmF5IH0sXG4gICAgbWF0Mng0ZjogeyBudW1FbGVtZW50czogOCwgYWxpZ246IDE2LCBzaXplOiAzMiwgdHlwZTogJ2YzMicsIFZpZXc6IEZsb2F0MzJBcnJheSB9LFxuICAgIG1hdDJ4NGg6IHsgbnVtRWxlbWVudHM6IDgsIGFsaWduOiA4LCBzaXplOiAxNiwgdHlwZTogJ3UxNicsIFZpZXc6IFVpbnQxNkFycmF5IH0sXG4gICAgbWF0M3g0ZjogeyBudW1FbGVtZW50czogMTIsIGFsaWduOiAxNiwgc2l6ZTogNDgsIHBhZDogWzMsIDFdLCB0eXBlOiAnZjMyJywgVmlldzogRmxvYXQzMkFycmF5IH0sXG4gICAgbWF0M3g0aDogeyBudW1FbGVtZW50czogMTIsIGFsaWduOiA4LCBzaXplOiAyNCwgcGFkOiBbMywgMV0sIHR5cGU6ICd1MTYnLCBWaWV3OiBVaW50MTZBcnJheSB9LFxuICAgIG1hdDR4NGY6IHsgbnVtRWxlbWVudHM6IDE2LCBhbGlnbjogMTYsIHNpemU6IDY0LCB0eXBlOiAnZjMyJywgVmlldzogRmxvYXQzMkFycmF5IH0sXG4gICAgbWF0NHg0aDogeyBudW1FbGVtZW50czogMTYsIGFsaWduOiA4LCBzaXplOiAzMiwgdHlwZTogJ3UxNicsIFZpZXc6IFVpbnQxNkFycmF5IH0sXG4gIH1cblxuICByZXR1cm4gYnVmZmVyTGF5b3V0c1tidWZmZXJUeXBlXVxufVxuXG4vKipcbiAqIEdldCB0aGUgY29ycmVjdCBXR1NMIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGNvZGUgZnJhZ21lbnQgYmFzZWQgb24gdGhlIGdpdmVuIFtidWZmZXIgYmluZGluZ117QGxpbmsgQnVmZmVyQmluZGluZ31cbiAqIEBwYXJhbSBiaW5kaW5nIC0gW2J1ZmZlciBiaW5kaW5nXXtAbGluayBCdWZmZXJCaW5kaW5nfSB0byB1c2VcbiAqIEByZXR1cm5zIC0gV0dTTCB2YXJpYWJsZSBkZWNsYXJhdGlvbiBjb2RlIGZyYWdtZW50XG4gKi9cbmV4cG9ydCBjb25zdCBnZXRCaW5kaW5nV0dTTFZhclR5cGUgPSAoYmluZGluZzogQnVmZmVyQmluZGluZyk6IHN0cmluZyA9PiB7XG4gIHJldHVybiAoKCkgPT4ge1xuICAgIHN3aXRjaCAoYmluZGluZy5iaW5kaW5nVHlwZSkge1xuICAgICAgY2FzZSAnc3RvcmFnZSc6XG4gICAgICAgIHJldHVybiBgdmFyPCR7YmluZGluZy5iaW5kaW5nVHlwZX0sICR7YmluZGluZy5vcHRpb25zLmFjY2Vzc30+YFxuICAgICAgY2FzZSAndW5pZm9ybSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gJ3Zhcjx1bmlmb3JtPidcbiAgICB9XG4gIH0pKClcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNvcnJlY3QgV0dTTCB2YXJpYWJsZSBkZWNsYXJhdGlvbiBjb2RlIGZyYWdtZW50IGJhc2VkIG9uIHRoZSBnaXZlbiBbdGV4dHVyZSBiaW5kaW5nXXtAbGluayBUZXh0dXJlQmluZGluZ31cbiAqIEBwYXJhbSBiaW5kaW5nIC0gW3RleHR1cmUgYmluZGluZ117QGxpbmsgVGV4dHVyZUJpbmRpbmd9IHRvIHVzZVxuICogQHJldHVybnMgLSBXR1NMIHZhcmlhYmxlIGRlY2xhcmF0aW9uIGNvZGUgZnJhZ21lbnRcbiAqL1xuZXhwb3J0IGNvbnN0IGdldFRleHR1cmVCaW5kaW5nV0dTTFZhclR5cGUgPSAoYmluZGluZzogVGV4dHVyZUJpbmRpbmcpOiBzdHJpbmcgPT4ge1xuICBpZiAoYmluZGluZy5iaW5kaW5nVHlwZSA9PT0gJ2V4dGVybmFsVGV4dHVyZScpIHtcbiAgICByZXR1cm4gYHZhciAke2JpbmRpbmcubmFtZX06IHRleHR1cmVfZXh0ZXJuYWw7YFxuICB9XG5cbiAgcmV0dXJuIGJpbmRpbmcuYmluZGluZ1R5cGUgPT09ICdzdG9yYWdlVGV4dHVyZSdcbiAgICA/IGB2YXIgJHtiaW5kaW5nLm5hbWV9OiB0ZXh0dXJlX3N0b3JhZ2VfJHtiaW5kaW5nLm9wdGlvbnMudmlld0RpbWVuc2lvbn08JHtiaW5kaW5nLm9wdGlvbnMuZm9ybWF0fSwgJHtiaW5kaW5nLm9wdGlvbnMuYWNjZXNzfT47YFxuICAgIDogYmluZGluZy5iaW5kaW5nVHlwZSA9PT0gJ2RlcHRoVGV4dHVyZSdcbiAgICA/IGB2YXIgJHtiaW5kaW5nLm5hbWV9OiB0ZXh0dXJlX2RlcHRoJHtiaW5kaW5nLm9wdGlvbnMubXVsdGlzYW1wbGVkID8gJ19tdWx0aXNhbXBsZWQnIDogJyd9XyR7XG4gICAgICAgIGJpbmRpbmcub3B0aW9ucy52aWV3RGltZW5zaW9uXG4gICAgICB9O2BcbiAgICA6IGB2YXIgJHtiaW5kaW5nLm5hbWV9OiB0ZXh0dXJlJHtiaW5kaW5nLm9wdGlvbnMubXVsdGlzYW1wbGVkID8gJ19tdWx0aXNhbXBsZWQnIDogJyd9XyR7XG4gICAgICAgIGJpbmRpbmcub3B0aW9ucy52aWV3RGltZW5zaW9uXG4gICAgICB9PGYzMj47YFxufVxuXG4vKipcbiAqIEdldCB0aGUgY29ycmVjdCBbYmluZCBncm91cCBsYXlvdXRde0BsaW5rIEdQVUJpbmRHcm91cExheW91dH0gcmVzb3VyY2UgdHlwZSBiYXNlZCBvbiB0aGUgZ2l2ZW4gW2JpbmRpbmcgdHlwZV17QGxpbmsgQmluZGluZ1R5cGV9XG4gKiBAcGFyYW0gYmluZGluZyAtIFtidWZmZXIgYmluZGluZ117QGxpbmsgQnVmZmVyQmluZGluZ30gdG8gdXNlXG4gKiBAcmV0dXJucyAtIHtAbGluayBHUFVCaW5kR3JvdXBMYXlvdXQgfCBiaW5kIGdyb3VwIGxheW91dH0gcmVzb3VyY2UgdHlwZVxuICovXG5leHBvcnQgY29uc3QgZ2V0QmluZEdyb3VwTGF5b3V0QmluZGluZ1R5cGUgPSAoYmluZGluZzogQnVmZmVyQmluZGluZyk6IEdQVUJ1ZmZlckJpbmRpbmdUeXBlID0+IHtcbiAgaWYgKGJpbmRpbmcuYmluZGluZ1R5cGUgPT09ICdzdG9yYWdlJyAmJiBiaW5kaW5nLm9wdGlvbnMuYWNjZXNzID09PSAncmVhZF93cml0ZScpIHtcbiAgICByZXR1cm4gJ3N0b3JhZ2UnXG4gIH0gZWxzZSBpZiAoYmluZGluZy5iaW5kaW5nVHlwZSA9PT0gJ3N0b3JhZ2UnKSB7XG4gICAgcmV0dXJuICdyZWFkLW9ubHktc3RvcmFnZSdcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gJ3VuaWZvcm0nXG4gIH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNvcnJlY3QgW2JpbmQgZ3JvdXAgbGF5b3V0XXtAbGluayBHUFVCaW5kR3JvdXBMYXlvdXR9IHJlc291cmNlIHR5cGUgYmFzZWQgb24gdGhlIGdpdmVuIFt0ZXh0dXJlIGJpbmRpbmcgdHlwZV17QGxpbmsgQmluZGluZ1R5cGV9XG4gKiBAcGFyYW0gYmluZGluZyAtIFt0ZXh0dXJlIGJpbmRpbmdde0BsaW5rIFRleHR1cmVCaW5kaW5nfSB0byB1c2VcbiAqIEByZXR1cm5zIC0gW2JpbmQgZ3JvdXAgbGF5b3V0XXtAbGluayBHUFVCaW5kR3JvdXBMYXlvdXR9IHJlc291cmNlIHR5cGVcbiAqL1xuZXhwb3J0IGNvbnN0IGdldEJpbmRHcm91cExheW91dFRleHR1cmVCaW5kaW5nVHlwZSA9IChcbiAgYmluZGluZzogVGV4dHVyZUJpbmRpbmdcbik6IEdQVVRleHR1cmVCaW5kaW5nTGF5b3V0IHwgR1BVRXh0ZXJuYWxUZXh0dXJlQmluZGluZ0xheW91dCB8IEdQVVN0b3JhZ2VUZXh0dXJlQmluZGluZ0xheW91dCB8IG51bGwgPT4ge1xuICByZXR1cm4gKCgpID0+IHtcbiAgICBzd2l0Y2ggKGJpbmRpbmcuYmluZGluZ1R5cGUpIHtcbiAgICAgIGNhc2UgJ2V4dGVybmFsVGV4dHVyZSc6XG4gICAgICAgIHJldHVybiB7IGV4dGVybmFsVGV4dHVyZToge30gfVxuICAgICAgY2FzZSAnc3RvcmFnZVRleHR1cmUnOlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHN0b3JhZ2VUZXh0dXJlOiB7XG4gICAgICAgICAgICBmb3JtYXQ6IGJpbmRpbmcub3B0aW9ucy5mb3JtYXQsXG4gICAgICAgICAgICB2aWV3RGltZW5zaW9uOiBiaW5kaW5nLm9wdGlvbnMudmlld0RpbWVuc2lvbixcbiAgICAgICAgICB9IGFzIEdQVVN0b3JhZ2VUZXh0dXJlQmluZGluZ0xheW91dCxcbiAgICAgICAgfVxuICAgICAgY2FzZSAndGV4dHVyZSc6XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdGV4dHVyZToge1xuICAgICAgICAgICAgbXVsdGlzYW1wbGVkOiBiaW5kaW5nLm9wdGlvbnMubXVsdGlzYW1wbGVkLFxuICAgICAgICAgICAgdmlld0RpbWVuc2lvbjogYmluZGluZy5vcHRpb25zLnZpZXdEaW1lbnNpb24sXG4gICAgICAgICAgfSBhcyBHUFVUZXh0dXJlQmluZGluZ0xheW91dCxcbiAgICAgICAgfVxuICAgICAgY2FzZSAnZGVwdGhUZXh0dXJlJzpcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICB0ZXh0dXJlOiB7XG4gICAgICAgICAgICBtdWx0aXNhbXBsZWQ6IGJpbmRpbmcub3B0aW9ucy5tdWx0aXNhbXBsZWQsXG4gICAgICAgICAgICBmb3JtYXQ6IGJpbmRpbmcub3B0aW9ucy5mb3JtYXQsXG4gICAgICAgICAgICB2aWV3RGltZW5zaW9uOiBiaW5kaW5nLm9wdGlvbnMudmlld0RpbWVuc2lvbixcbiAgICAgICAgICAgIHNhbXBsZVR5cGU6ICdkZXB0aCcsXG4gICAgICAgICAgfSBhcyBHUFVUZXh0dXJlQmluZGluZ0xheW91dCxcbiAgICAgICAgfVxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH0pKClcbn1cbiIsIi8qKlxuICogUmVhbGx5IGJhc2ljIDJEIHZlY3RvciBjbGFzcyB1c2VkIGZvciB2ZWN0b3IgY2FsY3VsYXRpb25zXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9kZXYvc3JjL21hdGgvVmVjdG9yMi5qc1xuICogQHNlZSBodHRwOi8vZ2xtYXRyaXgubmV0L2RvY3MvdmVjMi5qcy5odG1sXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWMyIHtcbiAgLyoqIFRoZSB0eXBlIG9mIHRoZSB7QGxpbmsgVmVjMn0gKi9cbiAgdHlwZTogc3RyaW5nXG4gIC8qKiBYIGNvbXBvbmVudCBvZiBvdXIge0BsaW5rIFZlYzJ9ICovXG4gIHByaXZhdGUgX3g6IG51bWJlclxuICAvKiogWSBjb21wb25lbnQgb2Ygb3VyIHtAbGluayBWZWMyfSAqL1xuICBwcml2YXRlIF95OiBudW1iZXJcblxuICAvKiogZnVuY3Rpb24gYXNzaWduZWQgdG8gdGhlIHtAbGluayBvbkNoYW5nZX0gY2FsbGJhY2sgKi9cbiAgX29uQ2hhbmdlQ2FsbGJhY2s/KCk6IHZvaWRcblxuICAvKipcbiAgICogVmVjMiBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0geCAtIFggY29tcG9uZW50IG9mIG91ciB7QGxpbmsgVmVjMn1cbiAgICogQHBhcmFtIHkgLSBZIGNvbXBvbmVudCBvZiBvdXIge0BsaW5rIFZlYzJ9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih4ID0gMCwgeSA9IHgpIHtcbiAgICB0aGlzLnR5cGUgPSAnVmVjMidcblxuICAgIHRoaXMuX3ggPSB4XG4gICAgdGhpcy5feSA9IHlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIFggY29tcG9uZW50IG9mIHRoZSB7QGxpbmsgVmVjMn1cbiAgICovXG4gIGdldCB4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3hcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIFggY29tcG9uZW50IG9mIHRoZSB7QGxpbmsgVmVjMn1cbiAgICogQ2FuIHRyaWdnZXIge0BsaW5rIG9uQ2hhbmdlfSBjYWxsYmFja1xuICAgKiBAcGFyYW0gdmFsdWUgLSBYIGNvbXBvbmVudCB0byBzZXRcbiAgICovXG4gIHNldCB4KHZhbHVlOiBudW1iZXIpIHtcbiAgICBjb25zdCBjaGFuZ2VkID0gdmFsdWUgIT09IHRoaXMuX3hcbiAgICB0aGlzLl94ID0gdmFsdWVcbiAgICBjaGFuZ2VkICYmIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgJiYgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBZIGNvbXBvbmVudCBvZiB0aGUge0BsaW5rIFZlYzJ9XG4gICAqL1xuICBnZXQgeSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl95XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBZIGNvbXBvbmVudCBvZiB0aGUge0BsaW5rIFZlYzJ9XG4gICAqIENhbiB0cmlnZ2VyIHtAbGluayBvbkNoYW5nZX0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHZhbHVlIC0gWSBjb21wb25lbnQgdG8gc2V0XG4gICAqL1xuICBzZXQgeSh2YWx1ZTogbnVtYmVyKSB7XG4gICAgY29uc3QgY2hhbmdlZCA9IHZhbHVlICE9PSB0aGlzLl95XG4gICAgdGhpcy5feSA9IHZhbHVlXG4gICAgY2hhbmdlZCAmJiB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrICYmIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGF0IGxlYXN0IG9uZSBjb21wb25lbnQgb2YgdGhlIHtAbGluayBWZWMyfSBoYXMgY2hhbmdlZFxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBydW4gd2hlbiBhdCBsZWFzdCBvbmUgY29tcG9uZW50IG9mIHRoZSB7QGxpbmsgVmVjMn0gaGFzIGNoYW5nZWRcbiAgICogQHJldHVybnMgLSBvdXIge0BsaW5rIFZlYzJ9XG4gICAqL1xuICBvbkNoYW5nZShjYWxsYmFjazogKCkgPT4gdm9pZCk6IFZlYzIge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHtAbGluayBWZWMyfSBmcm9tIHZhbHVlc1xuICAgKiBAcGFyYW0geCAtIG5ldyBYIGNvbXBvbmVudCB0byBzZXRcbiAgICogQHBhcmFtIHkgLSBuZXcgWSBjb21wb25lbnQgdG8gc2V0XG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgVmVjMn0gYWZ0ZXIgYmVpbmcgc2V0XG4gICAqL1xuICBzZXQoeCA9IDAsIHkgPSB4KTogVmVjMiB7XG4gICAgdGhpcy54ID0geFxuICAgIHRoaXMueSA9IHlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQWRkIGEge0BsaW5rIFZlYzJ9IHRvIHRoaXMge0BsaW5rIFZlYzJ9XG4gICAqIEBwYXJhbSB2ZWN0b3IgLSB7QGxpbmsgVmVjMn0gdG8gYWRkXG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgVmVjMn0gYWZ0ZXIgYWRkaXRpb25cbiAgICovXG4gIGFkZCh2ZWN0b3I6IFZlYzIgPSBuZXcgVmVjMigpKTogVmVjMiB7XG4gICAgdGhpcy54ICs9IHZlY3Rvci54XG4gICAgdGhpcy55ICs9IHZlY3Rvci55XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHNjYWxhciB0byBhbGwgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyB7QGxpbmsgVmVjMn1cbiAgICogQHBhcmFtIHZhbHVlIC0gbnVtYmVyIHRvIGFkZFxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzJ9IGFmdGVyIGFkZGl0aW9uXG4gICAqL1xuICBhZGRTY2FsYXIodmFsdWUgPSAwKTogVmVjMiB7XG4gICAgdGhpcy54ICs9IHZhbHVlXG4gICAgdGhpcy55ICs9IHZhbHVlXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0IGEge0BsaW5rIFZlYzJ9IGZyb20gdGhpcyB7QGxpbmsgVmVjMn1cbiAgICogQHBhcmFtIHZlY3RvciAtIHtAbGluayBWZWMyfSB0byBzdWJ0cmFjdFxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzJ9IGFmdGVyIHN1YnRyYWN0aW9uXG4gICAqL1xuICBzdWIodmVjdG9yOiBWZWMyID0gbmV3IFZlYzIoKSk6IFZlYzIge1xuICAgIHRoaXMueCAtPSB2ZWN0b3IueFxuICAgIHRoaXMueSAtPSB2ZWN0b3IueVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdCBhIHNjYWxhciB0byBhbGwgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyB7QGxpbmsgVmVjMn1cbiAgICogQHBhcmFtIHZhbHVlIC0gbnVtYmVyIHRvIHN1YnRyYWN0XG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgVmVjMn0gYWZ0ZXIgc3VidHJhY3Rpb25cbiAgICovXG4gIHN1YlNjYWxhcih2YWx1ZSA9IDApOiBWZWMyIHtcbiAgICB0aGlzLnggLT0gdmFsdWVcbiAgICB0aGlzLnkgLT0gdmFsdWVcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbHkgYSB7QGxpbmsgVmVjMn0gd2l0aCB0aGlzIHtAbGluayBWZWMyfVxuICAgKiBAcGFyYW0gdmVjdG9yIC0ge0BsaW5rIFZlYzJ9IHRvIG11bHRpcGx5IHdpdGhcbiAgICogQHJldHVybnMgLSB0aGlzIHtAbGluayBWZWMyfSBhZnRlciBtdWx0aXBsaWNhdGlvblxuICAgKi9cbiAgbXVsdGlwbHkodmVjdG9yOiBWZWMyID0gbmV3IFZlYzIoMSkpOiBWZWMyIHtcbiAgICB0aGlzLnggKj0gdmVjdG9yLnhcbiAgICB0aGlzLnkgKj0gdmVjdG9yLnlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbHkgYWxsIGNvbXBvbmVudHMgb2YgdGhpcyB7QGxpbmsgVmVjMn0gd2l0aCBhIHNjYWxhclxuICAgKiBAcGFyYW0gdmFsdWUgLSBudW1iZXIgdG8gbXVsdGlwbHkgd2l0aFxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzJ9IGFmdGVyIG11bHRpcGxpY2F0aW9uXG4gICAqL1xuICBtdWx0aXBseVNjYWxhcih2YWx1ZSA9IDEpOiBWZWMyIHtcbiAgICB0aGlzLnggKj0gdmFsdWVcbiAgICB0aGlzLnkgKj0gdmFsdWVcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ29weSBhIHtAbGluayBWZWMyfSBpbnRvIHRoaXMge0BsaW5rIFZlYzJ9XG4gICAqIEBwYXJhbSB2ZWN0b3IgLSB7QGxpbmsgVmVjMn0gdG8gY29weVxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzJ9IGFmdGVyIGNvcHlcbiAgICovXG4gIGNvcHkodmVjdG9yOiBWZWMyID0gbmV3IFZlYzIoKSk6IFZlYzIge1xuICAgIHRoaXMueCA9IHZlY3Rvci54XG4gICAgdGhpcy55ID0gdmVjdG9yLnlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2xvbmUgdGhpcyB7QGxpbmsgVmVjMn1cbiAgICogQHJldHVybnMgLSBjbG9uZWQge0BsaW5rIFZlYzJ9XG4gICAqL1xuICBjbG9uZSgpOiBWZWMyIHtcbiAgICByZXR1cm4gbmV3IFZlYzIodGhpcy54LCB0aGlzLnkpXG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgbWF4IHZhbHVlcyB0byB0aGlzIHtAbGluayBWZWMyfSBjb21wb25lbnRzXG4gICAqIEBwYXJhbSB2ZWN0b3IgLSB7QGxpbmsgVmVjMn0gcmVwcmVzZW50aW5nIG1heCB2YWx1ZXNcbiAgICogQHJldHVybnMgLSB7QGxpbmsgVmVjMn0gd2l0aCBtYXggdmFsdWVzIGFwcGxpZWRcbiAgICovXG4gIG1heCh2ZWN0b3I6IFZlYzIgPSBuZXcgVmVjMigpKTogVmVjMiB7XG4gICAgdGhpcy54ID0gTWF0aC5tYXgodGhpcy54LCB2ZWN0b3IueClcbiAgICB0aGlzLnkgPSBNYXRoLm1heCh0aGlzLnksIHZlY3Rvci55KVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBtaW4gdmFsdWVzIHRvIHRoaXMge0BsaW5rIFZlYzJ9IGNvbXBvbmVudHNcbiAgICogQHBhcmFtIHZlY3RvciAtIHtAbGluayBWZWMyfSByZXByZXNlbnRpbmcgbWluIHZhbHVlc1xuICAgKiBAcmV0dXJucyAtIHtAbGluayBWZWMyfSB3aXRoIG1pbiB2YWx1ZXMgYXBwbGllZFxuICAgKi9cbiAgbWluKHZlY3RvcjogVmVjMiA9IG5ldyBWZWMyKCkpOiBWZWMyIHtcbiAgICB0aGlzLnggPSBNYXRoLm1pbih0aGlzLngsIHZlY3Rvci54KVxuICAgIHRoaXMueSA9IE1hdGgubWluKHRoaXMueSwgdmVjdG9yLnkpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIENsYW1wIHRoaXMge0BsaW5rIFZlYzJ9IGNvbXBvbmVudHMgYnkgbWluIGFuZCBtYXgge0BsaW5rIFZlYzJ9IHZlY3RvcnNcbiAgICogQHBhcmFtIG1pbiAtIG1pbmltdW0ge0BsaW5rIFZlYzJ9IGNvbXBvbmVudHMgdG8gY29tcGFyZSB3aXRoXG4gICAqIEBwYXJhbSBtYXggLSBtYXhpbXVtIHtAbGluayBWZWMyfSBjb21wb25lbnRzIHRvIGNvbXBhcmUgd2l0aFxuICAgKiBAcmV0dXJucyAtIGNsYW1wZWQge0BsaW5rIFZlYzJ9XG4gICAqL1xuICBjbGFtcChtaW46IFZlYzIgPSBuZXcgVmVjMigpLCBtYXg6IFZlYzIgPSBuZXcgVmVjMigpKTogVmVjMiB7XG4gICAgdGhpcy54ID0gTWF0aC5tYXgobWluLngsIE1hdGgubWluKG1heC54LCB0aGlzLngpKVxuICAgIHRoaXMueSA9IE1hdGgubWF4KG1pbi55LCBNYXRoLm1pbihtYXgueSwgdGhpcy55KSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgMiB7QGxpbmsgVmVjMn0gYXJlIGVxdWFsXG4gICAqIEBwYXJhbSB2ZWN0b3IgLSB7QGxpbmsgVmVjMn0gdG8gY29tcGFyZVxuICAgKiBAcmV0dXJucyAtIHdoZXRoZXIgdGhlIHtAbGluayBWZWMyfSBhcmUgZXF1YWxzIG9yIG5vdFxuICAgKi9cbiAgZXF1YWxzKHZlY3RvcjogVmVjMiA9IG5ldyBWZWMyKCkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy54ID09PSB2ZWN0b3IueCAmJiB0aGlzLnkgPT09IHZlY3Rvci55XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBzcXVhcmUgbGVuZ3RoIG9mIHRoaXMge0BsaW5rIFZlYzJ9XG4gICAqIEByZXR1cm5zIC0gc3F1YXJlIGxlbmd0aCBvZiB0aGlzIHtAbGluayBWZWMyfVxuICAgKi9cbiAgbGVuZ3RoU3EoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICogdGhpcy54ICsgdGhpcy55ICogdGhpcy55XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBsZW5ndGggb2YgdGhpcyB7QGxpbmsgVmVjMn1cbiAgICogQHJldHVybnMgLSBsZW5ndGggb2YgdGhpcyB7QGxpbmsgVmVjMn1cbiAgICovXG4gIGxlbmd0aCgpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5sZW5ndGhTcSgpKVxuICB9XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZSB0aGlzIHtAbGluayBWZWMyfVxuICAgKiBAcmV0dXJucyAtIG5vcm1hbGl6ZWQge0BsaW5rIFZlYzJ9XG4gICAqL1xuICBub3JtYWxpemUoKTogVmVjMiB7XG4gICAgLy8gbm9ybWFsaXplXG4gICAgbGV0IGxlbiA9IHRoaXMueCAqIHRoaXMueCArIHRoaXMueSAqIHRoaXMueVxuICAgIGlmIChsZW4gPiAwKSB7XG4gICAgICBsZW4gPSAxIC8gTWF0aC5zcXJ0KGxlbilcbiAgICB9XG4gICAgdGhpcy54ICo9IGxlblxuICAgIHRoaXMueSAqPSBsZW5cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBkb3QgcHJvZHVjdCBvZiAyIHtAbGluayBWZWMyfVxuICAgKiBAcGFyYW0gdmVjdG9yIC0ge0BsaW5rIFZlYzJ9IHRvIHVzZSBmb3IgZG90IHByb2R1Y3RcbiAgICogQHJldHVybnMgLSBkb3QgcHJvZHVjdCBvZiB0aGUgMiB7QGxpbmsgVmVjMn1cbiAgICovXG4gIGRvdCh2ZWN0b3I6IFZlYzIgPSBuZXcgVmVjMigpKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICogdmVjdG9yLnggKyB0aGlzLnkgKiB2ZWN0b3IueVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgbGluZWFyIGludGVycG9sYXRpb24gb2YgdGhpcyB7QGxpbmsgVmVjMn0gYnkgZ2l2ZW4ge0BsaW5rIFZlYzJ9IGFuZCBhbHBoYSwgd2hlcmUgYWxwaGEgaXMgdGhlIHBlcmNlbnQgZGlzdGFuY2UgYWxvbmcgdGhlIGxpbmVcbiAgICogQHBhcmFtIHZlY3RvciAtIHtAbGluayBWZWMyfSB0byBpbnRlcnBvbGF0ZSB0b3dhcmRzXG4gICAqIEBwYXJhbSBbYWxwaGE9MV0gLSBpbnRlcnBvbGF0aW9uIGZhY3RvciBpbiB0aGUgWzAsIDFdIGludGVydmFsXG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgVmVjMn0gYWZ0ZXIgbGluZWFyIGludGVycG9sYXRpb25cbiAgICovXG4gIGxlcnAodmVjdG9yOiBWZWMyID0gbmV3IFZlYzIoKSwgYWxwaGEgPSAxKTogVmVjMiB7XG4gICAgdGhpcy54ICs9ICh2ZWN0b3IueCAtIHRoaXMueCkgKiBhbHBoYVxuICAgIHRoaXMueSArPSAodmVjdG9yLnkgLSB0aGlzLnkpICogYWxwaGFcblxuICAgIHJldHVybiB0aGlzXG4gIH1cbn1cbiIsImltcG9ydCB7IFZlYzMgfSBmcm9tICcuL1ZlYzMnXG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi9NYXQ0J1xuXG4vKiogRGVmaW5lcyBhbGwgcG9zc2libGUgcm90YXRpb25zIGF4aXMgb3JkZXJzICovXG5leHBvcnQgdHlwZSBBeGlzT3JkZXIgPSAnWFlaJyB8ICdYWlknIHwgJ1lYWicgfCAnWVpYJyB8ICdaWFknIHwgJ1pZWCdcblxuLyoqXG4gKiBSZWFsbHkgYmFzaWMgcXVhdGVybmlvbiBjbGFzcyB1c2VkIGZvciAzRCByb3RhdGlvbiBjYWxjdWxhdGlvbnNcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21yZG9vc2IvdGhyZWUuanMvYmxvYi9kZXYvc3JjL21hdGgvUXVhdGVybmlvbi5qc1xuICovXG5leHBvcnQgY2xhc3MgUXVhdCB7XG4gIC8qKiBUaGUgdHlwZSBvZiB0aGUge0BsaW5rIFF1YXR9ICovXG4gIHR5cGU6IHN0cmluZ1xuICAvKiogT3VyIHF1YXRlcm5pb24gYXJyYXkgKi9cbiAgZWxlbWVudHM6IEZsb2F0MzJBcnJheVxuICAvKiogUm90YXRpb24gYXhpcyBvcmRlciAqL1xuICBheGlzT3JkZXI6IEF4aXNPcmRlclxuXG4gIC8qKlxuICAgKiBRdWF0IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBbZWxlbWVudHNdIC0gaW5pdGlhbCBhcnJheSB0byB1c2VcbiAgICogQHBhcmFtIFtheGlzT3JkZXI9J1hZWiddIC0gYXhpcyBvcmRlciB0byB1c2VcbiAgICovXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnRzOiBGbG9hdDMyQXJyYXkgPSBuZXcgRmxvYXQzMkFycmF5KFswLCAwLCAwLCAxXSksIGF4aXNPcmRlcjogQXhpc09yZGVyID0gJ1hZWicpIHtcbiAgICB0aGlzLnR5cGUgPSAnUXVhdCdcbiAgICB0aGlzLmVsZW1lbnRzID0gZWxlbWVudHNcbiAgICAvLyByb3RhdGlvbiBheGlzIG9yZGVyXG4gICAgdGhpcy5heGlzT3JkZXIgPSBheGlzT3JkZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB7QGxpbmsgUXVhdH0gdmFsdWVzIGZyb20gYW4gYXJyYXlcbiAgICogQHBhcmFtIGFycmF5IC0gYW4gYXJyYXkgb2YgYXQgbGVhc3QgNCBlbGVtZW50c1xuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFF1YXR9IGFmdGVyIGJlaW5nIHNldFxuICAgKi9cbiAgc2V0RnJvbUFycmF5KGFycmF5OiBGbG9hdDMyQXJyYXkgfCBudW1iZXJbXSA9IG5ldyBGbG9hdDMyQXJyYXkoWzAsIDAsIDAsIDFdKSk6IFF1YXQge1xuICAgIHRoaXMuZWxlbWVudHNbMF0gPSBhcnJheVswXVxuICAgIHRoaXMuZWxlbWVudHNbMV0gPSBhcnJheVsxXVxuICAgIHRoaXMuZWxlbWVudHNbMl0gPSBhcnJheVsyXVxuICAgIHRoaXMuZWxlbWVudHNbM10gPSBhcnJheVszXVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSB7QGxpbmsgUXVhdH0gYXhpcyBvcmRlclxuICAgKiBAcGFyYW0gYXhpc09yZGVyIC0gYXhpcyBvcmRlciB0byB1c2VcbiAgICogQHJldHVybnMgLSB0aGlzIHtAbGluayBRdWF0fSBhZnRlciBheGlzIG9yZGVyIGhhcyBiZWVuIHNldFxuICAgKi9cbiAgc2V0QXhpc09yZGVyKGF4aXNPcmRlcjogQXhpc09yZGVyIHwgc3RyaW5nID0gJ1hZWicpOiBRdWF0IHtcbiAgICAvLyBmb3JjZSB1cHBlcmNhc2UgZm9yIHN0cmljdCBlcXVhbGl0eSB0ZXN0c1xuICAgIGF4aXNPcmRlciA9IGF4aXNPcmRlci50b1VwcGVyQ2FzZSgpXG5cbiAgICBzd2l0Y2ggKGF4aXNPcmRlcikge1xuICAgICAgY2FzZSAnWFlaJzpcbiAgICAgIGNhc2UgJ1lYWic6XG4gICAgICBjYXNlICdaWFknOlxuICAgICAgY2FzZSAnWllYJzpcbiAgICAgIGNhc2UgJ1laWCc6XG4gICAgICBjYXNlICdYWlknOlxuICAgICAgICB0aGlzLmF4aXNPcmRlciA9IGF4aXNPcmRlclxuICAgICAgICBicmVha1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgLy8gYXBwbHkgYSBkZWZhdWx0IGF4aXMgb3JkZXJcbiAgICAgICAgdGhpcy5heGlzT3JkZXIgPSAnWFlaJ1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ29weSBhIHtAbGluayBRdWF0fSBpbnRvIHRoaXMge0BsaW5rIFF1YXR9XG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0ge0BsaW5rIFF1YXR9IHRvIGNvcHlcbiAgICogQHJldHVybnMgLSB0aGlzIHtAbGluayBRdWF0fSBhZnRlciBjb3B5XG4gICAqL1xuICBjb3B5KHF1YXRlcm5pb246IFF1YXQgPSBuZXcgUXVhdCgpKTogUXVhdCB7XG4gICAgdGhpcy5lbGVtZW50cyA9IHF1YXRlcm5pb24uZWxlbWVudHNcbiAgICB0aGlzLmF4aXNPcmRlciA9IHF1YXRlcm5pb24uYXhpc09yZGVyXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIGEge0BsaW5rIFF1YXR9XG4gICAqIEByZXR1cm5zIC0gY2xvbmVkIHtAbGluayBRdWF0fVxuICAgKi9cbiAgY2xvbmUoKTogUXVhdCB7XG4gICAgcmV0dXJuIG5ldyBRdWF0KCkuY29weSh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIDIge0BsaW5rIFF1YXR9IGFyZSBlcXVhbFxuICAgKiBAcGFyYW0gcXVhdGVybmlvbiAtIHtAbGluayBRdWF0fSB0byBjaGVjayBhZ2FpbnN0XG4gICAqIEByZXR1cm5zIC0gd2hldGhlciB0aGUge0BsaW5rIFF1YXR9IGFyZSBlcXVhbCBvciBub3RcbiAgICovXG4gIGVxdWFscyhxdWF0ZXJuaW9uOiBRdWF0ID0gbmV3IFF1YXQoKSk6IGJvb2xlYW4ge1xuICAgIHJldHVybiAoXG4gICAgICB0aGlzLmVsZW1lbnRzWzBdID09PSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzBdICYmXG4gICAgICB0aGlzLmVsZW1lbnRzWzFdID09PSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzFdICYmXG4gICAgICB0aGlzLmVsZW1lbnRzWzJdID09PSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzJdICYmXG4gICAgICB0aGlzLmVsZW1lbnRzWzNdID09PSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzNdICYmXG4gICAgICB0aGlzLmF4aXNPcmRlciA9PT0gcXVhdGVybmlvbi5heGlzT3JkZXJcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogU2V0cyBhIHJvdGF0aW9uIHtAbGluayBRdWF0fSB1c2luZyBFdWxlciBhbmdsZXMge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IGFuZCBpdHMgYXhpcyBvcmRlclxuICAgKiBAcGFyYW0gdmVjdG9yIC0gcm90YXRpb24ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHRvIHNldCBvdXIge0BsaW5rIFF1YXR9IGZyb21cbiAgICogQHJldHVybnMgLSB7QGxpbmsgUXVhdH0gYWZ0ZXIgaGF2aW5nIGFwcGxpZWQgdGhlIHJvdGF0aW9uXG4gICAqL1xuICBzZXRGcm9tVmVjMyh2ZWN0b3I6IFZlYzMgPSBuZXcgVmVjMygpKTogUXVhdCB7XG4gICAgY29uc3QgYXggPSB2ZWN0b3IueCAqIDAuNVxuICAgIGNvbnN0IGF5ID0gdmVjdG9yLnkgKiAwLjVcbiAgICBjb25zdCBheiA9IHZlY3Rvci56ICogMC41XG5cbiAgICBjb25zdCBjb3N4ID0gTWF0aC5jb3MoYXgpXG4gICAgY29uc3QgY29zeSA9IE1hdGguY29zKGF5KVxuICAgIGNvbnN0IGNvc3ogPSBNYXRoLmNvcyhheilcbiAgICBjb25zdCBzaW54ID0gTWF0aC5zaW4oYXgpXG4gICAgY29uc3Qgc2lueSA9IE1hdGguc2luKGF5KVxuICAgIGNvbnN0IHNpbnogPSBNYXRoLnNpbihheilcblxuICAgIC8vIFhZWiBvcmRlclxuICAgIGlmICh0aGlzLmF4aXNPcmRlciA9PT0gJ1hZWicpIHtcbiAgICAgIHRoaXMuZWxlbWVudHNbMF0gPSBzaW54ICogY29zeSAqIGNvc3ogKyBjb3N4ICogc2lueSAqIHNpbnpcbiAgICAgIHRoaXMuZWxlbWVudHNbMV0gPSBjb3N4ICogc2lueSAqIGNvc3ogLSBzaW54ICogY29zeSAqIHNpbnpcbiAgICAgIHRoaXMuZWxlbWVudHNbMl0gPSBjb3N4ICogY29zeSAqIHNpbnogKyBzaW54ICogc2lueSAqIGNvc3pcbiAgICAgIHRoaXMuZWxlbWVudHNbM10gPSBjb3N4ICogY29zeSAqIGNvc3ogLSBzaW54ICogc2lueSAqIHNpbnpcbiAgICB9IGVsc2UgaWYgKHRoaXMuYXhpc09yZGVyID09PSAnWVhaJykge1xuICAgICAgdGhpcy5lbGVtZW50c1swXSA9IHNpbnggKiBjb3N5ICogY29zeiArIGNvc3ggKiBzaW55ICogc2luelxuICAgICAgdGhpcy5lbGVtZW50c1sxXSA9IGNvc3ggKiBzaW55ICogY29zeiAtIHNpbnggKiBjb3N5ICogc2luelxuICAgICAgdGhpcy5lbGVtZW50c1syXSA9IGNvc3ggKiBjb3N5ICogc2lueiAtIHNpbnggKiBzaW55ICogY29zelxuICAgICAgdGhpcy5lbGVtZW50c1szXSA9IGNvc3ggKiBjb3N5ICogY29zeiArIHNpbnggKiBzaW55ICogc2luelxuICAgIH0gZWxzZSBpZiAodGhpcy5heGlzT3JkZXIgPT09ICdaWFknKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzWzBdID0gc2lueCAqIGNvc3kgKiBjb3N6IC0gY29zeCAqIHNpbnkgKiBzaW56XG4gICAgICB0aGlzLmVsZW1lbnRzWzFdID0gY29zeCAqIHNpbnkgKiBjb3N6ICsgc2lueCAqIGNvc3kgKiBzaW56XG4gICAgICB0aGlzLmVsZW1lbnRzWzJdID0gY29zeCAqIGNvc3kgKiBzaW56ICsgc2lueCAqIHNpbnkgKiBjb3N6XG4gICAgICB0aGlzLmVsZW1lbnRzWzNdID0gY29zeCAqIGNvc3kgKiBjb3N6IC0gc2lueCAqIHNpbnkgKiBzaW56XG4gICAgfSBlbHNlIGlmICh0aGlzLmF4aXNPcmRlciA9PT0gJ1pZWCcpIHtcbiAgICAgIHRoaXMuZWxlbWVudHNbMF0gPSBzaW54ICogY29zeSAqIGNvc3ogLSBjb3N4ICogc2lueSAqIHNpbnpcbiAgICAgIHRoaXMuZWxlbWVudHNbMV0gPSBjb3N4ICogc2lueSAqIGNvc3ogKyBzaW54ICogY29zeSAqIHNpbnpcbiAgICAgIHRoaXMuZWxlbWVudHNbMl0gPSBjb3N4ICogY29zeSAqIHNpbnogLSBzaW54ICogc2lueSAqIGNvc3pcbiAgICAgIHRoaXMuZWxlbWVudHNbM10gPSBjb3N4ICogY29zeSAqIGNvc3ogKyBzaW54ICogc2lueSAqIHNpbnpcbiAgICB9IGVsc2UgaWYgKHRoaXMuYXhpc09yZGVyID09PSAnWVpYJykge1xuICAgICAgdGhpcy5lbGVtZW50c1swXSA9IHNpbnggKiBjb3N5ICogY29zeiArIGNvc3ggKiBzaW55ICogc2luelxuICAgICAgdGhpcy5lbGVtZW50c1sxXSA9IGNvc3ggKiBzaW55ICogY29zeiArIHNpbnggKiBjb3N5ICogc2luelxuICAgICAgdGhpcy5lbGVtZW50c1syXSA9IGNvc3ggKiBjb3N5ICogc2lueiAtIHNpbnggKiBzaW55ICogY29zelxuICAgICAgdGhpcy5lbGVtZW50c1szXSA9IGNvc3ggKiBjb3N5ICogY29zeiAtIHNpbnggKiBzaW55ICogc2luelxuICAgIH0gZWxzZSBpZiAodGhpcy5heGlzT3JkZXIgPT09ICdYWlknKSB7XG4gICAgICB0aGlzLmVsZW1lbnRzWzBdID0gc2lueCAqIGNvc3kgKiBjb3N6IC0gY29zeCAqIHNpbnkgKiBzaW56XG4gICAgICB0aGlzLmVsZW1lbnRzWzFdID0gY29zeCAqIHNpbnkgKiBjb3N6IC0gc2lueCAqIGNvc3kgKiBzaW56XG4gICAgICB0aGlzLmVsZW1lbnRzWzJdID0gY29zeCAqIGNvc3kgKiBzaW56ICsgc2lueCAqIHNpbnkgKiBjb3N6XG4gICAgICB0aGlzLmVsZW1lbnRzWzNdID0gY29zeCAqIGNvc3kgKiBjb3N6ICsgc2lueCAqIHNpbnkgKiBzaW56XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYSB7QGxpbmsgUXVhdH0gZnJvbSBhIHJvdGF0aW9uIGF4aXMge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IGFuZCBhbiBhbmdsZVxuICAgKiBAcGFyYW0gYXhpcyAtIG5vcm1hbGl6ZWQge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IGFyb3VuZCB3aGljaCB0byByb3RhdGVcbiAgICogQHBhcmFtIGFuZ2xlIC0gYW5nbGUgKGluIHJhZGlhbnMpIHRvIHJvdGF0ZVxuICAgKiBAcmV0dXJucyAtIHtAbGluayBRdWF0fSBhZnRlciBoYXZpbmcgYXBwbGllZCB0aGUgcm90YXRpb25cbiAgICovXG4gIHNldEZyb21BeGlzQW5nbGUoYXhpczogVmVjMyA9IG5ldyBWZWMzKCksIGFuZ2xlID0gMCk6IFF1YXQge1xuICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9kZXYvc3JjL21hdGgvUXVhdGVybmlvbi5qcyNMMjc1XG4gICAgLy8gaHR0cDovL3d3dy5ldWNsaWRlYW5zcGFjZS5jb20vbWF0aHMvZ2VvbWV0cnkvcm90YXRpb25zL2NvbnZlcnNpb25zL2FuZ2xlVG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuXG4gICAgLy8gYXNzdW1lcyBheGlzIGlzIG5vcm1hbGl6ZWRcblxuICAgIGNvbnN0IGhhbGZBbmdsZSA9IGFuZ2xlIC8gMixcbiAgICAgIHMgPSBNYXRoLnNpbihoYWxmQW5nbGUpXG5cbiAgICB0aGlzLmVsZW1lbnRzWzBdID0gYXhpcy54ICogc1xuICAgIHRoaXMuZWxlbWVudHNbMV0gPSBheGlzLnkgKiBzXG4gICAgdGhpcy5lbGVtZW50c1syXSA9IGF4aXMueiAqIHNcbiAgICB0aGlzLmVsZW1lbnRzWzNdID0gTWF0aC5jb3MoaGFsZkFuZ2xlKVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYSB7QGxpbmsgUXVhdH0gZnJvbSBhIHJvdGF0aW9uIHtAbGluayBNYXQ0IHwgbWF0cml4fVxuICAgKiBAcGFyYW0gbWF0cml4IC0gcm90YXRpb24ge0BsaW5rIE1hdDQgfCBtYXRyaXh9IHRvIHVzZVxuICAgKiBAcmV0dXJucyAtIHtAbGluayBRdWF0fSBhZnRlciBoYXZpbmcgYXBwbGllZCB0aGUgcm90YXRpb25cbiAgICovXG4gIHNldEZyb21Sb3RhdGlvbk1hdHJpeChtYXRyaXg6IE1hdDQpOiBRdWF0IHtcbiAgICAvLyBodHRwOi8vd3d3LmV1Y2xpZGVhbnNwYWNlLmNvbS9tYXRocy9nZW9tZXRyeS9yb3RhdGlvbnMvY29udmVyc2lvbnMvbWF0cml4VG9RdWF0ZXJuaW9uL2luZGV4Lmh0bVxuICAgIC8vIGFzc3VtZXMgdGhlIHVwcGVyIDN4MyBvZiBtIGlzIGEgcHVyZSByb3RhdGlvbiBtYXRyaXggKGkuZSwgdW5zY2FsZWQpXG4gICAgY29uc3QgdGUgPSBtYXRyaXguZWxlbWVudHMsXG4gICAgICBtMTEgPSB0ZVswXSxcbiAgICAgIG0xMiA9IHRlWzRdLFxuICAgICAgbTEzID0gdGVbOF0sXG4gICAgICBtMjEgPSB0ZVsxXSxcbiAgICAgIG0yMiA9IHRlWzVdLFxuICAgICAgbTIzID0gdGVbOV0sXG4gICAgICBtMzEgPSB0ZVsyXSxcbiAgICAgIG0zMiA9IHRlWzZdLFxuICAgICAgbTMzID0gdGVbMTBdLFxuICAgICAgdHJhY2UgPSBtMTEgKyBtMjIgKyBtMzNcblxuICAgIGlmICh0cmFjZSA+IDApIHtcbiAgICAgIGNvbnN0IHMgPSAwLjUgLyBNYXRoLnNxcnQodHJhY2UgKyAxLjApXG5cbiAgICAgIHRoaXMuZWxlbWVudHNbM10gPSAwLjI1IC8gc1xuICAgICAgdGhpcy5lbGVtZW50c1swXSA9IChtMzIgLSBtMjMpICogc1xuICAgICAgdGhpcy5lbGVtZW50c1sxXSA9IChtMTMgLSBtMzEpICogc1xuICAgICAgdGhpcy5lbGVtZW50c1syXSA9IChtMjEgLSBtMTIpICogc1xuICAgIH0gZWxzZSBpZiAobTExID4gbTIyICYmIG0xMSA+IG0zMykge1xuICAgICAgY29uc3QgcyA9IDIuMCAqIE1hdGguc3FydCgxLjAgKyBtMTEgLSBtMjIgLSBtMzMpXG5cbiAgICAgIHRoaXMuZWxlbWVudHNbM10gPSAobTMyIC0gbTIzKSAvIHNcbiAgICAgIHRoaXMuZWxlbWVudHNbMF0gPSAwLjI1ICogc1xuICAgICAgdGhpcy5lbGVtZW50c1sxXSA9IChtMTIgKyBtMjEpIC8gc1xuICAgICAgdGhpcy5lbGVtZW50c1syXSA9IChtMTMgKyBtMzEpIC8gc1xuICAgIH0gZWxzZSBpZiAobTIyID4gbTMzKSB7XG4gICAgICBjb25zdCBzID0gMi4wICogTWF0aC5zcXJ0KDEuMCArIG0yMiAtIG0xMSAtIG0zMylcblxuICAgICAgdGhpcy5lbGVtZW50c1szXSA9IChtMTMgLSBtMzEpIC8gc1xuICAgICAgdGhpcy5lbGVtZW50c1swXSA9IChtMTIgKyBtMjEpIC8gc1xuICAgICAgdGhpcy5lbGVtZW50c1sxXSA9IDAuMjUgKiBzXG4gICAgICB0aGlzLmVsZW1lbnRzWzJdID0gKG0yMyArIG0zMikgLyBzXG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IHMgPSAyLjAgKiBNYXRoLnNxcnQoMS4wICsgbTMzIC0gbTExIC0gbTIyKVxuXG4gICAgICB0aGlzLmVsZW1lbnRzWzNdID0gKG0yMSAtIG0xMikgLyBzXG4gICAgICB0aGlzLmVsZW1lbnRzWzBdID0gKG0xMyArIG0zMSkgLyBzXG4gICAgICB0aGlzLmVsZW1lbnRzWzFdID0gKG0yMyArIG0zMikgLyBzXG4gICAgICB0aGlzLmVsZW1lbnRzWzJdID0gMC4yNSAqIHNcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG4iLCJpbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi9WZWMzJ1xyXG5pbXBvcnQgeyBRdWF0IH0gZnJvbSAnLi9RdWF0J1xyXG5cclxuLyoqXHJcbiAqIFJlYWxseSBiYXNpYyA0eDQgbWF0cml4IGNsYXNzIHVzZWQgZm9yIG1hdHJpeCBjYWxjdWxhdGlvbnMuXHJcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9ibG9iL2Rldi9zcmMvbWF0aC9NYXRyaXg0LmpzXHJcbiAqIEBzZWUgaHR0cDovL2dsbWF0cml4Lm5ldC9kb2NzL21hdDQuanMuaHRtbFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIE1hdDQge1xyXG4gIC8qKiBUaGUgdHlwZSBvZiB0aGUge0BsaW5rIE1hdDR9ICovXHJcbiAgdHlwZTogc3RyaW5nXHJcbiAgLyoqIE91ciBtYXRyaXggYXJyYXkgKi9cclxuICBlbGVtZW50czogRmxvYXQzMkFycmF5XHJcblxyXG4gIC8vIHByZXR0aWVyLWlnbm9yZVxyXG4gIC8qKlxyXG4gICAqIE1hdDQgY29uc3RydWN0b3JcclxuICAgKiBAcGFyYW0gZWxlbWVudHMgLSBpbml0aWFsIGFycmF5IHRvIHVzZSwgZGVmYXVsdCB0byBpZGVudGl0eSBtYXRyaXhcclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihlbGVtZW50czogRmxvYXQzMkFycmF5ID0gbmV3IEZsb2F0MzJBcnJheShbXHJcbiAgICAxLCAwLCAwLCAwLFxyXG4gICAgMCwgMSwgMCwgMCxcclxuICAgIDAsIDAsIDEsIDAsXHJcbiAgICAwLCAwLCAwLCAxXHJcbiAgXSkpIHtcclxuICAgIHRoaXMudHlwZSA9ICdNYXQ0J1xyXG4gICAgdGhpcy5lbGVtZW50cyA9IGVsZW1lbnRzXHJcbiAgfVxyXG5cclxuICAvKioqXHJcbiAgICogU2V0cyB0aGUgbWF0cml4IGZyb20gMTYgbnVtYmVyc1xyXG4gICAqXHJcbiAgICogQHBhcmFtIG4xMSBudW1iZXJcclxuICAgKiBAcGFyYW0gbjEyIG51bWJlclxyXG4gICAqIEBwYXJhbSBuMTMgbnVtYmVyXHJcbiAgICogQHBhcmFtIG4xNCBudW1iZXJcclxuICAgKiBAcGFyYW0gbjIxIG51bWJlclxyXG4gICAqIEBwYXJhbSBuMjIgbnVtYmVyXHJcbiAgICogQHBhcmFtIG4yMyBudW1iZXJcclxuICAgKiBAcGFyYW0gbjI0IG51bWJlclxyXG4gICAqIEBwYXJhbSBuMzEgbnVtYmVyXHJcbiAgICogQHBhcmFtIG4zMiBudW1iZXJcclxuICAgKiBAcGFyYW0gbjMzIG51bWJlclxyXG4gICAqIEBwYXJhbSBuMzQgbnVtYmVyXHJcbiAgICogQHBhcmFtIG40MSBudW1iZXJcclxuICAgKiBAcGFyYW0gbjQyIG51bWJlclxyXG4gICAqIEBwYXJhbSBuNDMgbnVtYmVyXHJcbiAgICogQHBhcmFtIG40NCBudW1iZXJcclxuICAgKlxyXG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgTWF0NH0gYWZ0ZXIgYmVpbmcgc2V0XHJcbiAgICovXHJcbiAgc2V0KFxyXG4gICAgbjExOiBudW1iZXIsXHJcbiAgICBuMTI6IG51bWJlcixcclxuICAgIG4xMzogbnVtYmVyLFxyXG4gICAgbjE0OiBudW1iZXIsXHJcbiAgICBuMjE6IG51bWJlcixcclxuICAgIG4yMjogbnVtYmVyLFxyXG4gICAgbjIzOiBudW1iZXIsXHJcbiAgICBuMjQ6IG51bWJlcixcclxuICAgIG4zMTogbnVtYmVyLFxyXG4gICAgbjMyOiBudW1iZXIsXHJcbiAgICBuMzM6IG51bWJlcixcclxuICAgIG4zNDogbnVtYmVyLFxyXG4gICAgbjQxOiBudW1iZXIsXHJcbiAgICBuNDI6IG51bWJlcixcclxuICAgIG40MzogbnVtYmVyLFxyXG4gICAgbjQ0OiBudW1iZXJcclxuICApOiBNYXQ0IHtcclxuICAgIGNvbnN0IHRlID0gdGhpcy5lbGVtZW50c1xyXG5cclxuICAgIHRlWzBdID0gbjExXHJcbiAgICB0ZVsxXSA9IG4xMlxyXG4gICAgdGVbMl0gPSBuMTNcclxuICAgIHRlWzNdID0gbjE0XHJcbiAgICB0ZVs0XSA9IG4yMVxyXG4gICAgdGVbNV0gPSBuMjJcclxuICAgIHRlWzZdID0gbjIzXHJcbiAgICB0ZVs3XSA9IG4yNFxyXG4gICAgdGVbOF0gPSBuMzFcclxuICAgIHRlWzldID0gbjMyXHJcbiAgICB0ZVsxMF0gPSBuMzNcclxuICAgIHRlWzExXSA9IG4zNFxyXG4gICAgdGVbMTJdID0gbjQxXHJcbiAgICB0ZVsxM10gPSBuNDJcclxuICAgIHRlWzE0XSA9IG40M1xyXG4gICAgdGVbMTVdID0gbjQ0XHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIHtAbGluayBNYXQ0fSB0byBhbiBpZGVudGl0eSBtYXRyaXhcclxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIE1hdDR9IGFmdGVyIGJlaW5nIHNldFxyXG4gICAqL1xyXG4gIGlkZW50aXR5KCk6IE1hdDQge1xyXG4gICAgLy8gcHJldHRpZXItaWdub3JlXHJcbiAgICB0aGlzLnNldChcclxuICAgICAgMSwgMCwgMCwgMCxcclxuICAgICAgMCwgMSwgMCwgMCxcclxuICAgICAgMCwgMCwgMSwgMCxcclxuICAgICAgMCwgMCwgMCwgMVxyXG4gICAgKVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSB7QGxpbmsgTWF0NH0gdmFsdWVzIGZyb20gYW4gYXJyYXlcclxuICAgKiBAcGFyYW0gYXJyYXkgLSBhcnJheSB0byB1c2VcclxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIE1hdDR9IGFmdGVyIGJlaW5nIHNldFxyXG4gICAqL1xyXG4gIC8vIHByZXR0aWVyLWlnbm9yZVxyXG4gIHNldEZyb21BcnJheShhcnJheTogRmxvYXQzMkFycmF5IHwgbnVtYmVyW10gPSBuZXcgRmxvYXQzMkFycmF5KFtcclxuICAgIDEsIDAsIDAsIDAsXHJcbiAgICAwLCAxLCAwLCAwLFxyXG4gICAgMCwgMCwgMSwgMCxcclxuICAgIDAsIDAsIDAsIDFcclxuICBdKSk6IE1hdDQge1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLmVsZW1lbnRzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRoaXMuZWxlbWVudHNbaV0gPSBhcnJheVtpXVxyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb3B5IGFub3RoZXIge0BsaW5rIE1hdDR9XHJcbiAgICogQHBhcmFtIG1hdHJpeFxyXG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgTWF0NH0gYWZ0ZXIgYmVpbmcgc2V0XHJcbiAgICovXHJcbiAgY29weShtYXRyaXg6IE1hdDQgPSBuZXcgTWF0NCgpKTogTWF0NCB7XHJcbiAgICBjb25zdCBhcnJheSA9IG1hdHJpeC5lbGVtZW50c1xyXG4gICAgdGhpcy5lbGVtZW50c1swXSA9IGFycmF5WzBdXHJcbiAgICB0aGlzLmVsZW1lbnRzWzFdID0gYXJyYXlbMV1cclxuICAgIHRoaXMuZWxlbWVudHNbMl0gPSBhcnJheVsyXVxyXG4gICAgdGhpcy5lbGVtZW50c1szXSA9IGFycmF5WzNdXHJcbiAgICB0aGlzLmVsZW1lbnRzWzRdID0gYXJyYXlbNF1cclxuICAgIHRoaXMuZWxlbWVudHNbNV0gPSBhcnJheVs1XVxyXG4gICAgdGhpcy5lbGVtZW50c1s2XSA9IGFycmF5WzZdXHJcbiAgICB0aGlzLmVsZW1lbnRzWzddID0gYXJyYXlbN11cclxuICAgIHRoaXMuZWxlbWVudHNbOF0gPSBhcnJheVs4XVxyXG4gICAgdGhpcy5lbGVtZW50c1s5XSA9IGFycmF5WzldXHJcbiAgICB0aGlzLmVsZW1lbnRzWzEwXSA9IGFycmF5WzEwXVxyXG4gICAgdGhpcy5lbGVtZW50c1sxMV0gPSBhcnJheVsxMV1cclxuICAgIHRoaXMuZWxlbWVudHNbMTJdID0gYXJyYXlbMTJdXHJcbiAgICB0aGlzLmVsZW1lbnRzWzEzXSA9IGFycmF5WzEzXVxyXG4gICAgdGhpcy5lbGVtZW50c1sxNF0gPSBhcnJheVsxNF1cclxuICAgIHRoaXMuZWxlbWVudHNbMTVdID0gYXJyYXlbMTVdXHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsb25lIGEge0BsaW5rIE1hdDR9XHJcbiAgICogQHJldHVybnMgLSBjbG9uZWQge0BsaW5rIE1hdDR9XHJcbiAgICovXHJcbiAgY2xvbmUoKTogTWF0NCB7XHJcbiAgICByZXR1cm4gbmV3IE1hdDQoKS5jb3B5KHRoaXMpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNdWx0aXBseSB0aGlzIHtAbGluayBNYXQ0fSB3aXRoIGFub3RoZXIge0BsaW5rIE1hdDR9XHJcbiAgICogQHBhcmFtIG1hdHJpeCAtIHtAbGluayBNYXQ0fSB0byBtdWx0aXBseSB3aXRoXHJcbiAgICogQHJldHVybnMgLSB0aGlzIHtAbGluayBNYXQ0fSBhZnRlciBtdWx0aXBsaWNhdGlvblxyXG4gICAqL1xyXG4gIG11bHRpcGx5KG1hdHJpeDogTWF0NCA9IG5ldyBNYXQ0KCkpOiBNYXQ0IHtcclxuICAgIHJldHVybiB0aGlzLm11bHRpcGx5TWF0cmljZXModGhpcywgbWF0cml4KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTXVsdGlwbHkgYW5vdGhlciB7QGxpbmsgTWF0NH0gd2l0aCB0aGlzIHtAbGluayBNYXQ0fVxyXG4gICAqIEBwYXJhbSBtYXRyaXggLSB7QGxpbmsgTWF0NH0gdG8gbXVsdGlwbHkgd2l0aFxyXG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgTWF0NH0gYWZ0ZXIgbXVsdGlwbGljYXRpb25cclxuICAgKi9cclxuICBwcmVtdWx0aXBseShtYXRyaXg6IE1hdDQgPSBuZXcgTWF0NCgpKTogTWF0NCB7XHJcbiAgICByZXR1cm4gdGhpcy5tdWx0aXBseU1hdHJpY2VzKG1hdHJpeCwgdGhpcylcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE11bHRpcGx5IHR3byB7QGxpbmsgTWF0NH1cclxuICAgKiBAcGFyYW0gYSAtIGZpcnN0IHtAbGluayBNYXQ0fVxyXG4gICAqIEBwYXJhbSBiIC0gc2Vjb25kIHtAbGluayBNYXQ0fVxyXG4gICAqIEByZXR1cm5zIC0ge0BsaW5rIE1hdDR9IHJlc3VsdGluZyBmcm9tIHRoZSBtdWx0aXBsaWNhdGlvblxyXG4gICAqL1xyXG4gIG11bHRpcGx5TWF0cmljZXMoYTogTWF0NCA9IG5ldyBNYXQ0KCksIGI6IE1hdDQgPSBuZXcgTWF0NCgpKTogTWF0NCB7XHJcbiAgICBjb25zdCBhZSA9IGEuZWxlbWVudHNcclxuICAgIGNvbnN0IGJlID0gYi5lbGVtZW50c1xyXG4gICAgY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzXHJcblxyXG4gICAgY29uc3QgYTExID0gYWVbMF0sXHJcbiAgICAgIGExMiA9IGFlWzRdLFxyXG4gICAgICBhMTMgPSBhZVs4XSxcclxuICAgICAgYTE0ID0gYWVbMTJdXHJcbiAgICBjb25zdCBhMjEgPSBhZVsxXSxcclxuICAgICAgYTIyID0gYWVbNV0sXHJcbiAgICAgIGEyMyA9IGFlWzldLFxyXG4gICAgICBhMjQgPSBhZVsxM11cclxuICAgIGNvbnN0IGEzMSA9IGFlWzJdLFxyXG4gICAgICBhMzIgPSBhZVs2XSxcclxuICAgICAgYTMzID0gYWVbMTBdLFxyXG4gICAgICBhMzQgPSBhZVsxNF1cclxuICAgIGNvbnN0IGE0MSA9IGFlWzNdLFxyXG4gICAgICBhNDIgPSBhZVs3XSxcclxuICAgICAgYTQzID0gYWVbMTFdLFxyXG4gICAgICBhNDQgPSBhZVsxNV1cclxuXHJcbiAgICBjb25zdCBiMTEgPSBiZVswXSxcclxuICAgICAgYjEyID0gYmVbNF0sXHJcbiAgICAgIGIxMyA9IGJlWzhdLFxyXG4gICAgICBiMTQgPSBiZVsxMl1cclxuICAgIGNvbnN0IGIyMSA9IGJlWzFdLFxyXG4gICAgICBiMjIgPSBiZVs1XSxcclxuICAgICAgYjIzID0gYmVbOV0sXHJcbiAgICAgIGIyNCA9IGJlWzEzXVxyXG4gICAgY29uc3QgYjMxID0gYmVbMl0sXHJcbiAgICAgIGIzMiA9IGJlWzZdLFxyXG4gICAgICBiMzMgPSBiZVsxMF0sXHJcbiAgICAgIGIzNCA9IGJlWzE0XVxyXG4gICAgY29uc3QgYjQxID0gYmVbM10sXHJcbiAgICAgIGI0MiA9IGJlWzddLFxyXG4gICAgICBiNDMgPSBiZVsxMV0sXHJcbiAgICAgIGI0NCA9IGJlWzE1XVxyXG5cclxuICAgIHRlWzBdID0gYTExICogYjExICsgYTEyICogYjIxICsgYTEzICogYjMxICsgYTE0ICogYjQxXHJcbiAgICB0ZVs0XSA9IGExMSAqIGIxMiArIGExMiAqIGIyMiArIGExMyAqIGIzMiArIGExNCAqIGI0MlxyXG4gICAgdGVbOF0gPSBhMTEgKiBiMTMgKyBhMTIgKiBiMjMgKyBhMTMgKiBiMzMgKyBhMTQgKiBiNDNcclxuICAgIHRlWzEyXSA9IGExMSAqIGIxNCArIGExMiAqIGIyNCArIGExMyAqIGIzNCArIGExNCAqIGI0NFxyXG5cclxuICAgIHRlWzFdID0gYTIxICogYjExICsgYTIyICogYjIxICsgYTIzICogYjMxICsgYTI0ICogYjQxXHJcbiAgICB0ZVs1XSA9IGEyMSAqIGIxMiArIGEyMiAqIGIyMiArIGEyMyAqIGIzMiArIGEyNCAqIGI0MlxyXG4gICAgdGVbOV0gPSBhMjEgKiBiMTMgKyBhMjIgKiBiMjMgKyBhMjMgKiBiMzMgKyBhMjQgKiBiNDNcclxuICAgIHRlWzEzXSA9IGEyMSAqIGIxNCArIGEyMiAqIGIyNCArIGEyMyAqIGIzNCArIGEyNCAqIGI0NFxyXG5cclxuICAgIHRlWzJdID0gYTMxICogYjExICsgYTMyICogYjIxICsgYTMzICogYjMxICsgYTM0ICogYjQxXHJcbiAgICB0ZVs2XSA9IGEzMSAqIGIxMiArIGEzMiAqIGIyMiArIGEzMyAqIGIzMiArIGEzNCAqIGI0MlxyXG4gICAgdGVbMTBdID0gYTMxICogYjEzICsgYTMyICogYjIzICsgYTMzICogYjMzICsgYTM0ICogYjQzXHJcbiAgICB0ZVsxNF0gPSBhMzEgKiBiMTQgKyBhMzIgKiBiMjQgKyBhMzMgKiBiMzQgKyBhMzQgKiBiNDRcclxuXHJcbiAgICB0ZVszXSA9IGE0MSAqIGIxMSArIGE0MiAqIGIyMSArIGE0MyAqIGIzMSArIGE0NCAqIGI0MVxyXG4gICAgdGVbN10gPSBhNDEgKiBiMTIgKyBhNDIgKiBiMjIgKyBhNDMgKiBiMzIgKyBhNDQgKiBiNDJcclxuICAgIHRlWzExXSA9IGE0MSAqIGIxMyArIGE0MiAqIGIyMyArIGE0MyAqIGIzMyArIGE0NCAqIGI0M1xyXG4gICAgdGVbMTVdID0gYTQxICogYjE0ICsgYTQyICogYjI0ICsgYTQzICogYjM0ICsgYTQ0ICogYjQ0XHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIHtAbGluayBwcmVtdWx0aXBseX0gdGhpcyB7QGxpbmsgTWF0NH0gYnkgYSB0cmFuc2xhdGUgbWF0cml4IChpLmUuIHRyYW5zbGF0ZU1hdHJpeCA9IG5ldyBNYXQ0KCkudHJhbnNsYXRlKHZlY3RvcikpXHJcbiAgICogQHBhcmFtIHZlY3RvciAtIHRyYW5zbGF0aW9uIHtAbGluayBWZWMzIHwgdmVjdG9yfSB0byB1c2VcclxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIE1hdDR9IGFmdGVyIHRoZSBwcmVtdWx0aXBseSB0cmFuc2xhdGUgb3BlcmF0aW9uXHJcbiAgICovXHJcbiAgcHJlbXVsdGlwbHlUcmFuc2xhdGUodmVjdG9yOiBWZWMzID0gbmV3IFZlYzMoKSk6IE1hdDQge1xyXG4gICAgLy8gcHJlbXVsdGlwbHkgYnkgYSB0cmFuc2xhdGVNYXRyaXgsIGllIHRyYW5zbGF0ZU1hdHJpeCA9IG5ldyBNYXQ0KCkudHJhbnNsYXRlKHZlY3RvcilcclxuICAgIC8vIHdoZXJlIHRyYW5zbGF0ZU1hdHJpeFswXSA9IDEsIHRyYW5zbGF0ZU1hdHJpeFs1XSA9IDEsIHNjYWxlTWF0cml4WzEwXSA9IDEsIHRyYW5zbGF0ZU1hdHJpeFsxNV0gPSAxIGZyb20gaWRlbnRpdHlcclxuICAgIC8vIGFuZCB0cmFuc2xhdGVNYXRyaXhbMTJdID0gdmVjdG9yLngsIHRyYW5zbGF0ZU1hdHJpeFsxM10gPSB2ZWN0b3IueSwgdHJhbnNsYXRlTWF0cml4WzE0XSA9IHZlY3Rvci56IGZyb20gdHJhbnNsYXRpb25cclxuICAgIC8vIGVxdWl2YWxlbnQgKGJ1dCBmYXN0ZXIpIHRvIHRoaXMubXVsdGlwbHkodHJhbnNsYXRlTWF0cml4LCB0aGlzKVxyXG5cclxuICAgIC8vIGZyb20gaWRlbnRpdHkgbWF0cml4XHJcbiAgICBjb25zdCBhMTEgPSAxXHJcbiAgICBjb25zdCBhMjIgPSAxXHJcbiAgICBjb25zdCBhMzMgPSAxXHJcbiAgICBjb25zdCBhNDQgPSAxXHJcblxyXG4gICAgLy8gZnJvbSB0cmFuc2xhdGlvblxyXG4gICAgY29uc3QgYTE0ID0gdmVjdG9yLnhcclxuICAgIGNvbnN0IGEyNCA9IHZlY3Rvci55XHJcbiAgICBjb25zdCBhMzQgPSB2ZWN0b3IuelxyXG5cclxuICAgIGNvbnN0IGJlID0gdGhpcy5lbGVtZW50c1xyXG4gICAgY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzXHJcblxyXG4gICAgY29uc3QgYjExID0gYmVbMF0sXHJcbiAgICAgIGIxMiA9IGJlWzRdLFxyXG4gICAgICBiMTMgPSBiZVs4XSxcclxuICAgICAgYjE0ID0gYmVbMTJdXHJcbiAgICBjb25zdCBiMjEgPSBiZVsxXSxcclxuICAgICAgYjIyID0gYmVbNV0sXHJcbiAgICAgIGIyMyA9IGJlWzldLFxyXG4gICAgICBiMjQgPSBiZVsxM11cclxuICAgIGNvbnN0IGIzMSA9IGJlWzJdLFxyXG4gICAgICBiMzIgPSBiZVs2XSxcclxuICAgICAgYjMzID0gYmVbMTBdLFxyXG4gICAgICBiMzQgPSBiZVsxNF1cclxuICAgIGNvbnN0IGI0MSA9IGJlWzNdLFxyXG4gICAgICBiNDIgPSBiZVs3XSxcclxuICAgICAgYjQzID0gYmVbMTFdLFxyXG4gICAgICBiNDQgPSBiZVsxNV1cclxuXHJcbiAgICB0ZVswXSA9IGExMSAqIGIxMSArIGExNCAqIGI0MVxyXG4gICAgdGVbNF0gPSBhMTEgKiBiMTIgKyBhMTQgKiBiNDJcclxuICAgIHRlWzhdID0gYTExICogYjEzICsgYTE0ICogYjQzXHJcbiAgICB0ZVsxMl0gPSBhMTEgKiBiMTQgKyBhMTQgKiBiNDRcclxuXHJcbiAgICB0ZVsxXSA9IGEyMiAqIGIyMSArIGEyNCAqIGI0MVxyXG4gICAgdGVbNV0gPSBhMjIgKiBiMjIgKyBhMjQgKiBiNDJcclxuICAgIHRlWzldID0gYTIyICogYjIzICsgYTI0ICogYjQzXHJcbiAgICB0ZVsxM10gPSBhMjIgKiBiMjQgKyBhMjQgKiBiNDRcclxuXHJcbiAgICB0ZVsyXSA9IGEzMyAqIGIzMSArIGEzNCAqIGI0MVxyXG4gICAgdGVbNl0gPSBhMzMgKiBiMzIgKyBhMzQgKiBiNDJcclxuICAgIHRlWzEwXSA9IGEzMyAqIGIzMyArIGEzNCAqIGI0M1xyXG4gICAgdGVbMTRdID0gYTMzICogYjM0ICsgYTM0ICogYjQ0XHJcblxyXG4gICAgdGVbM10gPSBhNDQgKiBiNDFcclxuICAgIHRlWzddID0gYTQ0ICogYjQyXHJcbiAgICB0ZVsxMV0gPSBhNDQgKiBiNDNcclxuICAgIHRlWzE1XSA9IGE0NCAqIGI0NFxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiB7QGxpbmsgcHJlbXVsdGlwbHl9IHRoaXMge0BsaW5rIE1hdDR9IGJ5IGEgc2NhbGUgbWF0cml4IChpLmUuIHRyYW5zbGF0ZU1hdHJpeCA9IG5ldyBNYXQ0KCkuc2NhbGUodmVjdG9yKSlcclxuICAgKiBAcGFyYW0gdmVjdG9yIC0gc2NhbGUge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHRvIHVzZVxyXG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgTWF0NH0gYWZ0ZXIgdGhlIHByZW11bHRpcGx5IHNjYWxlIG9wZXJhdGlvblxyXG4gICAqL1xyXG4gIHByZW11bHRpcGx5U2NhbGUodmVjdG9yOiBWZWMzID0gbmV3IFZlYzMoKSk6IE1hdDQge1xyXG4gICAgLy8gcHJlbXVsdGlwbHkgYnkgYSBzY2FsZU1hdHJpeCwgaWUgc2NhbGVNYXRyaXggPSBuZXcgTWF0NCgpLnNjYWxlKHZlY3RvcilcclxuICAgIC8vIHdoZXJlIHNjYWxlTWF0cml4WzBdID0gdmVjdG9yLngsIHNjYWxlTWF0cml4WzVdID0gdmVjdG9yLnksIHNjYWxlTWF0cml4WzEwXSA9IHZlY3Rvci56LCBzY2FsZU1hdHJpeFsxNV0gPSAxXHJcbiAgICAvLyBlcXVpdmFsZW50IChidXQgZmFzdGVyKSB0byB0aGlzLm11bHRpcGx5KHNjYWxlTWF0cml4LCB0aGlzKVxyXG5cclxuICAgIGNvbnN0IGJlID0gdGhpcy5lbGVtZW50c1xyXG4gICAgY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzXHJcblxyXG4gICAgY29uc3QgYTExID0gdmVjdG9yLnhcclxuICAgIGNvbnN0IGEyMiA9IHZlY3Rvci55XHJcbiAgICBjb25zdCBhMzMgPSB2ZWN0b3IuelxyXG4gICAgY29uc3QgYTQ0ID0gMVxyXG5cclxuICAgIGNvbnN0IGIxMSA9IGJlWzBdLFxyXG4gICAgICBiMTIgPSBiZVs0XSxcclxuICAgICAgYjEzID0gYmVbOF0sXHJcbiAgICAgIGIxNCA9IGJlWzEyXVxyXG4gICAgY29uc3QgYjIxID0gYmVbMV0sXHJcbiAgICAgIGIyMiA9IGJlWzVdLFxyXG4gICAgICBiMjMgPSBiZVs5XSxcclxuICAgICAgYjI0ID0gYmVbMTNdXHJcbiAgICBjb25zdCBiMzEgPSBiZVsyXSxcclxuICAgICAgYjMyID0gYmVbNl0sXHJcbiAgICAgIGIzMyA9IGJlWzEwXSxcclxuICAgICAgYjM0ID0gYmVbMTRdXHJcbiAgICBjb25zdCBiNDEgPSBiZVszXSxcclxuICAgICAgYjQyID0gYmVbN10sXHJcbiAgICAgIGI0MyA9IGJlWzExXSxcclxuICAgICAgYjQ0ID0gYmVbMTVdXHJcblxyXG4gICAgdGVbMF0gPSBhMTEgKiBiMTFcclxuICAgIHRlWzRdID0gYTExICogYjEyXHJcbiAgICB0ZVs4XSA9IGExMSAqIGIxM1xyXG4gICAgdGVbMTJdID0gYTExICogYjE0XHJcblxyXG4gICAgdGVbMV0gPSBhMjIgKiBiMjFcclxuICAgIHRlWzVdID0gYTIyICogYjIyXHJcbiAgICB0ZVs5XSA9IGEyMiAqIGIyM1xyXG4gICAgdGVbMTNdID0gYTIyICogYjI0XHJcblxyXG4gICAgdGVbMl0gPSBhMzMgKiBiMzFcclxuICAgIHRlWzZdID0gYTMzICogYjMyXHJcbiAgICB0ZVsxMF0gPSBhMzMgKiBiMzNcclxuICAgIHRlWzE0XSA9IGEzMyAqIGIzNFxyXG5cclxuICAgIHRlWzNdID0gYTQ0ICogYjQxXHJcbiAgICB0ZVs3XSA9IGE0NCAqIGI0MlxyXG4gICAgdGVbMTFdID0gYTQ0ICogYjQzXHJcbiAgICB0ZVsxNV0gPSBhNDQgKiBiNDRcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSB7QGxpbmsgTWF0NH0gaW52ZXJzZVxyXG4gICAqIEByZXR1cm5zIC0gdGhlIHtAbGluayBNYXQ0fSBpbnZlcnRlZFxyXG4gICAqL1xyXG4gIGludmVydCgpIHtcclxuICAgIC8vIGJhc2VkIG9uIGh0dHA6Ly93d3cuZXVjbGlkZWFuc3BhY2UuY29tL21hdGhzL2FsZ2VicmEvbWF0cml4L2Z1bmN0aW9ucy9pbnZlcnNlL2ZvdXJEL2luZGV4Lmh0bVxyXG4gICAgY29uc3QgdGUgPSB0aGlzLmVsZW1lbnRzLFxyXG4gICAgICBuMTEgPSB0ZVswXSxcclxuICAgICAgbjIxID0gdGVbMV0sXHJcbiAgICAgIG4zMSA9IHRlWzJdLFxyXG4gICAgICBuNDEgPSB0ZVszXSxcclxuICAgICAgbjEyID0gdGVbNF0sXHJcbiAgICAgIG4yMiA9IHRlWzVdLFxyXG4gICAgICBuMzIgPSB0ZVs2XSxcclxuICAgICAgbjQyID0gdGVbN10sXHJcbiAgICAgIG4xMyA9IHRlWzhdLFxyXG4gICAgICBuMjMgPSB0ZVs5XSxcclxuICAgICAgbjMzID0gdGVbMTBdLFxyXG4gICAgICBuNDMgPSB0ZVsxMV0sXHJcbiAgICAgIG4xNCA9IHRlWzEyXSxcclxuICAgICAgbjI0ID0gdGVbMTNdLFxyXG4gICAgICBuMzQgPSB0ZVsxNF0sXHJcbiAgICAgIG40NCA9IHRlWzE1XSxcclxuICAgICAgdDExID0gbjIzICogbjM0ICogbjQyIC0gbjI0ICogbjMzICogbjQyICsgbjI0ICogbjMyICogbjQzIC0gbjIyICogbjM0ICogbjQzIC0gbjIzICogbjMyICogbjQ0ICsgbjIyICogbjMzICogbjQ0LFxyXG4gICAgICB0MTIgPSBuMTQgKiBuMzMgKiBuNDIgLSBuMTMgKiBuMzQgKiBuNDIgLSBuMTQgKiBuMzIgKiBuNDMgKyBuMTIgKiBuMzQgKiBuNDMgKyBuMTMgKiBuMzIgKiBuNDQgLSBuMTIgKiBuMzMgKiBuNDQsXHJcbiAgICAgIHQxMyA9IG4xMyAqIG4yNCAqIG40MiAtIG4xNCAqIG4yMyAqIG40MiArIG4xNCAqIG4yMiAqIG40MyAtIG4xMiAqIG4yNCAqIG40MyAtIG4xMyAqIG4yMiAqIG40NCArIG4xMiAqIG4yMyAqIG40NCxcclxuICAgICAgdDE0ID0gbjE0ICogbjIzICogbjMyIC0gbjEzICogbjI0ICogbjMyIC0gbjE0ICogbjIyICogbjMzICsgbjEyICogbjI0ICogbjMzICsgbjEzICogbjIyICogbjM0IC0gbjEyICogbjIzICogbjM0XHJcblxyXG4gICAgY29uc3QgZGV0ID0gbjExICogdDExICsgbjIxICogdDEyICsgbjMxICogdDEzICsgbjQxICogdDE0XHJcblxyXG4gICAgaWYgKGRldCA9PT0gMCkgcmV0dXJuIHRoaXMuc2V0KDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDAsIDApXHJcblxyXG4gICAgY29uc3QgZGV0SW52ID0gMSAvIGRldFxyXG5cclxuICAgIHRlWzBdID0gdDExICogZGV0SW52XHJcbiAgICB0ZVsxXSA9XHJcbiAgICAgIChuMjQgKiBuMzMgKiBuNDEgLSBuMjMgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzEgKiBuNDMgKyBuMjEgKiBuMzQgKiBuNDMgKyBuMjMgKiBuMzEgKiBuNDQgLSBuMjEgKiBuMzMgKiBuNDQpICpcclxuICAgICAgZGV0SW52XHJcbiAgICB0ZVsyXSA9XHJcbiAgICAgIChuMjIgKiBuMzQgKiBuNDEgLSBuMjQgKiBuMzIgKiBuNDEgKyBuMjQgKiBuMzEgKiBuNDIgLSBuMjEgKiBuMzQgKiBuNDIgLSBuMjIgKiBuMzEgKiBuNDQgKyBuMjEgKiBuMzIgKiBuNDQpICpcclxuICAgICAgZGV0SW52XHJcbiAgICB0ZVszXSA9XHJcbiAgICAgIChuMjMgKiBuMzIgKiBuNDEgLSBuMjIgKiBuMzMgKiBuNDEgLSBuMjMgKiBuMzEgKiBuNDIgKyBuMjEgKiBuMzMgKiBuNDIgKyBuMjIgKiBuMzEgKiBuNDMgLSBuMjEgKiBuMzIgKiBuNDMpICpcclxuICAgICAgZGV0SW52XHJcblxyXG4gICAgdGVbNF0gPSB0MTIgKiBkZXRJbnZcclxuICAgIHRlWzVdID1cclxuICAgICAgKG4xMyAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMyAqIG40MSArIG4xNCAqIG4zMSAqIG40MyAtIG4xMSAqIG4zNCAqIG40MyAtIG4xMyAqIG4zMSAqIG40NCArIG4xMSAqIG4zMyAqIG40NCkgKlxyXG4gICAgICBkZXRJbnZcclxuICAgIHRlWzZdID1cclxuICAgICAgKG4xNCAqIG4zMiAqIG40MSAtIG4xMiAqIG4zNCAqIG40MSAtIG4xNCAqIG4zMSAqIG40MiArIG4xMSAqIG4zNCAqIG40MiArIG4xMiAqIG4zMSAqIG40NCAtIG4xMSAqIG4zMiAqIG40NCkgKlxyXG4gICAgICBkZXRJbnZcclxuICAgIHRlWzddID1cclxuICAgICAgKG4xMiAqIG4zMyAqIG40MSAtIG4xMyAqIG4zMiAqIG40MSArIG4xMyAqIG4zMSAqIG40MiAtIG4xMSAqIG4zMyAqIG40MiAtIG4xMiAqIG4zMSAqIG40MyArIG4xMSAqIG4zMiAqIG40MykgKlxyXG4gICAgICBkZXRJbnZcclxuXHJcbiAgICB0ZVs4XSA9IHQxMyAqIGRldEludlxyXG4gICAgdGVbOV0gPVxyXG4gICAgICAobjE0ICogbjIzICogbjQxIC0gbjEzICogbjI0ICogbjQxIC0gbjE0ICogbjIxICogbjQzICsgbjExICogbjI0ICogbjQzICsgbjEzICogbjIxICogbjQ0IC0gbjExICogbjIzICogbjQ0KSAqXHJcbiAgICAgIGRldEludlxyXG4gICAgdGVbMTBdID1cclxuICAgICAgKG4xMiAqIG4yNCAqIG40MSAtIG4xNCAqIG4yMiAqIG40MSArIG4xNCAqIG4yMSAqIG40MiAtIG4xMSAqIG4yNCAqIG40MiAtIG4xMiAqIG4yMSAqIG40NCArIG4xMSAqIG4yMiAqIG40NCkgKlxyXG4gICAgICBkZXRJbnZcclxuICAgIHRlWzExXSA9XHJcbiAgICAgIChuMTMgKiBuMjIgKiBuNDEgLSBuMTIgKiBuMjMgKiBuNDEgLSBuMTMgKiBuMjEgKiBuNDIgKyBuMTEgKiBuMjMgKiBuNDIgKyBuMTIgKiBuMjEgKiBuNDMgLSBuMTEgKiBuMjIgKiBuNDMpICpcclxuICAgICAgZGV0SW52XHJcblxyXG4gICAgdGVbMTJdID0gdDE0ICogZGV0SW52XHJcbiAgICB0ZVsxM10gPVxyXG4gICAgICAobjEzICogbjI0ICogbjMxIC0gbjE0ICogbjIzICogbjMxICsgbjE0ICogbjIxICogbjMzIC0gbjExICogbjI0ICogbjMzIC0gbjEzICogbjIxICogbjM0ICsgbjExICogbjIzICogbjM0KSAqXHJcbiAgICAgIGRldEludlxyXG4gICAgdGVbMTRdID1cclxuICAgICAgKG4xNCAqIG4yMiAqIG4zMSAtIG4xMiAqIG4yNCAqIG4zMSAtIG4xNCAqIG4yMSAqIG4zMiArIG4xMSAqIG4yNCAqIG4zMiArIG4xMiAqIG4yMSAqIG4zNCAtIG4xMSAqIG4yMiAqIG4zNCkgKlxyXG4gICAgICBkZXRJbnZcclxuICAgIHRlWzE1XSA9XHJcbiAgICAgIChuMTIgKiBuMjMgKiBuMzEgLSBuMTMgKiBuMjIgKiBuMzEgKyBuMTMgKiBuMjEgKiBuMzIgLSBuMTEgKiBuMjMgKiBuMzIgLSBuMTIgKiBuMjEgKiBuMzMgKyBuMTEgKiBuMjIgKiBuMzMpICpcclxuICAgICAgZGV0SW52XHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsb25lIGFuZCBpbnZlcnQgdGhlIHtAbGluayBNYXQ0fVxyXG4gICAqIEByZXR1cm5zIC0gaW52ZXJ0ZWQgY2xvbmVkIHtAbGluayBNYXQ0fVxyXG4gICAqL1xyXG4gIGdldEludmVyc2UoKTogTWF0NCB7XHJcbiAgICByZXR1cm4gdGhpcy5jbG9uZSgpLmludmVydCgpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUcmFuc2xhdGUgYSB7QGxpbmsgTWF0NH1cclxuICAgKiBAcGFyYW0gdmVjdG9yIC0gdHJhbnNsYXRpb24ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHRvIHVzZVxyXG4gICAqIEByZXR1cm5zIC0gdHJhbnNsYXRlZCB7QGxpbmsgTWF0NH1cclxuICAgKi9cclxuICB0cmFuc2xhdGUodmVjdG9yOiBWZWMzID0gbmV3IFZlYzMoKSk6IE1hdDQge1xyXG4gICAgY29uc3QgYSA9IHRoaXMuZWxlbWVudHNcclxuXHJcbiAgICBhWzEyXSA9IGFbMF0gKiB2ZWN0b3IueCArIGFbNF0gKiB2ZWN0b3IueSArIGFbOF0gKiB2ZWN0b3IueiArIGFbMTJdXHJcbiAgICBhWzEzXSA9IGFbMV0gKiB2ZWN0b3IueCArIGFbNV0gKiB2ZWN0b3IueSArIGFbOV0gKiB2ZWN0b3IueiArIGFbMTNdXHJcbiAgICBhWzE0XSA9IGFbMl0gKiB2ZWN0b3IueCArIGFbNl0gKiB2ZWN0b3IueSArIGFbMTBdICogdmVjdG9yLnogKyBhWzE0XVxyXG4gICAgYVsxNV0gPSBhWzNdICogdmVjdG9yLnggKyBhWzddICogdmVjdG9yLnkgKyBhWzExXSAqIHZlY3Rvci56ICsgYVsxNV1cclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2NhbGUgYSB7QGxpbmsgTWF0NH1cclxuICAgKiBAcGFyYW0gdmVjdG9yIC0gc2NhbGUge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHRvIHVzZVxyXG4gICAqIEByZXR1cm5zIC0gc2NhbGVkIHtAbGluayBNYXQ0fVxyXG4gICAqL1xyXG4gIHNjYWxlKHZlY3RvcjogVmVjMyA9IG5ldyBWZWMzKCkpOiBNYXQ0IHtcclxuICAgIGNvbnN0IGEgPSB0aGlzLmVsZW1lbnRzXHJcblxyXG4gICAgYVswXSAqPSB2ZWN0b3IueFxyXG4gICAgYVsxXSAqPSB2ZWN0b3IueFxyXG4gICAgYVsyXSAqPSB2ZWN0b3IueFxyXG4gICAgYVszXSAqPSB2ZWN0b3IueFxyXG4gICAgYVs0XSAqPSB2ZWN0b3IueVxyXG4gICAgYVs1XSAqPSB2ZWN0b3IueVxyXG4gICAgYVs2XSAqPSB2ZWN0b3IueVxyXG4gICAgYVs3XSAqPSB2ZWN0b3IueVxyXG4gICAgYVs4XSAqPSB2ZWN0b3IuelxyXG4gICAgYVs5XSAqPSB2ZWN0b3IuelxyXG4gICAgYVsxMF0gKj0gdmVjdG9yLnpcclxuICAgIGFbMTFdICo9IHZlY3Rvci56XHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJvdGF0ZSBhIHtAbGluayBNYXQ0fSBmcm9tIGEge0BsaW5rIFF1YXQgfCBxdWF0ZXJuaW9ufVxyXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0ge0BsaW5rIFF1YXQgfCBxdWF0ZXJuaW9ufSB0byB1c2VcclxuICAgKiBAcmV0dXJucyAtIHJvdGF0ZWQge0BsaW5rIE1hdDR9XHJcbiAgICovXHJcbiAgcm90YXRlRnJvbVF1YXRlcm5pb24ocXVhdGVybmlvbjogUXVhdCA9IG5ldyBRdWF0KCkpOiBNYXQ0IHtcclxuICAgIGNvbnN0IHRlID0gdGhpcy5lbGVtZW50c1xyXG5cclxuICAgIGNvbnN0IHggPSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzBdLFxyXG4gICAgICB5ID0gcXVhdGVybmlvbi5lbGVtZW50c1sxXSxcclxuICAgICAgeiA9IHF1YXRlcm5pb24uZWxlbWVudHNbMl0sXHJcbiAgICAgIHcgPSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzNdXHJcblxyXG4gICAgY29uc3QgeDIgPSB4ICsgeCxcclxuICAgICAgeTIgPSB5ICsgeSxcclxuICAgICAgejIgPSB6ICsgelxyXG4gICAgY29uc3QgeHggPSB4ICogeDIsXHJcbiAgICAgIHh5ID0geCAqIHkyLFxyXG4gICAgICB4eiA9IHggKiB6MlxyXG4gICAgY29uc3QgeXkgPSB5ICogeTIsXHJcbiAgICAgIHl6ID0geSAqIHoyLFxyXG4gICAgICB6eiA9IHogKiB6MlxyXG4gICAgY29uc3Qgd3ggPSB3ICogeDIsXHJcbiAgICAgIHd5ID0gdyAqIHkyLFxyXG4gICAgICB3eiA9IHcgKiB6MlxyXG5cclxuICAgIHRlWzBdID0gMSAtICh5eSArIHp6KVxyXG4gICAgdGVbNF0gPSB4eSAtIHd6XHJcbiAgICB0ZVs4XSA9IHh6ICsgd3lcclxuXHJcbiAgICB0ZVsxXSA9IHh5ICsgd3pcclxuICAgIHRlWzVdID0gMSAtICh4eCArIHp6KVxyXG4gICAgdGVbOV0gPSB5eiAtIHd4XHJcblxyXG4gICAgdGVbMl0gPSB4eiAtIHd5XHJcbiAgICB0ZVs2XSA9IHl6ICsgd3hcclxuICAgIHRlWzEwXSA9IDEgLSAoeHggKyB5eSlcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoaXMge0BsaW5rIE1hdDR9IGFzIGEgcm90YXRpb24gbWF0cml4IGJhc2VkIG9uIGFuIGV5ZSwgdGFyZ2V0IGFuZCB1cCB7QGxpbmsgVmVjMyB8IHZlY3RvcnN9XHJcbiAgICogQHBhcmFtIGV5ZSAtIHtAbGluayBWZWMzIHwgcG9zaXRpb24gdmVjdG9yfSBvZiB0aGUgb2JqZWN0IHRoYXQgc2hvdWxkIGJlIHJvdGF0ZWRcclxuICAgKiBAcGFyYW0gdGFyZ2V0IC0ge0BsaW5rIFZlYzMgfCB0YXJnZXQgdmVjdG9yfSB0byBsb29rIGF0XHJcbiAgICogQHBhcmFtIHVwIC0gdXAge0BsaW5rIFZlYzMgfCB2ZWN0b3J9XHJcbiAgICogQHJldHVybnMgLSByb3RhdGVkIHtAbGluayBNYXQ0fVxyXG4gICAqL1xyXG4gIGxvb2tBdChleWU6IFZlYzMgPSBuZXcgVmVjMygpLCB0YXJnZXQ6IFZlYzMgPSBuZXcgVmVjMygpLCB1cDogVmVjMyA9IG5ldyBWZWMzKDAsIDEsIDApKTogTWF0NCB7XHJcbiAgICBjb25zdCB0ZSA9IHRoaXMuZWxlbWVudHNcclxuXHJcbiAgICAvLyBUT0RPIG9wdGltaXplIGFsbCB0aG9zZSB2ZWN0b3JzIGNyZWF0ZWQgZWFjaCB0aW1lXHJcblxyXG4gICAgY29uc3QgX3ogPSBleWUuY2xvbmUoKS5zdWIodGFyZ2V0KVxyXG5cclxuICAgIGlmIChfei5sZW5ndGhTcSgpID09PSAwKSB7XHJcbiAgICAgIC8vIGV5ZSBhbmQgdGFyZ2V0IGFyZSBpbiB0aGUgc2FtZSBwb3NpdGlvblxyXG4gICAgICBfei56ID0gMVxyXG4gICAgfVxyXG5cclxuICAgIF96Lm5vcm1hbGl6ZSgpXHJcbiAgICBjb25zdCBfeCA9IG5ldyBWZWMzKCkuY3Jvc3NWZWN0b3JzKHVwLCBfeilcclxuXHJcbiAgICBpZiAoX3gubGVuZ3RoU3EoKSA9PT0gMCkge1xyXG4gICAgICAvLyB1cCBhbmQgeiBhcmUgcGFyYWxsZWxcclxuICAgICAgaWYgKE1hdGguYWJzKHVwLnopID09PSAxKSB7XHJcbiAgICAgICAgX3oueCArPSAwLjAwMDFcclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBfei56ICs9IDAuMDAwMVxyXG4gICAgICB9XHJcblxyXG4gICAgICBfei5ub3JtYWxpemUoKVxyXG4gICAgICBfeC5jcm9zc1ZlY3RvcnModXAsIF96KVxyXG4gICAgfVxyXG5cclxuICAgIF94Lm5vcm1hbGl6ZSgpXHJcbiAgICBjb25zdCBfeSA9IG5ldyBWZWMzKCkuY3Jvc3NWZWN0b3JzKF96LCBfeClcclxuXHJcbiAgICB0ZVswXSA9IF94LnhcclxuICAgIHRlWzRdID0gX3kueFxyXG4gICAgdGVbOF0gPSBfei54XHJcbiAgICB0ZVsxXSA9IF94LnlcclxuICAgIHRlWzVdID0gX3kueVxyXG4gICAgdGVbOV0gPSBfei55XHJcbiAgICB0ZVsyXSA9IF94LnpcclxuICAgIHRlWzZdID0gX3kuelxyXG4gICAgdGVbMTBdID0gX3ouelxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDcmVhdGVzIGEge0BsaW5rIE1hdDR9IGZyb20gYSB7QGxpbmsgUXVhdCB8IHF1YXRlcm5pb259IHJvdGF0aW9uLCB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gdHJhbnNsYXRpb24gYW5kIHtAbGluayBWZWMzIHwgdmVjdG9yfSBzY2FsZVxyXG4gICAqIEVxdWl2YWxlbnQgZm9yIGFwcGx5aW5nIHRyYW5zbGF0aW9uLCByb3RhdGlvbiBhbmQgc2NhbGUgbWF0cmljZXMgYnV0IG11Y2ggZmFzdGVyXHJcbiAgICogU291cmNlIGNvZGUgZnJvbTogaHR0cDovL2dsbWF0cml4Lm5ldC9kb2NzL21hdDQuanMuaHRtbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHRyYW5zbGF0aW9uIC0gdHJhbnNsYXRpb24ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHRvIHVzZVxyXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0ge0BsaW5rIFF1YXQgfCBxdWF0ZXJuaW9ufSB0byB1c2VcclxuICAgKiBAcGFyYW0gc2NhbGUgLSB0cmFuc2xhdGlvbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gdG8gdXNlXHJcbiAgICogQHJldHVybnMgLSB0cmFuc2Zvcm1lZCB7QGxpbmsgTWF0NH1cclxuICAgKi9cclxuICBjb21wb3NlKHRyYW5zbGF0aW9uOiBWZWMzID0gbmV3IFZlYzMoKSwgcXVhdGVybmlvbjogUXVhdCA9IG5ldyBRdWF0KCksIHNjYWxlOiBWZWMzID0gbmV3IFZlYzMoMSkpOiBNYXQ0IHtcclxuICAgIGNvbnN0IG1hdHJpeCA9IHRoaXMuZWxlbWVudHNcclxuXHJcbiAgICAvLyBRdWF0ZXJuaW9uIG1hdGhcclxuICAgIGNvbnN0IHggPSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzBdLFxyXG4gICAgICB5ID0gcXVhdGVybmlvbi5lbGVtZW50c1sxXSxcclxuICAgICAgeiA9IHF1YXRlcm5pb24uZWxlbWVudHNbMl0sXHJcbiAgICAgIHcgPSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzNdXHJcblxyXG4gICAgY29uc3QgeDIgPSB4ICsgeFxyXG4gICAgY29uc3QgeTIgPSB5ICsgeVxyXG4gICAgY29uc3QgejIgPSB6ICsgelxyXG4gICAgY29uc3QgeHggPSB4ICogeDJcclxuICAgIGNvbnN0IHh5ID0geCAqIHkyXHJcbiAgICBjb25zdCB4eiA9IHggKiB6MlxyXG4gICAgY29uc3QgeXkgPSB5ICogeTJcclxuICAgIGNvbnN0IHl6ID0geSAqIHoyXHJcbiAgICBjb25zdCB6eiA9IHogKiB6MlxyXG4gICAgY29uc3Qgd3ggPSB3ICogeDJcclxuICAgIGNvbnN0IHd5ID0gdyAqIHkyXHJcbiAgICBjb25zdCB3eiA9IHcgKiB6MlxyXG4gICAgY29uc3Qgc3ggPSBzY2FsZS54XHJcbiAgICBjb25zdCBzeSA9IHNjYWxlLnlcclxuICAgIGNvbnN0IHN6ID0gc2NhbGUuelxyXG5cclxuICAgIG1hdHJpeFswXSA9ICgxIC0gKHl5ICsgenopKSAqIHN4XHJcbiAgICBtYXRyaXhbMV0gPSAoeHkgKyB3eikgKiBzeFxyXG4gICAgbWF0cml4WzJdID0gKHh6IC0gd3kpICogc3hcclxuICAgIG1hdHJpeFszXSA9IDBcclxuICAgIG1hdHJpeFs0XSA9ICh4eSAtIHd6KSAqIHN5XHJcbiAgICBtYXRyaXhbNV0gPSAoMSAtICh4eCArIHp6KSkgKiBzeVxyXG4gICAgbWF0cml4WzZdID0gKHl6ICsgd3gpICogc3lcclxuICAgIG1hdHJpeFs3XSA9IDBcclxuICAgIG1hdHJpeFs4XSA9ICh4eiArIHd5KSAqIHN6XHJcbiAgICBtYXRyaXhbOV0gPSAoeXogLSB3eCkgKiBzelxyXG4gICAgbWF0cml4WzEwXSA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6XHJcbiAgICBtYXRyaXhbMTFdID0gMFxyXG4gICAgbWF0cml4WzEyXSA9IHRyYW5zbGF0aW9uLnhcclxuICAgIG1hdHJpeFsxM10gPSB0cmFuc2xhdGlvbi55XHJcbiAgICBtYXRyaXhbMTRdID0gdHJhbnNsYXRpb24uelxyXG4gICAgbWF0cml4WzE1XSA9IDFcclxuXHJcbiAgICByZXR1cm4gdGhpc1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhIHtAbGluayBNYXQ0fSBmcm9tIGEge0BsaW5rIFF1YXQgfCBxdWF0ZXJuaW9ufSByb3RhdGlvbiwge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHRyYW5zbGF0aW9uIGFuZCB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gc2NhbGUsIHJvdGF0aW5nIGFuZCBzY2FsaW5nIGFyb3VuZCB0aGUgZ2l2ZW4ge0BsaW5rIFZlYzMgfCBvcmlnaW4gdmVjdG9yfVxyXG4gICAqIEVxdWl2YWxlbnQgZm9yIGFwcGx5aW5nIHRyYW5zbGF0aW9uLCByb3RhdGlvbiBhbmQgc2NhbGUgbWF0cmljZXMgYnV0IG11Y2ggZmFzdGVyXHJcbiAgICogU291cmNlIGNvZGUgZnJvbTogaHR0cDovL2dsbWF0cml4Lm5ldC9kb2NzL21hdDQuanMuaHRtbFxyXG4gICAqXHJcbiAgICogQHBhcmFtIHRyYW5zbGF0aW9uIC0gdHJhbnNsYXRpb24ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHRvIHVzZVxyXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0ge0BsaW5rIFF1YXQgfCBxdWF0ZXJuaW9ufSB0byB1c2VcclxuICAgKiBAcGFyYW0gc2NhbGUgLSB0cmFuc2xhdGlvbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gdG8gdXNlXHJcbiAgICogQHBhcmFtIG9yaWdpbiAtIG9yaWdpbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gYXJvdW5kIHdoaWNoIHRvIHNjYWxlIGFuZCByb3RhdGVcclxuICAgKiBAcmV0dXJucyAtIHRyYW5zZm9ybWVkIHtAbGluayBNYXQ0fVxyXG4gICAqL1xyXG4gIGNvbXBvc2VGcm9tT3JpZ2luKFxyXG4gICAgdHJhbnNsYXRpb246IFZlYzMgPSBuZXcgVmVjMygpLFxyXG4gICAgcXVhdGVybmlvbjogUXVhdCA9IG5ldyBRdWF0KCksXHJcbiAgICBzY2FsZTogVmVjMyA9IG5ldyBWZWMzKDEpLFxyXG4gICAgb3JpZ2luOiBWZWMzID0gbmV3IFZlYzMoKVxyXG4gICk6IE1hdDQge1xyXG4gICAgY29uc3QgbWF0cml4ID0gdGhpcy5lbGVtZW50c1xyXG5cclxuICAgIC8vIFF1YXRlcm5pb24gbWF0aFxyXG4gICAgY29uc3QgeCA9IHF1YXRlcm5pb24uZWxlbWVudHNbMF0sXHJcbiAgICAgIHkgPSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzFdLFxyXG4gICAgICB6ID0gcXVhdGVybmlvbi5lbGVtZW50c1syXSxcclxuICAgICAgdyA9IHF1YXRlcm5pb24uZWxlbWVudHNbM11cclxuXHJcbiAgICBjb25zdCB4MiA9IHggKyB4XHJcbiAgICBjb25zdCB5MiA9IHkgKyB5XHJcbiAgICBjb25zdCB6MiA9IHogKyB6XHJcblxyXG4gICAgY29uc3QgeHggPSB4ICogeDJcclxuICAgIGNvbnN0IHh5ID0geCAqIHkyXHJcbiAgICBjb25zdCB4eiA9IHggKiB6MlxyXG4gICAgY29uc3QgeXkgPSB5ICogeTJcclxuICAgIGNvbnN0IHl6ID0geSAqIHoyXHJcbiAgICBjb25zdCB6eiA9IHogKiB6MlxyXG5cclxuICAgIGNvbnN0IHd4ID0gdyAqIHgyXHJcbiAgICBjb25zdCB3eSA9IHcgKiB5MlxyXG4gICAgY29uc3Qgd3ogPSB3ICogejJcclxuXHJcbiAgICBjb25zdCBzeCA9IHNjYWxlLnhcclxuICAgIGNvbnN0IHN5ID0gc2NhbGUueVxyXG4gICAgY29uc3Qgc3ogPSBzY2FsZS56XHJcblxyXG4gICAgY29uc3Qgb3ggPSBvcmlnaW4ueFxyXG4gICAgY29uc3Qgb3kgPSBvcmlnaW4ueVxyXG4gICAgY29uc3Qgb3ogPSBvcmlnaW4uelxyXG5cclxuICAgIGNvbnN0IG91dDAgPSAoMSAtICh5eSArIHp6KSkgKiBzeFxyXG4gICAgY29uc3Qgb3V0MSA9ICh4eSArIHd6KSAqIHN4XHJcbiAgICBjb25zdCBvdXQyID0gKHh6IC0gd3kpICogc3hcclxuICAgIGNvbnN0IG91dDQgPSAoeHkgLSB3eikgKiBzeVxyXG4gICAgY29uc3Qgb3V0NSA9ICgxIC0gKHh4ICsgenopKSAqIHN5XHJcbiAgICBjb25zdCBvdXQ2ID0gKHl6ICsgd3gpICogc3lcclxuICAgIGNvbnN0IG91dDggPSAoeHogKyB3eSkgKiBzelxyXG4gICAgY29uc3Qgb3V0OSA9ICh5eiAtIHd4KSAqIHN6XHJcbiAgICBjb25zdCBvdXQxMCA9ICgxIC0gKHh4ICsgeXkpKSAqIHN6XHJcblxyXG4gICAgbWF0cml4WzBdID0gb3V0MFxyXG4gICAgbWF0cml4WzFdID0gb3V0MVxyXG4gICAgbWF0cml4WzJdID0gb3V0MlxyXG4gICAgbWF0cml4WzNdID0gMFxyXG4gICAgbWF0cml4WzRdID0gb3V0NFxyXG4gICAgbWF0cml4WzVdID0gb3V0NVxyXG4gICAgbWF0cml4WzZdID0gb3V0NlxyXG4gICAgbWF0cml4WzddID0gMFxyXG4gICAgbWF0cml4WzhdID0gb3V0OFxyXG4gICAgbWF0cml4WzldID0gb3V0OVxyXG4gICAgbWF0cml4WzEwXSA9IG91dDEwXHJcbiAgICBtYXRyaXhbMTFdID0gMFxyXG4gICAgbWF0cml4WzEyXSA9IHRyYW5zbGF0aW9uLnggKyBveCAtIChvdXQwICogb3ggKyBvdXQ0ICogb3kgKyBvdXQ4ICogb3opXHJcbiAgICBtYXRyaXhbMTNdID0gdHJhbnNsYXRpb24ueSArIG95IC0gKG91dDEgKiBveCArIG91dDUgKiBveSArIG91dDkgKiBveilcclxuICAgIG1hdHJpeFsxNF0gPSB0cmFuc2xhdGlvbi56ICsgb3ogLSAob3V0MiAqIG94ICsgb3V0NiAqIG95ICsgb3V0MTAgKiBveilcclxuICAgIG1hdHJpeFsxNV0gPSAxXHJcblxyXG4gICAgcmV0dXJuIHRoaXNcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgdHJhbnNsYXRpb24ge0BsaW5rIFZlYzN9IGNvbXBvbmVudCBvZiBhIHtAbGluayBNYXQ0fVxyXG4gICAqIEBwYXJhbSBwb3NpdGlvbiAtIHtAbGluayBWZWMzfSB0byBzZXRcclxuICAgKiBAcmV0dXJucyAtIHRyYW5zbGF0aW9uIHtAbGluayBWZWMzfSBjb21wb25lbnQgb2YgdGhpcyB7QGxpbmsgTWF0NH1cclxuICAgKi9cclxuICBnZXRUcmFuc2xhdGlvbihwb3NpdGlvbiA9IG5ldyBWZWMzKCkpOiBWZWMzIHtcclxuICAgIHJldHVybiBwb3NpdGlvbi5zZXQodGhpcy5lbGVtZW50c1sxMl0sIHRoaXMuZWxlbWVudHNbMTNdLCB0aGlzLmVsZW1lbnRzWzE0XSlcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4vTWF0NCdcbmltcG9ydCB7IFF1YXQgfSBmcm9tICcuL1F1YXQnXG5pbXBvcnQgeyBDYW1lcmEgfSBmcm9tICcuLi9jb3JlL2NhbWVyYS9DYW1lcmEnXG5cbi8qKlxuICogUmVhbGx5IGJhc2ljIDNEIHZlY3RvciBjbGFzcyB1c2VkIGZvciB2ZWN0b3IgY2FsY3VsYXRpb25zXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9tcmRvb2IvdGhyZWUuanMvYmxvYi9kZXYvc3JjL21hdGgvVmVjdG9yMy5qc1xuICogQHNlZSBodHRwOi8vZ2xtYXRyaXgubmV0L2RvY3MvdmVjMy5qcy5odG1sXG4gKi9cbmV4cG9ydCBjbGFzcyBWZWMzIHtcbiAgLyoqIFRoZSB0eXBlIG9mIHRoZSB7QGxpbmsgVmVjM30gKi9cbiAgdHlwZTogc3RyaW5nXG4gIC8qKiBYIGNvbXBvbmVudCBvZiBvdXIge0BsaW5rIFZlYzN9ICovXG4gIHByaXZhdGUgX3g6IG51bWJlclxuICAvKiogWSBjb21wb25lbnQgb2Ygb3VyIHtAbGluayBWZWMzfSAqL1xuICBwcml2YXRlIF95OiBudW1iZXJcbiAgLyoqIFogY29tcG9uZW50IG9mIG91ciB7QGxpbmsgVmVjM30gKi9cbiAgcHJpdmF0ZSBfejogbnVtYmVyXG5cbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25DaGFuZ2V9IGNhbGxiYWNrICovXG4gIF9vbkNoYW5nZUNhbGxiYWNrPygpOiB2b2lkXG5cbiAgLyoqXG4gICAqIFZlYzMgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHggLSBYIGNvbXBvbmVudCBvZiBvdXIge0BsaW5rIFZlYzN9XG4gICAqIEBwYXJhbSB5IC0gWSBjb21wb25lbnQgb2Ygb3VyIHtAbGluayBWZWMzfVxuICAgKiBAcGFyYW0geiAtIFogY29tcG9uZW50IG9mIG91ciB7QGxpbmsgVmVjM31cbiAgICovXG4gIGNvbnN0cnVjdG9yKHggPSAwLCB5ID0geCwgeiA9IHgpIHtcbiAgICB0aGlzLnR5cGUgPSAnVmVjMydcblxuICAgIHRoaXMuX3ggPSB4XG4gICAgdGhpcy5feSA9IHlcbiAgICB0aGlzLl96ID0gelxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgWCBjb21wb25lbnQgb2YgdGhlIHtAbGluayBWZWMzfVxuICAgKi9cbiAgZ2V0IHgoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5feFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgWCBjb21wb25lbnQgb2YgdGhlIHtAbGluayBWZWMzfVxuICAgKiBDYW4gdHJpZ2dlciB7QGxpbmsgb25DaGFuZ2V9IGNhbGxiYWNrXG4gICAqIEBwYXJhbSB2YWx1ZSAtIFggY29tcG9uZW50IHRvIHNldFxuICAgKi9cbiAgc2V0IHgodmFsdWU6IG51bWJlcikge1xuICAgIGNvbnN0IGNoYW5nZWQgPSB2YWx1ZSAhPT0gdGhpcy5feFxuICAgIHRoaXMuX3ggPSB2YWx1ZVxuICAgIGNoYW5nZWQgJiYgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayAmJiB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIFkgY29tcG9uZW50IG9mIHRoZSB7QGxpbmsgVmVjM31cbiAgICovXG4gIGdldCB5KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX3lcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIFkgY29tcG9uZW50IG9mIHRoZSB7QGxpbmsgVmVjM31cbiAgICogQ2FuIHRyaWdnZXIge0BsaW5rIG9uQ2hhbmdlfSBjYWxsYmFja1xuICAgKiBAcGFyYW0gdmFsdWUgLSBZIGNvbXBvbmVudCB0byBzZXRcbiAgICovXG4gIHNldCB5KHZhbHVlOiBudW1iZXIpIHtcbiAgICBjb25zdCBjaGFuZ2VkID0gdmFsdWUgIT09IHRoaXMuX3lcbiAgICB0aGlzLl95ID0gdmFsdWVcbiAgICBjaGFuZ2VkICYmIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2sgJiYgdGhpcy5fb25DaGFuZ2VDYWxsYmFjaygpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBaIGNvbXBvbmVudCBvZiB0aGUge0BsaW5rIFZlYzN9XG4gICAqL1xuICBnZXQgeigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl96XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBaIGNvbXBvbmVudCBvZiB0aGUge0BsaW5rIFZlYzN9XG4gICAqIENhbiB0cmlnZ2VyIHtAbGluayBvbkNoYW5nZX0gY2FsbGJhY2tcbiAgICogQHBhcmFtIHZhbHVlIC0gWiBjb21wb25lbnQgdG8gc2V0XG4gICAqL1xuICBzZXQgeih2YWx1ZTogbnVtYmVyKSB7XG4gICAgY29uc3QgY2hhbmdlZCA9IHZhbHVlICE9PSB0aGlzLl96XG4gICAgdGhpcy5feiA9IHZhbHVlXG4gICAgY2hhbmdlZCAmJiB0aGlzLl9vbkNoYW5nZUNhbGxiYWNrICYmIHRoaXMuX29uQ2hhbmdlQ2FsbGJhY2soKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGF0IGxlYXN0IG9uZSBjb21wb25lbnQgb2YgdGhlIHtAbGluayBWZWMzfSBoYXMgY2hhbmdlZFxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBydW4gd2hlbiBhdCBsZWFzdCBvbmUgY29tcG9uZW50IG9mIHRoZSB7QGxpbmsgVmVjM30gaGFzIGNoYW5nZWRcbiAgICogQHJldHVybnMgLSBvdXIge0BsaW5rIFZlYzN9XG4gICAqL1xuICBvbkNoYW5nZShjYWxsYmFjazogKCkgPT4gdm9pZCk6IFZlYzMge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5fb25DaGFuZ2VDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHtAbGluayBWZWMzfSBmcm9tIHZhbHVlc1xuICAgKiBAcGFyYW0geCAtIG5ldyBYIGNvbXBvbmVudCB0byBzZXRcbiAgICogQHBhcmFtIHkgLSBuZXcgWSBjb21wb25lbnQgdG8gc2V0XG4gICAqIEBwYXJhbSB6IC0gbmV3IFogY29tcG9uZW50IHRvIHNldFxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzN9IGFmdGVyIGJlaW5nIHNldFxuICAgKi9cbiAgc2V0KHggPSAwLCB5ID0geCwgeiA9IHgpOiBWZWMzIHtcbiAgICB0aGlzLnggPSB4XG4gICAgdGhpcy55ID0geVxuICAgIHRoaXMueiA9IHpcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQWRkIGEge0BsaW5rIFZlYzN9IHRvIHRoaXMge0BsaW5rIFZlYzN9XG4gICAqIEBwYXJhbSB2ZWN0b3IgLSB7QGxpbmsgVmVjM30gdG8gYWRkXG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgVmVjM30gYWZ0ZXIgYWRkaXRpb25cbiAgICovXG4gIGFkZCh2ZWN0b3I6IFZlYzMgPSBuZXcgVmVjMygpKTogVmVjMyB7XG4gICAgdGhpcy54ICs9IHZlY3Rvci54XG4gICAgdGhpcy55ICs9IHZlY3Rvci55XG4gICAgdGhpcy56ICs9IHZlY3Rvci56XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHNjYWxhciB0byBhbGwgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyB7QGxpbmsgVmVjM31cbiAgICogQHBhcmFtIHZhbHVlIC0gbnVtYmVyIHRvIGFkZFxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzN9IGFmdGVyIGFkZGl0aW9uXG4gICAqL1xuICBhZGRTY2FsYXIodmFsdWUgPSAwKTogVmVjMyB7XG4gICAgdGhpcy54ICs9IHZhbHVlXG4gICAgdGhpcy55ICs9IHZhbHVlXG4gICAgdGhpcy56ICs9IHZhbHVlXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIFN1YnRyYWN0IGEge0BsaW5rIFZlYzN9IGZyb20gdGhpcyB7QGxpbmsgVmVjM31cbiAgICogQHBhcmFtIHZlY3RvciAtIHtAbGluayBWZWMzfSB0byBzdWJ0cmFjdFxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzN9IGFmdGVyIHN1YnRyYWN0aW9uXG4gICAqL1xuICBzdWIodmVjdG9yOiBWZWMzID0gbmV3IFZlYzMoKSk6IFZlYzMge1xuICAgIHRoaXMueCAtPSB2ZWN0b3IueFxuICAgIHRoaXMueSAtPSB2ZWN0b3IueVxuICAgIHRoaXMueiAtPSB2ZWN0b3IuelxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBTdWJ0cmFjdCBhIHNjYWxhciB0byBhbGwgdGhlIGNvbXBvbmVudHMgb2YgdGhpcyB7QGxpbmsgVmVjM31cbiAgICogQHBhcmFtIHZhbHVlIC0gbnVtYmVyIHRvIHN1YnRyYWN0XG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgVmVjM30gYWZ0ZXIgc3VidHJhY3Rpb25cbiAgICovXG4gIHN1YlNjYWxhcih2YWx1ZSA9IDApOiBWZWMzIHtcbiAgICB0aGlzLnggLT0gdmFsdWVcbiAgICB0aGlzLnkgLT0gdmFsdWVcbiAgICB0aGlzLnogLT0gdmFsdWVcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbHkgYSB7QGxpbmsgVmVjM30gd2l0aCB0aGlzIHtAbGluayBWZWMzfVxuICAgKiBAcGFyYW0gdmVjdG9yIC0ge0BsaW5rIFZlYzN9IHRvIG11bHRpcGx5IHdpdGhcbiAgICogQHJldHVybnMgLSB0aGlzIHtAbGluayBWZWMzfSBhZnRlciBtdWx0aXBsaWNhdGlvblxuICAgKi9cbiAgbXVsdGlwbHkodmVjdG9yOiBWZWMzID0gbmV3IFZlYzMoMSkpOiBWZWMzIHtcbiAgICB0aGlzLnggKj0gdmVjdG9yLnhcbiAgICB0aGlzLnkgKj0gdmVjdG9yLnlcbiAgICB0aGlzLnogKj0gdmVjdG9yLnpcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogTXVsdGlwbHkgYWxsIGNvbXBvbmVudHMgb2YgdGhpcyB7QGxpbmsgVmVjM30gd2l0aCBhIHNjYWxhclxuICAgKiBAcGFyYW0gdmFsdWUgLSBudW1iZXIgdG8gbXVsdGlwbHkgd2l0aFxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzN9IGFmdGVyIG11bHRpcGxpY2F0aW9uXG4gICAqL1xuICBtdWx0aXBseVNjYWxhcih2YWx1ZSA9IDEpOiBWZWMzIHtcbiAgICB0aGlzLnggKj0gdmFsdWVcbiAgICB0aGlzLnkgKj0gdmFsdWVcbiAgICB0aGlzLnogKj0gdmFsdWVcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ29weSBhIHtAbGluayBWZWMzfSBpbnRvIHRoaXMge0BsaW5rIFZlYzN9XG4gICAqIEBwYXJhbSB2ZWN0b3IgLSB7QGxpbmsgVmVjM30gdG8gY29weVxuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzN9IGFmdGVyIGNvcHlcbiAgICovXG4gIGNvcHkodmVjdG9yOiBWZWMzID0gbmV3IFZlYzMoKSk6IFZlYzMge1xuICAgIHRoaXMueCA9IHZlY3Rvci54XG4gICAgdGhpcy55ID0gdmVjdG9yLnlcbiAgICB0aGlzLnogPSB2ZWN0b3IuelxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9uZSB0aGlzIHtAbGluayBWZWMzfVxuICAgKiBAcmV0dXJucyAtIGNsb25lZCB7QGxpbmsgVmVjM31cbiAgICovXG4gIGNsb25lKCk6IFZlYzMge1xuICAgIHJldHVybiBuZXcgVmVjMyh0aGlzLngsIHRoaXMueSwgdGhpcy56KVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IG1heCB2YWx1ZXMgdG8gdGhpcyB7QGxpbmsgVmVjM30gY29tcG9uZW50c1xuICAgKiBAcGFyYW0gdmVjdG9yIC0ge0BsaW5rIFZlYzN9IHJlcHJlc2VudGluZyBtYXggdmFsdWVzXG4gICAqIEByZXR1cm5zIC0ge0BsaW5rIFZlYzN9IHdpdGggbWF4IHZhbHVlcyBhcHBsaWVkXG4gICAqL1xuICBtYXgodmVjdG9yOiBWZWMzID0gbmV3IFZlYzMoKSk6IFZlYzMge1xuICAgIHRoaXMueCA9IE1hdGgubWF4KHRoaXMueCwgdmVjdG9yLngpXG4gICAgdGhpcy55ID0gTWF0aC5tYXgodGhpcy55LCB2ZWN0b3IueSlcbiAgICB0aGlzLnogPSBNYXRoLm1heCh0aGlzLnosIHZlY3Rvci56KVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBtaW4gdmFsdWVzIHRvIHRoaXMge0BsaW5rIFZlYzN9IGNvbXBvbmVudHNcbiAgICogQHBhcmFtIHZlY3RvciAtIHtAbGluayBWZWMzfSByZXByZXNlbnRpbmcgbWluIHZhbHVlc1xuICAgKiBAcmV0dXJucyAtIHtAbGluayBWZWMzfSB3aXRoIG1pbiB2YWx1ZXMgYXBwbGllZFxuICAgKi9cbiAgbWluKHZlY3RvcjogVmVjMyA9IG5ldyBWZWMzKCkpOiBWZWMzIHtcbiAgICB0aGlzLnggPSBNYXRoLm1pbih0aGlzLngsIHZlY3Rvci54KVxuICAgIHRoaXMueSA9IE1hdGgubWluKHRoaXMueSwgdmVjdG9yLnkpXG4gICAgdGhpcy56ID0gTWF0aC5taW4odGhpcy56LCB2ZWN0b3IueilcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2xhbXAgdGhpcyB7QGxpbmsgVmVjM30gY29tcG9uZW50cyBieSBtaW4gYW5kIG1heCB7QGxpbmsgVmVjM30gdmVjdG9yc1xuICAgKiBAcGFyYW0gbWluIC0gbWluaW11bSB7QGxpbmsgVmVjM30gY29tcG9uZW50cyB0byBjb21wYXJlIHdpdGhcbiAgICogQHBhcmFtIG1heCAtIG1heGltdW0ge0BsaW5rIFZlYzN9IGNvbXBvbmVudHMgdG8gY29tcGFyZSB3aXRoXG4gICAqIEByZXR1cm5zIC0gY2xhbXBlZCB7QGxpbmsgVmVjM31cbiAgICovXG4gIGNsYW1wKG1pbjogVmVjMyA9IG5ldyBWZWMzKCksIG1heDogVmVjMyA9IG5ldyBWZWMzKCkpOiBWZWMzIHtcbiAgICB0aGlzLnggPSBNYXRoLm1heChtaW4ueCwgTWF0aC5taW4obWF4LngsIHRoaXMueCkpXG4gICAgdGhpcy55ID0gTWF0aC5tYXgobWluLnksIE1hdGgubWluKG1heC55LCB0aGlzLnkpKVxuICAgIHRoaXMueiA9IE1hdGgubWF4KG1pbi56LCBNYXRoLm1pbihtYXgueiwgdGhpcy56KSlcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgMiB7QGxpbmsgVmVjM30gYXJlIGVxdWFsXG4gICAqIEBwYXJhbSB2ZWN0b3IgLSB7QGxpbmsgVmVjM30gdG8gY29tcGFyZVxuICAgKiBAcmV0dXJucyAtIHdoZXRoZXIgdGhlIHtAbGluayBWZWMzfSBhcmUgZXF1YWxzIG9yIG5vdFxuICAgKi9cbiAgZXF1YWxzKHZlY3RvcjogVmVjMyA9IG5ldyBWZWMzKCkpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy54ID09PSB2ZWN0b3IueCAmJiB0aGlzLnkgPT09IHZlY3Rvci55ICYmIHRoaXMueiA9PT0gdmVjdG9yLnpcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHNxdWFyZSBsZW5ndGggb2YgdGhpcyB7QGxpbmsgVmVjM31cbiAgICogQHJldHVybnMgLSBzcXVhcmUgbGVuZ3RoIG9mIHRoaXMge0BsaW5rIFZlYzN9XG4gICAqL1xuICBsZW5ndGhTcSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnggKiB0aGlzLnggKyB0aGlzLnkgKiB0aGlzLnkgKyB0aGlzLnogKiB0aGlzLnpcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGxlbmd0aCBvZiB0aGlzIHtAbGluayBWZWMzfVxuICAgKiBAcmV0dXJucyAtIGxlbmd0aCBvZiB0aGlzIHtAbGluayBWZWMzfVxuICAgKi9cbiAgbGVuZ3RoKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLmxlbmd0aFNxKCkpXG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplIHRoaXMge0BsaW5rIFZlYzN9XG4gICAqIEByZXR1cm5zIC0gbm9ybWFsaXplZCB7QGxpbmsgVmVjM31cbiAgICovXG4gIG5vcm1hbGl6ZSgpOiBWZWMzIHtcbiAgICAvLyBub3JtYWxpemVcbiAgICBsZXQgbGVuID0gdGhpcy5sZW5ndGhTcSgpXG4gICAgaWYgKGxlbiA+IDApIHtcbiAgICAgIGxlbiA9IDEgLyBNYXRoLnNxcnQobGVuKVxuICAgIH1cbiAgICB0aGlzLnggKj0gbGVuXG4gICAgdGhpcy55ICo9IGxlblxuICAgIHRoaXMueiAqPSBsZW5cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2FsY3VsYXRlIHRoZSBkb3QgcHJvZHVjdCBvZiAyIHtAbGluayBWZWMzfVxuICAgKiBAcGFyYW0gdmVjdG9yIC0ge0BsaW5rIFZlYzN9IHRvIHVzZSBmb3IgZG90IHByb2R1Y3RcbiAgICogQHJldHVybnMgLSBkb3QgcHJvZHVjdCBvZiB0aGUgMiB7QGxpbmsgVmVjM31cbiAgICovXG4gIGRvdCh2ZWN0b3I6IFZlYzMgPSBuZXcgVmVjMygpKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy54ICogdmVjdG9yLnggKyB0aGlzLnkgKiB2ZWN0b3IueSArIHRoaXMueiAqIHZlY3Rvci56XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjcm9zcyBwcm9kdWN0IG9mIHRoaXMge0BsaW5rIFZlYzN9IHdpdGggYW5vdGhlciB7QGxpbmsgVmVjM31cbiAgICogQHBhcmFtIHZlY3RvciAtIHtAbGluayBWZWMzfSB0byB1c2UgZm9yIGNyb3NzIHByb2R1Y3RcbiAgICogQHJldHVybnMgLSB0aGlzIHtAbGluayBWZWMzfSBhZnRlciBjcm9zcyBwcm9kdWN0XG4gICAqL1xuICBjcm9zcyh2ZWN0b3I6IFZlYzMgPSBuZXcgVmVjMygpKTogVmVjMyB7XG4gICAgcmV0dXJuIHRoaXMuY3Jvc3NWZWN0b3JzKHRoaXMsIHZlY3RvcilcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhpcyB7QGxpbmsgVmVjM30gYXMgdGhlIHJlc3VsdCBvZiB0aGUgY3Jvc3MgcHJvZHVjdCBvZiB0d28ge0BsaW5rIFZlYzN9XG4gICAqIEBwYXJhbSBhIC0gZmlyc3Qge0BsaW5rIFZlYzN9IHRvIHVzZSBmb3IgY3Jvc3MgcHJvZHVjdFxuICAgKiBAcGFyYW0gYiAtIHNlY29uZCB7QGxpbmsgVmVjM30gdG8gdXNlIGZvciBjcm9zcyBwcm9kdWN0XG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgVmVjM30gYWZ0ZXIgY3Jvc3MgcHJvZHVjdFxuICAgKi9cbiAgY3Jvc3NWZWN0b3JzKGE6IFZlYzMgPSBuZXcgVmVjMygpLCBiOiBWZWMzID0gbmV3IFZlYzMoKSk6IFZlYzMge1xuICAgIGNvbnN0IGF4ID0gYS54LFxuICAgICAgYXkgPSBhLnksXG4gICAgICBheiA9IGEuelxuICAgIGNvbnN0IGJ4ID0gYi54LFxuICAgICAgYnkgPSBiLnksXG4gICAgICBieiA9IGIuelxuXG4gICAgdGhpcy54ID0gYXkgKiBieiAtIGF6ICogYnlcbiAgICB0aGlzLnkgPSBheiAqIGJ4IC0gYXggKiBielxuICAgIHRoaXMueiA9IGF4ICogYnkgLSBheSAqIGJ4XG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGN1bGF0ZSB0aGUgbGluZWFyIGludGVycG9sYXRpb24gb2YgdGhpcyB7QGxpbmsgVmVjM30gYnkgZ2l2ZW4ge0BsaW5rIFZlYzN9IGFuZCBhbHBoYSwgd2hlcmUgYWxwaGEgaXMgdGhlIHBlcmNlbnQgZGlzdGFuY2UgYWxvbmcgdGhlIGxpbmVcbiAgICogQHBhcmFtIHZlY3RvciAtIHtAbGluayBWZWMzfSB0byBpbnRlcnBvbGF0ZSB0b3dhcmRzXG4gICAqIEBwYXJhbSBhbHBoYSAtIGludGVycG9sYXRpb24gZmFjdG9yIGluIHRoZSBbMCwgMV0gaW50ZXJ2YWxcbiAgICogQHJldHVybnMgLSB0aGlzIHtAbGluayBWZWMzfSBhZnRlciBsaW5lYXIgaW50ZXJwb2xhdGlvblxuICAgKi9cbiAgbGVycCh2ZWN0b3I6IFZlYzMgPSBuZXcgVmVjMygpLCBhbHBoYSA9IDEpOiBWZWMzIHtcbiAgICB0aGlzLnggKz0gKHZlY3Rvci54IC0gdGhpcy54KSAqIGFscGhhXG4gICAgdGhpcy55ICs9ICh2ZWN0b3IueSAtIHRoaXMueSkgKiBhbHBoYVxuICAgIHRoaXMueiArPSAodmVjdG9yLnogLSB0aGlzLnopICogYWxwaGFcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYSB7QGxpbmsgTWF0NCB8IG1hdHJpeH0gdG8gYSB7QGxpbmsgVmVjM31cbiAgICogVXNlZnVsIHRvIGNvbnZlcnQgYSBwb3NpdGlvbiB7QGxpbmsgVmVjM30gZnJvbSBwbGFuZSBsb2NhbCB3b3JsZCB0byB3ZWJnbCBzcGFjZSB1c2luZyBwcm9qZWN0aW9uIHZpZXcgbWF0cml4IGZvciBleGFtcGxlXG4gICAqIFNvdXJjZSBjb2RlIGZyb206IGh0dHA6Ly9nbG1hdHJpeC5uZXQvZG9jcy92ZWMzLmpzLmh0bWxcbiAgICogQHBhcmFtIG1hdHJpeCAtIHtAbGluayBNYXQ0IHwgbWF0cml4fSB0byB1c2VcbiAgICogQHJldHVybnMgLSB0aGlzIHtAbGluayBWZWMzfSBhZnRlciB7QGxpbmsgTWF0NCB8IG1hdHJpeH0gYXBwbGljYXRpb25cbiAgICovXG4gIGFwcGx5TWF0NChtYXRyaXg6IE1hdDQgPSBuZXcgTWF0NCgpKTogVmVjMyB7XG4gICAgY29uc3QgeCA9IHRoaXMuX3gsXG4gICAgICB5ID0gdGhpcy5feSxcbiAgICAgIHogPSB0aGlzLl96XG4gICAgY29uc3QgbUFycmF5ID0gbWF0cml4LmVsZW1lbnRzXG5cbiAgICBsZXQgdyA9IG1BcnJheVszXSAqIHggKyBtQXJyYXlbN10gKiB5ICsgbUFycmF5WzExXSAqIHogKyBtQXJyYXlbMTVdXG4gICAgdyA9IHcgfHwgMVxuXG4gICAgdGhpcy54ID0gKG1BcnJheVswXSAqIHggKyBtQXJyYXlbNF0gKiB5ICsgbUFycmF5WzhdICogeiArIG1BcnJheVsxMl0pIC8gd1xuICAgIHRoaXMueSA9IChtQXJyYXlbMV0gKiB4ICsgbUFycmF5WzVdICogeSArIG1BcnJheVs5XSAqIHogKyBtQXJyYXlbMTNdKSAvIHdcbiAgICB0aGlzLnogPSAobUFycmF5WzJdICogeCArIG1BcnJheVs2XSAqIHkgKyBtQXJyYXlbMTBdICogeiArIG1BcnJheVsxNF0pIC8gd1xuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBseSBhIHtAbGluayBRdWF0IHwgcXVhdGVybmlvbn0gKHJvdGF0aW9uIGluIDNEIHNwYWNlKSB0byB0aGlzIHtAbGluayBWZWMzfVxuICAgKiBAcGFyYW0gcXVhdGVybmlvbiAtIHtAbGluayBRdWF0IHwgcXVhdGVybmlvbn0gdG8gdXNlXG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgVmVjM30gd2l0aCB0aGUgdHJhbnNmb3JtYXRpb24gYXBwbGllZFxuICAgKi9cbiAgYXBwbHlRdWF0KHF1YXRlcm5pb246IFF1YXQgPSBuZXcgUXVhdCgpKTogVmVjMyB7XG4gICAgY29uc3QgeCA9IHRoaXMueCxcbiAgICAgIHkgPSB0aGlzLnksXG4gICAgICB6ID0gdGhpcy56XG4gICAgY29uc3QgcXggPSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzBdLFxuICAgICAgcXkgPSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzFdLFxuICAgICAgcXogPSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzJdLFxuICAgICAgcXcgPSBxdWF0ZXJuaW9uLmVsZW1lbnRzWzNdXG5cbiAgICAvLyBjYWxjdWxhdGUgcXVhdCAqIHZlY3RvclxuXG4gICAgY29uc3QgaXggPSBxdyAqIHggKyBxeSAqIHogLSBxeiAqIHlcbiAgICBjb25zdCBpeSA9IHF3ICogeSArIHF6ICogeCAtIHF4ICogelxuICAgIGNvbnN0IGl6ID0gcXcgKiB6ICsgcXggKiB5IC0gcXkgKiB4XG4gICAgY29uc3QgaXcgPSAtcXggKiB4IC0gcXkgKiB5IC0gcXogKiB6XG5cbiAgICAvLyBjYWxjdWxhdGUgcmVzdWx0ICogaW52ZXJzZSBxdWF0XG5cbiAgICB0aGlzLnggPSBpeCAqIHF3ICsgaXcgKiAtcXggKyBpeSAqIC1xeiAtIGl6ICogLXF5XG4gICAgdGhpcy55ID0gaXkgKiBxdyArIGl3ICogLXF5ICsgaXogKiAtcXggLSBpeCAqIC1xelxuICAgIHRoaXMueiA9IGl6ICogcXcgKyBpdyAqIC1xeiArIGl4ICogLXF5IC0gaXkgKiAtcXhcblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogUm90YXRlIGEge0BsaW5rIFZlYzN9IGFyb3VuZCBhbmQgYXhpcyBieSBhIGdpdmVuIGFuZ2xlXG4gICAqIEBwYXJhbSBheGlzIC0gbm9ybWFsaXplZCB7QGxpbmsgVmVjM30gYXJvdW5kIHdoaWNoIHRvIHJvdGF0ZVxuICAgKiBAcGFyYW0gYW5nbGUgLSBhbmdsZSAoaW4gcmFkaWFucykgdG8gcm90YXRlXG4gICAqIEBwYXJhbSBxdWF0ZXJuaW9uIC0gb3B0aW9uYWwge0BsaW5rIFF1YXQgfCBxdWF0ZXJuaW9ufSB0byB1c2UgZm9yIHJvdGF0aW9uIGNvbXB1dGF0aW9uc1xuICAgKiBAcmV0dXJucyAtIHRoaXMge0BsaW5rIFZlYzN9IHdpdGggdGhlIHJvdGF0aW9uIGFwcGxpZWRcbiAgICovXG4gIGFwcGx5QXhpc0FuZ2xlKGF4aXMgPSBuZXcgVmVjMygpLCBhbmdsZSA9IDAsIHF1YXRlcm5pb24gPSBuZXcgUXVhdCgpKSB7XG4gICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL21yZG9vYi90aHJlZS5qcy9ibG9iL21hc3Rlci9zcmMvbWF0aC9WZWN0b3IzLmpzI0wyMTJcbiAgICByZXR1cm4gdGhpcy5hcHBseVF1YXQocXVhdGVybmlvbi5zZXRGcm9tQXhpc0FuZ2xlKGF4aXMsIGFuZ2xlKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9qZWN0IGEgM0QgY29vcmRpbmF0ZSB7QGxpbmsgVmVjM30gdG8gYSAyRCBjb29yZGluYXRlIHtAbGluayBWZWMzfVxuICAgKiBAcGFyYW0gY2FtZXJhIC0ge0BsaW5rIENhbWVyYX0gdG8gdXNlIGZvciBwcm9qZWN0aW9uXG4gICAqIEByZXR1cm5zIC0gcHJvamVjdGVkIHtAbGluayBWZWMzfVxuICAgKi9cbiAgcHJvamVjdChjYW1lcmE6IENhbWVyYSk6IFZlYzMge1xuICAgIHRoaXMuYXBwbHlNYXQ0KGNhbWVyYS52aWV3TWF0cml4KS5hcHBseU1hdDQoY2FtZXJhLnByb2plY3Rpb25NYXRyaXgpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBVbnByb2plY3QgYSAyRCBjb29yZGluYXRlIHtAbGluayBWZWMzfSB0byAzRCBjb29yZGluYXRlIHtAbGluayBWZWMzfVxuICAgKiBAcGFyYW0gY2FtZXJhIC0ge0BsaW5rIENhbWVyYX0gdG8gdXNlIGZvciBwcm9qZWN0aW9uXG4gICAqIEByZXR1cm5zIC0gdW5wcm9qZWN0ZWQge0BsaW5rIFZlYzN9XG4gICAqL1xuICB1bnByb2plY3QoY2FtZXJhOiBDYW1lcmEpOiBWZWMzIHtcbiAgICB0aGlzLmFwcGx5TWF0NChjYW1lcmEucHJvamVjdGlvbk1hdHJpeC5nZXRJbnZlcnNlKCkpLmFwcGx5TWF0NChjYW1lcmEubW9kZWxNYXRyaXgpXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuIiwiaW1wb3J0IHsgQnVmZmVyTGF5b3V0LCBnZXRCdWZmZXJMYXlvdXQsIFR5cGVkQXJyYXksIFdHU0xWYXJpYWJsZVR5cGUgfSBmcm9tICcuLi91dGlscydcclxuaW1wb3J0IHsgVmVjMiB9IGZyb20gJy4uLy4uLy4uL21hdGgvVmVjMidcclxuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uLy4uLy4uL21hdGgvVmVjMydcclxuaW1wb3J0IHsgUXVhdCB9IGZyb20gJy4uLy4uLy4uL21hdGgvUXVhdCdcclxuaW1wb3J0IHsgTWF0NCB9IGZyb20gJy4uLy4uLy4uL21hdGgvTWF0NCdcclxuXHJcbi8qKiBOdW1iZXIgb2Ygc2xvdHMgcGVyIHJvdyAqL1xyXG5leHBvcnQgY29uc3Qgc2xvdHNQZXJSb3cgPSA0XHJcbi8qKiBOdW1iZXIgb2YgYnl0ZXMgcGVyIHNsb3QgKi9cclxuZXhwb3J0IGNvbnN0IGJ5dGVzUGVyU2xvdCA9IDRcclxuLyoqIE51bWJlciBvZiBieXRlcyBwZXIgcm93ICovXHJcbmV4cG9ydCBjb25zdCBieXRlc1BlclJvdyA9IHNsb3RzUGVyUm93ICogYnl0ZXNQZXJTbG90XHJcblxyXG4vKipcclxuICogRGVmaW5lcyBhIHBvc2l0aW9uIGluIG91ciBhcnJheSBidWZmZXIgd2l0aCBhIHJvdyBpbmRleCBhbmQgYSBieXRlIGluZGV4XHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIEJ1ZmZlckVsZW1lbnRBbGlnbm1lbnRQb3NpdGlvbiB7XHJcbiAgLyoqIHJvdyBpbmRleCBvZiB0aGF0IHBvc2l0aW9uICovXHJcbiAgcm93OiBudW1iZXJcclxuICAvKiogYnl0ZSBpbmRleCBvZiB0aGF0IHBvc2l0aW9uICovXHJcbiAgYnl0ZTogbnVtYmVyXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIG91ciB7QGxpbmsgQnVmZmVyRWxlbWVudH0gYWxpZ25tZW50OlxyXG4gKiBLZWVwIHRyYWNrIG9mIGFuIGVudHJ5IHN0YXJ0IGFuZCBlbmQgcm93IGFuZCBieXRlcyBpbmRleGVzICgxNiBieXRlcyBwZXIgcm93KVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCdWZmZXJFbGVtZW50QWxpZ25tZW50IHtcclxuICAvKiogVGhlIHJvdyBhbmQgYnl0ZSBpbmRleGVzIGF0IHdoaWNoIHRoaXMge0BsaW5rIEJ1ZmZlckVsZW1lbnR9IHN0YXJ0cyAqL1xyXG4gIHN0YXJ0OiBCdWZmZXJFbGVtZW50QWxpZ25tZW50UG9zaXRpb25cclxuICAvKiogVGhlIHJvdyBhbmQgYnl0ZSBpbmRleGVzIGF0IHdoaWNoIHRoaXMge0BsaW5rIEJ1ZmZlckVsZW1lbnR9IGVuZHMgKi9cclxuICBlbmQ6IEJ1ZmZlckVsZW1lbnRBbGlnbm1lbnRQb3NpdGlvblxyXG59XHJcblxyXG4vKipcclxuICogUGFyYW1ldGVycyB1c2VkIHRvIGNyZWF0ZSBhIHtAbGluayBCdWZmZXJFbGVtZW50fVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBCdWZmZXJFbGVtZW50UGFyYW1zIHtcclxuICAvKiogVGhlIG5hbWUgb2YgdGhlIHtAbGluayBCdWZmZXJFbGVtZW50fSAqL1xyXG4gIG5hbWU6IHN0cmluZ1xyXG4gIC8qKiBUaGUga2V5IG9mIHRoZSB7QGxpbmsgQnVmZmVyRWxlbWVudH0gKi9cclxuICBrZXk6IHN0cmluZ1xyXG4gIC8qKiBUaGUgV0dTTCB2YXJpYWJsZSB0eXBlIG9mIHRoZSB7QGxpbmsgQnVmZmVyRWxlbWVudH0gKi9cclxuICB0eXBlOiBXR1NMVmFyaWFibGVUeXBlXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBVc2VkIHRvIGhhbmRsZSBlYWNoIHtAbGluayBjb3JlL2JpbmRpbmdzL0J1ZmZlckJpbmRpbmcuQnVmZmVyQmluZGluZyNhcnJheUJ1ZmZlciB8IGJ1ZmZlciBiaW5kaW5nIGFycmF5fSB2aWV3IGFuZCBkYXRhIGxheW91dCBhbGlnbm1lbnQuXHJcbiAqIENvbXB1dGUgdGhlIGV4YWN0IGFsaWdubWVudCBvZmZzZXRzIG5lZWRlZCB0byBmaWxsIGFuIHtAbGluayBBcnJheUJ1ZmZlcn0gdGhhdCB3aWxsIGJlIHNlbnQgdG8gYSB7QGxpbmsgR1BVQnVmZmVyfSwgYmFzZWQgb24gYW4gaW5wdXQgdHlwZSBhbmQgdmFsdWUuXHJcbiAqIEFsc28gdXBkYXRlIHRoZSB2aWV3IGFycmF5IGF0IHRoZSBjb3JyZWN0IG9mZnNldC5cclxuICpcclxuICogU28gYWxsIG91ciBzdHJ1Y3QgbmVlZCB0byBiZSBwYWNrZWQgaW50byBvdXIgYXJyYXlCdWZmZXIgdXNpbmcgYSBwcmVjaXNlIGxheW91dC5cclxuICogVGhleSB3aWxsIGJlIHN0b3JlZCBpbiByb3dzLCBlYWNoIHJvdyBtYWRlIG9mIDQgc2xvdHMgYW5kIGVhY2ggc2xvdHMgbWFkZSBvZiA0IGJ5dGVzLiBEZXBlbmRpbmcgb24gdGhlIGJpbmRpbmcgZWxlbWVudCB0eXBlLCBpdHMgcm93IGFuZCBzbG90IG1heSB2YXJ5IGFuZCB3ZSBtYXkgaGF2ZSB0byBpbnNlcnQgZW1wdHkgcGFkZGVkIHZhbHVlcy5cclxuICogQWxsIGluIGFsbCBpdCBsb29rcyBsaWtlIHRoYXQ6PGJyPlxyXG4gKiA8cHJlPlxyXG4gKiAgICAgICAgICBzbG90IDAgICAgc2xvdCAxICAgIHNsb3QgMiAgICBzbG90IDNcclxuICogcm93IDAgfCBfIF8gXyBfIHwgXyBfIF8gXyB8IF8gXyBfIF8gfCBfIF8gXyBfIHxcclxuICogcm93IDEgfCBfIF8gXyBfIHwgXyBfIF8gXyB8IF8gXyBfIF8gfCBfIF8gXyBfIHxcclxuICogcm93IDIgfCBfIF8gXyBfIHwgXyBfIF8gXyB8IF8gXyBfIF8gfCBfIF8gXyBfIHxcclxuICogPC9wcmU+XHJcbiAqIHNlZSBodHRwczovL3dlYmdwdWZ1bmRhbWVudGFscy5vcmcvd2ViZ3B1L2xlc3NvbnMvcmVzb3VyY2VzL3dnc2wtb2Zmc2V0LWNvbXB1dGVyLmh0bWxcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCdWZmZXJFbGVtZW50IHtcclxuICAvKiogVGhlIG5hbWUgb2YgdGhlIHtAbGluayBCdWZmZXJFbGVtZW50fSAqL1xyXG4gIG5hbWU6IHN0cmluZ1xyXG4gIC8qKiBUaGUgV0dTTCB2YXJpYWJsZSB0eXBlIG9mIHRoZSB7QGxpbmsgQnVmZmVyRWxlbWVudH0gKi9cclxuICB0eXBlOiBXR1NMVmFyaWFibGVUeXBlXHJcbiAgLyoqIFRoZSBrZXkgb2YgdGhlIHtAbGluayBCdWZmZXJFbGVtZW50fSAqL1xyXG4gIGtleTogc3RyaW5nXHJcblxyXG4gIC8qKiB7QGxpbmsgQnVmZmVyTGF5b3V0fSB1c2VkIHRvIGZpbGwgdGhlIHtAbGluayBjb3JlL2JpbmRpbmdzL0J1ZmZlckJpbmRpbmcuQnVmZmVyQmluZGluZyNhcnJheUJ1ZmZlciB8IGJ1ZmZlciBiaW5kaW5nIGFycmF5fSBhdCB0aGUgcmlnaHQgb2Zmc2V0cyAqL1xyXG4gIGJ1ZmZlckxheW91dDogQnVmZmVyTGF5b3V0XHJcblxyXG4gIC8qKlxyXG4gICAqIE9iamVjdCBkZWZpbmluZyBleGFjdGx5IGF0IHdoaWNoIHBsYWNlIGEgYmluZGluZyBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byB0aGUge0BsaW5rIGNvcmUvYmluZGluZ3MvQnVmZmVyQmluZGluZy5CdWZmZXJCaW5kaW5nI2FycmF5QnVmZmVyIHwgYnVmZmVyIGJpbmRpbmcgYXJyYXl9XHJcbiAgICovXHJcbiAgYWxpZ25tZW50OiBCdWZmZXJFbGVtZW50QWxpZ25tZW50XHJcblxyXG4gIC8qKiBBcnJheSBjb250YWluaW5nIHRoZSB7QGxpbmsgQnVmZmVyRWxlbWVudH0gdmFsdWVzICovXHJcbiAgdmlldz86IFR5cGVkQXJyYXlcclxuXHJcbiAgLyoqXHJcbiAgICogQnVmZmVyRWxlbWVudCBjb25zdHJ1Y3RvclxyXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIEJ1ZmZlckVsZW1lbnRQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSBvdXIge0BsaW5rIEJ1ZmZlckVsZW1lbnR9XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoeyBuYW1lLCBrZXksIHR5cGUgPSAnZjMyJyB9OiBCdWZmZXJFbGVtZW50UGFyYW1zKSB7XHJcbiAgICB0aGlzLm5hbWUgPSBuYW1lXHJcbiAgICB0aGlzLmtleSA9IGtleVxyXG4gICAgdGhpcy50eXBlID0gdHlwZVxyXG5cclxuICAgIHRoaXMuYnVmZmVyTGF5b3V0ID0gZ2V0QnVmZmVyTGF5b3V0KHRoaXMudHlwZS5yZXBsYWNlKCdhcnJheScsICcnKS5yZXBsYWNlKCc8JywgJycpLnJlcGxhY2UoJz4nLCAnJykpXHJcblxyXG4gICAgLy8gc2V0IGluaXQgYWxpZ25tZW50XHJcbiAgICB0aGlzLmFsaWdubWVudCA9IHtcclxuICAgICAgc3RhcnQ6IHtcclxuICAgICAgICByb3c6IDAsXHJcbiAgICAgICAgYnl0ZTogMCxcclxuICAgICAgfSxcclxuICAgICAgZW5kOiB7XHJcbiAgICAgICAgcm93OiAwLFxyXG4gICAgICAgIGJ5dGU6IDAsXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIHRvdGFsIG51bWJlciBvZiByb3dzIHVzZWQgYnkgdGhpcyB7QGxpbmsgQnVmZmVyRWxlbWVudH1cclxuICAgKiBAcmVhZG9ubHlcclxuICAgKi9cclxuICBnZXQgcm93Q291bnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmFsaWdubWVudC5lbmQucm93IC0gdGhpcy5hbGlnbm1lbnQuc3RhcnQucm93ICsgMVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSB0b3RhbCBudW1iZXIgb2YgYnl0ZXMgdXNlZCBieSB0aGlzIHtAbGluayBCdWZmZXJFbGVtZW50fSBiYXNlZCBvbiB7QGxpbmsgQnVmZmVyRWxlbWVudEFsaWdubWVudCB8IGFsaWdubWVudH0gc3RhcnQgYW5kIGVuZCBvZmZzZXRzXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICovXHJcbiAgZ2V0IGJ5dGVDb3VudCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguYWJzKHRoaXMuZW5kT2Zmc2V0IC0gdGhpcy5zdGFydE9mZnNldCkgKyAxXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIHRvdGFsIG51bWJlciBvZiBieXRlcyB1c2VkIGJ5IHRoaXMge0BsaW5rIEJ1ZmZlckVsZW1lbnR9LCBpbmNsdWRpbmcgZmluYWwgcGFkZGluZ1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIGdldCBwYWRkZWRCeXRlQ291bnQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiAodGhpcy5hbGlnbm1lbnQuZW5kLnJvdyArIDEpICogYnl0ZXNQZXJSb3dcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgb2Zmc2V0IChpLmUuIGJ5dGUgaW5kZXgpIGF0IHdoaWNoIG91ciB7QGxpbmsgQnVmZmVyRWxlbWVudH0gc3RhcnRzXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICovXHJcbiAgZ2V0IHN0YXJ0T2Zmc2V0KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXRCeXRlQ291bnRBdFBvc2l0aW9uKHRoaXMuYWxpZ25tZW50LnN0YXJ0KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBhcnJheSBvZmZzZXQgKGkuZS4gYXJyYXkgaW5kZXgpIGF0IHdoaWNoIG91ciB7QGxpbmsgQnVmZmVyRWxlbWVudH0gc3RhcnRzXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICovXHJcbiAgZ2V0IHN0YXJ0T2Zmc2V0VG9JbmRleCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhcnRPZmZzZXQgLyBieXRlc1BlclNsb3RcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgb2Zmc2V0IChpLmUuIGJ5dGUgaW5kZXgpIGF0IHdoaWNoIG91ciB7QGxpbmsgQnVmZmVyRWxlbWVudH0gZW5kc1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIGdldCBlbmRPZmZzZXQoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmdldEJ5dGVDb3VudEF0UG9zaXRpb24odGhpcy5hbGlnbm1lbnQuZW5kKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBhcnJheSBvZmZzZXQgKGkuZS4gYXJyYXkgaW5kZXgpIGF0IHdoaWNoIG91ciB7QGxpbmsgQnVmZmVyRWxlbWVudH0gZW5kc1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIGdldCBlbmRPZmZzZXRUb0luZGV4KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gTWF0aC5mbG9vcih0aGlzLmVuZE9mZnNldCAvIGJ5dGVzUGVyU2xvdClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUgcG9zaXRpb24gYXQgZ2l2ZW4gb2Zmc2V0IChpLmUuIGJ5dGUgaW5kZXgpXHJcbiAgICogQHBhcmFtIG9mZnNldCAtIGJ5dGUgaW5kZXggdG8gdXNlXHJcbiAgICovXHJcbiAgZ2V0UG9zaXRpb25BdE9mZnNldChvZmZzZXQgPSAwKTogQnVmZmVyRWxlbWVudEFsaWdubWVudFBvc2l0aW9uIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIHJvdzogTWF0aC5mbG9vcihvZmZzZXQgLyBieXRlc1BlclJvdyksXHJcbiAgICAgIGJ5dGU6IG9mZnNldCAlIGJ5dGVzUGVyUm93LFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBudW1iZXIgb2YgYnl0ZXMgYXQgYSBnaXZlbiB7QGxpbmsgQnVmZmVyRWxlbWVudEFsaWdubWVudFBvc2l0aW9uIHwgcG9zaXRpb259XHJcbiAgICogQHBhcmFtIHBvc2l0aW9uIC0ge0BsaW5rIEJ1ZmZlckVsZW1lbnRBbGlnbm1lbnRQb3NpdGlvbiB8IHBvc2l0aW9ufSBmcm9tIHdoaWNoIHRvIGNvdW50XHJcbiAgICogQHJldHVybnMgLSBieXRlIGNvdW50IGF0IHRoZSBnaXZlbiB7QGxpbmsgQnVmZmVyRWxlbWVudEFsaWdubWVudFBvc2l0aW9uIHwgcG9zaXRpb259XHJcbiAgICovXHJcbiAgZ2V0Qnl0ZUNvdW50QXRQb3NpdGlvbihwb3NpdGlvbjogQnVmZmVyRWxlbWVudEFsaWdubWVudFBvc2l0aW9uID0geyByb3c6IDAsIGJ5dGU6IDAgfSk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gcG9zaXRpb24ucm93ICogYnl0ZXNQZXJSb3cgKyBwb3NpdGlvbi5ieXRlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDaGVjayB0aGF0IGEge0BsaW5rIEJ1ZmZlckVsZW1lbnRBbGlnbm1lbnRQb3NpdGlvbiNieXRlIHwgYnl0ZSBwb3NpdGlvbn0gZG9lcyBub3Qgb3ZlcmZsb3cgaXRzIG1heCB2YWx1ZSAoMTYpXHJcbiAgICogQHBhcmFtIHBvc2l0aW9uIC0ge0BsaW5rIEJ1ZmZlckVsZW1lbnRBbGlnbm1lbnRQb3NpdGlvbiB8IHBvc2l0aW9ufVxyXG4gICAqIEByZXR1cm5zIC0gdXBkYXRlZCB7QGxpbmsgQnVmZmVyRWxlbWVudEFsaWdubWVudFBvc2l0aW9uIHwgcG9zaXRpb259XHJcbiAgICovXHJcbiAgYXBwbHlPdmVyZmxvd1RvUG9zaXRpb24oXHJcbiAgICBwb3NpdGlvbjogQnVmZmVyRWxlbWVudEFsaWdubWVudFBvc2l0aW9uID0geyByb3c6IDAsIGJ5dGU6IDAgfVxyXG4gICk6IEJ1ZmZlckVsZW1lbnRBbGlnbm1lbnRQb3NpdGlvbiB7XHJcbiAgICBpZiAocG9zaXRpb24uYnl0ZSA+IGJ5dGVzUGVyUm93IC0gMSkge1xyXG4gICAgICBjb25zdCBvdmVyZmxvdyA9IHBvc2l0aW9uLmJ5dGUgJSBieXRlc1BlclJvd1xyXG4gICAgICBwb3NpdGlvbi5yb3cgKz0gTWF0aC5mbG9vcihwb3NpdGlvbi5ieXRlIC8gYnl0ZXNQZXJSb3cpXHJcbiAgICAgIHBvc2l0aW9uLmJ5dGUgPSBvdmVyZmxvd1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBwb3NpdGlvblxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSBudW1iZXIgb2YgYnl0ZXMgYmV0d2VlbiB0d28ge0BsaW5rIEJ1ZmZlckVsZW1lbnRBbGlnbm1lbnRQb3NpdGlvbiB8IHBvc2l0aW9uc31cclxuICAgKiBAcGFyYW0gcDEgLSBmaXJzdCB7QGxpbmsgQnVmZmVyRWxlbWVudEFsaWdubWVudFBvc2l0aW9uIHwgcG9zaXRpb259XHJcbiAgICogQHBhcmFtIHAyIC0gc2Vjb25kIHtAbGluayBCdWZmZXJFbGVtZW50QWxpZ25tZW50UG9zaXRpb24gfCBwb3NpdGlvbn1cclxuICAgKiBAcmV0dXJucyAtIG51bWJlciBvZiBieXRlc1xyXG4gICAqL1xyXG4gIGdldEJ5dGVDb3VudEJldHdlZW5Qb3NpdGlvbnMoXHJcbiAgICBwMTogQnVmZmVyRWxlbWVudEFsaWdubWVudFBvc2l0aW9uID0geyByb3c6IDAsIGJ5dGU6IDAgfSxcclxuICAgIHAyOiBCdWZmZXJFbGVtZW50QWxpZ25tZW50UG9zaXRpb24gPSB7IHJvdzogMCwgYnl0ZTogMCB9XHJcbiAgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLmFicyh0aGlzLmdldEJ5dGVDb3VudEF0UG9zaXRpb24ocDIpIC0gdGhpcy5nZXRCeXRlQ291bnRBdFBvc2l0aW9uKHAxKSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbXB1dGUgdGhlIHJpZ2h0IGFsaWdubWVudCAoaS5lLiBzdGFydCBhbmQgZW5kIHJvd3MgYW5kIGJ5dGVzKSBnaXZlbiB0aGUgc2l6ZSBhbmQgYWxpZ24gcHJvcGVydGllcyBhbmQgdGhlIG5leHQgYXZhaWxhYmxlIHtAbGluayBCdWZmZXJFbGVtZW50QWxpZ25tZW50UG9zaXRpb24gfCBwb3NpdGlvbn1cclxuICAgKiBAcGFyYW0gbmV4dFBvc2l0aW9uQXZhaWxhYmxlIC0gbmV4dCB7QGxpbmsgQnVmZmVyRWxlbWVudEFsaWdubWVudFBvc2l0aW9uIHwgcG9zaXRpb259IGF0IHdoaWNoIHdlIHNob3VsZCBpbnNlcnQgdGhpcyBlbGVtZW50XHJcbiAgICogQHJldHVybnMgLSBjb21wdXRlZCB7QGxpbmsgQnVmZmVyRWxlbWVudEFsaWdubWVudCB8IGFsaWdubWVudH1cclxuICAgKi9cclxuICBnZXRFbGVtZW50QWxpZ25tZW50KFxyXG4gICAgbmV4dFBvc2l0aW9uQXZhaWxhYmxlOiBCdWZmZXJFbGVtZW50QWxpZ25tZW50UG9zaXRpb24gPSB7IHJvdzogMCwgYnl0ZTogMCB9XHJcbiAgKTogQnVmZmVyRWxlbWVudEFsaWdubWVudCB7XHJcbiAgICBjb25zdCBhbGlnbm1lbnQgPSB7XHJcbiAgICAgIHN0YXJ0OiBuZXh0UG9zaXRpb25BdmFpbGFibGUsXHJcbiAgICAgIGVuZDogbmV4dFBvc2l0aW9uQXZhaWxhYmxlLFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IHsgc2l6ZSwgYWxpZ24gfSA9IHRoaXMuYnVmZmVyTGF5b3V0XHJcblxyXG4gICAgLy8gY2hlY2sgdGhlIGFsaWdubWVudCwgaS5lLiBldmVuIGlmIHRoZXJlJ3MgZW5vdWdoIHNwYWNlIGZvciBvdXIgYmluZGluZ1xyXG4gICAgLy8gd2UgbWlnaHQgaGF2ZSB0byBwYWQgdGhlIHNsb3QgYmVjYXVzZSBzb21lIHR5cGVzIG5lZWQgYSBzcGVjaWZpYyBhbGlnbm1lbnRcclxuICAgIGlmIChuZXh0UG9zaXRpb25BdmFpbGFibGUuYnl0ZSAlIGFsaWduICE9PSAwKSB7XHJcbiAgICAgIG5leHRQb3NpdGlvbkF2YWlsYWJsZS5ieXRlICs9IG5leHRQb3NpdGlvbkF2YWlsYWJsZS5ieXRlICUgYWxpZ25cclxuICAgIH1cclxuXHJcbiAgICAvLyBpbiB0aGUgY2FzZSBvZiBhIGJpbmRpbmcgdGhhdCBjb3VsZCBmaXQgb24gb25lIHJvd1xyXG4gICAgLy8gYnV0IHdlIGRvbid0IGhhdmUgc3BhY2Ugb24gdGhlIGN1cnJlbnQgcm93IGZvciB0aGlzIGJpbmRpbmcgZWxlbWVudFxyXG4gICAgLy8gZ28gdG8gbmV4dCByb3dcclxuICAgIGlmIChzaXplIDw9IGJ5dGVzUGVyUm93ICYmIG5leHRQb3NpdGlvbkF2YWlsYWJsZS5ieXRlICsgc2l6ZSA+IGJ5dGVzUGVyUm93KSB7XHJcbiAgICAgIG5leHRQb3NpdGlvbkF2YWlsYWJsZS5yb3cgKz0gMVxyXG4gICAgICBuZXh0UG9zaXRpb25BdmFpbGFibGUuYnl0ZSA9IDBcclxuICAgIH1cclxuXHJcbiAgICBhbGlnbm1lbnQuZW5kID0ge1xyXG4gICAgICByb3c6IG5leHRQb3NpdGlvbkF2YWlsYWJsZS5yb3cgKyBNYXRoLmNlaWwoc2l6ZSAvIGJ5dGVzUGVyUm93KSAtIDEsXHJcbiAgICAgIGJ5dGU6IG5leHRQb3NpdGlvbkF2YWlsYWJsZS5ieXRlICsgKHNpemUgJSBieXRlc1BlclJvdyA9PT0gMCA/IGJ5dGVzUGVyUm93IC0gMSA6IChzaXplICUgYnl0ZXNQZXJSb3cpIC0gMSksIC8vIGVuZCBvZiByb3cgPyB0aGVuIGl0IGVuZHMgb24gc2xvdCAoYnl0ZXNQZXJSb3cgLSAxKVxyXG4gICAgfVxyXG5cclxuICAgIC8vIG5vdyBmaW5hbCBjaGVjaywgaWYgZW5kIHNsb3QgaGFzIG92ZXJmbG93blxyXG4gICAgYWxpZ25tZW50LmVuZCA9IHRoaXMuYXBwbHlPdmVyZmxvd1RvUG9zaXRpb24oYWxpZ25tZW50LmVuZClcclxuXHJcbiAgICByZXR1cm4gYWxpZ25tZW50XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHtAbGluayBCdWZmZXJFbGVtZW50QWxpZ25tZW50IHwgYWxpZ25tZW50fSBmcm9tIGEge0BsaW5rIEJ1ZmZlckVsZW1lbnRBbGlnbm1lbnRQb3NpdGlvbiB8IHBvc2l0aW9ufVxyXG4gICAqIEBwYXJhbSBwb3NpdGlvbiAtIHtAbGluayBCdWZmZXJFbGVtZW50QWxpZ25tZW50UG9zaXRpb24gfCBwb3NpdGlvbn0gYXQgd2hpY2ggdG8gc3RhcnQgaW5zZXJ0aW5nIHRoZSB2YWx1ZXMgaW4gdGhlIHtAbGluayAhY29yZS9iaW5kaW5ncy9CdWZmZXJCaW5kaW5nLkJ1ZmZlckJpbmRpbmcjYXJyYXlCdWZmZXIgfCBidWZmZXIgYmluZGluZyBhcnJheX1cclxuICAgKi9cclxuICBzZXRBbGlnbm1lbnRGcm9tUG9zaXRpb24ocG9zaXRpb246IEJ1ZmZlckVsZW1lbnRBbGlnbm1lbnRQb3NpdGlvbiA9IHsgcm93OiAwLCBieXRlOiAwIH0pIHtcclxuICAgIHRoaXMuYWxpZ25tZW50ID0gdGhpcy5nZXRFbGVtZW50QWxpZ25tZW50KHBvc2l0aW9uKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSB7QGxpbmsgQnVmZmVyRWxlbWVudEFsaWdubWVudCB8IGFsaWdubWVudH0gZnJvbSBhbiBvZmZzZXQgKGJ5dGUgY291bnQpXHJcbiAgICogQHBhcmFtIHN0YXJ0T2Zmc2V0IC0gb2Zmc2V0IGF0IHdoaWNoIHRvIHN0YXJ0IGluc2VydGluZyB0aGUgdmFsdWVzIGluIHRoZSB7QGxpbmsgY29yZS9iaW5kaW5ncy9CdWZmZXJCaW5kaW5nLkJ1ZmZlckJpbmRpbmcjYXJyYXlCdWZmZXIgfCBidWZmZXIgYmluZGluZyBhcnJheX1cclxuICAgKi9cclxuICBzZXRBbGlnbm1lbnQoc3RhcnRPZmZzZXQgPSAwKSB7XHJcbiAgICB0aGlzLnNldEFsaWdubWVudEZyb21Qb3NpdGlvbih0aGlzLmdldFBvc2l0aW9uQXRPZmZzZXQoc3RhcnRPZmZzZXQpKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSB7QGxpbmsgdmlld31cclxuICAgKiBAcGFyYW0gYXJyYXlCdWZmZXIgLSB0aGUge0BsaW5rIGNvcmUvYmluZGluZ3MvQnVmZmVyQmluZGluZy5CdWZmZXJCaW5kaW5nI2FycmF5QnVmZmVyIHwgYnVmZmVyIGJpbmRpbmcgYXJyYXl9XHJcbiAgICogQHBhcmFtIGFycmF5VmlldyAtIHRoZSB7QGxpbmsgY29yZS9iaW5kaW5ncy9CdWZmZXJCaW5kaW5nLkJ1ZmZlckJpbmRpbmcjYXJyYXlWaWV3IHwgYnVmZmVyIGJpbmRpbmcgYXJyYXkgdmlld31cclxuICAgKi9cclxuICBzZXRWaWV3KGFycmF5QnVmZmVyOiBBcnJheUJ1ZmZlciwgYXJyYXlWaWV3OiBEYXRhVmlldykge1xyXG4gICAgdGhpcy52aWV3ID0gbmV3IHRoaXMuYnVmZmVyTGF5b3V0LlZpZXcoXHJcbiAgICAgIGFycmF5QnVmZmVyLFxyXG4gICAgICB0aGlzLnN0YXJ0T2Zmc2V0LFxyXG4gICAgICB0aGlzLmJ5dGVDb3VudCAvIHRoaXMuYnVmZmVyTGF5b3V0LlZpZXcuQllURVNfUEVSX0VMRU1FTlRcclxuICAgIClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSB0aGUge0BsaW5rIHZpZXd9IGJhc2VkIG9uIHRoZSBuZXcgdmFsdWVcclxuICAgKiBAcGFyYW0gdmFsdWUgLSBuZXcgdmFsdWUgdG8gdXNlXHJcbiAgICovXHJcbiAgdXBkYXRlKHZhbHVlKSB7XHJcbiAgICBpZiAodGhpcy50eXBlID09PSAnZjMyJyB8fCB0aGlzLnR5cGUgPT09ICd1MzInIHx8IHRoaXMudHlwZSA9PT0gJ2kzMicpIHtcclxuICAgICAgdGhpcy52aWV3WzBdID0gdmFsdWUgYXMgbnVtYmVyXHJcbiAgICB9IGVsc2UgaWYgKHRoaXMudHlwZSA9PT0gJ3ZlYzJmJykge1xyXG4gICAgICB0aGlzLnZpZXdbMF0gPSAodmFsdWUgYXMgVmVjMikueCA/PyB2YWx1ZVswXSA/PyAwXHJcbiAgICAgIHRoaXMudmlld1sxXSA9ICh2YWx1ZSBhcyBWZWMyKS55ID8/IHZhbHVlWzFdID8/IDBcclxuICAgIH0gZWxzZSBpZiAodGhpcy50eXBlID09PSAndmVjM2YnKSB7XHJcbiAgICAgIHRoaXMudmlld1swXSA9ICh2YWx1ZSBhcyBWZWMzKS54ID8/IHZhbHVlWzBdID8/IDBcclxuICAgICAgdGhpcy52aWV3WzFdID0gKHZhbHVlIGFzIFZlYzMpLnkgPz8gdmFsdWVbMV0gPz8gMFxyXG4gICAgICB0aGlzLnZpZXdbMl0gPSAodmFsdWUgYXMgVmVjMykueiA/PyB2YWx1ZVsyXSA/PyAwXHJcbiAgICB9IGVsc2UgaWYgKCh2YWx1ZSBhcyBRdWF0IHwgTWF0NCkuZWxlbWVudHMpIHtcclxuICAgICAgdGhpcy52aWV3LnNldCgodmFsdWUgYXMgUXVhdCB8IE1hdDQpLmVsZW1lbnRzKVxyXG4gICAgfSBlbHNlIGlmIChBcnJheUJ1ZmZlci5pc1ZpZXcodmFsdWUpIHx8IEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XHJcbiAgICAgIHRoaXMudmlldy5zZXQodmFsdWUgYXMgbnVtYmVyW10pXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBFeHRyYWN0IHRoZSBkYXRhIGNvcnJlc3BvbmRpbmcgdG8gdGhpcyBzcGVjaWZpYyB7QGxpbmsgQnVmZmVyRWxlbWVudH0gZnJvbSBhIHtAbGluayBGbG9hdDMyQXJyYXl9IGhvbGRpbmcgdGhlIHtAbGluayBHUFVCdWZmZXJ9IGRhdGEgb2YgdGhlIHBhcmVudE1lc2gge0BsaW5rIGNvcmUvYmluZGluZ3MvQnVmZmVyQmluZGluZy5CdWZmZXJCaW5kaW5nIHwgQnVmZmVyQmluZGluZ31cclxuICAgKiBAcGFyYW0gcmVzdWx0IC0ge0BsaW5rIEZsb2F0MzJBcnJheX0gaG9sZGluZyB7QGxpbmsgR1BVQnVmZmVyfSBkYXRhXHJcbiAgICogQHJldHVybnMgLSBleHRyYWN0ZWQgZGF0YSBmcm9tIHRoZSB7QGxpbmsgRmxvYXQzMkFycmF5fVxyXG4gICAqL1xyXG4gIGV4dHJhY3REYXRhRnJvbUJ1ZmZlclJlc3VsdChyZXN1bHQ6IEZsb2F0MzJBcnJheSkge1xyXG4gICAgcmV0dXJuIHJlc3VsdC5zbGljZSh0aGlzLnN0YXJ0T2Zmc2V0VG9JbmRleCwgdGhpcy5lbmRPZmZzZXRUb0luZGV4KVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBCdWZmZXJFbGVtZW50LCBCdWZmZXJFbGVtZW50UGFyYW1zLCBieXRlc1BlclNsb3QgfSBmcm9tICcuL0J1ZmZlckVsZW1lbnQnXG5pbXBvcnQgeyB0aHJvd1dhcm5pbmcgfSBmcm9tICcuLi8uLi8uLi91dGlscy91dGlscydcblxuLyoqXG4gKiBQYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIEJ1ZmZlckFycmF5RWxlbWVudH1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBCdWZmZXJBcnJheUVsZW1lbnRQYXJhbXMgZXh0ZW5kcyBCdWZmZXJFbGVtZW50UGFyYW1zIHtcbiAgLyoqIEluaXRpYWwgbGVuZ3RoIG9mIHRoZSBpbnB1dCB7QGxpbmsgY29yZS9iaW5kaW5ncy9CdWZmZXJCaW5kaW5nLkJ1ZmZlckJpbmRpbmcjYXJyYXlCdWZmZXIgfCBidWZmZXIgYmluZGluZyBhcnJheX0gKi9cbiAgYXJyYXlMZW5ndGg6IG51bWJlclxufVxuXG4vKipcbiAqIFVzZWQgdG8gaGFuZGxlIHNwZWNpZmljIGFycmF5IHtAbGluayBjb3JlL2JpbmRpbmdzL0J1ZmZlckJpbmRpbmcuQnVmZmVyQmluZGluZyB8IEJ1ZmZlckJpbmRpbmd9IHR5cGVzXG4gKi9cbmV4cG9ydCBjbGFzcyBCdWZmZXJBcnJheUVsZW1lbnQgZXh0ZW5kcyBCdWZmZXJFbGVtZW50IHtcbiAgLyoqIEluaXRpYWwgbGVuZ3RoIG9mIHRoZSBpbnB1dCB7QGxpbmsgY29yZS9iaW5kaW5ncy9CdWZmZXJCaW5kaW5nLkJ1ZmZlckJpbmRpbmcjYXJyYXlCdWZmZXIgfCBidWZmZXIgYmluZGluZyBhcnJheX0gKi9cbiAgYXJyYXlMZW5ndGg6IG51bWJlclxuICAvKiogVG90YWwgbnVtYmVyIG9mIGVsZW1lbnRzIChpLmUuIHtAbGluayBhcnJheUxlbmd0aH0gZGl2aWRlZCBieSB7QGxpbmsgY29yZS9iaW5kaW5ncy91dGlscy5CdWZmZXJMYXlvdXQgfCBidWZmZXIgbGF5b3V0fSBudW1iZXIgb2YgZWxlbWVudHMgKi9cbiAgbnVtRWxlbWVudHM6IG51bWJlclxuICAvKiogTnVtYmVyIG9mIGJ5dGVzIGluIHRoZSB7QGxpbmsgQXJyYXlCdWZmZXJ9IGJldHdlZW4gdHdvIGVsZW1lbnRzIHtAbGluayBzdGFydE9mZnNldH0gKi9cbiAgYXJyYXlTdHJpZGU6IG51bWJlclxuXG4gIC8qKlxuICAgKiBCdWZmZXJBcnJheUVsZW1lbnQgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgQnVmZmVyQXJyYXlFbGVtZW50UGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgb3VyIHtAbGluayBCdWZmZXJBcnJheUVsZW1lbnR9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGtleSwgdHlwZSA9ICdmMzInLCBhcnJheUxlbmd0aCA9IDEgfTogQnVmZmVyQXJyYXlFbGVtZW50UGFyYW1zKSB7XG4gICAgc3VwZXIoeyBuYW1lLCBrZXksIHR5cGUgfSlcblxuICAgIHRoaXMuYXJyYXlMZW5ndGggPSBhcnJheUxlbmd0aFxuICAgIHRoaXMubnVtRWxlbWVudHMgPSB0aGlzLmFycmF5TGVuZ3RoIC8gdGhpcy5idWZmZXJMYXlvdXQubnVtRWxlbWVudHNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGFycmF5IHN0cmlkZSBiZXR3ZWVuIHR3byBlbGVtZW50cyBvZiB0aGUgYXJyYXksIGluIGluZGljZXNcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgYXJyYXlTdHJpZGVUb0luZGV4KCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuYXJyYXlTdHJpZGUgLyBieXRlc1BlclNsb3RcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHtAbGluayBjb3JlL2JpbmRpbmdzL2J1ZmZlckVsZW1lbnRzL0J1ZmZlckVsZW1lbnQuQnVmZmVyRWxlbWVudEFsaWdubWVudCB8IGFsaWdubWVudH1cbiAgICogVG8gY29tcHV0ZSBob3cgYXJyYXlzIGFyZSBwYWNrZWQsIHdlIGdldCB0aGUgc2Vjb25kIGl0ZW0gYWxpZ25tZW50IGFzIHdlbGwgYW5kIHVzZSBpdCB0byBjYWxjdWxhdGUgdGhlIGFycmF5U3RyaWRlIGJldHdlZW4gdHdvIGFycmF5IGVsZW1lbnRzLiBVc2luZyB0aGUgYXJyYXlTdHJpZGUgYW5kIHRoZSB0b3RhbCBudW1iZXIgb2YgZWxlbWVudHMsIHdlIGNhbiBlYXNpbHkgZ2V0IHRoZSBlbmQgYWxpZ25tZW50IHBvc2l0aW9uLlxuICAgKiBAcGFyYW0gc3RhcnRPZmZzZXQgLSBvZmZzZXQgYXQgd2hpY2ggdG8gc3RhcnQgaW5zZXJ0aW5nIHRoZSB2YWx1ZXMgaW4gdGhlIHtAbGluayBjb3JlL2JpbmRpbmdzL0J1ZmZlckJpbmRpbmcuQnVmZmVyQmluZGluZyNhcnJheUJ1ZmZlciB8IGJ1ZmZlciBiaW5kaW5nIGFycmF5IGJ1ZmZlcn1cbiAgICovXG4gIHNldEFsaWdubWVudChzdGFydE9mZnNldCA9IDApIHtcbiAgICBzdXBlci5zZXRBbGlnbm1lbnQoc3RhcnRPZmZzZXQpXG5cbiAgICAvLyByZXBlYXQgZm9yIGEgc2Vjb25kIGVsZW1lbnQgdG8ga25vdyBob3cgdGhpbmdzIGFyZSBsYWlkIG91dFxuICAgIGNvbnN0IG5leHRBbGlnbm1lbnQgPSB0aGlzLmdldEVsZW1lbnRBbGlnbm1lbnQodGhpcy5nZXRQb3NpdGlvbkF0T2Zmc2V0KHRoaXMuZW5kT2Zmc2V0ICsgMSkpXG4gICAgdGhpcy5hcnJheVN0cmlkZSA9IHRoaXMuZ2V0Qnl0ZUNvdW50QmV0d2VlblBvc2l0aW9ucyh0aGlzLmFsaWdubWVudC5lbmQsIG5leHRBbGlnbm1lbnQuZW5kKVxuXG4gICAgdGhpcy5hbGlnbm1lbnQuZW5kID0gdGhpcy5nZXRQb3NpdGlvbkF0T2Zmc2V0KHRoaXMuZW5kT2Zmc2V0ICsgdGhpcy5hcnJheVN0cmlkZSAqICh0aGlzLm51bUVsZW1lbnRzIC0gMSkpXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSB7QGxpbmsgdmlld30gYmFzZWQgb24gdGhlIG5ldyB2YWx1ZVxuICAgKiBAcGFyYW0gdmFsdWUgLSBuZXcgdmFsdWUgdG8gdXNlXG4gICAqL1xuICB1cGRhdGUodmFsdWUpIHtcbiAgICBpZiAoQXJyYXlCdWZmZXIuaXNWaWV3KHZhbHVlKSB8fCBBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgbGV0IHZhbHVlSW5kZXggPSAwXG5cbiAgICAgIGNvbnN0IHZpZXdMZW5ndGggPSB0aGlzLmJ5dGVDb3VudCAvIHRoaXMuYnVmZmVyTGF5b3V0LlZpZXcuQllURVNfUEVSX0VMRU1FTlRcbiAgICAgIC8vIGFycmF5U3RyaWRlIGlzIG91ciB2aWV3IGxlbmd0aCBkaXZpZGVkIGJ5IHRoZSBudW1iZXIgb2YgZWxlbWVudHMgaW4gb3VyIGFycmF5XG4gICAgICBjb25zdCBzdHJpZGUgPSBNYXRoLmNlaWwodmlld0xlbmd0aCAvIHRoaXMubnVtRWxlbWVudHMpXG5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1FbGVtZW50czsgaSsrKSB7XG4gICAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy5idWZmZXJMYXlvdXQubnVtRWxlbWVudHM7IGorKykge1xuICAgICAgICAgIHRoaXMudmlld1tqICsgaSAqIHN0cmlkZV0gPSB2YWx1ZVt2YWx1ZUluZGV4XVxuXG4gICAgICAgICAgdmFsdWVJbmRleCsrXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhyb3dXYXJuaW5nKGBCdWZmZXJBcnJheUVsZW1lbnQ6IHZhbHVlIHBhc3NlZCB0byAke3RoaXMubmFtZX0gaXMgbm90IGFuIGFycmF5OiAke3ZhbHVlfWApXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCdWZmZXJBcnJheUVsZW1lbnQsIEJ1ZmZlckFycmF5RWxlbWVudFBhcmFtcyB9IGZyb20gJy4vQnVmZmVyQXJyYXlFbGVtZW50J1xyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gY29tcHV0ZSBhbGlnbm1lbnQgd2hlbiBkZWFsaW5nIHdpdGggYXJyYXlzIG9mIFN0cnVjdFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEJ1ZmZlckludGVybGVhdmVkQXJyYXlFbGVtZW50IGV4dGVuZHMgQnVmZmVyQXJyYXlFbGVtZW50IHtcclxuICAvKiogQ29ycmVzcG9uZGluZyB7QGxpbmsgRGF0YVZpZXd9IHNldCBmdW5jdGlvbiBiYXNlZCBvbiB7QGxpbmsgdmlld30gdHlwZSAqL1xyXG4gIHZpZXdTZXRGdW5jdGlvbjogRGF0YVZpZXdbJ3NldEludDMyJ10gfCBEYXRhVmlld1snc2V0VWludDE2J10gfCBEYXRhVmlld1snc2V0VWludDMyJ10gfCBEYXRhVmlld1snc2V0RmxvYXQzMiddXHJcblxyXG4gIC8qKlxyXG4gICAqIEJ1ZmZlckludGVybGVhdmVkQXJyYXlFbGVtZW50IGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgQnVmZmVyQXJyYXlFbGVtZW50UGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgb3VyIHtAbGluayBCdWZmZXJJbnRlcmxlYXZlZEFycmF5RWxlbWVudH1cclxuICAgKi9cclxuICBjb25zdHJ1Y3Rvcih7IG5hbWUsIGtleSwgdHlwZSA9ICdmMzInLCBhcnJheUxlbmd0aCA9IDEgfTogQnVmZmVyQXJyYXlFbGVtZW50UGFyYW1zKSB7XHJcbiAgICBzdXBlcih7IG5hbWUsIGtleSwgdHlwZSwgYXJyYXlMZW5ndGggfSlcclxuXHJcbiAgICB0aGlzLmFycmF5U3RyaWRlID0gMVxyXG5cclxuICAgIHRoaXMuYXJyYXlMZW5ndGggPSBhcnJheUxlbmd0aFxyXG4gICAgdGhpcy5udW1FbGVtZW50cyA9IHRoaXMuYXJyYXlMZW5ndGggLyB0aGlzLmJ1ZmZlckxheW91dC5udW1FbGVtZW50c1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSB0b3RhbCBudW1iZXIgb2Ygc2xvdHMgdXNlZCBieSB0aGlzIHtAbGluayBCdWZmZXJJbnRlcmxlYXZlZEFycmF5RWxlbWVudH0gYmFzZWQgb24gYnVmZmVyIGxheW91dCBzaXplIGFuZCB0b3RhbCBudW1iZXIgb2YgZWxlbWVudHNcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKi9cclxuICBnZXQgYnl0ZUNvdW50KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5idWZmZXJMYXlvdXQuc2l6ZSAqIHRoaXMubnVtRWxlbWVudHNcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUge0BsaW5rIGNvcmUvYmluZGluZ3MvYnVmZmVyRWxlbWVudHMvQnVmZmVyRWxlbWVudC5CdWZmZXJFbGVtZW50QWxpZ25tZW50IHwgYWxpZ25tZW50fVxyXG4gICAqIFRvIGNvbXB1dGUgaG93IGFycmF5cyBhcmUgcGFja2VkLCB3ZSBuZWVkIHRvIGNvbXB1dGUgdGhlIGFycmF5U3RyaWRlIGJldHdlZW4gdHdvIGVsZW1lbnRzIGJlZm9yZWhhbmQgYW5kIHBhc3MgaXQgaGVyZS4gVXNpbmcgdGhlIGFycmF5U3RyaWRlIGFuZCB0aGUgdG90YWwgbnVtYmVyIG9mIGVsZW1lbnRzLCB3ZSBjYW4gZWFzaWx5IGdldCB0aGUgZW5kIGFsaWdubWVudCBwb3NpdGlvbi5cclxuICAgKiBAcGFyYW0gc3RhcnRPZmZzZXQgLSBvZmZzZXQgYXQgd2hpY2ggdG8gc3RhcnQgaW5zZXJ0aW5nIHRoZSB2YWx1ZXMgaW4gdGhlIHtAbGluayBjb3JlL2JpbmRpbmdzL0J1ZmZlckJpbmRpbmcuQnVmZmVyQmluZGluZyNhcnJheUJ1ZmZlciB8IGJ1ZmZlciBiaW5kaW5nIGFycmF5fVxyXG4gICAqIEBwYXJhbSBzdHJpZGUgLSBTdHJpZGUgaW4gdGhlIHtAbGluayBBcnJheUJ1ZmZlcn0gYmV0d2VlbiB0d28gZWxlbWVudHMgb2YgdGhlIGFycmF5XHJcbiAgICovXHJcbiAgc2V0QWxpZ25tZW50KHN0YXJ0T2Zmc2V0ID0gMCwgc3RyaWRlID0gMCkge1xyXG4gICAgdGhpcy5hbGlnbm1lbnQgPSB0aGlzLmdldEVsZW1lbnRBbGlnbm1lbnQodGhpcy5nZXRQb3NpdGlvbkF0T2Zmc2V0KHN0YXJ0T2Zmc2V0KSlcclxuXHJcbiAgICB0aGlzLmFycmF5U3RyaWRlID0gc3RyaWRlXHJcblxyXG4gICAgdGhpcy5hbGlnbm1lbnQuZW5kID0gdGhpcy5nZXRQb3NpdGlvbkF0T2Zmc2V0KHRoaXMuZW5kT2Zmc2V0ICsgc3RyaWRlICogKHRoaXMubnVtRWxlbWVudHMgLSAxKSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUge0BsaW5rIHZpZXd9IGFuZCB7QGxpbmsgdmlld1NldEZ1bmN0aW9ufVxyXG4gICAqIEBwYXJhbSBhcnJheUJ1ZmZlciAtIHRoZSB7QGxpbmsgY29yZS9iaW5kaW5ncy9CdWZmZXJCaW5kaW5nLkJ1ZmZlckJpbmRpbmcjYXJyYXlCdWZmZXIgfCBidWZmZXIgYmluZGluZyBhcnJheX1cclxuICAgKiBAcGFyYW0gYXJyYXlWaWV3IC0gdGhlIHtAbGluayBjb3JlL2JpbmRpbmdzL0J1ZmZlckJpbmRpbmcuQnVmZmVyQmluZGluZyNhcnJheVZpZXcgfCBidWZmZXIgYmluZGluZyBhcnJheSB2aWV3fVxyXG4gICAqL1xyXG4gIHNldFZpZXcoYXJyYXlCdWZmZXI6IEFycmF5QnVmZmVyLCBhcnJheVZpZXc6IERhdGFWaWV3KSB7XHJcbiAgICAvLyBvdXIgdmlldyB3aWxsIGJlIGEgc2ltcGxlIHR5cGVkIGFycmF5LCBub3QgbGlua2VkIHRvIHRoZSBhcnJheSBidWZmZXJcclxuICAgIHRoaXMudmlldyA9IG5ldyB0aGlzLmJ1ZmZlckxheW91dC5WaWV3KHRoaXMuYnVmZmVyTGF5b3V0Lm51bUVsZW1lbnRzICogdGhpcy5udW1FbGVtZW50cylcclxuXHJcbiAgICAvLyBidXQgb3VyIHZpZXdTZXRGdW5jdGlvbiBpcyBsaW5rZWQgdG8gdGhlIGFycmF5IHZpZXdcclxuICAgIHRoaXMudmlld1NldEZ1bmN0aW9uID0gKChhcnJheVZpZXcpID0+IHtcclxuICAgICAgc3dpdGNoICh0aGlzLmJ1ZmZlckxheW91dC5WaWV3KSB7XHJcbiAgICAgICAgY2FzZSBJbnQzMkFycmF5OlxyXG4gICAgICAgICAgcmV0dXJuIGFycmF5Vmlldy5zZXRJbnQzMi5iaW5kKGFycmF5VmlldykgYXMgRGF0YVZpZXdbJ3NldEludDMyJ11cclxuICAgICAgICBjYXNlIFVpbnQxNkFycmF5OlxyXG4gICAgICAgICAgcmV0dXJuIGFycmF5Vmlldy5zZXRVaW50MTYuYmluZChhcnJheVZpZXcpIGFzIERhdGFWaWV3WydzZXRVaW50MTYnXVxyXG4gICAgICAgIGNhc2UgVWludDMyQXJyYXk6XHJcbiAgICAgICAgICByZXR1cm4gYXJyYXlWaWV3LnNldFVpbnQzMi5iaW5kKGFycmF5VmlldykgYXMgRGF0YVZpZXdbJ3NldFVpbnQzMiddXHJcbiAgICAgICAgY2FzZSBGbG9hdDMyQXJyYXk6XHJcbiAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgIHJldHVybiBhcnJheVZpZXcuc2V0RmxvYXQzMi5iaW5kKGFycmF5VmlldykgYXMgRGF0YVZpZXdbJ3NldEZsb2F0MzInXVxyXG4gICAgICB9XHJcbiAgICB9KShhcnJheVZpZXcpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgdGhlIHtAbGluayB2aWV3fSBiYXNlZCBvbiB0aGUgbmV3IHZhbHVlLCBhbmQgdGhlbiB1cGRhdGUgdGhlIHtAbGluayBjb3JlL2JpbmRpbmdzL0J1ZmZlckJpbmRpbmcuQnVmZmVyQmluZGluZyNhcnJheVZpZXcgfCBidWZmZXIgYmluZGluZyBhcnJheSB2aWV3fSB1c2luZyBzdWIgYXJyYXlzXHJcbiAgICogQHBhcmFtIHZhbHVlIC0gbmV3IHZhbHVlIHRvIHVzZVxyXG4gICAqL1xyXG4gIHVwZGF0ZSh2YWx1ZSkge1xyXG4gICAgc3VwZXIudXBkYXRlKHZhbHVlKVxyXG5cclxuICAgIC8vIG5vdyB1c2Ugb3VyIHZpZXdTZXRGdW5jdGlvbiB0byBmaWxsIHRoZSBhcnJheSB2aWV3IHdpdGggaW50ZXJsZWF2ZWQgYWxpZ25tZW50XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubnVtRWxlbWVudHM7IGkrKykge1xyXG4gICAgICBjb25zdCBzdWJhcnJheSA9IHRoaXMudmlldy5zdWJhcnJheShcclxuICAgICAgICBpICogdGhpcy5idWZmZXJMYXlvdXQubnVtRWxlbWVudHMsXHJcbiAgICAgICAgaSAqIHRoaXMuYnVmZmVyTGF5b3V0Lm51bUVsZW1lbnRzICsgdGhpcy5idWZmZXJMYXlvdXQubnVtRWxlbWVudHNcclxuICAgICAgKVxyXG5cclxuICAgICAgY29uc3Qgc3RhcnRCeXRlT2Zmc2V0ID0gdGhpcy5zdGFydE9mZnNldCArIGkgKiB0aGlzLmFycmF5U3RyaWRlXHJcblxyXG4gICAgICAvLyB2aWV3IHNldCBmdW5jdGlvbiBuZWVkIHRvIGJlIGNhbGxlZCBmb3IgZWFjaCBzdWJhcnJheSBlbnRyeSwgc28gbG9vcCBvdmVyIHN1YmFycmF5IGVudHJpZXNcclxuICAgICAgc3ViYXJyYXkuZm9yRWFjaCgodmFsdWUsIGluZGV4KSA9PiB7XHJcbiAgICAgICAgdGhpcy52aWV3U2V0RnVuY3Rpb24oc3RhcnRCeXRlT2Zmc2V0ICsgaW5kZXggKiB0aGlzLmJ1ZmZlckxheW91dC5WaWV3LkJZVEVTX1BFUl9FTEVNRU5ULCB2YWx1ZSwgdHJ1ZSlcclxuICAgICAgfSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEV4dHJhY3QgdGhlIGRhdGEgY29ycmVzcG9uZGluZyB0byB0aGlzIHNwZWNpZmljIHtAbGluayBCdWZmZXJJbnRlcmxlYXZlZEFycmF5RWxlbWVudH0gZnJvbSBhIHtAbGluayBGbG9hdDMyQXJyYXl9IGhvbGRpbmcgdGhlIHtAbGluayBHUFVCdWZmZXJ9IGRhdGEgb2YgdGhlIHBhcmVudE1lc2gge0BsaW5rIGNvcmUvYmluZGluZ3MvQnVmZmVyQmluZGluZy5CdWZmZXJCaW5kaW5nIHwgQnVmZmVyQmluZGluZ31cclxuICAgKiBAcGFyYW0gcmVzdWx0IC0ge0BsaW5rIEZsb2F0MzJBcnJheX0gaG9sZGluZyB7QGxpbmsgR1BVQnVmZmVyfSBkYXRhXHJcbiAgICovXHJcbiAgZXh0cmFjdERhdGFGcm9tQnVmZmVyUmVzdWx0KHJlc3VsdDogRmxvYXQzMkFycmF5KSB7XHJcbiAgICBjb25zdCBpbnRlcmxlYXZlZFJlc3VsdCA9IG5ldyBGbG9hdDMyQXJyYXkodGhpcy5hcnJheUxlbmd0aClcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5udW1FbGVtZW50czsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IHJlc3VsdE9mZnNldCA9IHRoaXMuc3RhcnRPZmZzZXRUb0luZGV4ICsgaSAqIHRoaXMuYXJyYXlTdHJpZGVUb0luZGV4XHJcblxyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMuYnVmZmVyTGF5b3V0Lm51bUVsZW1lbnRzOyBqKyspIHtcclxuICAgICAgICBpbnRlcmxlYXZlZFJlc3VsdFtpICogdGhpcy5idWZmZXJMYXlvdXQubnVtRWxlbWVudHMgKyBqXSA9IHJlc3VsdFtyZXN1bHRPZmZzZXQgKyBqXVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW50ZXJsZWF2ZWRSZXN1bHRcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmluZGluZywgQmluZGluZ1BhcmFtcywgQnVmZmVyQmluZGluZ01lbW9yeUFjY2Vzc1R5cGUgfSBmcm9tICcuL0JpbmRpbmcnXG5pbXBvcnQgeyBnZXRCaW5kR3JvdXBMYXlvdXRCaW5kaW5nVHlwZSwgZ2V0QmluZGluZ1dHU0xWYXJUeXBlLCBnZXRCdWZmZXJMYXlvdXQsIFR5cGVkQXJyYXkgfSBmcm9tICcuL3V0aWxzJ1xuaW1wb3J0IHsgdGhyb3dXYXJuaW5nLCB0b0NhbWVsQ2FzZSwgdG9LZWJhYkNhc2UgfSBmcm9tICcuLi8uLi91dGlscy91dGlscydcbmltcG9ydCB7IFZlYzIgfSBmcm9tICcuLi8uLi9tYXRoL1ZlYzInXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWMzJ1xuaW1wb3J0IHsgSW5wdXQsIElucHV0QmFzZSwgSW5wdXRWYWx1ZSB9IGZyb20gJy4uLy4uL3R5cGVzL0JpbmRHcm91cHMnXG5pbXBvcnQgeyBCdWZmZXJFbGVtZW50IH0gZnJvbSAnLi9idWZmZXJFbGVtZW50cy9CdWZmZXJFbGVtZW50J1xuaW1wb3J0IHsgQnVmZmVyQXJyYXlFbGVtZW50IH0gZnJvbSAnLi9idWZmZXJFbGVtZW50cy9CdWZmZXJBcnJheUVsZW1lbnQnXG5pbXBvcnQgeyBCdWZmZXJJbnRlcmxlYXZlZEFycmF5RWxlbWVudCB9IGZyb20gJy4vYnVmZmVyRWxlbWVudHMvQnVmZmVySW50ZXJsZWF2ZWRBcnJheUVsZW1lbnQnXG5cbi8qKlxuICogRGVmaW5lcyBhIHtAbGluayBCdWZmZXJCaW5kaW5nfSBpbnB1dCBvYmplY3QgdGhhdCBjYW4gc2V0IGEgdmFsdWUgYW5kIHJ1biBhIGNhbGxiYWNrIGZ1bmN0aW9uIHdoZW4gdGhpcyBoYXBwZW5zXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVmZmVyQmluZGluZ0lucHV0IGV4dGVuZHMgSW5wdXRCYXNlIHtcbiAgLyoqIE9yaWdpbmFsIHtAbGluayBJbnB1dFZhbHVlIHwgaW5wdXQgdmFsdWV9ICovXG4gIF92YWx1ZTogSW5wdXRWYWx1ZVxuXG4gIC8qKiBHZXQgdGhlIHtAbGluayBJbnB1dFZhbHVlIHwgaW5wdXQgdmFsdWV9ICovXG4gIGdldCB2YWx1ZSgpOiBJbnB1dFZhbHVlXG5cbiAgLyoqIFNldCB0aGUge0BsaW5rIElucHV0VmFsdWUgfCBpbnB1dCB2YWx1ZX0gKi9cbiAgc2V0IHZhbHVlKHZhbHVlOiBJbnB1dFZhbHVlKVxuXG4gIC8qKiBXaGV0aGVyIHRoZSB7QGxpbmsgSW5wdXRWYWx1ZSB8IGlucHV0IHZhbHVlfSBoYXMgY2hhbmdlZCBhbmQgd2Ugc2hvdWxkIHVwZGF0ZSB0aGUge0BsaW5rIEJ1ZmZlckJpbmRpbmcjYXJyYXlCdWZmZXIgfCBidWZmZXIgYmluZGluZyBhcnJheX0gKi9cbiAgc2hvdWxkVXBkYXRlOiBib29sZWFuXG59XG5cbi8qKlxuICogQmFzZSBwYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIEJ1ZmZlckJpbmRpbmd9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgQnVmZmVyQmluZGluZ0Jhc2VQYXJhbXMge1xuICAvKiogV2hldGhlciB0aGlzIHtAbGluayBCdWZmZXJCaW5kaW5nfSBzaG91bGQgdXNlIHN0cnVjdHVyZWQgV0dTTCB2YXJpYWJsZXMgKi9cbiAgdXNlU3RydWN0PzogYm9vbGVhblxuICAvKioge0BsaW5rIEJ1ZmZlckJpbmRpbmd9IG1lbW9yeSBhY2Nlc3MgdHlwZXMgKHJlYWQgb25seSBvciByZWFkL3dyaXRlKSAqL1xuICBhY2Nlc3M/OiBCdWZmZXJCaW5kaW5nTWVtb3J5QWNjZXNzVHlwZVxuICAvKiogT2JqZWN0IGNvbnRhaW5pbmcgb25lIG9yIG11bHRpcGxlIHtAbGluayBJbnB1dCB8IGlucHV0c30gZGVzY3JpYmluZyB0aGUgc3RydWN0dXJlIG9mIHRoZSB7QGxpbmsgQnVmZmVyQmluZGluZ30gKi9cbiAgc3RydWN0PzogUmVjb3JkPHN0cmluZywgSW5wdXQ+XG59XG5cbi8qKlxuICogUGFyYW1ldGVycyB1c2VkIHRvIGNyZWF0ZSBhIHtAbGluayBCdWZmZXJCaW5kaW5nfVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJ1ZmZlckJpbmRpbmdQYXJhbXMgZXh0ZW5kcyBCaW5kaW5nUGFyYW1zLCBCdWZmZXJCaW5kaW5nQmFzZVBhcmFtcyB7fVxuXG4vKiogQWxsIGFsbG93ZWQge0BsaW5rIEJ1ZmZlckVsZW1lbnQgfCBidWZmZXIgZWxlbWVudHN9ICovXG5leHBvcnQgdHlwZSBBbGxvd2VkQnVmZmVyRWxlbWVudCA9IEJ1ZmZlckVsZW1lbnQgfCBCdWZmZXJBcnJheUVsZW1lbnQgfCBCdWZmZXJJbnRlcmxlYXZlZEFycmF5RWxlbWVudFxuXG4vKipcbiAqIFVzZWQgdG8gZm9ybWF0IHtAbGluayBCdWZmZXJCaW5kaW5nUGFyYW1zI3N0cnVjdCB8IHVuaWZvcm1zIG9yIHN0b3JhZ2VzIHN0cnVjdCBpbnB1dHN9IGFuZCBjcmVhdGUgYSBzaW5nbGUgdHlwZWQgYXJyYXkgdGhhdCB3aWxsIGhvbGQgYWxsIHRob3NlIGlucHV0cyB2YWx1ZXMuIFRoZSBhcnJheSBuZWVkcyB0byBiZSBjb3JyZWN0bHkgcGFkZGVkIGRlcGVuZGluZyBvbiBldmVyeSB2YWx1ZSB0eXBlLCBzbyBpdCBjYW4gYmUgc2FmZWx5IHVzZWQgYXMgYSBHUFVCdWZmZXIgaW5wdXQuPGJyPlxuICogSXQgd2lsbCBhbHNvIGNyZWF0ZSBXR1NMIFN0cnVjdHMgYW5kIHZhcmlhYmxlcyBhY2NvcmRpbmcgdG8gdGhlIEJ1ZmZlckJpbmRpbmdzIGlucHV0cyBwYXJhbWV0ZXJzLjxicj5cbiAqIFRoZSBXR1NMIHN0cnVjdHMgYW5kIHZhcmlhYmxlcyBkZWNsYXJhdGlvbiBtYXkgdmFyeSBiYXNlZCBvbiB0aGUgaW5wdXQgdHlwZXMsIGVzcGVjaWFsbHkgaWYgdGhlcmUncyBvbmUgb3IgbW9yZSBhcnJheXMgaW52b2x2ZWQgKGkuZS4gYGFycmF5PGYzMj5gLCBgYXJyYXk8dmVjM2Y+YCBldGMuKS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gY3JlYXRlIGEgR1BVIGJ1ZmZlciBiaW5kaW5nXG4gKiBjb25zdCBidWZmZXJCaW5kaW5nID0gbmV3IEJ1ZmZlckJpbmRpbmcoe1xuICogICBuYW1lOiAncGFyYW1zJywgLy8gbmFtZSBvZiB0aGUgV0dTTCBvYmplY3RcbiAqICAgYmluZGluZ1R5cGU6ICd1bmlmb3JtJywgLy8gc2hvdWxkIGJlICdzdG9yYWdlJyBmb3IgbGFyZ2UgYXJyYXlzXG4gKiAgIHN0cnVjdDoge1xuICogICAgIG9wYWNpdHk6IHtcbiAqICAgICAgIHR5cGU6ICdmMzInLFxuICogICAgICAgdmFsdWU6IDEsXG4gKiAgICAgfSxcbiAqICAgICBtb3VzZVBvc2l0aW9uOiB7XG4gKiAgICAgICB0eXBlOiAndmVjMmYnLFxuICogICAgICAgdmFsdWU6IG5ldyBWZWMyKCksXG4gKiAgICAgfSxcbiAqICAgfSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEJ1ZmZlckJpbmRpbmcgZXh0ZW5kcyBCaW5kaW5nIHtcbiAgLyoqIEZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB0aGlzIHtAbGluayBCdWZmZXJCaW5kaW5nfSB7QGxpbmsgYnVmZmVyRWxlbWVudHMgfCBidWZmZXIgZWxlbWVudHN9IHNob3VsZCBiZSBwYWNrZWQgaW4gYSBzaW5nbGUgc3RydWN0dXJlZCBvYmplY3Qgb3IgaWYgZWFjaCBvbmUgb2YgdGhlbSBzaG91bGQgYmUgYSBzZXBhcmF0ZSBiaW5kaW5nLiAqL1xuICB1c2VTdHJ1Y3Q6IGJvb2xlYW5cbiAgLyoqIEFsbCB0aGUge0BsaW5rIEJ1ZmZlckJpbmRpbmd9IGRhdGEgaW5wdXRzICovXG4gIGlucHV0czogUmVjb3JkPHN0cmluZywgQnVmZmVyQmluZGluZ0lucHV0PlxuXG4gIC8qKiBGbGFnIHRvIGluZGljYXRlIHdoZXRoZXIgb25lIG9mIHRoZSB7QGxpbmsgaW5wdXRzfSB2YWx1ZSBoYXMgY2hhbmdlZCBhbmQgd2UgbmVlZCB0byB1cGRhdGUgdGhlIEdQVUJ1ZmZlciBsaW5rZWQgdG8gdGhlIHtAbGluayBhcnJheUJ1ZmZlcn0gYXJyYXkgKi9cbiAgc2hvdWxkVXBkYXRlOiBib29sZWFuXG5cbiAgLyoqIEFuIGFycmF5IGRlc2NyaWJpbmcgaG93IGVhY2ggY29ycmVzcG9uZGluZyB7QGxpbmsgaW5wdXRzfSBzaG91bGQgYmUgaW5zZXJ0ZWQgaW50byBvdXIge0BsaW5rIGFycmF5Vmlld30gYXJyYXkgKi9cbiAgYnVmZmVyRWxlbWVudHM6IEFsbG93ZWRCdWZmZXJFbGVtZW50W11cblxuICAvKiogVG90YWwgc2l6ZSBvZiBvdXIge0BsaW5rIGFycmF5QnVmZmVyfSBhcnJheSBpbiBieXRlcyAqL1xuICBhcnJheUJ1ZmZlclNpemU6IG51bWJlclxuICAvKiogQXJyYXkgYnVmZmVyIHRoYXQgd2lsbCBiZSBzZW50IHRvIHRoZSB7QGxpbmsgR1BVQnVmZmVyfSAqL1xuICBhcnJheUJ1ZmZlcjogQXJyYXlCdWZmZXJcbiAgLyoqIERhdGEgdmlldyBvZiBvdXIge0BsaW5rIGFycmF5QnVmZmVyIHwgYXJyYXkgYnVmZmVyfSAqL1xuICBhcnJheVZpZXc6IERhdGFWaWV3XG5cbiAgLyoqIFRoZSBHUFVCdWZmZXIgKi9cbiAgYnVmZmVyOiBHUFVCdWZmZXIgfCBudWxsXG5cbiAgLyoqIEEgc3RyaW5nIHRvIGFwcGVuZCB0byBvdXIgc2hhZGVycyBjb2RlIGRlc2NyaWJpbmcgdGhlIFdHU0wgc3RydWN0dXJlIHJlcHJlc2VudGluZyB0aGlzIHtAbGluayBCdWZmZXJCaW5kaW5nfSAqL1xuICB3Z3NsU3RydWN0RnJhZ21lbnQ6IHN0cmluZ1xuICAvKiogQW4gYXJyYXkgb2Ygc3RyaW5ncyB0byBhcHBlbmQgdG8gb3VyIHNoYWRlcnMgY29kZSBkZWNsYXJpbmcgYWxsIHRoZSBXR1NMIHZhcmlhYmxlcyByZXByZXNlbnRpbmcgdGhpcyB7QGxpbmsgQnVmZmVyQmluZGluZ30gKi9cbiAgd2dzbEdyb3VwRnJhZ21lbnQ6IHN0cmluZ1tdXG4gIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIEJ1ZmZlckJpbmRpbmd9ICovXG4gIG9wdGlvbnM6IEJ1ZmZlckJpbmRpbmdQYXJhbXNcblxuICAvKipcbiAgICogQnVmZmVyQmluZGluZyBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBCdWZmZXJCaW5kaW5nUGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgb3VyIEJ1ZmZlckJpbmRpbmdzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbGFiZWwgPSAnVW5pZm9ybScsXG4gICAgbmFtZSA9ICd1bmlmb3JtJyxcbiAgICBiaW5kaW5nVHlwZSxcbiAgICB2aXNpYmlsaXR5LFxuICAgIHVzZVN0cnVjdCA9IHRydWUsXG4gICAgYWNjZXNzID0gJ3JlYWQnLFxuICAgIHN0cnVjdCA9IHt9LFxuICB9OiBCdWZmZXJCaW5kaW5nUGFyYW1zKSB7XG4gICAgYmluZGluZ1R5cGUgPSBiaW5kaW5nVHlwZSA/PyAndW5pZm9ybSdcblxuICAgIHN1cGVyKHsgbGFiZWwsIG5hbWUsIGJpbmRpbmdUeXBlLCB2aXNpYmlsaXR5IH0pXG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICB1c2VTdHJ1Y3QsXG4gICAgICBhY2Nlc3MsXG4gICAgICBzdHJ1Y3Q6IHN0cnVjdCxcbiAgICB9XG5cbiAgICB0aGlzLmFycmF5QnVmZmVyU2l6ZSA9IDBcblxuICAgIHRoaXMuc2hvdWxkVXBkYXRlID0gZmFsc2VcbiAgICB0aGlzLnVzZVN0cnVjdCA9IHVzZVN0cnVjdFxuXG4gICAgdGhpcy5idWZmZXJFbGVtZW50cyA9IFtdXG4gICAgdGhpcy5pbnB1dHMgPSB7fVxuICAgIHRoaXMuYnVmZmVyID0gbnVsbFxuXG4gICAgdGhpcy5zZXRCaW5kaW5ncyhzdHJ1Y3QpXG4gICAgdGhpcy5zZXRCdWZmZXJBdHRyaWJ1dGVzKClcbiAgICB0aGlzLnNldFdHU0xGcmFnbWVudCgpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHtAbGluayBHUFVCaW5kR3JvdXBMYXlvdXRFbnRyeSNidWZmZXIgfCBiaW5kIGdyb3VwIGxheW91dCBlbnRyeSByZXNvdXJjZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgcmVzb3VyY2VMYXlvdXQoKToge1xuICAgIC8qKiB7QGxpbmsgR1BVQmluZEdyb3VwTGF5b3V0IHwgYmluZCBncm91cCBsYXlvdXR9IHJlc291cmNlICovXG4gICAgYnVmZmVyOiBHUFVCdWZmZXJCaW5kaW5nTGF5b3V0XG4gIH0ge1xuICAgIHJldHVybiB7XG4gICAgICBidWZmZXI6IHtcbiAgICAgICAgdHlwZTogZ2V0QmluZEdyb3VwTGF5b3V0QmluZGluZ1R5cGUodGhpcyksXG4gICAgICB9LFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQge0BsaW5rIEdQVUJpbmRHcm91cEVudHJ5I3Jlc291cmNlIHwgYmluZCBncm91cCByZXNvdXJjZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgcmVzb3VyY2UoKToge1xuICAgIC8qKiB7QGxpbmsgR1BVQmluZEdyb3VwIHwgYmluZCBncm91cH0gcmVzb3VyY2UgKi9cbiAgICBidWZmZXI6IEdQVUJ1ZmZlciB8IG51bGxcbiAgfSB7XG4gICAgcmV0dXJuIHsgYnVmZmVyOiB0aGlzLmJ1ZmZlciB9XG4gIH1cblxuICAvKipcbiAgICogRm9ybWF0IGJpbmRpbmdzIHN0cnVjdCBhbmQgc2V0IG91ciB7QGxpbmsgaW5wdXRzfVxuICAgKiBAcGFyYW0gYmluZGluZ3MgLSBiaW5kaW5ncyBpbnB1dHNcbiAgICovXG4gIHNldEJpbmRpbmdzKGJpbmRpbmdzOiBSZWNvcmQ8c3RyaW5nLCBJbnB1dD4pIHtcbiAgICBPYmplY3Qua2V5cyhiaW5kaW5ncykuZm9yRWFjaCgoYmluZGluZ0tleSkgPT4ge1xuICAgICAgY29uc3QgYmluZGluZyA9IHt9IGFzIEJ1ZmZlckJpbmRpbmdJbnB1dFxuXG4gICAgICBmb3IgKGNvbnN0IGtleSBpbiBiaW5kaW5nc1tiaW5kaW5nS2V5XSkge1xuICAgICAgICBpZiAoa2V5ICE9PSAndmFsdWUnKSB7XG4gICAgICAgICAgYmluZGluZ1trZXldID0gYmluZGluZ3NbYmluZGluZ0tleV1ba2V5XVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIGRlZmluZSBhIFwidmFsdWVcIiBnZXR0ZXIvc2V0dGVyIHNvIHdlIGNhbiBub3cgd2hlbiB0byB1cGRhdGUgdGhlIGJ1ZmZlciBiaW5kaW5nXG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoYmluZGluZywgJ3ZhbHVlJywge1xuICAgICAgICBnZXQoKSB7XG4gICAgICAgICAgcmV0dXJuIGJpbmRpbmcuX3ZhbHVlXG4gICAgICAgIH0sXG4gICAgICAgIHNldCh2KSB7XG4gICAgICAgICAgYmluZGluZy5fdmFsdWUgPSB2XG4gICAgICAgICAgYmluZGluZy5zaG91bGRVcGRhdGUgPSB0cnVlXG4gICAgICAgIH0sXG4gICAgICB9KVxuXG4gICAgICBiaW5kaW5nLnZhbHVlID0gYmluZGluZ3NbYmluZGluZ0tleV0udmFsdWVcblxuICAgICAgaWYgKGJpbmRpbmcudmFsdWUgaW5zdGFuY2VvZiBWZWMyIHx8IGJpbmRpbmcudmFsdWUgaW5zdGFuY2VvZiBWZWMzKSB7XG4gICAgICAgIGJpbmRpbmcudmFsdWUub25DaGFuZ2UoKCkgPT4gKGJpbmRpbmcuc2hvdWxkVXBkYXRlID0gdHJ1ZSkpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuaW5wdXRzW2JpbmRpbmdLZXldID0gYmluZGluZ1xuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciBidWZmZXIgYXR0cmlidXRlczpcbiAgICogVGFrZXMgYWxsIHRoZSB7QGxpbmsgaW5wdXRzfSBhbmQgYWRkcyB0aGVtIHRvIHRoZSB7QGxpbmsgYnVmZmVyRWxlbWVudHN9IGFycmF5IHdpdGggdGhlIGNvcnJlY3Qgc3RhcnQgYW5kIGVuZCBvZmZzZXRzIChwYWRkZWQpLCB0aGVuIGZpbGwgb3VyIHtAbGluayBhcnJheUJ1ZmZlcn0gdHlwZWQgYXJyYXkgYWNjb3JkaW5nbHkuXG4gICAqL1xuICBzZXRCdWZmZXJBdHRyaWJ1dGVzKCkge1xuICAgIC8vIGVhcmx5IG9uLCBjaGVjayBpZiB0aGVyZSdzIGF0IGxlYXN0IG9uZSBhcnJheSBiaW5kaW5nXG4gICAgLy8gSWYgdGhlcmUncyBvbmUgYW5kIG9ubHkgb25lLCBwdXQgaXQgYXQgdGhlIGVuZCBvZiB0aGUgYmluZGluZyBlbGVtZW50cyBhcnJheSwgdHJlYXQgaXQgYXMgYSBzaW5nbGUgZW50cnkgb2YgdGhlIHR5cGUsIGJ1dCBsb29wIG9uIGl0IGJ5IGFycmF5Lmxlbmd0aCAvIHNpemUgdG8gZmlsbCB0aGUgYWxpZ25tZW50XG4gICAgLy8gSWYgdGhlcmUncyBtb3JlIHRoYW4gb25lLCBjcmVhdGUgYnVmZmVyIGludGVybGVhdmVkIGVsZW1lbnRzLlxuXG4gICAgLy8gaWYgbGVuZ3RoID09PSAwLCBPS1xuICAgIC8vIGlmIGxlbmd0aCA9PT0gMSwgcHV0IGl0IGF0IHRoZSBlbmQgb2Ygb3VyIHN0cnVjdFxuICAgIC8vIGlmIGxlbmd0aCA+IDEsIGNyZWF0ZSBhIGJ1ZmZlciBpbnRlcmxlYXZlZCBlbGVtZW50c1xuICAgIGNvbnN0IGFycmF5QmluZGluZ3MgPSBPYmplY3Qua2V5cyh0aGlzLmlucHV0cykuZmlsdGVyKFxuICAgICAgKGJpbmRpbmdLZXkpID0+IHRoaXMuaW5wdXRzW2JpbmRpbmdLZXldLnR5cGUuaW5kZXhPZignYXJyYXknKSAhPT0gLTFcbiAgICApXG5cbiAgICAvLyBwdXQgdGhlIGFycmF5IHN0cnVjdCBhdCB0aGUgZW5kXG4gICAgbGV0IG9yZGVyZWRCaW5kaW5ncyA9IE9iamVjdC5rZXlzKHRoaXMuaW5wdXRzKS5zb3J0KChiaW5kaW5nS2V5QSwgYmluZGluZ0tleUIpID0+IHtcbiAgICAgIC8vIDAgaWYgaXQncyBhbiBhcnJheSwgLTEgZWxzZVxuICAgICAgY29uc3QgaXNCaW5kaW5nQUFycmF5ID0gTWF0aC5taW4oMCwgdGhpcy5pbnB1dHNbYmluZGluZ0tleUFdLnR5cGUuaW5kZXhPZignYXJyYXknKSlcbiAgICAgIGNvbnN0IGlzQmluZGluZ0JBcnJheSA9IE1hdGgubWluKDAsIHRoaXMuaW5wdXRzW2JpbmRpbmdLZXlCXS50eXBlLmluZGV4T2YoJ2FycmF5JykpXG5cbiAgICAgIHJldHVybiBpc0JpbmRpbmdBQXJyYXkgLSBpc0JpbmRpbmdCQXJyYXlcbiAgICB9KVxuXG4gICAgaWYgKGFycmF5QmluZGluZ3MubGVuZ3RoID4gMSkge1xuICAgICAgLy8gcmVtb3ZlIGludGVybGVhdmVkIGFycmF5cyBmcm9tIHRoZSBvcmRlcmVkIHN0cnVjdCBrZXkgYXJyYXlcbiAgICAgIG9yZGVyZWRCaW5kaW5ncyA9IG9yZGVyZWRCaW5kaW5ncy5maWx0ZXIoKGJpbmRpbmdLZXkpID0+ICFhcnJheUJpbmRpbmdzLmluY2x1ZGVzKGJpbmRpbmdLZXkpKVxuICAgIH1cblxuICAgIC8vIGhhbmRsZSBidWZmZXIgKG5vbiBpbnRlcmxlYXZlZCkgZWxlbWVudHNcbiAgICBvcmRlcmVkQmluZGluZ3MuZm9yRWFjaCgoYmluZGluZ0tleSkgPT4ge1xuICAgICAgY29uc3QgYmluZGluZyA9IHRoaXMuaW5wdXRzW2JpbmRpbmdLZXldXG5cbiAgICAgIGNvbnN0IGJ1ZmZlckVsZW1lbnRPcHRpb25zID0ge1xuICAgICAgICBuYW1lOiB0b0NhbWVsQ2FzZShiaW5kaW5nLm5hbWUgPz8gYmluZGluZ0tleSksXG4gICAgICAgIGtleTogYmluZGluZ0tleSxcbiAgICAgICAgdHlwZTogYmluZGluZy50eXBlLFxuICAgICAgfVxuXG4gICAgICBjb25zdCBpc0FycmF5ID1cbiAgICAgICAgYmluZGluZy50eXBlLmluZGV4T2YoJ2FycmF5JykgIT09IC0xICYmIChBcnJheS5pc0FycmF5KGJpbmRpbmcudmFsdWUpIHx8IEFycmF5QnVmZmVyLmlzVmlldyhiaW5kaW5nLnZhbHVlKSlcblxuICAgICAgdGhpcy5idWZmZXJFbGVtZW50cy5wdXNoKFxuICAgICAgICBpc0FycmF5XG4gICAgICAgICAgPyBuZXcgQnVmZmVyQXJyYXlFbGVtZW50KHtcbiAgICAgICAgICAgICAgLi4uYnVmZmVyRWxlbWVudE9wdGlvbnMsXG4gICAgICAgICAgICAgIGFycmF5TGVuZ3RoOiAoYmluZGluZy52YWx1ZSBhcyBudW1iZXJbXSkubGVuZ3RoLFxuICAgICAgICAgICAgfSlcbiAgICAgICAgICA6IG5ldyBCdWZmZXJFbGVtZW50KGJ1ZmZlckVsZW1lbnRPcHRpb25zKVxuICAgICAgKVxuICAgIH0pXG5cbiAgICAvLyBzZXQgdGhlaXIgYWxpZ25tZW50c1xuICAgIHRoaXMuYnVmZmVyRWxlbWVudHMuZm9yRWFjaCgoYnVmZmVyRWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgIGNvbnN0IHN0YXJ0T2Zmc2V0ID0gaW5kZXggPT09IDAgPyAwIDogdGhpcy5idWZmZXJFbGVtZW50c1tpbmRleCAtIDFdLmVuZE9mZnNldCArIDFcblxuICAgICAgYnVmZmVyRWxlbWVudC5zZXRBbGlnbm1lbnQoc3RhcnRPZmZzZXQpXG4gICAgfSlcblxuICAgIC8vIG5vdyBjcmVhdGUgb3VyIGludGVybGVhdmVkIGJ1ZmZlciBlbGVtZW50c1xuICAgIGlmIChhcnJheUJpbmRpbmdzLmxlbmd0aCA+IDEpIHtcbiAgICAgIC8vIGZpcnN0IGdldCB0aGUgc2l6ZXMgb2YgdGhlIGFycmF5c1xuICAgICAgY29uc3QgYXJyYXlTaXplcyA9IGFycmF5QmluZGluZ3MubWFwKChiaW5kaW5nS2V5KSA9PiB7XG4gICAgICAgIGNvbnN0IGJpbmRpbmcgPSB0aGlzLmlucHV0c1tiaW5kaW5nS2V5XVxuICAgICAgICBjb25zdCBidWZmZXJMYXlvdXQgPSBnZXRCdWZmZXJMYXlvdXQoYmluZGluZy50eXBlLnJlcGxhY2UoJ2FycmF5JywgJycpLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKSlcblxuICAgICAgICByZXR1cm4gKGJpbmRpbmcudmFsdWUgYXMgbnVtYmVyW10gfCBUeXBlZEFycmF5KS5sZW5ndGggLyBidWZmZXJMYXlvdXQubnVtRWxlbWVudHNcbiAgICAgIH0pXG5cbiAgICAgIC8vIGFyZSB0aGV5IGFsbCBvZiB0aGUgc2FtZSBzaXplP1xuICAgICAgY29uc3QgZXF1YWxTaXplID0gYXJyYXlTaXplcy5ldmVyeSgoc2l6ZSwgaSwgYXJyYXkpID0+IHNpemUgPT09IGFycmF5WzBdKVxuXG4gICAgICBpZiAoZXF1YWxTaXplKSB7XG4gICAgICAgIC8vIHRoaXMgd2lsbCBob2xkIG91ciBpbnRlcmxlYXZlZCBidWZmZXIgZWxlbWVudHNcbiAgICAgICAgY29uc3QgaW50ZXJsZWF2ZWRCdWZmZXJFbGVtZW50cyA9IGFycmF5QmluZGluZ3MubWFwKChiaW5kaW5nS2V5KSA9PiB7XG4gICAgICAgICAgY29uc3QgYmluZGluZyA9IHRoaXMuaW5wdXRzW2JpbmRpbmdLZXldXG4gICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJJbnRlcmxlYXZlZEFycmF5RWxlbWVudCh7XG4gICAgICAgICAgICBuYW1lOiB0b0NhbWVsQ2FzZShiaW5kaW5nLm5hbWUgPz8gYmluZGluZ0tleSksXG4gICAgICAgICAgICBrZXk6IGJpbmRpbmdLZXksXG4gICAgICAgICAgICB0eXBlOiBiaW5kaW5nLnR5cGUsXG4gICAgICAgICAgICBhcnJheUxlbmd0aDogKGJpbmRpbmcudmFsdWUgYXMgbnVtYmVyW10pLmxlbmd0aCxcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIG5vdyBjcmVhdGUgdGVtcCBidWZmZXIgZWxlbWVudHMgdGhhdCB3ZSdsbCB1c2UgdG8gZmlsbCB0aGUgaW50ZXJsZWF2ZWQgYnVmZmVyIGVsZW1lbnRzIGFsaWdubWVudHNcbiAgICAgICAgY29uc3QgdGVtcEJ1ZmZlckVsZW1lbnRzID0gYXJyYXlCaW5kaW5ncy5tYXAoKGJpbmRpbmdLZXkpID0+IHtcbiAgICAgICAgICBjb25zdCBiaW5kaW5nID0gdGhpcy5pbnB1dHNbYmluZGluZ0tleV1cbiAgICAgICAgICByZXR1cm4gbmV3IEJ1ZmZlckVsZW1lbnQoe1xuICAgICAgICAgICAgbmFtZTogdG9DYW1lbENhc2UoYmluZGluZy5uYW1lID8/IGJpbmRpbmdLZXkpLFxuICAgICAgICAgICAga2V5OiBiaW5kaW5nS2V5LFxuICAgICAgICAgICAgdHlwZTogYmluZGluZy50eXBlLnJlcGxhY2UoJ2FycmF5JywgJycpLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKSxcbiAgICAgICAgICB9KVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIHNldCB0ZW1wIGJ1ZmZlciBhbGlnbm1lbnRzIGFzIGlmIGl0IHdhcyByZWd1bGFyIGJ1ZmZlciBlbGVtZW50c1xuICAgICAgICB0ZW1wQnVmZmVyRWxlbWVudHMuZm9yRWFjaCgoYnVmZmVyRWxlbWVudCwgaW5kZXgpID0+IHtcbiAgICAgICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmJ1ZmZlckVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgICAvLyBpZiB0aGVyZSBhcmUgYWxyZWFkeSBidWZmZXIgZWxlbWVudHNcbiAgICAgICAgICAgICAgLy8gZ2V0IGxhc3Qgb25lIGVuZCByb3csIGFuZCBzdGFydCBhdCB0aGUgbmV4dCByb3dcbiAgICAgICAgICAgICAgYnVmZmVyRWxlbWVudC5zZXRBbGlnbm1lbnRGcm9tUG9zaXRpb24oe1xuICAgICAgICAgICAgICAgIHJvdzogdGhpcy5idWZmZXJFbGVtZW50c1t0aGlzLmJ1ZmZlckVsZW1lbnRzLmxlbmd0aCAtIDFdLmFsaWdubWVudC5lbmQucm93ICsgMSxcbiAgICAgICAgICAgICAgICBieXRlOiAwLFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgYnVmZmVyRWxlbWVudC5zZXRBbGlnbm1lbnQoMClcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYnVmZmVyRWxlbWVudC5zZXRBbGlnbm1lbnQodGVtcEJ1ZmZlckVsZW1lbnRzW2luZGV4IC0gMV0uZW5kT2Zmc2V0ICsgMSlcbiAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gbm93IHVzZSBsYXN0IHRlbXAgYnVmZmVyIGVuZCBvZmZzZXQgYXMgb3VyIGludGVybGVhdmVkIGFycmF5U3RyaWRlXG4gICAgICAgIGNvbnN0IHRvdGFsU3RyaWRlID1cbiAgICAgICAgICB0ZW1wQnVmZmVyRWxlbWVudHNbdGVtcEJ1ZmZlckVsZW1lbnRzLmxlbmd0aCAtIDFdLmVuZE9mZnNldCArIDEgLSB0ZW1wQnVmZmVyRWxlbWVudHNbMF0uc3RhcnRPZmZzZXRcblxuICAgICAgICAvLyBmaW5hbGx5LCBzZXQgaW50ZXJsZWF2ZWQgYnVmZmVyIGVsZW1lbnRzIGFsaWdubWVudFxuICAgICAgICBpbnRlcmxlYXZlZEJ1ZmZlckVsZW1lbnRzLmZvckVhY2goKGJ1ZmZlckVsZW1lbnQsIGluZGV4KSA9PiB7XG4gICAgICAgICAgYnVmZmVyRWxlbWVudC5zZXRBbGlnbm1lbnQodGVtcEJ1ZmZlckVsZW1lbnRzW2luZGV4XS5zdGFydE9mZnNldCwgdG90YWxTdHJpZGUpXG4gICAgICAgIH0pXG5cbiAgICAgICAgLy8gYWRkIHRvIG91ciBidWZmZXIgZWxlbWVudHMgYXJyYXlcbiAgICAgICAgdGhpcy5idWZmZXJFbGVtZW50cyA9IFsuLi50aGlzLmJ1ZmZlckVsZW1lbnRzLCAuLi5pbnRlcmxlYXZlZEJ1ZmZlckVsZW1lbnRzXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3dXYXJuaW5nKFxuICAgICAgICAgIGBCdWZmZXJCaW5kaW5nOiBcIiR7XG4gICAgICAgICAgICB0aGlzLmxhYmVsXG4gICAgICAgICAgfVwiIGNvbnRhaW5zIG11bHRpcGxlIGFycmF5IGlucHV0cyB0aGF0IHNob3VsZCB1c2UgYW4gaW50ZXJsZWF2ZWQgYXJyYXksIGJ1dCB0aGVpciBzaXplcyBkbyBub3QgbWF0Y2guIFRoZXNlIGlucHV0cyBjYW5ub3QgYmUgYWRkZWQgdG8gdGhlIEJ1ZmZlckJpbmRpbmc6IFwiJHthcnJheUJpbmRpbmdzLmpvaW4oXG4gICAgICAgICAgICAnLCAnXG4gICAgICAgICAgKX1cImBcbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIHRoaXMuYXJyYXlCdWZmZXJTaXplID0gdGhpcy5idWZmZXJFbGVtZW50cy5sZW5ndGhcbiAgICAgID8gdGhpcy5idWZmZXJFbGVtZW50c1t0aGlzLmJ1ZmZlckVsZW1lbnRzLmxlbmd0aCAtIDFdLnBhZGRlZEJ5dGVDb3VudFxuICAgICAgOiAwXG5cbiAgICB0aGlzLmFycmF5QnVmZmVyID0gbmV3IEFycmF5QnVmZmVyKHRoaXMuYXJyYXlCdWZmZXJTaXplKVxuICAgIHRoaXMuYXJyYXlWaWV3ID0gbmV3IERhdGFWaWV3KHRoaXMuYXJyYXlCdWZmZXIsIDAsIHRoaXMuYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aClcblxuICAgIHRoaXMuYnVmZmVyRWxlbWVudHMuZm9yRWFjaCgoYnVmZmVyRWxlbWVudCkgPT4ge1xuICAgICAgYnVmZmVyRWxlbWVudC5zZXRWaWV3KHRoaXMuYXJyYXlCdWZmZXIsIHRoaXMuYXJyYXlWaWV3KVxuICAgIH0pXG5cbiAgICB0aGlzLnNob3VsZFVwZGF0ZSA9IHRoaXMuYXJyYXlCdWZmZXJTaXplID4gMFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgV0dTTCBjb2RlIHNuaXBwZXQgdG8gYXBwZW5kIHRvIHRoZSBzaGFkZXJzIGNvZGUuIEl0IGNvbnNpc3RzIG9mIHZhcmlhYmxlIChhbmQgU3RydWN0IHN0cnVjdHVyZXMgaWYgbmVlZGVkKSBkZWNsYXJhdGlvbnMuXG4gICAqL1xuICBzZXRXR1NMRnJhZ21lbnQoKSB7XG4gICAgY29uc3Qga2ViYWJDYXNlTGFiZWwgPSB0b0tlYmFiQ2FzZSh0aGlzLmxhYmVsKVxuXG4gICAgaWYgKHRoaXMudXNlU3RydWN0KSB7XG4gICAgICBjb25zdCBidWZmZXJFbGVtZW50cyA9IHRoaXMuYnVmZmVyRWxlbWVudHMuZmlsdGVyKFxuICAgICAgICAoYnVmZmVyRWxlbWVudCkgPT4gIShidWZmZXJFbGVtZW50IGluc3RhbmNlb2YgQnVmZmVySW50ZXJsZWF2ZWRBcnJheUVsZW1lbnQpXG4gICAgICApXG4gICAgICBjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlckVsZW1lbnRzID0gdGhpcy5idWZmZXJFbGVtZW50cy5maWx0ZXIoXG4gICAgICAgIChidWZmZXJFbGVtZW50KSA9PiBidWZmZXJFbGVtZW50IGluc3RhbmNlb2YgQnVmZmVySW50ZXJsZWF2ZWRBcnJheUVsZW1lbnRcbiAgICAgICkgYXMgQnVmZmVySW50ZXJsZWF2ZWRBcnJheUVsZW1lbnRbXVxuXG4gICAgICBpZiAoaW50ZXJsZWF2ZWRCdWZmZXJFbGVtZW50cy5sZW5ndGgpIHtcbiAgICAgICAgY29uc3QgYXJyYXlMZW5ndGggPSB0aGlzLmJpbmRpbmdUeXBlID09PSAndW5pZm9ybScgPyBgLCAke2ludGVybGVhdmVkQnVmZmVyRWxlbWVudHNbMF0ubnVtRWxlbWVudHN9YCA6ICcnXG5cbiAgICAgICAgaWYgKGJ1ZmZlckVsZW1lbnRzLmxlbmd0aCkge1xuICAgICAgICAgIHRoaXMud2dzbFN0cnVjdEZyYWdtZW50ID0gYHN0cnVjdCAke2tlYmFiQ2FzZUxhYmVsfUVsZW1lbnQge1xcblxcdCR7aW50ZXJsZWF2ZWRCdWZmZXJFbGVtZW50c1xuICAgICAgICAgICAgLm1hcCgoYmluZGluZykgPT4gYmluZGluZy5uYW1lICsgJzogJyArIGJpbmRpbmcudHlwZS5yZXBsYWNlKCdhcnJheScsICcnKS5yZXBsYWNlKCc8JywgJycpLnJlcGxhY2UoJz4nLCAnJykpXG4gICAgICAgICAgICAuam9pbignLFxcblxcdCcpfVxufTtcXG5cXG5gXG5cbiAgICAgICAgICBjb25zdCBpbnRlcmxlYXZlZEJ1ZmZlclN0cnVjdERlY2xhcmF0aW9uID0gYCR7dGhpcy5uYW1lfUVsZW1lbnQ6IGFycmF5PCR7a2ViYWJDYXNlTGFiZWx9RWxlbWVudCR7YXJyYXlMZW5ndGh9PixgXG5cbiAgICAgICAgICB0aGlzLndnc2xTdHJ1Y3RGcmFnbWVudCArPSBgc3RydWN0ICR7a2ViYWJDYXNlTGFiZWx9IHtcXG5cXHQke2J1ZmZlckVsZW1lbnRzXG4gICAgICAgICAgICAubWFwKChidWZmZXJFbGVtZW50KSA9PiBidWZmZXJFbGVtZW50Lm5hbWUgKyAnOiAnICsgYnVmZmVyRWxlbWVudC50eXBlKVxuICAgICAgICAgICAgLmpvaW4oJyxcXG5cXHQnKX1cblxcdCR7aW50ZXJsZWF2ZWRCdWZmZXJTdHJ1Y3REZWNsYXJhdGlvbn1cbn07YFxuXG4gICAgICAgICAgY29uc3QgdmFyVHlwZSA9IGdldEJpbmRpbmdXR1NMVmFyVHlwZSh0aGlzKVxuICAgICAgICAgIHRoaXMud2dzbEdyb3VwRnJhZ21lbnQgPSBbYCR7dmFyVHlwZX0gJHt0aGlzLm5hbWV9OiAke2tlYmFiQ2FzZUxhYmVsfTtgXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMud2dzbFN0cnVjdEZyYWdtZW50ID0gYHN0cnVjdCAke2tlYmFiQ2FzZUxhYmVsfSB7XFxuXFx0JHt0aGlzLmJ1ZmZlckVsZW1lbnRzXG4gICAgICAgICAgICAubWFwKChiaW5kaW5nKSA9PiBiaW5kaW5nLm5hbWUgKyAnOiAnICsgYmluZGluZy50eXBlLnJlcGxhY2UoJ2FycmF5JywgJycpLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKSlcbiAgICAgICAgICAgIC5qb2luKCcsXFxuXFx0Jyl9XG59O2BcblxuICAgICAgICAgIGNvbnN0IHZhclR5cGUgPSBnZXRCaW5kaW5nV0dTTFZhclR5cGUodGhpcylcbiAgICAgICAgICB0aGlzLndnc2xHcm91cEZyYWdtZW50ID0gW2Ake3ZhclR5cGV9ICR7dGhpcy5uYW1lfTogYXJyYXk8JHtrZWJhYkNhc2VMYWJlbH0ke2FycmF5TGVuZ3RofT47YF1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy53Z3NsU3RydWN0RnJhZ21lbnQgPSBgc3RydWN0ICR7a2ViYWJDYXNlTGFiZWx9IHtcXG5cXHQke3RoaXMuYnVmZmVyRWxlbWVudHNcbiAgICAgICAgICAubWFwKChiaW5kaW5nKSA9PiB7XG4gICAgICAgICAgICAvLyBub3cgYWRkIGFycmF5IGxlbmd0aCBpZiBuZWVkZWRcbiAgICAgICAgICAgIGNvbnN0IGJpbmRpbmdUeXBlID1cbiAgICAgICAgICAgICAgdGhpcy5iaW5kaW5nVHlwZSA9PT0gJ3VuaWZvcm0nICYmICdudW1FbGVtZW50cycgaW4gYmluZGluZ1xuICAgICAgICAgICAgICAgID8gYGFycmF5PCR7YmluZGluZy50eXBlLnJlcGxhY2UoJ2FycmF5JywgJycpLnJlcGxhY2UoJzwnLCAnJykucmVwbGFjZSgnPicsICcnKX0sICR7XG4gICAgICAgICAgICAgICAgICAgIGJpbmRpbmcubnVtRWxlbWVudHNcbiAgICAgICAgICAgICAgICAgIH0+YFxuICAgICAgICAgICAgICAgIDogYmluZGluZy50eXBlXG4gICAgICAgICAgICByZXR1cm4gYmluZGluZy5uYW1lICsgJzogJyArIGJpbmRpbmdUeXBlXG4gICAgICAgICAgfSlcbiAgICAgICAgICAuam9pbignLFxcblxcdCcpfVxufTtgXG5cbiAgICAgICAgY29uc3QgdmFyVHlwZSA9IGdldEJpbmRpbmdXR1NMVmFyVHlwZSh0aGlzKVxuICAgICAgICB0aGlzLndnc2xHcm91cEZyYWdtZW50ID0gW2Ake3ZhclR5cGV9ICR7dGhpcy5uYW1lfTogJHtrZWJhYkNhc2VMYWJlbH07YF1cbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy53Z3NsU3RydWN0RnJhZ21lbnQgPSAnJ1xuICAgICAgdGhpcy53Z3NsR3JvdXBGcmFnbWVudCA9IHRoaXMuYnVmZmVyRWxlbWVudHMubWFwKChiaW5kaW5nKSA9PiB7XG4gICAgICAgIGNvbnN0IHZhclR5cGUgPSBnZXRCaW5kaW5nV0dTTFZhclR5cGUodGhpcylcbiAgICAgICAgcmV0dXJuIGAke3ZhclR5cGV9ICR7YmluZGluZy5uYW1lfTogJHtiaW5kaW5nLnR5cGV9O2BcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIGJpbmRpbmcgc2hvdWxkVXBkYXRlIGZsYWcgdG8gdHJ1ZSB0byB1cGRhdGUgb3VyIHtAbGluayBhcnJheUJ1ZmZlcn0gYXJyYXkgZHVyaW5nIG5leHQgcmVuZGVyLlxuICAgKiBAcGFyYW0gYmluZGluZ05hbWUgLSB0aGUgYmluZGluZyBuYW1lL2tleSB0byB1cGRhdGVcbiAgICovXG4gIHNob3VsZFVwZGF0ZUJpbmRpbmcoYmluZGluZ05hbWUgPSAnJykge1xuICAgIGNvbnN0IGJpbmRpbmdLZXkgPSBPYmplY3Qua2V5cyh0aGlzLmlucHV0cykuZmluZCgoYmluZGluZ0tleSkgPT4gdGhpcy5pbnB1dHNbYmluZGluZ0tleV0ubmFtZSA9PT0gYmluZGluZ05hbWUpXG5cbiAgICBpZiAoYmluZGluZ0tleSkgdGhpcy5pbnB1dHNbYmluZGluZ0tleV0uc2hvdWxkVXBkYXRlID0gdHJ1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEV4ZWN1dGVkIGF0IHRoZSBiZWdpbm5pbmcgb2YgYSBNYXRlcmlhbCByZW5kZXIgY2FsbC5cbiAgICogSWYgYW55IG9mIHRoZSB7QGxpbmsgaW5wdXRzfSBoYXMgY2hhbmdlZCwgcnVuIGl0cyBvbkJlZm9yZVVwZGF0ZSBjYWxsYmFjayB0aGVuIHVwZGF0ZXMgb3VyIHtAbGluayBhcnJheUJ1ZmZlcn0gYXJyYXkuXG4gICAqIEFsc28gc2V0cyB0aGUge0BsaW5rIHNob3VsZFVwZGF0ZX0gcHJvcGVydHkgdG8gdHJ1ZSBzbyB0aGUge0BsaW5rIGNvcmUvYmluZEdyb3Vwcy9CaW5kR3JvdXAuQmluZEdyb3VwIHwgQmluZEdyb3VwfSBrbm93cyBpdCB3aWxsIG5lZWQgdG8gdXBkYXRlIHRoZSB7QGxpbmsgR1BVQnVmZmVyfS5cbiAgICovXG4gIHVwZGF0ZSgpIHtcbiAgICBPYmplY3Qua2V5cyh0aGlzLmlucHV0cykuZm9yRWFjaCgoYmluZGluZ0tleSkgPT4ge1xuICAgICAgY29uc3QgYmluZGluZyA9IHRoaXMuaW5wdXRzW2JpbmRpbmdLZXldXG4gICAgICBjb25zdCBidWZmZXJFbGVtZW50ID0gdGhpcy5idWZmZXJFbGVtZW50cy5maW5kKChidWZmZXJFbCkgPT4gYnVmZmVyRWwua2V5ID09PSBiaW5kaW5nS2V5KVxuXG4gICAgICBpZiAoYmluZGluZy5zaG91bGRVcGRhdGUgJiYgYnVmZmVyRWxlbWVudCkge1xuICAgICAgICBiaW5kaW5nLm9uQmVmb3JlVXBkYXRlICYmIGJpbmRpbmcub25CZWZvcmVVcGRhdGUoKVxuICAgICAgICAvLyB3ZSdyZSBnb2luZyB0byBkaXJlY3RseSB1cGRhdGUgdGhlIGFycmF5QnVmZmVyIGZyb20gdGhlIGJ1ZmZlciBlbGVtZW50IHVwZGF0ZSBtZXRob2RcbiAgICAgICAgYnVmZmVyRWxlbWVudC51cGRhdGUoYmluZGluZy52YWx1ZSlcblxuICAgICAgICB0aGlzLnNob3VsZFVwZGF0ZSA9IHRydWVcbiAgICAgICAgYmluZGluZy5zaG91bGRVcGRhdGUgPSBmYWxzZVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogRXh0cmFjdCB0aGUgZGF0YSBjb3JyZXNwb25kaW5nIHRvIGEgc3BlY2lmaWMge0BsaW5rIEJ1ZmZlckVsZW1lbnR9IGZyb20gYSB7QGxpbmsgRmxvYXQzMkFycmF5fSBob2xkaW5nIHRoZSB7QGxpbmsgQnVmZmVyQmluZGluZyNidWZmZXIgfCBHUFUgYnVmZmVyfSBkYXRhIG9mIHRoaXMge0BsaW5rIEJ1ZmZlckJpbmRpbmd9XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0gcGFyYW1ldGVycyB1c2VkIHRvIGV4dHJhY3QgdGhlIGRhdGFcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMucmVzdWx0IC0ge0BsaW5rIEZsb2F0MzJBcnJheX0gaG9sZGluZyB7QGxpbmsgR1BVQnVmZmVyfSBkYXRhXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzLmJ1ZmZlckVsZW1lbnROYW1lIC0gbmFtZSBvZiB0aGUge0BsaW5rIEJ1ZmZlckVsZW1lbnR9IHRvIHVzZSB0byBleHRyYWN0IHRoZSBkYXRhXG4gICAqIEByZXR1cm5zIC0gZXh0cmFjdGVkIGRhdGEgZnJvbSB0aGUge0BsaW5rIEZsb2F0MzJBcnJheX1cbiAgICovXG4gIGV4dHJhY3RCdWZmZXJFbGVtZW50RGF0YUZyb21CdWZmZXJSZXN1bHQoe1xuICAgIHJlc3VsdCxcbiAgICBidWZmZXJFbGVtZW50TmFtZSxcbiAgfToge1xuICAgIHJlc3VsdDogRmxvYXQzMkFycmF5XG4gICAgYnVmZmVyRWxlbWVudE5hbWU6IEJ1ZmZlckVsZW1lbnRbJ25hbWUnXVxuICB9KTogRmxvYXQzMkFycmF5IHtcbiAgICBjb25zdCBidWZmZXJFbGVtZW50ID0gdGhpcy5idWZmZXJFbGVtZW50cy5maW5kKChidWZmZXJFbGVtZW50KSA9PiBidWZmZXJFbGVtZW50Lm5hbWUgPT09IGJ1ZmZlckVsZW1lbnROYW1lKVxuICAgIGlmIChidWZmZXJFbGVtZW50KSB7XG4gICAgICByZXR1cm4gYnVmZmVyRWxlbWVudC5leHRyYWN0RGF0YUZyb21CdWZmZXJSZXN1bHQocmVzdWx0KVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0XG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCdWZmZXJCaW5kaW5nLCBCdWZmZXJCaW5kaW5nUGFyYW1zIH0gZnJvbSAnLi9CdWZmZXJCaW5kaW5nJ1xuXG4vKipcbiAqIFBhcmFtZXRlcnMgdXNlZCB0byBjcmVhdGUgYSB7QGxpbmsgV3JpdGFibGVCdWZmZXJCaW5kaW5nfVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFdyaXRhYmxlQnVmZmVyQmluZGluZ1BhcmFtcyBleHRlbmRzIEJ1ZmZlckJpbmRpbmdQYXJhbXMge1xuICAvKiogV2hldGhlciB3aGUgc2hvdWxkIGF1dG9tYXRpY2FsbHkgY29weSB0aGUge0BsaW5rIFdyaXRhYmxlQnVmZmVyQmluZGluZyNidWZmZXIgfCBHUFUgYnVmZmVyfSBjb250ZW50IGludG8gb3VyIHtAbGluayBXcml0YWJsZUJ1ZmZlckJpbmRpbmcjcmVzdWx0QnVmZmVyIHwgcmVzdWx0IEdQVSBidWZmZXJ9ICovXG4gIHNob3VsZENvcHlSZXN1bHQ/OiBib29sZWFuXG59XG5cbi8qKlxuICogVXNlZCB0byBjcmVhdGUgYSB7QGxpbmsgQnVmZmVyQmluZGluZ30gdGhhdCBjYW4gaG9sZCByZWFkL3dyaXRlIHN0b3JhZ2UgYmluZGluZ3MgYWxvbmcgd2l0aCBhIHtAbGluayBXcml0YWJsZUJ1ZmZlckJpbmRpbmcjcmVzdWx0QnVmZmVyIHwgcmVzdWx0IEdQVSBidWZmZXJ9IHRoYXQgY2FuIGJlIHVzZWQgdG8gZ2V0IGRhdGEgYmFjayBmcm9tIHRoZSBHUFUuXG4gKlxuICogTm90ZSB0aGF0IGl0IGlzIGF1dG9tYXRpY2FsbHkgY3JlYXRlZCBieSB0aGUge0BsaW5rIGNvcmUvYmluZEdyb3Vwcy9CaW5kR3JvdXAuQmluZEdyb3VwIHwgQmluZEdyb3VwfSB3aGVuIGEge0BsaW5rIHR5cGVzL0JpbmRHcm91cHMuQmluZEdyb3VwSW5wdXRzI3N0b3JhZ2VzIHwgc3RvcmFnZXMgaW5wdXR9IGhhcyBpdHMge0BsaW5rIEJ1ZmZlckJpbmRpbmdQYXJhbXMjYWNjZXNzIHwgYWNjZXNzfSBwcm9wZXJ0eSBzZXQgdG8gYFwicmVhZF93cml0ZVwiYC5cbiAqL1xuZXhwb3J0IGNsYXNzIFdyaXRhYmxlQnVmZmVyQmluZGluZyBleHRlbmRzIEJ1ZmZlckJpbmRpbmcge1xuICAvKiogRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgd2hlIHNob3VsZCBhdXRvbWF0aWNhbGx5IGNvcHkgdGhlIHtAbGluayBidWZmZXIgfCBHUFUgYnVmZmVyfSBjb250ZW50IGludG8gb3VyIHtAbGluayByZXN1bHRCdWZmZXIgfCByZXN1bHQgR1BVIGJ1ZmZlcn0gKi9cbiAgc2hvdWxkQ29weVJlc3VsdDogYm9vbGVhblxuICAvKiogVGhlIHJlc3VsdCBHUFVCdWZmZXIgKi9cbiAgcmVzdWx0QnVmZmVyOiBHUFVCdWZmZXIgfCBudWxsXG4gIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFdyaXRhYmxlQnVmZmVyQmluZGluZ30gKi9cbiAgb3B0aW9uczogV3JpdGFibGVCdWZmZXJCaW5kaW5nUGFyYW1zXG5cbiAgLyoqXG4gICAqIFdyaXRhYmxlQnVmZmVyQmluZGluZyBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBXcml0YWJsZUJ1ZmZlckJpbmRpbmdQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSBvdXIge0BsaW5rIFdyaXRhYmxlQnVmZmVyQmluZGluZ31cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBsYWJlbCA9ICdXb3JrJyxcbiAgICBuYW1lID0gJ3dvcmsnLFxuICAgIGJpbmRpbmdUeXBlLFxuICAgIHVzZVN0cnVjdCA9IHRydWUsXG4gICAgc3RydWN0ID0ge30sXG4gICAgdmlzaWJpbGl0eSxcbiAgICBhY2Nlc3MgPSAncmVhZF93cml0ZScsXG4gICAgc2hvdWxkQ29weVJlc3VsdCA9IGZhbHNlLFxuICB9OiBXcml0YWJsZUJ1ZmZlckJpbmRpbmdQYXJhbXMpIHtcbiAgICBiaW5kaW5nVHlwZSA9ICdzdG9yYWdlJ1xuICAgIHZpc2liaWxpdHkgPSAnY29tcHV0ZSdcblxuICAgIHN1cGVyKHsgbGFiZWwsIG5hbWUsIGJpbmRpbmdUeXBlLCB1c2VTdHJ1Y3QsIHN0cnVjdDogc3RydWN0LCB2aXNpYmlsaXR5LCBhY2Nlc3MgfSlcblxuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgIHNob3VsZENvcHlSZXN1bHQsXG4gICAgfVxuXG4gICAgdGhpcy5zaG91bGRDb3B5UmVzdWx0ID0gc2hvdWxkQ29weVJlc3VsdFxuXG4gICAgLy8gY2FuIGJlIHVzZWQgYXMgb3VyIGJ1ZmZlciBjb3B5IGRlc3RpbmF0aW9uXG4gICAgdGhpcy5yZXN1bHRCdWZmZXIgPSBudWxsXG4gIH1cbn1cbiIsImltcG9ydCB7IGlzUmVuZGVyZXIsIFJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL3V0aWxzJ1xyXG5pbXBvcnQgeyBnZW5lcmF0ZVVVSUQsIHRvS2ViYWJDYXNlIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnXHJcbmltcG9ydCB7IFdyaXRhYmxlQnVmZmVyQmluZGluZywgV3JpdGFibGVCdWZmZXJCaW5kaW5nUGFyYW1zIH0gZnJvbSAnLi4vYmluZGluZ3MvV3JpdGFibGVCdWZmZXJCaW5kaW5nJ1xyXG5pbXBvcnQgeyBCdWZmZXJCaW5kaW5nIH0gZnJvbSAnLi4vYmluZGluZ3MvQnVmZmVyQmluZGluZydcclxuaW1wb3J0IHtcclxuICBBbGxvd2VkQmluZEdyb3VwcyxcclxuICBCaW5kR3JvdXBCaW5kaW5nRWxlbWVudCxcclxuICBCaW5kR3JvdXBCdWZmZXJCaW5kaW5nRWxlbWVudCxcclxuICBCaW5kR3JvdXBFbnRyaWVzLFxyXG4gIEJpbmRHcm91cFBhcmFtcyxcclxuICBSZWFkT25seUlucHV0QmluZGluZ3MsXHJcbn0gZnJvbSAnLi4vLi4vdHlwZXMvQmluZEdyb3VwcydcclxuaW1wb3J0IHsgR1BVQ3VydGFpbnMgfSBmcm9tICcuLi8uLi9jdXJ0YWlucy9HUFVDdXJ0YWlucydcclxuaW1wb3J0IHsgVGV4dHVyZUJpbmRHcm91cFBhcmFtcyB9IGZyb20gJy4vVGV4dHVyZUJpbmRHcm91cCdcclxuaW1wb3J0IHsgQmluZGluZ1R5cGUgfSBmcm9tICcuLi9iaW5kaW5ncy9CaW5kaW5nJ1xyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gaGFuZGxlIGFsbCBpbnB1dHMgZGF0YSBzZW50IHRvIHRoZSBHUFUuPGJyPlxyXG4gKiBJbiBXZWJHUFUsIGRhdGEgKGJ1ZmZlcnMsIHRleHR1cmVzIG9yIHNhbXBsZXJzLCBjYWxsZWQgYmluZGluZ3MpIGFyZSBvcmdhbmlzZWQgYnkgYmluZCBncm91cHMsIGNvbnRhaW5pbmcgdGhvc2UgYmluZGluZ3MuXHJcbiAqXHJcbiAqICMjIEJpbmRpbmdzXHJcbiAqXHJcbiAqIEEge0BsaW5rIEJpbmRHcm91cH0gaXMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIGVhY2gge0BsaW5rIEJ1ZmZlckJpbmRpbmd9IHtAbGluayBHUFVCdWZmZXJ9IGFuZCB0aGVuIHRoZSB7QGxpbmsgR1BVQmluZEdyb3VwfSBhbmQge0BsaW5rIEdQVUJpbmRHcm91cExheW91dH0gdGhhdCBhcmUgdXNlZCB0byBjcmVhdGUge0BsaW5rIEdQVUNvbXB1dGVQaXBlbGluZX0gb3Ige0BsaW5rIEdQVVJlbmRlclBpcGVsaW5lfS48YnI+XHJcbiAqIFRob3NlIGFyZSBnZW5lcmFsbHkgYXV0b21hdGljYWxseSBjcmVhdGVkIGJ5IHRoZSB7QGxpbmsgY29yZS9tYXRlcmlhbHMvTWF0ZXJpYWwuTWF0ZXJpYWwgfCBNYXRlcmlhbH0gdXNpbmcgdGhpcyB7QGxpbmsgQmluZEdyb3VwfS4gSWYgeW91IG5lZWQgdG8gbWFudWFsbHkgY3JlYXRlIHRoZW0sIHlvdSB3aWxsIGhhdmUgdG8gY2FsbCBpdHMge0BsaW5rIEJpbmRHcm91cCNjcmVhdGVCaW5kR3JvdXAgfCBgY3JlYXRlQmluZEdyb3VwKClgIG1ldGhvZH1cclxuICpcclxuICogIyMjIFNhbXBsZXJzIGFuZCB0ZXh0dXJlc1xyXG4gKlxyXG4gKiBBIHtAbGluayBCaW5kR3JvdXB9IGlzIGJlc3Qgc3VpdGVkIHRvIGhhbmRsZSB7QGxpbmsgR1BVQnVmZmVyfSBvbmx5IGJpbmRpbmdzLiBJZiB5b3UgbmVlZCB0byBoYW5kbGUge0BsaW5rIEdQVVNhbXBsZXJ9LCBhIHtAbGluayBHUFVUZXh0dXJlfSBvciBhIHtAbGluayBHUFVFeHRlcm5hbFRleHR1cmV9LCB5b3Ugc2hvdWxkIHVzZSBhIHtAbGluayBjb3JlL2JpbmRHcm91cHMvVGV4dHVyZUJpbmRHcm91cC5UZXh0dXJlQmluZEdyb3VwIHwgVGV4dHVyZUJpbmRHcm91cH0gaW5zdGVhZC5cclxuICpcclxuICogIyMjIFVwZGF0aW5nIGEgR1BVQmluZEdyb3VwIG9yIEdQVUJpbmRHcm91cExheW91dFxyXG4gKlxyXG4gKiBFYWNoIHRpbWUgb25lIG9mIHRoZSB7QGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQVBJL0dQVURldmljZS9jcmVhdGVCaW5kR3JvdXAjcmVzb3VyY2UgfCBiaW5kaW5nIHJlc291cmNlfSBjaGFuZ2VzLCBpdHMge0BsaW5rIEJpbmRHcm91cCNiaW5kR3JvdXAgfCBiaW5kR3JvdXB9IHdpbGwgYmUgcmVjcmVhdGVkICh1c3VhbGx5LCB3aGVuIGEge0BsaW5rIEdQVVRleHR1cmV9IGlzIHVwbG9hZGVkKS48YnI+XHJcbiAqIEVhY2ggdGltZSBvbmUgb2YgdGhlIHtAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvR1BVRGV2aWNlL2NyZWF0ZUJpbmRHcm91cExheW91dCNyZXNvdXJjZV9sYXlvdXRfb2JqZWN0cyB8IGJpbmRpbmcgcmVzb3VyY2UgbGF5b3V0fSBjaGFuZ2VzLCBpdHMge0BsaW5rIEJpbmRHcm91cCNiaW5kR3JvdXBMYXlvdXQgfCBiaW5kR3JvdXBMYXlvdXR9IGFuZCB7QGxpbmsgQmluZEdyb3VwI2JpbmRHcm91cCB8IGJpbmRHcm91cH0gd2lsbCBiZSByZWNyZWF0ZWQsIGFuZCB0aGUge0BsaW5rIEdQVUNvbXB1dGVQaXBlbGluZX0gb3Ige0BsaW5rIEdQVVJlbmRlclBpcGVsaW5lfSB3aWxsIGJlIHJlY3JlYXRlZCBhcyB3ZWxsLlxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKiBgYGBqYXZhc2NyaXB0XHJcbiAqIC8vIHNldCBvdXIgbWFpbiBHUFVDdXJ0YWlucyBpbnN0YW5jZVxyXG4gKiBjb25zdCBncHVDdXJ0YWlucyA9IG5ldyBHUFVDdXJ0YWlucyh7XHJcbiAqICAgY29udGFpbmVyOiAnI2NhbnZhcycgLy8gc2VsZWN0b3Igb2Ygb3VyIFdlYkdQVSBjYW52YXMgY29udGFpbmVyXHJcbiAqIH0pXHJcbiAqXHJcbiAqIC8vIHNldCB0aGUgR1BVIGRldmljZVxyXG4gKiAvLyBub3RlIHRoaXMgaXMgYXN5bmNocm9ub3VzXHJcbiAqIGF3YWl0IGdwdUN1cnRhaW5zLnNldERldmljZSgpXHJcbiAqXHJcbiAqIGNvbnN0IGJpbmRHcm91cCA9IG5ldyBCaW5kR3JvdXAoZ3B1Q3VydGFpbnMsIHtcclxuICogICBsYWJlbDogJ015IGJpbmQgZ3JvdXAnLFxyXG4gKiAgIHVuaWZvcm1zOiB7XHJcbiAqICAgICBwYXJhbXM6IHtcclxuICogICAgICAgc3RydWN0OiB7XHJcbiAqICAgICAgICAgb3BhY2l0eToge1xyXG4gKiAgICAgICAgICAgdHlwZTogJ2YzMicsXHJcbiAqICAgICAgICAgICB2YWx1ZTogMSxcclxuICogICAgICAgICB9LFxyXG4gKiAgICAgICAgIG1vdXNlUG9zaXRpb246IHtcclxuICogICAgICAgICAgIHR5cGU6ICd2ZWMyZicsXHJcbiAqICAgICAgICAgICB2YWx1ZTogbmV3IFZlYzIoKSxcclxuICogICAgICAgICB9LFxyXG4gKiAgICAgICB9LFxyXG4gKiAgICAgfSxcclxuICogICB9LFxyXG4gKiB9KVxyXG4gKlxyXG4gKiAvLyBjcmVhdGUgdGhlIEdQVSBidWZmZXIsIGJpbmRHcm91cExheW91dCBhbmQgYmluZEdyb3VwXHJcbiAqIGJpbmRHcm91cC5jcmVhdGVCaW5kR3JvdXAoKVxyXG4gKiBgYGBcclxuICovXHJcbmV4cG9ydCBjbGFzcyBCaW5kR3JvdXAge1xyXG4gIC8qKiBUaGUgdHlwZSBvZiB0aGUge0BsaW5rIEJpbmRHcm91cH0gKi9cclxuICB0eXBlOiBzdHJpbmdcclxuICAvKiogVGhlIHVuaXZlcnNhbCB1bmlxdWUgaWQgb2YgdGhlIHtAbGluayBCaW5kR3JvdXB9ICovXHJcbiAgdXVpZDogc3RyaW5nXHJcbiAgLyoqIFRoZSB7QGxpbmsgUmVuZGVyZXJ9IHVzZWQgKi9cclxuICByZW5kZXJlcjogUmVuZGVyZXJcclxuICAvKiogT3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBCaW5kR3JvdXB9ICovXHJcbiAgb3B0aW9uczogVGV4dHVyZUJpbmRHcm91cFBhcmFtc1xyXG4gIC8qKiBJbmRleCBvZiB0aGlzIHtAbGluayBCaW5kR3JvdXB9LCB1c2VkIHRvIGxpbmsgc3RydWN0IGluIHRoZSBzaGFkZXJzICovXHJcbiAgaW5kZXg6IG51bWJlclxyXG5cclxuICAvKiogTGlzdCBvZiB7QGxpbmsgQmluZEdyb3VwQmluZGluZ0VsZW1lbnQgfCBiaW5kaW5nc30gKGJ1ZmZlcnMsIHRleHR1cmUsIGV0Yy4pIGhhbmRsZWQgYnkgdGhpcyB7QGxpbmsgQmluZEdyb3VwfSAqL1xyXG4gIGJpbmRpbmdzOiBCaW5kR3JvdXBCaW5kaW5nRWxlbWVudFtdXHJcblxyXG4gIC8qKiBPdXIge0BsaW5rIEJpbmRHcm91cH0ge0BsaW5rIEJpbmRHcm91cEVudHJpZXMgfCBlbnRyaWVzfSBvYmplY3RzICovXHJcbiAgZW50cmllczogQmluZEdyb3VwRW50cmllc1xyXG5cclxuICAvKiogT3VyIHtAbGluayBCaW5kR3JvdXB9e0BsaW5rIEdQVUJpbmRHcm91cExheW91dH0gKi9cclxuICBiaW5kR3JvdXBMYXlvdXQ6IG51bGwgfCBHUFVCaW5kR3JvdXBMYXlvdXRcclxuICAvKiogT3VyIHtAbGluayBCaW5kR3JvdXB9IHtAbGluayBHUFVCaW5kR3JvdXB9ICovXHJcbiAgYmluZEdyb3VwOiBudWxsIHwgR1BVQmluZEdyb3VwXHJcblxyXG4gIC8qKiBGbGFnIGluZGljYXRpbmcgd2hldGhlciB3ZSBuZWVkIHRvIGZsdXNoIGFuZCByZWNyZWF0ZSB0aGUgcGlwZWxpbmUgdXNpbmcgdGhpcyB7QGxpbmsgQmluZEdyb3VwfSBzKi9cclxuICBuZWVkc1BpcGVsaW5lRmx1c2g6IGJvb2xlYW5cclxuXHJcbiAgLyoqXHJcbiAgICogQmluZEdyb3VwIGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0gYSB7QGxpbmsgUmVuZGVyZXJ9IGNsYXNzIG9iamVjdCBvciBhIHtAbGluayBHUFVDdXJ0YWluc30gY2xhc3Mgb2JqZWN0XHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgQmluZEdyb3VwUGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgb3VyIHtAbGluayBCaW5kR3JvdXB9XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZW5kZXJlcjogUmVuZGVyZXIgfCBHUFVDdXJ0YWlucyxcclxuICAgIHsgbGFiZWwgPSAnQmluZEdyb3VwJywgaW5kZXggPSAwLCBiaW5kaW5ncyA9IFtdLCB1bmlmb3Jtcywgc3RvcmFnZXMgfTogQmluZEdyb3VwUGFyYW1zID0ge31cclxuICApIHtcclxuICAgIHRoaXMudHlwZSA9ICdCaW5kR3JvdXAnXHJcblxyXG4gICAgLy8gd2UgY291bGQgcGFzcyBvdXIgY3VydGFpbnMgb2JqZWN0IE9SIG91ciBjdXJ0YWlucyByZW5kZXJlciBvYmplY3RcclxuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBSZW5kZXJlcilcclxuXHJcbiAgICBpc1JlbmRlcmVyKHJlbmRlcmVyLCB0aGlzLnR5cGUpXHJcblxyXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyXHJcbiAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgIGxhYmVsLFxyXG4gICAgICBpbmRleCxcclxuICAgICAgYmluZGluZ3MsXHJcbiAgICAgIC4uLih1bmlmb3JtcyAmJiB7IHVuaWZvcm1zIH0pLFxyXG4gICAgICAuLi4oc3RvcmFnZXMgJiYgeyBzdG9yYWdlcyB9KSxcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLmluZGV4ID0gaW5kZXhcclxuICAgIHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpXHJcblxyXG4gICAgdGhpcy5iaW5kaW5ncyA9IFtdXHJcbiAgICBiaW5kaW5ncy5sZW5ndGggJiYgdGhpcy5hZGRCaW5kaW5ncyhiaW5kaW5ncylcclxuICAgIGlmICh0aGlzLm9wdGlvbnMudW5pZm9ybXMgfHwgdGhpcy5vcHRpb25zLnN0b3JhZ2VzKSB0aGlzLnNldElucHV0QmluZGluZ3MoKVxyXG5cclxuICAgIHRoaXMucmVzZXRFbnRyaWVzKClcclxuXHJcbiAgICB0aGlzLmJpbmRHcm91cExheW91dCA9IG51bGxcclxuICAgIHRoaXMuYmluZEdyb3VwID0gbnVsbFxyXG5cclxuICAgIC8vIGlmIHdlIGV2ZXIgdXBkYXRlIG91ciBiaW5kIGdyb3VwIGxheW91dFxyXG4gICAgLy8gd2Ugd2lsbCBoYXZlIHRvIHJlY3JlYXRlIHRoZSB3aG9sZSBwaXBlbGluZSBhZ2FpblxyXG4gICAgdGhpcy5uZWVkc1BpcGVsaW5lRmx1c2ggPSBmYWxzZVxyXG5cclxuICAgIHRoaXMucmVuZGVyZXIuYWRkQmluZEdyb3VwKHRoaXMpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIG91ciB7QGxpbmsgQmluZEdyb3VwI2luZGV4IHwgYmluZCBncm91cCBpbmRleH1cclxuICAgKiBAcGFyYW0gaW5kZXggLSB7QGxpbmsgQmluZEdyb3VwI2luZGV4IHwgYmluZCBncm91cCBpbmRleH0gdG8gc2V0XHJcbiAgICovXHJcbiAgc2V0SW5kZXgoaW5kZXg6IG51bWJlcikge1xyXG4gICAgdGhpcy5pbmRleCA9IGluZGV4XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGFuIGFycmF5IG9mIGFscmVhZHkgY3JlYXRlZCB7QGxpbmsgYmluZGluZ3N9IChidWZmZXJzLCB0ZXh0dXJlLCBldGMuKSB0byB0aGUge0BsaW5rIGJpbmRpbmdzfSBhcnJheVxyXG4gICAqIEBwYXJhbSBiaW5kaW5ncyAtIHtAbGluayBiaW5kaW5nc30gdG8gYWRkXHJcbiAgICovXHJcbiAgYWRkQmluZGluZ3MoYmluZGluZ3M6IEJpbmRHcm91cEJpbmRpbmdFbGVtZW50W10gPSBbXSkge1xyXG4gICAgdGhpcy5iaW5kaW5ncyA9IFsuLi50aGlzLmJpbmRpbmdzLCAuLi5iaW5kaW5nc11cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEFkZHMgYW4gYWxyZWFkeSBjcmVhdGVkIHtAbGluayBiaW5kaW5nc30gKGJ1ZmZlcnMsIHRleHR1cmUsIGV0Yy4pIHRvIHRoZSB7QGxpbmsgYmluZGluZ3N9IGFycmF5XHJcbiAgICogQHBhcmFtIGJpbmRpbmcgLSBiaW5kaW5nIHRvIGFkZFxyXG4gICAqL1xyXG4gIGFkZEJpbmRpbmcoYmluZGluZzogQmluZEdyb3VwQmluZGluZ0VsZW1lbnQpIHtcclxuICAgIHRoaXMuYmluZGluZ3MucHVzaChiaW5kaW5nKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBCaW5kaW5ncyBiYXNlZCBvbiBhIGxpc3Qgb2YgaW5wdXRzXHJcbiAgICogQHBhcmFtIGJpbmRpbmdUeXBlIC0ge0BsaW5rIGNvcmUvYmluZGluZ3MvQmluZGluZy5CaW5kaW5nI2JpbmRpbmdUeXBlIHwgYmluZGluZyB0eXBlfVxyXG4gICAqIEBwYXJhbSBpbnB1dHMgLSB7QGxpbmsgUmVhZE9ubHlJbnB1dEJpbmRpbmdzIHwgaW5wdXRzICh1bmlmb3JtIG9yIHN0b3JhZ2UpfSB0aGF0IHdpbGwgYmUgdXNlZCB0byBjcmVhdGUgdGhlIGJpbmRpbmdcclxuICAgKiBAcmV0dXJucyAtIGEge0BsaW5rIGJpbmRpbmdzfSBhcnJheVxyXG4gICAqL1xyXG4gIGNyZWF0ZUlucHV0QmluZGluZ3MoXHJcbiAgICBiaW5kaW5nVHlwZTogQmluZGluZ1R5cGUgPSAndW5pZm9ybScsXHJcbiAgICBpbnB1dHM6IFJlYWRPbmx5SW5wdXRCaW5kaW5ncyA9IHt9XHJcbiAgKTogQmluZEdyb3VwQmluZGluZ0VsZW1lbnRbXSB7XHJcbiAgICByZXR1cm4gW1xyXG4gICAgICAuLi5PYmplY3Qua2V5cyhpbnB1dHMpLm1hcCgoaW5wdXRLZXkpID0+IHtcclxuICAgICAgICBjb25zdCBiaW5kaW5nID0gaW5wdXRzW2lucHV0S2V5XSBhcyBXcml0YWJsZUJ1ZmZlckJpbmRpbmdQYXJhbXNcclxuXHJcbiAgICAgICAgY29uc3QgYmluZGluZ1BhcmFtczogV3JpdGFibGVCdWZmZXJCaW5kaW5nUGFyYW1zID0ge1xyXG4gICAgICAgICAgbGFiZWw6IHRvS2ViYWJDYXNlKGJpbmRpbmcubGFiZWwgfHwgaW5wdXRLZXkpLFxyXG4gICAgICAgICAgbmFtZTogaW5wdXRLZXksXHJcbiAgICAgICAgICBiaW5kaW5nVHlwZSxcclxuICAgICAgICAgIHVzZVN0cnVjdDogdHJ1ZSwgLy8gYnkgZGVmYXVsdFxyXG4gICAgICAgICAgdmlzaWJpbGl0eTogYmluZGluZy5hY2Nlc3MgPT09ICdyZWFkX3dyaXRlJyA/ICdjb21wdXRlJyA6IGJpbmRpbmcudmlzaWJpbGl0eSxcclxuICAgICAgICAgIGFjY2VzczogYmluZGluZy5hY2Nlc3MgPz8gJ3JlYWQnLCAvLyByZWFkIGJ5IGRlZmF1bHRcclxuICAgICAgICAgIHN0cnVjdDogYmluZGluZy5zdHJ1Y3QsXHJcbiAgICAgICAgICAuLi4oYmluZGluZy5zaG91bGRDb3B5UmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgeyBzaG91bGRDb3B5UmVzdWx0OiBiaW5kaW5nLnNob3VsZENvcHlSZXN1bHQgfSksXHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBjb25zdCBCdWZmZXJCaW5kaW5nQ29uc3RydWN0b3IgPSBiaW5kaW5nUGFyYW1zLmFjY2VzcyA9PT0gJ3JlYWRfd3JpdGUnID8gV3JpdGFibGVCdWZmZXJCaW5kaW5nIDogQnVmZmVyQmluZGluZ1xyXG5cclxuICAgICAgICByZXR1cm4gYmluZGluZy51c2VTdHJ1Y3QgIT09IGZhbHNlXHJcbiAgICAgICAgICA/IG5ldyBCdWZmZXJCaW5kaW5nQ29uc3RydWN0b3IoYmluZGluZ1BhcmFtcylcclxuICAgICAgICAgIDogT2JqZWN0LmtleXMoYmluZGluZy5zdHJ1Y3QpLm1hcCgoYmluZGluZ0tleSkgPT4ge1xyXG4gICAgICAgICAgICAgIGJpbmRpbmdQYXJhbXMubGFiZWwgPSB0b0tlYmFiQ2FzZShiaW5kaW5nLmxhYmVsID8gYmluZGluZy5sYWJlbCArIGJpbmRpbmdLZXkgOiBpbnB1dEtleSArIGJpbmRpbmdLZXkpXHJcbiAgICAgICAgICAgICAgYmluZGluZ1BhcmFtcy5uYW1lID0gaW5wdXRLZXkgKyBiaW5kaW5nS2V5XHJcbiAgICAgICAgICAgICAgYmluZGluZ1BhcmFtcy51c2VTdHJ1Y3QgPSBmYWxzZVxyXG4gICAgICAgICAgICAgIGJpbmRpbmdQYXJhbXMuc3RydWN0ID0geyBbYmluZGluZ0tleV06IGJpbmRpbmcuc3RydWN0W2JpbmRpbmdLZXldIH1cclxuXHJcbiAgICAgICAgICAgICAgcmV0dXJuIG5ldyBCdWZmZXJCaW5kaW5nQ29uc3RydWN0b3IoYmluZGluZ1BhcmFtcylcclxuICAgICAgICAgICAgfSlcclxuICAgICAgfSksXHJcbiAgICBdLmZsYXQoKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlIGFuZCBhZGRzIHtAbGluayBiaW5kaW5nc30gYmFzZWQgb24gaW5wdXRzIHByb3ZpZGVkIHVwb24gY3JlYXRpb25cclxuICAgKi9cclxuICBzZXRJbnB1dEJpbmRpbmdzKCkge1xyXG4gICAgdGhpcy5hZGRCaW5kaW5ncyhbXHJcbiAgICAgIC4uLnRoaXMuY3JlYXRlSW5wdXRCaW5kaW5ncygndW5pZm9ybScsIHRoaXMub3B0aW9ucy51bmlmb3JtcyksXHJcbiAgICAgIC4uLnRoaXMuY3JlYXRlSW5wdXRCaW5kaW5ncygnc3RvcmFnZScsIHRoaXMub3B0aW9ucy5zdG9yYWdlcyksXHJcbiAgICBdKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHdoZXRoZXIgdGhlIEdQVSBiaW5kIGdyb3VwIGlzIHJlYWR5IHRvIGJlIGNyZWF0ZWRcclxuICAgKiBJdCBjYW4gYmUgY3JlYXRlZCBpZiBpdCBoYXMge0BsaW5rIGJpbmRpbmdzfSBhbmQgaGFzIG5vdCBiZWVuIGNyZWF0ZWQgeWV0XHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICovXHJcbiAgZ2V0IHNob3VsZENyZWF0ZUJpbmRHcm91cCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhdGhpcy5iaW5kR3JvdXAgJiYgISF0aGlzLmJpbmRpbmdzLmxlbmd0aFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVzZXQgb3VyIHtAbGluayBCaW5kR3JvdXB9IHtAbGluayBlbnRyaWVzfVxyXG4gICAqL1xyXG4gIHJlc2V0RW50cmllcygpIHtcclxuICAgIHRoaXMuZW50cmllcyA9IHtcclxuICAgICAgYmluZEdyb3VwTGF5b3V0OiBbXSxcclxuICAgICAgYmluZEdyb3VwOiBbXSxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSB0aGUgR1BVIGJ1ZmZlcnMsIHtAbGluayBiaW5kaW5nc30sIHtAbGluayBlbnRyaWVzfSwge0BsaW5rIGJpbmRHcm91cExheW91dH0gYW5kIHtAbGluayBiaW5kR3JvdXB9XHJcbiAgICovXHJcbiAgY3JlYXRlQmluZEdyb3VwKCkge1xyXG4gICAgdGhpcy5maWxsRW50cmllcygpXHJcbiAgICB0aGlzLnNldEJpbmRHcm91cExheW91dCgpXHJcbiAgICB0aGlzLnNldEJpbmRHcm91cCgpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCB0aGUge0BsaW5rIEJpbmRHcm91cCNlbnRyaWVzLmJpbmRHcm91cCB8IGJpbmRHcm91cCBlbnRyaWVzfSwgcmVjcmVhdGVzIHRoZW0gYW5kIHRoZW4gcmVjcmVhdGUgdGhlIHtAbGluayBCaW5kR3JvdXAjYmluZEdyb3VwIHwgR1BVIGJpbmQgZ3JvdXB9XHJcbiAgICovXHJcbiAgcmVzZXRCaW5kR3JvdXAoKSB7XHJcbiAgICB0aGlzLmVudHJpZXMuYmluZEdyb3VwID0gW11cclxuICAgIHRoaXMuYmluZGluZ3MuZm9yRWFjaCgoYmluZGluZykgPT4ge1xyXG4gICAgICB0aGlzLmVudHJpZXMuYmluZEdyb3VwLnB1c2goe1xyXG4gICAgICAgIGJpbmRpbmc6IHRoaXMuZW50cmllcy5iaW5kR3JvdXAubGVuZ3RoLFxyXG4gICAgICAgIHJlc291cmNlOiBiaW5kaW5nLnJlc291cmNlLFxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuXHJcbiAgICB0aGlzLnNldEJpbmRHcm91cCgpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCB0aGUge0BsaW5rIEJpbmRHcm91cCNlbnRyaWVzLmJpbmRHcm91cExheW91dCB8IGJpbmRHcm91cExheW91dCBlbnRyaWVzfSwgcmVjcmVhdGVzIHRoZW0gYW5kIHRoZW4gcmVjcmVhdGUgdGhlIHtAbGluayBCaW5kR3JvdXAjYmluZEdyb3VwTGF5b3V0IHwgR1BVIGJpbmQgZ3JvdXAgbGF5b3V0fVxyXG4gICAqL1xyXG4gIHJlc2V0QmluZEdyb3VwTGF5b3V0KCkge1xyXG4gICAgdGhpcy5lbnRyaWVzLmJpbmRHcm91cExheW91dCA9IFtdXHJcbiAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmcpID0+IHtcclxuICAgICAgdGhpcy5lbnRyaWVzLmJpbmRHcm91cExheW91dC5wdXNoKHtcclxuICAgICAgICBiaW5kaW5nOiB0aGlzLmVudHJpZXMuYmluZEdyb3VwTGF5b3V0Lmxlbmd0aCxcclxuICAgICAgICAuLi5iaW5kaW5nLnJlc291cmNlTGF5b3V0LFxyXG4gICAgICAgIHZpc2liaWxpdHk6IGJpbmRpbmcudmlzaWJpbGl0eSxcclxuICAgICAgfSlcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5zZXRCaW5kR3JvdXBMYXlvdXQoKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHtAbGluayBjb3JlL3JlbmRlcmVycy9HUFVEZXZpY2VNYW5hZ2VyLkdQVURldmljZU1hbmFnZXIjZGV2aWNlIHwgZGV2aWNlfSBoYXMgYmVlbiBsb3N0IHRvIHByZXBhcmUgZXZlcnl0aGluZyBmb3IgcmVzdG9yYXRpb25cclxuICAgKi9cclxuICBsb3NlQ29udGV4dCgpIHtcclxuICAgIHRoaXMucmVzZXRFbnRyaWVzKClcclxuXHJcbiAgICB0aGlzLmJ1ZmZlckJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmcpID0+IHtcclxuICAgICAgYmluZGluZy5idWZmZXIgPSBudWxsXHJcblxyXG4gICAgICBpZiAoJ3Jlc3VsdEJ1ZmZlcicgaW4gYmluZGluZykge1xyXG4gICAgICAgIGJpbmRpbmcucmVzdWx0QnVmZmVyID0gbnVsbFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIHRoaXMuYmluZEdyb3VwID0gbnVsbFxyXG4gICAgdGhpcy5iaW5kR3JvdXBMYXlvdXQgPSBudWxsXHJcbiAgICB0aGlzLm5lZWRzUGlwZWxpbmVGbHVzaCA9IHRydWVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhbGwge0BsaW5rIEJpbmRHcm91cCNiaW5kaW5ncyB8IGJpbmQgZ3JvdXAgYmluZGluZ3N9IHRoYXQgaGFuZGxlIGEge0BsaW5rIEdQVUJ1ZmZlcn1cclxuICAgKi9cclxuICBnZXQgYnVmZmVyQmluZGluZ3MoKTogQmluZEdyb3VwQnVmZmVyQmluZGluZ0VsZW1lbnRbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5ncy5maWx0ZXIoXHJcbiAgICAgIChiaW5kaW5nKSA9PiBiaW5kaW5nIGluc3RhbmNlb2YgQnVmZmVyQmluZGluZyB8fCBiaW5kaW5nIGluc3RhbmNlb2YgV3JpdGFibGVCdWZmZXJCaW5kaW5nXHJcbiAgICApIGFzIEJpbmRHcm91cEJ1ZmZlckJpbmRpbmdFbGVtZW50W11cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYmluZGluZyBHUFVCdWZmZXIgd2l0aCBjb3JyZWN0IHBhcmFtc1xyXG4gICAqIEBwYXJhbSBiaW5kaW5nIC0gdGhlIGJpbmRpbmcgZWxlbWVudFxyXG4gICAqL1xyXG4gIGNyZWF0ZUJpbmRpbmdCdWZmZXIoYmluZGluZzogQmluZEdyb3VwQnVmZmVyQmluZGluZ0VsZW1lbnQpIHtcclxuICAgIC8vIFRPRE8gdXNlciBkZWZpbmVkIHVzYWdlP1xyXG4gICAgLy8gW0thbmd6XShodHRwczovL2dpdGh1Yi5jb20vS2FuZ3opIHNhaWQ6XHJcbiAgICAvLyBcIkluIGdlbmVyYWwgdGhvdWdoIENPUFlfU1JDL0RTVCBpcyBmcmVlIChhdCBsZWFzdCBpbiBEYXduIC8gQ2hyb21lIGJlY2F1c2Ugd2UgYWRkIGl0IGFsbCB0aGUgdGltZSBmb3Igb3VyIG93biBwdXJwb3NlKS5cIlxyXG4gICAgYmluZGluZy5idWZmZXIgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUJ1ZmZlcih7XHJcbiAgICAgIGxhYmVsOiB0aGlzLm9wdGlvbnMubGFiZWwgKyAnOiAnICsgYmluZGluZy5iaW5kaW5nVHlwZSArICcgYnVmZmVyIGZyb206ICcgKyBiaW5kaW5nLmxhYmVsLFxyXG4gICAgICBzaXplOiBiaW5kaW5nLmFycmF5QnVmZmVyLmJ5dGVMZW5ndGgsXHJcbiAgICAgIHVzYWdlOlxyXG4gICAgICAgIGJpbmRpbmcuYmluZGluZ1R5cGUgPT09ICd1bmlmb3JtJ1xyXG4gICAgICAgICAgPyBHUFVCdWZmZXJVc2FnZS5VTklGT1JNIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX1NSQyB8IEdQVUJ1ZmZlclVzYWdlLlZFUlRFWFxyXG4gICAgICAgICAgOiBHUFVCdWZmZXJVc2FnZS5TVE9SQUdFIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QgfCBHUFVCdWZmZXJVc2FnZS5DT1BZX1NSQyB8IEdQVUJ1ZmZlclVzYWdlLlZFUlRFWCxcclxuICAgIH0pXHJcblxyXG4gICAgaWYgKCdyZXN1bHRCdWZmZXInIGluIGJpbmRpbmcpIHtcclxuICAgICAgYmluZGluZy5yZXN1bHRCdWZmZXIgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZUJ1ZmZlcih7XHJcbiAgICAgICAgbGFiZWw6IHRoaXMub3B0aW9ucy5sYWJlbCArICc6IFJlc3VsdCBidWZmZXIgZnJvbTogJyArIGJpbmRpbmcubGFiZWwsXHJcbiAgICAgICAgc2l6ZTogYmluZGluZy5hcnJheUJ1ZmZlci5ieXRlTGVuZ3RoLFxyXG4gICAgICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5NQVBfUkVBRCB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRmlsbCBpbiBvdXIgZW50cmllcyBiaW5kR3JvdXBMYXlvdXQgYW5kIGJpbmRHcm91cCBhcnJheXMgd2l0aCB0aGUgY29ycmVjdCBiaW5kaW5nIHJlc291cmNlcy5cclxuICAgKiBGb3IgYnVmZmVyIHN0cnVjdCwgY3JlYXRlIGEgR1BVQnVmZmVyIGZpcnN0IGlmIG5lZWRlZFxyXG4gICAqL1xyXG4gIGZpbGxFbnRyaWVzKCkge1xyXG4gICAgdGhpcy5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nKSA9PiB7XHJcbiAgICAgIC8vIGlmIG5vIHZpc2liaWxpdHkgc3BlY2lmaWVkLCBqdXN0IHNldCBpdCB0byB0aGUgbWF4aW11bSBkZWZhdWx0IGNhcGFiaWxpdGllc1xyXG4gICAgICBpZiAoIWJpbmRpbmcudmlzaWJpbGl0eSkge1xyXG4gICAgICAgIGJpbmRpbmcudmlzaWJpbGl0eSA9IEdQVVNoYWRlclN0YWdlLlZFUlRFWCB8IEdQVVNoYWRlclN0YWdlLkZSQUdNRU5UIHwgR1BVU2hhZGVyU3RhZ2UuQ09NUFVURVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBpZiBpdCdzIGEgYnVmZmVyIGJpbmRpbmcsIGNyZWF0ZSB0aGUgR1BVQnVmZmVyXHJcbiAgICAgIGlmICgnYnVmZmVyJyBpbiBiaW5kaW5nICYmICFiaW5kaW5nLmJ1ZmZlcikge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlQmluZGluZ0J1ZmZlcihiaW5kaW5nKVxyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBub3cgdGhhdCBldmVyeXRoaW5nIGlzIHJlYWR5LCBmaWxsIG91ciBlbnRyaWVzXHJcbiAgICAgIHRoaXMuZW50cmllcy5iaW5kR3JvdXBMYXlvdXQucHVzaCh7XHJcbiAgICAgICAgYmluZGluZzogdGhpcy5lbnRyaWVzLmJpbmRHcm91cExheW91dC5sZW5ndGgsXHJcbiAgICAgICAgLi4uYmluZGluZy5yZXNvdXJjZUxheW91dCxcclxuICAgICAgICB2aXNpYmlsaXR5OiBiaW5kaW5nLnZpc2liaWxpdHksXHJcbiAgICAgIH0pXHJcblxyXG4gICAgICB0aGlzLmVudHJpZXMuYmluZEdyb3VwLnB1c2goe1xyXG4gICAgICAgIGJpbmRpbmc6IHRoaXMuZW50cmllcy5iaW5kR3JvdXAubGVuZ3RoLFxyXG4gICAgICAgIHJlc291cmNlOiBiaW5kaW5nLnJlc291cmNlLFxyXG4gICAgICB9KVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBhIGJpbmQgZ3JvdXAgYmluZGluZyBieSBuYW1lL2tleVxyXG4gICAqIEBwYXJhbSBiaW5kaW5nTmFtZSAtIHRoZSBiaW5kaW5nIG5hbWUgb3Iga2V5XHJcbiAgICogQHJldHVybnMgLSB0aGUgZm91bmQgYmluZGluZywgb3IgbnVsbCBpZiBub3QgZm91bmRcclxuICAgKi9cclxuICBnZXRCaW5kaW5nQnlOYW1lKGJpbmRpbmdOYW1lID0gJycpOiBCaW5kR3JvdXBCaW5kaW5nRWxlbWVudCB8IG51bGwge1xyXG4gICAgcmV0dXJuIHRoaXMuYmluZGluZ3MuZmluZCgoYmluZGluZykgPT4gYmluZGluZy5uYW1lID09PSBiaW5kaW5nTmFtZSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIEdQVUJpbmRHcm91cExheW91dCBhbmQgc2V0IG91ciB7QGxpbmsgYmluZEdyb3VwTGF5b3V0fVxyXG4gICAqL1xyXG4gIHNldEJpbmRHcm91cExheW91dCgpIHtcclxuICAgIHRoaXMuYmluZEdyb3VwTGF5b3V0ID0gdGhpcy5yZW5kZXJlci5jcmVhdGVCaW5kR3JvdXBMYXlvdXQoe1xyXG4gICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsICsgJyBsYXlvdXQnLFxyXG4gICAgICBlbnRyaWVzOiB0aGlzLmVudHJpZXMuYmluZEdyb3VwTGF5b3V0LFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZSBhIEdQVUJpbmRHcm91cCBhbmQgc2V0IG91ciB7QGxpbmsgYmluZEdyb3VwfVxyXG4gICAqL1xyXG4gIHNldEJpbmRHcm91cCgpIHtcclxuICAgIHRoaXMuYmluZEdyb3VwID0gdGhpcy5yZW5kZXJlci5jcmVhdGVCaW5kR3JvdXAoe1xyXG4gICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsLFxyXG4gICAgICBsYXlvdXQ6IHRoaXMuYmluZEdyb3VwTGF5b3V0LFxyXG4gICAgICBlbnRyaWVzOiB0aGlzLmVudHJpZXMuYmluZEdyb3VwLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoZWNrIHdoZXRoZXIgd2Ugc2hvdWxkIHVwZGF0ZSAod3JpdGUpIG91ciB7QGxpbmsgR1BVQnVmZmVyfSBvciBub3QuXHJcbiAgICovXHJcbiAgdXBkYXRlQnVmZmVyQmluZGluZ3MoKSB7XHJcbiAgICB0aGlzLmJ1ZmZlckJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmcsIGluZGV4KSA9PiB7XHJcbiAgICAgIC8vIHVwZGF0ZSBiaW5kaW5nIGVsZW1lbnRzXHJcbiAgICAgIGJpbmRpbmcudXBkYXRlKClcclxuXHJcbiAgICAgIC8vIG5vdyB3cml0ZSB0byB0aGUgR1BVQnVmZmVyIGlmIG5lZWRlZFxyXG4gICAgICBpZiAoYmluZGluZy5zaG91bGRVcGRhdGUpIHtcclxuICAgICAgICAvLyBidWZmZXJPZmZzZXQgaXMgYWx3YXlzIGVxdWFscyB0byAwIGluIG91ciBjYXNlXHJcbiAgICAgICAgaWYgKCFiaW5kaW5nLnVzZVN0cnVjdCAmJiBiaW5kaW5nLmJ1ZmZlckVsZW1lbnRzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgICAgIC8vIHdlJ3JlIGluIGEgbm9uIHN0cnVjdCBidWZmZXIgYmluZGluZyB3aXRoIG11bHRpcGxlIGVudHJpZXNcclxuICAgICAgICAgIC8vIHRoYXQgc2hvdWxkIG5vdCBoYXBwZW4gYnV0IHRoYXQgd2F5IHdlJ3JlIGNvdmVyZWRcclxuICAgICAgICAgIHRoaXMucmVuZGVyZXIucXVldWVXcml0ZUJ1ZmZlcihiaW5kaW5nLmJ1ZmZlciwgMCwgYmluZGluZy5idWZmZXJFbGVtZW50c1tpbmRleF0udmlldylcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5xdWV1ZVdyaXRlQnVmZmVyKGJpbmRpbmcuYnVmZmVyLCAwLCBiaW5kaW5nLmFycmF5QnVmZmVyKVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gcmVzZXQgdXBkYXRlIGZsYWdcclxuICAgICAgYmluZGluZy5zaG91bGRVcGRhdGUgPSBmYWxzZVxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSB0aGUge0BsaW5rIEJpbmRHcm91cH0sIHdoaWNoIG1lYW5zIHVwZGF0ZSBpdHMge0BsaW5rIEJpbmRHcm91cCNidWZmZXJCaW5kaW5ncyB8IGJ1ZmZlciBiaW5kaW5nc30gYW5kIHtAbGluayBCaW5kR3JvdXAjcmVzZXRCaW5kR3JvdXAgfCByZXNldCBpdH0gaWYgbmVlZGVkLlxyXG4gICAqIENhbGxlZCBhdCBlYWNoIHJlbmRlciBmcm9tIHRoZSBwYXJlbnRNZXNoIHtAbGluayBjb3JlL21hdGVyaWFscy9NYXRlcmlhbC5NYXRlcmlhbCB8IG1hdGVyaWFsfVxyXG4gICAqL1xyXG4gIHVwZGF0ZSgpIHtcclxuICAgIHRoaXMudXBkYXRlQnVmZmVyQmluZGluZ3MoKVxyXG5cclxuICAgIGNvbnN0IG5lZWRCaW5kR3JvdXBSZXNldCA9IHRoaXMuYmluZGluZ3Muc29tZSgoYmluZGluZykgPT4gYmluZGluZy5zaG91bGRSZXNldEJpbmRHcm91cClcclxuICAgIGNvbnN0IG5lZWRCaW5kR3JvdXBMYXlvdXRSZXNldCA9IHRoaXMuYmluZGluZ3Muc29tZSgoYmluZGluZykgPT4gYmluZGluZy5zaG91bGRSZXNldEJpbmRHcm91cExheW91dClcclxuXHJcbiAgICAvLyBzaW5jZSBvdGhlciBiaW5kIGdyb3VwcyBtaWdodCBiZSB1c2luZyB0aGF0IGJpbmRpbmdcclxuICAgIC8vIHdhaXQgZm9yIHRoZSBlbmQgb2YgdGhlIHJlbmRlciBsb29wIHRvIHJlc2V0IHRoZSBiaW5kaW5ncyBmbGFnc1xyXG4gICAgaWYgKG5lZWRCaW5kR3JvdXBSZXNldCB8fCBuZWVkQmluZEdyb3VwTGF5b3V0UmVzZXQpIHtcclxuICAgICAgdGhpcy5yZW5kZXJlci5vbkFmdGVyQ29tbWFuZEVuY29kZXJTdWJtaXNzaW9uLmFkZChcclxuICAgICAgICAoKSA9PiB7XHJcbiAgICAgICAgICB0aGlzLmJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmcpID0+IHtcclxuICAgICAgICAgICAgYmluZGluZy5zaG91bGRSZXNldEJpbmRHcm91cCA9IGZhbHNlXHJcbiAgICAgICAgICAgIGJpbmRpbmcuc2hvdWxkUmVzZXRCaW5kR3JvdXBMYXlvdXQgPSBmYWxzZVxyXG4gICAgICAgICAgfSlcclxuICAgICAgICB9LFxyXG4gICAgICAgIHsgb25jZTogdHJ1ZSB9XHJcbiAgICAgIClcclxuICAgIH1cclxuXHJcbiAgICBpZiAobmVlZEJpbmRHcm91cExheW91dFJlc2V0KSB7XHJcbiAgICAgIHRoaXMucmVzZXRCaW5kR3JvdXBMYXlvdXQoKVxyXG4gICAgICAvLyBiaW5kIGdyb3VwIGxheW91dCBoYXMgY2hhbmdlZCwgd2UgaGF2ZSB0byByZWNyZWF0ZSB0aGUgcGlwZWxpbmVcclxuICAgICAgdGhpcy5uZWVkc1BpcGVsaW5lRmx1c2ggPSB0cnVlXHJcbiAgICB9XHJcblxyXG4gICAgaWYgKG5lZWRCaW5kR3JvdXBSZXNldCkge1xyXG4gICAgICB0aGlzLnJlc2V0QmluZEdyb3VwKClcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENsb25lcyBhIHtAbGluayBCaW5kR3JvdXB9IGZyb20gYSBsaXN0IG9mIHtAbGluayBiaW5kaW5nc31cclxuICAgKiBVc2VmdWwgdG8gY3JlYXRlIGEgbmV3IGJpbmQgZ3JvdXAgd2l0aCBhbHJlYWR5IGNyZWF0ZWQgYnVmZmVycywgYnV0IHN3YXBwZWRcclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHBhcmFtZXRlcnMgdG8gdXNlIGZvciBjbG9uaW5nXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMuYmluZGluZ3MgLSBvdXIgaW5wdXQge0BsaW5rIGJpbmRpbmdzfVxyXG4gICAqIEBwYXJhbSBbcGFyYW1ldGVycy5rZWVwTGF5b3V0PWZhbHNlXSAtIHdoZXRoZXIgd2Ugc2hvdWxkIGtlZXAgb3JpZ2luYWwge0BsaW5rIGJpbmRHcm91cExheW91dH0gb3Igbm90XHJcbiAgICogQHJldHVybnMgLSB0aGUgY2xvbmVkIHtAbGluayBCaW5kR3JvdXB9XHJcbiAgICovXHJcbiAgY2xvbmUoe1xyXG4gICAgYmluZGluZ3MgPSBbXSxcclxuICAgIGtlZXBMYXlvdXQgPSBmYWxzZSxcclxuICB9OiB7XHJcbiAgICBiaW5kaW5ncz86IEJpbmRHcm91cEJpbmRpbmdFbGVtZW50W11cclxuICAgIGtlZXBMYXlvdXQ/OiBib29sZWFuXHJcbiAgfSA9IHt9KTogQWxsb3dlZEJpbmRHcm91cHMge1xyXG4gICAgY29uc3QgcGFyYW1zID0geyAuLi50aGlzLm9wdGlvbnMgfVxyXG4gICAgcGFyYW1zLmxhYmVsICs9ICcgKGNvcHkpJ1xyXG5cclxuICAgIGNvbnN0IGJpbmRHcm91cENvcHkgPSBuZXcgKHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIEJpbmRHcm91cCkodGhpcy5yZW5kZXJlciwge1xyXG4gICAgICBsYWJlbDogcGFyYW1zLmxhYmVsLFxyXG4gICAgfSlcclxuXHJcbiAgICBiaW5kR3JvdXBDb3B5LnNldEluZGV4KHRoaXMuaW5kZXgpXHJcbiAgICBiaW5kR3JvdXBDb3B5Lm9wdGlvbnMgPSBwYXJhbXNcclxuXHJcbiAgICBjb25zdCBiaW5kaW5nc1JlZiA9IGJpbmRpbmdzLmxlbmd0aCA/IGJpbmRpbmdzIDogdGhpcy5iaW5kaW5nc1xyXG5cclxuICAgIGJpbmRpbmdzUmVmLmZvckVhY2goKGJpbmRpbmcsIGluZGV4KSA9PiB7XHJcbiAgICAgIGJpbmRHcm91cENvcHkuYWRkQmluZGluZyhiaW5kaW5nKVxyXG5cclxuICAgICAgLy8gaWYgaXQncyBhIGJ1ZmZlciBiaW5kaW5nIHdpdGhvdXQgYSBHUFVCdWZmZXIsIGNyZWF0ZSBpdCBub3dcclxuICAgICAgaWYgKCdidWZmZXInIGluIGJpbmRpbmcgJiYgIWJpbmRpbmcuYnVmZmVyKSB7XHJcbiAgICAgICAgYmluZEdyb3VwQ29weS5jcmVhdGVCaW5kaW5nQnVmZmVyKGJpbmRpbmcpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIC8vIGlmIHdlIHNob3VsZCBjcmVhdGUgYSBuZXcgYmluZCBncm91cCBsYXlvdXQsIGZpbGwgaXRcclxuICAgICAgaWYgKCFrZWVwTGF5b3V0KSB7XHJcbiAgICAgICAgYmluZEdyb3VwQ29weS5lbnRyaWVzLmJpbmRHcm91cExheW91dC5wdXNoKHtcclxuICAgICAgICAgIGJpbmRpbmc6IGJpbmRHcm91cENvcHkuZW50cmllcy5iaW5kR3JvdXBMYXlvdXQubGVuZ3RoLFxyXG4gICAgICAgICAgLi4uYmluZGluZy5yZXNvdXJjZUxheW91dCxcclxuICAgICAgICAgIHZpc2liaWxpdHk6IGJpbmRpbmcudmlzaWJpbGl0eSxcclxuICAgICAgICB9KVxyXG4gICAgICB9XHJcblxyXG4gICAgICBiaW5kR3JvdXBDb3B5LmVudHJpZXMuYmluZEdyb3VwLnB1c2goe1xyXG4gICAgICAgIGJpbmRpbmc6IGJpbmRHcm91cENvcHkuZW50cmllcy5iaW5kR3JvdXAubGVuZ3RoLFxyXG4gICAgICAgIHJlc291cmNlOiBiaW5kaW5nLnJlc291cmNlLFxyXG4gICAgICB9IGFzIEdQVUJpbmRHcm91cEVudHJ5KVxyXG4gICAgfSlcclxuXHJcbiAgICAvLyBpZiB3ZSBzaG91bGQgY29weSB0aGUgZ2l2ZW4gYmluZCBncm91cCBsYXlvdXRcclxuICAgIGlmIChrZWVwTGF5b3V0KSB7XHJcbiAgICAgIGJpbmRHcm91cENvcHkuZW50cmllcy5iaW5kR3JvdXBMYXlvdXQgPSBbLi4udGhpcy5lbnRyaWVzLmJpbmRHcm91cExheW91dF1cclxuICAgIH1cclxuXHJcbiAgICBiaW5kR3JvdXBDb3B5LnNldEJpbmRHcm91cExheW91dCgpXHJcbiAgICBiaW5kR3JvdXBDb3B5LnNldEJpbmRHcm91cCgpXHJcblxyXG4gICAgcmV0dXJuIGJpbmRHcm91cENvcHlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERlc3Ryb3kgb3VyIHtAbGluayBCaW5kR3JvdXB9XHJcbiAgICogTW9zdCBpbXBvcnRhbnQgaXMgdG8gZGVzdHJveSB0aGUgR1BVQnVmZmVycyB0byBmcmVlIHRoZSBtZW1vcnlcclxuICAgKi9cclxuICBkZXN0cm95KCkge1xyXG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVCaW5kR3JvdXAodGhpcylcclxuXHJcbiAgICB0aGlzLmJ1ZmZlckJpbmRpbmdzLmZvckVhY2goKGJpbmRpbmcpID0+IHtcclxuICAgICAgaWYgKCdidWZmZXInIGluIGJpbmRpbmcpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUJ1ZmZlcihiaW5kaW5nLmJ1ZmZlcilcclxuICAgICAgICBiaW5kaW5nLmJ1ZmZlcj8uZGVzdHJveSgpXHJcbiAgICAgICAgYmluZGluZy5idWZmZXIgPSBudWxsXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICgncmVzdWx0QnVmZmVyJyBpbiBiaW5kaW5nKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVCdWZmZXIoYmluZGluZy5yZXN1bHRCdWZmZXIpXHJcbiAgICAgICAgYmluZGluZy5yZXN1bHRCdWZmZXI/LmRlc3Ryb3koKVxyXG4gICAgICAgIGJpbmRpbmcucmVzdWx0QnVmZmVyID0gbnVsbFxyXG4gICAgICB9XHJcbiAgICB9KVxyXG5cclxuICAgIHRoaXMuYmluZGluZ3MgPSBbXVxyXG4gICAgdGhpcy5iaW5kR3JvdXBMYXlvdXQgPSBudWxsXHJcbiAgICB0aGlzLmJpbmRHcm91cCA9IG51bGxcclxuICAgIHRoaXMucmVzZXRFbnRyaWVzKClcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmluZGluZywgQmluZGluZ01lbW9yeUFjY2Vzc1R5cGUsIEJpbmRpbmdQYXJhbXMsIEJpbmRpbmdUeXBlIH0gZnJvbSAnLi9CaW5kaW5nJ1xuaW1wb3J0IHsgZ2V0QmluZEdyb3VwTGF5b3V0VGV4dHVyZUJpbmRpbmdUeXBlLCBnZXRUZXh0dXJlQmluZGluZ1dHU0xWYXJUeXBlIH0gZnJvbSAnLi91dGlscydcblxuLyoqIERlZmluZXMgYSB7QGxpbmsgVGV4dHVyZUJpbmRpbmd9IHtAbGluayBUZXh0dXJlQmluZGluZyNyZXNvdXJjZSB8IHJlc291cmNlfSAqL1xuZXhwb3J0IHR5cGUgVGV4dHVyZUJpbmRpbmdSZXNvdXJjZSA9IEdQVVRleHR1cmUgfCBHUFVFeHRlcm5hbFRleHR1cmUgfCBudWxsXG5cbi8qKlxuICogQW4gb2JqZWN0IGRlZmluaW5nIGFsbCBwb3NzaWJsZSB7QGxpbmsgVGV4dHVyZUJpbmRpbmd9IGNsYXNzIGluc3RhbmNpbmcgcGFyYW1ldGVyc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFRleHR1cmVCaW5kaW5nUGFyYW1zIGV4dGVuZHMgQmluZGluZ1BhcmFtcyB7XG4gIC8qKiB7QGxpbmsgVGV4dHVyZUJpbmRpbmd9IHtAbGluayBUZXh0dXJlQmluZGluZyNyZXNvdXJjZSB8IHJlc291cmNlfSAqL1xuICB0ZXh0dXJlOiBUZXh0dXJlQmluZGluZ1Jlc291cmNlXG4gIC8qKiBUaGUge0BsaW5rIEdQVVRleHR1cmUgfCB0ZXh0dXJlfSBmb3JtYXQgdG8gdXNlICovXG4gIGZvcm1hdD86IEdQVVRleHR1cmVGb3JtYXRcbiAgLyoqIFRoZSBzdG9yYWdlIHtAbGluayBHUFVUZXh0dXJlIHwgdGV4dHVyZX0gYmluZGluZyBtZW1vcnkgYWNjZXNzIHR5cGVzIChyZWFkIG9ubHksIHdyaXRlIG9ubHkgb3IgcmVhZC93cml0ZSkgKi9cbiAgYWNjZXNzPzogQmluZGluZ01lbW9yeUFjY2Vzc1R5cGVcbiAgLyoqIFRoZSB7QGxpbmsgR1BVVGV4dHVyZSB8IHRleHR1cmV9IHZpZXcgZGltZW5zaW9uIHRvIHVzZSAqL1xuICB2aWV3RGltZW5zaW9uPzogR1BVVGV4dHVyZVZpZXdEaW1lbnNpb25cbiAgLyoqIFdoZXRoZSB0aGUge0BsaW5rIEdQVVRleHR1cmUgfCB0ZXh0dXJlfSBpcyBhIG11bHRpc2FtcGxlZCB0ZXh0dXJlLiBNYWlubHkgdXNlZCBpbnRlcm5hbGx5IGJ5IGRlcHRoIHRleHR1cmVzIGlmIG5lZWRlZC4gKi9cbiAgbXVsdGlzYW1wbGVkPzogYm9vbGVhblxufVxuXG4vKipcbiAqIFVzZWQgdG8gaGFuZGxlIHtAbGluayBHUFVUZXh0dXJlfSBhbmQge0BsaW5rIEdQVUV4dGVybmFsVGV4dHVyZX0gYmluZGluZ3MuXG4gKlxuICogUHJvdmlkZSBib3RoIHtAbGluayBUZXh0dXJlQmluZGluZyNyZXNvdXJjZUxheW91dCB8IHJlc291cmNlTGF5b3V0fSBhbmQge0BsaW5rIFRleHR1cmVCaW5kaW5nI3Jlc291cmNlIHwgcmVzb3VyY2V9IHRvIHRoZSB7QGxpbmsgR1BVQmluZEdyb3VwTGF5b3V0fSBhbmQge0BsaW5rIEdQVUJpbmRHcm91cH0uPGJyPlxuICogQWxzbyBjcmVhdGUgdGhlIGFwcHJvcHJpYXRlIFdHU0wgY29kZSBzbmlwcGV0IHRvIGFkZCB0byB0aGUgc2hhZGVycy5cbiAqL1xuZXhwb3J0IGNsYXNzIFRleHR1cmVCaW5kaW5nIGV4dGVuZHMgQmluZGluZyB7XG4gIC8qKiBPdXIge0BsaW5rIFRleHR1cmVCaW5kaW5nfSByZXNvdXJjZSwgaS5lLiBhIHtAbGluayBHUFVUZXh0dXJlfSBvciB7QGxpbmsgR1BVRXh0ZXJuYWxUZXh0dXJlfSAqL1xuICB0ZXh0dXJlOiBUZXh0dXJlQmluZGluZ1Jlc291cmNlXG4gIC8qKiBBbiBhcnJheSBvZiBzdHJpbmdzIHRvIGFwcGVuZCB0byBvdXIgc2hhZGVycyBjb2RlIGRlY2xhcmluZyBhbGwgdGhlIFdHU0wgdmFyaWFibGVzIHJlcHJlc2VudGluZyB0aGlzIHtAbGluayBUZXh0dXJlQmluZGluZ30gKi9cbiAgd2dzbEdyb3VwRnJhZ21lbnQ6IHN0cmluZ1tdXG4gIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFRleHR1cmVCaW5kaW5nfSAqL1xuICBvcHRpb25zOiBUZXh0dXJlQmluZGluZ1BhcmFtc1xuXG4gIC8qKlxuICAgKiBUZXh0dXJlQmluZGluZyBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBUZXh0dXJlQmluZGluZ1BhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIG91ciB7QGxpbmsgVGV4dHVyZUJpbmRpbmd9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbGFiZWwgPSAnVGV4dHVyZScsXG4gICAgbmFtZSA9ICd0ZXh0dXJlJyxcbiAgICBiaW5kaW5nVHlwZSxcbiAgICB2aXNpYmlsaXR5LFxuICAgIHRleHR1cmUsXG4gICAgZm9ybWF0ID0gJ3JnYmE4dW5vcm0nLFxuICAgIGFjY2VzcyA9ICd3cml0ZScsXG4gICAgdmlld0RpbWVuc2lvbiA9ICcyZCcsXG4gICAgbXVsdGlzYW1wbGVkID0gZmFsc2UsXG4gIH06IFRleHR1cmVCaW5kaW5nUGFyYW1zKSB7XG4gICAgYmluZGluZ1R5cGUgPSBiaW5kaW5nVHlwZSA/PyAndGV4dHVyZSdcblxuICAgIGlmIChiaW5kaW5nVHlwZSA9PT0gJ3N0b3JhZ2VUZXh0dXJlJykge1xuICAgICAgdmlzaWJpbGl0eSA9ICdjb21wdXRlJ1xuICAgIH1cblxuICAgIHN1cGVyKHsgbGFiZWwsIG5hbWUsIGJpbmRpbmdUeXBlLCB2aXNpYmlsaXR5IH0pXG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICB0ZXh0dXJlLFxuICAgICAgZm9ybWF0LFxuICAgICAgYWNjZXNzLFxuICAgICAgdmlld0RpbWVuc2lvbixcbiAgICAgIG11bHRpc2FtcGxlZCxcbiAgICB9XG5cbiAgICB0aGlzLnJlc291cmNlID0gdGV4dHVyZSAvLyBzaG91bGQgYmUgYSB0ZXh0dXJlIG9yIGFuIGV4dGVybmFsIHRleHR1cmVcblxuICAgIHRoaXMuc2V0V0dTTEZyYWdtZW50KClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYmluZCBncm91cCBsYXlvdXQgZW50cnkgcmVzb3VyY2UsIGVpdGhlciBmb3Ige0BsaW5rIEdQVUJpbmRHcm91cExheW91dEVudHJ5I3RleHR1cmUgfCB0ZXh0dXJlfSBvciB7QGxpbmsgR1BVQmluZEdyb3VwTGF5b3V0RW50cnkjZXh0ZXJuYWxUZXh0dXJlIHwgZXh0ZXJuYWwgdGV4dHVyZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgcmVzb3VyY2VMYXlvdXQoKTpcbiAgICB8IEdQVVRleHR1cmVCaW5kaW5nTGF5b3V0XG4gICAgfCBHUFVFeHRlcm5hbFRleHR1cmVCaW5kaW5nTGF5b3V0XG4gICAgfCBHUFVTdG9yYWdlVGV4dHVyZUJpbmRpbmdMYXlvdXRcbiAgICB8IG51bGwge1xuICAgIHJldHVybiBnZXRCaW5kR3JvdXBMYXlvdXRUZXh0dXJlQmluZGluZ1R5cGUodGhpcylcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHtAbGluayBHUFVCaW5kR3JvdXBFbnRyeSNyZXNvdXJjZSB8IGJpbmQgZ3JvdXAgcmVzb3VyY2V9XG4gICAqL1xuICBnZXQgcmVzb3VyY2UoKTogR1BVRXh0ZXJuYWxUZXh0dXJlIHwgR1BVVGV4dHVyZVZpZXcgfCBudWxsIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0dXJlIGluc3RhbmNlb2YgR1BVVGV4dHVyZVxuICAgICAgPyB0aGlzLnRleHR1cmUuY3JlYXRlVmlldyh7IGxhYmVsOiB0aGlzLm9wdGlvbnMubGFiZWwgKyAnIHZpZXcnIH0pXG4gICAgICA6IHRoaXMudGV4dHVyZSBpbnN0YW5jZW9mIEdQVUV4dGVybmFsVGV4dHVyZVxuICAgICAgPyB0aGlzLnRleHR1cmVcbiAgICAgIDogbnVsbFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUge0BsaW5rIEdQVUJpbmRHcm91cEVudHJ5I3Jlc291cmNlIHwgYmluZCBncm91cCByZXNvdXJjZX1cbiAgICogQHBhcmFtIHZhbHVlIC0gbmV3IGJpbmQgZ3JvdXAgcmVzb3VyY2VcbiAgICovXG4gIHNldCByZXNvdXJjZSh2YWx1ZTogVGV4dHVyZUJpbmRpbmdSZXNvdXJjZSkge1xuICAgIC8vIHJlc291cmNlIGNoYW5nZWQsIHVwZGF0ZSBiaW5kIGdyb3VwIVxuICAgIGlmICh2YWx1ZSB8fCB0aGlzLnRleHR1cmUpIHRoaXMuc2hvdWxkUmVzZXRCaW5kR3JvdXAgPSB0cnVlXG4gICAgdGhpcy50ZXh0dXJlID0gdmFsdWVcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3IgdXBkYXRlIG91ciB7QGxpbmsgQmluZGluZyNiaW5kaW5nVHlwZSB8IGJpbmRpbmdUeXBlfSBhbmQgb3VyIFdHU0wgY29kZSBzbmlwcGV0XG4gICAqIEBwYXJhbSBiaW5kaW5nVHlwZSAtIHRoZSBuZXcge0BsaW5rIEJpbmRpbmcjYmluZGluZ1R5cGUgfCBiaW5kaW5nIHR5cGV9XG4gICAqL1xuICBzZXRCaW5kaW5nVHlwZShiaW5kaW5nVHlwZTogQmluZGluZ1R5cGUpIHtcbiAgICBpZiAoYmluZGluZ1R5cGUgIT09IHRoaXMuYmluZGluZ1R5cGUpIHtcbiAgICAgIC8vIGJpbmRpbmcgdHlwZSBoYXMgY2hhbmdlZCFcbiAgICAgIGlmIChiaW5kaW5nVHlwZSkgdGhpcy5zaG91bGRSZXNldEJpbmRHcm91cExheW91dCA9IHRydWVcblxuICAgICAgdGhpcy5iaW5kaW5nVHlwZSA9IGJpbmRpbmdUeXBlXG4gICAgICB0aGlzLnNldFdHU0xGcmFnbWVudCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY29ycmVjdCBXR1NMIGNvZGUgc25pcHBldC5cbiAgICovXG4gIHNldFdHU0xGcmFnbWVudCgpIHtcbiAgICB0aGlzLndnc2xHcm91cEZyYWdtZW50ID0gW2Ake2dldFRleHR1cmVCaW5kaW5nV0dTTFZhclR5cGUodGhpcyl9YF1cbiAgfVxufVxuIiwiaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjMydcbmltcG9ydCB7IFF1YXQgfSBmcm9tICcuLi8uLi9tYXRoL1F1YXQnXG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXQ0J1xuXG5sZXQgb2JqZWN0SW5kZXggPSAwXG5cbi8qKiBEZWZpbmVzIGFsbCBraW5kIG9mIHBvc3NpYmxlIHtAbGluayBPYmplY3QzRH0gbWF0cml4IHR5cGVzICovXG5leHBvcnQgdHlwZSBPYmplY3QzRE1hdHJpY2VzVHlwZSA9ICdtb2RlbCcgfCAnd29ybGQnXG5cbi8qKlxuICogRGVmaW5lcyBhbiB7QGxpbmsgT2JqZWN0M0R9IG1hdHJpeCBvYmplY3RcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBPYmplY3QzRFRyYW5zZm9ybU1hdHJpeCB7XG4gIC8qKiBUaGUge0BsaW5rIE1hdDQgfCBtYXRyaXh9IHVzZWQgKi9cbiAgbWF0cml4OiBNYXQ0XG4gIC8qKiBXaGV0aGVyIHdlIHNob3VsZCB1cGRhdGUgdGhlIHtAbGluayBNYXQ0IHwgbWF0cml4fSAqL1xuICBzaG91bGRVcGRhdGU6IGJvb2xlYW5cbiAgLyoqIEZ1bmN0aW9uIHRvIHVwZGF0ZSBvdXIge0BsaW5rIE1hdDQgfCBtYXRyaXh9ICovXG4gIG9uVXBkYXRlOiAoKSA9PiB2b2lkXG59XG5cbi8qKiBEZWZpbmVzIGFsbCBwb3NzaWJsZSB7QGxpbmsgT2JqZWN0M0RUcmFuc2Zvcm1NYXRyaXggfCBtYXRyaXggb2JqZWN0fSB1c2VkIGJ5IG91ciB7QGxpbmsgT2JqZWN0M0R9ICovXG5leHBvcnQgdHlwZSBPYmplY3QzRE1hdHJpY2VzID0gUmVjb3JkPE9iamVjdDNETWF0cmljZXNUeXBlLCBPYmplY3QzRFRyYW5zZm9ybU1hdHJpeD5cblxuLyoqXG4gKiBEZWZpbmVzIGFsbCBuZWNlc3Nhcnkge0BsaW5rIFZlYzMgfCB2ZWN0b3JzfS97QGxpbmsgUXVhdCB8IHF1YXRlcm5pb25zfSB0byBjb21wdXRlIGEgM0Qge0BsaW5rIE1hdDQgfCBtb2RlbCBtYXRyaXh9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgT2JqZWN0M0RUcmFuc2Zvcm1zIHtcbiAgLyoqIFRyYW5zZm9ybWF0aW9uIG9yaWdpbiBvYmplY3QgKi9cbiAgb3JpZ2luOiB7XG4gICAgLyoqIFRyYW5zZm9ybWF0aW9uIG9yaWdpbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gcmVsYXRpdmUgdG8gdGhlIHtAbGluayBPYmplY3QzRH0gKi9cbiAgICBtb2RlbDogVmVjM1xuICB9XG4gIC8qKiBNb2RlbCB7QGxpbmsgUXVhdCB8IHF1YXRlcm5pb259IGRlZmluaW5nIGl0cyByb3RhdGlvbiBpbiAzRCBzcGFjZSAqL1xuICBxdWF0ZXJuaW9uOiBRdWF0XG4gIC8qKiBNb2RlbCByb3RhdGlvbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gdXNlZCB0byBjb21wdXRlIGl0cyB7QGxpbmsgUXVhdCB8IHF1YXRlcm5pb259ICovXG4gIHJvdGF0aW9uOiBWZWMzXG4gIC8qKiBQb3NpdGlvbiBvYmplY3QgKi9cbiAgcG9zaXRpb246IHtcbiAgICAvKiogUG9zaXRpb24ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHJlbGF0aXZlIHRvIHRoZSAzRCB3b3JsZCAqL1xuICAgIHdvcmxkOiBWZWMzXG4gIH1cbiAgLyoqIE1vZGVsIDNEIHNjYWxlIHtAbGluayBWZWMzIHwgdmVjdG9yfSAqL1xuICBzY2FsZTogVmVjM1xufVxuXG4vKipcbiAqIFVzZWQgdG8gY3JlYXRlIGFuIG9iamVjdCB3aXRoIHRyYW5zZm9ybWF0aW9uIHByb3BlcnRpZXMgc3VjaCBhcyBwb3NpdGlvbiwgc2NhbGUsIHJvdGF0aW9uIGFuZCB0cmFuc2Zvcm0gb3JpZ2luIHtAbGluayBWZWMzIHwgdmVjdG9yc30gYW5kIGEge0BsaW5rIFF1YXQgfCBxdWF0ZXJuaW9ufSBpbiBvcmRlciB0byBjb21wdXRlIHRoZSB7QGxpbmsgT2JqZWN0M0QjbW9kZWxNYXRyaXggfCBtb2RlbCBtYXRyaXh9IGFuZCB7QGxpbmsgT2JqZWN0M0Qjd29ybGRNYXRyaXggfCB3b3JsZCBtYXRyaXh9LlxuICpcbiAqIElmIGFuIHtAbGluayBPYmplY3QzRH0gZG9lcyBub3QgaGF2ZSBhbnkge0BsaW5rIE9iamVjdDNEI3BhcmVudCB8IHBhcmVudH0sIHRoZW4gaXRzIHtAbGluayBPYmplY3QzRCNtb2RlbE1hdHJpeCB8IG1vZGVsIG1hdHJpeH0gYW5kIHtAbGluayBPYmplY3QzRCN3b3JsZE1hdHJpeCB8IHdvcmxkIG1hdHJpeH0gYXJlIHRoZSBzYW1lLlxuICpcbiAqIFRoZSB0cmFuc2Zvcm1hdGlvbnMge0BsaW5rIFZlYzMgfCB2ZWN0b3JzfSBhcmUgcmVhY3RpdmUgdG8gY2hhbmdlcywgd2hpY2ggbWVhbiB0aGF0IHVwZGF0aW5nIG9uZSBvZiB0aGVpciBjb21wb25lbnRzIHdpbGwgYXV0b21hdGljYWxseSB1cGRhdGUgdGhlIHtAbGluayBPYmplY3QzRCNtb2RlbE1hdHJpeCB8IG1vZGVsIG1hdHJpeH0gYW5kIHtAbGluayBPYmplY3QzRCN3b3JsZE1hdHJpeCB8IHdvcmxkIG1hdHJpeH0uXG4gKi9cbmV4cG9ydCBjbGFzcyBPYmplY3QzRCB7XG4gIC8qKiB7QGxpbmsgT2JqZWN0M0RUcmFuc2Zvcm1zIHwgVHJhbnNmb3JtYXRpb24gb2JqZWN0fSBvZiB0aGUge0BsaW5rIE9iamVjdDNEfSAqL1xuICB0cmFuc2Zvcm1zOiBPYmplY3QzRFRyYW5zZm9ybXNcbiAgLyoqIHtAbGluayBPYmplY3QzRE1hdHJpY2VzIHwgTWF0cmljZXMgb2JqZWN0fSBvZiB0aGUge0BsaW5rIE9iamVjdDNEfSAqL1xuICBtYXRyaWNlczogT2JqZWN0M0RNYXRyaWNlc1xuXG4gIC8qKiBQYXJlbnQge0BsaW5rIE9iamVjdDNEfSBpbiB0aGUgc2NlbmUgZ3JhcGgsIHVzZWQgdG8gY29tcHV0ZSB0aGUge0BsaW5rIHdvcmxkTWF0cml4IHwgd29ybGQgbWF0cml4fSAqL1xuICBwcml2YXRlIF9wYXJlbnQ6IG51bGwgfCBPYmplY3QzRFxuICAvKiogQ2hpbGRyZW4ge0BsaW5rIE9iamVjdDNEfSBpbiB0aGUgc2NlbmUgZ3JhcGgsIHVzZWQgdG8gY29tcHV0ZSB0aGVpciBvd24ge0BsaW5rIHdvcmxkTWF0cml4IHwgd29ybGQgbWF0cml4fSAqL1xuICBjaGlsZHJlbjogT2JqZWN0M0RbXVxuXG4gIC8qKiBJbmRleCAob3JkZXIgb2YgY3JlYXRpb24pIG9mIHRoaXMge0BsaW5rIE9iamVjdDNEfS4gVXNlZCBpbiB0aGUge0BsaW5rIHBhcmVudH0gLyB7QGxpbmsgY2hpbGRyZW59IHJlbGF0aW9uLiAqL1xuICBvYmplY3QzREluZGV4OiBudW1iZXJcblxuICAvKipcbiAgICogT2JqZWN0M0QgY29uc3RydWN0b3JcbiAgICovXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMucGFyZW50ID0gbnVsbFxuICAgIHRoaXMuY2hpbGRyZW4gPSBbXVxuXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMgYXMgT2JqZWN0M0QsICdvYmplY3QzREluZGV4JywgeyB2YWx1ZTogb2JqZWN0SW5kZXgrKyB9KVxuXG4gICAgdGhpcy5zZXRNYXRyaWNlcygpXG4gICAgdGhpcy5zZXRUcmFuc2Zvcm1zKClcbiAgfVxuXG4gIC8qIFBBUkVOVCAqL1xuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHBhcmVudCBvZiB0aGlzIHtAbGluayBPYmplY3QzRH0gaWYgYW55XG4gICAqL1xuICBnZXQgcGFyZW50KCk6IE9iamVjdDNEIHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgcGFyZW50IG9mIHRoaXMge0BsaW5rIE9iamVjdDNEfVxuICAgKiBAcGFyYW0gdmFsdWUgLSBuZXcgcGFyZW50IHRvIHNldCwgY291bGQgYmUgYW4ge0BsaW5rIE9iamVjdDNEfSBvciBudWxsXG4gICAqL1xuICBzZXQgcGFyZW50KHZhbHVlOiBPYmplY3QzRCB8IG51bGwpIHtcbiAgICBpZiAodGhpcy5wYXJlbnQpIHtcbiAgICAgIHRoaXMucGFyZW50LmNoaWxkcmVuID0gdGhpcy5wYXJlbnQuY2hpbGRyZW4uZmlsdGVyKChjaGlsZCkgPT4gY2hpbGQub2JqZWN0M0RJbmRleCAhPT0gdGhpcy5vYmplY3QzREluZGV4KVxuICAgIH1cbiAgICB0aGlzLl9wYXJlbnQgPSB2YWx1ZVxuICAgIHRoaXMuX3BhcmVudD8uY2hpbGRyZW4ucHVzaCh0aGlzKVxuICB9XG5cbiAgLyogVFJBTlNGT1JNUyAqL1xuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHRyYW5zZm9ybXMgcHJvcGVydGllcyBhbmQge0BsaW5rIFZlYzMjb25DaGFuZ2UgfCB2ZWN0b3JzIG9uQ2hhbmdlfSBjYWxsYmFja3NcbiAgICovXG4gIHNldFRyYW5zZm9ybXMoKSB7XG4gICAgdGhpcy50cmFuc2Zvcm1zID0ge1xuICAgICAgb3JpZ2luOiB7XG4gICAgICAgIG1vZGVsOiBuZXcgVmVjMygpLFxuICAgICAgfSxcbiAgICAgIHF1YXRlcm5pb246IG5ldyBRdWF0KCksXG4gICAgICByb3RhdGlvbjogbmV3IFZlYzMoKSxcbiAgICAgIHBvc2l0aW9uOiB7XG4gICAgICAgIHdvcmxkOiBuZXcgVmVjMygpLFxuICAgICAgfSxcbiAgICAgIHNjYWxlOiBuZXcgVmVjMygxKSxcbiAgICB9XG5cbiAgICB0aGlzLnJvdGF0aW9uLm9uQ2hhbmdlKCgpID0+IHRoaXMuYXBwbHlSb3RhdGlvbigpKVxuICAgIHRoaXMucG9zaXRpb24ub25DaGFuZ2UoKCkgPT4gdGhpcy5hcHBseVBvc2l0aW9uKCkpXG4gICAgdGhpcy5zY2FsZS5vbkNoYW5nZSgoKSA9PiB0aGlzLmFwcGx5U2NhbGUoKSlcbiAgICB0aGlzLnRyYW5zZm9ybU9yaWdpbi5vbkNoYW5nZSgoKSA9PiB0aGlzLmFwcGx5VHJhbnNmb3JtT3JpZ2luKCkpXG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciByb3RhdGlvbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn1cbiAgICovXG4gIGdldCByb3RhdGlvbigpOiBWZWMzIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1zLnJvdGF0aW9uXG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciByb3RhdGlvbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn1cbiAgICogQHBhcmFtIHZhbHVlIC0gbmV3IHJvdGF0aW9uIHtAbGluayBWZWMzIHwgdmVjdG9yfVxuICAgKi9cbiAgc2V0IHJvdGF0aW9uKHZhbHVlOiBWZWMzKSB7XG4gICAgdGhpcy50cmFuc2Zvcm1zLnJvdGF0aW9uID0gdmFsdWVcbiAgICB0aGlzLmFwcGx5Um90YXRpb24oKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvdXIge0BsaW5rIFF1YXQgfCBxdWF0ZXJuaW9ufVxuICAgKi9cbiAgZ2V0IHF1YXRlcm5pb24oKTogUXVhdCB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3Jtcy5xdWF0ZXJuaW9uXG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciB7QGxpbmsgUXVhdCB8IHF1YXRlcm5pb259XG4gICAqIEBwYXJhbSB2YWx1ZSAtIG5ldyB7QGxpbmsgUXVhdCB8IHF1YXRlcm5pb259XG4gICAqL1xuICBzZXQgcXVhdGVybmlvbih2YWx1ZTogUXVhdCkge1xuICAgIHRoaXMudHJhbnNmb3Jtcy5xdWF0ZXJuaW9uID0gdmFsdWVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3VyIHBvc2l0aW9uIHtAbGluayBWZWMzIHwgdmVjdG9yfVxuICAgKi9cbiAgZ2V0IHBvc2l0aW9uKCk6IFZlYzMge1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybXMucG9zaXRpb24ud29ybGRcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHBvc2l0aW9uIHtAbGluayBWZWMzIHwgdmVjdG9yfVxuICAgKiBAcGFyYW0gdmFsdWUgLSBuZXcgcG9zaXRpb24ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9XG4gICAqL1xuICBzZXQgcG9zaXRpb24odmFsdWU6IFZlYzMpIHtcbiAgICB0aGlzLnRyYW5zZm9ybXMucG9zaXRpb24ud29ybGQgPSB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvdXIgc2NhbGUge0BsaW5rIFZlYzMgfCB2ZWN0b3J9XG4gICAqL1xuICBnZXQgc2NhbGUoKTogVmVjMyB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3Jtcy5zY2FsZVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvdXIgc2NhbGUge0BsaW5rIFZlYzMgfCB2ZWN0b3J9XG4gICAqIEBwYXJhbSB2YWx1ZSAtIG5ldyBzY2FsZSB7QGxpbmsgVmVjMyB8IHZlY3Rvcn1cbiAgICovXG4gIHNldCBzY2FsZSh2YWx1ZTogVmVjMykge1xuICAgIC8vIGZvcmNlIHNjYWxlIHRvIDEgb24gWiBheGlzXG4gICAgdGhpcy50cmFuc2Zvcm1zLnNjYWxlID0gdmFsdWVcbiAgICB0aGlzLmFwcGx5U2NhbGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvdXIgdHJhbnNmb3JtIG9yaWdpbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn1cbiAgICovXG4gIGdldCB0cmFuc2Zvcm1PcmlnaW4oKTogVmVjMyB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3Jtcy5vcmlnaW4ubW9kZWxcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHRyYW5zZm9ybSBvcmlnaW4ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9XG4gICAqIEBwYXJhbSB2YWx1ZSAtIG5ldyB0cmFuc2Zvcm0gb3JpZ2luIHtAbGluayBWZWMzIHwgdmVjdG9yfVxuICAgKi9cbiAgc2V0IHRyYW5zZm9ybU9yaWdpbih2YWx1ZTogVmVjMykge1xuICAgIHRoaXMudHJhbnNmb3Jtcy5vcmlnaW4ubW9kZWwgPSB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEFwcGx5IG91ciByb3RhdGlvbiBhbmQgdGVsbCBvdXIge0BsaW5rIG1vZGVsTWF0cml4IHwgbW9kZWwgbWF0cml4fSB0byB1cGRhdGVcbiAgICovXG4gIGFwcGx5Um90YXRpb24oKSB7XG4gICAgdGhpcy5xdWF0ZXJuaW9uLnNldEZyb21WZWMzKHRoaXMucm90YXRpb24pXG5cbiAgICB0aGlzLnNob3VsZFVwZGF0ZU1vZGVsTWF0cml4KClcbiAgfVxuXG4gIC8qKlxuICAgKiBUZWxsIG91ciB7QGxpbmsgbW9kZWxNYXRyaXggfCBtb2RlbCBtYXRyaXh9IHRvIHVwZGF0ZVxuICAgKi9cbiAgYXBwbHlQb3NpdGlvbigpIHtcbiAgICB0aGlzLnNob3VsZFVwZGF0ZU1vZGVsTWF0cml4KClcbiAgfVxuXG4gIC8qKlxuICAgKiBUZWxsIG91ciB7QGxpbmsgbW9kZWxNYXRyaXggfCBtb2RlbCBtYXRyaXh9IHRvIHVwZGF0ZVxuICAgKi9cbiAgYXBwbHlTY2FsZSgpIHtcbiAgICB0aGlzLnNob3VsZFVwZGF0ZU1vZGVsTWF0cml4KClcbiAgfVxuXG4gIC8qKlxuICAgKiBUZWxsIG91ciB7QGxpbmsgbW9kZWxNYXRyaXggfCBtb2RlbCBtYXRyaXh9IHRvIHVwZGF0ZVxuICAgKi9cbiAgYXBwbHlUcmFuc2Zvcm1PcmlnaW4oKSB7XG4gICAgdGhpcy5zaG91bGRVcGRhdGVNb2RlbE1hdHJpeCgpXG4gIH1cblxuICAvKiBNQVRSSUNFUyAqL1xuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHtAbGluayBtb2RlbE1hdHJpeCB8IG1vZGVsIG1hdHJpeH0gYW5kIHtAbGluayB3b3JsZE1hdHJpeCB8IHdvcmxkIG1hdHJpeH1cbiAgICovXG4gIHNldE1hdHJpY2VzKCkge1xuICAgIHRoaXMubWF0cmljZXMgPSB7XG4gICAgICBtb2RlbDoge1xuICAgICAgICBtYXRyaXg6IG5ldyBNYXQ0KCksXG4gICAgICAgIHNob3VsZFVwZGF0ZTogZmFsc2UsXG4gICAgICAgIG9uVXBkYXRlOiAoKSA9PiB0aGlzLnVwZGF0ZU1vZGVsTWF0cml4KCksXG4gICAgICB9LFxuICAgICAgd29ybGQ6IHtcbiAgICAgICAgbWF0cml4OiBuZXcgTWF0NCgpLFxuICAgICAgICBzaG91bGRVcGRhdGU6IGZhbHNlLFxuICAgICAgICBvblVwZGF0ZTogKCkgPT4gdGhpcy51cGRhdGVXb3JsZE1hdHJpeCgpLFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciB7QGxpbmsgTWF0NCB8IG1vZGVsIG1hdHJpeH1cbiAgICovXG4gIGdldCBtb2RlbE1hdHJpeCgpOiBNYXQ0IHtcbiAgICByZXR1cm4gdGhpcy5tYXRyaWNlcy5tb2RlbC5tYXRyaXhcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHtAbGluayBNYXQ0IHwgbW9kZWwgbWF0cml4fVxuICAgKiBAcGFyYW0gdmFsdWUgLSBuZXcge0BsaW5rIE1hdDQgfCBtb2RlbCBtYXRyaXh9XG4gICAqL1xuICBzZXQgbW9kZWxNYXRyaXgodmFsdWU6IE1hdDQpIHtcbiAgICB0aGlzLm1hdHJpY2VzLm1vZGVsLm1hdHJpeCA9IHZhbHVlXG4gICAgdGhpcy5zaG91bGRVcGRhdGVNb2RlbE1hdHJpeCgpXG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciB7QGxpbmsgbW9kZWxNYXRyaXggfCBtb2RlbCBtYXRyaXh9IHNob3VsZFVwZGF0ZSBmbGFnIHRvIHRydWUgKHRlbGwgaXQgdG8gdXBkYXRlKVxuICAgKi9cbiAgc2hvdWxkVXBkYXRlTW9kZWxNYXRyaXgoKSB7XG4gICAgdGhpcy5tYXRyaWNlcy5tb2RlbC5zaG91bGRVcGRhdGUgPSB0cnVlXG4gICAgdGhpcy5zaG91bGRVcGRhdGVXb3JsZE1hdHJpeCgpXG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciB7QGxpbmsgTWF0NCB8IHdvcmxkIG1hdHJpeH1cbiAgICovXG4gIGdldCB3b3JsZE1hdHJpeCgpOiBNYXQ0IHtcbiAgICByZXR1cm4gdGhpcy5tYXRyaWNlcy53b3JsZC5tYXRyaXhcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHtAbGluayBNYXQ0IHwgd29ybGQgbWF0cml4fVxuICAgKiBAcGFyYW0gdmFsdWUgLSBuZXcge0BsaW5rIE1hdDQgfCB3b3JsZCBtYXRyaXh9XG4gICAqL1xuICBzZXQgd29ybGRNYXRyaXgodmFsdWU6IE1hdDQpIHtcbiAgICB0aGlzLm1hdHJpY2VzLndvcmxkLm1hdHJpeCA9IHZhbHVlXG4gICAgdGhpcy5zaG91bGRVcGRhdGVXb3JsZE1hdHJpeCgpXG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciB7QGxpbmsgd29ybGRNYXRyaXggfCB3b3JsZCBtYXRyaXh9IHNob3VsZFVwZGF0ZSBmbGFnIHRvIHRydWUgKHRlbGwgaXQgdG8gdXBkYXRlKVxuICAgKi9cbiAgc2hvdWxkVXBkYXRlV29ybGRNYXRyaXgoKSB7XG4gICAgdGhpcy5tYXRyaWNlcy53b3JsZC5zaG91bGRVcGRhdGUgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogUm90YXRlIHRoaXMge0BsaW5rIE9iamVjdDNEfSBzbyBpdCBsb29rcyBhdCB0aGUge0BsaW5rIFZlYzMgfCB0YXJnZXR9XG4gICAqIEBwYXJhbSB0YXJnZXQgLSB7QGxpbmsgVmVjMyB8IHRhcmdldH0gdG8gbG9vayBhdFxuICAgKi9cbiAgbG9va0F0KHRhcmdldDogVmVjMyA9IG5ldyBWZWMzKCkpIHtcbiAgICBjb25zdCByb3RhdGlvbk1hdHJpeCA9IG5ldyBNYXQ0KCkubG9va0F0KHRhcmdldCwgdGhpcy5wb3NpdGlvbilcbiAgICB0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KHJvdGF0aW9uTWF0cml4KVxuICAgIHRoaXMuc2hvdWxkVXBkYXRlTW9kZWxNYXRyaXgoKVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSBvdXIge0BsaW5rIG1vZGVsTWF0cml4IHwgbW9kZWwgbWF0cml4fVxuICAgKi9cbiAgdXBkYXRlTW9kZWxNYXRyaXgoKSB7XG4gICAgLy8gY29tcG9zZSBvdXIgbW9kZWwgdHJhbnNmb3JtYXRpb24gbWF0cml4IGZyb20gY3VzdG9tIG9yaWdpblxuICAgIHRoaXMubW9kZWxNYXRyaXggPSB0aGlzLm1vZGVsTWF0cml4LmNvbXBvc2VGcm9tT3JpZ2luKFxuICAgICAgdGhpcy5wb3NpdGlvbixcbiAgICAgIHRoaXMucXVhdGVybmlvbixcbiAgICAgIHRoaXMuc2NhbGUsXG4gICAgICB0aGlzLnRyYW5zZm9ybU9yaWdpblxuICAgIClcblxuICAgIC8vIHRlbGwgb3VyIHdvcmxkIG1hdHJpeCB0byB1cGRhdGVcbiAgICB0aGlzLnNob3VsZFVwZGF0ZVdvcmxkTWF0cml4KClcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgb3VyIHtAbGluayB3b3JsZE1hdHJpeCB8IG1vZGVsIG1hdHJpeH1cbiAgICovXG4gIHVwZGF0ZVdvcmxkTWF0cml4KCkge1xuICAgIGlmICghdGhpcy5wYXJlbnQpIHtcbiAgICAgIHRoaXMud29ybGRNYXRyaXguY29weSh0aGlzLm1vZGVsTWF0cml4KVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLndvcmxkTWF0cml4Lm11bHRpcGx5TWF0cmljZXModGhpcy5wYXJlbnQud29ybGRNYXRyaXgsIHRoaXMubW9kZWxNYXRyaXgpXG4gICAgfVxuXG4gICAgLy8gdXBkYXRlIHRoZSBjaGlsZHJlbiB3b3JsZCBtYXRyaXggYXMgd2VsbFxuICAgIHRoaXMuY2hpbGRyZW4uZm9yRWFjaCgoY2hpbGQpID0+IHtcbiAgICAgIGNoaWxkLnNob3VsZFVwZGF0ZVdvcmxkTWF0cml4KClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxiYWNrIHRvIHJ1biBpZiBhdCBsZWFzdCBvbmUgbWF0cml4IG9mIHRoZSBzdGFjayBoYXMgYmVlbiB1cGRhdGVkXG4gICAqL1xuICBvbkFmdGVyTWF0cml4U3RhY2tVcGRhdGUoKSB7XG4gICAgLyogd2lsbCBiZSB1c2VkIGJ5IHRoZSBjbGFzc2VzIGV4dGVuZGluZyBPYmplY3QzRCAqL1xuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGF0IGVhY2ggcmVuZGVyIHdoZXRoZXIgd2Ugc2hvdWxkIHVwZGF0ZSBvdXIgbWF0cmljZXMsIGFuZCB1cGRhdGUgdGhlbSBpZiBuZWVkZWRcbiAgICovXG4gIHVwZGF0ZU1hdHJpeFN0YWNrKCkge1xuICAgIC8vIGlmIGl0IGhhcyBhIHBhcmVudCBhbmQgaXQgaXMgYW4gT2JqZWN0M0RcbiAgICAvLyBpdCBtZWFucyBub3RoaW5nIHVwZGF0ZXMgaXQgaW4gdGhlIHJlbmRlciBsb29wLCBzbyBkbyBpdCBmcm9tIGhlcmVcbiAgICBpZiAodGhpcy5wYXJlbnQgJiYgdGhpcy5wYXJlbnQuY29uc3RydWN0b3IubmFtZSA9PT0gJ09iamVjdDNEJykge1xuICAgICAgdGhpcy5wYXJlbnQudXBkYXRlTWF0cml4U3RhY2soKVxuICAgIH1cblxuICAgIC8vIGNoZWNrIGlmIGF0IGxlYXN0IG9uZSBtYXRyaXggc2hvdWxkIHVwZGF0ZVxuICAgIGNvbnN0IG1hdHJpeFNob3VsZFVwZGF0ZSA9ICEhT2JqZWN0LmtleXModGhpcy5tYXRyaWNlcykuZmluZCgobWF0cml4TmFtZSkgPT4gdGhpcy5tYXRyaWNlc1ttYXRyaXhOYW1lXS5zaG91bGRVcGRhdGUpXG5cbiAgICBpZiAobWF0cml4U2hvdWxkVXBkYXRlKSB7XG4gICAgICBmb3IgKGNvbnN0IG1hdHJpeE5hbWUgaW4gdGhpcy5tYXRyaWNlcykge1xuICAgICAgICBpZiAodGhpcy5tYXRyaWNlc1ttYXRyaXhOYW1lXS5zaG91bGRVcGRhdGUpIHtcbiAgICAgICAgICB0aGlzLm1hdHJpY2VzW21hdHJpeE5hbWVdLm9uVXBkYXRlKClcbiAgICAgICAgICB0aGlzLm1hdHJpY2VzW21hdHJpeE5hbWVdLnNob3VsZFVwZGF0ZSA9IGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gY2FsbGJhY2sgdG8gcnVuIGlmIGF0IGxlYXN0IG9uZSBtYXRyaXggb2YgdGhlIHN0YWNrIGhhcyBiZWVuIHVwZGF0ZWRcbiAgICAgIHRoaXMub25BZnRlck1hdHJpeFN0YWNrVXBkYXRlKClcbiAgICB9XG4gIH1cbn1cbiIsImltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlYzMnXHJcbmltcG9ydCB7IGlzUmVuZGVyZXIsIFJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL3V0aWxzJ1xyXG5pbXBvcnQgeyBUZXh0dXJlQmluZGluZywgVGV4dHVyZUJpbmRpbmdQYXJhbXMgfSBmcm9tICcuLi9iaW5kaW5ncy9UZXh0dXJlQmluZGluZydcclxuaW1wb3J0IHsgQnVmZmVyQmluZGluZyB9IGZyb20gJy4uL2JpbmRpbmdzL0J1ZmZlckJpbmRpbmcnXHJcbmltcG9ydCB7IE9iamVjdDNEIH0gZnJvbSAnLi4vb2JqZWN0czNEL09iamVjdDNEJ1xyXG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXQ0J1xyXG5pbXBvcnQgeyBnZW5lcmF0ZVVVSUQsIHRocm93V2FybmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJ1xyXG5pbXBvcnQgeyBCaW5kR3JvdXBCaW5kaW5nRWxlbWVudCB9IGZyb20gJy4uLy4uL3R5cGVzL0JpbmRHcm91cHMnXHJcbmltcG9ydCB7IFRleHR1cmVPcHRpb25zLCBUZXh0dXJlUGFyYW1zLCBUZXh0dXJlUGFyZW50LCBUZXh0dXJlU2l6ZSwgVGV4dHVyZVNvdXJjZSB9IGZyb20gJy4uLy4uL3R5cGVzL1RleHR1cmVzJ1xyXG5pbXBvcnQgeyBHUFVDdXJ0YWlucyB9IGZyb20gJy4uLy4uL2N1cnRhaW5zL0dQVUN1cnRhaW5zJ1xyXG5pbXBvcnQgeyBET01Qcm9qZWN0ZWRNZXNoIH0gZnJvbSAnLi4vcmVuZGVyZXJzL0dQVVJlbmRlcmVyJ1xyXG5pbXBvcnQgeyBSZWN0U2l6ZSB9IGZyb20gJy4uL0RPTS9ET01FbGVtZW50J1xyXG5cclxuLyoqIEBjb25zdCAtIGRlZmF1bHQge0BsaW5rIFRleHR1cmV9IHBhcmFtZXRlcnMgKi9cclxuY29uc3QgZGVmYXVsdFRleHR1cmVQYXJhbXM6IFRleHR1cmVQYXJhbXMgPSB7XHJcbiAgbmFtZTogJ3RleHR1cmUnLFxyXG4gIGdlbmVyYXRlTWlwczogZmFsc2UsXHJcbiAgZmxpcFk6IGZhbHNlLFxyXG4gIGZvcm1hdDogJ3JnYmE4dW5vcm0nLFxyXG4gIHByZW11bHRpcGxpZWRBbHBoYTogdHJ1ZSxcclxuICBwbGFjZWhvbGRlckNvbG9yOiBbMCwgMCwgMCwgMjU1XSwgLy8gZGVmYXVsdCB0byBibGFja1xyXG4gIHVzZUV4dGVybmFsVGV4dHVyZXM6IHRydWUsXHJcbiAgZnJvbVRleHR1cmU6IG51bGwsXHJcbiAgdmlld0RpbWVuc2lvbjogJzJkJyxcclxuICBjYWNoZTogdHJ1ZSxcclxufVxyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gY3JlYXRlIHtAbGluayBHUFVUZXh0dXJlfSBvciB7QGxpbmsgR1BVRXh0ZXJuYWxUZXh0dXJlfSBmcm9tIGRpZmZlcmVudCBraW5kcyBvZiB7QGxpbmsgVGV4dHVyZVNvdXJjZSB8IHNvdXJjZXN9LCBsaWtlIHtAbGluayBIVE1MSW1hZ2VFbGVtZW50fSwge0BsaW5rIEhUTUxWaWRlb0VsZW1lbnR9IG9yIHtAbGluayBIVE1MQ2FudmFzRWxlbWVudH0uXHJcbiAqXHJcbiAqIEhhbmRsZXMgdGhlIHZhcmlvdXMgc291cmNlcyBsb2FkaW5nIGFuZCB1cGxvYWRpbmcsIEdQVSB0ZXh0dXJlcyBjcmVhdGlvbix7QGxpbmsgQnVmZmVyQmluZGluZyB8IHRleHR1cmUgbW9kZWwgbWF0cml4IGJpbmRpbmd9IGFuZCB7QGxpbmsgVGV4dHVyZUJpbmRpbmcgfCBHUFUgdGV4dHVyZSBiaW5kaW5nfS5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiAvLyBzZXQgb3VyIG1haW4gR1BVQ3VydGFpbnMgaW5zdGFuY2VcclxuICogY29uc3QgZ3B1Q3VydGFpbnMgPSBuZXcgR1BVQ3VydGFpbnMoe1xyXG4gKiAgIGNvbnRhaW5lcjogJyNjYW52YXMnIC8vIHNlbGVjdG9yIG9mIG91ciBXZWJHUFUgY2FudmFzIGNvbnRhaW5lclxyXG4gKiB9KVxyXG4gKlxyXG4gKiAvLyBzZXQgdGhlIEdQVSBkZXZpY2VcclxuICogLy8gbm90ZSB0aGlzIGlzIGFzeW5jaHJvbm91c1xyXG4gKiBhd2FpdCBncHVDdXJ0YWlucy5zZXREZXZpY2UoKVxyXG4gKlxyXG4gKiAvLyBjcmVhdGUgYSByZW5kZXIgdGV4dHVyZVxyXG4gKiBjb25zdCBpbWFnZVRleHR1cmUgPSBuZXcgVGV4dHVyZShncHVDdXJ0YWlucywge1xyXG4gKiAgIGxhYmVsOiAnTXkgaW1hZ2UgdGV4dHVyZScsXHJcbiAqICAgbmFtZTogJ2ltYWdlVGV4dHVyZScsXHJcbiAqIH0pXHJcbiAqXHJcbiAqIC8vIGxvYWQgYW4gaW1hZ2VcclxuICogYXdhaXQgaW1hZ2VUZXh0dXJlLmxvYWRJbWFnZShkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdpbWcnKSlcclxuICogYGBgXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgVGV4dHVyZSBleHRlbmRzIE9iamVjdDNEIHtcclxuICAvKiogVGhlIHR5cGUgb2YgdGhlIHtAbGluayBUZXh0dXJlfSAqL1xyXG4gIHR5cGU6IHN0cmluZ1xyXG4gIC8qKiBUaGUgdW5pdmVyc2FsIHVuaXF1ZSBpZCBvZiB0aGlzIHtAbGluayBUZXh0dXJlfSAqL1xyXG4gIHJlYWRvbmx5IHV1aWQ6IHN0cmluZ1xyXG4gIC8qKiB7QGxpbmsgUmVuZGVyZXJ9IHVzZWQgYnkgdGhpcyB7QGxpbmsgVGV4dHVyZX0gKi9cclxuICByZW5kZXJlcjogUmVuZGVyZXJcclxuXHJcbiAgLyoqIFRoZSB7QGxpbmsgR1BVVGV4dHVyZX0gdXNlZCBpZiBhbnkgKi9cclxuICB0ZXh0dXJlOiBudWxsIHwgR1BVVGV4dHVyZVxyXG4gIC8qKiBUaGUge0BsaW5rIEdQVUV4dGVybmFsVGV4dHVyZX0gdXNlZCBpZiBhbnkgKi9cclxuICBleHRlcm5hbFRleHR1cmU6IG51bGwgfCBHUFVFeHRlcm5hbFRleHR1cmVcclxuXHJcbiAgLyoqIFRoZSB7QGxpbmsgVGV4dHVyZX0ge0BsaW5rIFRleHR1cmVTb3VyY2UgfCBzb3VyY2V9IHRvIHVzZSAqL1xyXG4gIHNvdXJjZTogVGV4dHVyZVNvdXJjZVxyXG4gIC8qKiBUaGUge0BsaW5rIEdQVVRleHR1cmV9LCBtYXRjaGluZyB0aGUge0BsaW5rIFRleHR1cmVTb3VyY2UgfCBzb3VyY2V9IHtAbGluayBSZWN0U2l6ZSB8IHNpemV9ICh3aXRoIDEgZm9yIGRlcHRoKSAqL1xyXG4gIHNpemU6IFRleHR1cmVTaXplXHJcblxyXG4gIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFRleHR1cmV9ICovXHJcbiAgb3B0aW9uczogVGV4dHVyZU9wdGlvbnNcclxuXHJcbiAgLyoqIEEge0BsaW5rIEJ1ZmZlckJpbmRpbmcgfCBidWZmZXIgYmluZGluZ30gdGhhdCB3aWxsIGhvbGQgdGhlIHRleHR1cmUgbW9kZWwgbWF0cml4ICovXHJcbiAgdGV4dHVyZU1hdHJpeDogQnVmZmVyQmluZGluZ1xyXG4gIC8qKiBUaGUgYmluZGluZ3MgdXNlZCBieSB0aGlzIHtAbGluayBUZXh0dXJlfSwgaS5lLiBpdHMge0BsaW5rIHRleHR1cmVNYXRyaXh9IGFuZCBpdHMge0BsaW5rIFRleHR1cmVCaW5kaW5nIHwgR1BVIHRleHR1cmUgYmluZGluZ30gKi9cclxuICBiaW5kaW5nczogQmluZEdyb3VwQmluZGluZ0VsZW1lbnRbXVxyXG5cclxuICAvKioge0BsaW5rIFRleHR1cmV9IHBhcmVudE1lc2ggaWYgYW55ICovXHJcbiAgcHJpdmF0ZSBfcGFyZW50TWVzaDogVGV4dHVyZVBhcmVudFxyXG5cclxuICAvKiogV2hldGhlciB0aGUgc291cmNlIGhhcyBiZWVuIGxvYWRlZCAqL1xyXG4gIHByaXZhdGUgX3NvdXJjZUxvYWRlZDogYm9vbGVhblxyXG4gIC8qKiBXaGV0aGVyIHRoZSBzb3VyY2UgaGFzIGJlZW4gdXBsb2FkZWQgdG8gdGhlIEdQVSwgaGFuZGxlZCBieSB0aGUge0BsaW5rIGNvcmUvcmVuZGVyZXJzL0dQVURldmljZU1hbmFnZXIuR1BVRGV2aWNlTWFuYWdlciN0ZXh0dXJlc1F1ZXVlIHwgR1BVRGV2aWNlTWFuYWdlciB0ZXh0dXJlc1F1ZXVlIGFycmF5fSAqL1xyXG4gIHByaXZhdGUgX3NvdXJjZVVwbG9hZGVkOiBib29sZWFuXHJcbiAgLyoqIFdoZXRoZXIgdGhlIHRleHR1cmUgc2hvdWxkIGJlIHVwbG9hZGVkIHRvIHRoZSBHUFUgKi9cclxuICBzaG91bGRVcGRhdGU6IGJvb2xlYW5cclxuXHJcbiAgLyoqIHtAbGluayBIVE1MVmlkZW9FbGVtZW50LnJlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2sgfCByZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrfSByZXR1cm5lZCBpZCBpZiB1c2VkICovXHJcbiAgdmlkZW9GcmFtZUNhbGxiYWNrSWQ6IG51bGwgfCBudW1iZXJcclxuXHJcbiAgLyoqIFByaXZhdGUge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHVzZWQgZm9yIHtAbGluayNtb2RlbE1hdHJpeH0gY2FsY3VsYXRpb25zLCBiYXNlZCBvbiB7QGxpbmsgcGFyZW50TWVzaH0ge0BsaW5rIFJlY3RTaXplIHwgc2l6ZX0gKi9cclxuICAjcGFyZW50UmF0aW86IFZlYzMgPSBuZXcgVmVjMygxKVxyXG4gIC8qKiBQcml2YXRlIHtAbGluayBWZWMzIHwgdmVjdG9yfSB1c2VkIGZvciB7QGxpbmsgbW9kZWxNYXRyaXh9IGNhbGN1bGF0aW9ucywgYmFzZWQgb24ge0BsaW5rIHNpemUgfCBzb3VyY2Ugc2l6ZX0gKi9cclxuICAjc291cmNlUmF0aW86IFZlYzMgPSBuZXcgVmVjMygxKVxyXG4gIC8qKiBQcml2YXRlIHtAbGluayBWZWMzIHwgdmVjdG9yfSB1c2VkIGZvciB7QGxpbmsgbW9kZWxNYXRyaXh9IGNhbGN1bGF0aW9ucywgYmFzZWQgb24gI3BhcmVudFJhdGlvIGFuZCAjc291cmNlUmF0aW8gKi9cclxuICAjY292ZXJTY2FsZTogVmVjMyA9IG5ldyBWZWMzKDEpXHJcbiAgLyoqIFByaXZhdGUgcm90YXRpb24ge0BsaW5rIE1hdDQgfCBtYXRyaXh9IGJhc2VkIG9uIHRleHR1cmUge0BsaW5rIHF1YXRlcm5pb259ICovXHJcbiAgI3JvdGF0aW9uTWF0cml4OiBNYXQ0ID0gbmV3IE1hdDQoKVxyXG5cclxuICAvLyBjYWxsYmFja3MgLyBldmVudHNcclxuICAvKiogZnVuY3Rpb24gYXNzaWduZWQgdG8gdGhlIHtAbGluayBvblNvdXJjZUxvYWRlZH0gY2FsbGJhY2sgKi9cclxuICBfb25Tb3VyY2VMb2FkZWRDYWxsYmFjayA9ICgpID0+IHtcclxuICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrICovXHJcbiAgfVxyXG4gIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uU291cmNlVXBsb2FkZWR9IGNhbGxiYWNrICovXHJcbiAgX29uU291cmNlVXBsb2FkZWRDYWxsYmFjayA9ICgpID0+IHtcclxuICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrICovXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZXh0dXJlIGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0ge0BsaW5rIFJlbmRlcmVyfSBvYmplY3Qgb3Ige0BsaW5rIEdQVUN1cnRhaW5zfSBjbGFzcyBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgVGV4dHVyZX1cclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBUZXh0dXJlUGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgVGV4dHVyZX1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIgfCBHUFVDdXJ0YWlucywgcGFyYW1ldGVycyA9IGRlZmF1bHRUZXh0dXJlUGFyYW1zKSB7XHJcbiAgICBzdXBlcigpXHJcblxyXG4gICAgdGhpcy50eXBlID0gJ1RleHR1cmUnXHJcblxyXG4gICAgLy8gd2UgY291bGQgcGFzcyBvdXIgY3VydGFpbnMgb2JqZWN0IE9SIG91ciBjdXJ0YWlucyByZW5kZXJlciBvYmplY3RcclxuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBSZW5kZXJlcilcclxuXHJcbiAgICBpc1JlbmRlcmVyKHJlbmRlcmVyLCBwYXJhbWV0ZXJzLmxhYmVsID8gcGFyYW1ldGVycy5sYWJlbCArICcgJyArIHRoaXMudHlwZSA6IHRoaXMudHlwZSlcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJcclxuXHJcbiAgICB0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKVxyXG5cclxuICAgIGNvbnN0IGRlZmF1bHRPcHRpb25zID0ge1xyXG4gICAgICAuLi5kZWZhdWx0VGV4dHVyZVBhcmFtcyxcclxuICAgICAgc291cmNlOiBwYXJhbWV0ZXJzLmZyb21UZXh0dXJlID8gcGFyYW1ldGVycy5mcm9tVGV4dHVyZS5vcHRpb25zLnNvdXJjZSA6IG51bGwsXHJcbiAgICAgIHNvdXJjZVR5cGU6IHBhcmFtZXRlcnMuZnJvbVRleHR1cmUgPyBwYXJhbWV0ZXJzLmZyb21UZXh0dXJlLm9wdGlvbnMuc291cmNlVHlwZSA6IG51bGwsXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vcHRpb25zID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ucGFyYW1ldGVycyB9XHJcbiAgICAvLyBmb3JjZSBtZXJnZSBvZiB0ZXh0dXJlIG9iamVjdFxyXG4gICAgLy90aGlzLm9wdGlvbnMudGV4dHVyZSA9IHsgLi4uZGVmYXVsdE9wdGlvbnMudGV4dHVyZSwgLi4ucGFyYW1ldGVycy50ZXh0dXJlIH1cclxuXHJcbiAgICB0aGlzLm9wdGlvbnMubGFiZWwgPSB0aGlzLm9wdGlvbnMubGFiZWwgPz8gdGhpcy5vcHRpb25zLm5hbWVcclxuXHJcbiAgICB0aGlzLnRleHR1cmUgPSBudWxsXHJcbiAgICB0aGlzLmV4dGVybmFsVGV4dHVyZSA9IG51bGxcclxuICAgIHRoaXMuc291cmNlID0gbnVsbFxyXG5cclxuICAgIC8vIHNpemVzXHJcbiAgICB0aGlzLnNpemUgPSB7XHJcbiAgICAgIHdpZHRoOiAxLFxyXG4gICAgICBoZWlnaHQ6IDEsXHJcbiAgICAgIGRlcHRoOiAxLFxyXG4gICAgfVxyXG5cclxuICAgIC8vIHdlIHdpbGwgYWx3YXlzIGRlY2xhcmUgYSB0ZXh0dXJlIG1hdHJpeFxyXG4gICAgdGhpcy50ZXh0dXJlTWF0cml4ID0gbmV3IEJ1ZmZlckJpbmRpbmcoe1xyXG4gICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsICsgJzogbW9kZWwgbWF0cml4JyxcclxuICAgICAgbmFtZTogdGhpcy5vcHRpb25zLm5hbWUgKyAnTWF0cml4JyxcclxuICAgICAgdXNlU3RydWN0OiBmYWxzZSxcclxuICAgICAgc3RydWN0OiB7XHJcbiAgICAgICAgbWF0cml4OiB7XHJcbiAgICAgICAgICBuYW1lOiB0aGlzLm9wdGlvbnMubmFtZSArICdNYXRyaXgnLFxyXG4gICAgICAgICAgdHlwZTogJ21hdDR4NGYnLFxyXG4gICAgICAgICAgdmFsdWU6IHRoaXMubW9kZWxNYXRyaXgsXHJcbiAgICAgICAgfSxcclxuICAgICAgfSxcclxuICAgIH0pXHJcblxyXG4gICAgdGhpcy5zZXRCaW5kaW5ncygpXHJcblxyXG4gICAgdGhpcy5fcGFyZW50TWVzaCA9IG51bGxcclxuXHJcbiAgICB0aGlzLnNvdXJjZUxvYWRlZCA9IGZhbHNlXHJcbiAgICB0aGlzLnNvdXJjZVVwbG9hZGVkID0gZmFsc2VcclxuICAgIHRoaXMuc2hvdWxkVXBkYXRlID0gZmFsc2VcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLmFkZFRleHR1cmUodGhpcylcclxuICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgb3VyIHtAbGluayBiaW5kaW5nc31cclxuICAgKi9cclxuICBzZXRCaW5kaW5ncygpIHtcclxuICAgIHRoaXMuYmluZGluZ3MgPSBbXHJcbiAgICAgIG5ldyBUZXh0dXJlQmluZGluZyh7XHJcbiAgICAgICAgbGFiZWw6IHRoaXMub3B0aW9ucy5sYWJlbCArICc6IHRleHR1cmUnLFxyXG4gICAgICAgIG5hbWU6IHRoaXMub3B0aW9ucy5uYW1lLFxyXG4gICAgICAgIHRleHR1cmU6IHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlID09PSAnZXh0ZXJuYWxWaWRlbycgPyB0aGlzLmV4dGVybmFsVGV4dHVyZSA6IHRoaXMudGV4dHVyZSxcclxuICAgICAgICBiaW5kaW5nVHlwZTogdGhpcy5vcHRpb25zLnNvdXJjZVR5cGUgPT09ICdleHRlcm5hbFZpZGVvJyA/ICdleHRlcm5hbFRleHR1cmUnIDogJ3RleHR1cmUnLFxyXG4gICAgICAgIHZpZXdEaW1lbnNpb246IHRoaXMub3B0aW9ucy52aWV3RGltZW5zaW9uLFxyXG4gICAgICB9IGFzIFRleHR1cmVCaW5kaW5nUGFyYW1zKSxcclxuICAgICAgdGhpcy50ZXh0dXJlTWF0cml4LFxyXG4gICAgXVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IG91ciB7QGxpbmsgVGV4dHVyZUJpbmRpbmcgfCBHUFUgdGV4dHVyZSBiaW5kaW5nfVxyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIGdldCB0ZXh0dXJlQmluZGluZygpOiBUZXh0dXJlQmluZGluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5iaW5kaW5nc1swXSBhcyBUZXh0dXJlQmluZGluZ1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IG91ciB0ZXh0dXJlIHtAbGluayBwYXJlbnRNZXNofVxyXG4gICAqL1xyXG4gIGdldCBwYXJlbnRNZXNoKCk6IFRleHR1cmVQYXJlbnQge1xyXG4gICAgcmV0dXJuIHRoaXMuX3BhcmVudE1lc2hcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBvdXIgdGV4dHVyZSB7QGxpbmsgcGFyZW50TWVzaH1cclxuICAgKiBAcGFyYW0gdmFsdWUgLSB0ZXh0dXJlIHtAbGluayBwYXJlbnRNZXNofSB0byBzZXQgKGkuZS4gYW55IGtpbmQgb2Yge0BsaW5rIGNvcmUvcmVuZGVyZXJzL0dQVVJlbmRlcmVyLlJlbmRlcmVkTWVzaCB8IE1lc2h9XHJcbiAgICovXHJcbiAgc2V0IHBhcmVudE1lc2godmFsdWU6IFRleHR1cmVQYXJlbnQpIHtcclxuICAgIHRoaXMuX3BhcmVudE1lc2ggPSB2YWx1ZVxyXG4gICAgdGhpcy5yZXNpemUoKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHdoZXRoZXIgb3VyIHtAbGluayBzb3VyY2V9IGhhcyBiZWVuIGxvYWRlZFxyXG4gICAqL1xyXG4gIGdldCBzb3VyY2VMb2FkZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fc291cmNlTG9hZGVkXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgd2hldGhlciBvdXIge0BsaW5rIHNvdXJjZX0gaGFzIGJlZW4gbG9hZGVkXHJcbiAgICogQHBhcmFtIHZhbHVlIC0gYm9vbGVhbiBmbGFnIGluZGljYXRpbmcgaWYgdGhlIHtAbGluayBzb3VyY2V9IGhhcyBiZWVuIGxvYWRlZFxyXG4gICAqL1xyXG4gIHNldCBzb3VyY2VMb2FkZWQodmFsdWU6IGJvb2xlYW4pIHtcclxuICAgIGlmICh2YWx1ZSAmJiAhdGhpcy5zb3VyY2VMb2FkZWQpIHtcclxuICAgICAgdGhpcy5fb25Tb3VyY2VMb2FkZWRDYWxsYmFjayAmJiB0aGlzLl9vblNvdXJjZUxvYWRlZENhbGxiYWNrKClcclxuICAgIH1cclxuICAgIHRoaXMuX3NvdXJjZUxvYWRlZCA9IHZhbHVlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgd2hldGhlciBvdXIge0BsaW5rIHNvdXJjZX0gaGFzIGJlZW4gdXBsb2FkZWRcclxuICAgKi9cclxuICBnZXQgc291cmNlVXBsb2FkZWQoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fc291cmNlVXBsb2FkZWRcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB3aGV0aGVyIG91ciB7QGxpbmsgc291cmNlfSBoYXMgYmVlbiB1cGxvYWRlZFxyXG4gICAqIEBwYXJhbSB2YWx1ZSAtIGJvb2xlYW4gZmxhZyBpbmRpY2F0aW5nIGlmIHRoZSB7QGxpbmsgc291cmNlfSBoYXMgYmVlbiB1cGxvYWRlZFxyXG4gICAqL1xyXG4gIHNldCBzb3VyY2VVcGxvYWRlZCh2YWx1ZTogYm9vbGVhbikge1xyXG4gICAgaWYgKHZhbHVlICYmICF0aGlzLnNvdXJjZVVwbG9hZGVkKSB7XHJcbiAgICAgIHRoaXMuX29uU291cmNlVXBsb2FkZWRDYWxsYmFjayAmJiB0aGlzLl9vblNvdXJjZVVwbG9hZGVkQ2FsbGJhY2soKVxyXG4gICAgfVxyXG4gICAgdGhpcy5fc291cmNlVXBsb2FkZWQgPSB2YWx1ZVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IG91ciB0ZXh0dXJlIHtAbGluayB0cmFuc2Zvcm1zfSBvYmplY3RcclxuICAgKi9cclxuICBzZXRUcmFuc2Zvcm1zKCkge1xyXG4gICAgc3VwZXIuc2V0VHJhbnNmb3JtcygpXHJcblxyXG4gICAgdGhpcy50cmFuc2Zvcm1zLnF1YXRlcm5pb24uc2V0QXhpc09yZGVyKCdaWFknKVxyXG5cclxuICAgIC8vIHJlc2V0IG91ciBtb2RlbCB0cmFuc2Zvcm0gb3JpZ2luIHRvIHJlZmxlY3QgQ1NTIHRyYW5zZm9ybSBvcmlnaW5zXHJcbiAgICB0aGlzLnRyYW5zZm9ybXMub3JpZ2luLm1vZGVsLnNldCgwLjUsIDAuNSwgMClcclxuICB9XHJcblxyXG4gIC8qIFRFWFRVUkUgTUFUUklYICovXHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSB0aGUge0BsaW5rIG1vZGVsTWF0cml4fVxyXG4gICAqL1xyXG4gIHVwZGF0ZU1vZGVsTWF0cml4KCkge1xyXG4gICAgaWYgKCF0aGlzLnBhcmVudE1lc2gpIHJldHVyblxyXG5cclxuICAgIGNvbnN0IHBhcmVudFNjYWxlID0gKHRoaXMucGFyZW50TWVzaCBhcyBET01Qcm9qZWN0ZWRNZXNoKS5zY2FsZVxyXG4gICAgICA/ICh0aGlzLnBhcmVudE1lc2ggYXMgRE9NUHJvamVjdGVkTWVzaCkuc2NhbGVcclxuICAgICAgOiBuZXcgVmVjMygxLCAxLCAxKVxyXG5cclxuICAgIGNvbnN0IHBhcmVudFdpZHRoID0gKHRoaXMucGFyZW50TWVzaCBhcyBET01Qcm9qZWN0ZWRNZXNoKS5ib3VuZGluZ1JlY3RcclxuICAgICAgPyAodGhpcy5wYXJlbnRNZXNoIGFzIERPTVByb2plY3RlZE1lc2gpLmJvdW5kaW5nUmVjdC53aWR0aCAqIHBhcmVudFNjYWxlLnhcclxuICAgICAgOiB0aGlzLnNpemUud2lkdGhcclxuICAgIGNvbnN0IHBhcmVudEhlaWdodCA9ICh0aGlzLnBhcmVudE1lc2ggYXMgRE9NUHJvamVjdGVkTWVzaCkuYm91bmRpbmdSZWN0XHJcbiAgICAgID8gKHRoaXMucGFyZW50TWVzaCBhcyBET01Qcm9qZWN0ZWRNZXNoKS5ib3VuZGluZ1JlY3QuaGVpZ2h0ICogcGFyZW50U2NhbGUueVxyXG4gICAgICA6IHRoaXMuc2l6ZS5oZWlnaHRcclxuXHJcbiAgICBjb25zdCBwYXJlbnRSYXRpbyA9IHBhcmVudFdpZHRoIC8gcGFyZW50SGVpZ2h0XHJcbiAgICBjb25zdCBzb3VyY2VSYXRpbyA9IHRoaXMuc2l6ZS53aWR0aCAvIHRoaXMuc2l6ZS5oZWlnaHRcclxuXHJcbiAgICAvLyBoYW5kbGUgdGhlIHRleHR1cmUgcm90YXRpb25cclxuICAgIC8vIGh1Z2UgcHJvcHMgdG8gW0BncmdyZHZydF0oaHR0cHM6Ly9naXRodWIuY29tL2dyZ3JkdnJ0KSBmb3IgdGhpcyBzb2x1dGlvbiFcclxuICAgIGlmIChwYXJlbnRXaWR0aCA+IHBhcmVudEhlaWdodCkge1xyXG4gICAgICB0aGlzLiNwYXJlbnRSYXRpby5zZXQocGFyZW50UmF0aW8sIDEsIDEpXHJcbiAgICAgIHRoaXMuI3NvdXJjZVJhdGlvLnNldCgxIC8gc291cmNlUmF0aW8sIDEsIDEpXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLiNwYXJlbnRSYXRpby5zZXQoMSwgMSAvIHBhcmVudFJhdGlvLCAxKVxyXG4gICAgICB0aGlzLiNzb3VyY2VSYXRpby5zZXQoMSwgc291cmNlUmF0aW8sIDEpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gY292ZXIgcmF0aW8gaXMgYSBiaXQgdHJpY2t5IVxyXG4gICAgY29uc3QgY292ZXJSYXRpbyA9XHJcbiAgICAgIHBhcmVudFJhdGlvID4gc291cmNlUmF0aW8gIT09IHBhcmVudFdpZHRoID4gcGFyZW50SGVpZ2h0XHJcbiAgICAgICAgPyAxXHJcbiAgICAgICAgOiBwYXJlbnRXaWR0aCA+IHBhcmVudEhlaWdodFxyXG4gICAgICAgID8gdGhpcy4jcGFyZW50UmF0aW8ueCAqIHRoaXMuI3NvdXJjZVJhdGlvLnhcclxuICAgICAgICA6IHRoaXMuI3NvdXJjZVJhdGlvLnkgKiB0aGlzLiNwYXJlbnRSYXRpby55XHJcblxyXG4gICAgdGhpcy4jY292ZXJTY2FsZS5zZXQoMSAvIChjb3ZlclJhdGlvICogdGhpcy5zY2FsZS54KSwgMSAvIChjb3ZlclJhdGlvICogdGhpcy5zY2FsZS55KSwgMSlcclxuXHJcbiAgICB0aGlzLiNyb3RhdGlvbk1hdHJpeC5yb3RhdGVGcm9tUXVhdGVybmlvbih0aGlzLnF1YXRlcm5pb24pXHJcblxyXG4gICAgLy8gaGVyZSB3ZSBjb3VsZCBjcmVhdGUgYSBtYXRyaXggZm9yIGVhY2ggdHJhbnNsYXRpb25zIC8gc2NhbGVzIGFuZCBkbzpcclxuICAgIC8vIHRoaXMubW9kZWxNYXRyaXhcclxuICAgIC8vICAgLmlkZW50aXR5KClcclxuICAgIC8vICAgLnByZW11bHRpcGx5KG5lZ2F0aXZlT3JpZ2luTWF0cml4KVxyXG4gICAgLy8gICAucHJlbXVsdGlwbHkoY292ZXJTY2FsZU1hdHJpeClcclxuICAgIC8vICAgLnByZW11bHRpcGx5KHBhcmVudFJhdGlvTWF0cml4KVxyXG4gICAgLy8gICAucHJlbXVsdGlwbHkocm90YXRpb25NYXRyaXgpXHJcbiAgICAvLyAgIC5wcmVtdWx0aXBseSh0ZXh0dXJlUmF0aW9NYXRyaXgpXHJcbiAgICAvLyAgIC5wcmVtdWx0aXBseShvcmlnaW5NYXRyaXgpXHJcbiAgICAvLyAgIC50cmFuc2xhdGUodGhpcy5wb3NpdGlvbilcclxuXHJcbiAgICAvLyBidXQgdGhpcyBpcyBmYXN0ZXIhXHJcbiAgICB0aGlzLm1vZGVsTWF0cml4XHJcbiAgICAgIC5pZGVudGl0eSgpXHJcbiAgICAgIC5wcmVtdWx0aXBseVRyYW5zbGF0ZSh0aGlzLnRyYW5zZm9ybU9yaWdpbi5jbG9uZSgpLm11bHRpcGx5U2NhbGFyKC0xKSlcclxuICAgICAgLnByZW11bHRpcGx5U2NhbGUodGhpcy4jY292ZXJTY2FsZSlcclxuICAgICAgLnByZW11bHRpcGx5U2NhbGUodGhpcy4jcGFyZW50UmF0aW8pXHJcbiAgICAgIC5wcmVtdWx0aXBseSh0aGlzLiNyb3RhdGlvbk1hdHJpeClcclxuICAgICAgLnByZW11bHRpcGx5U2NhbGUodGhpcy4jc291cmNlUmF0aW8pXHJcbiAgICAgIC5wcmVtdWx0aXBseVRyYW5zbGF0ZSh0aGlzLnRyYW5zZm9ybU9yaWdpbilcclxuICAgICAgLnRyYW5zbGF0ZSh0aGlzLnBvc2l0aW9uKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogSWYgb3VyIHtAbGluayBtb2RlbE1hdHJpeH0gaGFzIGJlZW4gdXBkYXRlZCwgdGVsbCB0aGUge0BsaW5rIHRleHR1cmVNYXRyaXggfCB0ZXh0dXJlIG1hdHJpeCBiaW5kaW5nfSB0byB1cGRhdGUgYXMgd2VsbFxyXG4gICAqL1xyXG4gIG9uQWZ0ZXJNYXRyaXhTdGFja1VwZGF0ZSgpIHtcclxuICAgIHRoaXMudGV4dHVyZU1hdHJpeC5zaG91bGRVcGRhdGVCaW5kaW5nKHRoaXMub3B0aW9ucy5uYW1lICsgJ01hdHJpeCcpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNpemUgb3VyIHtAbGluayBUZXh0dXJlfVxyXG4gICAqL1xyXG4gIHJlc2l6ZSgpIHtcclxuICAgIC8vIHRoaXMgc2hvdWxkIG9ubHkgaGFwcGVuIHdpdGggY2FudmFzIHRleHR1cmVzXHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuc291cmNlICYmXHJcbiAgICAgIHRoaXMuc291cmNlIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnQgJiZcclxuICAgICAgKHRoaXMuc291cmNlLndpZHRoICE9PSB0aGlzLnNpemUud2lkdGggfHwgdGhpcy5zb3VyY2UuaGVpZ2h0ICE9PSB0aGlzLnNpemUuaGVpZ2h0KVxyXG4gICAgKSB7XHJcbiAgICAgIC8vIHNpbmNlIHRoZSBzb3VyY2Ugc2l6ZSBoYXMgY2hhbmdlZCwgd2UgaGF2ZSB0byByZWNyZWF0ZSBhIG5ldyB0ZXh0dXJlXHJcbiAgICAgIHRoaXMuc2V0U291cmNlU2l6ZSgpXHJcbiAgICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpXHJcbiAgICB9XHJcblxyXG4gICAgLy8gdGVsbCBvdXIgbW9kZWwgbWF0cml4IHRvIHVwZGF0ZVxyXG4gICAgdGhpcy5zaG91bGRVcGRhdGVNb2RlbE1hdHJpeCgpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXQgdGhlIG51bWJlciBvZiBtaXAgbGV2ZWxzIGNyZWF0ZSBiYXNlZCBvbiB7QGxpbmsgc2l6ZX1cclxuICAgKiBAcGFyYW0gc2l6ZXMgLSBBcnJheSBjb250YWluaW5nIG91ciB0ZXh0dXJlIHdpZHRoLCBoZWlnaHQgYW5kIGRlcHRoXHJcbiAgICogQHJldHVybnMgLSBudW1iZXIgb2YgbWlwIGxldmVsc1xyXG4gICAqL1xyXG4gIGdldE51bU1pcExldmVscyguLi5zaXplczogbnVtYmVyW10pOiBudW1iZXIge1xyXG4gICAgY29uc3QgbWF4U2l6ZSA9IE1hdGgubWF4KC4uLnNpemVzKVxyXG4gICAgcmV0dXJuICgxICsgTWF0aC5sb2cyKG1heFNpemUpKSB8IDBcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFRlbGwgdGhlIHtAbGluayBSZW5kZXJlcn0gdG8gdXBsb2FkIG9yIHRleHR1cmVcclxuICAgKi9cclxuICB1cGxvYWRUZXh0dXJlKCkge1xyXG4gICAgdGhpcy5yZW5kZXJlci51cGxvYWRUZXh0dXJlKHRoaXMpXHJcbiAgICB0aGlzLnNob3VsZFVwZGF0ZSA9IGZhbHNlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbXBvcnQgYSB7QGxpbmsgR1BVRXh0ZXJuYWxUZXh0dXJlfSBmcm9tIHRoZSB7QGxpbmsgUmVuZGVyZXJ9LCB1cGRhdGUgdGhlICB7QGxpbmsgdGV4dHVyZUJpbmRpbmd9IGFuZCBpdHMge0BsaW5rIGNvcmUvYmluZEdyb3Vwcy9UZXh0dXJlQmluZEdyb3VwLlRleHR1cmVCaW5kR3JvdXAgfCBiaW5kIGdyb3VwfVxyXG4gICAqL1xyXG4gIHVwbG9hZFZpZGVvVGV4dHVyZSgpIHtcclxuICAgIHRoaXMuZXh0ZXJuYWxUZXh0dXJlID0gdGhpcy5yZW5kZXJlci5pbXBvcnRFeHRlcm5hbFRleHR1cmUodGhpcy5zb3VyY2UgYXMgSFRNTFZpZGVvRWxlbWVudClcclxuICAgIHRoaXMudGV4dHVyZUJpbmRpbmcucmVzb3VyY2UgPSB0aGlzLmV4dGVybmFsVGV4dHVyZVxyXG4gICAgdGhpcy50ZXh0dXJlQmluZGluZy5zZXRCaW5kaW5nVHlwZSgnZXh0ZXJuYWxUZXh0dXJlJylcclxuICAgIHRoaXMuc2hvdWxkVXBkYXRlID0gZmFsc2VcclxuICAgIHRoaXMuc291cmNlVXBsb2FkZWQgPSB0cnVlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb3B5IGEge0BsaW5rIFRleHR1cmV9XHJcbiAgICogQHBhcmFtIHRleHR1cmUgLSB7QGxpbmsgVGV4dHVyZX0gdG8gY29weVxyXG4gICAqL1xyXG4gIGNvcHkodGV4dHVyZTogVGV4dHVyZSkge1xyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlID09PSAnZXh0ZXJuYWxWaWRlbycgJiYgdGV4dHVyZS5vcHRpb25zLnNvdXJjZVR5cGUgIT09ICdleHRlcm5hbFZpZGVvJykge1xyXG4gICAgICB0aHJvd1dhcm5pbmcoYCR7dGhpcy5vcHRpb25zLmxhYmVsfTogY2Fubm90IGNvcHkgYSBHUFVUZXh0dXJlIHRvIGEgR1BVRXh0ZXJuYWxUZXh0dXJlYClcclxuICAgICAgcmV0dXJuXHJcbiAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlICE9PSAnZXh0ZXJuYWxWaWRlbycgJiYgdGV4dHVyZS5vcHRpb25zLnNvdXJjZVR5cGUgPT09ICdleHRlcm5hbFZpZGVvJykge1xyXG4gICAgICB0aHJvd1dhcm5pbmcoYCR7dGhpcy5vcHRpb25zLmxhYmVsfTogY2Fubm90IGNvcHkgYSBHUFVFeHRlcm5hbFRleHR1cmUgdG8gYSBHUFVUZXh0dXJlYClcclxuICAgICAgcmV0dXJuXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5vcHRpb25zLmZyb21UZXh0dXJlID0gdGV4dHVyZVxyXG5cclxuICAgIC8vIG5vdyBjb3B5IGFsbCBkZXNpcmVkIHRleHR1cmUgb3B0aW9ucyBleGNlcHQgc291cmNlXHJcbiAgICAvLyBjb25zdCB7IHNvdXJjZSwgLi4ub3B0aW9uc1RvQ29weSB9ID0gdGV4dHVyZS5vcHRpb25zXHJcbiAgICAvLyB0aGlzLm9wdGlvbnMgPSB7IC4uLnRoaXMub3B0aW9ucywgLi4ub3B0aW9uc1RvQ29weSB9XHJcblxyXG4gICAgdGhpcy5vcHRpb25zLnNvdXJjZVR5cGUgPSB0ZXh0dXJlLm9wdGlvbnMuc291cmNlVHlwZVxyXG5cclxuICAgIC8vIFRPRE8gYmV0dGVyIHdheSB0byBkbyB0aGF0P1xyXG4gICAgdGhpcy5vcHRpb25zLmdlbmVyYXRlTWlwcyA9IHRleHR1cmUub3B0aW9ucy5nZW5lcmF0ZU1pcHNcclxuICAgIHRoaXMub3B0aW9ucy5mbGlwWSA9IHRleHR1cmUub3B0aW9ucy5mbGlwWVxyXG4gICAgdGhpcy5vcHRpb25zLmZvcm1hdCA9IHRleHR1cmUub3B0aW9ucy5mb3JtYXRcclxuICAgIHRoaXMub3B0aW9ucy5wcmVtdWx0aXBsaWVkQWxwaGEgPSB0ZXh0dXJlLm9wdGlvbnMucHJlbXVsdGlwbGllZEFscGhhXHJcbiAgICB0aGlzLm9wdGlvbnMucGxhY2Vob2xkZXJDb2xvciA9IHRleHR1cmUub3B0aW9ucy5wbGFjZWhvbGRlckNvbG9yXHJcbiAgICB0aGlzLm9wdGlvbnMudXNlRXh0ZXJuYWxUZXh0dXJlcyA9IHRleHR1cmUub3B0aW9ucy51c2VFeHRlcm5hbFRleHR1cmVzXHJcblxyXG4gICAgdGhpcy5zb3VyY2VMb2FkZWQgPSB0ZXh0dXJlLnNvdXJjZUxvYWRlZFxyXG4gICAgdGhpcy5zb3VyY2VVcGxvYWRlZCA9IHRleHR1cmUuc291cmNlVXBsb2FkZWRcclxuXHJcbiAgICAvLyBUT0RPIGV4dGVybmFsIHRleHR1cmU/XHJcbiAgICBpZiAodGV4dHVyZS50ZXh0dXJlKSB7XHJcbiAgICAgIGlmICh0ZXh0dXJlLnNvdXJjZUxvYWRlZCkge1xyXG4gICAgICAgIHRoaXMuc2l6ZSA9IHRleHR1cmUuc2l6ZVxyXG4gICAgICAgIHRoaXMuc291cmNlID0gdGV4dHVyZS5zb3VyY2VcclxuXHJcbiAgICAgICAgdGhpcy5yZXNpemUoKVxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGV4dHVyZS5zb3VyY2VVcGxvYWRlZCkge1xyXG4gICAgICAgIC8vIHRleHR1cmUgdG8gY29weSBpcyByZWFkeSwgdXBkYXRlIG91ciB0ZXh0dXJlIGFuZCBiaW5kaW5nXHJcbiAgICAgICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZS50ZXh0dXJlXHJcbiAgICAgICAgdGhpcy50ZXh0dXJlQmluZGluZy5yZXNvdXJjZSA9IHRoaXMudGV4dHVyZVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUge0BsaW5rIHRleHR1cmUgfCBHUFUgdGV4dHVyZX1cclxuICAgKi9cclxuICBjcmVhdGVUZXh0dXJlKCkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcclxuICAgICAgbGFiZWw6IHRoaXMub3B0aW9ucy5sYWJlbCxcclxuICAgICAgZm9ybWF0OiB0aGlzLm9wdGlvbnMuZm9ybWF0LFxyXG4gICAgICBzaXplOiBbdGhpcy5zaXplLndpZHRoLCB0aGlzLnNpemUuaGVpZ2h0LCB0aGlzLnNpemUuZGVwdGhdLCAvLyBbMSwgMV0gaWYgbm8gc291cmNlXHJcbiAgICAgIGRpbWVuc2lvbnM6IHRoaXMub3B0aW9ucy52aWV3RGltZW5zaW9uID09PSAnMWQnID8gJzFkJyA6IHRoaXMub3B0aW9ucy52aWV3RGltZW5zaW9uID09PSAnM2QnID8gJzNkJyA6ICcyZCcsXHJcbiAgICAgIC8vc2FtcGxlQ291bnQ6IHRoaXMuc291cmNlID8gdGhpcy5yZW5kZXJlci5zYW1wbGVDb3VudCA6IDEsXHJcbiAgICAgIHVzYWdlOiAhIXRoaXMuc291cmNlXHJcbiAgICAgICAgPyBHUFVUZXh0dXJlVXNhZ2UuVEVYVFVSRV9CSU5ESU5HIHwgR1BVVGV4dHVyZVVzYWdlLkNPUFlfRFNUIHwgR1BVVGV4dHVyZVVzYWdlLlJFTkRFUl9BVFRBQ0hNRU5UXHJcbiAgICAgICAgOiBHUFVUZXh0dXJlVXNhZ2UuVEVYVFVSRV9CSU5ESU5HIHwgR1BVVGV4dHVyZVVzYWdlLkNPUFlfRFNULFxyXG4gICAgfSBhcyBHUFVUZXh0dXJlRGVzY3JpcHRvclxyXG5cclxuICAgIGlmICh0aGlzLm9wdGlvbnMuc291cmNlVHlwZSAhPT0gJ2V4dGVybmFsVmlkZW8nKSB7XHJcbiAgICAgIG9wdGlvbnMubWlwTGV2ZWxDb3VudCA9IHRoaXMub3B0aW9ucy5nZW5lcmF0ZU1pcHMgPyB0aGlzLmdldE51bU1pcExldmVscyh0aGlzLnNpemUud2lkdGgsIHRoaXMuc2l6ZS5oZWlnaHQpIDogMVxyXG5cclxuICAgICAgdGhpcy50ZXh0dXJlPy5kZXN0cm95KClcclxuXHJcbiAgICAgIHRoaXMudGV4dHVyZSA9IHRoaXMucmVuZGVyZXIuY3JlYXRlVGV4dHVyZShvcHRpb25zKVxyXG5cclxuICAgICAgLy8gdXBkYXRlIHRleHR1cmUgYmluZGluZ1xyXG4gICAgICB0aGlzLnRleHR1cmVCaW5kaW5nLnJlc291cmNlID0gdGhpcy50ZXh0dXJlXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zaG91bGRVcGRhdGUgPSB0cnVlXHJcbiAgfVxyXG5cclxuICAvKiBTT1VSQ0VTICovXHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUge0BsaW5rIHNpemV9IGJhc2VkIG9uIHRoZSB7QGxpbmsgc291cmNlfVxyXG4gICAqL1xyXG4gIHNldFNvdXJjZVNpemUoKSB7XHJcbiAgICB0aGlzLnNpemUgPSB7XHJcbiAgICAgIHdpZHRoOlxyXG4gICAgICAgICh0aGlzLnNvdXJjZSBhcyBIVE1MSW1hZ2VFbGVtZW50KS5uYXR1cmFsV2lkdGggfHxcclxuICAgICAgICAodGhpcy5zb3VyY2UgYXMgSFRNTENhbnZhc0VsZW1lbnQpLndpZHRoIHx8XHJcbiAgICAgICAgKHRoaXMuc291cmNlIGFzIEhUTUxWaWRlb0VsZW1lbnQpLnZpZGVvV2lkdGgsXHJcbiAgICAgIGhlaWdodDpcclxuICAgICAgICAodGhpcy5zb3VyY2UgYXMgSFRNTEltYWdlRWxlbWVudCkubmF0dXJhbEhlaWdodCB8fFxyXG4gICAgICAgICh0aGlzLnNvdXJjZSBhcyBIVE1MQ2FudmFzRWxlbWVudCkuaGVpZ2h0IHx8XHJcbiAgICAgICAgKHRoaXMuc291cmNlIGFzIEhUTUxWaWRlb0VsZW1lbnQpLnZpZGVvSGVpZ2h0LFxyXG4gICAgICBkZXB0aDogMSxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvYWQgYW4ge0BsaW5rIEhUTUxJbWFnZUVsZW1lbnR9IGZyb20gYSBVUkwgYW5kIGNyZWF0ZSBhbiB7QGxpbmsgSW1hZ2VCaXRtYXB9IHRvIHVzZSBhcyBhIHtAbGluayBzb3VyY2V9XHJcbiAgICogQGFzeW5jXHJcbiAgICogQHBhcmFtIHVybCAtIFVSTCBvZiB0aGUgaW1hZ2UgdG8gbG9hZFxyXG4gICAqIEByZXR1cm5zIC0gdGhlIG5ld2x5IGNyZWF0ZWQge0BsaW5rIEltYWdlQml0bWFwfVxyXG4gICAqL1xyXG4gIGFzeW5jIGxvYWRJbWFnZUJpdG1hcCh1cmw6IHN0cmluZyk6IFByb21pc2U8SW1hZ2VCaXRtYXA+IHtcclxuICAgIGNvbnN0IHJlcyA9IGF3YWl0IGZldGNoKHVybClcclxuICAgIGNvbnN0IGJsb2IgPSBhd2FpdCByZXMuYmxvYigpXHJcbiAgICByZXR1cm4gYXdhaXQgY3JlYXRlSW1hZ2VCaXRtYXAoYmxvYiwgeyBjb2xvclNwYWNlQ29udmVyc2lvbjogJ25vbmUnIH0pXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBMb2FkIGFuZCBjcmVhdGUgYW4ge0BsaW5rIEltYWdlQml0bWFwfSBmcm9tIGEgVVJMIG9yIHtAbGluayBIVE1MSW1hZ2VFbGVtZW50fSwgdXNlIGl0IGFzIGEge0BsaW5rIHNvdXJjZX0gYW5kIGNyZWF0ZSB0aGUge0BsaW5rIEdQVVRleHR1cmV9XHJcbiAgICogQGFzeW5jXHJcbiAgICogQHBhcmFtIHNvdXJjZSAtIHRoZSBpbWFnZSBVUkwgb3Ige0BsaW5rIEhUTUxJbWFnZUVsZW1lbnR9IHRvIGxvYWRcclxuICAgKiBAcmV0dXJucyAtIHRoZSBuZXdseSBjcmVhdGVkIHtAbGluayBJbWFnZUJpdG1hcH1cclxuICAgKi9cclxuICBhc3luYyBsb2FkSW1hZ2Uoc291cmNlOiBzdHJpbmcgfCBIVE1MSW1hZ2VFbGVtZW50KTogUHJvbWlzZTx2b2lkPiB7XHJcbiAgICBjb25zdCB1cmwgPSB0eXBlb2Ygc291cmNlID09PSAnc3RyaW5nJyA/IHNvdXJjZSA6IHNvdXJjZS5nZXRBdHRyaWJ1dGUoJ3NyYycpXHJcblxyXG4gICAgdGhpcy5vcHRpb25zLnNvdXJjZSA9IHVybFxyXG4gICAgdGhpcy5vcHRpb25zLnNvdXJjZVR5cGUgPSAnaW1hZ2UnXHJcblxyXG4gICAgY29uc3QgY2FjaGVkVGV4dHVyZSA9IHRoaXMucmVuZGVyZXIudGV4dHVyZXMuZmluZCgodCkgPT4gdC5vcHRpb25zLnNvdXJjZSA9PT0gdXJsKVxyXG4gICAgaWYgKGNhY2hlZFRleHR1cmUgJiYgY2FjaGVkVGV4dHVyZS50ZXh0dXJlICYmIGNhY2hlZFRleHR1cmUuc291cmNlVXBsb2FkZWQpIHtcclxuICAgICAgdGhpcy5jb3B5KGNhY2hlZFRleHR1cmUpXHJcbiAgICAgIHJldHVyblxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc291cmNlTG9hZGVkID0gZmFsc2VcclxuICAgIHRoaXMuc291cmNlVXBsb2FkZWQgPSBmYWxzZVxyXG5cclxuICAgIHRoaXMuc291cmNlID0gYXdhaXQgdGhpcy5sb2FkSW1hZ2VCaXRtYXAodGhpcy5vcHRpb25zLnNvdXJjZSlcclxuXHJcbiAgICB0aGlzLnNldFNvdXJjZVNpemUoKVxyXG4gICAgdGhpcy5yZXNpemUoKVxyXG5cclxuICAgIHRoaXMuc291cmNlTG9hZGVkID0gdHJ1ZVxyXG4gICAgdGhpcy5jcmVhdGVUZXh0dXJlKClcclxuICB9XHJcblxyXG4gIC8vIHdlaXJsZHkgZW5vdWdoLCB3ZSBkb24ndCBoYXZlIHRvIGRvIGFueXRoaW5nIGluIHRoYXQgY2FsbGJhY2tcclxuICAvLyBiZWNhdXNlIHRoZSA8dmlkZW8+IGlzIG5vdCB2aXNpYmxlIGluIHRoZSB2aWV3cG9ydCwgdGhlIHZpZGVvIHBsYXliYWNrIGlzIHRocm90dGxlZFxyXG4gIC8vIGFuZCB0aGUgcmVuZGVyaW5nIGlzIGphbmt5XHJcbiAgLy8gdXNpbmcgcmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjayBoZWxwcyBwcmV2ZW50aW5nIHRoaXMgYnV0IGlzIHVuc3VwcG9ydGVkIGluIEZpcmVmb3ggYXQgdGhlIG1vbWVudFxyXG4gIC8vIFdlYkNvZGVjcyBtYXkgYmUgdGhlIHdheSB0byBnbyB3aGVuIHRpbWUgY29tZXMhXHJcbiAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL25ldy1pbi13ZWJncHUtMTEzLyN1c2Utd2ViY29kZWNzLXZpZGVvZnJhbWUtc291cmNlLWluLWltcG9ydGV4dGVybmFsdGV4dHVyZVxyXG4gIC8qKlxyXG4gICAqIFNldCBvdXIge0BsaW5rIHNob3VsZFVwZGF0ZX0gZmxhZyB0byB0cnVlIGF0IGVhY2ggbmV3IHZpZGVvIGZyYW1lXHJcbiAgICovXHJcbiAgb25WaWRlb0ZyYW1lQ2FsbGJhY2soKSB7XHJcbiAgICBpZiAodGhpcy52aWRlb0ZyYW1lQ2FsbGJhY2tJZCkge1xyXG4gICAgICB0aGlzLnNob3VsZFVwZGF0ZSA9IHRydWVcclxuICAgICAgOyh0aGlzLnNvdXJjZSBhcyBIVE1MVmlkZW9FbGVtZW50KS5yZXF1ZXN0VmlkZW9GcmFtZUNhbGxiYWNrKHRoaXMub25WaWRlb0ZyYW1lQ2FsbGJhY2suYmluZCh0aGlzKSlcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxiYWNrIHRvIHJ1biB3aGVuIGEge0BsaW5rIEhUTUxWaWRlb0VsZW1lbnR9IGhhcyBsb2FkZWQgKHdoZW4gaXQgaGFzIGVub3VnaCBkYXRhIHRvIHBsYXkpLlxyXG4gICAqIFNldCB0aGUge0BsaW5rIEhUTUxWaWRlb0VsZW1lbnR9IGFzIGEge0BsaW5rIHNvdXJjZX0gYW5kIGNyZWF0ZSB0aGUge0BsaW5rIEdQVVRleHR1cmV9IG9yIHtAbGluayBHUFVFeHRlcm5hbFRleHR1cmV9XHJcbiAgICogQHBhcmFtIHZpZGVvIC0gdGhlIG5ld2x5IGxvYWRlZCB7QGxpbmsgSFRNTFZpZGVvRWxlbWVudH1cclxuICAgKi9cclxuICBvblZpZGVvTG9hZGVkKHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50KSB7XHJcbiAgICBpZiAoIXRoaXMuc291cmNlTG9hZGVkKSB7XHJcbiAgICAgIHRoaXMuc291cmNlID0gdmlkZW9cclxuXHJcbiAgICAgIHRoaXMuc2V0U291cmNlU2l6ZSgpXHJcbiAgICAgIHRoaXMucmVzaXplKClcclxuXHJcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMudXNlRXh0ZXJuYWxUZXh0dXJlcykge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlID0gJ2V4dGVybmFsVmlkZW8nXHJcblxyXG4gICAgICAgIC8vIHRleHR1cmUgYmluZGluZyB3aWxsIGJlIHNldCB3aGVuIHVwbG9hZGluZyBleHRlcm5hbCB0ZXh0dXJlXHJcbiAgICAgICAgLy8gbWVhbndoaWxlLCBkZXN0cm95IHByZXZpb3VzIHRleHR1cmVcclxuICAgICAgICB0aGlzLnRleHR1cmU/LmRlc3Ryb3koKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlID0gJ3ZpZGVvJ1xyXG4gICAgICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICgncmVxdWVzdFZpZGVvRnJhbWVDYWxsYmFjaycgaW4gSFRNTFZpZGVvRWxlbWVudC5wcm90b3R5cGUpIHtcclxuICAgICAgICB0aGlzLnZpZGVvRnJhbWVDYWxsYmFja0lkID0gKHRoaXMuc291cmNlIGFzIEhUTUxWaWRlb0VsZW1lbnQpLnJlcXVlc3RWaWRlb0ZyYW1lQ2FsbGJhY2soXHJcbiAgICAgICAgICB0aGlzLm9uVmlkZW9GcmFtZUNhbGxiYWNrLmJpbmQodGhpcylcclxuICAgICAgICApXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuc291cmNlTG9hZGVkID0gdHJ1ZVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHdoZXRoZXIgdGhlIHtAbGluayBzb3VyY2V9IGlzIGEgdmlkZW9cclxuICAgKiBAcmVhZG9ubHlcclxuICAgKi9cclxuICBnZXQgaXNWaWRlb1NvdXJjZSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLnNvdXJjZSAmJiAodGhpcy5vcHRpb25zLnNvdXJjZVR5cGUgPT09ICd2aWRlbycgfHwgdGhpcy5vcHRpb25zLnNvdXJjZVR5cGUgPT09ICdleHRlcm5hbFZpZGVvJylcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExvYWQgYSB2aWRlbyBmcm9tIGEgVVJMIG9yIHtAbGluayBIVE1MVmlkZW9FbGVtZW50fSBhbmQgcmVnaXN0ZXIge0BsaW5rIG9uVmlkZW9Mb2FkZWR9IGNhbGxiYWNrXHJcbiAgICogQHBhcmFtIHNvdXJjZSAtIHRoZSB2aWRlbyBVUkwgb3Ige0BsaW5rIEhUTUxWaWRlb0VsZW1lbnR9IHRvIGxvYWRcclxuICAgKi9cclxuICBsb2FkVmlkZW8oc291cmNlOiBzdHJpbmcgfCBIVE1MVmlkZW9FbGVtZW50KSB7XHJcbiAgICBsZXQgdmlkZW9cclxuXHJcbiAgICBpZiAodHlwZW9mIHNvdXJjZSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgdmlkZW8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpXHJcbiAgICAgIHZpZGVvLnNyYyA9IHNvdXJjZVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdmlkZW8gPSBzb3VyY2VcclxuICAgIH1cclxuXHJcbiAgICB2aWRlby5wcmVsb2FkID0gJ2F1dG8nXHJcbiAgICB2aWRlby5tdXRlZCA9IHRydWVcclxuICAgIHZpZGVvLmxvb3AgPSB0cnVlXHJcbiAgICB2aWRlby5jcm9zc09yaWdpbiA9ICdhbm9ueW1vdXMnXHJcbiAgICB2aWRlby5zZXRBdHRyaWJ1dGUoJ3BsYXlzaW5saW5lJywgJycpXHJcblxyXG4gICAgdGhpcy5vcHRpb25zLnNvdXJjZSA9IHZpZGVvLnNyY1xyXG4gICAgdGhpcy5zb3VyY2VMb2FkZWQgPSBmYWxzZVxyXG4gICAgdGhpcy5zb3VyY2VVcGxvYWRlZCA9IGZhbHNlXHJcblxyXG4gICAgLy8gSWYgdGhlIHZpZGVvIGlzIGluIHRoZSBjYWNoZSBvZiB0aGUgYnJvd3NlcixcclxuICAgIC8vIHRoZSAnY2FucGxheXRocm91Z2gnIGV2ZW50IG1pZ2h0IGhhdmUgYmVlbiB0cmlnZ2VyZWRcclxuICAgIC8vIGJlZm9yZSB3ZSByZWdpc3RlcmVkIHRoZSBldmVudCBoYW5kbGVyLlxyXG4gICAgaWYgKHZpZGVvLnJlYWR5U3RhdGUgPj0gdmlkZW8uSEFWRV9FTk9VR0hfREFUQSkge1xyXG4gICAgICB0aGlzLm9uVmlkZW9Mb2FkZWQodmlkZW8pXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB2aWRlby5hZGRFdmVudExpc3RlbmVyKCdjYW5wbGF5dGhyb3VnaCcsIHRoaXMub25WaWRlb0xvYWRlZC5iaW5kKHRoaXMsIHZpZGVvKSwge1xyXG4gICAgICAgIG9uY2U6IHRydWUsXHJcbiAgICAgIH0pXHJcbiAgICB9XHJcblxyXG4gICAgLy8gaWYgZHVyYXRpb24gaXMgbm90IGF2YWlsYWJsZSwgc2hvdWxkIG1lYW4gb3VyIHZpZGVvIGhhcyBub3Qgc3RhcnRlZCBsb2FkaW5nXHJcbiAgICBpZiAoaXNOYU4odmlkZW8uZHVyYXRpb24pKSB7XHJcbiAgICAgIHZpZGVvLmxvYWQoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogTG9hZCBhIHtAbGluayBIVE1MQ2FudmFzRWxlbWVudH0sIHVzZSBpdCBhcyBhIHtAbGluayBzb3VyY2V9IGFuZCBjcmVhdGUgdGhlIHtAbGluayBHUFVUZXh0dXJlfVxyXG4gICAqIEBwYXJhbSBzb3VyY2UgLSB0aGUge0BsaW5rIEhUTUxDYW52YXNFbGVtZW50fSB0byB1c2VcclxuICAgKi9cclxuICBsb2FkQ2FudmFzKHNvdXJjZTogSFRNTENhbnZhc0VsZW1lbnQpIHtcclxuICAgIHRoaXMub3B0aW9ucy5zb3VyY2UgPSBzb3VyY2VcclxuICAgIHRoaXMub3B0aW9ucy5zb3VyY2VUeXBlID0gJ2NhbnZhcydcclxuICAgIHRoaXMuc291cmNlTG9hZGVkID0gZmFsc2VcclxuICAgIHRoaXMuc291cmNlVXBsb2FkZWQgPSBmYWxzZVxyXG5cclxuICAgIHRoaXMuc291cmNlID0gc291cmNlXHJcblxyXG4gICAgdGhpcy5zZXRTb3VyY2VTaXplKClcclxuICAgIHRoaXMucmVzaXplKClcclxuXHJcbiAgICB0aGlzLnNvdXJjZUxvYWRlZCA9IHRydWVcclxuICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpXHJcbiAgfVxyXG5cclxuICAvKiBFVkVOVFMgKi9cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIHtAbGluayBzb3VyY2V9IGhhcyBiZWVuIGxvYWRlZFxyXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biB3aGVuIHRoZSB7QGxpbmsgc291cmNlfSBoYXMgYmVlbiBsb2FkZWRcclxuICAgKiBAcmV0dXJucyAtIG91ciB7QGxpbmsgVGV4dHVyZX1cclxuICAgKi9cclxuICBvblNvdXJjZUxvYWRlZChjYWxsYmFjazogKCkgPT4gdm9pZCk6IFRleHR1cmUge1xyXG4gICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgIHRoaXMuX29uU291cmNlTG9hZGVkQ2FsbGJhY2sgPSBjYWxsYmFja1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsYmFjayB0byBydW4gd2hlbiB0aGUge0BsaW5rIHNvdXJjZX0gaGFzIGJlZW4gdXBsb2FkZWRcclxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBydW4gd2hlbiB0aGUge0BsaW5rIHNvdXJjZX0gYmVlbiB1cGxvYWRlZFxyXG4gICAqIEByZXR1cm5zIC0gb3VyIHtAbGluayBUZXh0dXJlfVxyXG4gICAqL1xyXG4gIG9uU291cmNlVXBsb2FkZWQoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBUZXh0dXJlIHtcclxuICAgIGlmIChjYWxsYmFjaykge1xyXG4gICAgICB0aGlzLl9vblNvdXJjZVVwbG9hZGVkQ2FsbGJhY2sgPSBjYWxsYmFja1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiB0aGlzXHJcbiAgfVxyXG5cclxuICAvKiBSRU5ERVIgKi9cclxuXHJcbiAgLyoqXHJcbiAgICogUmVuZGVyIGEge0BsaW5rIFRleHR1cmV9OlxyXG4gICAqIC0gVXBkYXRlIGl0cyB7QGxpbmsgbW9kZWxNYXRyaXh9IGFuZCB7QGxpbmsgYmluZGluZ3N9IGlmIG5lZWRlZFxyXG4gICAqIC0gVXBsb2FkIHRoZSB0ZXh0dXJlIGlmIGl0IG5lZWRzIHRvIGJlIGRvbmVcclxuICAgKi9cclxuICByZW5kZXIoKSB7XHJcbiAgICAvLyB1cGRhdGUgb3VyIG1vZGVsIG1hdHJpeCBpZiBuZWVkZWRcclxuICAgIHRoaXMudXBkYXRlTWF0cml4U3RhY2soKVxyXG5cclxuICAgIC8vIHVwZGF0ZSB1bmlmb3JtcyB2YWx1ZXNcclxuICAgIHRoaXMudGV4dHVyZU1hdHJpeC51cGRhdGUoKVxyXG5cclxuICAgIC8vIHNpbmNlIGV4dGVybmFsIHRleHR1cmUgYXJlIGRlc3Ryb3llZCBhcyBzb29uIGFzIEphdmFTY3JpcHQgcmV0dXJucyB0byB0aGUgYnJvd3NlclxyXG4gICAgLy8gd2UgbmVlZCB0byB1cGRhdGUgaXQgYXQgZXZlcnkgdGljaywgZXZlbiBpZiBpdCBoYXNuJ3QgY2hhbmdlZFxyXG4gICAgLy8gdG8gZW5zdXJlIHdlJ3JlIG5vdCBzZW5kaW5nIGEgc3RhbGUgLyBkZXN0cm95ZWQgdGV4dHVyZVxyXG4gICAgLy8gYW55d2F5LCBleHRlcm5hbCB0ZXh0dXJlIGFyZSBjYWNoZWQgc28gaXQgaXMgZmluZWQgdG8gY2FsbCBpbXBvcnRFeHRlcm5hbFRleHR1cmUgYXQgZWFjaCB0aWNrXHJcbiAgICBpZiAodGhpcy5vcHRpb25zLnNvdXJjZVR5cGUgPT09ICdleHRlcm5hbFZpZGVvJykge1xyXG4gICAgICB0aGlzLnNob3VsZFVwZGF0ZSA9IHRydWVcclxuICAgIH1cclxuXHJcbiAgICAvLyBpZiBubyB2aWRlb0ZyYW1lQ2FsbGJhY2sgY2hlY2sgaWYgdGhlIHZpZGVvIGlzIGFjdHVhbGx5IHJlYWxseSBwbGF5aW5nXHJcbiAgICBpZiAoXHJcbiAgICAgIHRoaXMuaXNWaWRlb1NvdXJjZSAmJlxyXG4gICAgICAhdGhpcy52aWRlb0ZyYW1lQ2FsbGJhY2tJZCAmJlxyXG4gICAgICAodGhpcy5zb3VyY2UgYXMgSFRNTFZpZGVvRWxlbWVudCkucmVhZHlTdGF0ZSA+PSAodGhpcy5zb3VyY2UgYXMgSFRNTFZpZGVvRWxlbWVudCkuSEFWRV9DVVJSRU5UX0RBVEEgJiZcclxuICAgICAgISh0aGlzLnNvdXJjZSBhcyBIVE1MVmlkZW9FbGVtZW50KS5wYXVzZWRcclxuICAgICkge1xyXG4gICAgICB0aGlzLnNob3VsZFVwZGF0ZSA9IHRydWVcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5zaG91bGRVcGRhdGUgJiYgdGhpcy5vcHRpb25zLnNvdXJjZVR5cGUgJiYgdGhpcy5vcHRpb25zLnNvdXJjZVR5cGUgIT09ICdleHRlcm5hbFZpZGVvJykge1xyXG4gICAgICB0aGlzLnVwbG9hZFRleHR1cmUoKVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyogREVTVFJPWSAqL1xyXG5cclxuICAvKipcclxuICAgKiBEZXN0cm95IHRoZSB7QGxpbmsgVGV4dHVyZX1cclxuICAgKi9cclxuICBkZXN0cm95KCkge1xyXG4gICAgaWYgKHRoaXMudmlkZW9GcmFtZUNhbGxiYWNrSWQpIHtcclxuICAgICAgOyh0aGlzLnNvdXJjZSBhcyBIVE1MVmlkZW9FbGVtZW50KS5jYW5jZWxWaWRlb0ZyYW1lQ2FsbGJhY2sodGhpcy52aWRlb0ZyYW1lQ2FsbGJhY2tJZClcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5pc1ZpZGVvU291cmNlKSB7XHJcbiAgICAgIDsodGhpcy5zb3VyY2UgYXMgSFRNTFZpZGVvRWxlbWVudCkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcclxuICAgICAgICAnY2FucGxheXRocm91Z2gnLFxyXG4gICAgICAgIHRoaXMub25WaWRlb0xvYWRlZC5iaW5kKHRoaXMsIHRoaXMuc291cmNlKSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICBvbmNlOiB0cnVlLFxyXG4gICAgICAgIH0gYXMgQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnMgJiBFdmVudExpc3RlbmVyT3B0aW9uc1xyXG4gICAgICApXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlci5yZW1vdmVUZXh0dXJlKHRoaXMpXHJcblxyXG4gICAgdGhpcy50ZXh0dXJlPy5kZXN0cm95KClcclxuICAgIHRoaXMudGV4dHVyZSA9IG51bGxcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgQmluZEdyb3VwIH0gZnJvbSAnLi9CaW5kR3JvdXAnXG5pbXBvcnQgeyBpc1JlbmRlcmVyLCBSZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmVycy91dGlscydcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vLi4vY3VydGFpbnMvR1BVQ3VydGFpbnMnXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvVGV4dHVyZSdcbmltcG9ydCB7IFNhbXBsZXIgfSBmcm9tICcuLi9zYW1wbGVycy9TYW1wbGVyJ1xuaW1wb3J0IHsgQmluZEdyb3VwUGFyYW1zIH0gZnJvbSAnLi4vLi4vdHlwZXMvQmluZEdyb3VwcydcbmltcG9ydCB7IE1hdGVyaWFsVGV4dHVyZSB9IGZyb20gJy4uLy4uL3R5cGVzL01hdGVyaWFscydcblxuLyoqXG4gKiBBbiBvYmplY3QgZGVmaW5pbmcgYWxsIHBvc3NpYmxlIHtAbGluayBUZXh0dXJlQmluZEdyb3VwfSBjbGFzcyBpbnN0YW5jaW5nIHBhcmFtZXRlcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBUZXh0dXJlQmluZEdyb3VwUGFyYW1zIGV4dGVuZHMgQmluZEdyb3VwUGFyYW1zIHtcbiAgLyoqIGFycmF5IG9mIHtAbGluayBNYXRlcmlhbFRleHR1cmUgfCB0ZXh0dXJlc30gdG8gYWRkIHRvIGEge0BsaW5rIFRleHR1cmVCaW5kR3JvdXB9ICovXG4gIHRleHR1cmVzPzogTWF0ZXJpYWxUZXh0dXJlW11cbiAgLyoqIGFycmF5IG9mIHtAbGluayBTYW1wbGVyfSB0byBhZGQgdG8gYSB7QGxpbmsgVGV4dHVyZUJpbmRHcm91cH0gKi9cbiAgc2FtcGxlcnM/OiBTYW1wbGVyW11cbn1cblxuLyoqXG4gKiBVc2VkIHRvIHJlZ3JvdXAgYWxsIHtAbGluayB0eXBlcy9CaW5kR3JvdXBzLkJpbmRHcm91cEJpbmRpbmdFbGVtZW50IHwgYmluZGluZ3N9IHJlbGF0ZWQgdG8gdGV4dHVyZXMgKHRleHR1cmUsIHRleHR1cmUgbWF0cmljZXMgYnVmZmVycyBhbmQgc2FtcGxlcnMpIGludG8gb25lIHNpbmdsZSBzcGVjaWZpYyB7QGxpbmsgQmluZEdyb3VwfS5cbiAqXG4gKiBBbHNvIHJlc3BvbnNpYmxlIGZvciB1cGxvYWRpbmcgdmlkZW8gdGV4dHVyZXMgaWYgbmVlZGVkLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBzZXQgb3VyIG1haW4gR1BVQ3VydGFpbnMgaW5zdGFuY2VcbiAqIGNvbnN0IGdwdUN1cnRhaW5zID0gbmV3IEdQVUN1cnRhaW5zKHtcbiAqICAgY29udGFpbmVyOiAnI2NhbnZhcycgLy8gc2VsZWN0b3Igb2Ygb3VyIFdlYkdQVSBjYW52YXMgY29udGFpbmVyXG4gKiB9KVxuICpcbiAqIC8vIHNldCB0aGUgR1BVIGRldmljZVxuICogLy8gbm90ZSB0aGlzIGlzIGFzeW5jaHJvbm91c1xuICogYXdhaXQgZ3B1Q3VydGFpbnMuc2V0RGV2aWNlKClcbiAqXG4gKiAvLyBjcmVhdGUgYSByZW5kZXIgdGV4dHVyZVxuICogY29uc3QgcmVuZGVyVGV4dHVyZSA9IG5ldyBSZW5kZXJUZXh0dXJlKGdwdUN1cnRhaW5zLCB7XG4gKiAgIGxhYmVsOiAnSW5wdXQgdGV4dHVyZScsXG4gKiAgIG5hbWU6ICdpbnB1dFRleHR1cmUnLFxuICogfSlcbiAqXG4gKiAvLyBjcmVhdGUgYSB0ZXh0dXJlIGJpbmQgZ3JvdXAgdXNpbmcgdGhhdCByZW5kZXIgdGV4dHVyZVxuICogY29uc3QgdGV4dHVyZUJpbmRHcm91cCA9IG5ldyBUZXh0dXJlQmluZEdyb3VwKGdwdUN1cnRhaW5zLCB7XG4gKiAgIGxhYmVsOiAnTXkgdGV4dHVyZSBiaW5kIGdyb3VwJyxcbiAqICAgdGV4dHVyZXM6IFtyZW5kZXJUZXh0dXJlXSxcbiAqICAgdW5pZm9ybXM6IHtcbiAqICAgICBwYXJhbXM6IHtcbiAqICAgICAgIHN0cnVjdDoge1xuICogICAgICAgICBvcGFjaXR5OiB7XG4gKiAgICAgICAgICAgdHlwZTogJ2YzMicsXG4gKiAgICAgICAgICAgdmFsdWU6IDEsXG4gKiAgICAgICAgIH0sXG4gKiAgICAgICAgIG1vdXNlUG9zaXRpb246IHtcbiAqICAgICAgICAgICB0eXBlOiAndmVjMmYnLFxuICogICAgICAgICAgIHZhbHVlOiBuZXcgVmVjMigpLFxuICogICAgICAgICB9LFxuICogICAgICAgfSxcbiAqICAgICB9LFxuICogICB9LFxuICogfSlcbiAqXG4gKiAvLyBjcmVhdGUgdGhlIEdQVSBidWZmZXIsIGJpbmRHcm91cExheW91dCBhbmQgYmluZEdyb3VwXG4gKiB0ZXh0dXJlQmluZEdyb3VwLmNyZWF0ZUJpbmRHcm91cCgpXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFRleHR1cmVCaW5kR3JvdXAgZXh0ZW5kcyBCaW5kR3JvdXAge1xuICAvKipcbiAgICogVGV4dHVyZUJpbmRHcm91cCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gIHJlbmRlcmVyIC0gYSB7QGxpbmsgUmVuZGVyZXJ9IGNsYXNzIG9iamVjdCBvciBhIHtAbGluayBHUFVDdXJ0YWluc30gY2xhc3Mgb2JqZWN0XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIFRleHR1cmVCaW5kR3JvdXBQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSBvdXIge0BsaW5rIFRleHR1cmVCaW5kR3JvdXB9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICByZW5kZXJlcjogUmVuZGVyZXIgfCBHUFVDdXJ0YWlucyxcbiAgICB7IGxhYmVsLCBpbmRleCA9IDAsIGJpbmRpbmdzID0gW10sIHVuaWZvcm1zLCBzdG9yYWdlcywgdGV4dHVyZXMgPSBbXSwgc2FtcGxlcnMgPSBbXSB9OiBUZXh0dXJlQmluZEdyb3VwUGFyYW1zID0ge31cbiAgKSB7XG4gICAgY29uc3QgdHlwZSA9ICdUZXh0dXJlQmluZEdyb3VwJ1xuXG4gICAgLy8gd2UgY291bGQgcGFzcyBvdXIgY3VydGFpbnMgb2JqZWN0IE9SIG91ciBjdXJ0YWlucyByZW5kZXJlciBvYmplY3RcbiAgICByZW5kZXJlciA9IChyZW5kZXJlciAmJiAocmVuZGVyZXIgYXMgR1BVQ3VydGFpbnMpLnJlbmRlcmVyKSB8fCAocmVuZGVyZXIgYXMgUmVuZGVyZXIpXG5cbiAgICBpc1JlbmRlcmVyKHJlbmRlcmVyLCB0eXBlKVxuXG4gICAgc3VwZXIocmVuZGVyZXIsIHsgbGFiZWwsIGluZGV4LCBiaW5kaW5ncywgdW5pZm9ybXMsIHN0b3JhZ2VzIH0pXG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICAvLyB3aWxsIGJlIGZpbGxlZCBhZnRlclxuICAgICAgdGV4dHVyZXM6IFtdLFxuICAgICAgc2FtcGxlcnM6IFtdLFxuICAgIH1cblxuICAgIC8vIGFkZCBpbml0aWFsIHRleHR1cmVzIGlmIGFueVxuICAgIGlmICh0ZXh0dXJlcy5sZW5ndGgpIHtcbiAgICAgIHRleHR1cmVzLmZvckVhY2goKHRleHR1cmUpID0+IHRoaXMuYWRkVGV4dHVyZSh0ZXh0dXJlKSlcbiAgICB9XG5cbiAgICAvLyBhZGQgaW5pdGlhbCBzYW1wbGVycyBpZiBhbnlcbiAgICBpZiAoc2FtcGxlcnMubGVuZ3RoKSB7XG4gICAgICBzYW1wbGVycy5mb3JFYWNoKChzYW1wbGVyKSA9PiB0aGlzLmFkZFNhbXBsZXIoc2FtcGxlcikpXG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSB0ZXh0dXJlIHRvIHRoZSB0ZXh0dXJlcyBhcnJheSBhbmQgdGhlIHN0cnVjdFxuICAgKiBAcGFyYW0gdGV4dHVyZSAtIHRleHR1cmUgdG8gYWRkXG4gICAqL1xuICBhZGRUZXh0dXJlKHRleHR1cmU6IE1hdGVyaWFsVGV4dHVyZSkge1xuICAgIHRoaXMudGV4dHVyZXMucHVzaCh0ZXh0dXJlKVxuICAgIHRoaXMuYWRkQmluZGluZ3MoWy4uLnRleHR1cmUuYmluZGluZ3NdKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY3VycmVudCB0ZXh0dXJlcyBhcnJheVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCB0ZXh0dXJlcygpOiBNYXRlcmlhbFRleHR1cmVbXSB7XG4gICAgcmV0dXJuIHRoaXMub3B0aW9ucy50ZXh0dXJlc1xuICB9XG5cbiAgLyoqXG4gICAqIEFkZHMgYSBzYW1wbGVyIHRvIHRoZSBzYW1wbGVycyBhcnJheSBhbmQgdGhlIHN0cnVjdFxuICAgKiBAcGFyYW0gc2FtcGxlclxuICAgKi9cbiAgYWRkU2FtcGxlcihzYW1wbGVyOiBTYW1wbGVyKSB7XG4gICAgdGhpcy5zYW1wbGVycy5wdXNoKHNhbXBsZXIpXG4gICAgdGhpcy5hZGRCaW5kaW5ncyhbc2FtcGxlci5iaW5kaW5nXSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQgc2FtcGxlcnMgYXJyYXlcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgc2FtcGxlcnMoKTogU2FtcGxlcltdIHtcbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLnNhbXBsZXJzXG4gIH1cblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgdGhlIEdQVSBiaW5kIGdyb3VwIGlzIHJlYWR5IHRvIGJlIGNyZWF0ZWRcbiAgICogSXQgY2FuIGJlIGNyZWF0ZWQgaWYgaXQgaGFzIHtAbGluayBCaW5kR3JvdXAjYmluZGluZ3N9IGFuZCBoYXMgbm90IGJlZW4gY3JlYXRlZCB5ZXQgYW5kIGFsbCBHUFUgdGV4dHVyZXMgYW5kIHNhbXBsZXJzIGFyZSBjcmVhdGVkXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHNob3VsZENyZWF0ZUJpbmRHcm91cCgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gKFxuICAgICAgIXRoaXMuYmluZEdyb3VwICYmXG4gICAgICAhIXRoaXMuYmluZGluZ3MubGVuZ3RoICYmXG4gICAgICAhdGhpcy50ZXh0dXJlcy5maW5kKCh0ZXh0dXJlKSA9PiAhKHRleHR1cmUudGV4dHVyZSB8fCAodGV4dHVyZSBhcyBUZXh0dXJlKS5leHRlcm5hbFRleHR1cmUpKSAmJlxuICAgICAgIXRoaXMuc2FtcGxlcnMuZmluZCgoc2FtcGxlcikgPT4gIXNhbXBsZXIuc2FtcGxlcilcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIHRoZSB7QGxpbmsgVGV4dHVyZUJpbmRHcm91cCN0ZXh0dXJlcyB8IGJpbmQgZ3JvdXAgdGV4dHVyZXN9OlxuICAgKiAtIENoZWNrIGlmIHRoZXkgbmVlZCB0byBjb3B5IHRoZWlyIHNvdXJjZSB0ZXh0dXJlXG4gICAqIC0gVXBsb2FkIHZpZGVvIHRleHR1cmUgaWYgbmVlZGVkXG4gICAqL1xuICB1cGRhdGVUZXh0dXJlcygpIHtcbiAgICB0aGlzLnRleHR1cmVzLmZvckVhY2goKHRleHR1cmUsIHRleHR1cmVJbmRleCkgPT4ge1xuICAgICAgLy8gY29weSB0ZXh0dXJlcyB0aGF0IG5lZWQgaXQgb24gZmlyc3QgaW5pdCwgYnV0IG9ubHkgd2hlbiBvcmlnaW5hbCB0ZXh0dXJlIGlzIHJlYWR5XG4gICAgICBpZiAodGV4dHVyZSBpbnN0YW5jZW9mIFRleHR1cmUpIHtcbiAgICAgICAgaWYgKHRleHR1cmUub3B0aW9ucy5mcm9tVGV4dHVyZSAmJiB0ZXh0dXJlLm9wdGlvbnMuZnJvbVRleHR1cmUuc291cmNlVXBsb2FkZWQgJiYgIXRleHR1cmUuc291cmNlVXBsb2FkZWQpIHtcbiAgICAgICAgICB0ZXh0dXJlLmNvcHkodGV4dHVyZS5vcHRpb25zLmZyb21UZXh0dXJlKVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRleHR1cmUuc2hvdWxkVXBkYXRlICYmIHRleHR1cmUub3B0aW9ucy5zb3VyY2VUeXBlICYmIHRleHR1cmUub3B0aW9ucy5zb3VyY2VUeXBlID09PSAnZXh0ZXJuYWxWaWRlbycpIHtcbiAgICAgICAgICB0ZXh0dXJlLnVwbG9hZFZpZGVvVGV4dHVyZSgpXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUge0BsaW5rIFRleHR1cmVCaW5kR3JvdXB9LCB3aGljaCBtZWFucyB1cGRhdGUgaXRzIHtAbGluayBUZXh0dXJlQmluZEdyb3VwI3RleHR1cmVzIHwgdGV4dHVyZXN9LCB0aGVuIHVwZGF0ZSBpdHMge0BsaW5rIFRleHR1cmVCaW5kR3JvdXAjYnVmZmVyQmluZGluZ3MgfCBidWZmZXIgYmluZGluZ3N9IGFuZCBmaW5hbGx5IHtAbGluayBUZXh0dXJlQmluZEdyb3VwI3Jlc2V0QmluZEdyb3VwIHwgcmVzZXQgaXR9IGlmIG5lZWRlZFxuICAgKi9cbiAgdXBkYXRlKCkge1xuICAgIHRoaXMudXBkYXRlVGV4dHVyZXMoKVxuICAgIHN1cGVyLnVwZGF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSBvdXIge0BsaW5rIFRleHR1cmVCaW5kR3JvdXB9XG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHN1cGVyLmRlc3Ryb3koKVxuICAgIHRoaXMub3B0aW9ucy50ZXh0dXJlcyA9IFtdXG4gICAgdGhpcy5vcHRpb25zLnNhbXBsZXJzID0gW11cbiAgfVxufVxuIiwiaW1wb3J0IHsgQmluZGluZywgQmluZGluZ1BhcmFtcyB9IGZyb20gJy4vQmluZGluZydcbmltcG9ydCB7IFNhbXBsZXJPcHRpb25zIH0gZnJvbSAnLi4vc2FtcGxlcnMvU2FtcGxlcidcblxuLyoqIERlZmluZXMgYSB7QGxpbmsgU2FtcGxlckJpbmRpbmd9IHtAbGluayBTYW1wbGVyQmluZGluZyNyZXNvdXJjZSB8IHJlc291cmNlfSAqL1xuZXhwb3J0IHR5cGUgU2FtcGxlckJpbmRpbmdSZXNvdXJjZSA9IEdQVVNhbXBsZXIgfCBudWxsXG5cbi8qKlxuICogQW4gb2JqZWN0IGRlZmluaW5nIGFsbCBwb3NzaWJsZSB7QGxpbmsgU2FtcGxlckJpbmRpbmd9IGNsYXNzIGluc3RhbmNpbmcgcGFyYW1ldGVyc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFNhbXBsZXJCaW5kaW5nUGFyYW1zIGV4dGVuZHMgQmluZGluZ1BhcmFtcyB7XG4gIC8qKiB7QGxpbmsgU2FtcGxlckJpbmRpbmd9IHtAbGluayBHUFVCaW5kR3JvdXAgfCBHUFUgYmluZCBncm91cH0gcmVzb3VyY2UgKi9cbiAgc2FtcGxlcjogU2FtcGxlckJpbmRpbmdSZXNvdXJjZVxuICAvKiogVGhlIGJpbmQgZ3JvdXAgbGF5b3V0IGJpbmRpbmcge0BsaW5rIEdQVVNhbXBsZXJCaW5kaW5nTGF5b3V0I3R5cGUgfCB0eXBlfSBvZiB0aGlzIHtAbGluayBHUFVTYW1wbGVyIHwgR1BVIHNhbXBsZXJ9ICovXG4gIHR5cGU6IFNhbXBsZXJPcHRpb25zWyd0eXBlJ11cbn1cblxuLyoqXG4gKiBVc2VkIHRvIGhhbmRsZSBHUFVTYW1wbGVyIGJpbmRpbmdzLlxuICpcbiAqIFByb3ZpZGUgYm90aCB7QGxpbmsgU2FtcGxlckJpbmRpbmcjcmVzb3VyY2VMYXlvdXQgfCByZXNvdXJjZUxheW91dH0gYW5kIHtAbGluayBTYW1wbGVyQmluZGluZyNyZXNvdXJjZSB8IHJlc291cmNlfSB0byB0aGUge0BsaW5rIEdQVUJpbmRHcm91cExheW91dH0gYW5kIHtAbGluayBHUFVCaW5kR3JvdXB9Ljxicj5cbiAqIEFsc28gY3JlYXRlIHRoZSBhcHByb3ByaWF0ZSBXR1NMIGNvZGUgc25pcHBldCB0byBhZGQgdG8gdGhlIHNoYWRlcnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW1wbGVyQmluZGluZyBleHRlbmRzIEJpbmRpbmcge1xuICAvKiogT3VyIHtAbGluayBTYW1wbGVyQmluZGluZ30gcmVzb3VyY2UsIGkuZS4gYSB7QGxpbmsgR1BVU2FtcGxlcn0gKi9cbiAgc2FtcGxlcjogU2FtcGxlckJpbmRpbmdSZXNvdXJjZVxuICAvKiogQW4gYXJyYXkgb2Ygc3RyaW5ncyB0byBhcHBlbmQgdG8gb3VyIHNoYWRlcnMgY29kZSBkZWNsYXJpbmcgYWxsIHRoZSBXR1NMIHZhcmlhYmxlcyByZXByZXNlbnRpbmcgdGhpcyB7QGxpbmsgU2FtcGxlckJpbmRpbmd9ICovXG4gIHdnc2xHcm91cEZyYWdtZW50OiBzdHJpbmdbXVxuICAvKiogT3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBTYW1wbGVyQmluZGluZ30gKi9cbiAgb3B0aW9uczogU2FtcGxlckJpbmRpbmdQYXJhbXNcblxuICAvKipcbiAgICogU2FtcGxlckJpbmRpbmcgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgU2FtcGxlckJpbmRpbmdQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSBvdXIgU2FtcGxlckJpbmRpbmdzXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgbGFiZWwgPSAnU2FtcGxlcicsXG4gICAgbmFtZSA9ICdzYW1wbGVyJyxcbiAgICBiaW5kaW5nVHlwZSxcbiAgICB2aXNpYmlsaXR5LFxuICAgIHNhbXBsZXIsXG4gICAgdHlwZSA9ICdmaWx0ZXJpbmcnLFxuICB9OiBTYW1wbGVyQmluZGluZ1BhcmFtcykge1xuICAgIGJpbmRpbmdUeXBlID0gYmluZGluZ1R5cGUgPz8gJ3NhbXBsZXInXG5cbiAgICBzdXBlcih7IGxhYmVsLCBuYW1lLCBiaW5kaW5nVHlwZSwgdmlzaWJpbGl0eSB9KVxuXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgc2FtcGxlcixcbiAgICAgIHR5cGUsXG4gICAgfVxuXG4gICAgdGhpcy5yZXNvdXJjZSA9IHNhbXBsZXIgLy8gc2hvdWxkIGJlIGEgc2FtcGxlclxuXG4gICAgdGhpcy5zZXRXR1NMRnJhZ21lbnQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB7QGxpbmsgR1BVQmluZEdyb3VwTGF5b3V0RW50cnkjc2FtcGxlciB8IGJpbmQgZ3JvdXAgbGF5b3V0IGVudHJ5IHJlc291cmNlfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCByZXNvdXJjZUxheW91dCgpOiB7XG4gICAgLyoqIHtAbGluayBHUFVCaW5kR3JvdXBMYXlvdXQgfCBiaW5kIGdyb3VwIGxheW91dH0gcmVzb3VyY2UgKi9cbiAgICBzYW1wbGVyOiBHUFVTYW1wbGVyQmluZGluZ0xheW91dFxuICB9IHtcbiAgICByZXR1cm4ge1xuICAgICAgc2FtcGxlcjoge1xuICAgICAgICB0eXBlOiB0aGlzLm9wdGlvbnMudHlwZSwgLy8gVE9ETyBzZXQgc2hvdWxkUmVzZXRCaW5kR3JvdXBMYXlvdXQgdG8gdHJ1ZSBpZiBpdCBjaGFuZ2VzIGFmdGVyd2FyZHNcbiAgICAgIH0sXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUge0BsaW5rIEdQVUJpbmRHcm91cEVudHJ5I3Jlc291cmNlIHwgYmluZCBncm91cCByZXNvdXJjZX1cbiAgICovXG4gIGdldCByZXNvdXJjZSgpOiBTYW1wbGVyQmluZGluZ1Jlc291cmNlIHtcbiAgICByZXR1cm4gdGhpcy5zYW1wbGVyXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB7QGxpbmsgR1BVQmluZEdyb3VwRW50cnkjcmVzb3VyY2UgfCBiaW5kIGdyb3VwIHJlc291cmNlfVxuICAgKiBAcGFyYW0gdmFsdWUgLSBuZXcgYmluZCBncm91cCByZXNvdXJjZVxuICAgKi9cbiAgc2V0IHJlc291cmNlKHZhbHVlOiBTYW1wbGVyQmluZGluZ1Jlc291cmNlKSB7XG4gICAgLy8gcmVzb3VyY2UgY2hhbmdlZCwgdXBkYXRlIGJpbmQgZ3JvdXAhXG4gICAgaWYgKHZhbHVlICYmIHRoaXMuc2FtcGxlcikgdGhpcy5zaG91bGRSZXNldEJpbmRHcm91cCA9IHRydWVcbiAgICB0aGlzLnNhbXBsZXIgPSB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY29ycmVjdCBXR1NMIGNvZGUgc25pcHBldC5cbiAgICovXG4gIHNldFdHU0xGcmFnbWVudCgpIHtcbiAgICB0aGlzLndnc2xHcm91cEZyYWdtZW50ID0gW2B2YXIgJHt0aGlzLm5hbWV9OiAke3RoaXMuYmluZGluZ1R5cGV9O2BdXG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdDQgfSBmcm9tICcuLi8uLi9tYXRoL01hdDQnXG5pbXBvcnQgeyBPYmplY3QzRCwgT2JqZWN0M0RNYXRyaWNlc1R5cGUsIE9iamVjdDNEVHJhbnNmb3JtTWF0cml4IH0gZnJvbSAnLi4vb2JqZWN0czNEL09iamVjdDNEJ1xuaW1wb3J0IHsgUmVjdFNpemUgfSBmcm9tICcuLi9ET00vRE9NRWxlbWVudCdcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlYzMnXG5cbi8qKlxuICogRGVmaW5lcyBDYW1lcmEgYmFzaWMgcGVyc3BlY3RpdmUgb3B0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENhbWVyYUJhc2VQZXJzcGVjdGl2ZU9wdGlvbnMge1xuICAvKioge0BsaW5rIENhbWVyYX0gcGVyc3BlY3RpdmUgZmllbGQgb2Ygdmlldy4gU2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiAwIGFuZCBsb3dlciB0aGFuIDE4MCAqL1xuICBmb3Y/OiBudW1iZXJcbiAgLyoqIHtAbGluayBDYW1lcmF9IG5lYXIgcGxhbmUsIHRoZSBjbG9zZXN0IHBvaW50IHdoZXJlIGEgbWVzaCB2ZXJ0ZXggaXMgZHJhd24gKi9cbiAgbmVhcj86IG51bWJlclxuICAvKioge0BsaW5rIENhbWVyYX0gZmFyIHBsYW5lLCB0aGUgZmFydGhlc3QgcG9pbnQgd2hlcmUgYSBtZXNoIHZlcnRleCBpcyBkcmF3biAqL1xuICBmYXI/OiBudW1iZXJcbn1cblxuLyoqXG4gKiBEZWZpbmVzIGFsbCBDYW1lcmEgcGVyc3BlY3RpdmUgb3B0aW9uc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENhbWVyYVBlcnNwZWN0aXZlT3B0aW9ucyBleHRlbmRzIENhbWVyYUJhc2VQZXJzcGVjdGl2ZU9wdGlvbnMge1xuICAvKioge0BsaW5rIENhbWVyYX0gZnJ1c3R1bSB3aWR0aCAqL1xuICB3aWR0aD86IG51bWJlclxuICAvKioge0BsaW5rIENhbWVyYX0gZnJ1c3R1bSBoZWlnaHQgKi9cbiAgaGVpZ2h0PzogbnVtYmVyXG4gIC8qKiB7QGxpbmsgQ2FtZXJhfSBwaXhlbCByYXRpbyAqL1xuICBwaXhlbFJhdGlvPzogbnVtYmVyXG59XG5cbi8qKlxuICogQW4gb2JqZWN0IGRlZmluaW5nIGFsbCBwb3NzaWJsZSB7QGxpbmsgQ2FtZXJhfSBjbGFzcyBpbnN0YW5jaW5nIHBhcmFtZXRlcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDYW1lcmFQYXJhbXMgZXh0ZW5kcyBDYW1lcmFQZXJzcGVjdGl2ZU9wdGlvbnMge1xuICAvKiogY2FsbGJhY2sgdG8gZXhlY3V0ZSB3aGVuIG9uZSBvZiB0aGUge0BsaW5rIENhbWVyYSNtYXRyaWNlcyB8IGNhbWVyYSBtYXRyaWNlc30gY2hhbmdlZCAqL1xuICBvbk1hdHJpY2VzQ2hhbmdlZD86ICgpID0+IHZvaWRcbn1cblxuLyoqIERlZmluZXMgYWxsIGtpbmQgb2YgcG9zc2libGUge0BsaW5rIGNvcmUvb2JqZWN0czNEL1Byb2plY3RlZE9iamVjdDNELlByb2plY3RlZE9iamVjdDNEIHwgUHJvamVjdGVkT2JqZWN0M0R9IG1hdHJpeCB0eXBlcyAqL1xuZXhwb3J0IHR5cGUgQ2FtZXJhT2JqZWN0M0RNYXRyaWNlc1R5cGUgPSBPYmplY3QzRE1hdHJpY2VzVHlwZSB8ICdwcm9qZWN0aW9uJyB8ICd2aWV3J1xuLyoqIERlZmluZXMgYWxsIHBvc3NpYmxlIHtAbGluayBPYmplY3QzRFRyYW5zZm9ybU1hdHJpeCB8IG1hdHJpeCBvYmplY3R9IHVzZWQgYnkgb3VyIHtAbGluayBjb3JlL29iamVjdHMzRC9Qcm9qZWN0ZWRPYmplY3QzRC5Qcm9qZWN0ZWRPYmplY3QzRCB8IFByb2plY3RlZE9iamVjdDNEfSAqL1xuZXhwb3J0IHR5cGUgQ2FtZXJhT2JqZWN0M0RNYXRyaWNlcyA9IFJlY29yZDxDYW1lcmFPYmplY3QzRE1hdHJpY2VzVHlwZSwgT2JqZWN0M0RUcmFuc2Zvcm1NYXRyaXg+XG5cbi8qKlxuICogVXNlZCB0byBjcmVhdGUgYSBwZXJzcGVjdGl2ZSB7QGxpbmsgQ2FtZXJhfSBhbmQgaXRzIHByb2plY3Rpb24sIG1vZGVsIGFuZCB2aWV3IG1hdHJpY2VzLlxuICpcbiAqIHtAbGluayBjdXJ0YWlucy9yZW5kZXJlcnMvR1BVQ3VydGFpbnNSZW5kZXJlci5HUFVDdXJ0YWluc1JlbmRlcmVyIHwgR1BVQ3VydGFpbnNSZW5kZXJlcn0gYW5kIHtAbGluayBjb3JlL3JlbmRlcmVycy9HUFVDYW1lcmFSZW5kZXJlci5HUFVDYW1lcmFSZW5kZXJlciB8IEdQVUNhbWVyYVJlbmRlcmVyfSBhdXRvbWF0aWNhbGx5IGNyZWF0ZSB0aGVpciBvd24ge0BsaW5rIENhbWVyYX0gdW5kZXIgdGhlIGhvb2QsIHNvIGl0IGlzIHVubGlrZWx5IHlvdSdkIGhhdmUgdG8gY3JlYXRlIG9uZSBieSB5b3Vyc2VsZi5cbiAqXG4gKiB7QGxpbmsgQ2FtZXJhfSBkZWZhdWx0IHBlcnNwZWN0aXZlIHNldHRpbmdzIGFyZTpcbiAqIC0ge0BsaW5rIENhbWVyYSNmb3YgfCBmaWVsZCBvZiB2aWV3fTogNTBcbiAqIC0ge0BsaW5rIENhbWVyYSNuZWFyIHwgbmVhciBwbGFuZX06IDAuMDFcbiAqIC0ge0BsaW5rIENhbWVyYSNmYXIgfCBmYXIgcGxhbmV9OiAxNTBcbiAqXG4gKiBBbHNvIG5vdGUgdGhhdCB0aGUge0BsaW5rIENhbWVyYX0gZGVmYXVsdCB7QGxpbmsgQ2FtZXJhI3Bvc2l0aW9uIHwgcG9zaXRpb259IGlzIHNldCBhdCBgKDAsIDAsIDEwKWAgc28gdGhlIG9iamVjdCBjcmVhdGVkIHdpdGggYSBkZWZhdWx0IHNpemUgZG8gbm90IGFwcGVhciB0b28gYmlnIG5vciB0b28gc21hbGwuXG4gKi9cbmV4cG9ydCBjbGFzcyBDYW1lcmEgZXh0ZW5kcyBPYmplY3QzRCB7XG4gIC8qKiB7QGxpbmsgQ2FtZXJhT2JqZWN0M0RNYXRyaWNlcyB8IE1hdHJpY2VzIG9iamVjdH0gb2YgdGhlIHtAbGluayBDYW1lcmF9ICovXG4gIG1hdHJpY2VzOiBDYW1lcmFPYmplY3QzRE1hdHJpY2VzXG5cbiAgLyoqIFByaXZhdGUge0BsaW5rIENhbWVyYX0gZmllbGQgb2YgdmlldyAqL1xuICAjZm92OiBudW1iZXJcbiAgLyoqIFByaXZhdGUge0BsaW5rIENhbWVyYX0gbmVhciBwbGFuZSAqL1xuICAjbmVhcjogbnVtYmVyXG4gIC8qKiBQcml2YXRlIHtAbGluayBDYW1lcmF9IGZhciBwbGFuZSAqL1xuICAjZmFyOiBudW1iZXJcblxuICAvKiogVGhlIHtAbGluayBDYW1lcmF9IGZydXN0dW0gd2lkdGggYW5kIGhlaWdodCAqL1xuICBzaXplOiBSZWN0U2l6ZVxuICAvKiogUHJpdmF0ZSB7QGxpbmsgQ2FtZXJhfSBwaXhlbCByYXRpbywgdXNlZCBpbiB7QGxpbmsgQ1NTUGVyc3BlY3RpdmV9IGNhbGNzICovXG4gICNwaXhlbFJhdGlvOiBudW1iZXJcblxuICAvKiogQ2FsbGJhY2sgdG8gZXhlY3V0ZSB3aGVuIG9uZSBvZiB0aGUgY2FtZXJhIHtAbGluayBtYXRyaWNlc30gY2hhbmdlZCAqL1xuICBvbk1hdHJpY2VzQ2hhbmdlZD86ICgpID0+IHZvaWRcblxuICAvKiogQSBudW1iZXIgcmVwcmVzZW50aW5nIHdoYXQgQ1NTIHBlcnNwZWN0aXZlIHZhbHVlIChpbiBwaXhlbCkgc2hvdWxkIGJlIHVzZWQgdG8gb2J0YWluIHRoZSBzYW1lIHBlcnNwZWN0aXZlIGVmZmVjdCBhcyB0aGlzIHtAbGluayBDYW1lcmF9ICovXG4gIENTU1BlcnNwZWN0aXZlOiBudW1iZXJcbiAgLyoqIEFuIG9iamVjdCBjb250YWluaW5nIHRoZSB2aXNpYmxlIHdpZHRoIC8gaGVpZ2h0IGF0IGEgZ2l2ZW4gei1kZXB0aCBmcm9tIG91ciBjYW1lcmEgcGFyYW1ldGVycyAqL1xuICBzY3JlZW5SYXRpbzogUmVjdFNpemVcblxuICAvKipcbiAgICogQ2FtZXJhIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIENhbWVyYVBhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIG91ciB7QGxpbmsgQ2FtZXJhfVxuICAgKi9cbiAgY29uc3RydWN0b3IoXG4gICAge1xuICAgICAgZm92ID0gNTAsXG4gICAgICBuZWFyID0gMC4wMSxcbiAgICAgIGZhciA9IDE1MCxcbiAgICAgIHdpZHRoID0gMSxcbiAgICAgIGhlaWdodCA9IDEsXG4gICAgICBwaXhlbFJhdGlvID0gMSxcbiAgICAgIG9uTWF0cmljZXNDaGFuZ2VkID0gKCkgPT4ge1xuICAgICAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xuICAgICAgfSxcbiAgICB9ID0ge30gYXMgQ2FtZXJhUGFyYW1zXG4gICkge1xuICAgIC8vIE9iamVjdDNEXG4gICAgc3VwZXIoKVxuXG4gICAgLy8gY2FtZXJhIGNhbid0IGJlIGF0IHBvc2l0aW9uICgwLCAwLCAwKSwgaXQgbmVlZHMgc29tZSByZWNvaWxcbiAgICAvLyBhcmJpdHJhcmlseSBzZXQgdG8gMTAgc28gb2JqZWN0cyBvZiBkZWZhdWx0IHNpemUgKDEsIDEsIDEpIGRvbid0IGFwcGVhciB0b28gYmlnXG4gICAgdGhpcy5wb3NpdGlvbi5zZXQoMCwgMCwgMTApXG5cbiAgICAvLyBjYWxsYmFjayB0byBydW4gaWYgYW55IG9mIHRoZSBtYXRyaWNlcyBjaGFuZ2VkXG4gICAgdGhpcy5vbk1hdHJpY2VzQ2hhbmdlZCA9IG9uTWF0cmljZXNDaGFuZ2VkXG5cbiAgICAvLyBjcmVhdGUgc2l6ZSBvYmplY3QsIHdpbGwgYmUgc2V0IHJpZ2h0IGFmdGVyXG4gICAgdGhpcy5zaXplID0ge1xuICAgICAgd2lkdGg6IDEsXG4gICAgICBoZWlnaHQ6IDEsXG4gICAgfVxuXG4gICAgdGhpcy5zZXRQZXJzcGVjdGl2ZSh7IGZvdiwgbmVhciwgZmFyLCB3aWR0aCwgaGVpZ2h0LCBwaXhlbFJhdGlvIH0pXG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciB0cmFuc2Zvcm0gYW5kIHByb2plY3Rpb24gbWF0cmljZXNcbiAgICovXG4gIHNldE1hdHJpY2VzKCkge1xuICAgIHN1cGVyLnNldE1hdHJpY2VzKClcblxuICAgIHRoaXMubWF0cmljZXMgPSB7XG4gICAgICAuLi50aGlzLm1hdHJpY2VzLFxuICAgICAgdmlldzoge1xuICAgICAgICBtYXRyaXg6IG5ldyBNYXQ0KCksXG4gICAgICAgIHNob3VsZFVwZGF0ZTogZmFsc2UsXG4gICAgICAgIG9uVXBkYXRlOiAoKSA9PiB7XG4gICAgICAgICAgdGhpcy52aWV3TWF0cml4LmNvcHkodGhpcy5tb2RlbE1hdHJpeCkuaW52ZXJ0KClcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgICBwcm9qZWN0aW9uOiB7XG4gICAgICAgIG1hdHJpeDogbmV3IE1hdDQoKSxcbiAgICAgICAgc2hvdWxkVXBkYXRlOiBmYWxzZSxcbiAgICAgICAgb25VcGRhdGU6ICgpID0+IHRoaXMudXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpLFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciB2aWV3IG1hdHJpeFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCB2aWV3TWF0cml4KCk6IE1hdDQge1xuICAgIHJldHVybiB0aGlzLm1hdHJpY2VzLnZpZXcubWF0cml4XG4gIH1cblxuICBzZXQgdmlld01hdHJpeCh2YWx1ZTogTWF0NCkge1xuICAgIHRoaXMubWF0cmljZXMudmlldy5tYXRyaXggPSB2YWx1ZVxuICAgIHRoaXMubWF0cmljZXMudmlldy5zaG91bGRVcGRhdGUgPSB0cnVlXG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciBwcm9qZWN0aW9uIG1hdHJpeFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBwcm9qZWN0aW9uTWF0cml4KCk6IE1hdDQge1xuICAgIHJldHVybiB0aGlzLm1hdHJpY2VzLnByb2plY3Rpb24ubWF0cml4XG4gIH1cblxuICBzZXQgcHJvamVjdGlvbk1hdHJpeCh2YWx1ZTogTWF0NCkge1xuICAgIHRoaXMubWF0cmljZXMucHJvamVjdGlvbi5tYXRyaXggPSB2YWx1ZVxuICAgIHRoaXMuc2hvdWxkVXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpXG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciBwcm9qZWN0aW9uIG1hdHJpeCBzaG91bGRVcGRhdGUgZmxhZyB0byB0cnVlICh0ZWxsIGl0IHRvIHVwZGF0ZSlcbiAgICovXG4gIHNob3VsZFVwZGF0ZVByb2plY3Rpb25NYXRyaXgoKSB7XG4gICAgdGhpcy5tYXRyaWNlcy5wcm9qZWN0aW9uLnNob3VsZFVwZGF0ZSA9IHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgb3VyIG1vZGVsIG1hdHJpeCBhbmQgdGVsbCBvdXIgdmlldyBtYXRyaXggdG8gdXBkYXRlIGFzIHdlbGxcbiAgICovXG4gIHVwZGF0ZU1vZGVsTWF0cml4KCkge1xuICAgIHN1cGVyLnVwZGF0ZU1vZGVsTWF0cml4KClcbiAgICB0aGlzLnNldFNjcmVlblJhdGlvcygpXG4gICAgdGhpcy5tYXRyaWNlcy52aWV3LnNob3VsZFVwZGF0ZSA9IHRydWVcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHtAbGluayBDYW1lcmF9IHtAbGluayBmb3YgfCBmaWVsZCBvZiB2aWV3fVxuICAgKi9cbiAgZ2V0IGZvdigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLiNmb3ZcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHtAbGluayBDYW1lcmF9IHtAbGluayBmb3YgfCBmaWVsZCBvZiB2aWV3fS4gVXBkYXRlIHRoZSB7QGxpbmsgcHJvamVjdGlvbk1hdHJpeH0gb25seSBpZiB0aGUgZmllbGQgb2YgdmlldyBhY3R1YWxseSBjaGFuZ2VkXG4gICAqIEBwYXJhbSBmb3YgLSBuZXcgZmllbGQgb2Ygdmlld1xuICAgKi9cbiAgc2V0IGZvdihmb3Y6IG51bWJlcikge1xuICAgIC8vIGNsYW1wIGJldHdlZW4gMSBhbmQgMTc5XG4gICAgZm92ID0gTWF0aC5tYXgoMSwgTWF0aC5taW4oZm92ID8/IHRoaXMuZm92LCAxNzkpKVxuXG4gICAgaWYgKGZvdiAhPT0gdGhpcy5mb3YpIHtcbiAgICAgIHRoaXMuI2ZvdiA9IGZvdlxuICAgICAgdGhpcy5zaG91bGRVcGRhdGVQcm9qZWN0aW9uTWF0cml4KClcbiAgICB9XG5cbiAgICB0aGlzLnNldFNjcmVlblJhdGlvcygpXG4gICAgdGhpcy5zZXRDU1NQZXJzcGVjdGl2ZSgpXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB7QGxpbmsgQ2FtZXJhfSB7QGxpbmsgbmVhcn0gcGxhbmUgdmFsdWUuXG4gICAqL1xuICBnZXQgbmVhcigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLiNuZWFyXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB7QGxpbmsgQ2FtZXJhfSB7QGxpbmsgbmVhcn0gcGxhbmUgdmFsdWUuIFVwZGF0ZSB0aGUge0BsaW5rIHByb2plY3Rpb25NYXRyaXh9IG9ubHkgaWYgdGhlIG5lYXIgcGxhbmUgYWN0dWFsbHkgY2hhbmdlZFxuICAgKiBAcGFyYW0gbmVhciAtIG5ldyBuZWFyIHBsYW5lIHZhbHVlXG4gICAqL1xuICBzZXQgbmVhcihuZWFyOiBudW1iZXIpIHtcbiAgICBuZWFyID0gTWF0aC5tYXgobmVhciA/PyB0aGlzLm5lYXIsIDAuMDEpXG5cbiAgICBpZiAobmVhciAhPT0gdGhpcy5uZWFyKSB7XG4gICAgICB0aGlzLiNuZWFyID0gbmVhclxuICAgICAgdGhpcy5zaG91bGRVcGRhdGVQcm9qZWN0aW9uTWF0cml4KClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IC8gc2V0IHRoZSB7QGxpbmsgQ2FtZXJhfSB7QGxpbmsgZmFyfSBwbGFuZSB2YWx1ZS5cbiAgICovXG4gIGdldCBmYXIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy4jZmFyXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB7QGxpbmsgQ2FtZXJhfSB7QGxpbmsgZmFyfSBwbGFuZSB2YWx1ZS4gVXBkYXRlIHtAbGluayBwcm9qZWN0aW9uTWF0cml4fSBvbmx5IGlmIHRoZSBmYXIgcGxhbmUgYWN0dWFsbHkgY2hhbmdlZFxuICAgKiBAcGFyYW0gZmFyIC0gbmV3IGZhciBwbGFuZSB2YWx1ZVxuICAgKi9cbiAgc2V0IGZhcihmYXI6IG51bWJlcikge1xuICAgIGZhciA9IE1hdGgubWF4KGZhciA/PyB0aGlzLmZhciwgdGhpcy5uZWFyICsgMSlcblxuICAgIGlmIChmYXIgIT09IHRoaXMuZmFyKSB7XG4gICAgICB0aGlzLiNmYXIgPSBmYXJcbiAgICAgIHRoaXMuc2hvdWxkVXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUge0BsaW5rIENhbWVyYX0ge0BsaW5rIHBpeGVsUmF0aW99IHZhbHVlLlxuICAgKi9cbiAgZ2V0IHBpeGVsUmF0aW8oKSB7XG4gICAgcmV0dXJuIHRoaXMuI3BpeGVsUmF0aW9cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHtAbGluayBDYW1lcmF9IHtAbGluayBwaXhlbFJhdGlvfSB2YWx1ZS4gVXBkYXRlIHRoZSB7QGxpbmsgQ1NTUGVyc3BlY3RpdmV9IG9ubHkgaWYgdGhlIHBpeGVsIHJhdGlvIGFjdHVhbGx5IGNoYW5nZWRcbiAgICogQHBhcmFtIHBpeGVsUmF0aW8gLSBuZXcgcGl4ZWwgcmF0aW8gdmFsdWVcbiAgICovXG4gIHNldCBwaXhlbFJhdGlvKHBpeGVsUmF0aW86IG51bWJlcikge1xuICAgIHRoaXMuI3BpeGVsUmF0aW8gPSBwaXhlbFJhdGlvID8/IHRoaXMucGl4ZWxSYXRpb1xuICAgIHRoaXMuc2V0Q1NTUGVyc3BlY3RpdmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUge0BsaW5rIENhbWVyYX0ge0BsaW5rIHdpZHRofSBhbmQge0BsaW5rIGhlaWdodH0uIFVwZGF0ZSB0aGUge0BsaW5rIHByb2plY3Rpb25NYXRyaXh9IG9ubHkgaWYgdGhlIHdpZHRoIG9yIGhlaWdodCBhY3R1YWxseSBjaGFuZ2VkXG4gICAqIEBwYXJhbSBzaXplIC0ge0BsaW5rIHdpZHRofSBhbmQge0BsaW5rIGhlaWdodH0gdmFsdWVzIHRvIHVzZVxuICAgKi9cbiAgc2V0U2l6ZSh7IHdpZHRoLCBoZWlnaHQgfTogUmVjdFNpemUpIHtcbiAgICBpZiAod2lkdGggIT09IHRoaXMuc2l6ZS53aWR0aCB8fCBoZWlnaHQgIT09IHRoaXMuc2l6ZS5oZWlnaHQpIHtcbiAgICAgIHRoaXMuc2hvdWxkVXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpXG4gICAgfVxuXG4gICAgdGhpcy5zaXplLndpZHRoID0gd2lkdGhcbiAgICB0aGlzLnNpemUuaGVpZ2h0ID0gaGVpZ2h0XG5cbiAgICB0aGlzLnNldFNjcmVlblJhdGlvcygpXG4gICAgdGhpcy5zZXRDU1NQZXJzcGVjdGl2ZSgpXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUge0BsaW5rIENhbWVyYX0gcGVyc3BlY3RpdmUuIFVwZGF0ZSB0aGUge0BsaW5rIHByb2plY3Rpb25NYXRyaXh9IGlmIG5lZWRlZC5cbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgQ2FtZXJhUGVyc3BlY3RpdmVPcHRpb25zIHwgcGFyYW1ldGVyc30gdG8gdXNlIGZvciB0aGUgcGVyc3BlY3RpdmVcbiAgICovXG4gIHNldFBlcnNwZWN0aXZlKHtcbiAgICBmb3YgPSB0aGlzLmZvdixcbiAgICBuZWFyID0gdGhpcy5uZWFyLFxuICAgIGZhciA9IHRoaXMuZmFyLFxuICAgIHdpZHRoID0gdGhpcy5zaXplLndpZHRoLFxuICAgIGhlaWdodCA9IHRoaXMuc2l6ZS5oZWlnaHQsXG4gICAgcGl4ZWxSYXRpbyA9IHRoaXMucGl4ZWxSYXRpbyxcbiAgfTogQ2FtZXJhUGVyc3BlY3RpdmVPcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnNldFNpemUoeyB3aWR0aCwgaGVpZ2h0IH0pXG4gICAgdGhpcy5waXhlbFJhdGlvID0gcGl4ZWxSYXRpb1xuICAgIHRoaXMuZm92ID0gZm92XG4gICAgdGhpcy5uZWFyID0gbmVhclxuICAgIHRoaXMuZmFyID0gZmFyXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIGNhbWVyYSB7QGxpbmsgbW9kZWxNYXRyaXggfCBtb2RlbCBtYXRyaXh9IGhhcyBiZWVuIHVwZGF0ZWRcbiAgICovXG4gIG9uQWZ0ZXJNYXRyaXhTdGFja1VwZGF0ZSgpIHtcbiAgICAvLyBjYWxsYmFjayBiZWNhdXNlIG1hdHJpY2VzIGNoYW5nZWRcbiAgICB0aGlzLm9uTWF0cmljZXNDaGFuZ2VkKClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGEge0BsaW5rIENTU1BlcnNwZWN0aXZlfSBwcm9wZXJ0eSBiYXNlZCBvbiB7QGxpbmsgc2l6ZX0sIHtAbGluayBwaXhlbFJhdGlvfSBhbmQge0BsaW5rIGZvdn0uPGJyPlxuICAgKiBVc2VkIHRvIHRyYW5zbGF0ZSBwbGFuZXMgYWxvbmcgdGhlIFogYXhpcyB1c2luZyBwaXhlbCB1bml0cyBhcyBDU1Mgd291bGQgZG8uPGJyPlxuICAgKiB7QGxpbmsgaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMjI0MjE0MzkvY29udmVydC1maWVsZC1vZi12aWV3LXZhbHVlLXRvLWNzczNkLXBlcnNwZWN0aXZlLXZhbHVlIHwgU2VlIHJlZmVyZW5jZX1cbiAgICovXG4gIHNldENTU1BlcnNwZWN0aXZlKCkge1xuICAgIHRoaXMuQ1NTUGVyc3BlY3RpdmUgPVxuICAgICAgTWF0aC5wb3coXG4gICAgICAgIE1hdGgucG93KHRoaXMuc2l6ZS53aWR0aCAvICgyICogdGhpcy5waXhlbFJhdGlvKSwgMikgKyBNYXRoLnBvdyh0aGlzLnNpemUuaGVpZ2h0IC8gKDIgKiB0aGlzLnBpeGVsUmF0aW8pLCAyKSxcbiAgICAgICAgMC41XG4gICAgICApIC8gTWF0aC50YW4oKHRoaXMuZm92ICogMC41ICogTWF0aC5QSSkgLyAxODApXG4gIH1cblxuICAvKipcbiAgICogU2V0cyB2aXNpYmxlIHdpZHRoIC8gaGVpZ2h0IGF0IGEgZ2l2ZW4gei1kZXB0aCBmcm9tIG91ciB7QGxpbmsgQ2FtZXJhfSBwYXJhbWV0ZXJzLjxicj5cbiAgICoge0BsaW5rIGh0dHBzOi8vZGlzY291cnNlLnRocmVlanMub3JnL3QvZnVuY3Rpb25zLXRvLWNhbGN1bGF0ZS10aGUtdmlzaWJsZS13aWR0aC1oZWlnaHQtYXQtYS1naXZlbi16LWRlcHRoLWZyb20tYS1wZXJzcGVjdGl2ZS1jYW1lcmEvMjY5IHwgU2VlIHJlZmVyZW5jZX1cbiAgICogQHBhcmFtIGRlcHRoIC0gZGVwdGggdG8gdXNlIGZvciBjYWxjdWxhdGlvbnNcbiAgICovXG4gIHNldFNjcmVlblJhdGlvcyhkZXB0aCA9IDApIHtcbiAgICAvLyBjb21wZW5zYXRlIGZvciBjYW1lcmFzIG5vdCBwb3NpdGlvbmVkIGF0IHo9MFxuICAgIGNvbnN0IGNhbWVyYU9mZnNldCA9IHRoaXMucG9zaXRpb24uelxuICAgIGlmIChkZXB0aCA8IGNhbWVyYU9mZnNldCkge1xuICAgICAgZGVwdGggLT0gY2FtZXJhT2Zmc2V0XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlcHRoICs9IGNhbWVyYU9mZnNldFxuICAgIH1cblxuICAgIC8vIHZlcnRpY2FsIGZvdiBpbiByYWRpYW5zXG4gICAgY29uc3QgdkZPViA9ICh0aGlzLmZvdiAqIE1hdGguUEkpIC8gMTgwXG5cbiAgICAvLyBNYXRoLmFicyB0byBlbnN1cmUgdGhlIHJlc3VsdCBpcyBhbHdheXMgcG9zaXRpdmVcbiAgICBjb25zdCBoZWlnaHQgPSAyICogTWF0aC50YW4odkZPViAvIDIpICogTWF0aC5hYnMoZGVwdGgpXG5cbiAgICB0aGlzLnNjcmVlblJhdGlvID0ge1xuICAgICAgd2lkdGg6IChoZWlnaHQgKiB0aGlzLnNpemUud2lkdGgpIC8gdGhpcy5zaXplLmhlaWdodCxcbiAgICAgIGhlaWdodCxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUm90YXRlIHRoaXMge0BsaW5rIENhbWVyYX0gc28gaXQgbG9va3MgYXQgdGhlIHtAbGluayBWZWMzIHwgdGFyZ2V0fVxuICAgKiBAcGFyYW0gdGFyZ2V0IC0ge0BsaW5rIFZlYzMgfCB0YXJnZXR9IHRvIGxvb2sgYXRcbiAgICovXG4gIGxvb2tBdCh0YXJnZXQ6IFZlYzMgPSBuZXcgVmVjMygpKSB7XG4gICAgLy8gc2luY2Ugd2Uga25vdyBpdCdzIGEgY2FtZXJhLCBpbnZlcnNlIHBvc2l0aW9uIGFuZCB0YXJnZXRcbiAgICBjb25zdCByb3RhdGlvbk1hdHJpeCA9IG5ldyBNYXQ0KCkubG9va0F0KHRoaXMucG9zaXRpb24sIHRhcmdldClcbiAgICB0aGlzLnF1YXRlcm5pb24uc2V0RnJvbVJvdGF0aW9uTWF0cml4KHJvdGF0aW9uTWF0cml4KVxuICAgIHRoaXMuc2hvdWxkVXBkYXRlTW9kZWxNYXRyaXgoKVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIHtAbGluayBDYW1lcmF9IHtAbGluayBwcm9qZWN0aW9uTWF0cml4fVxuICAgKi9cbiAgdXBkYXRlUHJvamVjdGlvbk1hdHJpeCgpIHtcbiAgICBjb25zdCBhc3BlY3QgPSB0aGlzLnNpemUud2lkdGggLyB0aGlzLnNpemUuaGVpZ2h0XG5cbiAgICBjb25zdCB0b3AgPSB0aGlzLm5lYXIgKiBNYXRoLnRhbigoTWF0aC5QSSAvIDE4MCkgKiAwLjUgKiB0aGlzLmZvdilcbiAgICBjb25zdCBoZWlnaHQgPSAyICogdG9wXG4gICAgY29uc3Qgd2lkdGggPSBhc3BlY3QgKiBoZWlnaHRcbiAgICBjb25zdCBsZWZ0ID0gLTAuNSAqIHdpZHRoXG5cbiAgICBjb25zdCByaWdodCA9IGxlZnQgKyB3aWR0aFxuICAgIGNvbnN0IGJvdHRvbSA9IHRvcCAtIGhlaWdodFxuXG4gICAgY29uc3QgeCA9ICgyICogdGhpcy5uZWFyKSAvIChyaWdodCAtIGxlZnQpXG4gICAgY29uc3QgeSA9ICgyICogdGhpcy5uZWFyKSAvICh0b3AgLSBib3R0b20pXG5cbiAgICBjb25zdCBhID0gKHJpZ2h0ICsgbGVmdCkgLyAocmlnaHQgLSBsZWZ0KVxuICAgIGNvbnN0IGIgPSAodG9wICsgYm90dG9tKSAvICh0b3AgLSBib3R0b20pXG4gICAgY29uc3QgYyA9IC0odGhpcy5mYXIgKyB0aGlzLm5lYXIpIC8gKHRoaXMuZmFyIC0gdGhpcy5uZWFyKVxuICAgIGNvbnN0IGQgPSAoLTIgKiB0aGlzLmZhciAqIHRoaXMubmVhcikgLyAodGhpcy5mYXIgLSB0aGlzLm5lYXIpXG5cbiAgICAvLyBwcmV0dGllci1pZ25vcmVcbiAgICB0aGlzLnByb2plY3Rpb25NYXRyaXguc2V0KFxuICAgICAgeCwgMCwgMCwgMCxcbiAgICAgIDAsIHksIDAsIDAsXG4gICAgICBhLCBiLCBjLCAtMSxcbiAgICAgIDAsIDAsIGQsIDBcbiAgICApXG4gIH1cbn1cbiIsImltcG9ydCB7IGlzUmVuZGVyZXIsIFJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL3V0aWxzJ1xuaW1wb3J0IHsgU2FtcGxlckJpbmRpbmcgfSBmcm9tICcuLi9iaW5kaW5ncy9TYW1wbGVyQmluZGluZydcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCwgdGhyb3dXYXJuaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnXG5pbXBvcnQgeyBHUFVDdXJ0YWlucyB9IGZyb20gJy4uLy4uL2N1cnRhaW5zL0dQVUN1cnRhaW5zJ1xuXG4vKiogT3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSBhIHtAbGluayBTYW1wbGVyfSAqL1xuZXhwb3J0IGludGVyZmFjZSBTYW1wbGVyT3B0aW9ucyBleHRlbmRzIFBhcnRpYWw8R1BVU2FtcGxlckRlc2NyaXB0b3I+LCBHUFVTYW1wbGVyQmluZGluZ0xheW91dCB7fVxuXG4vKipcbiAqIFBhcmFtZXRlcnMgdXNlZCB0byBjcmVhdGUgYSB7QGxpbmsgU2FtcGxlcn1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTYW1wbGVyUGFyYW1zIGV4dGVuZHMgU2FtcGxlck9wdGlvbnMge1xuICAvKiogTmFtZSBvZiB0aGUge0BsaW5rIFNhbXBsZXJ9IHRvIHVzZSBpbiB0aGUge0BsaW5rIFNhbXBsZXJCaW5kaW5nIHwgYmluZGluZ30gKi9cbiAgbmFtZTogc3RyaW5nXG59XG5cbi8qKlxuICogVXNlZCB0byBjcmVhdGUgYSB7QGxpbmsgR1BVU2FtcGxlcn0gYW5kIGl0cyBhc3NvY2lhdGVkIHtAbGluayBTYW1wbGVyQmluZGluZ30uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIHNldCBvdXIgbWFpbiBHUFVDdXJ0YWlucyBpbnN0YW5jZVxuICogY29uc3QgZ3B1Q3VydGFpbnMgPSBuZXcgR1BVQ3VydGFpbnMoe1xuICogICBjb250YWluZXI6ICcjY2FudmFzJyAvLyBzZWxlY3RvciBvZiBvdXIgV2ViR1BVIGNhbnZhcyBjb250YWluZXJcbiAqIH0pXG4gKlxuICogLy8gc2V0IHRoZSBHUFUgZGV2aWNlXG4gKiAvLyBub3RlIHRoaXMgaXMgYXN5bmNocm9ub3VzXG4gKiBhd2FpdCBncHVDdXJ0YWlucy5zZXREZXZpY2UoKVxuICpcbiAqIGNvbnN0IG1pcnJvclNhbXBsZXIgPSBuZXcgU2FtcGxlcihncHVDdXJ0YWlucywge1xuICogICBsYWJlbDogJ01pcnJvciBzYW1wbGVyJyxcbiAqICAgbmFtZTogJ21pcnJvclNhbXBsZXInLFxuICogICBhZGRyZXNzTW9kZVU6ICdtaXJyb3ItcmVwZWF0JyxcbiAqICAgYWRkcmVzc01vZGVWOiAnbWlycm9yLXJlcGVhdCcsXG4gKiB9KVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBTYW1wbGVyIHtcbiAgLyoqIFRoZSB0eXBlIG9mIHRoZSB7QGxpbmsgU2FtcGxlcn0gKi9cbiAgdHlwZTogc3RyaW5nXG4gIC8qKiBUaGUgdW5pdmVyc2FsIHVuaXF1ZSBpZCBvZiB0aGlzIHtAbGluayBTYW1wbGVyfSAqL1xuICByZWFkb25seSB1dWlkOiBzdHJpbmdcbiAgLyoqIHtAbGluayBSZW5kZXJlcn0gdXNlZCBieSB0aGlzIHtAbGluayBTYW1wbGVyfSAqL1xuICByZW5kZXJlcjogUmVuZGVyZXJcbiAgLyoqIFRoZSBsYWJlbCBvZiB0aGUge0BsaW5rIFNhbXBsZXJ9LCB1c2VkIHRvIGNyZWF0ZSB0aGUge0BsaW5rIEdQVVNhbXBsZXJ9IGZvciBkZWJ1Z2dpbmcgcHVycG9zZSAqL1xuICBsYWJlbDogc3RyaW5nXG4gIC8qKiBOYW1lIG9mIHRoZSB7QGxpbmsgU2FtcGxlcn0gdG8gdXNlIGluIHRoZSB7QGxpbmsgU2FtcGxlckJpbmRpbmcgfCBiaW5kaW5nfSAqL1xuICBuYW1lOiBzdHJpbmdcbiAgLyoqIE9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgU2FtcGxlcn0gKi9cbiAgb3B0aW9uczogU2FtcGxlck9wdGlvbnNcblxuICAvKioge0BsaW5rIEdQVVNhbXBsZXJ9ICovXG4gIHNhbXBsZXI6IEdQVVNhbXBsZXJcbiAgLyoqIHtAbGluayBTYW1wbGVyQmluZGluZyB8IGJpbmRpbmd9IHRvIHBhc3MgdG8gYSB7QGxpbmsgY29yZS9iaW5kR3JvdXBzL1RleHR1cmVCaW5kR3JvdXAuVGV4dHVyZUJpbmRHcm91cCB8IGJpbmQgZ3JvdXB9ICovXG4gIGJpbmRpbmc6IFNhbXBsZXJCaW5kaW5nXG5cbiAgLyoqXG4gICAqIFNhbXBsZXIgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0ge0BsaW5rIFJlbmRlcmVyfSBvYmplY3Qgb3Ige0BsaW5rIEdQVUN1cnRhaW5zfSBjbGFzcyBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgU2FtcGxlcn1cbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgU2FtcGxlclBhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFNhbXBsZXJ9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICByZW5kZXJlcjogR1BVQ3VydGFpbnMgfCBSZW5kZXJlcixcbiAgICB7XG4gICAgICBsYWJlbCA9ICdTYW1wbGVyJyxcbiAgICAgIG5hbWUsXG4gICAgICBhZGRyZXNzTW9kZVUgPSAncmVwZWF0JyxcbiAgICAgIGFkZHJlc3NNb2RlViA9ICdyZXBlYXQnLFxuICAgICAgbWFnRmlsdGVyID0gJ2xpbmVhcicsXG4gICAgICBtaW5GaWx0ZXIgPSAnbGluZWFyJyxcbiAgICAgIG1pcG1hcEZpbHRlciA9ICdsaW5lYXInLFxuICAgICAgbWF4QW5pc290cm9weSA9IDEsXG4gICAgICB0eXBlID0gJ2ZpbHRlcmluZycsXG4gICAgfSA9IHt9IGFzIFNhbXBsZXJQYXJhbXNcbiAgKSB7XG4gICAgdGhpcy50eXBlID0gJ1NhbXBsZXInXG4gICAgdGhpcy51dWlkID0gZ2VuZXJhdGVVVUlEKClcblxuICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XG4gICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIFJlbmRlcmVyKVxuXG4gICAgaXNSZW5kZXJlcihyZW5kZXJlciwgbGFiZWwgPyBsYWJlbCArICcgJyArIHRoaXMudHlwZSA6IHRoaXMudHlwZSlcblxuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlclxuXG4gICAgdGhpcy5sYWJlbCA9IGxhYmVsXG5cbiAgICBpZiAoIW5hbWUgJiYgIXRoaXMucmVuZGVyZXIucHJvZHVjdGlvbikge1xuICAgICAgbmFtZSA9ICdzYW1wbGVyJyArIHRoaXMucmVuZGVyZXIuc2FtcGxlcnMubGVuZ3RoXG4gICAgICB0aHJvd1dhcm5pbmcoXG4gICAgICAgIGBTYW1wbGVyOiB5b3UgYXJlIHRyeWluZyB0byBjcmVhdGUgYSBzYW1wbGVyIHdpdGhvdXQgdGhlIG1hbmRhdG9yeSBuYW1lIHBhcmFtZXRlci4gQSBkZWZhdWx0IG5hbWUgd2lsbCBiZSB1c2VkIGluc3RlYWQ6ICR7bmFtZX1gXG4gICAgICApXG4gICAgfVxuXG4gICAgdGhpcy5uYW1lID0gbmFtZVxuXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgYWRkcmVzc01vZGVVLFxuICAgICAgYWRkcmVzc01vZGVWLFxuICAgICAgbWFnRmlsdGVyLFxuICAgICAgbWluRmlsdGVyLFxuICAgICAgbWlwbWFwRmlsdGVyLFxuICAgICAgbWF4QW5pc290cm9weSxcbiAgICAgIHR5cGUsXG4gICAgfSBhcyBTYW1wbGVyT3B0aW9uc1xuXG4gICAgdGhpcy5jcmVhdGVTYW1wbGVyKClcbiAgICB0aGlzLmNyZWF0ZUJpbmRpbmcoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUge0BsaW5rIEdQVVNhbXBsZXJ9XG4gICAqL1xuICBjcmVhdGVTYW1wbGVyKCkge1xuICAgIHRoaXMuc2FtcGxlciA9IHRoaXMucmVuZGVyZXIuY3JlYXRlU2FtcGxlcih0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUge0BsaW5rIFNhbXBsZXJCaW5kaW5nIHwgYmluZGluZ31cbiAgICovXG4gIGNyZWF0ZUJpbmRpbmcoKSB7XG4gICAgdGhpcy5iaW5kaW5nID0gbmV3IFNhbXBsZXJCaW5kaW5nKHtcbiAgICAgIGxhYmVsOiB0aGlzLmxhYmVsLFxuICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgYmluZGluZ1R5cGU6ICdzYW1wbGVyJyxcbiAgICAgIHNhbXBsZXI6IHRoaXMuc2FtcGxlcixcbiAgICAgIHR5cGU6IHRoaXMub3B0aW9ucy50eXBlLFxuICAgIH0pXG4gIH1cbn1cbiIsImltcG9ydCB7IGlzUmVuZGVyZXIsIFJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL3V0aWxzJ1xuaW1wb3J0IHsgVGV4dHVyZUJpbmRpbmcsIFRleHR1cmVCaW5kaW5nUGFyYW1zIH0gZnJvbSAnLi4vYmluZGluZ3MvVGV4dHVyZUJpbmRpbmcnXG5pbXBvcnQgeyBCaW5kR3JvdXBCaW5kaW5nRWxlbWVudCB9IGZyb20gJy4uLy4uL3R5cGVzL0JpbmRHcm91cHMnXG5pbXBvcnQgeyBHUFVDdXJ0YWlucyB9IGZyb20gJy4uLy4uL2N1cnRhaW5zL0dQVUN1cnRhaW5zJ1xuaW1wb3J0IHsgQmluZGluZ01lbW9yeUFjY2Vzc1R5cGUsIFRleHR1cmVCaW5kaW5nVHlwZSB9IGZyb20gJy4uL2JpbmRpbmdzL0JpbmRpbmcnXG5pbXBvcnQgeyBnZW5lcmF0ZVVVSUQgfSBmcm9tICcuLi8uLi91dGlscy91dGlscydcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuL1RleHR1cmUnXG5pbXBvcnQgeyBUZXh0dXJlU2l6ZSB9IGZyb20gJy4uLy4uL3R5cGVzL1RleHR1cmVzJ1xuXG4vKipcbiAqIERlZmluZSB0aGUgcG9zc2libGUgYmluZGluZyB0eXBlcyBvZiBhIHtAbGluayBSZW5kZXJUZXh0dXJlfVxuICovXG5leHBvcnQgdHlwZSBSZW5kZXJUZXh0dXJlQmluZGluZ1R5cGUgPSBFeGNsdWRlPFRleHR1cmVCaW5kaW5nVHlwZSwgJ2V4dGVybmFsVGV4dHVyZSc+XG5cbi8qKlxuICogQmFzZSBwYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIFJlbmRlclRleHR1cmV9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyVGV4dHVyZUJhc2VQYXJhbXMge1xuICAvKiogVGhlIGxhYmVsIG9mIHRoZSB7QGxpbmsgUmVuZGVyVGV4dHVyZX0sIHVzZWQgdG8gY3JlYXRlIHZhcmlvdXMgR1BVIG9iamVjdHMgZm9yIGRlYnVnZ2luZyBwdXJwb3NlICovXG4gIGxhYmVsPzogc3RyaW5nXG4gIC8qKiBOYW1lIG9mIHRoZSB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gdG8gdXNlIGluIHRoZSB7QGxpbmsgVGV4dHVyZUJpbmRpbmcgfCB0ZXh0dXJlIGJpbmRpbmd9ICovXG4gIG5hbWU/OiBzdHJpbmdcblxuICAvKiogT3B0aW9uYWwgc2l6ZSBvZiB0aGUge0BsaW5rIFJlbmRlclRleHR1cmUjdGV4dHVyZSB8IHRleHR1cmV9ICovXG4gIHNpemU/OiBUZXh0dXJlU2l6ZVxuICAvKiogV2hldGhlciB0byB1c2UgdGhpcyB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gYXMgYSByZWd1bGFyIG9yIHN0b3JhZ2UgdGV4dHVyZSAqL1xuICB1c2FnZT86IFJlbmRlclRleHR1cmVCaW5kaW5nVHlwZVxuICAvKiogT3B0aW9uYWwgZm9ybWF0IG9mIHRoZSB7QGxpbmsgUmVuZGVyVGV4dHVyZSN0ZXh0dXJlIHwgdGV4dHVyZX0sIG1haW5seSB1c2VkIGZvciBzdG9yYWdlIHRleHR1cmVzICovXG4gIGZvcm1hdD86IEdQVVRleHR1cmVGb3JtYXRcbiAgLyoqIE9wdGlvbmFsIHRleHR1cmUgYmluZGluZyBtZW1vcnkgYWNjZXNzIHR5cGUsIG1haW5seSB1c2VkIGZvciBzdG9yYWdlIHRleHR1cmVzICovXG4gIGFjY2Vzcz86IEJpbmRpbmdNZW1vcnlBY2Nlc3NUeXBlXG4gIC8qKiBPcHRpb25hbCB7QGxpbmsgUmVuZGVyVGV4dHVyZSN0ZXh0dXJlIHwgdGV4dHVyZX0gdmlldyBkaW1lbnNpb24gdG8gdXNlICovXG4gIHZpZXdEaW1lbnNpb24/OiBHUFVUZXh0dXJlVmlld0RpbWVuc2lvblxuICAvKiogU2FtcGxlIGNvdW50IG9mIHRoZSB7QGxpbmsgUmVuZGVyVGV4dHVyZSN0ZXh0dXJlIHwgdGV4dHVyZX0sIHVzZWQgZm9yIG11bHRpc2FtcGxpbmcgKi9cbiAgc2FtcGxlQ291bnQ/OiBHUFVTaXplMzJcbn1cblxuLyoqXG4gKiBQYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIFJlbmRlclRleHR1cmV9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUmVuZGVyVGV4dHVyZVBhcmFtcyBleHRlbmRzIFJlbmRlclRleHR1cmVCYXNlUGFyYW1zIHtcbiAgLyoqIE9wdGlvbmFsIHRleHR1cmUgdG8gdXNlIGFzIGEgY29weSBzb3VyY2UgaW5wdXQuIENvdWxkIGJlIGEge0BsaW5rIFJlbmRlclRleHR1cmV9IG9yIHtAbGluayBUZXh0dXJlfSAqL1xuICBmcm9tVGV4dHVyZT86IFJlbmRlclRleHR1cmUgfCBUZXh0dXJlIHwgbnVsbFxufVxuXG4vKiogQGNvbnN0IC0gZGVmYXVsdCB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gcGFyYW1ldGVycyAqL1xuY29uc3QgZGVmYXVsdFJlbmRlclRleHR1cmVQYXJhbXM6IFJlbmRlclRleHR1cmVQYXJhbXMgPSB7XG4gIGxhYmVsOiAnUmVuZGVyVGV4dHVyZScsXG4gIG5hbWU6ICdyZW5kZXJUZXh0dXJlJyxcbiAgdXNhZ2U6ICd0ZXh0dXJlJyxcbiAgYWNjZXNzOiAnd3JpdGUnLFxuICBmcm9tVGV4dHVyZTogbnVsbCxcbiAgdmlld0RpbWVuc2lvbjogJzJkJyxcbiAgc2FtcGxlQ291bnQ6IDEsXG59XG5cbi8qKlxuICogVXNlZCB0byBjcmVhdGUge0BsaW5rIEdQVVRleHR1cmUgfCB0ZXh0dXJlfSB0aGF0IGNhbiBiZSB1c2VkIGFzIGNvcHkgc291cmNlL2Rlc3RpbmF0aW9uIGZvciB7QGxpbmsgY29yZS9yZW5kZXJQYXNzZXMvUmVuZGVyUGFzcy5SZW5kZXJQYXNzIHwgUmVuZGVyUGFzc30gYW5kIHtAbGluayBjb3JlL3JlbmRlclBhc3Nlcy9SZW5kZXJUYXJnZXQuUmVuZGVyVGFyZ2V0IHwgUmVuZGVyVGFyZ2V0fS48YnIgPlxuICogQmFzaWNhbGx5IHVzZWZ1bCBmb3IgY29weWluZyBhbnl0aGluZyBvdXRwdXR0ZWQgdG8gdGhlIHNjcmVlbiBhdCBvbmUgcG9pbnQgb3IgYW5vdGhlci5cbiAqXG4gKiBXaWxsIGNyZWF0ZSBhIHtAbGluayBHUFVUZXh0dXJlfSBhbmQgaXRzIGFzc29jaWF0ZWQge0BsaW5rIFRleHR1cmVCaW5kaW5nfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gc2V0IG91ciBtYWluIEdQVUN1cnRhaW5zIGluc3RhbmNlXG4gKiBjb25zdCBncHVDdXJ0YWlucyA9IG5ldyBHUFVDdXJ0YWlucyh7XG4gKiAgIGNvbnRhaW5lcjogJyNjYW52YXMnIC8vIHNlbGVjdG9yIG9mIG91ciBXZWJHUFUgY2FudmFzIGNvbnRhaW5lclxuICogfSlcbiAqXG4gKiAvLyBzZXQgdGhlIEdQVSBkZXZpY2VcbiAqIC8vIG5vdGUgdGhpcyBpcyBhc3luY2hyb25vdXNcbiAqIGF3YWl0IGdwdUN1cnRhaW5zLnNldERldmljZSgpXG4gKlxuICogLy8gY3JlYXRlIGEgcmVuZGVyIHRleHR1cmVcbiAqIGNvbnN0IHJlbmRlclRleHR1cmUgPSBuZXcgUmVuZGVyVGV4dHVyZShncHVDdXJ0YWlucywge1xuICogICBsYWJlbDogJ015IHJlbmRlciB0ZXh0dXJlJyxcbiAqICAgbmFtZTogJ3JlbmRlclRleHR1cmUnLFxuICogfSlcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUmVuZGVyVGV4dHVyZSB7XG4gIC8qKiB7QGxpbmsgUmVuZGVyZXIgfCByZW5kZXJlcn0gdXNlZCBieSB0aGlzIHtAbGluayBSZW5kZXJUZXh0dXJlfSAqL1xuICByZW5kZXJlcjogUmVuZGVyZXJcbiAgLyoqIFRoZSB0eXBlIG9mIHRoZSB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gKi9cbiAgdHlwZTogc3RyaW5nXG4gIC8qKiBUaGUgdW5pdmVyc2FsIHVuaXF1ZSBpZCBvZiB0aGlzIHtAbGluayBSZW5kZXJUZXh0dXJlfSAqL1xuICByZWFkb25seSB1dWlkOiBzdHJpbmdcblxuICAvKiogVGhlIHtAbGluayBHUFVUZXh0dXJlfSB1c2VkICovXG4gIHRleHR1cmU6IEdQVVRleHR1cmVcblxuICAvKiogU2l6ZSBvZiB0aGUge0BsaW5rIFJlbmRlclRleHR1cmUjdGV4dHVyZSB8IHRleHR1cmV9IHNvdXJjZSwgdXN1YWxseSBvdXIge0BsaW5rIFJlbmRlcmVyI3BpeGVsUmF0aW9Cb3VuZGluZ1JlY3QgfCByZW5kZXJlciBwaXhlbCByYXRpbyBib3VuZGluZyByZWN0fSAqL1xuICBzaXplOiBUZXh0dXJlU2l6ZVxuXG4gIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFJlbmRlclRleHR1cmV9ICovXG4gIG9wdGlvbnM6IFJlbmRlclRleHR1cmVQYXJhbXNcblxuICAvKiogQXJyYXkgb2Yge0BsaW5rIGNvcmUvYmluZGluZ3MvQmluZGluZy5CaW5kaW5nIHwgYmluZGluZ3N9IHRoYXQgd2lsbCBhY3R1YWxseSBvbmx5IGhvbGQgb25lIHtAbGluayBUZXh0dXJlQmluZGluZyB8IHRleHR1cmUgYmluZGluZ30gKi9cbiAgYmluZGluZ3M6IEJpbmRHcm91cEJpbmRpbmdFbGVtZW50W11cblxuICAvKipcbiAgICogUmVuZGVyVGV4dHVyZSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcmVuZGVyZXIgLSB7QGxpbmsgUmVuZGVyZXIgfCByZW5kZXJlcn0gb2JqZWN0IG9yIHtAbGluayBHUFVDdXJ0YWluc30gY2xhc3Mgb2JqZWN0IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFJlbmRlclRleHR1cmV9XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIFJlbmRlclRleHR1cmVQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBSZW5kZXJUZXh0dXJlfVxuICAgKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyIHwgR1BVQ3VydGFpbnMsIHBhcmFtZXRlcnMgPSBkZWZhdWx0UmVuZGVyVGV4dHVyZVBhcmFtcykge1xuICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XG4gICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIFJlbmRlcmVyKVxuXG4gICAgaXNSZW5kZXJlcihyZW5kZXJlciwgcGFyYW1ldGVycy5sYWJlbCA/IHBhcmFtZXRlcnMubGFiZWwgKyAnIFJlbmRlclRleHR1cmUnIDogJ1JlbmRlclRleHR1cmUnKVxuXG4gICAgdGhpcy50eXBlID0gJ1JlbmRlclRleHR1cmUnXG5cbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJcblxuICAgIHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpXG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7IC4uLmRlZmF1bHRSZW5kZXJUZXh0dXJlUGFyYW1zLCAuLi5wYXJhbWV0ZXJzIH1cblxuICAgIGlmICghdGhpcy5vcHRpb25zLmZvcm1hdCkge1xuICAgICAgdGhpcy5vcHRpb25zLmZvcm1hdCA9IHRoaXMucmVuZGVyZXIub3B0aW9ucy5wcmVmZXJyZWRGb3JtYXRcbiAgICB9XG5cbiAgICAvLyBzaXplc1xuICAgIHRoaXMuc2l6ZSA9IHRoaXMub3B0aW9ucy5zaXplID8/IHtcbiAgICAgIHdpZHRoOiBNYXRoLmZsb29yKHRoaXMucmVuZGVyZXIucGl4ZWxSYXRpb0JvdW5kaW5nUmVjdC53aWR0aCksXG4gICAgICBoZWlnaHQ6IE1hdGguZmxvb3IodGhpcy5yZW5kZXJlci5waXhlbFJhdGlvQm91bmRpbmdSZWN0LmhlaWdodCksXG4gICAgICBkZXB0aDogMSxcbiAgICB9XG5cbiAgICAvLyBzdHJ1Y3RcbiAgICB0aGlzLnNldEJpbmRpbmdzKClcblxuICAgIC8vIHRleHR1cmVcbiAgICB0aGlzLnJlbmRlcmVyLmFkZFJlbmRlclRleHR1cmUodGhpcylcbiAgICB0aGlzLmNyZWF0ZVRleHR1cmUoKVxuICB9XG5cbiAgLyoqXG4gICAqIENvcHkgYW5vdGhlciB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gaW50byB0aGlzIHtAbGluayBSZW5kZXJUZXh0dXJlfVxuICAgKiBAcGFyYW0gdGV4dHVyZSAtIHtAbGluayBSZW5kZXJUZXh0dXJlfSB0byBjb3B5XG4gICAqL1xuICBjb3B5KHRleHR1cmU6IFJlbmRlclRleHR1cmUgfCBUZXh0dXJlKSB7XG4gICAgdGhpcy5vcHRpb25zLmZyb21UZXh0dXJlID0gdGV4dHVyZVxuICAgIHRoaXMuY3JlYXRlVGV4dHVyZSgpXG4gIH1cblxuICAvKipcbiAgICogQ29weSBhIHtAbGluayBHUFVUZXh0dXJlfSBkaXJlY3RseSBpbnRvIHRoaXMge0BsaW5rIFJlbmRlclRleHR1cmV9LiBNYWlubHkgdXNlZCBmb3IgZGVwdGggdGV4dHVyZXMuXG4gICAqIEBwYXJhbSB0ZXh0dXJlIC0ge0BsaW5rIEdQVVRleHR1cmV9IHRvIGNvcHlcbiAgICovXG4gIGNvcHlHUFVUZXh0dXJlKHRleHR1cmU6IEdQVVRleHR1cmUpIHtcbiAgICB0aGlzLnNpemUgPSB7XG4gICAgICB3aWR0aDogdGV4dHVyZS53aWR0aCxcbiAgICAgIGhlaWdodDogdGV4dHVyZS5oZWlnaHQsXG4gICAgICBkZXB0aDogdGV4dHVyZS5kZXB0aE9yQXJyYXlMYXllcnMsXG4gICAgfVxuXG4gICAgdGhpcy50ZXh0dXJlID0gdGV4dHVyZVxuICAgIHRoaXMudGV4dHVyZUJpbmRpbmcucmVzb3VyY2UgPSB0aGlzLnRleHR1cmVcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHtAbGluayBHUFVUZXh0dXJlIHwgdGV4dHVyZX0gKG9yIGNvcHkgaXQgZnJvbSBzb3VyY2UpIGFuZCB1cGRhdGUgdGhlIHtAbGluayBUZXh0dXJlQmluZGluZyNyZXNvdXJjZSB8IGJpbmRpbmcgcmVzb3VyY2V9XG4gICAqL1xuICBjcmVhdGVUZXh0dXJlKCkge1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZnJvbVRleHR1cmUpIHtcbiAgICAgIC8vIGNvcHkgdGhlIEdQVSB0ZXh0dXJlXG4gICAgICB0aGlzLmNvcHlHUFVUZXh0dXJlKHRoaXMub3B0aW9ucy5mcm9tVGV4dHVyZS50ZXh0dXJlKVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy50ZXh0dXJlPy5kZXN0cm95KClcblxuICAgIHRoaXMudGV4dHVyZSA9IHRoaXMucmVuZGVyZXIuY3JlYXRlVGV4dHVyZSh7XG4gICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsLFxuICAgICAgZm9ybWF0OiB0aGlzLm9wdGlvbnMuZm9ybWF0LFxuICAgICAgc2l6ZTogW3RoaXMuc2l6ZS53aWR0aCwgdGhpcy5zaXplLmhlaWdodCwgdGhpcy5zaXplLmRlcHRoXSxcbiAgICAgIGRpbWVuc2lvbnM6IHRoaXMub3B0aW9ucy52aWV3RGltZW5zaW9uID09PSAnMWQnID8gJzFkJyA6IHRoaXMub3B0aW9ucy52aWV3RGltZW5zaW9uID09PSAnM2QnID8gJzNkJyA6ICcyZCcsXG4gICAgICBzYW1wbGVDb3VudDogdGhpcy5vcHRpb25zLnNhbXBsZUNvdW50LFxuICAgICAgdXNhZ2U6XG4gICAgICAgIC8vIFRPRE8gbGV0IHVzZXIgY2hvc2U/XG4gICAgICAgIC8vIHNlZSBodHRwczovL21hdHJpeC50by8jLyFNRm9nZEdKZm5aTHJEbWdrQk46bWF0cml4Lm9yZy8kdkVTVTcwU2VDa2NzckpRZHlRR01XQnRDZ1ZkM1hxbkhjQnhGREtUS0tTUT92aWE9bWF0cml4Lm9yZyZ2aWE9bW96aWxsYS5vcmcmdmlhPWhlai5pbVxuICAgICAgICB0aGlzLm9wdGlvbnMudXNhZ2UgIT09ICdzdG9yYWdlVGV4dHVyZSdcbiAgICAgICAgICA/IEdQVVRleHR1cmVVc2FnZS5URVhUVVJFX0JJTkRJTkcgfFxuICAgICAgICAgICAgR1BVVGV4dHVyZVVzYWdlLkNPUFlfU1JDIHxcbiAgICAgICAgICAgIEdQVVRleHR1cmVVc2FnZS5DT1BZX0RTVCB8XG4gICAgICAgICAgICBHUFVUZXh0dXJlVXNhZ2UuUkVOREVSX0FUVEFDSE1FTlRcbiAgICAgICAgICA6IEdQVVRleHR1cmVVc2FnZS5TVE9SQUdFX0JJTkRJTkcgfCBHUFVUZXh0dXJlVXNhZ2UuVEVYVFVSRV9CSU5ESU5HIHwgR1BVVGV4dHVyZVVzYWdlLkNPUFlfRFNULFxuICAgIH0gYXMgR1BVVGV4dHVyZURlc2NyaXB0b3IpXG5cbiAgICAvLyB1cGRhdGUgdGV4dHVyZSBiaW5kaW5nXG4gICAgdGhpcy50ZXh0dXJlQmluZGluZy5yZXNvdXJjZSA9IHRoaXMudGV4dHVyZVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvdXIge0BsaW5rIFJlbmRlclRleHR1cmUjYmluZGluZ3MgfCBiaW5kaW5nc31cbiAgICovXG4gIHNldEJpbmRpbmdzKCkge1xuICAgIHRoaXMuYmluZGluZ3MgPSBbXG4gICAgICBuZXcgVGV4dHVyZUJpbmRpbmcoe1xuICAgICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsICsgJzogJyArIHRoaXMub3B0aW9ucy5uYW1lICsgJyByZW5kZXIgdGV4dHVyZScsXG4gICAgICAgIG5hbWU6IHRoaXMub3B0aW9ucy5uYW1lLFxuICAgICAgICB0ZXh0dXJlOiB0aGlzLnRleHR1cmUsXG4gICAgICAgIGJpbmRpbmdUeXBlOiB0aGlzLm9wdGlvbnMudXNhZ2UsXG4gICAgICAgIGZvcm1hdDogdGhpcy5vcHRpb25zLmZvcm1hdCxcbiAgICAgICAgdmlld0RpbWVuc2lvbjogdGhpcy5vcHRpb25zLnZpZXdEaW1lbnNpb24sXG4gICAgICAgIG11bHRpc2FtcGxlZDogdGhpcy5vcHRpb25zLnNhbXBsZUNvdW50ID4gMSxcbiAgICAgIH0gYXMgVGV4dHVyZUJpbmRpbmdQYXJhbXMpLFxuICAgIF1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3VyIHtAbGluayBUZXh0dXJlQmluZGluZyB8IHRleHR1cmUgYmluZGluZ31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgdGV4dHVyZUJpbmRpbmcoKTogVGV4dHVyZUJpbmRpbmcge1xuICAgIHJldHVybiB0aGlzLmJpbmRpbmdzWzBdIGFzIFRleHR1cmVCaW5kaW5nXG4gIH1cblxuICAvKipcbiAgICogRm9yY2UgYSB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gdG8gYmUgcmVjcmVhdGVkIHdpdGggdGhlIG5ldyBzaXplXG4gICAqIEBwYXJhbSBzaXplIC0gbmV3IHtAbGluayBUZXh0dXJlU2l6ZSB8IHNpemV9IHRvIHNldFxuICAgKi9cbiAgZm9yY2VSZXNpemUoc2l6ZTogVGV4dHVyZVNpemUpIHtcbiAgICB0aGlzLnNpemUgPSBzaXplXG4gICAgdGhpcy5jcmVhdGVUZXh0dXJlKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemUgb3VyIHtAbGluayBSZW5kZXJUZXh0dXJlfSwgd2hpY2ggbWVhbnMgcmVjcmVhdGUgaXQvY29weSBpdCBhZ2FpbiBhbmQgdGVsbCB0aGUge0BsaW5rIGNvcmUvYmluZEdyb3Vwcy9UZXh0dXJlQmluZEdyb3VwLlRleHR1cmVCaW5kR3JvdXAgfCB0ZXh0dXJlIGJpbmQgZ3JvdXB9IHRvIHVwZGF0ZVxuICAgKiBAcGFyYW0gc2l6ZSAtIHRoZSBvcHRpb25hbCBuZXcge0BsaW5rIFRleHR1cmVTaXplIHwgc2l6ZX0gdG8gc2V0XG4gICAqL1xuICByZXNpemUoc2l6ZTogVGV4dHVyZVNpemUgfCBudWxsID0gbnVsbCkge1xuICAgIGlmICghc2l6ZSkge1xuICAgICAgc2l6ZSA9IHtcbiAgICAgICAgd2lkdGg6IE1hdGguZmxvb3IodGhpcy5yZW5kZXJlci5waXhlbFJhdGlvQm91bmRpbmdSZWN0LndpZHRoKSxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLmZsb29yKHRoaXMucmVuZGVyZXIucGl4ZWxSYXRpb0JvdW5kaW5nUmVjdC5oZWlnaHQpLFxuICAgICAgICBkZXB0aDogMSxcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBubyByZWFsIHJlc2l6ZSwgYmFpbCFcbiAgICBpZiAoc2l6ZS53aWR0aCA9PT0gdGhpcy5zaXplLndpZHRoICYmIHNpemUuaGVpZ2h0ID09PSB0aGlzLnNpemUuaGVpZ2h0ICYmIHNpemUuZGVwdGggPT09IHRoaXMuc2l6ZS5kZXB0aCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdGhpcy5mb3JjZVJlc2l6ZShzaXplKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgb3VyIHtAbGluayBSZW5kZXJUZXh0dXJlfVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZVJlbmRlclRleHR1cmUodGhpcylcblxuICAgIC8vIGRlc3Ryb3kgdGhlIEdQVSB0ZXh0dXJlIG9ubHkgaWYgaXQncyBub3QgYSBjb3B5IG9mIGFub3RoZXIgdGV4dHVyZVxuICAgIGlmICghdGhpcy5vcHRpb25zLmZyb21UZXh0dXJlKSB7XG4gICAgICB0aGlzLnRleHR1cmU/LmRlc3Ryb3koKVxuICAgIH1cblxuICAgIHRoaXMudGV4dHVyZSA9IG51bGxcbiAgfVxufVxuIiwiaW1wb3J0IHsgaXNSZW5kZXJlciwgUmVuZGVyZXIgfSBmcm9tICcuLi9yZW5kZXJlcnMvdXRpbHMnXG5pbXBvcnQgeyBCaW5kR3JvdXAgfSBmcm9tICcuLi9iaW5kR3JvdXBzL0JpbmRHcm91cCdcbmltcG9ydCB7IFRleHR1cmVCaW5kR3JvdXAgfSBmcm9tICcuLi9iaW5kR3JvdXBzL1RleHR1cmVCaW5kR3JvdXAnXG5pbXBvcnQgeyBTYW1wbGVyIH0gZnJvbSAnLi4vc2FtcGxlcnMvU2FtcGxlcidcbmltcG9ydCB7IEFsbG93ZWRQaXBlbGluZUVudHJpZXMgfSBmcm9tICcuLi9waXBlbGluZXMvUGlwZWxpbmVNYW5hZ2VyJ1xuaW1wb3J0IHsgQnVmZmVyQmluZGluZywgQnVmZmVyQmluZGluZ0lucHV0IH0gZnJvbSAnLi4vYmluZGluZ3MvQnVmZmVyQmluZGluZydcbmltcG9ydCB7IEFsbG93ZWRCaW5kR3JvdXBzLCBCaW5kR3JvdXBCaW5kaW5nRWxlbWVudCwgQmluZEdyb3VwQnVmZmVyQmluZGluZ0VsZW1lbnQgfSBmcm9tICcuLi8uLi90eXBlcy9CaW5kR3JvdXBzJ1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL1RleHR1cmUnXG5pbXBvcnQgeyBGdWxsU2hhZGVyc1R5cGUsIE1hdGVyaWFsT3B0aW9ucywgTWF0ZXJpYWxQYXJhbXMgfSBmcm9tICcuLi8uLi90eXBlcy9NYXRlcmlhbHMnXG5pbXBvcnQgeyBHUFVDdXJ0YWlucyB9IGZyb20gJy4uLy4uL2N1cnRhaW5zL0dQVUN1cnRhaW5zJ1xuaW1wb3J0IHsgUmVuZGVyVGV4dHVyZSB9IGZyb20gJy4uL3RleHR1cmVzL1JlbmRlclRleHR1cmUnXG5pbXBvcnQgeyBCaW5kaW5nIH0gZnJvbSAnLi4vYmluZGluZ3MvQmluZGluZydcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJ1xuaW1wb3J0IHsgQnVmZmVyRWxlbWVudCB9IGZyb20gJy4uL2JpbmRpbmdzL2J1ZmZlckVsZW1lbnRzL0J1ZmZlckVsZW1lbnQnXG5cbi8qKlxuICogVXNlZCBhcyBhIGJhc2UgdG8gY3JlYXRlIGEge0BsaW5rIE1hdGVyaWFsfS48YnI+XG4gKiBUaGUgcHVycG9zZSBvZiB7QGxpbmsgTWF0ZXJpYWx9IGlzIHRvIGNyZWF0ZSBhbmQgdXBkYXRlIHRoZSB7QGxpbmsgQmluZEdyb3VwIHwgYmluZCBncm91cHN9IGFuZCB0aGVpciBiaW5kaW5ncyAoR1BVIGJ1ZmZlcnMsIHRleHR1cmVzIGFuZCBzYW1wbGVycyksIGNyZWF0ZSBhIHtAbGluayBjb3JlL3BpcGVsaW5lcy9QaXBlbGluZUVudHJ5LlBpcGVsaW5lRW50cnkgfCBQaXBlbGluZUVudHJ5fSBhbmQgdXNlIHRoZW0gdG8ge0BsaW5rIE1hdGVyaWFsI3JlbmRlciB8IHJlbmRlcn0uXG4gKlxuICogIyMgQmluZCBncm91cHNcbiAqXG4gKiBBIHtAbGluayBNYXRlcmlhbH0gYXV0b21hdGljYWxseSBjcmVhdGVzIGEge0BsaW5rIFRleHR1cmVCaW5kR3JvdXB9LCBidXQgaXQgaXMgYWN0dWFsbHkgYWRkZWQgdG8gdGhlIGFjdGl2ZSB7QGxpbmsgTWF0ZXJpYWwjYmluZEdyb3VwcyB8IGJpbmQgZ3JvdXBzIGFycmF5fSBvbmx5IGlmIG5lY2Vzc2FyeSwgd2hpY2ggbWVhbnMgaWYgeW91ciBzaGFkZXJzIHVzZSBhIHtAbGluayBHUFVTYW1wbGVyfSwgYSB7QGxpbmsgR1BVVGV4dHVyZX0gb3IgYSB7QGxpbmsgR1BVRXh0ZXJuYWxUZXh0dXJlfS5cbiAqXG4gKiBBbm90aGVyIHtAbGluayBCaW5kR3JvdXB9IHdpbGwgYmUgY3JlYXRlZCBpZiB5b3UgcGFzcyBhbnkge0BsaW5rIE1hdGVyaWFsUGFyYW1zI3VuaWZvcm1zIHwgdW5pZm9ybXN9IG9yIHtAbGluayBNYXRlcmlhbFBhcmFtcyNzdG9yYWdlcyB8IHN0b3JhZ2VzfSBwYXJhbWV0ZXJzLlxuICpcbiAqIEZpbmFsbHksIHlvdSBjYW4gYWxzbyBwYXNzIGFscmVhZHkgY3JlYXRlZCB7QGxpbmsgQmluZEdyb3VwfSB0byBhIHtAbGluayBNYXRlcmlhbH0gdmlhIHRoZSB7QGxpbmsgTWF0ZXJpYWxQYXJhbXMjYmluZEdyb3VwcyB8IGJpbmRHcm91cHN9IHBhcmFtZXRlci5cbiAqXG4gKiAtLS0tXG4gKlxuICogTm90ZSB0aGF0IHRoaXMgY2xhc3MgaXMgbm90IGludGVuZGVkIHRvIGJlIHVzZWQgYXMgaXMsIGJ1dCBhcyBhIGJhc2UgZm9yIHtAbGluayBjb3JlL21hdGVyaWFscy9Db21wdXRlTWF0ZXJpYWwuQ29tcHV0ZU1hdGVyaWFsIHwgQ29tcHV0ZU1hdGVyaWFsfSBhbmQge0BsaW5rIGNvcmUvbWF0ZXJpYWxzL1JlbmRlck1hdGVyaWFsLlJlbmRlck1hdGVyaWFsIHwgUmVuZGVyTWF0ZXJpYWx9IGNsYXNzZXMuXG4gKi9cbmV4cG9ydCBjbGFzcyBNYXRlcmlhbCB7XG4gIC8qKiBUaGUgdHlwZSBvZiB0aGUge0BsaW5rIE1hdGVyaWFsfSAqL1xuICB0eXBlOiBzdHJpbmdcbiAgLyoqIFRoZSB1bml2ZXJzYWwgdW5pcXVlIGlkIG9mIHRoZSB7QGxpbmsgTWF0ZXJpYWx9ICovXG4gIHV1aWQ6IHN0cmluZ1xuICAvKiogVGhlIHtAbGluayBSZW5kZXJlcn0gdXNlZCAqL1xuICByZW5kZXJlcjogUmVuZGVyZXJcbiAgLyoqIE9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgTWF0ZXJpYWx9ICovXG4gIG9wdGlvbnM6IE1hdGVyaWFsT3B0aW9uc1xuXG4gIC8qKiBQaXBlbGluZSBlbnRyeSB1c2VkIGJ5IHRoaXMge0BsaW5rIE1hdGVyaWFsfSAqL1xuICBwaXBlbGluZUVudHJ5OiBBbGxvd2VkUGlwZWxpbmVFbnRyaWVzXG5cbiAgLyoqXG4gICAqIEFycmF5IG9mIHtAbGluayBCaW5kR3JvdXAgfCBiaW5kIGdyb3Vwc30gdXNlZCBieSB0aGlzIHtAbGluayBNYXRlcmlhbH1cbiAgICogVGhpcyBhcnJheSByZXNwZWN0cyBhIHNwZWNpZmljIG9yZGVyOlxuICAgKiAxLiBUaGUge0BsaW5rIHRleHR1cmVzQmluZEdyb3VwIHwgdGV4dHVyZXMgYmluZCBncm91cHN9XG4gICAqIDIuIFRoZSB7QGxpbmsgQmluZEdyb3VwIHwgYmluZCBncm91cH0gY3JlYXRlZCB1c2luZyB7QGxpbmsgdHlwZXMvQmluZEdyb3Vwcy5CaW5kR3JvdXBJbnB1dHMjdW5pZm9ybXMgfCB1bmlmb3Jtc30gYW5kIHtAbGluayB0eXBlcy9CaW5kR3JvdXBzLkJpbmRHcm91cElucHV0cyNzdG9yYWdlcyB8IHN0b3JhZ2VzfSBwYXJhbWV0ZXJzIGlmIGFueVxuICAgKiAzLiBBZGRpdGlvbmFsIHtAbGluayBNYXRlcmlhbFBhcmFtcyNiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9IHBhcmFtZXRlcnMgaWYgYW55XG4gICAqL1xuICBiaW5kR3JvdXBzOiBBbGxvd2VkQmluZEdyb3Vwc1tdXG4gIC8qKiBBcnJheSBvZiB7QGxpbmsgVGV4dHVyZUJpbmRHcm91cCB8IHRleHR1cmUgYmluZCBncm91cHN9IHVzZWQgYnkgdGhpcyB7QGxpbmsgTWF0ZXJpYWx9ICovXG4gIHRleHR1cmVzQmluZEdyb3VwczogVGV4dHVyZUJpbmRHcm91cFtdXG4gIC8qKiBBcnJheSBvZiB7QGxpbmsgQmluZEdyb3VwIHwgYmluZCBncm91cHN9IGNyZWF0ZWQgdXNpbmcgdGhlIHtAbGluayB0eXBlcy9CaW5kR3JvdXBzLkJpbmRHcm91cElucHV0cyN1bmlmb3JtcyB8IHVuaWZvcm1zfSBhbmQge0BsaW5rIHR5cGVzL0JpbmRHcm91cHMuQmluZEdyb3VwSW5wdXRzI3N0b3JhZ2VzIHwgc3RvcmFnZXN9IHBhcmFtZXRlcnMgd2hlbiBpbnN0YW5jaW5nIHRoaXMge0BsaW5rIE1hdGVyaWFsfSAqL1xuICBpbnB1dHNCaW5kR3JvdXBzOiBCaW5kR3JvdXBbXVxuICAvKiogQXJyYXkgb2Yge0BsaW5rIEJpbmRHcm91cCB8IGNsb25lZCBiaW5kIGdyb3Vwc30gY3JlYXRlZCBieSB0aGlzIHtAbGluayBNYXRlcmlhbH0gKi9cbiAgY2xvbmVkQmluZEdyb3VwczogQWxsb3dlZEJpbmRHcm91cHNbXVxuXG4gIC8qKiBPYmplY3QgY29udGFpbmluZyBhbGwgdW5pZm9ybXMgaW5wdXRzIGhhbmRsZWQgYnkgdGhpcyB7QGxpbmsgTWF0ZXJpYWx9ICovXG4gIHVuaWZvcm1zOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBCdWZmZXJCaW5kaW5nSW5wdXQ+PlxuICAvKiogT2JqZWN0IGNvbnRhaW5pbmcgYWxsIHJlYWQgb25seSBvciByZWFkL3dyaXRlIHN0b3JhZ2VzIGlucHV0cyBoYW5kbGVkIGJ5IHRoaXMge0BsaW5rIE1hdGVyaWFsfSAqL1xuICBzdG9yYWdlczogUmVjb3JkPHN0cmluZywgUmVjb3JkPHN0cmluZywgQnVmZmVyQmluZGluZ0lucHV0Pj5cblxuICAvKiogQXJyYXkgb2Yge0BsaW5rIEJpbmRpbmcgfCBiaW5kaW5nc30gY3JlYXRlZCB1c2luZyB0aGUge0BsaW5rIHR5cGVzL0JpbmRHcm91cHMuQmluZEdyb3VwSW5wdXRzI3VuaWZvcm1zIHwgdW5pZm9ybXN9IGFuZCB7QGxpbmsgdHlwZXMvQmluZEdyb3Vwcy5CaW5kR3JvdXBJbnB1dHMjc3RvcmFnZXMgfCBzdG9yYWdlc30gcGFyYW1ldGVycyB3aGVuIGluc3RhbmNpbmcgdGhpcyB7QGxpbmsgTWF0ZXJpYWx9ICovXG4gIGlucHV0c0JpbmRpbmdzOiBCaW5kR3JvdXBCaW5kaW5nRWxlbWVudFtdXG5cbiAgLyoqIEFycmF5IG9mIHtAbGluayBUZXh0dXJlfSBoYW5kbGVkIGJ5IHRoaXMge0BsaW5rIE1hdGVyaWFsfSAqL1xuICB0ZXh0dXJlczogVGV4dHVyZVtdXG4gIC8qKiBBcnJheSBvZiB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gaGFuZGxlZCBieSB0aGlzIHtAbGluayBNYXRlcmlhbH0gKi9cbiAgcmVuZGVyVGV4dHVyZXM6IFJlbmRlclRleHR1cmVbXVxuICAvKiogQXJyYXkgb2Yge0BsaW5rIFNhbXBsZXJ9IGhhbmRsZWQgYnkgdGhpcyB7QGxpbmsgTWF0ZXJpYWx9ICovXG4gIHNhbXBsZXJzOiBTYW1wbGVyW11cblxuICAvKipcbiAgICogTWF0ZXJpYWwgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0gb3VyIHJlbmRlcmVyIGNsYXNzIG9iamVjdFxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayB0eXBlcy9NYXRlcmlhbHMuTWF0ZXJpYWxQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSBvdXIgTWF0ZXJpYWxcbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlciB8IEdQVUN1cnRhaW5zLCBwYXJhbWV0ZXJzOiBNYXRlcmlhbFBhcmFtcykge1xuICAgIHRoaXMudHlwZSA9ICdNYXRlcmlhbCdcblxuICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XG4gICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIFJlbmRlcmVyKVxuXG4gICAgaXNSZW5kZXJlcihyZW5kZXJlciwgdGhpcy50eXBlKVxuXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyXG5cbiAgICB0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKVxuXG4gICAgY29uc3QgeyBzaGFkZXJzLCBsYWJlbCwgdXNlQXN5bmNQaXBlbGluZSwgdW5pZm9ybXMsIHN0b3JhZ2VzLCBiaW5kR3JvdXBzLCBzYW1wbGVycywgdGV4dHVyZXMsIHJlbmRlclRleHR1cmVzIH0gPVxuICAgICAgcGFyYW1ldGVyc1xuXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgc2hhZGVycyxcbiAgICAgIGxhYmVsLFxuICAgICAgLi4uKHVzZUFzeW5jUGlwZWxpbmUgIT09IHVuZGVmaW5lZCAmJiB7IHVzZUFzeW5jUGlwZWxpbmUgfSksXG4gICAgICAuLi4odW5pZm9ybXMgIT09IHVuZGVmaW5lZCAmJiB7IHVuaWZvcm1zIH0pLFxuICAgICAgLi4uKHN0b3JhZ2VzICE9PSB1bmRlZmluZWQgJiYgeyBzdG9yYWdlcyB9KSxcbiAgICAgIC4uLihiaW5kR3JvdXBzICE9PSB1bmRlZmluZWQgJiYgeyBiaW5kR3JvdXBzIH0pLFxuICAgICAgLi4uKHNhbXBsZXJzICE9PSB1bmRlZmluZWQgJiYgeyBzYW1wbGVycyB9KSxcbiAgICAgIC4uLih0ZXh0dXJlcyAhPT0gdW5kZWZpbmVkICYmIHsgdGV4dHVyZXMgfSksXG4gICAgICAuLi4ocmVuZGVyVGV4dHVyZXMgIT09IHVuZGVmaW5lZCAmJiB7IHJlbmRlclRleHR1cmVzIH0pLFxuICAgIH1cblxuICAgIHRoaXMuYmluZEdyb3VwcyA9IFtdXG4gICAgdGhpcy50ZXh0dXJlc0JpbmRHcm91cHMgPSBbXVxuICAgIHRoaXMuY2xvbmVkQmluZEdyb3VwcyA9IFtdXG5cbiAgICB0aGlzLnNldEJpbmRHcm91cHMoKVxuXG4gICAgdGhpcy5zZXRUZXh0dXJlcygpXG4gICAgdGhpcy5zZXRTYW1wbGVycygpXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYWxsIGJpbmQgZ3JvdXBzIGFyZSByZWFkeSwgYW5kIGNyZWF0ZSB0aGVtIGlmIG5lZWRlZFxuICAgKi9cbiAgY29tcGlsZU1hdGVyaWFsKCkge1xuICAgIGNvbnN0IHRleHR1cmVzQmluZEdyb3VwTGVuZ3RoID0gdGhpcy50ZXh0dXJlc0JpbmRHcm91cC5iaW5kaW5ncy5sZW5ndGggPyAxIDogMFxuICAgIGNvbnN0IGJpbmRHcm91cHNSZWFkeSA9IHRoaXMuYmluZEdyb3Vwcy5sZW5ndGggPj0gdGhpcy5pbnB1dHNCaW5kR3JvdXBzLmxlbmd0aCArIHRleHR1cmVzQmluZEdyb3VwTGVuZ3RoXG5cbiAgICBpZiAoIWJpbmRHcm91cHNSZWFkeSkge1xuICAgICAgdGhpcy5jcmVhdGVCaW5kR3JvdXBzKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgdGhlIHJlbmRlcmVyIGlzIHJlYWR5LCBvdXIgcGlwZWxpbmUgZW50cnkgYW5kIHBpcGVsaW5lIGhhdmUgYmVlbiBjcmVhdGVkIGFuZCBzdWNjZXNzZnVsbHkgY29tcGlsZWRcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgcmVhZHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICEhKHRoaXMucmVuZGVyZXIucmVhZHkgJiYgdGhpcy5waXBlbGluZUVudHJ5ICYmIHRoaXMucGlwZWxpbmVFbnRyeS5waXBlbGluZSAmJiB0aGlzLnBpcGVsaW5lRW50cnkucmVhZHkpXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHtAbGluayBjb3JlL3JlbmRlcmVycy9HUFVEZXZpY2VNYW5hZ2VyLkdQVURldmljZU1hbmFnZXIjZGV2aWNlIHwgZGV2aWNlfSBoYXMgYmVlbiBsb3N0IHRvIHByZXBhcmUgZXZlcnl0aGluZyBmb3IgcmVzdG9yYXRpb24uXG4gICAqIEJhc2ljYWxseSBzZXQgYWxsIHRoZSB7QGxpbmsgR1BVQnVmZmVyfSB0byBudWxsIHNvIHRoZXkgd2lsbCBiZSByZXNldCBuZXh0IHRpbWUgd2UgdHJ5IHRvIHJlbmRlclxuICAgKi9cbiAgbG9zZUNvbnRleHQoKSB7XG4gICAgLy8gc3RhcnQgd2l0aCB0aGUgdGV4dHVyZXNcbiAgICB0aGlzLnRleHR1cmVzLmZvckVhY2goKHRleHR1cmUpID0+IHtcbiAgICAgIHRleHR1cmUudGV4dHVyZSA9IG51bGxcbiAgICAgIHRleHR1cmUuc291cmNlVXBsb2FkZWQgPSBmYWxzZVxuICAgIH0pXG5cbiAgICB0aGlzLnJlbmRlclRleHR1cmVzLmZvckVhY2goKHRleHR1cmUpID0+IHtcbiAgICAgIHRleHR1cmUudGV4dHVyZSA9IG51bGxcbiAgICB9KVxuXG4gICAgLy8gdGhlbiBiaW5kIGdyb3VwcyBhbmQgc3RydWN0XG4gICAgO1suLi50aGlzLmJpbmRHcm91cHMsIC4uLnRoaXMuY2xvbmVkQmluZEdyb3VwcywgLi4udGhpcy5pbnB1dHNCaW5kR3JvdXBzXS5mb3JFYWNoKChiaW5kR3JvdXApID0+XG4gICAgICBiaW5kR3JvdXAubG9zZUNvbnRleHQoKVxuICAgIClcblxuICAgIC8vIHJlc2V0IHBpcGVsaW5lIGFzIHdlbGxcbiAgICB0aGlzLnBpcGVsaW5lRW50cnkucGlwZWxpbmUgPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHtAbGluayBjb3JlL3JlbmRlcmVycy9HUFVEZXZpY2VNYW5hZ2VyLkdQVURldmljZU1hbmFnZXIjZGV2aWNlIHwgZGV2aWNlfSBoYXMgYmVlbiByZXN0b3JlZCB0byByZWNyZWF0ZSBvdXIgYmluZCBncm91cHMuXG4gICAqL1xuICByZXN0b3JlQ29udGV4dCgpIHtcbiAgICAvLyBzdGFydCB3aXRoIHRoZSBzYW1wbGVycyBhbmQgdGV4dHVyZXNcbiAgICB0aGlzLnNhbXBsZXJzLmZvckVhY2goKHNhbXBsZXIpID0+IHtcbiAgICAgIC8vIHRoZSBzYW1wbGVycyBoYXZlIGFsbCBiZWVuIHJlY3JlYXRlZCBieSB0aGUgcmVuZGVyZXIsIGp1c3QgdXBkYXRlIHRoZSByZWZlcmVuY2VcbiAgICAgIHNhbXBsZXIuY3JlYXRlU2FtcGxlcigpXG4gICAgICBzYW1wbGVyLmJpbmRpbmcucmVzb3VyY2UgPSBzYW1wbGVyLnNhbXBsZXJcbiAgICB9KVxuXG4gICAgLy8gcmVjcmVhdGUgdGhlIHRleHR1cmVzIGFuZCByZXNpemUgdGhlbVxuICAgIHRoaXMudGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSkgPT4ge1xuICAgICAgdGV4dHVyZS5jcmVhdGVUZXh0dXJlKClcbiAgICAgIHRleHR1cmUucmVzaXplKClcbiAgICB9KVxuXG4gICAgdGhpcy5yZW5kZXJUZXh0dXJlcy5mb3JFYWNoKCh0ZXh0dXJlKSA9PiB7XG4gICAgICB0ZXh0dXJlLnJlc2l6ZSh0ZXh0dXJlLnNpemUpXG4gICAgfSlcblxuICAgIC8vIG5vdyB0aGUgYmluZCBncm91cHNcbiAgICA7Wy4uLnRoaXMuYmluZEdyb3VwcywgLi4udGhpcy5jbG9uZWRCaW5kR3JvdXBzLCAuLi50aGlzLmlucHV0c0JpbmRHcm91cHNdLmZvckVhY2goKGJpbmRHcm91cCkgPT4ge1xuICAgICAgaWYgKGJpbmRHcm91cC5zaG91bGRDcmVhdGVCaW5kR3JvdXApIHtcbiAgICAgICAgYmluZEdyb3VwLmNyZWF0ZUJpbmRHcm91cCgpXG4gICAgICB9XG5cbiAgICAgIC8vIGZpbmFsbHkgcmUtd3JpdGUgYWxsIG91ciBidWZmZXJzXG4gICAgICBiaW5kR3JvdXAuYnVmZmVyQmluZGluZ3MuZm9yRWFjaCgoYnVmZmVyQmluZGluZykgPT4gKGJ1ZmZlckJpbmRpbmcuc2hvdWxkVXBkYXRlID0gdHJ1ZSkpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGNvbXBsZXRlIGNvZGUgb2YgYSBnaXZlbiBzaGFkZXIgaW5jbHVkaW5nIGFsbCB0aGUgV0dTTCBmcmFnbWVudCBjb2RlIHNuaXBwZXRzIGFkZGVkIGJ5IHRoZSBwaXBlbGluZVxuICAgKiBAcGFyYW0gW3NoYWRlclR5cGU9XCJmdWxsXCJdIC0gc2hhZGVyIHRvIGdldCB0aGUgY29kZSBmcm9tXG4gICAqIEByZXR1cm5zIC0gVGhlIGNvcnJlc3BvbmRpbmcgc2hhZGVyIGNvZGVcbiAgICovXG4gIGdldFNoYWRlckNvZGUoc2hhZGVyVHlwZTogRnVsbFNoYWRlcnNUeXBlID0gJ2Z1bGwnKTogc3RyaW5nIHtcbiAgICBpZiAoIXRoaXMucGlwZWxpbmVFbnRyeSkgcmV0dXJuICcnXG5cbiAgICBzaGFkZXJUeXBlID0gKCgpID0+IHtcbiAgICAgIHN3aXRjaCAoc2hhZGVyVHlwZSkge1xuICAgICAgICBjYXNlICd2ZXJ0ZXgnOlxuICAgICAgICBjYXNlICdmcmFnbWVudCc6XG4gICAgICAgIGNhc2UgJ2NvbXB1dGUnOlxuICAgICAgICBjYXNlICdmdWxsJzpcbiAgICAgICAgICByZXR1cm4gc2hhZGVyVHlwZVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAnZnVsbCdcbiAgICAgIH1cbiAgICB9KSgpXG5cbiAgICByZXR1cm4gdGhpcy5waXBlbGluZUVudHJ5LnNoYWRlcnNbc2hhZGVyVHlwZV0uY29kZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgYWRkZWQgY29kZSBvZiBhIGdpdmVuIHNoYWRlciwgaS5lLiBhbGwgdGhlIFdHU0wgZnJhZ21lbnQgY29kZSBzbmlwcGV0cyBhZGRlZCBieSB0aGUgcGlwZWxpbmVcbiAgICogQHBhcmFtIFtzaGFkZXJUeXBlPVwidmVydGV4XCJdIC0gc2hhZGVyIHRvIGdldCB0aGUgY29kZSBmcm9tXG4gICAqIEByZXR1cm5zIC0gVGhlIGNvcnJlc3BvbmRpbmcgc2hhZGVyIGNvZGVcbiAgICovXG4gIGdldEFkZGVkU2hhZGVyQ29kZShzaGFkZXJUeXBlOiBGdWxsU2hhZGVyc1R5cGUgPSAndmVydGV4Jyk6IHN0cmluZyB7XG4gICAgaWYgKCF0aGlzLnBpcGVsaW5lRW50cnkpIHJldHVybiAnJ1xuXG4gICAgc2hhZGVyVHlwZSA9ICgoKSA9PiB7XG4gICAgICBzd2l0Y2ggKHNoYWRlclR5cGUpIHtcbiAgICAgICAgY2FzZSAndmVydGV4JzpcbiAgICAgICAgY2FzZSAnZnJhZ21lbnQnOlxuICAgICAgICBjYXNlICdjb21wdXRlJzpcbiAgICAgICAgICByZXR1cm4gc2hhZGVyVHlwZVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgIHJldHVybiAndmVydGV4J1xuICAgICAgfVxuICAgIH0pKClcblxuICAgIHJldHVybiB0aGlzLnBpcGVsaW5lRW50cnkuc2hhZGVyc1tzaGFkZXJUeXBlXS5oZWFkXG4gIH1cblxuICAvKiBCSU5EIEdST1VQUyAqL1xuXG4gIC8qKlxuICAgKiBQcmVwYXJlIGFuZCBzZXQgb3VyIGJpbmQgZ3JvdXBzIGJhc2VkIG9uIGlucHV0cyBhbmQgYmluZEdyb3VwcyBNYXRlcmlhbCBwYXJhbWV0ZXJzXG4gICAqL1xuICBzZXRCaW5kR3JvdXBzKCkge1xuICAgIHRoaXMudW5pZm9ybXMgPSB7fVxuICAgIHRoaXMuc3RvcmFnZXMgPSB7fVxuXG4gICAgdGhpcy5pbnB1dHNCaW5kR3JvdXBzID0gW11cbiAgICB0aGlzLmlucHV0c0JpbmRpbmdzID0gW11cblxuICAgIGlmICh0aGlzLm9wdGlvbnMudW5pZm9ybXMgfHwgdGhpcy5vcHRpb25zLnN0b3JhZ2VzKSB7XG4gICAgICBjb25zdCBpbnB1dHNCaW5kR3JvdXAgPSBuZXcgQmluZEdyb3VwKHRoaXMucmVuZGVyZXIsIHtcbiAgICAgICAgbGFiZWw6IHRoaXMub3B0aW9ucy5sYWJlbCArICc6IEJpbmRpbmdzIGJpbmQgZ3JvdXAnLFxuICAgICAgICB1bmlmb3JtczogdGhpcy5vcHRpb25zLnVuaWZvcm1zLFxuICAgICAgICBzdG9yYWdlczogdGhpcy5vcHRpb25zLnN0b3JhZ2VzLFxuICAgICAgfSlcblxuICAgICAgdGhpcy5wcm9jZXNzQmluZEdyb3VwQmluZGluZ3MoaW5wdXRzQmluZEdyb3VwKVxuICAgICAgdGhpcy5pbnB1dHNCaW5kR3JvdXBzLnB1c2goaW5wdXRzQmluZEdyb3VwKVxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucy5iaW5kR3JvdXBzPy5mb3JFYWNoKChiaW5kR3JvdXApID0+IHtcbiAgICAgIHRoaXMucHJvY2Vzc0JpbmRHcm91cEJpbmRpbmdzKGJpbmRHcm91cClcbiAgICAgIHRoaXMuaW5wdXRzQmluZEdyb3Vwcy5wdXNoKGJpbmRHcm91cClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbWFpbiB7QGxpbmsgVGV4dHVyZUJpbmRHcm91cCB8IHRleHR1cmUgYmluZCBncm91cH0gY3JlYXRlZCBieSB0aGlzIHtAbGluayBNYXRlcmlhbH0gdG8gbWFuYWdlIGFsbCB0ZXh0dXJlcyByZWxhdGVkIHN0cnVjdFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCB0ZXh0dXJlc0JpbmRHcm91cCgpOiBUZXh0dXJlQmluZEdyb3VwIHtcbiAgICByZXR1cm4gdGhpcy50ZXh0dXJlc0JpbmRHcm91cHNbMF1cbiAgfVxuXG4gIC8qKlxuICAgKiBQcm9jZXNzIGFsbCB7QGxpbmsgQmluZEdyb3VwfSBzdHJ1Y3QgYW5kIGFkZCB0aGVtIHRvIHRoZSBjb3JyZXNwb25kaW5nIG9iamVjdHMgYmFzZWQgb24gdGhlaXIgYmluZGluZyB0eXBlcy4gQWxzbyBzdG9yZSB0aGVtIGluIGEgaW5wdXRzQmluZGluZ3MgYXJyYXkgdG8gZmFjaWxpdGF0ZSBmdXJ0aGVyIGFjY2VzcyB0byBzdHJ1Y3QuXG4gICAqIEBwYXJhbSBiaW5kR3JvdXAgLSBUaGUge0BsaW5rIEJpbmRHcm91cH0gdG8gcHJvY2Vzc1xuICAgKi9cbiAgcHJvY2Vzc0JpbmRHcm91cEJpbmRpbmdzKGJpbmRHcm91cDogQmluZEdyb3VwKSB7XG4gICAgYmluZEdyb3VwLmJpbmRpbmdzLmZvckVhY2goKGlucHV0QmluZGluZykgPT4ge1xuICAgICAgaWYgKGlucHV0QmluZGluZy5iaW5kaW5nVHlwZSA9PT0gJ3VuaWZvcm0nKVxuICAgICAgICB0aGlzLnVuaWZvcm1zID0ge1xuICAgICAgICAgIC4uLnRoaXMudW5pZm9ybXMsXG4gICAgICAgICAgW2lucHV0QmluZGluZy5uYW1lXTogKGlucHV0QmluZGluZyBhcyBCaW5kR3JvdXBCdWZmZXJCaW5kaW5nRWxlbWVudCkuaW5wdXRzLFxuICAgICAgICB9XG4gICAgICBpZiAoaW5wdXRCaW5kaW5nLmJpbmRpbmdUeXBlID09PSAnc3RvcmFnZScpXG4gICAgICAgIHRoaXMuc3RvcmFnZXMgPSB7XG4gICAgICAgICAgLi4udGhpcy5zdG9yYWdlcyxcbiAgICAgICAgICBbaW5wdXRCaW5kaW5nLm5hbWVdOiAoaW5wdXRCaW5kaW5nIGFzIEJpbmRHcm91cEJ1ZmZlckJpbmRpbmdFbGVtZW50KS5pbnB1dHMsXG4gICAgICAgIH1cblxuICAgICAgdGhpcy5pbnB1dHNCaW5kaW5ncy5wdXNoKGlucHV0QmluZGluZylcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgYmluZCBncm91cHMgaWYgdGhleSBuZWVkIHRvIGJlIGNyZWF0ZWRcbiAgICovXG4gIGNyZWF0ZUJpbmRHcm91cHMoKSB7XG4gICAgLy8gdGV4dHVyZXMgZmlyc3RcbiAgICBpZiAodGhpcy50ZXh0dXJlc0JpbmRHcm91cC5zaG91bGRDcmVhdGVCaW5kR3JvdXApIHtcbiAgICAgIHRoaXMudGV4dHVyZXNCaW5kR3JvdXAuc2V0SW5kZXgodGhpcy5iaW5kR3JvdXBzLmxlbmd0aClcbiAgICAgIHRoaXMudGV4dHVyZXNCaW5kR3JvdXAuY3JlYXRlQmluZEdyb3VwKClcblxuICAgICAgdGhpcy5iaW5kR3JvdXBzLnB1c2godGhpcy50ZXh0dXJlc0JpbmRHcm91cClcbiAgICB9XG5cbiAgICAvLyB0aGVuIHVuaWZvcm1zL3N0b3JhZ2VzIGlucHV0c1xuICAgIHRoaXMuaW5wdXRzQmluZEdyb3Vwcy5mb3JFYWNoKChiaW5kR3JvdXApID0+IHtcbiAgICAgIGlmIChiaW5kR3JvdXAuc2hvdWxkQ3JlYXRlQmluZEdyb3VwKSB7XG4gICAgICAgIGJpbmRHcm91cC5zZXRJbmRleCh0aGlzLmJpbmRHcm91cHMubGVuZ3RoKVxuICAgICAgICBiaW5kR3JvdXAuY3JlYXRlQmluZEdyb3VwKClcblxuICAgICAgICB0aGlzLmJpbmRHcm91cHMucHVzaChiaW5kR3JvdXApXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIGZpbmFsbHksIGJpbmRHcm91cHMgaW5wdXRzXG4gICAgdGhpcy5vcHRpb25zLmJpbmRHcm91cHM/LmZvckVhY2goKGJpbmRHcm91cCkgPT4ge1xuICAgICAgLy8gaXQgaGFzIGJlZW4gY3JlYXRlZCBidXQgbm90IGJlZW4gYWRkZWQgeWV0PyBhZGQgaXQhXG4gICAgICBpZiAoIWJpbmRHcm91cC5zaG91bGRDcmVhdGVCaW5kR3JvdXAgJiYgIXRoaXMuYmluZEdyb3Vwcy5maW5kKChiRykgPT4gYkcudXVpZCA9PT0gYmluZEdyb3VwLnV1aWQpKSB7XG4gICAgICAgIGJpbmRHcm91cC5zZXRJbmRleCh0aGlzLmJpbmRHcm91cHMubGVuZ3RoKVxuICAgICAgICB0aGlzLmJpbmRHcm91cHMucHVzaChiaW5kR3JvdXApXG4gICAgICB9XG5cbiAgICAgIC8vIGFkZCBpdCB0byBvdXIgdGV4dHVyZXMgYmluZCBncm91cHMgYXMgd2VsbCBpZiBuZWVkZWRcbiAgICAgIGlmIChiaW5kR3JvdXAgaW5zdGFuY2VvZiBUZXh0dXJlQmluZEdyb3VwICYmICF0aGlzLnRleHR1cmVzQmluZEdyb3Vwcy5maW5kKChiRykgPT4gYkcudXVpZCA9PT0gYmluZEdyb3VwLnV1aWQpKSB7XG4gICAgICAgIHRoaXMudGV4dHVyZXNCaW5kR3JvdXBzLnB1c2goYmluZEdyb3VwKVxuXG4gICAgICAgIC8vIGFsc28gYWRkIHRoZSB0ZXh0dXJlcz9cbiAgICAgICAgYmluZEdyb3VwLnRleHR1cmVzLmZvckVhY2goKHRleHR1cmUpID0+IHtcbiAgICAgICAgICBpZiAodGV4dHVyZSBpbnN0YW5jZW9mIFRleHR1cmUgJiYgIXRoaXMudGV4dHVyZXMuZmluZCgodCkgPT4gdC51dWlkID09PSB0ZXh0dXJlLnV1aWQpKSB7XG4gICAgICAgICAgICB0aGlzLnRleHR1cmVzLnB1c2godGV4dHVyZSlcbiAgICAgICAgICB9IGVsc2UgaWYgKHRleHR1cmUgaW5zdGFuY2VvZiBSZW5kZXJUZXh0dXJlICYmICF0aGlzLnJlbmRlclRleHR1cmVzLmZpbmQoKHQpID0+IHQudXVpZCA9PT0gdGV4dHVyZS51dWlkKSkge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJUZXh0dXJlcy5wdXNoKHRleHR1cmUpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ2xvbmVzIGEge0BsaW5rIEJpbmRHcm91cH0gZnJvbSBhIGxpc3Qgb2YgYnVmZmVyc1xuICAgKiBVc2VmdWwgdG8gY3JlYXRlIGEgbmV3IGJpbmQgZ3JvdXAgd2l0aCBhbHJlYWR5IGNyZWF0ZWQgYnVmZmVycywgYnV0IHN3YXBwZWRcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSBwYXJhbWV0ZXJzIHVzZWQgdG8gY2xvbmUgdGhlIHtAbGluayBCaW5kR3JvdXAgfCBiaW5kIGdyb3VwfVxuICAgKiBAcGFyYW0gcGFyYW1ldGVycy5iaW5kR3JvdXAgLSB0aGUgQmluZEdyb3VwIHRvIGNsb25lXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzLmJpbmRpbmdzIC0gb3VyIGlucHV0IGJpbmRpbmcgYnVmZmVyc1xuICAgKiBAcGFyYW0gcGFyYW1ldGVycy5rZWVwTGF5b3V0IC0gd2hldGhlciB3ZSBzaG91bGQga2VlcCBvcmlnaW5hbCBiaW5kIGdyb3VwIGxheW91dCBvciBub3RcbiAgICogQHJldHVybnMgLSB0aGUgY2xvbmVkIEJpbmRHcm91cFxuICAgKi9cbiAgY2xvbmVCaW5kR3JvdXAoe1xuICAgIGJpbmRHcm91cCxcbiAgICBiaW5kaW5ncyA9IFtdLFxuICAgIGtlZXBMYXlvdXQgPSB0cnVlLFxuICB9OiB7XG4gICAgYmluZEdyb3VwPzogQWxsb3dlZEJpbmRHcm91cHNcbiAgICBiaW5kaW5ncz86IEJpbmRHcm91cEJpbmRpbmdFbGVtZW50W11cbiAgICBrZWVwTGF5b3V0PzogYm9vbGVhblxuICB9KTogQWxsb3dlZEJpbmRHcm91cHMgfCBudWxsIHtcbiAgICBpZiAoIWJpbmRHcm91cCkgcmV0dXJuIG51bGxcblxuICAgIGNvbnN0IGNsb25lID0gYmluZEdyb3VwLmNsb25lKHsgYmluZGluZ3MsIGtlZXBMYXlvdXQgfSlcbiAgICB0aGlzLmNsb25lZEJpbmRHcm91cHMucHVzaChjbG9uZSlcblxuICAgIHJldHVybiBjbG9uZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhIGNvcnJlc3BvbmRpbmcge0BsaW5rIEJpbmRHcm91cH0gb3Ige0BsaW5rIFRleHR1cmVCaW5kR3JvdXB9IGZyb20gb25lIG9mIGl0cyBiaW5kaW5nIG5hbWUva2V5XG4gICAqIEBwYXJhbSBiaW5kaW5nTmFtZSAtIHRoZSBiaW5kaW5nIG5hbWUva2V5IHRvIGxvb2sgZm9yXG4gICAqIEByZXR1cm5zIC0gYmluZCBncm91cCBmb3VuZCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgKi9cbiAgZ2V0QmluZEdyb3VwQnlCaW5kaW5nTmFtZShiaW5kaW5nTmFtZTogQnVmZmVyQmluZGluZ1snbmFtZSddID0gJycpOiBBbGxvd2VkQmluZEdyb3VwcyB8IG51bGwge1xuICAgIHJldHVybiAodGhpcy5yZWFkeSA/IHRoaXMuYmluZEdyb3VwcyA6IHRoaXMuaW5wdXRzQmluZEdyb3VwcykuZmluZCgoYmluZEdyb3VwKSA9PiB7XG4gICAgICByZXR1cm4gYmluZEdyb3VwLmJpbmRpbmdzLmZpbmQoKGJpbmRpbmcpID0+IGJpbmRpbmcubmFtZSA9PT0gYmluZGluZ05hbWUpXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IGEgYmluZCBncm91cCwgb25seSBpZiBpdCBpcyBub3QgdXNlZCBieSBhbm90aGVyIG9iamVjdFxuICAgKiBAcGFyYW0gYmluZEdyb3VwIC0gYmluZCBncm91cCB0byBldmVudHVhbGx5IGRlc3Ryb3lcbiAgICovXG4gIGRlc3Ryb3lCaW5kR3JvdXAoYmluZEdyb3VwOiBBbGxvd2VkQmluZEdyb3Vwcykge1xuICAgIC8vIGNoZWNrIGlmIHRoaXMgYmluZCBncm91cCBpcyB1c2VkIGJ5IGFub3RoZXIgb2JqZWN0IGJlZm9yZSBhY3R1YWxseSBkZXN0cm95aW5nIGl0XG4gICAgY29uc3Qgb2JqZWN0c1VzaW5nQmluZEdyb3VwID0gdGhpcy5yZW5kZXJlci5nZXRPYmplY3RzQnlCaW5kR3JvdXAoYmluZEdyb3VwKVxuXG4gICAgY29uc3Qgc2hvdWxkRGVzdHJveSA9XG4gICAgICAhb2JqZWN0c1VzaW5nQmluZEdyb3VwIHx8ICFvYmplY3RzVXNpbmdCaW5kR3JvdXAuZmluZCgob2JqZWN0KSA9PiBvYmplY3QubWF0ZXJpYWwudXVpZCAhPT0gdGhpcy51dWlkKVxuXG4gICAgaWYgKHNob3VsZERlc3Ryb3kpIHtcbiAgICAgIGJpbmRHcm91cC5kZXN0cm95KClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSBhbGwgYmluZCBncm91cHNcbiAgICovXG4gIGRlc3Ryb3lCaW5kR3JvdXBzKCkge1xuICAgIHRoaXMuYmluZEdyb3Vwcy5mb3JFYWNoKChiaW5kR3JvdXApID0+IHRoaXMuZGVzdHJveUJpbmRHcm91cChiaW5kR3JvdXApKVxuICAgIHRoaXMuY2xvbmVkQmluZEdyb3Vwcy5mb3JFYWNoKChiaW5kR3JvdXApID0+IHRoaXMuZGVzdHJveUJpbmRHcm91cChiaW5kR3JvdXApKVxuICAgIHRoaXMudGV4dHVyZXNCaW5kR3JvdXBzLmZvckVhY2goKGJpbmRHcm91cCkgPT4gdGhpcy5kZXN0cm95QmluZEdyb3VwKGJpbmRHcm91cCkpXG4gICAgdGhpcy50ZXh0dXJlc0JpbmRHcm91cHMgPSBbXVxuICAgIHRoaXMuaW5wdXRzQmluZEdyb3VwcyA9IFtdXG4gICAgdGhpcy5iaW5kR3JvdXBzID0gW11cbiAgICB0aGlzLmNsb25lZEJpbmRHcm91cHMgPSBbXVxuICB9XG5cbiAgLyoqXG4gICAqIHtAbGluayBCaW5kR3JvdXAjdXBkYXRlIHwgVXBkYXRlfSBhbGwgYmluZCBncm91cHM6XG4gICAqIC0gVXBkYXRlIGFsbCB7QGxpbmsgdGV4dHVyZXNCaW5kR3JvdXBzIHwgdGV4dHVyZXMgYmluZCBncm91cHN9IHRleHR1cmVzXG4gICAqIC0gVXBkYXRlIGl0cyB7QGxpbmsgQmluZEdyb3VwI2J1ZmZlckJpbmRpbmdzIHwgYnVmZmVyIGJpbmRpbmdzfVxuICAgKiAtIENoZWNrIGlmIGl0IGV2ZW50dWFsbHkgbmVlZHMgYSB7QGxpbmsgQmluZEdyb3VwI3Jlc2V0QmluZEdyb3VwIHwgcmVzZXR9XG4gICAqIC0gQ2hlY2sgaWYgd2UgbmVlZCB0byBmbHVzaCB0aGUgcGlwZWxpbmVcbiAgICovXG4gIHVwZGF0ZUJpbmRHcm91cHMoKSB7XG4gICAgLy8gbm93IHVwZGF0ZSBhbGwgYmluZCBncm91cHMgaW4gdXNlIGFuZCBjaGVjayBpZiB0aGV5IG5lZWQgdG8gZmx1c2ggdGhlIHBpcGVsaW5lXG4gICAgdGhpcy5iaW5kR3JvdXBzLmZvckVhY2goKGJpbmRHcm91cCkgPT4ge1xuICAgICAgYmluZEdyb3VwLnVwZGF0ZSgpXG5cbiAgICAgIC8vIGlmIGEgYmluZCBncm91cCBuZWVkcyB0byBmbHVzaCB0aGUgcGlwZWxpbmVcbiAgICAgIC8vIHVzdWFsbHkgaGFwcGVucyBpZiBvbmUgb2YgdGhlIHN0cnVjdCBiaW5kaW5nVHlwZSBoYXMgY2hhbmdlZCxcbiAgICAgIC8vIHdoaWNoIG1lYW5zIHRoZSBzaGFkZXIgc2hvdWxkIGJlIHJlLXBhdGNoZWQgYW5kIHJlY3JlYXRlZFxuICAgICAgaWYgKGJpbmRHcm91cC5uZWVkc1BpcGVsaW5lRmx1c2ggJiYgdGhpcy5waXBlbGluZUVudHJ5LnJlYWR5KSB7XG4gICAgICAgIHRoaXMucGlwZWxpbmVFbnRyeS5mbHVzaFBpcGVsaW5lRW50cnkodGhpcy5iaW5kR3JvdXBzKVxuICAgICAgICBiaW5kR3JvdXAubmVlZHNQaXBlbGluZUZsdXNoID0gZmFsc2VcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyogSU5QVVRTICovXG5cbiAgLyoqXG4gICAqIExvb2sgZm9yIGEge0BsaW5rIEJpbmRHcm91cEJpbmRpbmdFbGVtZW50IHwgYmluZGluZ30gYnkgbmFtZSBpbiBhbGwge0BsaW5rIGlucHV0c0JpbmRpbmdzIHwgaW5wdXQgYmluZGluZ3N9XG4gICAqIEBwYXJhbSBiaW5kaW5nTmFtZSAtIHRoZSBiaW5kaW5nIG5hbWUgb3Iga2V5XG4gICAqIEByZXR1cm5zIC0gdGhlIGZvdW5kIGJpbmRpbmcsIG9yIG51bGwgaWYgbm90IGZvdW5kXG4gICAqL1xuICBnZXRCaW5kaW5nQnlOYW1lKGJpbmRpbmdOYW1lOiBCaW5kaW5nWyduYW1lJ10gPSAnJyk6IEJpbmRHcm91cEJpbmRpbmdFbGVtZW50IHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5pbnB1dHNCaW5kaW5ncy5maW5kKChiaW5kaW5nKSA9PiBiaW5kaW5nLm5hbWUgPT09IGJpbmRpbmdOYW1lKVxuICB9XG5cbiAgLyoqXG4gICAqIExvb2sgZm9yIGEge0BsaW5rIEJpbmRHcm91cEJ1ZmZlckJpbmRpbmdFbGVtZW50IHwgYnVmZmVyIGJpbmRpbmd9IGJ5IG5hbWUgaW4gYWxsIHtAbGluayBpbnB1dHNCaW5kaW5ncyB8IGlucHV0IGJpbmRpbmdzfVxuICAgKiBAcGFyYW0gYmluZGluZ05hbWUgLSB0aGUgYmluZGluZyBuYW1lIG9yIGtleVxuICAgKiBAcmV0dXJucyAtIHRoZSBmb3VuZCBiaW5kaW5nLCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgKi9cbiAgZ2V0QnVmZmVyQmluZGluZ0J5TmFtZShiaW5kaW5nTmFtZTogQmluZGluZ1snbmFtZSddID0gJycpOiBCaW5kR3JvdXBCdWZmZXJCaW5kaW5nRWxlbWVudCB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaW5wdXRzQmluZGluZ3MuZmluZCgoYmluZGluZykgPT4gYmluZGluZy5uYW1lID09PSBiaW5kaW5nTmFtZSAmJiAnYnVmZmVyJyBpbiBiaW5kaW5nKSBhc1xuICAgICAgfCBCaW5kR3JvdXBCdWZmZXJCaW5kaW5nRWxlbWVudFxuICAgICAgfCB1bmRlZmluZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBGb3JjZSBhIGdpdmVuIGJ1ZmZlciBiaW5kaW5nIHVwZGF0ZSBmbGFnIHRvIHVwZGF0ZSBpdCBhdCBuZXh0IHJlbmRlclxuICAgKiBAcGFyYW0gYnVmZmVyQmluZGluZ05hbWUgLSB0aGUgYnVmZmVyIGJpbmRpbmcgbmFtZVxuICAgKiBAcGFyYW0gYmluZGluZ05hbWUgLSB0aGUgYmluZGluZyBuYW1lXG4gICAqL1xuICBzaG91bGRVcGRhdGVJbnB1dHNCaW5kaW5ncyhidWZmZXJCaW5kaW5nTmFtZT86IEJ1ZmZlckJpbmRpbmdbJ25hbWUnXSwgYmluZGluZ05hbWU/OiBCdWZmZXJCaW5kaW5nSW5wdXRbJ25hbWUnXSkge1xuICAgIGlmICghYnVmZmVyQmluZGluZ05hbWUpIHJldHVyblxuXG4gICAgY29uc3QgYnVmZmVyQmluZGluZyA9IHRoaXMuZ2V0QmluZGluZ0J5TmFtZShidWZmZXJCaW5kaW5nTmFtZSlcbiAgICBpZiAoYnVmZmVyQmluZGluZykge1xuICAgICAgaWYgKCFiaW5kaW5nTmFtZSkge1xuICAgICAgICBPYmplY3Qua2V5cygoYnVmZmVyQmluZGluZyBhcyBCaW5kR3JvdXBCdWZmZXJCaW5kaW5nRWxlbWVudCkuaW5wdXRzKS5mb3JFYWNoKChiaW5kaW5nS2V5KSA9PlxuICAgICAgICAgIChidWZmZXJCaW5kaW5nIGFzIEJpbmRHcm91cEJ1ZmZlckJpbmRpbmdFbGVtZW50KS5zaG91bGRVcGRhdGVCaW5kaW5nKGJpbmRpbmdLZXkpXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIDsoYnVmZmVyQmluZGluZyBhcyBCaW5kR3JvdXBCdWZmZXJCaW5kaW5nRWxlbWVudCkuc2hvdWxkVXBkYXRlQmluZGluZyhiaW5kaW5nTmFtZSlcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiBTQU1QTEVSUyAmIFRFWFRVUkVTICovXG5cbiAgLyoqXG4gICAqIFByZXBhcmUgb3VyIHRleHR1cmVzIGFycmF5IGFuZCBzZXQgdGhlIHtAbGluayBUZXh0dXJlQmluZEdyb3VwfVxuICAgKi9cbiAgc2V0VGV4dHVyZXMoKSB7XG4gICAgdGhpcy50ZXh0dXJlcyA9IFtdXG4gICAgdGhpcy5yZW5kZXJUZXh0dXJlcyA9IFtdXG4gICAgdGhpcy50ZXh0dXJlc0JpbmRHcm91cHMucHVzaChcbiAgICAgIG5ldyBUZXh0dXJlQmluZEdyb3VwKHRoaXMucmVuZGVyZXIsIHtcbiAgICAgICAgbGFiZWw6IHRoaXMub3B0aW9ucy5sYWJlbCArICc6IFRleHR1cmVzIGJpbmQgZ3JvdXAnLFxuICAgICAgfSlcbiAgICApXG5cbiAgICB0aGlzLm9wdGlvbnMudGV4dHVyZXM/LmZvckVhY2goKHRleHR1cmUpID0+IHtcbiAgICAgIHRoaXMuYWRkVGV4dHVyZSh0ZXh0dXJlKVxuICAgIH0pXG5cbiAgICB0aGlzLm9wdGlvbnMucmVuZGVyVGV4dHVyZXM/LmZvckVhY2goKHRleHR1cmUpID0+IHtcbiAgICAgIHRoaXMuYWRkVGV4dHVyZSh0ZXh0dXJlKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgdGV4dHVyZSB0byBvdXIgYXJyYXksIGFuZCBhZGQgaXQgdG8gdGhlIHRleHR1cmVzIGJpbmQgZ3JvdXAgb25seSBpZiB1c2VkIGluIHRoZSBzaGFkZXJzIChhdm9pZCBiaW5kaW5nIHVzZWxlc3MgZGF0YSlcbiAgICogQHBhcmFtIHRleHR1cmUgLSB0ZXh0dXJlIHRvIGFkZFxuICAgKi9cbiAgYWRkVGV4dHVyZSh0ZXh0dXJlOiBUZXh0dXJlIHwgUmVuZGVyVGV4dHVyZSkge1xuICAgIGlmICh0ZXh0dXJlIGluc3RhbmNlb2YgVGV4dHVyZSkge1xuICAgICAgdGhpcy50ZXh0dXJlcy5wdXNoKHRleHR1cmUpXG4gICAgfSBlbHNlIGlmICh0ZXh0dXJlIGluc3RhbmNlb2YgUmVuZGVyVGV4dHVyZSkge1xuICAgICAgdGhpcy5yZW5kZXJUZXh0dXJlcy5wdXNoKHRleHR1cmUpXG4gICAgfVxuXG4gICAgLy8gaXMgaXQgdXNlZCBpbiBvdXIgc2hhZGVycz9cbiAgICBpZiAoXG4gICAgICAodGhpcy5vcHRpb25zLnNoYWRlcnMudmVydGV4ICYmIHRoaXMub3B0aW9ucy5zaGFkZXJzLnZlcnRleC5jb2RlLmluZGV4T2YodGV4dHVyZS5vcHRpb25zLm5hbWUpICE9PSAtMSkgfHxcbiAgICAgICh0aGlzLm9wdGlvbnMuc2hhZGVycy5mcmFnbWVudCAmJiB0aGlzLm9wdGlvbnMuc2hhZGVycy5mcmFnbWVudC5jb2RlLmluZGV4T2YodGV4dHVyZS5vcHRpb25zLm5hbWUpICE9PSAtMSkgfHxcbiAgICAgICh0aGlzLm9wdGlvbnMuc2hhZGVycy5jb21wdXRlICYmIHRoaXMub3B0aW9ucy5zaGFkZXJzLmNvbXB1dGUuY29kZS5pbmRleE9mKHRleHR1cmUub3B0aW9ucy5uYW1lKSAhPT0gLTEpXG4gICAgKSB7XG4gICAgICB0aGlzLnRleHR1cmVzQmluZEdyb3VwLmFkZFRleHR1cmUodGV4dHVyZSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSBhIHtAbGluayBUZXh0dXJlfSBvciB7QGxpbmsgUmVuZGVyVGV4dHVyZX0sIG9ubHkgaWYgaXQgaXMgbm90IHVzZWQgYnkgYW5vdGhlciBvYmplY3Qgb3IgY2FjaGVkLlxuICAgKiBAcGFyYW0gdGV4dHVyZSAtIHtAbGluayBUZXh0dXJlfSBvciB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gdG8gZXZlbnR1YWxseSBkZXN0cm95XG4gICAqL1xuICBkZXN0cm95VGV4dHVyZSh0ZXh0dXJlOiBUZXh0dXJlIHwgUmVuZGVyVGV4dHVyZSkge1xuICAgIC8vIGRvIG5vdCBkZXN0cm95IGEgdGV4dHVyZSB0aGF0IG11c3Qgc3RheSBpbiBjYWNoZVxuICAgIGlmICgodGV4dHVyZSBhcyBUZXh0dXJlKS5vcHRpb25zLmNhY2hlKSByZXR1cm5cblxuICAgIC8vIGNoZWNrIGlmIHRoaXMgdGV4dHVyZSBpcyB1c2VkIGJ5IGFub3RoZXIgb2JqZWN0IGJlZm9yZSBhY3R1YWxseSBkZXN0cm95aW5nIGl0XG4gICAgY29uc3Qgb2JqZWN0c1VzaW5nVGV4dHVyZSA9IHRoaXMucmVuZGVyZXIuZ2V0T2JqZWN0c0J5VGV4dHVyZSh0ZXh0dXJlKVxuXG4gICAgY29uc3Qgc2hvdWxkRGVzdHJveSA9XG4gICAgICAhb2JqZWN0c1VzaW5nVGV4dHVyZSB8fCAhb2JqZWN0c1VzaW5nVGV4dHVyZS5zb21lKChvYmplY3QpID0+IG9iamVjdC5tYXRlcmlhbC51dWlkICE9PSB0aGlzLnV1aWQpXG5cbiAgICBpZiAoc2hvdWxkRGVzdHJveSkge1xuICAgICAgdGV4dHVyZS5kZXN0cm95KClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSBhbGwgdGhlIE1hdGVyaWFsIHRleHR1cmVzXG4gICAqL1xuICBkZXN0cm95VGV4dHVyZXMoKSB7XG4gICAgdGhpcy50ZXh0dXJlcz8uZm9yRWFjaCgodGV4dHVyZSkgPT4gdGhpcy5kZXN0cm95VGV4dHVyZSh0ZXh0dXJlKSlcbiAgICB0aGlzLnJlbmRlclRleHR1cmVzPy5mb3JFYWNoKCh0ZXh0dXJlKSA9PiB0aGlzLmRlc3Ryb3lUZXh0dXJlKHRleHR1cmUpKVxuICAgIHRoaXMudGV4dHVyZXMgPSBbXVxuICAgIHRoaXMucmVuZGVyVGV4dHVyZXMgPSBbXVxuICB9XG5cbiAgLyoqXG4gICAqIFByZXBhcmUgb3VyIHNhbXBsZXJzIGFycmF5IGFuZCBhbHdheXMgYWRkIGEgZGVmYXVsdCBzYW1wbGVyIGlmIG5vdCBhbHJlYWR5IHBhc3NlZCBhcyBwYXJhbWV0ZXJcbiAgICovXG4gIHNldFNhbXBsZXJzKCkge1xuICAgIHRoaXMuc2FtcGxlcnMgPSBbXVxuXG4gICAgdGhpcy5vcHRpb25zLnNhbXBsZXJzPy5mb3JFYWNoKChzYW1wbGVyKSA9PiB7XG4gICAgICB0aGlzLmFkZFNhbXBsZXIoc2FtcGxlcilcbiAgICB9KVxuXG4gICAgLy8gY3JlYXRlIG91ciBkZWZhdWx0IHNhbXBsZXIgaWYgbmVlZGVkXG4gICAgY29uc3QgaGFzRGVmYXVsdFNhbXBsZXIgPSB0aGlzLnNhbXBsZXJzLmZpbmQoKHNhbXBsZXIpID0+IHNhbXBsZXIubmFtZSA9PT0gJ2RlZmF1bHRTYW1wbGVyJylcbiAgICBpZiAoIWhhc0RlZmF1bHRTYW1wbGVyKSB7XG4gICAgICBjb25zdCBzYW1wbGVyID0gbmV3IFNhbXBsZXIodGhpcy5yZW5kZXJlciwgeyBuYW1lOiAnZGVmYXVsdFNhbXBsZXInIH0pXG4gICAgICB0aGlzLmFkZFNhbXBsZXIoc2FtcGxlcilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgc2FtcGxlciB0byBvdXIgYXJyYXksIGFuZCBhZGQgaXQgdG8gdGhlIHRleHR1cmVzIGJpbmQgZ3JvdXAgb25seSBpZiB1c2VkIGluIHRoZSBzaGFkZXJzIChhdm9pZCBiaW5kaW5nIHVzZWxlc3MgZGF0YSlcbiAgICogQHBhcmFtIHNhbXBsZXIgLSBzYW1wbGVyIHRvIGFkZFxuICAgKi9cbiAgYWRkU2FtcGxlcihzYW1wbGVyOiBTYW1wbGVyKSB7XG4gICAgdGhpcy5zYW1wbGVycy5wdXNoKHNhbXBsZXIpXG5cbiAgICAvLyBpcyBpdCB1c2VkIGluIG91ciBzaGFkZXJzP1xuICAgIGlmIChcbiAgICAgICh0aGlzLm9wdGlvbnMuc2hhZGVycy52ZXJ0ZXggJiYgdGhpcy5vcHRpb25zLnNoYWRlcnMudmVydGV4LmNvZGUuaW5kZXhPZihzYW1wbGVyLm5hbWUpICE9PSAtMSkgfHxcbiAgICAgICh0aGlzLm9wdGlvbnMuc2hhZGVycy5mcmFnbWVudCAmJiB0aGlzLm9wdGlvbnMuc2hhZGVycy5mcmFnbWVudC5jb2RlLmluZGV4T2Yoc2FtcGxlci5uYW1lKSAhPT0gLTEpIHx8XG4gICAgICAodGhpcy5vcHRpb25zLnNoYWRlcnMuY29tcHV0ZSAmJiB0aGlzLm9wdGlvbnMuc2hhZGVycy5jb21wdXRlLmNvZGUuaW5kZXhPZihzYW1wbGVyLm5hbWUpICE9PSAtMSlcbiAgICApIHtcbiAgICAgIHRoaXMudGV4dHVyZXNCaW5kR3JvdXAuYWRkU2FtcGxlcihzYW1wbGVyKVxuICAgIH1cbiAgfVxuXG4gIC8qIEJVRkZFUiBSRVNVTFRTICovXG5cbiAgLyoqXG4gICAqIE1hcCBhIHtAbGluayBHUFVCdWZmZXJ9IGFuZCBwdXQgYSBjb3B5IG9mIHRoZSBkYXRhIGludG8gYSB7QGxpbmsgRmxvYXQzMkFycmF5fVxuICAgKiBAcGFyYW0gYnVmZmVyIC0ge0BsaW5rIEdQVUJ1ZmZlcn0gdG8gbWFwXG4gICAqIEBhc3luY1xuICAgKiBAcmV0dXJucyAtIHtAbGluayBGbG9hdDMyQXJyYXl9IGhvbGRpbmcgdGhlIHtAbGluayBHUFVCdWZmZXJ9IGRhdGFcbiAgICovXG4gIGFzeW5jIGdldEJ1ZmZlclJlc3VsdChidWZmZXI6IEdQVUJ1ZmZlcik6IFByb21pc2U8RmxvYXQzMkFycmF5PiB7XG4gICAgYXdhaXQgYnVmZmVyLm1hcEFzeW5jKEdQVU1hcE1vZGUuUkVBRClcbiAgICBjb25zdCByZXN1bHQgPSBuZXcgRmxvYXQzMkFycmF5KGJ1ZmZlci5nZXRNYXBwZWRSYW5nZSgpLnNsaWNlKDApKVxuICAgIGJ1ZmZlci51bm1hcCgpXG5cbiAgICByZXR1cm4gcmVzdWx0XG4gIH1cblxuICAvKipcbiAgICogTWFwIHRoZSBjb250ZW50IG9mIGEge0BsaW5rIEJ1ZmZlckJpbmRpbmcjYnVmZmVyIHwgR1BVIGJ1ZmZlcn0gYW5kIHB1dCBhIGNvcHkgb2YgdGhlIGRhdGEgaW50byBhIHtAbGluayBGbG9hdDMyQXJyYXl9XG4gICAqIEBwYXJhbSBiaW5kaW5nTmFtZSAtIFRoZSBuYW1lIG9mIHRoZSB7QGxpbmsgaW5wdXRzQmluZGluZ3MgfCBpbnB1dCBiaW5kaW5nc30gZnJvbSB3aGljaCB0byBtYXAgdGhlIHtAbGluayBCdWZmZXJCaW5kaW5nI2J1ZmZlciB8IEdQVSBidWZmZXJ9XG4gICAqIEBhc3luY1xuICAgKiBAcmV0dXJucyAtIHtAbGluayBGbG9hdDMyQXJyYXl9IGhvbGRpbmcgdGhlIHtAbGluayBHUFVCdWZmZXJ9IGRhdGFcbiAgICovXG4gIGFzeW5jIGdldEJ1ZmZlckJpbmRpbmdSZXN1bHRCeUJpbmRpbmdOYW1lKGJpbmRpbmdOYW1lOiBCaW5kaW5nWyduYW1lJ10gPSAnJyk6IFByb21pc2U8RmxvYXQzMkFycmF5PiB7XG4gICAgY29uc3QgYmluZGluZyA9IHRoaXMuZ2V0QnVmZmVyQmluZGluZ0J5TmFtZShiaW5kaW5nTmFtZSlcbiAgICBpZiAoYmluZGluZyAmJiAnYnVmZmVyJyBpbiBiaW5kaW5nKSB7XG4gICAgICBjb25zdCBkc3RCdWZmZXIgPSB0aGlzLnJlbmRlcmVyLmNvcHlCdWZmZXJUb0J1ZmZlcih7XG4gICAgICAgIHNyY0J1ZmZlcjogYmluZGluZy5idWZmZXIsXG4gICAgICB9KVxuICAgICAgcmV0dXJuIGF3YWl0IHRoaXMuZ2V0QnVmZmVyUmVzdWx0KGRzdEJ1ZmZlcilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIG5ldyBGbG9hdDMyQXJyYXkoMClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogTWFwIHRoZSBjb250ZW50IG9mIGEgc3BlY2lmaWMge0BsaW5rIEJ1ZmZlckVsZW1lbnQgfCBidWZmZXIgZWxlbWVudH0gYmVsb25naW5nIHRvIGEge0BsaW5rIEJ1ZmZlckJpbmRpbmcjYnVmZmVyIHwgR1BVIGJ1ZmZlcn0gYW5kIHB1dCBhIGNvcHkgb2YgdGhlIGRhdGEgaW50byBhIHtAbGluayBGbG9hdDMyQXJyYXl9XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0gcGFyYW1ldGVycyB1c2VkIHRvIGdldCB0aGUgcmVzdWx0XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzLmJpbmRpbmdOYW1lIC0gVGhlIG5hbWUgb2YgdGhlIHtAbGluayBpbnB1dHNCaW5kaW5ncyB8IGlucHV0IGJpbmRpbmdzfSBmcm9tIHdoaWNoIHRvIG1hcCB0aGUge0BsaW5rIEJ1ZmZlckJpbmRpbmcjYnVmZmVyIHwgR1BVIGJ1ZmZlcn1cbiAgICogQHBhcmFtIHBhcmFtZXRlcnMuYnVmZmVyRWxlbWVudE5hbWUgLSBUaGUgbmFtZSBvZiB0aGUge0BsaW5rIEJ1ZmZlckVsZW1lbnQgfCBidWZmZXIgZWxlbWVudH0gZnJvbSB3aGljaCB0byBleHRyYWN0IHRoZSBkYXRhIGFmdGVyd2FyZHNcbiAgICogQHJldHVybnMgLSB7QGxpbmsgRmxvYXQzMkFycmF5fSBob2xkaW5nIHtAbGluayBHUFVCdWZmZXJ9IGRhdGFcbiAgICovXG4gIGFzeW5jIGdldEJ1ZmZlckVsZW1lbnRSZXN1bHRCeU5hbWVzKHtcbiAgICBiaW5kaW5nTmFtZSxcbiAgICBidWZmZXJFbGVtZW50TmFtZSxcbiAgfToge1xuICAgIGJpbmRpbmdOYW1lOiBCaW5kaW5nWyduYW1lJ11cbiAgICBidWZmZXJFbGVtZW50TmFtZTogQnVmZmVyRWxlbWVudFsnbmFtZSddXG4gIH0pOiBQcm9taXNlPEZsb2F0MzJBcnJheT4ge1xuICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2V0QnVmZmVyQmluZGluZ1Jlc3VsdEJ5QmluZGluZ05hbWUoYmluZGluZ05hbWUpXG5cbiAgICBpZiAoIWJ1ZmZlckVsZW1lbnROYW1lIHx8IHJlc3VsdC5sZW5ndGgpIHtcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgYmluZGluZyA9IHRoaXMuZ2V0QnVmZmVyQmluZGluZ0J5TmFtZShiaW5kaW5nTmFtZSlcbiAgICAgIGlmIChiaW5kaW5nKSB7XG4gICAgICAgIHJldHVybiBiaW5kaW5nLmV4dHJhY3RCdWZmZXJFbGVtZW50RGF0YUZyb21CdWZmZXJSZXN1bHQoeyByZXN1bHQsIGJ1ZmZlckVsZW1lbnROYW1lIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogUkVOREVSICovXG5cbiAgLyoqXG4gICAqIENhbGxlZCBiZWZvcmUgcmVuZGVyaW5nIHRoZSBNYXRlcmlhbC5cbiAgICogRmlyc3QsIGNoZWNrIGlmIHdlIG5lZWQgdG8gY3JlYXRlIG91ciBiaW5kIGdyb3VwcyBvciBwaXBlbGluZVxuICAgKiBUaGVuIHJlbmRlciB0aGUge0BsaW5rIHRleHR1cmVzfVxuICAgKiBGaW5hbGx5IHVwZGF0ZXMgYWxsIHRoZSB7QGxpbmsgYmluZEdyb3VwcyB8IGJpbmQgZ3JvdXBzfVxuICAgKi9cbiAgb25CZWZvcmVSZW5kZXIoKSB7XG4gICAgLy8gc2V0IG91ciBtYXRlcmlhbCBpZiBuZWVkZWRcbiAgICB0aGlzLmNvbXBpbGVNYXRlcmlhbCgpXG5cbiAgICAvLyBmaXJzdCB3aGF0IG5lZWRzIHRvIGJlIGRvbmUgZm9yIGFsbCB0ZXh0dXJlc1xuICAgIHRoaXMudGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSkgPT4ge1xuICAgICAgdGV4dHVyZS5yZW5kZXIoKVxuICAgIH0pXG5cbiAgICAvLyB1cGRhdGUgYmluZCBncm91cHNcbiAgICB0aGlzLnVwZGF0ZUJpbmRHcm91cHMoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgY3VycmVudCBwaXBlbGluZVxuICAgKiBAcGFyYW0gcGFzcyAtIGN1cnJlbnQgcGFzcyBlbmNvZGVyXG4gICAqL1xuICBzZXRQaXBlbGluZShwYXNzOiBHUFVSZW5kZXJQYXNzRW5jb2RlciB8IEdQVUNvbXB1dGVQYXNzRW5jb2Rlcikge1xuICAgIHRoaXMucmVuZGVyZXIucGlwZWxpbmVNYW5hZ2VyLnNldEN1cnJlbnRQaXBlbGluZShwYXNzLCB0aGlzLnBpcGVsaW5lRW50cnkpXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBtYXRlcmlhbCBpZiBpdCBpcyByZWFkeTpcbiAgICogU2V0IHRoZSBjdXJyZW50IHBpcGVsaW5lIGFuZCBzZXQgdGhlIGJpbmQgZ3JvdXBzXG4gICAqIEBwYXJhbSBwYXNzIC0gY3VycmVudCBwYXNzIGVuY29kZXJcbiAgICovXG4gIHJlbmRlcihwYXNzOiBHUFVSZW5kZXJQYXNzRW5jb2RlciB8IEdQVUNvbXB1dGVQYXNzRW5jb2Rlcikge1xuICAgIC8vIHJlbmRlcmVyIG9yIHBpcGVsaW5lIGFyZSBub3QgcmVhZHkgeWV0XG4gICAgLy8gbm90IHJlYWxseSBuZWVkZWQgc2luY2UgbWVzaGVzL2NvbXB1dGUgcGFzc2VzIGRvIGFscmVhZHkgY2hlY2sgaXQgYmVmb3JlaGFuZFxuICAgIC8vIG1vc3RseSBoZXJlIGFzIGEgc2FmZWd1YXJkXG4gICAgaWYgKCF0aGlzLnJlYWR5KSByZXR1cm5cblxuICAgIC8vIHNldCBjdXJyZW50IHBpcGVsaW5lXG4gICAgdGhpcy5zZXRQaXBlbGluZShwYXNzKVxuXG4gICAgLy8gc2V0IGJpbmQgZ3JvdXBzXG4gICAgdGhpcy5iaW5kR3JvdXBzLmZvckVhY2goKGJpbmRHcm91cCkgPT4ge1xuICAgICAgcGFzcy5zZXRCaW5kR3JvdXAoYmluZEdyb3VwLmluZGV4LCBiaW5kR3JvdXAuYmluZEdyb3VwKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSB0aGUgTWF0ZXJpYWxcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgLy8gZGVzdHJveSBhbGwgYnVmZmVycyBjcmVhdGVkIHdpdGggY3JlYXRlQnVmZmVyXG4gICAgdGhpcy5kZXN0cm95QmluZEdyb3VwcygpXG4gICAgdGhpcy5kZXN0cm95VGV4dHVyZXMoKVxuICB9XG59XG4iLCJpbXBvcnQgeyBNYXRlcmlhbCB9IGZyb20gJy4vTWF0ZXJpYWwnXG5pbXBvcnQgeyBDb21wdXRlTWF0ZXJpYWxPcHRpb25zLCBDb21wdXRlTWF0ZXJpYWxQYXJhbXMsIEZ1bGxTaGFkZXJzVHlwZSB9IGZyb20gJy4uLy4uL3R5cGVzL01hdGVyaWFscydcbmltcG9ydCB7IGlzUmVuZGVyZXIsIFJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL3V0aWxzJ1xuaW1wb3J0IHsgR1BVQ3VydGFpbnMgfSBmcm9tICcuLi8uLi9jdXJ0YWlucy9HUFVDdXJ0YWlucydcbmltcG9ydCB7IENvbXB1dGVQaXBlbGluZUVudHJ5IH0gZnJvbSAnLi4vcGlwZWxpbmVzL0NvbXB1dGVQaXBlbGluZUVudHJ5J1xuaW1wb3J0IHsgV3JpdGFibGVCdWZmZXJCaW5kaW5nIH0gZnJvbSAnLi4vYmluZGluZ3MvV3JpdGFibGVCdWZmZXJCaW5kaW5nJ1xuXG4vKipcbiAqIENyZWF0ZSBhIHtAbGluayBNYXRlcmlhbH0gc3BlY2lmaWNhbGx5IGJ1aWx0IHRvIHJ1biBjb21wdXRhdGlvbnMgb24gdGhlIEdQVS4gSW50ZXJuYWxseSB1c2VkIGJ5IHtAbGluayBjb3JlL2NvbXB1dGVQYXNzZXMvQ29tcHV0ZVBhc3MuQ29tcHV0ZVBhc3MgfCBDb21wdXRlUGFzc30uXG4gKlxuICogIyMgQ29tcHV0ZSBwaXBlbGluZVxuICpcbiAqIEEge0BsaW5rIENvbXB1dGVNYXRlcmlhbH0gYXV0b21hdGljYWxseSBjcmVhdGVzIGEge0BsaW5rIENvbXB1dGVQaXBlbGluZUVudHJ5fS4gT25jZSBhbGwgdGhlIHtAbGluayBjb3JlL2JpbmRHcm91cHMvQmluZEdyb3VwLkJpbmRHcm91cCB8IEJpbmRHcm91cH0gaGF2ZSBiZWVuIGNyZWF0ZWQsIHRoZXkgYXJlIHNlbnQgd2l0aCB0aGUgY29tcHV0ZSBzaGFkZXIgY29kZSB0byB0aGUge0BsaW5rIENvbXB1dGVQaXBlbGluZUVudHJ5fSwgd2hpY2ggaXMgaW4gdHVybnMgcmVzcG9uc2libGUgZm9yIGNyZWF0aW5nIHRoZSB7QGxpbmsgR1BVQ29tcHV0ZVBpcGVsaW5lfS5cbiAqXG4gKiBBZnRlciB0aGUge0BsaW5rIEdQVUNvbXB1dGVQaXBlbGluZX0gaGFzIGJlZW4gc3VjY2Vzc2Z1bGx5IGNvbXBpbGVkLCB0aGUge0BsaW5rIENvbXB1dGVNYXRlcmlhbH0gaXMgY29uc2lkZXJlZCB0byBiZSByZWFkeSBhbmQgaXQgY2FuIHN0YXJ0IHJ1bm5pbmcgdGhlIGNvbXB1dGUgc2hhZGVyIGNvbXB1dGF0aW9ucy5cbiAqXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wdXRlTWF0ZXJpYWwgZXh0ZW5kcyBNYXRlcmlhbCB7XG4gIC8qKiB7QGxpbmsgQ29tcHV0ZVBpcGVsaW5lRW50cnkgfCBDb21wdXRlIHBpcGVsaW5lIGVudHJ5fSB1c2VkIGJ5IHRoaXMge0BsaW5rIENvbXB1dGVNYXRlcmlhbH0gKi9cbiAgcGlwZWxpbmVFbnRyeTogQ29tcHV0ZVBpcGVsaW5lRW50cnlcbiAgLyoqIE9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgQ29tcHV0ZU1hdGVyaWFsfSAqL1xuICBvcHRpb25zOiBDb21wdXRlTWF0ZXJpYWxPcHRpb25zXG5cbiAgLyoqIERlZmF1bHQgd29yayBncm91cCBkaXNwYXRjaCBzaXplIHRvIHVzZSB3aXRoIHRoaXMge0BsaW5rIENvbXB1dGVNYXRlcmlhbH0gKi9cbiAgZGlzcGF0Y2hTaXplPzogbnVtYmVyIHwgbnVtYmVyW11cblxuICAvKiogZnVuY3Rpb24gYXNzaWduZWQgdG8gdGhlIHtAbGluayB1c2VDdXN0b21SZW5kZXJ9IGNhbGxiYWNrICovXG4gIF91c2VDdXN0b21SZW5kZXJDYWxsYmFjazogKHBhc3M6IEdQVUNvbXB1dGVQYXNzRW5jb2RlcikgPT4gdm9pZFxuXG4gIC8qKlxuICAgKiBDb21wdXRlTWF0ZXJpYWwgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0gb3VyIHtAbGluayBSZW5kZXJlcn0gY2xhc3Mgb2JqZWN0XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIENvbXB1dGVNYXRlcmlhbFBhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIG91ciB7QGxpbmsgQ29tcHV0ZU1hdGVyaWFsfVxuICAgKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyIHwgR1BVQ3VydGFpbnMsIHBhcmFtZXRlcnM6IENvbXB1dGVNYXRlcmlhbFBhcmFtcykge1xuICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XG4gICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIFJlbmRlcmVyKVxuXG4gICAgY29uc3QgdHlwZSA9ICdDb21wdXRlTWF0ZXJpYWwnXG5cbiAgICBpc1JlbmRlcmVyKHJlbmRlcmVyLCB0eXBlKVxuXG4gICAgc3VwZXIocmVuZGVyZXIsIHBhcmFtZXRlcnMpXG5cbiAgICB0aGlzLnR5cGUgPSB0eXBlXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyXG5cbiAgICBsZXQgeyBzaGFkZXJzLCBkaXNwYXRjaFNpemUgfSA9IHBhcmFtZXRlcnNcblxuICAgIGlmICghc2hhZGVycyB8fCAhc2hhZGVycy5jb21wdXRlKSB7XG4gICAgICBzaGFkZXJzID0ge1xuICAgICAgICBjb21wdXRlOiB7XG4gICAgICAgICAgY29kZTogJycsXG4gICAgICAgICAgZW50cnlQb2ludDogJ21haW4nLFxuICAgICAgICB9LFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghc2hhZGVycy5jb21wdXRlLmNvZGUpIHtcbiAgICAgIHNoYWRlcnMuY29tcHV0ZS5jb2RlID0gJ0Bjb21wdXRlIEB3b3JrZ3JvdXBfc2l6ZSgxKSBmbiBtYWluKCl7fSdcbiAgICB9XG5cbiAgICBpZiAoIXNoYWRlcnMuY29tcHV0ZS5lbnRyeVBvaW50KSB7XG4gICAgICBzaGFkZXJzLmNvbXB1dGUuZW50cnlQb2ludCA9ICdtYWluJ1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgIHNoYWRlcnMsXG4gICAgICAuLi4ocGFyYW1ldGVycy5kaXNwYXRjaFNpemUgIT09IHVuZGVmaW5lZCAmJiB7IGRpc3BhdGNoU2l6ZTogcGFyYW1ldGVycy5kaXNwYXRjaFNpemUgfSksXG4gICAgfVxuXG4gICAgLy8gc2V0IGRlZmF1bHQgZGlzcGF0Y2ggc2l6ZVxuICAgIGlmICghZGlzcGF0Y2hTaXplKSB7XG4gICAgICBkaXNwYXRjaFNpemUgPSAxXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGlzcGF0Y2hTaXplKSkge1xuICAgICAgZGlzcGF0Y2hTaXplWzBdID0gTWF0aC5jZWlsKGRpc3BhdGNoU2l6ZVswXSA/PyAxKVxuICAgICAgZGlzcGF0Y2hTaXplWzFdID0gTWF0aC5jZWlsKGRpc3BhdGNoU2l6ZVsxXSA/PyAxKVxuICAgICAgZGlzcGF0Y2hTaXplWzJdID0gTWF0aC5jZWlsKGRpc3BhdGNoU2l6ZVsyXSA/PyAxKVxuICAgIH0gZWxzZSBpZiAoIWlzTmFOKGRpc3BhdGNoU2l6ZSkpIHtcbiAgICAgIGRpc3BhdGNoU2l6ZSA9IFtNYXRoLmNlaWwoZGlzcGF0Y2hTaXplKSwgMSwgMV1cbiAgICB9XG5cbiAgICB0aGlzLmRpc3BhdGNoU2l6ZSA9IGRpc3BhdGNoU2l6ZVxuXG4gICAgdGhpcy5waXBlbGluZUVudHJ5ID0gdGhpcy5yZW5kZXJlci5waXBlbGluZU1hbmFnZXIuY3JlYXRlQ29tcHV0ZVBpcGVsaW5lKHtcbiAgICAgIHJlbmRlcmVyOiB0aGlzLnJlbmRlcmVyLFxuICAgICAgbGFiZWw6IHRoaXMub3B0aW9ucy5sYWJlbCArICcgY29tcHV0ZSBwaXBlbGluZScsXG4gICAgICBzaGFkZXJzOiB0aGlzLm9wdGlvbnMuc2hhZGVycyxcbiAgICAgIHVzZUFzeW5jOiB0aGlzLm9wdGlvbnMudXNlQXN5bmNQaXBlbGluZSxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFdoZW4gYWxsIGJpbmQgZ3JvdXBzIGFyZSBjcmVhdGVkLCBhZGQgdGhlbSB0byB0aGUge0BsaW5rIENvbXB1dGVQaXBlbGluZUVudHJ5fVxuICAgKi9cbiAgc2V0UGlwZWxpbmVFbnRyeVByb3BlcnRpZXMoKSB7XG4gICAgdGhpcy5waXBlbGluZUVudHJ5LnNldFBpcGVsaW5lRW50cnlQcm9wZXJ0aWVzKHtcbiAgICAgIGJpbmRHcm91cHM6IHRoaXMuYmluZEdyb3VwcyxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXBpbGUgdGhlIHtAbGluayBDb21wdXRlUGlwZWxpbmVFbnRyeX1cbiAgICogQGFzeW5jXG4gICAqL1xuICBhc3luYyBjb21waWxlUGlwZWxpbmVFbnRyeSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLnBpcGVsaW5lRW50cnkuY29tcGlsZVBpcGVsaW5lRW50cnkoKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGFsbCBiaW5kIGdyb3VwcyBhcmUgcmVhZHksIGNyZWF0ZSB0aGVtIGlmIG5lZWRlZCwgc2V0IHtAbGluayBDb21wdXRlUGlwZWxpbmVFbnRyeX0gYmluZCBncm91cCBidWZmZXJzIGFuZCBjb21waWxlIHRoZSBwaXBlbGluZVxuICAgKiBAYXN5bmNcbiAgICovXG4gIGFzeW5jIGNvbXBpbGVNYXRlcmlhbCgpIHtcbiAgICBzdXBlci5jb21waWxlTWF0ZXJpYWwoKVxuXG4gICAgaWYgKHRoaXMucGlwZWxpbmVFbnRyeSAmJiB0aGlzLnBpcGVsaW5lRW50cnkuY2FuQ29tcGlsZSkge1xuICAgICAgdGhpcy5zZXRQaXBlbGluZUVudHJ5UHJvcGVydGllcygpXG4gICAgICBhd2FpdCB0aGlzLmNvbXBpbGVQaXBlbGluZUVudHJ5KClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSBjb21wbGV0ZSBjb2RlIG9mIGEgZ2l2ZW4gc2hhZGVyIGluY2x1ZGluZyBhbGwgdGhlIFdHU0wgZnJhZ21lbnQgY29kZSBzbmlwcGV0cyBhZGRlZCBieSB0aGUgcGlwZWxpbmVcbiAgICogQHBhcmFtIFtzaGFkZXJUeXBlPVwiY29tcHV0ZVwiXSAtIHNoYWRlciB0byBnZXQgdGhlIGNvZGUgZnJvbVxuICAgKiBAcmV0dXJucyAtIFRoZSBjb3JyZXNwb25kaW5nIHNoYWRlciBjb2RlXG4gICAqL1xuICBnZXRTaGFkZXJDb2RlKHNoYWRlclR5cGU6IEZ1bGxTaGFkZXJzVHlwZSA9ICdjb21wdXRlJyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHN1cGVyLmdldFNoYWRlckNvZGUoc2hhZGVyVHlwZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGFkZGVkIGNvZGUgb2YgYSBnaXZlbiBzaGFkZXIsIGkuZS4gYWxsIHRoZSBXR1NMIGZyYWdtZW50IGNvZGUgc25pcHBldHMgYWRkZWQgYnkgdGhlIHBpcGVsaW5lXG4gICAqIEBwYXJhbSBbc2hhZGVyVHlwZT1cImNvbXB1dGVcIl0gLSBzaGFkZXIgdG8gZ2V0IHRoZSBjb2RlIGZyb21cbiAgICogQHJldHVybnMgLSBUaGUgY29ycmVzcG9uZGluZyBzaGFkZXIgY29kZVxuICAgKi9cbiAgZ2V0QWRkZWRTaGFkZXJDb2RlKHNoYWRlclR5cGU6IEZ1bGxTaGFkZXJzVHlwZSA9ICdjb21wdXRlJyk6IHN0cmluZyB7XG4gICAgcmV0dXJuIHN1cGVyLmdldEFkZGVkU2hhZGVyQ29kZShzaGFkZXJUeXBlKVxuICB9XG5cbiAgLyogUkVOREVSICovXG5cbiAgLyoqXG4gICAqIElmIGEgY3VzdG9tIHJlbmRlciBmdW5jdGlvbiBoYXMgYmVlbiBkZWZpbmVkIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgb25lLCByZWdpc3RlciB0aGUgY2FsbGJhY2tcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgcmVuZGVyIGJlaGF2aW91ciwgd2hpY2ggaXMgdG8gc2V0IHRoZSB7QGxpbmsgYmluZEdyb3VwcyB8IGJpbmQgZ3JvdXBzfSBhbmQgZGlzcGF0Y2ggdGhlIHdvcmsgZ3JvdXBzIGJhc2VkIG9uIHRoZSB7QGxpbmsgZGlzcGF0Y2hTaXplIHwgZGVmYXVsdCBkaXNwYXRjaCBzaXplfS4gVGhpcyBpcyB3aGVyZSB5b3Ugd2lsbCBoYXZlIHRvIHNldCBhbGwgdGhlIHtAbGluayBjb3JlL2JpbmRHcm91cHMvQmluZEdyb3VwLkJpbmRHcm91cCB8IGJpbmQgZ3JvdXBzfSBhbmQgZGlzcGF0Y2ggdGhlIHdvcmtncm91cHMgYnkgeW91cnNlbGYuXG4gICAqL1xuICB1c2VDdXN0b21SZW5kZXIoY2FsbGJhY2s6IChwYXNzOiBHUFVDb21wdXRlUGFzc0VuY29kZXIpID0+IHZvaWQpIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX3VzZUN1c3RvbVJlbmRlckNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIHRoZSBtYXRlcmlhbCBpZiBpdCBpcyByZWFkeTpcbiAgICogU2V0IHRoZSBjdXJyZW50IHBpcGVsaW5lLCBzZXQgdGhlIGJpbmQgZ3JvdXBzIGFuZCBkaXNwYXRjaCB0aGUgd29yayBncm91cHNcbiAgICogQHBhcmFtIHBhc3MgLSBjdXJyZW50IGNvbXB1dGUgcGFzcyBlbmNvZGVyXG4gICAqL1xuICByZW5kZXIocGFzczogR1BVQ29tcHV0ZVBhc3NFbmNvZGVyKSB7XG4gICAgLy8gcmVuZGVyZXIgb3IgcGlwZWxpbmUgYXJlIG5vdCByZWFkeSB5ZXRcbiAgICAvLyBub3QgcmVhbGx5IG5lZWRlZCBzaW5jZSBjb21wdXRlIHBhc3NlcyBkbyBhbHJlYWR5IGNoZWNrIGl0IGJlZm9yZWhhbmRcbiAgICAvLyBtb3N0bHkgaGVyZSBhcyBhIHNhZmVndWFyZFxuICAgIGlmICghdGhpcy5yZWFkeSkgcmV0dXJuXG5cbiAgICAvLyBzZXQgY3VycmVudCBwaXBlbGluZVxuICAgIHRoaXMuc2V0UGlwZWxpbmUocGFzcylcblxuICAgIC8vIGlmIHdlIGRlY2xhcmVkIGEgY3VzdG9tIHJlbmRlciBmdW5jdGlvbiwgY2FsbCBpdFxuICAgIGlmICh0aGlzLl91c2VDdXN0b21SZW5kZXJDYWxsYmFjayAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLl91c2VDdXN0b21SZW5kZXJDYWxsYmFjayhwYXNzKVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBlbHNlIGp1c3Qgc2V0IG91ciBiaW5kIGdyb3VwcyBhbmQgZGlzcGF0Y2hcbiAgICAgIHRoaXMuYmluZEdyb3Vwcy5mb3JFYWNoKChiaW5kR3JvdXApID0+IHtcbiAgICAgICAgcGFzcy5zZXRCaW5kR3JvdXAoYmluZEdyb3VwLmluZGV4LCBiaW5kR3JvdXAuYmluZEdyb3VwKVxuICAgICAgfSlcblxuICAgICAgcGFzcy5kaXNwYXRjaFdvcmtncm91cHModGhpcy5kaXNwYXRjaFNpemVbMF0sIHRoaXMuZGlzcGF0Y2hTaXplWzFdLCB0aGlzLmRpc3BhdGNoU2l6ZVsyXSlcbiAgICB9XG4gIH1cblxuICAvKiBSRVNVTFQgQlVGRkVSICovXG5cbiAgLyoqXG4gICAqIENvcHkgYWxsIHdyaXRhYmxlIGJpbmRpbmcgYnVmZmVycyB0aGF0IG5lZWQgaXRcbiAgICogQHBhcmFtIGNvbW1hbmRFbmNvZGVyIC0gY3VycmVudCBjb21tYW5kIGVuY29kZXJcbiAgICovXG4gIGNvcHlCdWZmZXJUb1Jlc3VsdChjb21tYW5kRW5jb2RlcjogR1BVQ29tbWFuZEVuY29kZXIpIHtcbiAgICB0aGlzLmJpbmRHcm91cHMuZm9yRWFjaCgoYmluZEdyb3VwKSA9PiB7XG4gICAgICBiaW5kR3JvdXAuYnVmZmVyQmluZGluZ3MuZm9yRWFjaCgoYmluZGluZzogV3JpdGFibGVCdWZmZXJCaW5kaW5nKSA9PiB7XG4gICAgICAgIGlmIChiaW5kaW5nLnNob3VsZENvcHlSZXN1bHQgJiYgYmluZGluZy5yZXN1bHRCdWZmZXIubWFwU3RhdGUgPT09ICd1bm1hcHBlZCcpIHtcbiAgICAgICAgICBjb21tYW5kRW5jb2Rlci5jb3B5QnVmZmVyVG9CdWZmZXIoYmluZGluZy5idWZmZXIsIDAsIGJpbmRpbmcucmVzdWx0QnVmZmVyLCAwLCBiaW5kaW5nLnJlc3VsdEJ1ZmZlci5zaXplKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSB7QGxpbmsgY29yZS9iaW5kaW5ncy9Xcml0YWJsZUJ1ZmZlckJpbmRpbmcuV3JpdGFibGVCdWZmZXJCaW5kaW5nI3Jlc3VsdEJ1ZmZlciB8IHJlc3VsdCBHUFUgYnVmZmVyfSBjb250ZW50IGJ5IHtAbGluayBjb3JlL2JpbmRpbmdzL1dyaXRhYmxlQnVmZmVyQmluZGluZy5Xcml0YWJsZUJ1ZmZlckJpbmRpbmcgfCBiaW5kaW5nfSBhbmQge0BsaW5rIGNvcmUvYmluZGluZ3MvYnVmZmVyRWxlbWVudHMvQnVmZmVyRWxlbWVudC5CdWZmZXJFbGVtZW50IHwgYnVmZmVyIGVsZW1lbnR9IG5hbWVzXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0gcGFyYW1ldGVycyB1c2VkIHRvIGdldCB0aGUgcmVzdWx0XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzLmJpbmRpbmdOYW1lIC0ge0BsaW5rIGNvcmUvYmluZGluZ3MvV3JpdGFibGVCdWZmZXJCaW5kaW5nLldyaXRhYmxlQnVmZmVyQmluZGluZyNuYW1lIHwgYmluZGluZyBuYW1lfSBmcm9tIHdoaWNoIHRvIGdldCB0aGUgcmVzdWx0XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzLmJ1ZmZlckVsZW1lbnROYW1lIC0gb3B0aW9uYWwge0BsaW5rIGNvcmUvYmluZGluZ3MvYnVmZmVyRWxlbWVudHMvQnVmZmVyRWxlbWVudC5CdWZmZXJFbGVtZW50IHwgYnVmZmVyIGVsZW1lbnR9IChpLmUuIHN0cnVjdCBtZW1iZXIpIG5hbWUgaWYgdGhlIHJlc3VsdCBuZWVkcyB0byBiZSByZXN0cmFpbmVkIHRvIG9ubHkgb25lIGVsZW1lbnRcbiAgICogQGFzeW5jXG4gICAqIEByZXR1cm5zIC0gdGhlIG1hcHBlZCBjb250ZW50IG9mIHRoZSB7QGxpbmsgR1BVQnVmZmVyfSBhcyBhIHtAbGluayBGbG9hdDMyQXJyYXl9XG4gICAqL1xuICBhc3luYyBnZXRDb21wdXRlUmVzdWx0KHtcbiAgICBiaW5kaW5nTmFtZSA9ICcnLFxuICAgIGJ1ZmZlckVsZW1lbnROYW1lID0gJycsXG4gIH06IHtcbiAgICBiaW5kaW5nTmFtZT86IHN0cmluZ1xuICAgIGJ1ZmZlckVsZW1lbnROYW1lPzogc3RyaW5nXG4gIH0pOiBQcm9taXNlPEZsb2F0MzJBcnJheT4ge1xuICAgIGNvbnN0IGJpbmRpbmcgPSB0aGlzLmdldEJ1ZmZlckJpbmRpbmdCeU5hbWUoYmluZGluZ05hbWUpXG5cbiAgICBpZiAoYmluZGluZyAmJiAncmVzdWx0QnVmZmVyJyBpbiBiaW5kaW5nICYmIGJpbmRpbmcucmVzdWx0QnVmZmVyLm1hcFN0YXRlID09PSAndW5tYXBwZWQnKSB7XG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB0aGlzLmdldEJ1ZmZlclJlc3VsdChiaW5kaW5nLnJlc3VsdEJ1ZmZlcilcblxuICAgICAgaWYgKGJ1ZmZlckVsZW1lbnROYW1lKSB7XG4gICAgICAgIHJldHVybiBiaW5kaW5nLmV4dHJhY3RCdWZmZXJFbGVtZW50RGF0YUZyb21CdWZmZXJSZXN1bHQoeyByZXN1bHQsIGJ1ZmZlckVsZW1lbnROYW1lIH0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gcmVzdWx0XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBuZXcgRmxvYXQzMkFycmF5KDApXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBpc1JlbmRlcmVyLCBSZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmVycy91dGlscydcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJ1xuaW1wb3J0IHsgQ29tcHV0ZU1hdGVyaWFsIH0gZnJvbSAnLi4vbWF0ZXJpYWxzL0NvbXB1dGVNYXRlcmlhbCdcbmltcG9ydCB7IENvbXB1dGVNYXRlcmlhbFBhcmFtcywgTWF0ZXJpYWxQYXJhbXMsIE1hdGVyaWFsU2hhZGVycyB9IGZyb20gJy4uLy4uL3R5cGVzL01hdGVyaWFscydcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vLi4vY3VydGFpbnMvR1BVQ3VydGFpbnMnXG5pbXBvcnQgeyBSZW5kZXJUZXh0dXJlLCBSZW5kZXJUZXh0dXJlUGFyYW1zIH0gZnJvbSAnLi4vdGV4dHVyZXMvUmVuZGVyVGV4dHVyZSdcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9UZXh0dXJlJ1xuaW1wb3J0IHsgRXh0ZXJuYWxUZXh0dXJlUGFyYW1zLCBUZXh0dXJlUGFyYW1zIH0gZnJvbSAnLi4vLi4vdHlwZXMvVGV4dHVyZXMnXG5cbi8qKiBEZWZpbmVzIHtAbGluayBDb21wdXRlUGFzc30gb3B0aW9ucyAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wdXRlUGFzc09wdGlvbnMge1xuICAvKiogVGhlIGxhYmVsIG9mIHRoZSB7QGxpbmsgQ29tcHV0ZVBhc3N9ICovXG4gIGxhYmVsOiBzdHJpbmdcbiAgLyoqIENvbnRyb2xzIHRoZSBvcmRlciBpbiB3aGljaCB0aGlzIHtAbGluayBDb21wdXRlUGFzc30gc2hvdWxkIGJlIHJlbmRlcmVkIGJ5IG91ciB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX0gKi9cbiAgcmVuZGVyT3JkZXI/OiBudW1iZXJcbiAgLyoqIFdoZXRoZXIgdGhlIHtAbGluayBDb21wdXRlUGFzc30gc2hvdWxkIGJlIGFkZGVkIHRvIG91ciB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX0gdG8gbGV0IGl0IGhhbmRsZSB0aGUgcmVuZGVyaW5nIHByb2Nlc3MgYXV0b21hdGljYWxseSAqL1xuICBhdXRvUmVuZGVyPzogYm9vbGVhblxuICAvKiogQ29tcHV0ZSBzaGFkZXIgcGFzc2VkIHRvIHRoZSB7QGxpbmsgQ29tcHV0ZVBhc3N9IGZvbGxvd2luZyB0aGUge0BsaW5rIHR5cGVzL01hdGVyaWFscy5TaGFkZXJPcHRpb25zIHwgc2hhZGVyIG9iamVjdH0gbm90YXRpb24gKi9cbiAgc2hhZGVyczogTWF0ZXJpYWxTaGFkZXJzXG4gIC8qKiB3aGV0aGVyIHRoZSB7QGxpbmsgY29yZS9waXBlbGluZXMvQ29tcHV0ZVBpcGVsaW5lRW50cnkuQ29tcHV0ZVBpcGVsaW5lRW50cnkjcGlwZWxpbmUgfCBjb21wdXRlIHBpcGVsaW5lfSBzaG91bGQgYmUgY29tcGlsZWQgYXN5bmNocm9ub3VzbHkgKi9cbiAgdXNlQXN5bmNQaXBlbGluZT86IGJvb2xlYW5cbiAgLyoqIFBhcmFtZXRlcnMgdXNlZCBieSB0aGlzIHtAbGluayBDb21wdXRlUGFzc30gdG8gY3JlYXRlIGEge0BsaW5rIFRleHR1cmV9ICovXG4gIHRleHR1cmVzT3B0aW9ucz86IEV4dGVybmFsVGV4dHVyZVBhcmFtc1xuICAvKiogRGVmYXVsdCB7QGxpbmsgQ29tcHV0ZU1hdGVyaWFsfSB3b3JrIGdyb3VwIGRpc3BhdGNoIHNpemUgdG8gdXNlIHdpdGggdGhpcyB7QGxpbmsgQ29tcHV0ZVBhc3N9ICovXG4gIGRpc3BhdGNoU2l6ZT86IG51bWJlciB8IG51bWJlcltdXG59XG5cbi8qKlxuICogQW4gb2JqZWN0IGRlZmluaW5nIGFsbCBwb3NzaWJsZSB7QGxpbmsgQ29tcHV0ZVBhc3N9IGNsYXNzIGluc3RhbmNpbmcgcGFyYW1ldGVyc1xuICovXG5leHBvcnQgaW50ZXJmYWNlIENvbXB1dGVQYXNzUGFyYW1zIGV4dGVuZHMgUGFydGlhbDxDb21wdXRlUGFzc09wdGlvbnM+LCBNYXRlcmlhbFBhcmFtcyB7fVxuXG5sZXQgY29tcHV0ZVBhc3NJbmRleCA9IDBcblxuLyoqXG4gKiBVc2VkIHRvIGNyZWF0ZSBhIHtAbGluayBDb21wdXRlUGFzc30sIGkuZS4gcnVuIGNvbXB1dGF0aW9ucyBvbiB0aGUgR1BVLjxicj5cbiAqIEEge0BsaW5rIENvbXB1dGVQYXNzfSBpcyBiYXNpY2FsbHkgYSB3cmFwcGVyIGFyb3VuZCBhIHtAbGluayBDb21wdXRlTWF0ZXJpYWx9IHRoYXQgaGFuZGxlcyBtb3N0IG9mIHRoZSBwcm9jZXNzLlxuICpcbiAqIFRoZSBkZWZhdWx0IHJlbmRlciBiZWhhdmlvdXIgb2YgYSB7QGxpbmsgQ29tcHV0ZVBhc3N9IGlzIHRvIHNldCBpdHMge0BsaW5rIGNvcmUvYmluZEdyb3Vwcy9CaW5kR3JvdXAuQmluZEdyb3VwIHwgYmluZCBncm91cHN9IGFuZCB0aGVuIGRpc3BhdGNoIHRoZSB3b3JrZ3JvdXBzIGJhc2VkIG9uIHRoZSBwcm92aWRlZCB7QGxpbmsgQ29tcHV0ZU1hdGVyaWFsI2Rpc3BhdGNoU2l6ZSB8IGRpc3BhdGNoU2l6ZX0uPGJyPlxuICogSG93ZXZlciwgbW9zdCBvZiB0aGUgdGltZSB5b3UnZCB3YW50IGEgc2xpZ2h0bHkgbW9yZSBjb21wbGV4IGJlaGF2aW91ci4gVGhlIHtAbGluayBDb21wdXRlUGFzcyN1c2VDdXN0b21SZW5kZXIgfCBgdXNlQ3VzdG9tUmVuZGVyYCBob29rfSBsZXRzIHlvdSBkZWZpbmUgYSB0b3RhbGx5IGN1c3RvbSBiZWhhdmlvdXIsIGJ1dCB5b3UnbGwgaGF2ZSB0byBzZXQgYWxsIHRoZSB7QGxpbmsgY29yZS9iaW5kR3JvdXBzL0JpbmRHcm91cC5CaW5kR3JvdXAgfCBiaW5kIGdyb3Vwc30gYW5kIGRpc3BhdGNoIHRoZSB3b3JrZ3JvdXBzIGJ5IHlvdXJzZWxmLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBzZXQgb3VyIG1haW4gR1BVQ3VydGFpbnMgaW5zdGFuY2VcbiAqIGNvbnN0IGdwdUN1cnRhaW5zID0gbmV3IEdQVUN1cnRhaW5zKHtcbiAqICAgY29udGFpbmVyOiAnI2NhbnZhcycgLy8gc2VsZWN0b3Igb2Ygb3VyIFdlYkdQVSBjYW52YXMgY29udGFpbmVyXG4gKiB9KVxuICpcbiAqIC8vIHNldCB0aGUgR1BVIGRldmljZVxuICogLy8gbm90ZSB0aGlzIGlzIGFzeW5jaHJvbm91c1xuICogYXdhaXQgZ3B1Q3VydGFpbnMuc2V0RGV2aWNlKClcbiAqXG4gKiAvLyBsZXQncyBhc3N1bWUgd2UgYXJlIGdvaW5nIHRvIGNvbXB1dGUgdGhlIHBvc2l0aW9ucyBvZiAxMDAuMDAwIHBhcnRpY2xlc1xuICogY29uc3QgbmJQYXJ0aWNsZXMgPSAxMDBfMDAwXG4gKlxuICogY29uc3QgY29tcHV0ZVBhc3MgPSBuZXcgQ29tcHV0ZVBhc3MoZ3B1Q3VydGFpbnMsIHtcbiAqICAgbGFiZWw6ICdNeSBjb21wdXRlIHBhc3MnLFxuICogICBzaGFkZXJzOiB7XG4gKiAgICAgY29tcHV0ZToge1xuICogICAgICAgY29kZTogY29tcHV0ZVNoYWRlckNvZGUsIC8vIGFzc3VtZSBpdCBpcyBhIHZhbGlkIFdHU0wgY29tcHV0ZSBzaGFkZXJcbiAqICAgICB9LFxuICogICB9LFxuICogICBkaXNwYXRjaFNpemU6IE1hdGguY2VpbChuYlBhcnRpY2xlcyAvIDY0KSxcbiAqICAgc3RvcmFnZXM6IHtcbiAqICAgICBwYXJ0aWNsZXM6IHtcbiAqICAgICAgIGFjY2VzczogJ3JlYWRfd3JpdGUnLFxuICogICAgICAgc3RydWN0OiB7XG4gKiAgICAgICAgIHBvc2l0aW9uOiB7XG4gKiAgICAgICAgICAgdHlwZTogJ2FycmF5PHZlYzRmPicsXG4gKiAgICAgICAgICAgdmFsdWU6IG5ldyBGbG9hdDMyQXJyYXkobmJQYXJ0aWNsZXMgKiA0KSxcbiAqICAgICAgICAgfSxcbiAqICAgICAgIH0sXG4gKiAgICAgfSxcbiAqICAgfSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIENvbXB1dGVQYXNzIHtcbiAgLyoqIFRoZSB0eXBlIG9mIHRoZSB7QGxpbmsgQ29tcHV0ZVBhc3N9ICovXG4gIHR5cGU6IHN0cmluZ1xuICAvKiogVGhlIHVuaXZlcnNhbCB1bmlxdWUgaWQgb2YgdGhlIHtAbGluayBDb21wdXRlUGFzc30gKi9cbiAgdXVpZDogc3RyaW5nXG4gIC8qKiBUaGUgaW5kZXggb2YgdGhlIHtAbGluayBDb21wdXRlUGFzc30sIGluY3JlbWVudGVkIGVhY2ggdGltZSBhIG5ldyBvbmUgaXMgaW5zdGFuY2VkICovXG4gIGluZGV4OiBudW1iZXJcbiAgLyoqIFRoZSB7QGxpbmsgUmVuZGVyZXJ9IHVzZWQgKi9cbiAgcmVuZGVyZXI6IFJlbmRlcmVyXG4gIC8qKiBDb250cm9scyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhpcyB7QGxpbmsgQ29tcHV0ZVBhc3N9IHNob3VsZCBiZSByZW5kZXJlZCBieSBvdXIge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9ICovXG4gIHJlbmRlck9yZGVyOiBudW1iZXJcblxuICAvKiogT3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBDb21wdXRlUGFzc30gKi9cbiAgb3B0aW9uczogQ29tcHV0ZVBhc3NPcHRpb25zXG5cbiAgLyoqIHtAbGluayBDb21wdXRlTWF0ZXJpYWx9IHVzZWQgYnkgdGhpcyB7QGxpbmsgQ29tcHV0ZVBhc3N9ICovXG4gIG1hdGVyaWFsOiBDb21wdXRlTWF0ZXJpYWxcblxuICAvKiogRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhpcyB7QGxpbmsgQ29tcHV0ZVBhc3N9IGlzIHJlYWR5IHRvIGJlIHJlbmRlcmVkICovXG4gIF9yZWFkeTogYm9vbGVhblxuXG4gIC8qKiBFbXB0eSBvYmplY3QgdG8gc3RvcmUgYW55IGFkZGl0aW9uYWwgZGF0YSBvciBjdXN0b20gcHJvcGVydGllcyBpbnRvIHlvdXIge0BsaW5rIENvbXB1dGVQYXNzfSAqL1xuICB1c2VyRGF0YTogUmVjb3JkPHN0cmluZywgdW5rbm93bj5cblxuICAvKipcbiAgICogV2hldGhlciB0aGlzIHtAbGluayBDb21wdXRlUGFzc30gc2hvdWxkIGJlIGFkZGVkIHRvIG91ciB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX0gdG8gbGV0IGl0IGhhbmRsZSB0aGUgcmVuZGVyaW5nIHByb2Nlc3MgYXV0b21hdGljYWxseVxuICAgKiBAcHJpdmF0ZVxuICAgKi9cbiAgI2F1dG9SZW5kZXIgPSB0cnVlXG5cbiAgLy8gY2FsbGJhY2tzIC8gZXZlbnRzXG4gIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uUmVhZHl9IGNhbGxiYWNrICovXG4gIF9vblJlYWR5Q2FsbGJhY2s6ICgpID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgLyogYWxsb3cgZW1wdHkgY2FsbGJhY2sgKi9cbiAgfVxuICAvKiogZnVuY3Rpb24gYXNzaWduZWQgdG8gdGhlIHtAbGluayBvbkJlZm9yZVJlbmRlcn0gY2FsbGJhY2sgKi9cbiAgX29uQmVmb3JlUmVuZGVyQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgLyogYWxsb3cgZW1wdHkgY2FsbGJhY2sgKi9cbiAgfVxuICAvKiogZnVuY3Rpb24gYXNzaWduZWQgdG8gdGhlIHtAbGluayBvblJlbmRlcn0gY2FsbGJhY2sgKi9cbiAgX29uUmVuZGVyQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgLyogYWxsb3cgZW1wdHkgY2FsbGJhY2sgKi9cbiAgfVxuICAvKiogZnVuY3Rpb24gYXNzaWduZWQgdG8gdGhlIHtAbGluayBvbkFmdGVyUmVuZGVyfSBjYWxsYmFjayAqL1xuICBfb25BZnRlclJlbmRlckNhbGxiYWNrOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xuICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrICovXG4gIH1cbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25BZnRlclJlc2l6ZX0gY2FsbGJhY2sgKi9cbiAgX29uQWZ0ZXJSZXNpemVDYWxsYmFjazogKCkgPT4gdm9pZCA9ICgpID0+IHtcbiAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGVQYXNzIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSByZW5kZXJlciAtIGEge0BsaW5rIFJlbmRlcmVyfSBjbGFzcyBvYmplY3Qgb3IgYSB7QGxpbmsgR1BVQ3VydGFpbnN9IGNsYXNzIG9iamVjdFxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBDb21wdXRlUGFzc1BhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIG91ciB7QGxpbmsgQ29tcHV0ZVBhc3N9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIgfCBHUFVDdXJ0YWlucywgcGFyYW1ldGVyczogQ29tcHV0ZVBhc3NQYXJhbXMgPSB7fSkge1xuICAgIGNvbnN0IHR5cGUgPSAnQ29tcHV0ZVBhc3MnXG5cbiAgICAvLyB3ZSBjb3VsZCBwYXNzIG91ciBjdXJ0YWlucyBvYmplY3QgT1Igb3VyIGN1cnRhaW5zIHJlbmRlcmVyIG9iamVjdFxuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBSZW5kZXJlcilcblxuICAgIGlzUmVuZGVyZXIocmVuZGVyZXIsIHBhcmFtZXRlcnMubGFiZWwgPyBgJHtwYXJhbWV0ZXJzLmxhYmVsfSAke3R5cGV9YCA6IHR5cGUpXG5cbiAgICBwYXJhbWV0ZXJzLmxhYmVsID0gcGFyYW1ldGVycy5sYWJlbCA/PyAnQ29tcHV0ZVBhc3MgJyArIHJlbmRlcmVyLmNvbXB1dGVQYXNzZXM/Lmxlbmd0aFxuXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpXG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMgYXMgQ29tcHV0ZVBhc3MsICdpbmRleCcsIHsgdmFsdWU6IGNvbXB1dGVQYXNzSW5kZXgrKyB9KVxuXG4gICAgY29uc3Qge1xuICAgICAgbGFiZWwsXG4gICAgICBzaGFkZXJzLFxuICAgICAgcmVuZGVyT3JkZXIsXG4gICAgICB1bmlmb3JtcyxcbiAgICAgIHN0b3JhZ2VzLFxuICAgICAgYmluZEdyb3VwcyxcbiAgICAgIHNhbXBsZXJzLFxuICAgICAgdGV4dHVyZXMsXG4gICAgICByZW5kZXJUZXh0dXJlcyxcbiAgICAgIGF1dG9SZW5kZXIsXG4gICAgICB1c2VBc3luY1BpcGVsaW5lLFxuICAgICAgdGV4dHVyZXNPcHRpb25zLFxuICAgICAgZGlzcGF0Y2hTaXplLFxuICAgIH0gPSBwYXJhbWV0ZXJzXG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBsYWJlbCxcbiAgICAgIHNoYWRlcnMsXG4gICAgICAuLi4oYXV0b1JlbmRlciAhPT0gdW5kZWZpbmVkICYmIHsgYXV0b1JlbmRlciB9KSxcbiAgICAgIC4uLihyZW5kZXJPcmRlciAhPT0gdW5kZWZpbmVkICYmIHsgcmVuZGVyT3JkZXIgfSksXG4gICAgICAuLi4odXNlQXN5bmNQaXBlbGluZSAhPT0gdW5kZWZpbmVkICYmIHsgdXNlQXN5bmNQaXBlbGluZSB9KSxcbiAgICAgIC4uLihkaXNwYXRjaFNpemUgIT09IHVuZGVmaW5lZCAmJiB7IGRpc3BhdGNoU2l6ZSB9KSxcbiAgICAgIHRleHR1cmVzT3B0aW9ucywgLy8gVE9ETyBkZWZhdWx0XG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJPcmRlciA9IHJlbmRlck9yZGVyID8/IDBcblxuICAgIGlmIChhdXRvUmVuZGVyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHRoaXMuI2F1dG9SZW5kZXIgPSBhdXRvUmVuZGVyXG4gICAgfVxuXG4gICAgdGhpcy51c2VyRGF0YSA9IHt9XG5cbiAgICB0aGlzLnJlYWR5ID0gZmFsc2VcblxuICAgIHRoaXMuc2V0Q29tcHV0ZU1hdGVyaWFsKHtcbiAgICAgIGxhYmVsOiB0aGlzLm9wdGlvbnMubGFiZWwsXG4gICAgICBzaGFkZXJzOiB0aGlzLm9wdGlvbnMuc2hhZGVycyxcbiAgICAgIHVuaWZvcm1zLFxuICAgICAgc3RvcmFnZXMsXG4gICAgICBiaW5kR3JvdXBzLFxuICAgICAgc2FtcGxlcnMsXG4gICAgICB0ZXh0dXJlcyxcbiAgICAgIHJlbmRlclRleHR1cmVzLFxuICAgICAgdXNlQXN5bmNQaXBlbGluZSxcbiAgICAgIGRpc3BhdGNoU2l6ZSxcbiAgICB9KVxuXG4gICAgdGhpcy5hZGRUb1NjZW5lKClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3Igc2V0IHdoZXRoZXIgdGhlIGNvbXB1dGUgcGFzcyBpcyByZWFkeSB0byByZW5kZXIgKHRoZSBtYXRlcmlhbCBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgY29tcGlsZWQpXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHJlYWR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9yZWFkeVxuICB9XG5cbiAgc2V0IHJlYWR5KHZhbHVlOiBib29sZWFuKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICB0aGlzLl9vblJlYWR5Q2FsbGJhY2sgJiYgdGhpcy5fb25SZWFkeUNhbGxiYWNrKClcbiAgICB9XG4gICAgdGhpcy5fcmVhZHkgPSB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBvdXIgY29tcHV0ZSBwYXNzIHRvIHRoZSBzY2VuZSBhbmQgdGhlIHJlbmRlcmVyXG4gICAqL1xuICBhZGRUb1NjZW5lKCkge1xuICAgIHRoaXMucmVuZGVyZXIuY29tcHV0ZVBhc3Nlcy5wdXNoKHRoaXMpXG5cbiAgICBpZiAodGhpcy4jYXV0b1JlbmRlcikge1xuICAgICAgdGhpcy5yZW5kZXJlci5zY2VuZS5hZGRDb21wdXRlUGFzcyh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgb3VyIGNvbXB1dGUgcGFzcyBmcm9tIHRoZSBzY2VuZSBhbmQgdGhlIHJlbmRlcmVyXG4gICAqL1xuICByZW1vdmVGcm9tU2NlbmUoKSB7XG4gICAgaWYgKHRoaXMuI2F1dG9SZW5kZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2NlbmUucmVtb3ZlQ29tcHV0ZVBhc3ModGhpcylcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVyLmNvbXB1dGVQYXNzZXMgPSB0aGlzLnJlbmRlcmVyLmNvbXB1dGVQYXNzZXMuZmlsdGVyKChjb21wdXRlUGFzcykgPT4gY29tcHV0ZVBhc3MudXVpZCAhPT0gdGhpcy51dWlkKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgY29tcHV0ZSBwYXNzIG1hdGVyaWFsXG4gICAqIEBwYXJhbSBjb21wdXRlUGFyYW1ldGVycyAtIHtAbGluayBDb21wdXRlTWF0ZXJpYWx9IHBhcmFtZXRlcnNcbiAgICovXG4gIHNldENvbXB1dGVNYXRlcmlhbChjb21wdXRlUGFyYW1ldGVyczogQ29tcHV0ZU1hdGVyaWFsUGFyYW1zKSB7XG4gICAgdGhpcy5tYXRlcmlhbCA9IG5ldyBDb21wdXRlTWF0ZXJpYWwodGhpcy5yZW5kZXJlciwgY29tcHV0ZVBhcmFtZXRlcnMpXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHtAbGluayBjb3JlL3JlbmRlcmVycy9HUFVEZXZpY2VNYW5hZ2VyLkdQVURldmljZU1hbmFnZXIjZGV2aWNlIHwgZGV2aWNlfSBoYXMgYmVlbiBsb3N0IHRvIHByZXBhcmUgZXZlcnl0aGluZyBmb3IgcmVzdG9yYXRpb24uXG4gICAqIEJhc2ljYWxseSBzZXQgYWxsIHRoZSB7QGxpbmsgR1BVQnVmZmVyfSB0byBudWxsIHNvIHRoZXkgd2lsbCBiZSByZXNldCBuZXh0IHRpbWUgd2UgdHJ5IHRvIHJlbmRlclxuICAgKi9cbiAgbG9zZUNvbnRleHQoKSB7XG4gICAgdGhpcy5tYXRlcmlhbC5sb3NlQ29udGV4dCgpXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHtAbGluayBjb3JlL3JlbmRlcmVycy9HUFVEZXZpY2VNYW5hZ2VyLkdQVURldmljZU1hbmFnZXIjZGV2aWNlIHwgZGV2aWNlfSBoYXMgYmVlbiByZXN0b3JlZFxuICAgKi9cbiAgcmVzdG9yZUNvbnRleHQoKSB7XG4gICAgdGhpcy5tYXRlcmlhbC5yZXN0b3JlQ29udGV4dCgpXG4gIH1cblxuICAvKiBURVhUVVJFUyAqL1xuXG4gIC8qKlxuICAgKiBHZXQgb3VyIHtAbGluayBDb21wdXRlTWF0ZXJpYWwjdGV4dHVyZXMgfCBDb21wdXRlTWF0ZXJpYWwgdGV4dHVyZXMgYXJyYXl9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHRleHR1cmVzKCk6IFRleHR1cmVbXSB7XG4gICAgcmV0dXJuIHRoaXMubWF0ZXJpYWw/LnRleHR1cmVzIHx8IFtdXG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciB7QGxpbmsgQ29tcHV0ZU1hdGVyaWFsI3JlbmRlclRleHR1cmVzIHwgQ29tcHV0ZU1hdGVyaWFsIHJlbmRlciB0ZXh0dXJlcyBhcnJheX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgcmVuZGVyVGV4dHVyZXMoKTogUmVuZGVyVGV4dHVyZVtdIHtcbiAgICByZXR1cm4gdGhpcy5tYXRlcmlhbD8ucmVuZGVyVGV4dHVyZXMgfHwgW11cbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIFRleHR1cmV9XG4gICAqIEBwYXJhbSBvcHRpb25zIC0ge0BsaW5rIFRleHR1cmVQYXJhbXMgfCBUZXh0dXJlIHBhcmFtZXRlcnN9XG4gICAqIEByZXR1cm5zIC0gbmV3bHkgY3JlYXRlZCB7QGxpbmsgVGV4dHVyZX1cbiAgICovXG4gIGNyZWF0ZVRleHR1cmUob3B0aW9uczogVGV4dHVyZVBhcmFtcyk6IFRleHR1cmUge1xuICAgIGlmICghb3B0aW9ucy5uYW1lKSB7XG4gICAgICBvcHRpb25zLm5hbWUgPSAndGV4dHVyZScgKyB0aGlzLnRleHR1cmVzLmxlbmd0aFxuICAgIH1cblxuICAgIGlmICghb3B0aW9ucy5sYWJlbCkge1xuICAgICAgb3B0aW9ucy5sYWJlbCA9IHRoaXMub3B0aW9ucy5sYWJlbCArICcgJyArIG9wdGlvbnMubmFtZVxuICAgIH1cblxuICAgIGNvbnN0IHRleHR1cmUgPSBuZXcgVGV4dHVyZSh0aGlzLnJlbmRlcmVyLCB7IC4uLm9wdGlvbnMsIC4uLnRoaXMub3B0aW9ucy50ZXh0dXJlc09wdGlvbnMgfSlcblxuICAgIHRoaXMuYWRkVGV4dHVyZSh0ZXh0dXJlKVxuXG4gICAgcmV0dXJuIHRleHR1cmVcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgVGV4dHVyZX1cbiAgICogQHBhcmFtIHRleHR1cmUgLSB7QGxpbmsgVGV4dHVyZX0gdG8gYWRkXG4gICAqL1xuICBhZGRUZXh0dXJlKHRleHR1cmU6IFRleHR1cmUpIHtcbiAgICB0aGlzLm1hdGVyaWFsLmFkZFRleHR1cmUodGV4dHVyZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIFJlbmRlclRleHR1cmV9XG4gICAqIEBwYXJhbSAgb3B0aW9ucyAtIHtAbGluayBSZW5kZXJUZXh0dXJlUGFyYW1zIHwgUmVuZGVyVGV4dHVyZSBwYXJhbWV0ZXJzfVxuICAgKiBAcmV0dXJucyAtIG5ld2x5IGNyZWF0ZWQge0BsaW5rIFJlbmRlclRleHR1cmV9XG4gICAqL1xuICBjcmVhdGVSZW5kZXJUZXh0dXJlKG9wdGlvbnM6IFJlbmRlclRleHR1cmVQYXJhbXMpOiBSZW5kZXJUZXh0dXJlIHtcbiAgICBpZiAoIW9wdGlvbnMubmFtZSkge1xuICAgICAgb3B0aW9ucy5uYW1lID0gJ3JlbmRlclRleHR1cmUnICsgdGhpcy5yZW5kZXJUZXh0dXJlcy5sZW5ndGhcbiAgICB9XG5cbiAgICBjb25zdCByZW5kZXJUZXh0dXJlID0gbmV3IFJlbmRlclRleHR1cmUodGhpcy5yZW5kZXJlciwgb3B0aW9ucylcblxuICAgIHRoaXMuYWRkUmVuZGVyVGV4dHVyZShyZW5kZXJUZXh0dXJlKVxuXG4gICAgcmV0dXJuIHJlbmRlclRleHR1cmVcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgUmVuZGVyVGV4dHVyZX1cbiAgICogQHBhcmFtIHJlbmRlclRleHR1cmUgLSB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gdG8gYWRkXG4gICAqL1xuICBhZGRSZW5kZXJUZXh0dXJlKHJlbmRlclRleHR1cmU6IFJlbmRlclRleHR1cmUpIHtcbiAgICB0aGlzLm1hdGVyaWFsLmFkZFRleHR1cmUocmVuZGVyVGV4dHVyZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3VyIHtAbGluayBDb21wdXRlTWF0ZXJpYWwjdW5pZm9ybXMgfCBDb21wdXRlTWF0ZXJpYWwgdW5pZm9ybXN9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHVuaWZvcm1zKCk6IENvbXB1dGVNYXRlcmlhbFsndW5pZm9ybXMnXSB7XG4gICAgcmV0dXJuIHRoaXMubWF0ZXJpYWw/LnVuaWZvcm1zXG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciB7QGxpbmsgQ29tcHV0ZU1hdGVyaWFsI3N0b3JhZ2VzIHwgQ29tcHV0ZU1hdGVyaWFsIHN0b3JhZ2VzfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBzdG9yYWdlcygpOiBDb21wdXRlTWF0ZXJpYWxbJ3N0b3JhZ2VzJ10ge1xuICAgIHJldHVybiB0aGlzLm1hdGVyaWFsPy5zdG9yYWdlc1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBmcm9tIHRoZSByZW5kZXJlciwgdXNlZnVsIHRvIHRyaWdnZXIgYW4gYWZ0ZXIgcmVzaXplIGNhbGxiYWNrLlxuICAgKi9cbiAgcmVzaXplKCkge1xuICAgIHRoaXMuX29uQWZ0ZXJSZXNpemVDYWxsYmFjayAmJiB0aGlzLl9vbkFmdGVyUmVzaXplQ2FsbGJhY2soKVxuICB9XG5cbiAgLyoqIEVWRU5UUyAqKi9cblxuICAvKipcbiAgICogQ2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIHtAbGluayBDb21wdXRlUGFzc30gaXMgcmVhZHlcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIHdoZW4ge0BsaW5rIENvbXB1dGVQYXNzfSBpcyByZWFkeVxuICAgKi9cbiAgb25SZWFkeShjYWxsYmFjazogKCkgPT4gdm9pZCk6IENvbXB1dGVQYXNzIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uUmVhZHlDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0byBydW4gYmVmb3JlIHRoZSB7QGxpbmsgQ29tcHV0ZVBhc3N9IGlzIHJlbmRlcmVkXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biBqdXN0IGJlZm9yZSB7QGxpbmsgQ29tcHV0ZVBhc3N9IHdpbGwgYmUgcmVuZGVyZWRcbiAgICovXG4gIG9uQmVmb3JlUmVuZGVyKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogQ29tcHV0ZVBhc3Mge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5fb25CZWZvcmVSZW5kZXJDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsYmFjayB0byBydW4gd2hlbiB0aGUge0BsaW5rIENvbXB1dGVQYXNzfSBpcyByZW5kZXJlZFxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBydW4gd2hlbiB7QGxpbmsgQ29tcHV0ZVBhc3N9IGlzIHJlbmRlcmVkXG4gICAqL1xuICBvblJlbmRlcihjYWxsYmFjazogKCkgPT4gdm9pZCk6IENvbXB1dGVQYXNzIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uUmVuZGVyQ2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgdG8gcnVuIGFmdGVyIHRoZSB7QGxpbmsgQ29tcHV0ZVBhc3N9IGhhcyBiZWVuIHJlbmRlcmVkXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biBqdXN0IGFmdGVyIHtAbGluayBDb21wdXRlUGFzc30gaGFzIGJlZW4gcmVuZGVyZWRcbiAgICovXG4gIG9uQWZ0ZXJSZW5kZXIoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBDb21wdXRlUGFzcyB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9vbkFmdGVyUmVuZGVyQ2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgdXNlZCB0byBydW4gYSBjdXN0b20gcmVuZGVyIGZ1bmN0aW9uIGluc3RlYWQgb2YgdGhlIGRlZmF1bHQgb25lLlxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBZb3VyIGN1c3RvbSByZW5kZXIgZnVuY3Rpb24gd2hlcmUgeW91IHdpbGwgaGF2ZSB0byBzZXQgYWxsIHRoZSB7QGxpbmsgY29yZS9iaW5kR3JvdXBzL0JpbmRHcm91cC5CaW5kR3JvdXAgfCBiaW5kIGdyb3Vwc30gYW5kIGRpc3BhdGNoIHRoZSB3b3JrZ3JvdXBzIGJ5IHlvdXJzZWxmLlxuICAgKi9cbiAgdXNlQ3VzdG9tUmVuZGVyKGNhbGxiYWNrOiAocGFzczogR1BVQ29tcHV0ZVBhc3NFbmNvZGVyKSA9PiB2b2lkKTogQ29tcHV0ZVBhc3Mge1xuICAgIHRoaXMubWF0ZXJpYWwudXNlQ3VzdG9tUmVuZGVyKGNhbGxiYWNrKVxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGJhY2sgdG8gcnVuIGFmdGVyIHRoZSB7QGxpbmsgY29yZS9yZW5kZXJlcnMvR1BVUmVuZGVyZXIuR1BVUmVuZGVyZXIgfCByZW5kZXJlcn0gaGFzIGJlZW4gcmVzaXplZFxuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBydW4ganVzdCBhZnRlciB7QGxpbmsgY29yZS9yZW5kZXJlcnMvR1BVUmVuZGVyZXIuR1BVUmVuZGVyZXIgfCByZW5kZXJlcn0gaGFzIGJlZW4gcmVzaXplZFxuICAgKi9cbiAgb25BZnRlclJlc2l6ZShjYWxsYmFjazogKCkgPT4gdm9pZCk6IENvbXB1dGVQYXNzIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uQWZ0ZXJSZXNpemVDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYmVmb3JlIHJlbmRlcmluZyB0aGUgQ29tcHV0ZVBhc3NcbiAgICogQ2hlY2tzIGlmIHRoZSBtYXRlcmlhbCBpcyByZWFkeSBhbmQgZXZlbnR1YWxseSB1cGRhdGUgaXRzIHN0cnVjdFxuICAgKi9cbiAgb25CZWZvcmVSZW5kZXJQYXNzKCkge1xuICAgIGlmICghdGhpcy5yZW5kZXJlci5yZWFkeSkgcmV0dXJuXG5cbiAgICBpZiAodGhpcy5tYXRlcmlhbCAmJiB0aGlzLm1hdGVyaWFsLnJlYWR5ICYmICF0aGlzLnJlYWR5KSB7XG4gICAgICB0aGlzLnJlYWR5ID0gdHJ1ZVxuICAgIH1cblxuICAgIHRoaXMuX29uQmVmb3JlUmVuZGVyQ2FsbGJhY2sgJiYgdGhpcy5fb25CZWZvcmVSZW5kZXJDYWxsYmFjaygpXG5cbiAgICB0aGlzLm1hdGVyaWFsLm9uQmVmb3JlUmVuZGVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgb3VyIHtAbGluayBDb21wdXRlTWF0ZXJpYWx9XG4gICAqIEBwYXJhbSBwYXNzIC0gY3VycmVudCBjb21wdXRlIHBhc3MgZW5jb2RlclxuICAgKi9cbiAgb25SZW5kZXJQYXNzKHBhc3M6IEdQVUNvbXB1dGVQYXNzRW5jb2Rlcikge1xuICAgIGlmICghdGhpcy5tYXRlcmlhbC5yZWFkeSkgcmV0dXJuXG5cbiAgICB0aGlzLl9vblJlbmRlckNhbGxiYWNrICYmIHRoaXMuX29uUmVuZGVyQ2FsbGJhY2soKVxuXG4gICAgdGhpcy5tYXRlcmlhbC5yZW5kZXIocGFzcylcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYWZ0ZXIgaGF2aW5nIHJlbmRlcmVkIHRoZSBDb21wdXRlUGFzc1xuICAgKi9cbiAgb25BZnRlclJlbmRlclBhc3MoKSB7XG4gICAgdGhpcy5fb25BZnRlclJlbmRlckNhbGxiYWNrICYmIHRoaXMuX29uQWZ0ZXJSZW5kZXJDYWxsYmFjaygpXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIG91ciBjb21wdXRlIHBhc3NcbiAgICogQmFzaWNhbGx5IGp1c3QgY2hlY2sgaWYgb3VyIHtAbGluayBjb3JlL3JlbmRlcmVycy9HUFVSZW5kZXJlci5HUFVSZW5kZXJlciB8IHJlbmRlcmVyfSBpcyByZWFkeSwgYW5kIHRoZW4gcmVuZGVyIG91ciB7QGxpbmsgQ29tcHV0ZU1hdGVyaWFsfVxuICAgKiBAcGFyYW0gcGFzc1xuICAgKi9cbiAgcmVuZGVyKHBhc3M6IEdQVUNvbXB1dGVQYXNzRW5jb2Rlcikge1xuICAgIHRoaXMub25CZWZvcmVSZW5kZXJQYXNzKClcblxuICAgIC8vIG5vIHBvaW50IHRvIHJlbmRlciBpZiB0aGUgV2ViR1BVIGRldmljZSBpcyBub3QgcmVhZHlcbiAgICBpZiAoIXRoaXMucmVuZGVyZXIucmVhZHkpIHJldHVyblxuXG4gICAgIXRoaXMucmVuZGVyZXIucHJvZHVjdGlvbiAmJiBwYXNzLnB1c2hEZWJ1Z0dyb3VwKHRoaXMub3B0aW9ucy5sYWJlbClcblxuICAgIHRoaXMub25SZW5kZXJQYXNzKHBhc3MpXG5cbiAgICAhdGhpcy5yZW5kZXJlci5wcm9kdWN0aW9uICYmIHBhc3MucG9wRGVidWdHcm91cCgpXG5cbiAgICB0aGlzLm9uQWZ0ZXJSZW5kZXJQYXNzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDb3B5IHRoZSByZXN1bHQgb2Ygb3VyIHJlYWQvd3JpdGUgR1BVQnVmZmVyIGludG8gb3VyIHJlc3VsdCBiaW5kaW5nIGFycmF5XG4gICAqIEBwYXJhbSBjb21tYW5kRW5jb2RlciAtIGN1cnJlbnQgR1BVIGNvbW1hbmQgZW5jb2RlclxuICAgKi9cbiAgY29weUJ1ZmZlclRvUmVzdWx0KGNvbW1hbmRFbmNvZGVyOiBHUFVDb21tYW5kRW5jb2Rlcikge1xuICAgIHRoaXMubWF0ZXJpYWw/LmNvcHlCdWZmZXJUb1Jlc3VsdChjb21tYW5kRW5jb2RlcilcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHtAbGluayBjb3JlL2JpbmRpbmdzL1dyaXRhYmxlQnVmZmVyQmluZGluZy5Xcml0YWJsZUJ1ZmZlckJpbmRpbmcjcmVzdWx0QnVmZmVyIHwgcmVzdWx0IEdQVSBidWZmZXJ9IGNvbnRlbnQgYnkge0BsaW5rIGNvcmUvYmluZGluZ3MvV3JpdGFibGVCdWZmZXJCaW5kaW5nLldyaXRhYmxlQnVmZmVyQmluZGluZyB8IGJpbmRpbmd9IGFuZCB7QGxpbmsgY29yZS9iaW5kaW5ncy9idWZmZXJFbGVtZW50cy9CdWZmZXJFbGVtZW50LkJ1ZmZlckVsZW1lbnQgfCBidWZmZXIgZWxlbWVudH0gbmFtZXNcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSBwYXJhbWV0ZXJzIHVzZWQgdG8gZ2V0IHRoZSByZXN1bHRcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMuYmluZGluZ05hbWUgLSB7QGxpbmsgY29yZS9iaW5kaW5ncy9Xcml0YWJsZUJ1ZmZlckJpbmRpbmcuV3JpdGFibGVCdWZmZXJCaW5kaW5nI25hbWUgfCBiaW5kaW5nIG5hbWV9IGZyb20gd2hpY2ggdG8gZ2V0IHRoZSByZXN1bHRcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMuYnVmZmVyRWxlbWVudE5hbWUgLSBvcHRpb25hbCB7QGxpbmsgY29yZS9iaW5kaW5ncy9idWZmZXJFbGVtZW50cy9CdWZmZXJFbGVtZW50LkJ1ZmZlckVsZW1lbnQgfCBidWZmZXIgZWxlbWVudH0gKGkuZS4gc3RydWN0IG1lbWJlcikgbmFtZSBpZiB0aGUgcmVzdWx0IG5lZWRzIHRvIGJlIHJlc3RyYWluZWQgdG8gb25seSBvbmUgZWxlbWVudFxuICAgKiBAYXN5bmNcbiAgICogQHJldHVybnMgLSB0aGUgbWFwcGVkIGNvbnRlbnQgb2YgdGhlIHtAbGluayBHUFVCdWZmZXJ9IGFzIGEge0BsaW5rIEZsb2F0MzJBcnJheX1cbiAgICovXG4gIGFzeW5jIGdldENvbXB1dGVSZXN1bHQoe1xuICAgIGJpbmRpbmdOYW1lLFxuICAgIGJ1ZmZlckVsZW1lbnROYW1lLFxuICB9OiB7XG4gICAgYmluZGluZ05hbWU/OiBzdHJpbmdcbiAgICBidWZmZXJFbGVtZW50TmFtZT86IHN0cmluZ1xuICB9KTogUHJvbWlzZTxGbG9hdDMyQXJyYXk+IHtcbiAgICByZXR1cm4gYXdhaXQgdGhpcy5tYXRlcmlhbD8uZ2V0Q29tcHV0ZVJlc3VsdCh7IGJpbmRpbmdOYW1lLCBidWZmZXJFbGVtZW50TmFtZSB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgQ29tcHV0ZVBhc3MgZnJvbSB0aGUgc2NlbmUgYW5kIGRlc3Ryb3kgaXRcbiAgICovXG4gIHJlbW92ZSgpIHtcbiAgICB0aGlzLnJlbW92ZUZyb21TY2VuZSgpXG4gICAgdGhpcy5kZXN0cm95KClcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IHRoZSBDb21wdXRlUGFzc1xuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLm1hdGVyaWFsPy5kZXN0cm95KClcbiAgfVxufVxuIiwiaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4vVmVjMydcbmltcG9ydCB7IE1hdDQgfSBmcm9tICcuL01hdDQnXG5cbi8vIGRlY2xhcmUgb3VyIGNvcm5lcnMgb25jZSBzaG91bGQgYmUgZW5vdWdoXG5jb25zdCBwb2ludHM6IFZlYzNbXSA9IFtuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpLCBuZXcgVmVjMygpXVxuXG4vKipcbiAqIFVzZWQgdG8gaGFuZGxlIGJvdW5kaW5nIGJveGVzIGluIDNEIHNwYWNlLlxuICogQmFzaWNhbGx5IG1hZGUgb2YgdHdvIG1pbiBhbmQgbWF4IHtAbGluayBWZWMzIHwgdmVjdG9yc30gdGhhdCByZXByZXNlbnRzIHRoZSBlZGdlcyBvZiB0aGUgM0QgYm91bmRpbmcgYm94LlxuICovXG5leHBvcnQgY2xhc3MgQm94MyB7XG4gIC8qKiBNaW4ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IG9mIHRoZSB7QGxpbmsgQm94M30gKi9cbiAgbWluOiBWZWMzXG4gIC8qKiBNYXgge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IG9mIHRoZSB7QGxpbmsgQm94M30gKi9cbiAgbWF4OiBWZWMzXG5cbiAgLyoqXG4gICAqIEJveDMgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIG1pbiAtIG1pbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gb2YgdGhlIHtAbGluayBCb3gzfVxuICAgKiBAcGFyYW0gbWF4IC0gbWF4IHtAbGluayBWZWMzIHwgdmVjdG9yfSBvZiB0aGUge0BsaW5rIEJveDN9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihtaW46IFZlYzMgPSBuZXcgVmVjMyhJbmZpbml0eSksIG1heDogVmVjMyA9IG5ldyBWZWMzKC1JbmZpbml0eSkpIHtcbiAgICB0aGlzLm1pbiA9IG1pblxuICAgIHRoaXMubWF4ID0gbWF4XG4gIH1cblxuICAvKipcbiAgICogU2V0IGEge0BsaW5rIEJveDN9IGZyb20gdHdvIG1pbiBhbmQgbWF4IHtAbGluayBWZWMzIHwgdmVjdG9yc31cbiAgICogQHBhcmFtIG1pbiAtIG1pbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gb2YgdGhlIHtAbGluayBCb3gzfVxuICAgKiBAcGFyYW0gbWF4IC0gbWF4IHtAbGluayBWZWMzIHwgdmVjdG9yfSBvZiB0aGUge0BsaW5rIEJveDN9XG4gICAqL1xuICBzZXQobWluOiBWZWMzID0gbmV3IFZlYzMoSW5maW5pdHkpLCBtYXg6IFZlYzMgPSBuZXcgVmVjMygtSW5maW5pdHkpKTogQm94MyB7XG4gICAgdGhpcy5taW4uY29weShtaW4pXG4gICAgdGhpcy5tYXguY29weShtYXgpXG5cbiAgICByZXR1cm4gdGhpc1xuICB9XG5cbiAgLyoqXG4gICAqIENsb25lIHRoaXMge0BsaW5rIEJveDN9XG4gICAqIEByZXR1cm5zIC0gY2xvbmVkIHtAbGluayBCb3gzfVxuICAgKi9cbiAgY2xvbmUoKTogQm94MyB7XG4gICAgcmV0dXJuIG5ldyBCb3gzKCkuc2V0KHRoaXMubWluLCB0aGlzLm1heClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHtAbGluayBCb3gzfSBjZW50ZXJcbiAgICogQHJldHVybnMgLSB7QGxpbmsgVmVjMyB8IGNlbnRlciB2ZWN0b3J9IG9mIHRoZSB7QGxpbmsgQm94M31cbiAgICovXG4gIGdldENlbnRlcigpOiBWZWMzIHtcbiAgICByZXR1cm4gdGhpcy5tYXguY2xvbmUoKS5hZGQodGhpcy5taW4pLm11bHRpcGx5U2NhbGFyKDAuNSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHtAbGluayBCb3gzfSBzaXplXG4gICAqIEByZXR1cm5zIC0ge0BsaW5rIFZlYzMgfCBzaXplIHZlY3Rvcn0gb2YgdGhlIHtAbGluayBCb3gzfVxuICAgKi9cbiAgZ2V0U2l6ZSgpOiBWZWMzIHtcbiAgICByZXR1cm4gdGhpcy5tYXguY2xvbmUoKS5zdWIodGhpcy5taW4pXG4gIH1cblxuICAvKipcbiAgICogQXBwbHkgYSB7QGxpbmsgTWF0NCB8IG1hdHJpeH0gdG8gYSB7QGxpbmsgQm94M31cbiAgICogVXNlZnVsIHRvIGFwcGx5IGEgdHJhbnNmb3JtYXRpb24ge0BsaW5rIE1hdDQgfCBtYXRyaXh9IHRvIGEge0BsaW5rIEJveDN9XG4gICAqIEBwYXJhbSBtYXRyaXggLSB7QGxpbmsgTWF0NCB8IG1hdHJpeH0gdG8gdXNlXG4gICAqIEByZXR1cm5zIC0gdGhpcyB7QGxpbmsgQm94M30gYWZ0ZXIge0BsaW5rIE1hdDQgfCBtYXRyaXh9IGFwcGxpY2F0aW9uXG4gICAqL1xuICBhcHBseU1hdDQobWF0cml4OiBNYXQ0ID0gbmV3IE1hdDQoKSk6IEJveDMge1xuICAgIGNvbnN0IGNvcm5lcnM6IFZlYzNbXSA9IFtdXG5cbiAgICAvLyByZW1lbWJlciB3ZSdyZSBlc3NlbnRpYWxseSBkZWFsaW5nIHdpdGggcGxhbmUgZ2VvbWV0cmllc1xuICAgIC8vIHNvIGlmIG1pbiBaIGFuZCBtYXggWiBhcmUgZXF1YWxzLCBpdCdzIGFjdHVhbGx5IGEgcGxhbmUgZ2VvbWV0cnlcbiAgICAvLyBqdXN0IGFwcGx5IHRoZSBtYXRyaXggdG8gaXRzIGZvdXIgY29ybmVyc1xuICAgIGlmICh0aGlzLm1pbi56ID09PSB0aGlzLm1heC56KSB7XG4gICAgICBjb3JuZXJzWzBdID0gcG9pbnRzWzBdLnNldCh0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56KS5hcHBseU1hdDQobWF0cml4KVxuICAgICAgY29ybmVyc1sxXSA9IHBvaW50c1syXS5zZXQodGhpcy5taW4ueCwgdGhpcy5tYXgueSwgdGhpcy5taW4ueikuYXBwbHlNYXQ0KG1hdHJpeClcbiAgICAgIGNvcm5lcnNbMl0gPSBwb2ludHNbNF0uc2V0KHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWluLnopLmFwcGx5TWF0NChtYXRyaXgpXG4gICAgICBjb3JuZXJzWzNdID0gcG9pbnRzWzZdLnNldCh0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56KS5hcHBseU1hdDQobWF0cml4KVxuICAgIH0gZWxzZSB7XG4gICAgICBjb3JuZXJzWzBdID0gcG9pbnRzWzBdLnNldCh0aGlzLm1pbi54LCB0aGlzLm1pbi55LCB0aGlzLm1pbi56KS5hcHBseU1hdDQobWF0cml4KVxuICAgICAgY29ybmVyc1sxXSA9IHBvaW50c1sxXS5zZXQodGhpcy5taW4ueCwgdGhpcy5taW4ueSwgdGhpcy5tYXgueikuYXBwbHlNYXQ0KG1hdHJpeClcbiAgICAgIGNvcm5lcnNbMl0gPSBwb2ludHNbMl0uc2V0KHRoaXMubWluLngsIHRoaXMubWF4LnksIHRoaXMubWluLnopLmFwcGx5TWF0NChtYXRyaXgpXG4gICAgICBjb3JuZXJzWzNdID0gcG9pbnRzWzNdLnNldCh0aGlzLm1pbi54LCB0aGlzLm1heC55LCB0aGlzLm1heC56KS5hcHBseU1hdDQobWF0cml4KVxuICAgICAgY29ybmVyc1s0XSA9IHBvaW50c1s0XS5zZXQodGhpcy5tYXgueCwgdGhpcy5taW4ueSwgdGhpcy5taW4ueikuYXBwbHlNYXQ0KG1hdHJpeClcbiAgICAgIGNvcm5lcnNbNV0gPSBwb2ludHNbNV0uc2V0KHRoaXMubWF4LngsIHRoaXMubWluLnksIHRoaXMubWF4LnopLmFwcGx5TWF0NChtYXRyaXgpXG4gICAgICBjb3JuZXJzWzZdID0gcG9pbnRzWzZdLnNldCh0aGlzLm1heC54LCB0aGlzLm1heC55LCB0aGlzLm1pbi56KS5hcHBseU1hdDQobWF0cml4KVxuICAgICAgY29ybmVyc1s3XSA9IHBvaW50c1s3XS5zZXQodGhpcy5tYXgueCwgdGhpcy5tYXgueSwgdGhpcy5tYXgueikuYXBwbHlNYXQ0KG1hdHJpeClcbiAgICB9XG5cbiAgICBjb25zdCB0cmFuc0Zvcm1lZEJveCA9IG5ldyBCb3gzKClcblxuICAgIGZvciAobGV0IGkgPSAwLCBjb3JuZXJzQ291bnQgPSBjb3JuZXJzLmxlbmd0aDsgaSA8IGNvcm5lcnNDb3VudDsgaSsrKSB7XG4gICAgICB0cmFuc0Zvcm1lZEJveC5taW4ubWluKGNvcm5lcnNbaV0pXG4gICAgICB0cmFuc0Zvcm1lZEJveC5tYXgubWF4KGNvcm5lcnNbaV0pXG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zRm9ybWVkQm94XG4gIH1cbn1cbiIsImltcG9ydCB7IEJveDMgfSBmcm9tICcuLi8uLi9tYXRoL0JveDMnXG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXQ0J1xuaW1wb3J0IHsgRE9NRWxlbWVudEJvdW5kaW5nUmVjdCwgUmVjdENvb3JkcyB9IGZyb20gJy4vRE9NRWxlbWVudCdcblxuLyoqXG4gKiBBbiBvYmplY3QgZGVmaW5pbmcgYWxsIHBvc3NpYmxlIHtAbGluayBET01GcnVzdHVtfSBjbGFzcyBpbnN0YW5jaW5nIHBhcmFtZXRlcnNcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBET01GcnVzdHVtUGFyYW1zIHtcbiAgLyoqIG91ciAzRCBPYmplY3QgYm91bmRpbmcgYm94LCBpLmUuIHNpemUgaW4gd29ybGQgc3BhY2UgYmVmb3JlIGFueSB0cmFuc2Zvcm0uIFVzdWFsbHkgZGVmaW5lZCBieSBhIHtAbGluayBjb3JlL2dlb21ldHJpZXMvR2VvbWV0cnkuR2VvbWV0cnkgfCBHZW9tZXRyeX0gKi9cbiAgYm91bmRpbmdCb3g/OiBCb3gzXG4gIC8qKiB7QGxpbmsgY29yZS9vYmplY3RzM0QvUHJvamVjdGVkT2JqZWN0M0QuUHJvamVjdGVkT2JqZWN0M0QjbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCB8IG1vZGVsIHZpZXcgcHJvamVjdGlvbiBtYXRyaXh9IHRvIHVzZSBmb3IgZnJ1c3R1bSBjYWxjdWxhdGlvbnMgKi9cbiAgbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeD86IE1hdDRcbiAgLyoqIHRoZSB7QGxpbmsgRE9NRWxlbWVudEJvdW5kaW5nUmVjdCB8IGJvdW5kaW5nIHJlY3RhbmdsZX0gdG8gY2hlY2sgYWdhaW5zdCAqL1xuICBjb250YWluZXJCb3VuZGluZ1JlY3Q/OiBET01FbGVtZW50Qm91bmRpbmdSZWN0XG4gIC8qKiBhZGRpdGlvbmFsIG1hcmdpbnMgdG8gYWRkIHRvIHtAbGluayBjb250YWluZXJCb3VuZGluZ1JlY3R9ICovXG4gIERPTUZydXN0dW1NYXJnaW5zPzogUmVjdENvb3Jkc1xuICAvKiogY2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIHtAbGluayBET01GcnVzdHVtI3Byb2plY3RlZEJvdW5kaW5nUmVjdCB8IHByb2plY3RlZEJvdW5kaW5nUmVjdH0gcmVlbnRlcnMgdGhlIHZpZXcgZnJ1c3R1bSAqL1xuICBvblJlRW50ZXJWaWV3PzogKCkgPT4gdm9pZFxuICAvKiogY2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIHtAbGluayBET01GcnVzdHVtI3Byb2plY3RlZEJvdW5kaW5nUmVjdCB8IHByb2plY3RlZEJvdW5kaW5nUmVjdH0gbGVhdmVzIHRoZSB2aWV3IGZydXN0dW0gKi9cbiAgb25MZWF2ZVZpZXc/OiAoKSA9PiB2b2lkXG59XG5cbi8qKiBAY29uc3RhbnQge1JlY3RDb29yZHN9IC0gZGVmYXVsdCB7QGxpbmsgRE9NRnJ1c3R1bSNET01GcnVzdHVtTWFyZ2lucyB8IERPTUZydXN0dW1NYXJnaW5zfSAqL1xuY29uc3QgZGVmYXVsdERPTUZydXN0dW1NYXJnaW5zOiBSZWN0Q29vcmRzID0ge1xuICB0b3A6IDAsXG4gIHJpZ2h0OiAwLFxuICBib3R0b206IDAsXG4gIGxlZnQ6IDAsXG59XG5cbi8qKlxuICogVXNlZCB0byBjaGVjayBpZiBhIHtAbGluayBjb3JlL29iamVjdHMzRC9Qcm9qZWN0ZWRPYmplY3QzRC5Qcm9qZWN0ZWRPYmplY3QzRCB8IFByb2plY3RlZE9iamVjdDNEfSBpcyBjdXJyZW50bHkgY29udGFpbmVkIGluc2lkZSBhIERPTSBib3VuZGluZyByZWN0YW5nbGUuXG4gKlxuICogVXNlcyBhIHtAbGluayBjb3JlL29iamVjdHMzRC9Qcm9qZWN0ZWRPYmplY3QzRC5Qcm9qZWN0ZWRPYmplY3QzRCNtb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4IHwgbW9kZWwgdmlldyBwcm9qZWN0aW9uIG1hdHJpeH0gdGhhdCBjb250YWlucyBib3RoIHVzZWZ1bCB7QGxpbmsgY29yZS9vYmplY3RzM0QvUHJvamVjdGVkT2JqZWN0M0QuUHJvamVjdGVkT2JqZWN0M0QjdHJhbnNmb3JtcyB8IE9iamVjdDNEIHRyYW5zZm9ybXN9IGFuZCB7QGxpbmsgY29yZS9jYW1lcmEvQ2FtZXJhLkNhbWVyYSB8IENhbWVyYX0gcHJvamVjdGlvbiBpbmZvcm1hdGlvbi5cbiAqIFRoZSBET00gYm91bmRpbmcgcmVjdGFuZ2xlIHRvIGNoZWNrIGFnYWluc3QgdXN1YWxseSBpcyB0aGUge0BsaW5rIGNvcmUvcmVuZGVyZXJzL0dQVVJlbmRlcmVyLkdQVVJlbmRlcmVyIHwgcmVuZGVyZXJ9J3Mge0BsaW5rIGNvcmUvRE9NL0RPTUVsZW1lbnQuRE9NRWxlbWVudCB8IERPTUVsZW1lbnR9IGJvdW5kaW5nIHJlY3RhbmdsZSwgdW5sZXNzIGZydXN0dW0gbWFyZ2lucyBhcmUgc3BlY2lmaWVkLlxuICovXG5leHBvcnQgY2xhc3MgRE9NRnJ1c3R1bSB7XG4gIC8qKiBPdXIgM0QgT2JqZWN0IGJvdW5kaW5nIGJveCwgaS5lLiBzaXplIGluIHdvcmxkIHNwYWNlIGJlZm9yZSBhbnkgdHJhbnNmb3JtLiBVc3VhbGx5IGRlZmluZWQgYnkgYSB7QGxpbmsgY29yZS9nZW9tZXRyaWVzL0dlb21ldHJ5Lkdlb21ldHJ5IHwgR2VvbWV0cnl9ICovXG4gIGJvdW5kaW5nQm94OiBCb3gzXG4gIC8qKiBBIG1vZGVsIHZpZXcgcHJvamVjdGlvbiBtYXRyaXggZGVmaW5pbmcgdHJhbnNmb3JtYXRpb25zLCB1c3VhbGx5IGZyb20gYSB7QGxpbmsgY29yZS9vYmplY3RzM0QvUHJvamVjdGVkT2JqZWN0M0QuUHJvamVjdGVkT2JqZWN0M0QgfCBQcm9qZWN0ZWRPYmplY3QzRH0sIHRvIHVzZSBmb3IgZnJ1c3R1bSBjYWxjdWxhdGlvbnMgKi9cbiAgbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeDogTWF0NFxuXG4gIC8qKiBUaGUgRE9NIGJvdW5kaW5nIHJlY3RhbmdsZSB0byBjaGVjayBhZ2FpbnN0LCB1c3VhbGx5IHRoZSByZW5kZXJlciBET00gRWxlbWVudCBib3VuZGluZyByZWN0YW5nbGUgKi9cbiAgY29udGFpbmVyQm91bmRpbmdSZWN0OiBET01FbGVtZW50Qm91bmRpbmdSZWN0XG4gIC8qKiBBZGRpdGlvbmFsIG1hcmdpbnMgdG8gYWRkIHRvIHtAbGluayBjb250YWluZXJCb3VuZGluZ1JlY3R9ICovXG4gIERPTUZydXN0dW1NYXJnaW5zOiBSZWN0Q29vcmRzXG4gIC8qKiBBIERPTSBFbGVtZW50IGJvdW5kaW5nIHJlY3RhbmdsZSByZXByZXNlbnRpbmcgdGhlIHJlc3VsdCBvZiBvdXIge0BsaW5rIGJvdW5kaW5nQm94fSB3aXRoIHRoZSB7QGxpbmsgbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeH0gYXBwbGllZCAqL1xuICBwcm9qZWN0ZWRCb3VuZGluZ1JlY3Q6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3RcblxuICAvKiogQ2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIHtAbGluayBwcm9qZWN0ZWRCb3VuZGluZ1JlY3R9IHJlZW50ZXJzIHRoZSB2aWV3IGZydXN0dW0gKi9cbiAgb25SZUVudGVyVmlldzogKCkgPT4gdm9pZFxuICAvKiogQ2FsbGJhY2sgdG8gcnVuIHdoZW4gdGhlIHtAbGluayBwcm9qZWN0ZWRCb3VuZGluZ1JlY3R9IGxlYXZlcyB0aGUgdmlldyBmcnVzdHVtICovXG4gIG9uTGVhdmVWaWV3OiAoKSA9PiB2b2lkXG5cbiAgLyoqIEZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB0aGUgZ2l2ZW4ge0BsaW5rIHByb2plY3RlZEJvdW5kaW5nUmVjdH0gaXMgaW50ZXJzZWN0aW5nIG91ciB2aWV3IGZydXN0dW0gKi9cbiAgaXNJbnRlcnNlY3Rpbmc6IGJvb2xlYW5cbiAgLyoqIEZsYWcgdG8gaW5kaWNhdGUgd2hldGhlciB3ZSBzaG91bGQgdXBkYXRlIG91ciB7QGxpbmsgcHJvamVjdGVkQm91bmRpbmdSZWN0fSAqL1xuICBzaG91bGRVcGRhdGU6IGJvb2xlYW5cblxuICAvKipcbiAgICogRE9NRnJ1c3R1bSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0ge0RPTUZydXN0dW1QYXJhbXN9IHBhcmFtZXRlcnMgLSB7QGxpbmsgRE9NRnJ1c3R1bVBhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIG91ciB7QGxpbmsgRE9NRnJ1c3R1bX1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBib3VuZGluZ0JveCA9IG5ldyBCb3gzKCksXG4gICAgbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCA9IG5ldyBNYXQ0KCksXG4gICAgY29udGFpbmVyQm91bmRpbmdSZWN0ID0ge1xuICAgICAgdG9wOiAwLFxuICAgICAgcmlnaHQ6IDAsXG4gICAgICBib3R0b206IDAsXG4gICAgICBsZWZ0OiAwLFxuICAgICAgd2lkdGg6IDAsXG4gICAgICBoZWlnaHQ6IDAsXG4gICAgICB4OiAwLFxuICAgICAgeTogMCxcbiAgICB9LFxuICAgIERPTUZydXN0dW1NYXJnaW5zID0gZGVmYXVsdERPTUZydXN0dW1NYXJnaW5zLFxuICAgIG9uUmVFbnRlclZpZXcgPSAoKSA9PiB7XG4gICAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFja3MgKi9cbiAgICB9LFxuICAgIG9uTGVhdmVWaWV3ID0gKCkgPT4ge1xuICAgICAgLyogYWxsb3cgZW1wdHkgY2FsbGJhY2tzICovXG4gICAgfSxcbiAgfTogRE9NRnJ1c3R1bVBhcmFtcykge1xuICAgIHRoaXMuYm91bmRpbmdCb3ggPSBib3VuZGluZ0JveFxuICAgIHRoaXMubW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCA9IG1vZGVsVmlld1Byb2plY3Rpb25NYXRyaXhcbiAgICB0aGlzLmNvbnRhaW5lckJvdW5kaW5nUmVjdCA9IGNvbnRhaW5lckJvdW5kaW5nUmVjdFxuICAgIHRoaXMuRE9NRnJ1c3R1bU1hcmdpbnMgPSB7IC4uLmRlZmF1bHRET01GcnVzdHVtTWFyZ2lucywgLi4uRE9NRnJ1c3R1bU1hcmdpbnMgfVxuXG4gICAgdGhpcy5wcm9qZWN0ZWRCb3VuZGluZ1JlY3QgPSB7XG4gICAgICB0b3A6IDAsXG4gICAgICByaWdodDogMCxcbiAgICAgIGJvdHRvbTogMCxcbiAgICAgIGxlZnQ6IDAsXG4gICAgICB3aWR0aDogMCxcbiAgICAgIGhlaWdodDogMCxcbiAgICAgIHg6IDAsXG4gICAgICB5OiAwLFxuICAgIH1cblxuICAgIHRoaXMub25SZUVudGVyVmlldyA9IG9uUmVFbnRlclZpZXdcbiAgICB0aGlzLm9uTGVhdmVWaWV3ID0gb25MZWF2ZVZpZXdcblxuICAgIHRoaXMuaXNJbnRlcnNlY3RpbmcgPSBmYWxzZVxuICAgIHRoaXMuc2hvdWxkVXBkYXRlID0gZmFsc2VcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHtAbGluayBjb250YWluZXJCb3VuZGluZ1JlY3R9IChjYWxsZWQgb24gcmVzaXplKVxuICAgKiBAcGFyYW0gYm91bmRpbmdSZWN0IC0gbmV3IGJvdW5kaW5nIHJlY3RhbmdsZVxuICAgKi9cbiAgc2V0Q29udGFpbmVyQm91bmRpbmdSZWN0KGJvdW5kaW5nUmVjdDogRE9NRWxlbWVudEJvdW5kaW5nUmVjdCkge1xuICAgIHRoaXMuY29udGFpbmVyQm91bmRpbmdSZWN0ID0gYm91bmRpbmdSZWN0XG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciBET00gZnJ1c3R1bSBib3VuZGluZyByZWN0YW5nbGUsIGkuZS4gb3VyIHtAbGluayBjb250YWluZXJCb3VuZGluZ1JlY3R9IHdpdGggdGhlIHtAbGluayBET01GcnVzdHVtTWFyZ2luc30gYXBwbGllZFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBET01GcnVzdHVtQm91bmRpbmdSZWN0KCk6IFJlY3RDb29yZHMge1xuICAgIHJldHVybiB7XG4gICAgICB0b3A6IHRoaXMucHJvamVjdGVkQm91bmRpbmdSZWN0LnRvcCAtIHRoaXMuRE9NRnJ1c3R1bU1hcmdpbnMudG9wLFxuICAgICAgcmlnaHQ6IHRoaXMucHJvamVjdGVkQm91bmRpbmdSZWN0LnJpZ2h0ICsgdGhpcy5ET01GcnVzdHVtTWFyZ2lucy5yaWdodCxcbiAgICAgIGJvdHRvbTogdGhpcy5wcm9qZWN0ZWRCb3VuZGluZ1JlY3QuYm90dG9tICsgdGhpcy5ET01GcnVzdHVtTWFyZ2lucy5ib3R0b20sXG4gICAgICBsZWZ0OiB0aGlzLnByb2plY3RlZEJvdW5kaW5nUmVjdC5sZWZ0IC0gdGhpcy5ET01GcnVzdHVtTWFyZ2lucy5sZWZ0LFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcHBsaWVzIGFsbCB7QGxpbmsgbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeH0gdHJhbnNmb3JtYXRpb25zIHRvIG91ciB7QGxpbmsgYm91bmRpbmdCb3h9IGFuZCB0aGVuIGNoZWNrIGFnYWluc3QgaW50ZXJzZWN0aW9uc1xuICAgKi9cbiAgY29tcHV0ZVByb2plY3RlZFRvRG9jdW1lbnRDb29yZHMoKSB7XG4gICAgY29uc3QgcHJvamVjdGVkQm94ID0gdGhpcy5ib3VuZGluZ0JveC5hcHBseU1hdDQodGhpcy5tb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4KVxuXG4gICAgLy8gbm9ybWFsaXplIFstMSwgMV0gY29vcmRzIHRvIFswLCAxXVxuICAgIHByb2plY3RlZEJveC5taW4ueCA9IChwcm9qZWN0ZWRCb3gubWluLnggKyAxKSAqIDAuNVxuICAgIHByb2plY3RlZEJveC5tYXgueCA9IChwcm9qZWN0ZWRCb3gubWF4LnggKyAxKSAqIDAuNVxuXG4gICAgcHJvamVjdGVkQm94Lm1pbi55ID0gMSAtIChwcm9qZWN0ZWRCb3gubWluLnkgKyAxKSAqIDAuNVxuICAgIHByb2plY3RlZEJveC5tYXgueSA9IDEgLSAocHJvamVjdGVkQm94Lm1heC55ICsgMSkgKiAwLjVcblxuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCwgdG9wLCBsZWZ0IH0gPSB0aGlzLmNvbnRhaW5lckJvdW5kaW5nUmVjdFxuXG4gICAgdGhpcy5wcm9qZWN0ZWRCb3VuZGluZ1JlY3QgPSB7XG4gICAgICBsZWZ0OiBwcm9qZWN0ZWRCb3gubWluLnggKiB3aWR0aCArIGxlZnQsXG4gICAgICB4OiBwcm9qZWN0ZWRCb3gubWluLnggKiB3aWR0aCArIGxlZnQsXG4gICAgICB0b3A6IHByb2plY3RlZEJveC5tYXgueSAqIGhlaWdodCArIHRvcCxcbiAgICAgIHk6IHByb2plY3RlZEJveC5tYXgueSAqIGhlaWdodCArIHRvcCxcbiAgICAgIHJpZ2h0OiBwcm9qZWN0ZWRCb3gubWF4LnggKiB3aWR0aCArIGxlZnQsXG4gICAgICBib3R0b206IHByb2plY3RlZEJveC5taW4ueSAqIGhlaWdodCArIHRvcCxcbiAgICAgIHdpZHRoOiBwcm9qZWN0ZWRCb3gubWF4LnggKiB3aWR0aCArIGxlZnQgLSAocHJvamVjdGVkQm94Lm1pbi54ICogd2lkdGggKyBsZWZ0KSxcbiAgICAgIGhlaWdodDogcHJvamVjdGVkQm94Lm1pbi55ICogaGVpZ2h0ICsgdG9wIC0gKHByb2plY3RlZEJveC5tYXgueSAqIGhlaWdodCArIHRvcCksXG4gICAgfVxuXG4gICAgdGhpcy5pbnRlcnNlY3RzQ29udGFpbmVyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIG91ciB7QGxpbmsgcHJvamVjdGVkQm91bmRpbmdSZWN0fSBpbnRlcnNlY3RzIHdpdGggb3VyIHtAbGluayBET01GcnVzdHVtQm91bmRpbmdSZWN0fVxuICAgKi9cbiAgaW50ZXJzZWN0c0NvbnRhaW5lcigpIHtcbiAgICBpZiAoXG4gICAgICBNYXRoLnJvdW5kKHRoaXMuRE9NRnJ1c3R1bUJvdW5kaW5nUmVjdC5yaWdodCkgPD0gdGhpcy5jb250YWluZXJCb3VuZGluZ1JlY3QubGVmdCB8fFxuICAgICAgTWF0aC5yb3VuZCh0aGlzLkRPTUZydXN0dW1Cb3VuZGluZ1JlY3QubGVmdCkgPj1cbiAgICAgICAgdGhpcy5jb250YWluZXJCb3VuZGluZ1JlY3QubGVmdCArIHRoaXMuY29udGFpbmVyQm91bmRpbmdSZWN0LndpZHRoIHx8XG4gICAgICBNYXRoLnJvdW5kKHRoaXMuRE9NRnJ1c3R1bUJvdW5kaW5nUmVjdC5ib3R0b20pIDw9IHRoaXMuY29udGFpbmVyQm91bmRpbmdSZWN0LnRvcCB8fFxuICAgICAgTWF0aC5yb3VuZCh0aGlzLkRPTUZydXN0dW1Cb3VuZGluZ1JlY3QudG9wKSA+PSB0aGlzLmNvbnRhaW5lckJvdW5kaW5nUmVjdC50b3AgKyB0aGlzLmNvbnRhaW5lckJvdW5kaW5nUmVjdC5oZWlnaHRcbiAgICApIHtcbiAgICAgIGlmICh0aGlzLmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIHRoaXMub25MZWF2ZVZpZXcoKVxuICAgICAgfVxuXG4gICAgICB0aGlzLmlzSW50ZXJzZWN0aW5nID0gZmFsc2VcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCF0aGlzLmlzSW50ZXJzZWN0aW5nKSB7XG4gICAgICAgIHRoaXMub25SZUVudGVyVmlldygpXG4gICAgICB9XG5cbiAgICAgIHRoaXMuaXNJbnRlcnNlY3RpbmcgPSB0cnVlXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBCb3gzIH0gZnJvbSAnLi4vLi4vbWF0aC9Cb3gzJ1xuaW1wb3J0IHsgdGhyb3dFcnJvciwgdGhyb3dXYXJuaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnXG5pbXBvcnQge1xuICBHZW9tZXRyeU9wdGlvbnMsXG4gIEdlb21ldHJ5UGFyYW1zLFxuICBWZXJ0ZXhCdWZmZXIsXG4gIFZlcnRleEJ1ZmZlckF0dHJpYnV0ZSxcbiAgVmVydGV4QnVmZmVyQXR0cmlidXRlUGFyYW1zLFxuICBWZXJ0ZXhCdWZmZXJQYXJhbXNcbn0gZnJvbSAnLi4vLi4vdHlwZXMvR2VvbWV0cmllcydcblxuLyoqXG4gKiBVc2VkIHRvIGNyZWF0ZSBhIHtAbGluayBHZW9tZXRyeX0gZnJvbSBnaXZlbiBwYXJhbWV0ZXJzIGxpa2UgaW5zdGFuY2VzIGNvdW50IG9yIGdlb21ldHJ5IGF0dHJpYnV0ZXMgKHZlcnRpY2VzLCB1dnMsIG5vcm1hbHMpLjxicj5cbiAqIEhvbGRzIGFsbCBhdHRyaWJ1dGVzIGFycmF5cywgYm91bmRpbmcgYm94IGFuZCBjcmVhdGUgYXMgV0dTTCBjb2RlIHNuaXBwZXQgZm9yIHRoZSB2ZXJ0ZXggc2hhZGVyIGlucHV0IGF0dHJpYnV0ZXMuXG4gKlxuICogRHVyaW5nIHRoZSB7QGxpbmsgR2VvbWV0cnkjcmVuZGVyIHwgcmVuZGVyfSwgdGhlIHtAbGluayBHZW9tZXRyeX0gaXMgcmVzcG9uc2libGUgZm9yIHNldHRpbmcgdGhlIHtAbGluayBHZW9tZXRyeSN2ZXJ0ZXhCdWZmZXJzIHwgdmVydGV4QnVmZmVyc30gYW5kIGRyYXdpbmcgdGhlIHZlcnRpY2VzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xuICogICAvLyBmaXJzdCB0cmlhbmdsZVxuICogICAgMSwgIDEsICAwLFxuICogICAgMSwgLTEsICAwLFxuICogICAtMSwgLTEsICAwLFxuICpcbiAqICAgLy8gc2Vjb25kIHRyaWFuZ2xlXG4gKiAgICAxLCAgMSwgIDAsXG4gKiAgIC0xLCAtMSwgIDAsXG4gKiAgIC0xLCAgMSwgIDBcbiAqIF0pXG4gKlxuICogLy8gY3JlYXRlIGEgcXVhZCBnZW9tZXRyeSBtYWRlIG9mIDIgdHJpYW5nbGVzXG4gKiBjb25zdCBnZW9tZXRyeSA9IG5ldyBHZW9tZXRyeSgpXG4gKlxuICogZ2VvbWV0cnkuc2V0QXR0cmlidXRlKHtcbiAqICAgbmFtZTogJ3Bvc2l0aW9uJyxcbiAqICAgdHlwZTogJ3ZlYzNmJyxcbiAqICAgYnVmZmVyRm9ybWF0OiAnZmxvYXQzMngzJyxcbiAqICAgc2l6ZTogMyxcbiAqICAgYnVmZmVyTGVuZ3RoOiB2ZXJ0aWNlcy5sZW5ndGgsXG4gKiAgIGFycmF5OiB2ZXJ0aWNlcyxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEdlb21ldHJ5IHtcbiAgLyoqIE51bWJlciBvZiB2ZXJ0aWNlcyBkZWZpbmVkIGJ5IHRoaXMgZ2VvbWV0cnkgKi9cbiAgdmVydGljZXNDb3VudDogbnVtYmVyXG4gIC8qKiBWZXJ0aWNlcyBvcmRlciB0byBiZSBkcmF3biBieSB0aGUge0BsaW5rIGNvcmUvcGlwZWxpbmVzL1JlbmRlclBpcGVsaW5lRW50cnkuUmVuZGVyUGlwZWxpbmVFbnRyeSB8IHJlbmRlciBwaXBlbGluZX0gKi9cbiAgdmVydGljZXNPcmRlcjogR1BVRnJvbnRGYWNlXG4gIC8qKiB7QGxpbmsgaHR0cHM6Ly93d3cudzMub3JnL1RSL3dlYmdwdS8jZW51bWRlZi1ncHVwcmltaXRpdmV0b3BvbG9neSB8IFRvcG9sb2d5fSB0byB1c2Ugd2l0aCB0aGlzIHtAbGluayBHZW9tZXRyeX0sIGkuZS4gd2hldGhlciB0byBkcmF3IHRyaWFuZ2xlcyBvciBwb2ludHMgKi9cbiAgdG9wb2xvZ3k6IEdQVVByaW1pdGl2ZVRvcG9sb2d5XG4gIC8qKiBOdW1iZXIgb2YgaW5zdGFuY2VzIG9mIHRoaXMgZ2VvbWV0cnkgdG8gZHJhdyAqL1xuICBpbnN0YW5jZXNDb3VudDogbnVtYmVyXG4gIC8qKiBBcnJheSBvZiB7QGxpbmsgVmVydGV4QnVmZmVyIHwgdmVydGV4IGJ1ZmZlcnN9IHRvIHVzZSB3aXRoIHRoaXMgZ2VvbWV0cnkgKi9cbiAgdmVydGV4QnVmZmVyczogVmVydGV4QnVmZmVyW11cbiAgLyoqIE9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhpcyBnZW9tZXRyeSAqL1xuICBvcHRpb25zOiBHZW9tZXRyeU9wdGlvbnNcbiAgLyoqIFRoZSB0eXBlIG9mIHRoZSBnZW9tZXRyeSAqL1xuICB0eXBlOiBzdHJpbmdcblxuICAvKiogVGhlIGJvdW5kaW5nIGJveCBvZiB0aGUgZ2VvbWV0cnksIGkuZS4gdHdvIHtAbGluayBtYXRoL1ZlYzMuVmVjMyB8IFZlYzN9IGRlZmluaW5nIHRoZSBtaW4gYW5kIG1heCBwb3NpdGlvbnMgdG8gd3JhcCB0aGlzIGdlb21ldHJ5IGluIGEgY3ViZSAqL1xuICBib3VuZGluZ0JveDogQm94M1xuXG4gIC8qKiBBIHN0cmluZyB0byBhcHBlbmQgdG8gb3VyIHNoYWRlcnMgY29kZSBkZXNjcmliaW5nIHRoZSBXR1NMIHN0cnVjdHVyZSByZXByZXNlbnRpbmcgdGhpcyBnZW9tZXRyeSBhdHRyaWJ1dGVzICovXG4gIHdnc2xTdHJ1Y3RGcmFnbWVudDogc3RyaW5nXG5cbiAgLyoqXG4gICAqIEdlb21ldHJ5IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIEdlb21ldHJ5UGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgb3VyIEdlb21ldHJ5XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7XG4gICAgdmVydGljZXNPcmRlciA9ICdjY3cnLFxuICAgIHRvcG9sb2d5ID0gJ3RyaWFuZ2xlLWxpc3QnLFxuICAgIGluc3RhbmNlc0NvdW50ID0gMSxcbiAgICB2ZXJ0ZXhCdWZmZXJzID0gW10sXG4gIH06IEdlb21ldHJ5UGFyYW1zID0ge30pIHtcbiAgICB0aGlzLnZlcnRpY2VzQ291bnQgPSAwXG4gICAgdGhpcy52ZXJ0aWNlc09yZGVyID0gdmVydGljZXNPcmRlclxuICAgIHRoaXMudG9wb2xvZ3kgPSB0b3BvbG9neVxuICAgIHRoaXMuaW5zdGFuY2VzQ291bnQgPSBpbnN0YW5jZXNDb3VudFxuXG4gICAgdGhpcy5ib3VuZGluZ0JveCA9IG5ldyBCb3gzKClcblxuICAgIHRoaXMudHlwZSA9ICdHZW9tZXRyeSdcblxuICAgIHRoaXMudmVydGV4QnVmZmVycyA9IFtdXG5cbiAgICAvLyBzaG91bGQgY29udGFpbiBvdXIgdmVydGV4IHBvc2l0aW9uIC8gdXYgZGF0YSBhdCBsZWFzdFxuICAgIHRoaXMuYWRkVmVydGV4QnVmZmVyKHtcbiAgICAgIG5hbWU6ICdhdHRyaWJ1dGVzJyxcbiAgICB9KVxuXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgdmVydGljZXNPcmRlcixcbiAgICAgIGluc3RhbmNlc0NvdW50LFxuICAgICAgdmVydGV4QnVmZmVycyxcbiAgICAgIHRvcG9sb2d5LFxuICAgIH1cblxuICAgIHZlcnRleEJ1ZmZlcnMuZm9yRWFjaCgodmVydGV4QnVmZmVyKSA9PiB7XG4gICAgICB0aGlzLmFkZFZlcnRleEJ1ZmZlcih7XG4gICAgICAgIHN0ZXBNb2RlOiB2ZXJ0ZXhCdWZmZXIuc3RlcE1vZGUgPz8gJ3ZlcnRleCcsXG4gICAgICAgIG5hbWU6IHZlcnRleEJ1ZmZlci5uYW1lLFxuICAgICAgICBhdHRyaWJ1dGVzOiB2ZXJ0ZXhCdWZmZXIuYXR0cmlidXRlcyxcbiAgICAgIH0pXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGlzIEdlb21ldHJ5IGlzIHJlYWR5IHRvIGNvbXB1dGUsIGkuZS4gaWYgaXRzIGZpcnN0IHZlcnRleCBidWZmZXIgYXJyYXkgaGFzIG5vdCBiZWVuIGNyZWF0ZWQgeWV0XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHNob3VsZENvbXB1dGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMudmVydGV4QnVmZmVycy5sZW5ndGggJiYgIXRoaXMudmVydGV4QnVmZmVyc1swXS5hcnJheVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB3aGV0aGVyIHRoaXMgZ2VvbWV0cnkgaXMgcmVhZHkgdG8gZHJhdywgaS5lLiBpdCBoYXMgYmVlbiBjb21wdXRlZCBhbmQgYWxsIGl0cyB2ZXJ0ZXggYnVmZmVycyBoYXZlIGJlZW4gY3JlYXRlZFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCByZWFkeSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gIXRoaXMuc2hvdWxkQ29tcHV0ZSAmJiAhdGhpcy52ZXJ0ZXhCdWZmZXJzLmZpbmQoKHZlcnRleEJ1ZmZlcikgPT4gIXZlcnRleEJ1ZmZlci5idWZmZXIpXG4gIH1cblxuICAvKipcbiAgICogQWRkIGEgdmVydGV4IGJ1ZmZlciB0byBvdXIgR2VvbWV0cnksIHNldCBpdHMgYXR0cmlidXRlcyBhbmQgcmV0dXJuIGl0XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0gdmVydGV4IGJ1ZmZlciB7QGxpbmsgVmVydGV4QnVmZmVyUGFyYW1zIHwgcGFyYW1ldGVyc31cbiAgICogQHJldHVybnMgLSBuZXdseSBjcmVhdGVkIHtAbGluayBWZXJ0ZXhCdWZmZXIgfCB2ZXJ0ZXggYnVmZmVyfVxuICAgKi9cbiAgYWRkVmVydGV4QnVmZmVyKHsgc3RlcE1vZGUgPSAndmVydGV4JywgbmFtZSwgYXR0cmlidXRlcyA9IFtdIH06IFZlcnRleEJ1ZmZlclBhcmFtcyA9IHt9KTogVmVydGV4QnVmZmVyIHtcbiAgICBjb25zdCB2ZXJ0ZXhCdWZmZXIgPSB7XG4gICAgICBuYW1lOiBuYW1lID8/ICdhdHRyaWJ1dGVzJyArIHRoaXMudmVydGV4QnVmZmVycy5sZW5ndGgsXG4gICAgICBzdGVwTW9kZSxcbiAgICAgIGFycmF5U3RyaWRlOiAwLFxuICAgICAgYnVmZmVyTGVuZ3RoOiAwLFxuICAgICAgYXR0cmlidXRlczogW10sXG4gICAgICBidWZmZXI6IG51bGwsXG4gICAgfVxuXG4gICAgLy8gc2V0IGF0dHJpYnV0ZXMgcmlnaHQgYXdheSBpZiBwb3NzaWJsZVxuICAgIGF0dHJpYnV0ZXM/LmZvckVhY2goKGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoe1xuICAgICAgICB2ZXJ0ZXhCdWZmZXIsXG4gICAgICAgIC4uLmF0dHJpYnV0ZSxcbiAgICAgIH0gYXMgVmVydGV4QnVmZmVyQXR0cmlidXRlUGFyYW1zKVxuICAgIH0pXG5cbiAgICB0aGlzLnZlcnRleEJ1ZmZlcnMucHVzaCh2ZXJ0ZXhCdWZmZXIpXG5cbiAgICByZXR1cm4gdmVydGV4QnVmZmVyXG4gIH1cblxuICAvKipcbiAgICogR2V0IGEgdmVydGV4IGJ1ZmZlciBieSBuYW1lXG4gICAqIEBwYXJhbSBuYW1lIC0gb3VyIHZlcnRleCBidWZmZXIgbmFtZVxuICAgKiBAcmV0dXJucyAtIGZvdW5kIHtAbGluayBWZXJ0ZXhCdWZmZXIgfCB2ZXJ0ZXggYnVmZmVyfSBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgKi9cbiAgZ2V0VmVydGV4QnVmZmVyQnlOYW1lKG5hbWUgPSAnJyk6IFZlcnRleEJ1ZmZlciB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnZlcnRleEJ1ZmZlcnMuZmluZCgodmVydGV4QnVmZmVyKSA9PiB2ZXJ0ZXhCdWZmZXIubmFtZSA9PT0gbmFtZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYSB2ZXJ0ZXggYnVmZmVyIGF0dHJpYnV0ZVxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIGF0dHJpYnV0ZXMge0BsaW5rIFZlcnRleEJ1ZmZlckF0dHJpYnV0ZVBhcmFtcyB8IHBhcmFtZXRlcnN9XG4gICAqL1xuICBzZXRBdHRyaWJ1dGUoe1xuICAgIHZlcnRleEJ1ZmZlciA9IHRoaXMudmVydGV4QnVmZmVyc1swXSxcbiAgICBuYW1lLFxuICAgIHR5cGUgPSAndmVjM2YnLFxuICAgIGJ1ZmZlckZvcm1hdCA9ICdmbG9hdDMyeDMnLFxuICAgIHNpemUgPSAzLFxuICAgIGFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSh0aGlzLnZlcnRpY2VzQ291bnQgKiBzaXplKSxcbiAgICB2ZXJ0aWNlc1N0cmlkZSA9IDEsXG4gIH06IFZlcnRleEJ1ZmZlckF0dHJpYnV0ZVBhcmFtcykge1xuICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSB2ZXJ0ZXhCdWZmZXIuYXR0cmlidXRlc1xuICAgIGNvbnN0IGF0dHJpYnV0ZXNMZW5ndGggPSBhdHRyaWJ1dGVzLmxlbmd0aFxuXG4gICAgaWYgKCFuYW1lKSBuYW1lID0gJ2dlb21ldHJ5QXR0cmlidXRlJyArIGF0dHJpYnV0ZXNMZW5ndGhcblxuICAgIGlmIChuYW1lID09PSAncG9zaXRpb24nICYmICh0eXBlICE9PSAndmVjM2YnIHx8IGJ1ZmZlckZvcm1hdCAhPT0gJ2Zsb2F0MzJ4MycgfHwgc2l6ZSAhPT0gMykpIHtcbiAgICAgIHRocm93V2FybmluZyhcbiAgICAgICAgYEdlb21ldHJ5ICdwb3NpdGlvbicgYXR0cmlidXRlIG11c3QgaGF2ZSB0aGlzIGV4YWN0IHByb3BlcnRpZXMgc2V0OlxcblxcdHR5cGU6ICd2ZWMzZicsXFxuXFx0YnVmZmVyRm9ybWF0OiAnZmxvYXQzMngzJyxcXG5cXHRzaXplOiAzYFxuICAgICAgKVxuICAgICAgdHlwZSA9ICd2ZWMzZidcbiAgICAgIGJ1ZmZlckZvcm1hdCA9ICdmbG9hdDMyeDMnXG4gICAgICBzaXplID0gM1xuICAgIH1cblxuICAgIGNvbnN0IGF0dHJpYnV0ZUNvdW50ID0gYXJyYXkubGVuZ3RoIC8gc2l6ZVxuXG4gICAgaWYgKG5hbWUgPT09ICdwb3NpdGlvbicpIHtcbiAgICAgIHRoaXMudmVydGljZXNDb3VudCA9IGF0dHJpYnV0ZUNvdW50XG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgdmVydGV4QnVmZmVyLnN0ZXBNb2RlID09PSAndmVydGV4JyAmJlxuICAgICAgdGhpcy52ZXJ0aWNlc0NvdW50ICYmXG4gICAgICB0aGlzLnZlcnRpY2VzQ291bnQgIT09IGF0dHJpYnV0ZUNvdW50ICogdmVydGljZXNTdHJpZGVcbiAgICApIHtcbiAgICAgIHRocm93RXJyb3IoXG4gICAgICAgIGBHZW9tZXRyeSB2ZXJ0ZXggYXR0cmlidXRlIGVycm9yLiBBdHRyaWJ1dGUgYXJyYXkgb2Ygc2l6ZSAke3NpemV9IG11c3QgYmUgb2YgbGVuZ3RoOiAke1xuICAgICAgICAgIHRoaXMudmVydGljZXNDb3VudCAqIHNpemVcbiAgICAgICAgfSwgY3VycmVudCBnaXZlbjogJHthcnJheS5sZW5ndGh9LiAoJHt0aGlzLnZlcnRpY2VzQ291bnR9IHZlcnRpY2VzKS5gXG4gICAgICApXG4gICAgfSBlbHNlIGlmICh2ZXJ0ZXhCdWZmZXIuc3RlcE1vZGUgPT09ICdpbnN0YW5jZScgJiYgYXR0cmlidXRlQ291bnQgIT09IHRoaXMuaW5zdGFuY2VzQ291bnQpIHtcbiAgICAgIHRocm93RXJyb3IoXG4gICAgICAgIGBHZW9tZXRyeSBpbnN0YW5jZSBhdHRyaWJ1dGUgZXJyb3IuIEF0dHJpYnV0ZSBhcnJheSBvZiBzaXplICR7c2l6ZX0gbXVzdCBiZSBvZiBsZW5ndGg6ICR7XG4gICAgICAgICAgdGhpcy5pbnN0YW5jZXNDb3VudCAqIHNpemVcbiAgICAgICAgfSwgY3VycmVudCBnaXZlbjogJHthcnJheS5sZW5ndGh9LiAoJHt0aGlzLmluc3RhbmNlc0NvdW50fSBpbnN0YW5jZXMpLmBcbiAgICAgIClcbiAgICB9XG5cbiAgICBjb25zdCBhdHRyaWJ1dGUgPSB7XG4gICAgICBuYW1lLFxuICAgICAgdHlwZSxcbiAgICAgIGJ1ZmZlckZvcm1hdCxcbiAgICAgIHNpemUsXG4gICAgICBidWZmZXJMZW5ndGg6IGFycmF5Lmxlbmd0aCxcbiAgICAgIG9mZnNldDogYXR0cmlidXRlc0xlbmd0aFxuICAgICAgICA/IGF0dHJpYnV0ZXMucmVkdWNlKChhY2N1bXVsYXRvcjogbnVtYmVyLCBjdXJyZW50VmFsdWUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBhY2N1bXVsYXRvciArIGN1cnJlbnRWYWx1ZS5idWZmZXJMZW5ndGhcbiAgICAgICAgICB9LCAwKVxuICAgICAgICA6IDAsXG4gICAgICBidWZmZXJPZmZzZXQ6IGF0dHJpYnV0ZXNMZW5ndGhcbiAgICAgICAgPyBhdHRyaWJ1dGVzW2F0dHJpYnV0ZXNMZW5ndGggLSAxXS5idWZmZXJPZmZzZXQgKyBhdHRyaWJ1dGVzW2F0dHJpYnV0ZXNMZW5ndGggLSAxXS5zaXplICogNFxuICAgICAgICA6IDAsXG4gICAgICBhcnJheSxcbiAgICAgIHZlcnRpY2VzU3RyaWRlOiB2ZXJ0aWNlc1N0cmlkZSxcbiAgICB9XG5cbiAgICB2ZXJ0ZXhCdWZmZXIuYnVmZmVyTGVuZ3RoICs9IGF0dHJpYnV0ZS5idWZmZXJMZW5ndGggKiB2ZXJ0aWNlc1N0cmlkZVxuICAgIHZlcnRleEJ1ZmZlci5hcnJheVN0cmlkZSArPSBhdHRyaWJ1dGUuc2l6ZVxuICAgIHZlcnRleEJ1ZmZlci5hdHRyaWJ1dGVzLnB1c2goYXR0cmlidXRlKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbiBhdHRyaWJ1dGUgYnkgbmFtZVxuICAgKiBAcGFyYW0gbmFtZSAtIG5hbWUgb2YgdGhlIGF0dHJpYnV0ZSB0byBmaW5kXG4gICAqIEByZXR1cm5zIC0gZm91bmQge0BsaW5rIFZlcnRleEJ1ZmZlckF0dHJpYnV0ZSB8IGF0dHJpYnV0ZX0gb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICovXG4gIGdldEF0dHJpYnV0ZUJ5TmFtZShuYW1lOiBzdHJpbmcpOiBWZXJ0ZXhCdWZmZXJBdHRyaWJ1dGUgfCBudWxsIHtcbiAgICBsZXQgYXR0cmlidXRlXG4gICAgdGhpcy52ZXJ0ZXhCdWZmZXJzLmZvckVhY2goKHZlcnRleEJ1ZmZlcikgPT4ge1xuICAgICAgYXR0cmlidXRlID0gdmVydGV4QnVmZmVyLmF0dHJpYnV0ZXMuZmluZCgoYXR0cmlidXRlKSA9PiBhdHRyaWJ1dGUubmFtZSA9PT0gbmFtZSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIGF0dHJpYnV0ZVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGUgYSBHZW9tZXRyeSwgd2hpY2ggbWVhbnMgaXRlcmF0ZSB0aHJvdWdoIGFsbCB2ZXJ0ZXggYnVmZmVycyBhbmQgY3JlYXRlIHRoZSBhdHRyaWJ1dGVzIGFycmF5IHRoYXQgd2lsbCBiZSBzZW50IGFzIGJ1ZmZlcnMuXG4gICAqIEFsc28gY29tcHV0ZSB0aGUgR2VvbWV0cnkgYm91bmRpbmcgYm94LlxuICAgKi9cbiAgY29tcHV0ZUdlb21ldHJ5KCkge1xuICAgIGlmICghdGhpcy5zaG91bGRDb21wdXRlKSByZXR1cm5cblxuICAgIHRoaXMudmVydGV4QnVmZmVycy5mb3JFYWNoKCh2ZXJ0ZXhCdWZmZXIsIGluZGV4KSA9PiB7XG4gICAgICBpZiAoaW5kZXggPT09IDApIHtcbiAgICAgICAgY29uc3QgaGFzUG9zaXRpb25BdHRyaWJ1dGUgPSB2ZXJ0ZXhCdWZmZXIuYXR0cmlidXRlcy5maW5kKFxuICAgICAgICAgIChhdHRyaWJ1dGUpID0+IGF0dHJpYnV0ZS5uYW1lID09PSAncG9zaXRpb24nXG4gICAgICAgICkgYXMgVmVydGV4QnVmZmVyQXR0cmlidXRlIHwgbnVsbFxuXG4gICAgICAgIGlmICghaGFzUG9zaXRpb25BdHRyaWJ1dGUpIHtcbiAgICAgICAgICB0aHJvd0Vycm9yKGBHZW9tZXRyeSBtdXN0IGhhdmUgYSAncG9zaXRpb24nIGF0dHJpYnV0ZWApXG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgaGFzUG9zaXRpb25BdHRyaWJ1dGUudHlwZSAhPT0gJ3ZlYzNmJyB8fFxuICAgICAgICAgIGhhc1Bvc2l0aW9uQXR0cmlidXRlLmJ1ZmZlckZvcm1hdCAhPT0gJ2Zsb2F0MzJ4MycgfHxcbiAgICAgICAgICBoYXNQb3NpdGlvbkF0dHJpYnV0ZS5zaXplICE9PSAzXG4gICAgICAgICkge1xuICAgICAgICAgIHRocm93V2FybmluZyhcbiAgICAgICAgICAgIGBHZW9tZXRyeSAncG9zaXRpb24nIGF0dHJpYnV0ZSBtdXN0IGhhdmUgdGhpcyBleGFjdCBwcm9wZXJ0aWVzIHNldDpcXG5cXHR0eXBlOiAndmVjM2YnLFxcblxcdGJ1ZmZlckZvcm1hdDogJ2Zsb2F0MzJ4MycsXFxuXFx0c2l6ZTogM2BcbiAgICAgICAgICApXG4gICAgICAgICAgaGFzUG9zaXRpb25BdHRyaWJ1dGUudHlwZSA9ICd2ZWMzZidcbiAgICAgICAgICBoYXNQb3NpdGlvbkF0dHJpYnV0ZS5idWZmZXJGb3JtYXQgPSAnZmxvYXQzMngzJ1xuICAgICAgICAgIGhhc1Bvc2l0aW9uQXR0cmlidXRlLnNpemUgPSAzXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmVydGV4QnVmZmVyLmFycmF5ID0gbmV3IEZsb2F0MzJBcnJheSh2ZXJ0ZXhCdWZmZXIuYnVmZmVyTGVuZ3RoKVxuXG4gICAgICBsZXQgY3VycmVudEluZGV4ID0gMFxuICAgICAgbGV0IGF0dHJpYnV0ZUluZGV4ID0gMFxuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2ZXJ0ZXhCdWZmZXIuYnVmZmVyTGVuZ3RoOyBpICs9IHZlcnRleEJ1ZmZlci5hcnJheVN0cmlkZSkge1xuICAgICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZlcnRleEJ1ZmZlci5hdHRyaWJ1dGVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgY29uc3QgeyBuYW1lLCBzaXplLCBhcnJheSwgdmVydGljZXNTdHJpZGUgfSA9IHZlcnRleEJ1ZmZlci5hdHRyaWJ1dGVzW2pdXG5cbiAgICAgICAgICBmb3IgKGxldCBzID0gMDsgcyA8IHNpemU7IHMrKykge1xuICAgICAgICAgICAgY29uc3QgYXR0cmlidXRlVmFsdWUgPSBhcnJheVtNYXRoLmZsb29yKGF0dHJpYnV0ZUluZGV4IC8gdmVydGljZXNTdHJpZGUpICogc2l6ZSArIHNdXG4gICAgICAgICAgICB2ZXJ0ZXhCdWZmZXIuYXJyYXlbY3VycmVudEluZGV4XSA9IGF0dHJpYnV0ZVZhbHVlXG5cbiAgICAgICAgICAgIC8vIGNvbXB1dGUgYm91bmRpbmcgYm94XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3Bvc2l0aW9uJykge1xuICAgICAgICAgICAgICBpZiAocyAlIDMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAvLyB4XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRpbmdCb3gubWluLnggPiBhdHRyaWJ1dGVWYWx1ZSkgdGhpcy5ib3VuZGluZ0JveC5taW4ueCA9IGF0dHJpYnV0ZVZhbHVlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRpbmdCb3gubWF4LnggPCBhdHRyaWJ1dGVWYWx1ZSkgdGhpcy5ib3VuZGluZ0JveC5tYXgueCA9IGF0dHJpYnV0ZVZhbHVlXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocyAlIDMgPT09IDEpIHtcbiAgICAgICAgICAgICAgICAvLyB5XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRpbmdCb3gubWluLnkgPiBhdHRyaWJ1dGVWYWx1ZSkgdGhpcy5ib3VuZGluZ0JveC5taW4ueSA9IGF0dHJpYnV0ZVZhbHVlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRpbmdCb3gubWF4LnkgPCBhdHRyaWJ1dGVWYWx1ZSkgdGhpcy5ib3VuZGluZ0JveC5tYXgueSA9IGF0dHJpYnV0ZVZhbHVlXG4gICAgICAgICAgICAgIH0gZWxzZSBpZiAocyAlIDMgPT09IDIpIHtcbiAgICAgICAgICAgICAgICAvLyB6XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRpbmdCb3gubWluLnogPiBhdHRyaWJ1dGVWYWx1ZSkgdGhpcy5ib3VuZGluZ0JveC5taW4ueiA9IGF0dHJpYnV0ZVZhbHVlXG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuYm91bmRpbmdCb3gubWF4LnogPCBhdHRyaWJ1dGVWYWx1ZSkgdGhpcy5ib3VuZGluZ0JveC5tYXgueiA9IGF0dHJpYnV0ZVZhbHVlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY3VycmVudEluZGV4KytcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBhdHRyaWJ1dGVJbmRleCsrXG4gICAgICB9XG4gICAgfSlcblxuICAgIHRoaXMuI3NldFdHU0xGcmFnbWVudCgpXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBXR1NMIGNvZGUgc25pcHBldCB0aGF0IHdpbGwgYmUgYXBwZW5kZWQgdG8gdGhlIHZlcnRleCBzaGFkZXIuXG4gICAqIEBwcml2YXRlXG4gICAqL1xuICAjc2V0V0dTTEZyYWdtZW50KCkge1xuICAgIGxldCBsb2NhdGlvbkluZGV4ID0gLTFcbiAgICB0aGlzLndnc2xTdHJ1Y3RGcmFnbWVudCA9IGBzdHJ1Y3QgQXR0cmlidXRlcyB7XFxuXFx0QGJ1aWx0aW4odmVydGV4X2luZGV4KSB2ZXJ0ZXhJbmRleCA6IHUzMixcXG5cXHRAYnVpbHRpbihpbnN0YW5jZV9pbmRleCkgaW5zdGFuY2VJbmRleCA6IHUzMiwke3RoaXMudmVydGV4QnVmZmVyc1xuICAgICAgLm1hcCgodmVydGV4QnVmZmVyKSA9PiB7XG4gICAgICAgIHJldHVybiB2ZXJ0ZXhCdWZmZXIuYXR0cmlidXRlcy5tYXAoKGF0dHJpYnV0ZSkgPT4ge1xuICAgICAgICAgIGxvY2F0aW9uSW5kZXgrK1xuICAgICAgICAgIHJldHVybiBgXFxuXFx0QGxvY2F0aW9uKCR7bG9jYXRpb25JbmRleH0pICR7YXR0cmlidXRlLm5hbWV9OiAke2F0dHJpYnV0ZS50eXBlfWBcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgICAuam9pbignLCcpfVxcbn07YFxuICB9XG5cbiAgLyoqIFJFTkRFUiAqKi9cblxuICAvKipcbiAgICogU2V0IG91ciByZW5kZXIgcGFzcyBnZW9tZXRyeSB2ZXJ0ZXggYnVmZmVyc1xuICAgKiBAcGFyYW0gcGFzcyAtIGN1cnJlbnQgcmVuZGVyIHBhc3NcbiAgICovXG4gIHNldEdlb21ldHJ5QnVmZmVycyhwYXNzOiBHUFVSZW5kZXJQYXNzRW5jb2Rlcikge1xuICAgIHRoaXMudmVydGV4QnVmZmVycy5mb3JFYWNoKCh2ZXJ0ZXhCdWZmZXIsIGluZGV4KSA9PiB7XG4gICAgICBwYXNzLnNldFZlcnRleEJ1ZmZlcihpbmRleCwgdmVydGV4QnVmZmVyLmJ1ZmZlcilcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIERyYXcgb3VyIGdlb21ldHJ5XG4gICAqIEBwYXJhbSBwYXNzIC0gY3VycmVudCByZW5kZXIgcGFzc1xuICAgKi9cbiAgZHJhd0dlb21ldHJ5KHBhc3M6IEdQVVJlbmRlclBhc3NFbmNvZGVyKSB7XG4gICAgcGFzcy5kcmF3KHRoaXMudmVydGljZXNDb3VudCwgdGhpcy5pbnN0YW5jZXNDb3VudClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHZlcnRleCBidWZmZXJzIHRoZW4gZHJhdyB0aGUgZ2VvbWV0cnlcbiAgICogQHBhcmFtIHBhc3MgLSBjdXJyZW50IHJlbmRlciBwYXNzXG4gICAqL1xuICByZW5kZXIocGFzczogR1BVUmVuZGVyUGFzc0VuY29kZXIpIHtcbiAgICBpZiAoIXRoaXMucmVhZHkpIHJldHVyblxuXG4gICAgdGhpcy5zZXRHZW9tZXRyeUJ1ZmZlcnMocGFzcylcbiAgICB0aGlzLmRyYXdHZW9tZXRyeShwYXNzKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgb3VyIGdlb21ldHJ5IHZlcnRleCBidWZmZXJzXG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMudmVydGV4QnVmZmVycy5mb3JFYWNoKCh2ZXJ0ZXhCdWZmZXIpID0+IHtcbiAgICAgIHZlcnRleEJ1ZmZlci5idWZmZXI/LmRlc3Ryb3koKVxuICAgICAgdmVydGV4QnVmZmVyLmJ1ZmZlciA9IG51bGxcbiAgICB9KVxuICB9XG59XG4iLCJpbXBvcnQgeyBHZW9tZXRyeSB9IGZyb20gJy4vR2VvbWV0cnknXHJcbmltcG9ydCB7IEdlb21ldHJ5UGFyYW1zIH0gZnJvbSAnLi4vLi4vdHlwZXMvR2VvbWV0cmllcydcclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIHRoZSBhdmFpbGFibGUgb3B0aW9ucyB0byBjcmVhdGUgYW4ge0BsaW5rIEluZGV4ZWRHZW9tZXRyeSNpbmRleEJ1ZmZlciB8IGluZGV4IGJ1ZmZlcn1cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgSW5kZXhlZEdlb21ldHJ5SW5kZXhCdWZmZXJPcHRpb25zIHtcclxuICAvKiogaW5kZXggYnVmZmVyIGZvcm1hdCAqL1xyXG4gIGJ1ZmZlckZvcm1hdD86IEdQVUluZGV4Rm9ybWF0XHJcbiAgLyoqIGluZGV4IGJ1ZmZlciBhcnJheSAqL1xyXG4gIGFycmF5PzogVWludDE2QXJyYXkgfCBVaW50MzJBcnJheVxyXG59XHJcblxyXG4vKipcclxuICogRGVmaW5lcyBhbiB7QGxpbmsgSW5kZXhlZEdlb21ldHJ5I2luZGV4QnVmZmVyIHwgaW5kZXggYnVmZmVyfVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBJbmRleEJ1ZmZlciB7XHJcbiAgLyoqIGluZGV4IGJ1ZmZlciBmb3JtYXQgKi9cclxuICBidWZmZXJGb3JtYXQ6IEdQVUluZGV4Rm9ybWF0XHJcbiAgLyoqIGluZGV4IGJ1ZmZlciBhcnJheSAqL1xyXG4gIGFycmF5OiBVaW50MTZBcnJheSB8IFVpbnQzMkFycmF5XHJcbiAgLyoqIGluZGV4IGJ1ZmZlciBsZW5ndGggKi9cclxuICBidWZmZXJMZW5ndGg6IG51bWJlclxyXG4gIC8qKiBpbmRleCBidWZmZXIge0BsaW5rIEdQVUJ1ZmZlcn0gKi9cclxuICBidWZmZXI/OiBHUFVCdWZmZXJcclxufVxyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gY3JlYXRlIGFuIHtAbGluayBJbmRleGVkR2VvbWV0cnl9IHdoaWNoIGhvbGRzIGFuIGluZGV4IGFycmF5IHRvIHVzZSBhcyBhbiBpbmRleCBidWZmZXIuXHJcbiAqXHJcbiAqIFRoZSBpbmRleCBhcnJheSByZXByZXNlbnRzIHRoZSBvcmRlciBpbiB3aGljaCB0aGUgYXR0cmlidXRlcyBzaG91bGQgYmUgcHJvY2Vzc2VkLiBUaGlzIGFsbG93cyB0byBjcmVhdGUgc21hbGxlciB2ZXJ0ZXgsIHV2IGFuZCBub3JtYWwgYXJyYXlzLlxyXG4gKlxyXG4gKiBEdXJpbmcgdGhlIHtAbGluayBJbmRleGVkR2VvbWV0cnkjcmVuZGVyIHwgcmVuZGVyfSwgdGhlIHtAbGluayBJbmRleGVkR2VvbWV0cnl9IGlzIHJlc3BvbnNpYmxlIGZvciBzZXR0aW5nIHRoZSB7QGxpbmsgSW5kZXhlZEdlb21ldHJ5I3ZlcnRleEJ1ZmZlcnMgfCB2ZXJ0ZXhCdWZmZXJzfSBhbmQgZHJhd2luZyB0aGUgaW5kZXhlZCB2ZXJ0aWNlcy5cclxuICpcclxuICogQGV4YW1wbGVcclxuICogYGBgamF2YXNjcmlwdFxyXG4gKiBjb25zdCB2ZXJ0aWNlcyA9IG5ldyBGbG9hdDMyQXJyYXkoW1xyXG4gKiAgIC0xLCAtMSwgIDAsXHJcbiAqICAgIDEsIC0xLCAgMCxcclxuICogICAtMSwgIDEsICAwLFxyXG4gKiAgICAxLCAgMSwgIDBcclxuICogXSlcclxuICpcclxuICogLy8gdmVydGljZXMgaW5kZXggKG9yZGVyIGluIHdoaWNoIHRoZXkgc2hvdWxkIGJlIGRyYXduKVxyXG4gKiBjb25zdCBpbmRleEFycmF5ID0gbmV3IFVpbnQxNkFycmF5KFswLCAyLCAxLCAxLCAyLCAzXSlcclxuICpcclxuICogLy8gY3JlYXRlIGFuIGluZGV4ZWQgcXVhZCBnZW9tZXRyeSBtYWRlIG9mIDQgdmVydGljZXNcclxuICogY29uc3QgaW5kZXhlZEdlb21ldHJ5ID0gbmV3IEluZGV4ZWRHZW9tZXRyeSgpXHJcbiAqXHJcbiAqIGluZGV4ZWRHZW9tZXRyeS5zZXRBdHRyaWJ1dGUoe1xyXG4gKiAgIG5hbWU6ICdwb3NpdGlvbicsXHJcbiAqICAgdHlwZTogJ3ZlYzNmJyxcclxuICogICBidWZmZXJGb3JtYXQ6ICdmbG9hdDMyeDMnLFxyXG4gKiAgIHNpemU6IDMsXHJcbiAqICAgYnVmZmVyTGVuZ3RoOiB2ZXJ0aWNlcy5sZW5ndGgsXHJcbiAqICAgYXJyYXk6IHZlcnRpY2VzLFxyXG4gKiB9KVxyXG4gKlxyXG4gKiBpbmRleGVkR2VvbWV0cnkuc2V0SW5kZXhCdWZmZXIoe1xyXG4gKiAgIGFycmF5OiBpbmRleEFycmF5LFxyXG4gKiAgIGJ1ZmZlckZvcm1hdDogJ3VpbnQxNicsXHJcbiAqIH0pXHJcbiAqIGBgYFxyXG4gKi9cclxuZXhwb3J0IGNsYXNzIEluZGV4ZWRHZW9tZXRyeSBleHRlbmRzIEdlb21ldHJ5IHtcclxuICAvKiogT2JqZWN0IGNvbnRhaW5pbmcgb3VyIGluZGV4IGJ1ZmZlciBmb3JtYXQgJiBsZW5ndGgsIGFycmF5IGFuZCBHUFVCdWZmZXIgKi9cclxuICBpbmRleEJ1ZmZlcjogSW5kZXhCdWZmZXJcclxuXHJcbiAgLyoqXHJcbiAgICogSW5kZXhlZEdlb21ldHJ5IGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgR2VvbWV0cnlQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSBvdXIgSW5kZXhlZEdlb21ldHJ5XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3Ioe1xyXG4gICAgdmVydGljZXNPcmRlciA9ICdjY3cnLFxyXG4gICAgdG9wb2xvZ3kgPSAndHJpYW5nbGUtbGlzdCcsXHJcbiAgICBpbnN0YW5jZXNDb3VudCA9IDEsXHJcbiAgICB2ZXJ0ZXhCdWZmZXJzID0gW10sXHJcbiAgfTogR2VvbWV0cnlQYXJhbXMgPSB7fSkge1xyXG4gICAgc3VwZXIoeyB2ZXJ0aWNlc09yZGVyLCB0b3BvbG9neSwgaW5zdGFuY2VzQ291bnQsIHZlcnRleEJ1ZmZlcnMgfSlcclxuXHJcbiAgICB0aGlzLnR5cGUgPSAnSW5kZXhlZEdlb21ldHJ5J1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHdoZXRoZXIgdGhpcyBnZW9tZXRyeSBpcyByZWFkeSB0byBkcmF3LCBpLmUuIGl0IGhhcyBiZWVuIGNvbXB1dGVkLCBhbGwgaXRzIHZlcnRleCBidWZmZXJzIGhhdmUgYmVlbiBjcmVhdGVkIGFuZCBpdHMgaW5kZXggYnVmZmVyIGhhcyBiZWVuIGNyZWF0ZWQgYXMgd2VsbFxyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIGdldCByZWFkeSgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAoXHJcbiAgICAgICF0aGlzLnNob3VsZENvbXB1dGUgJiZcclxuICAgICAgIXRoaXMudmVydGV4QnVmZmVycy5maW5kKCh2ZXJ0ZXhCdWZmZXIpID0+ICF2ZXJ0ZXhCdWZmZXIuYnVmZmVyKSAmJlxyXG4gICAgICB0aGlzLmluZGV4QnVmZmVyICYmXHJcbiAgICAgICEhdGhpcy5pbmRleEJ1ZmZlci5idWZmZXJcclxuICAgIClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIElmIHdlIGhhdmUgbGVzcyB0aGFuIDY1LjUzNiB2ZXJ0aWNlcywgd2Ugc2hvdWxkIHVzZSBhIFVpbjE2QXJyYXkgdG8gaG9sZCBvdXIgaW5kZXggYnVmZmVyIHZhbHVlc1xyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIGdldCB1c2VVaW50MTZJbmRleEFycmF5KCk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMudmVydGljZXNDb3VudCA8IDI1NiAqIDI1NlxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IG91ciB7QGxpbmsgaW5kZXhCdWZmZXJ9XHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgSW5kZXhlZEdlb21ldHJ5SW5kZXhCdWZmZXJPcHRpb25zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgb3VyIGluZGV4IGJ1ZmZlclxyXG4gICAqL1xyXG4gIHNldEluZGV4QnVmZmVyKHsgYnVmZmVyRm9ybWF0ID0gJ3VpbnQzMicsIGFycmF5ID0gbmV3IFVpbnQzMkFycmF5KDApIH06IEluZGV4ZWRHZW9tZXRyeUluZGV4QnVmZmVyT3B0aW9ucykge1xyXG4gICAgdGhpcy5pbmRleEJ1ZmZlciA9IHtcclxuICAgICAgYXJyYXksXHJcbiAgICAgIGJ1ZmZlckZvcm1hdCxcclxuICAgICAgYnVmZmVyTGVuZ3RoOiBhcnJheS5sZW5ndGgsXHJcbiAgICAgIGJ1ZmZlcjogbnVsbCxcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKiBSRU5ERVIgKiovXHJcblxyXG4gIC8qKlxyXG4gICAqIEZpcnN0LCBzZXQgb3VyIHJlbmRlciBwYXNzIGdlb21ldHJ5IHZlcnRleCBidWZmZXJzXHJcbiAgICogVGhlbiwgc2V0IG91ciByZW5kZXIgcGFzcyBnZW9tZXRyeSBpbmRleCBidWZmZXJcclxuICAgKiBAcGFyYW0gcGFzcyAtIGN1cnJlbnQgcmVuZGVyIHBhc3NcclxuICAgKi9cclxuICBzZXRHZW9tZXRyeUJ1ZmZlcnMocGFzczogR1BVUmVuZGVyUGFzc0VuY29kZXIpIHtcclxuICAgIHN1cGVyLnNldEdlb21ldHJ5QnVmZmVycyhwYXNzKVxyXG5cclxuICAgIHBhc3Muc2V0SW5kZXhCdWZmZXIodGhpcy5pbmRleEJ1ZmZlci5idWZmZXIsIHRoaXMuaW5kZXhCdWZmZXIuYnVmZmVyRm9ybWF0KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogT3ZlcnJpZGUgdGhlIHBhcmVudE1lc2ggZHJhdyBtZXRob2QgdG8gZHJhdyBpbmRleGVkIGdlb21ldHJ5XHJcbiAgICogQHBhcmFtIHBhc3MgLSBjdXJyZW50IHJlbmRlciBwYXNzXHJcbiAgICovXHJcbiAgZHJhd0dlb21ldHJ5KHBhc3M6IEdQVVJlbmRlclBhc3NFbmNvZGVyKSB7XHJcbiAgICBwYXNzLmRyYXdJbmRleGVkKHRoaXMuaW5kZXhCdWZmZXIuYnVmZmVyTGVuZ3RoLCB0aGlzLmluc3RhbmNlc0NvdW50KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRGVzdHJveSBvdXIgaW5kZXhlZCBnZW9tZXRyeSB2ZXJ0ZXggYnVmZmVycyBhbmQgaW5kZXggYnVmZmVyXHJcbiAgICovXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHN1cGVyLmRlc3Ryb3koKVxyXG5cclxuICAgIHRoaXMuaW5kZXhCdWZmZXI/LmJ1ZmZlcj8uZGVzdHJveSgpXHJcbiAgICB0aGlzLmluZGV4QnVmZmVyLmJ1ZmZlciA9IG51bGxcclxuICB9XHJcbn1cclxuIiwiaW1wb3J0IHsgSW5kZXhlZEdlb21ldHJ5IH0gZnJvbSAnLi9JbmRleGVkR2VvbWV0cnknXG5pbXBvcnQgeyBHZW9tZXRyeSB9IGZyb20gJy4vR2VvbWV0cnknXG5pbXBvcnQgeyBHZW9tZXRyeUJhc2VQYXJhbXMsIFZlcnRleEJ1ZmZlckF0dHJpYnV0ZVBhcmFtcyB9IGZyb20gJy4uLy4uL3R5cGVzL0dlb21ldHJpZXMnXG5cbi8qKlxuICogUGFyYW1ldGVycyB1c2VkIHRvIGNyZWF0ZSBhIHtAbGluayBQbGFuZUdlb21ldHJ5fVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFBsYW5lR2VvbWV0cnlQYXJhbXMgZXh0ZW5kcyBHZW9tZXRyeUJhc2VQYXJhbXMge1xuICAvKiogTnVtYmVyIG9mIHNlZ21lbnRzIGFsb25nIHRoZSBYIGF4aXMgKi9cbiAgd2lkdGhTZWdtZW50cz86IG51bWJlclxuICAvKiogTnVtYmVyIG9mIHNlZ21lbnRzIGFsb25nIHRoZSBZIGF4aXMgKi9cbiAgaGVpZ2h0U2VnbWVudHM/OiBudW1iZXJcbn1cblxuLyoqXG4gKiBVc2VkIHRvIGNyZWF0ZSBhbiBpbmRleGVkIHBsYW5lIGdlb21ldHJ5IGJhc2VkIG9uIHRoZSBudW1iZXIgb2Ygc2VnbWVudHMgYWxvbmcgdGhlIFggYW5kIFkgYXhpcy5cbiAqXG4gKiBUaGlzIGlzIGhvdyBpdCB3aWxsIGxvb2sgZm9yIGEgM3gyIHF1YWQuIEluZGV4aW5nIHdpbGwgdGFrZSBjYXJlIG9mIGRyYXdpbmcgdGhlIHJpZ2h0IHZlcnRpY2VzIGluIHRoZSByaWdodCBvcmRlci5cbiAqXG4gKiA8cHJlPlxuICogIDAtLS0xLS0tMi0tLTNcbiAqICB8ICAvfCAgL3wgIC98XG4gKiAgfC8gIHwvICB8LyAgfFxuICogIDQtLS01LS0tNi0tLTdcbiAqICB8ICAvfCAgL3wgIC98XG4gKiAgfC8gIHwvICB8LyAgfFxuICogIDgtLS05LS0tMTAtLTExXG4gKiA8L3ByZT5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgcGxhbmVHZW9tZXRyeSA9IG5ldyBQbGFuZUdlb21ldHJ5KClcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUGxhbmVHZW9tZXRyeSBleHRlbmRzIEluZGV4ZWRHZW9tZXRyeSB7XG4gIC8qKlxuICAgKiBEZWZpbmVzIG91ciB7QGxpbmsgUGxhbmVHZW9tZXRyeX0gZGVmaW5pdGlvbiBiYXNlZCBvbiB0aGUgcHJvdmlkZWQge0BsaW5rIFBsYW5lR2VvbWV0cnlQYXJhbXMgfCBwYXJhbWV0ZXJzfVxuICAgKi9cbiAgZGVmaW5pdGlvbjoge1xuICAgIC8qKiB1bmlxdWUgaWQgYmFzZWQgb24gd2lkdGggYW5kIGhlaWdodCBzZWdtZW50cywgdXNlZCB0byBnZXQge0BsaW5rIFBsYW5lR2VvbWV0cnl9IGZyb20gY2FjaGUgKi9cbiAgICBpZDogbnVtYmVyXG4gICAgLyoqIG51bWJlciBvZiBzZWdtZW50cyBhbG9uZyB0aGUgWCBheGlzICovXG4gICAgd2lkdGg6IG51bWJlclxuICAgIC8qKiBudW1iZXIgb2Ygc2VnbWVudHMgYWxvbmcgdGhlIFkgYXhpcyAqL1xuICAgIGhlaWdodDogbnVtYmVyXG4gICAgLyoqIHRvdGFsIG51bWJlciBvZiBzZWdtZW50cyAqL1xuICAgIGNvdW50OiBudW1iZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBQbGFuZUdlb21ldHJ5IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIFBsYW5lR2VvbWV0cnlQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSBvdXIgUGxhbmVHZW9tZXRyeVxuICAgKi9cbiAgY29uc3RydWN0b3Ioe1xuICAgIHdpZHRoU2VnbWVudHMgPSAxLFxuICAgIGhlaWdodFNlZ21lbnRzID0gMSxcbiAgICBpbnN0YW5jZXNDb3VudCA9IDEsXG4gICAgdmVydGV4QnVmZmVycyA9IFtdLFxuICAgIHRvcG9sb2d5LFxuICB9OiBQbGFuZUdlb21ldHJ5UGFyYW1zID0ge30pIHtcbiAgICAvLyBwbGFuZSBnZW9tZXRyaWVzIHZlcnRpY2VzIGFyZSBkZWZpbmVkIGluIHRoZSBjbG9ja3dpc2Ugb3JkZXJcbiAgICBzdXBlcih7IHZlcnRpY2VzT3JkZXI6ICdjdycsIHRvcG9sb2d5LCBpbnN0YW5jZXNDb3VudCwgdmVydGV4QnVmZmVycyB9KVxuXG4gICAgdGhpcy50eXBlID0gJ1BsYW5lR2VvbWV0cnknXG5cbiAgICB3aWR0aFNlZ21lbnRzID0gTWF0aC5mbG9vcih3aWR0aFNlZ21lbnRzKVxuICAgIGhlaWdodFNlZ21lbnRzID0gTWF0aC5mbG9vcihoZWlnaHRTZWdtZW50cylcblxuICAgIC8vIHVuaXF1ZSBwbGFuZSBnZW9tZXRyeSBpZCBiYXNlZCBvbiB3aWR0aCBhbmQgaGVpZ2h0XG4gICAgLy8gdXNlZCB0byBnZXQgYSBnZW9tZXRyeSBmcm9tIGNhY2hlXG4gICAgdGhpcy5kZWZpbml0aW9uID0ge1xuICAgICAgaWQ6IHdpZHRoU2VnbWVudHMgKiBoZWlnaHRTZWdtZW50cyArIHdpZHRoU2VnbWVudHMsXG4gICAgICB3aWR0aDogd2lkdGhTZWdtZW50cyxcbiAgICAgIGhlaWdodDogaGVpZ2h0U2VnbWVudHMsXG4gICAgICBjb3VudDogd2lkdGhTZWdtZW50cyAqIGhlaWdodFNlZ21lbnRzLFxuICAgIH1cblxuICAgIGNvbnN0IHZlcnRpY2VzQ291bnQgPSAodGhpcy5kZWZpbml0aW9uLndpZHRoICsgMSkgKiAodGhpcy5kZWZpbml0aW9uLmhlaWdodCArIDEpXG4gICAgY29uc3QgYXR0cmlidXRlcyA9IHRoaXMuZ2V0SW5kZXhlZFZlcnRpY2VzQW5kVVZzKHZlcnRpY2VzQ291bnQpXG5cbiAgICBPYmplY3Qua2V5cyhhdHRyaWJ1dGVzKS5mb3JFYWNoKChhdHRyaWJ1dGVLZXkpID0+IHtcbiAgICAgIHRoaXMuc2V0QXR0cmlidXRlKGF0dHJpYnV0ZXNbYXR0cmlidXRlS2V5XSBhcyBWZXJ0ZXhCdWZmZXJBdHRyaWJ1dGVQYXJhbXMpXG4gICAgfSlcblxuICAgIHRoaXMuc2V0SW5kZXhBcnJheSgpXG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciBQbGFuZUdlb21ldHJ5IGluZGV4IGFycmF5XG4gICAqL1xuICBzZXRJbmRleEFycmF5KCkge1xuICAgIGNvbnN0IGluZGV4QXJyYXkgPSB0aGlzLnVzZVVpbnQxNkluZGV4QXJyYXlcbiAgICAgID8gbmV3IFVpbnQxNkFycmF5KHRoaXMuZGVmaW5pdGlvbi5jb3VudCAqIDYpXG4gICAgICA6IG5ldyBVaW50MzJBcnJheSh0aGlzLmRlZmluaXRpb24uY291bnQgKiA2KVxuXG4gICAgbGV0IGluZGV4ID0gMFxuXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCB0aGlzLmRlZmluaXRpb24uaGVpZ2h0OyB5KyspIHtcbiAgICAgIGZvciAobGV0IHggPSAwOyB4IDwgdGhpcy5kZWZpbml0aW9uLndpZHRoOyB4KyspIHtcbiAgICAgICAgaW5kZXhBcnJheVtpbmRleCsrXSA9IHggKyB5ICogKHRoaXMuZGVmaW5pdGlvbi53aWR0aCArIDEpXG4gICAgICAgIGluZGV4QXJyYXlbaW5kZXgrK10gPSB0aGlzLmRlZmluaXRpb24ud2lkdGggKyB4ICsgMSArIHkgKiAodGhpcy5kZWZpbml0aW9uLndpZHRoICsgMSlcbiAgICAgICAgaW5kZXhBcnJheVtpbmRleCsrXSA9IHggKyAxICsgeSAqICh0aGlzLmRlZmluaXRpb24ud2lkdGggKyAxKVxuXG4gICAgICAgIGluZGV4QXJyYXlbaW5kZXgrK10gPSB4ICsgMSArIHkgKiAodGhpcy5kZWZpbml0aW9uLndpZHRoICsgMSlcbiAgICAgICAgaW5kZXhBcnJheVtpbmRleCsrXSA9IHRoaXMuZGVmaW5pdGlvbi53aWR0aCArIHggKyAxICsgeSAqICh0aGlzLmRlZmluaXRpb24ud2lkdGggKyAxKVxuICAgICAgICBpbmRleEFycmF5W2luZGV4KytdID0gdGhpcy5kZWZpbml0aW9uLndpZHRoICsgeCArIDIgKyB5ICogKHRoaXMuZGVmaW5pdGlvbi53aWR0aCArIDEpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRJbmRleEJ1ZmZlcih7XG4gICAgICBhcnJheTogaW5kZXhBcnJheSxcbiAgICAgIGJ1ZmZlckZvcm1hdDogdGhpcy51c2VVaW50MTZJbmRleEFycmF5ID8gJ3VpbnQxNicgOiAndWludDMyJyxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENvbXB1dGUgdGhlIFVWIGFuZCBwb3NpdGlvbiBhcnJheXMgYmFzZWQgb24gb3VyIHBsYW5lIHdpZHRoU2VnbWVudHMgYW5kIGhlaWdodFNlZ21lbnRzIHZhbHVlcyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZXNcbiAgICogQHBhcmFtIHZlcnRpY2VzQ291bnQgLSB7QGxpbmsgR2VvbWV0cnkjdmVydGljZXNDb3VudCB8IG51bWJlciBvZiB2ZXJ0aWNlc30gb2Ygb3VyIHtAbGluayBQbGFuZUdlb21ldHJ5fVxuICAgKiBAcmV0dXJucyAtIG91ciBwb3NpdGlvbiBhbmQgdXYge0BsaW5rIFZlcnRleEJ1ZmZlckF0dHJpYnV0ZVBhcmFtcyB8IGF0dHJpYnV0ZXN9XG4gICAqL1xuICBnZXRJbmRleGVkVmVydGljZXNBbmRVVnModmVydGljZXNDb3VudDogR2VvbWV0cnlbJ3ZlcnRpY2VzQ291bnQnXSk6IFJlY29yZDxzdHJpbmcsIFZlcnRleEJ1ZmZlckF0dHJpYnV0ZVBhcmFtcz4ge1xuICAgIC8vIGdlb21ldHJ5IHZlcnRpY2VzIGFuZCBVVnNcbiAgICBjb25zdCB1diA9IHtcbiAgICAgIG5hbWU6ICd1dicsXG4gICAgICB0eXBlOiAndmVjMmYnLFxuICAgICAgYnVmZmVyRm9ybWF0OiAnZmxvYXQzMngyJyxcbiAgICAgIHNpemU6IDIsXG4gICAgICBhcnJheTogbmV3IEZsb2F0MzJBcnJheSh2ZXJ0aWNlc0NvdW50ICogMiksXG4gICAgfVxuXG4gICAgY29uc3QgcG9zaXRpb24gPSB7XG4gICAgICBuYW1lOiAncG9zaXRpb24nLFxuICAgICAgdHlwZTogJ3ZlYzNmJyxcbiAgICAgIGJ1ZmZlckZvcm1hdDogJ2Zsb2F0MzJ4MycsXG4gICAgICAvLyBuYiBvZiB0cmlhbmdsZXMgKiAzIHZlcnRpY2VzIHBlciB0cmlhbmdsZSAqIDMgY29vcmRpbmF0ZXMgcGVyIHRyaWFuZ2xlXG4gICAgICBzaXplOiAzLFxuICAgICAgYXJyYXk6IG5ldyBGbG9hdDMyQXJyYXkodmVydGljZXNDb3VudCAqIDMpLFxuICAgIH1cblxuICAgIGNvbnN0IG5vcm1hbCA9IHtcbiAgICAgIG5hbWU6ICdub3JtYWwnLFxuICAgICAgdHlwZTogJ3ZlYzNmJyxcbiAgICAgIGJ1ZmZlckZvcm1hdDogJ2Zsb2F0MzJ4MycsXG4gICAgICAvLyBuYiBvZiB0cmlhbmdsZXMgKiAzIHZlcnRpY2VzIHBlciB0cmlhbmdsZSAqIDMgY29vcmRpbmF0ZXMgcGVyIHRyaWFuZ2xlXG4gICAgICBzaXplOiAzLFxuICAgICAgYXJyYXk6IG5ldyBGbG9hdDMyQXJyYXkodmVydGljZXNDb3VudCAqIDMpLFxuICAgIH1cblxuICAgIGxldCBwb3NpdGlvbk9mZnNldCA9IDBcbiAgICBsZXQgbm9ybWFsT2Zmc2V0ID0gMFxuICAgIGxldCB1dk9mZnNldCA9IDBcblxuICAgIC8vIHRoaXMgaXMgaG93IGl0IHdpbGwgbG9vayBmb3IgYSAzeDIgcXVhZFxuICAgIC8vIGluZGV4aW5nIHdpbGwgdGFrZSBjYXJlIG9mIGRyYXdpbmcgdGhlIHJpZ2h0IHZlcnRpY2VzIGF0IHRoZSByaWdodCB0aW1lXG4gICAgLy8gMC0tLTEtLS0yLS0tM1xuICAgIC8vIHwgLy98IC8vfCAvL3xcbiAgICAvLyB8Ly8gfC8vIHwvLyB8XG4gICAgLy8gNC0tLTUtLS02LS0tN1xuICAgIC8vIHwgLy98IC8vfCAvL3xcbiAgICAvLyB8Ly8gfC8vIHwvLyB8XG4gICAgLy8gOC0tLTktLS0xMC0tMTFcblxuICAgIGZvciAobGV0IHkgPSAwOyB5IDw9IHRoaXMuZGVmaW5pdGlvbi5oZWlnaHQ7IHkrKykge1xuICAgICAgZm9yIChsZXQgeCA9IDA7IHggPD0gdGhpcy5kZWZpbml0aW9uLndpZHRoOyB4KyspIHtcbiAgICAgICAgLy8gdXZcbiAgICAgICAgdXYuYXJyYXlbdXZPZmZzZXQrK10gPSB4IC8gdGhpcy5kZWZpbml0aW9uLndpZHRoXG4gICAgICAgIHV2LmFycmF5W3V2T2Zmc2V0KytdID0gMSAtIHkgLyB0aGlzLmRlZmluaXRpb24uaGVpZ2h0XG5cbiAgICAgICAgLy8gdmVydGV4IHBvc2l0aW9uXG4gICAgICAgIHBvc2l0aW9uLmFycmF5W3Bvc2l0aW9uT2Zmc2V0KytdID0gKHggKiAyKSAvIHRoaXMuZGVmaW5pdGlvbi53aWR0aCAtIDFcbiAgICAgICAgcG9zaXRpb24uYXJyYXlbcG9zaXRpb25PZmZzZXQrK10gPSAoeSAqIDIpIC8gdGhpcy5kZWZpbml0aW9uLmhlaWdodCAtIDFcbiAgICAgICAgcG9zaXRpb24uYXJyYXlbcG9zaXRpb25PZmZzZXQrK10gPSAwXG5cbiAgICAgICAgLy8gbm9ybWFscyBhcmUgc2ltcGxlXG4gICAgICAgIG5vcm1hbC5hcnJheVtub3JtYWxPZmZzZXQrK10gPSAwXG4gICAgICAgIG5vcm1hbC5hcnJheVtub3JtYWxPZmZzZXQrK10gPSAwXG4gICAgICAgIG5vcm1hbC5hcnJheVtub3JtYWxPZmZzZXQrK10gPSAxXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgcG9zaXRpb24sIHV2LCBub3JtYWwgfSBhcyBSZWNvcmQ8c3RyaW5nLCBWZXJ0ZXhCdWZmZXJBdHRyaWJ1dGVQYXJhbXM+XG4gIH1cbn1cbiIsImltcG9ydCB7IE1hdGVyaWFsIH0gZnJvbSAnLi9NYXRlcmlhbCdcbmltcG9ydCB7IEJpbmRHcm91cCB9IGZyb20gJy4uL2JpbmRHcm91cHMvQmluZEdyb3VwJ1xuaW1wb3J0IHsgaXNSZW5kZXJlciwgUmVuZGVyZXIgfSBmcm9tICcuLi9yZW5kZXJlcnMvdXRpbHMnXG5pbXBvcnQgeyBHUFVDdXJ0YWlucyB9IGZyb20gJy4uLy4uL2N1cnRhaW5zL0dQVUN1cnRhaW5zJ1xuaW1wb3J0IHtcbiAgQWxsb3dlZEdlb21ldHJpZXMsXG4gIFJlbmRlck1hdGVyaWFsQXR0cmlidXRlcyxcbiAgUmVuZGVyTWF0ZXJpYWxPcHRpb25zLFxuICBSZW5kZXJNYXRlcmlhbFBhcmFtcyxcbiAgUmVuZGVyTWF0ZXJpYWxSZW5kZXJpbmdPcHRpb25zXG59IGZyb20gJy4uLy4uL3R5cGVzL01hdGVyaWFscydcbmltcG9ydCB7IFJlbmRlclBpcGVsaW5lRW50cnkgfSBmcm9tICcuLi9waXBlbGluZXMvUmVuZGVyUGlwZWxpbmVFbnRyeSdcbmltcG9ydCB7IFJlbmRlclBpcGVsaW5lRW50cnlQYXJhbXMgfSBmcm9tICcuLi8uLi90eXBlcy9QaXBlbGluZUVudHJpZXMnXG5pbXBvcnQgeyB0aHJvd1dhcm5pbmcgfSBmcm9tICcuLi8uLi91dGlscy91dGlscydcblxuLyoqXG4gKiBDcmVhdGUgYSB7QGxpbmsgTWF0ZXJpYWx9IHNwZWNpZmljYWxseSBidWlsdCB0byBkcmF3IHRoZSB2ZXJ0aWNlcyBvZiBhIHtAbGluayBjb3JlL2dlb21ldHJpZXMvR2VvbWV0cnkuR2VvbWV0cnkgfCBHZW9tZXRyeX0uIEludGVybmFsbHkgdXNlZCBieSBhbGwga2luZCBvZiBNZXNoZXMuXG4gKlxuICogIyMgUmVuZGVyIHBpcGVsaW5lXG4gKlxuICogQSB7QGxpbmsgUmVuZGVyTWF0ZXJpYWx9IGF1dG9tYXRpY2FsbHkgY3JlYXRlcyBhIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5fS4gT25jZSBhbGwgdGhlIHtAbGluayBCaW5kR3JvdXB9IGhhdmUgYmVlbiBjcmVhdGVkLCB0aGV5IGFyZSBzZW50IHdpdGggdGhlIHNoYWRlcnMgY29kZSBhbmQgdGhlIHtAbGluayBSZW5kZXJNYXRlcmlhbE9wdGlvbnMjcmVuZGVyaW5nIHwgcmVuZGVyaW5nIG9wdGlvbnN9IHRvIHRoZSB7QGxpbmsgUmVuZGVyUGlwZWxpbmVFbnRyeX0sIHdoaWNoIGlzIGluIHR1cm5zIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUge0BsaW5rIEdQVVJlbmRlclBpcGVsaW5lfS5cbiAqXG4gKiBBZnRlciB0aGUge0BsaW5rIEdQVVJlbmRlclBpcGVsaW5lfSBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgY29tcGlsZWQsIHRoZSB7QGxpbmsgUmVuZGVyTWF0ZXJpYWx9IGlzIGNvbnNpZGVyZWQgdG8gYmUgcmVhZHkuXG4gKi9cbmV4cG9ydCBjbGFzcyBSZW5kZXJNYXRlcmlhbCBleHRlbmRzIE1hdGVyaWFsIHtcbiAgLyoqIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5IHwgUmVuZGVyIHBpcGVsaW5lIGVudHJ5fSB1c2VkIGJ5IHRoaXMge0BsaW5rIFJlbmRlck1hdGVyaWFsfSAqL1xuICBwaXBlbGluZUVudHJ5OiBSZW5kZXJQaXBlbGluZUVudHJ5XG4gIC8qKiBNYW5kYXRvcnkge0BsaW5rIFJlbmRlck1hdGVyaWFsQXR0cmlidXRlcyB8IGdlb21ldHJ5IGF0dHJpYnV0ZXN9IHRvIHBhc3MgdG8gdGhlIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5IHwgcmVuZGVyIHBpcGVsaW5lIGVudHJ5fSAqL1xuICBhdHRyaWJ1dGVzOiBSZW5kZXJNYXRlcmlhbEF0dHJpYnV0ZXMgfCBudWxsXG4gIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFJlbmRlck1hdGVyaWFsfSAqL1xuICBvcHRpb25zOiBSZW5kZXJNYXRlcmlhbE9wdGlvbnNcblxuICAvKipcbiAgICogUmVuZGVyTWF0ZXJpYWwgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0gb3VyIHJlbmRlcmVyIGNsYXNzIG9iamVjdFxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBSZW5kZXJNYXRlcmlhbFBhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIG91ciBSZW5kZXJNYXRlcmlhbFxuICAgKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyIHwgR1BVQ3VydGFpbnMsIHBhcmFtZXRlcnM6IFJlbmRlck1hdGVyaWFsUGFyYW1zKSB7XG4gICAgLy8gd2UgY291bGQgcGFzcyBvdXIgY3VydGFpbnMgb2JqZWN0IE9SIG91ciBjdXJ0YWlucyByZW5kZXJlciBvYmplY3RcbiAgICByZW5kZXJlciA9IChyZW5kZXJlciAmJiAocmVuZGVyZXIgYXMgR1BVQ3VydGFpbnMpLnJlbmRlcmVyKSB8fCAocmVuZGVyZXIgYXMgUmVuZGVyZXIpXG5cbiAgICBjb25zdCB0eXBlID0gJ1JlbmRlck1hdGVyaWFsJ1xuXG4gICAgaXNSZW5kZXJlcihyZW5kZXJlciwgdHlwZSlcblxuICAgIHN1cGVyKHJlbmRlcmVyLCBwYXJhbWV0ZXJzKVxuXG4gICAgdGhpcy50eXBlID0gdHlwZVxuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlclxuXG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnVzZWQtdmFyc1xuICAgIGNvbnN0IHsgc2hhZGVycywgbGFiZWwsIHVzZUFzeW5jUGlwZWxpbmUsIHVuaWZvcm1zLCBzdG9yYWdlcywgYmluZEdyb3VwcywgLi4ucmVuZGVyaW5nT3B0aW9ucyB9ID0gcGFyYW1ldGVyc1xuXG4gICAgaWYgKCFzaGFkZXJzLnZlcnRleC5lbnRyeVBvaW50KSB7XG4gICAgICBzaGFkZXJzLnZlcnRleC5lbnRyeVBvaW50ID0gJ21haW4nXG4gICAgfVxuXG4gICAgaWYgKCFzaGFkZXJzLmZyYWdtZW50LmVudHJ5UG9pbnQpIHtcbiAgICAgIHNoYWRlcnMuZnJhZ21lbnQuZW50cnlQb2ludCA9ICdtYWluJ1xuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIC4uLnRoaXMub3B0aW9ucyxcbiAgICAgIHNoYWRlcnMsXG4gICAgICByZW5kZXJpbmc6IHJlbmRlcmluZ09wdGlvbnMsXG4gICAgfSBhcyBSZW5kZXJNYXRlcmlhbE9wdGlvbnNcblxuICAgIHRoaXMucGlwZWxpbmVFbnRyeSA9IHRoaXMucmVuZGVyZXIucGlwZWxpbmVNYW5hZ2VyLmNyZWF0ZVJlbmRlclBpcGVsaW5lKHtcbiAgICAgIHJlbmRlcmVyOiB0aGlzLnJlbmRlcmVyLFxuICAgICAgbGFiZWw6IHRoaXMub3B0aW9ucy5sYWJlbCArICcgcmVuZGVyIHBpcGVsaW5lJyxcbiAgICAgIHNoYWRlcnM6IHRoaXMub3B0aW9ucy5zaGFkZXJzLFxuICAgICAgdXNlQXN5bmM6IHRoaXMub3B0aW9ucy51c2VBc3luY1BpcGVsaW5lLFxuICAgICAgLi4udGhpcy5vcHRpb25zLnJlbmRlcmluZyxcbiAgICB9IGFzIFJlbmRlclBpcGVsaW5lRW50cnlQYXJhbXMpXG5cbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogV2hlbiBhbGwgYmluZCBncm91cHMgYW5kIGF0dHJpYnV0ZXMgYXJlIGNyZWF0ZWQsIGFkZCB0aGVtIHRvIHRoZSB7QGxpbmsgUmVuZGVyUGlwZWxpbmVFbnRyeX1cbiAgICovXG4gIHNldFBpcGVsaW5lRW50cnlQcm9wZXJ0aWVzKCkge1xuICAgIHRoaXMucGlwZWxpbmVFbnRyeS5zZXRQaXBlbGluZUVudHJ5UHJvcGVydGllcyh7XG4gICAgICBhdHRyaWJ1dGVzOiB0aGlzLmF0dHJpYnV0ZXMsXG4gICAgICBiaW5kR3JvdXBzOiB0aGlzLmJpbmRHcm91cHMsXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDb21waWxlIHRoZSB7QGxpbmsgUmVuZGVyUGlwZWxpbmVFbnRyeX1cbiAgICogQGFzeW5jXG4gICAqL1xuICBhc3luYyBjb21waWxlUGlwZWxpbmVFbnRyeSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBhd2FpdCB0aGlzLnBpcGVsaW5lRW50cnkuY29tcGlsZVBpcGVsaW5lRW50cnkoKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGF0dHJpYnV0ZXMgYW5kIGFsbCBiaW5kIGdyb3VwcyBhcmUgcmVhZHksIGNyZWF0ZSB0aGVtIGlmIG5lZWRlZCBhbmQgc2V0IHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5fSBiaW5kIGdyb3VwIGJ1ZmZlcnMgYW5kIGNvbXBpbGUgdGhlIHBpcGVsaW5lXG4gICAqIEBhc3luY1xuICAgKi9cbiAgYXN5bmMgY29tcGlsZU1hdGVyaWFsKCkge1xuICAgIHN1cGVyLmNvbXBpbGVNYXRlcmlhbCgpXG5cbiAgICBpZiAodGhpcy5hdHRyaWJ1dGVzICYmIHRoaXMucGlwZWxpbmVFbnRyeSAmJiB0aGlzLnBpcGVsaW5lRW50cnkuY2FuQ29tcGlsZSkge1xuICAgICAgdGhpcy5zZXRQaXBlbGluZUVudHJ5UHJvcGVydGllcygpXG4gICAgICBhd2FpdCB0aGlzLmNvbXBpbGVQaXBlbGluZUVudHJ5KClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IG9yIHJlc2V0IG9uZSBvZiB0aGUge0BsaW5rIFJlbmRlck1hdGVyaWFsUmVuZGVyaW5nT3B0aW9ucyB8IHJlbmRlcmluZyBvcHRpb25zfS4gU2hvdWxkIGJlIHVzZSB3aXRoIGdyZWF0IGNhdXRpb24sIGJlY2F1c2UgaWYgdGhlIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5I3BpcGVsaW5lIHwgcmVuZGVyIHBpcGVsaW5lfSBoYXMgYWxyZWFkeSBiZWVuIGNvbXBpbGVkLCBpdCBjYW4gY2F1c2UgYSBwaXBlbGluZSBmbHVzaC5cbiAgICogQHBhcmFtIHJlbmRlcmluZ09wdGlvbnMgLSBuZXcge0BsaW5rIFJlbmRlck1hdGVyaWFsUmVuZGVyaW5nT3B0aW9ucyB8IHJlbmRlcmluZyBvcHRpb25zfSBwcm9wZXJ0aWVzIHRvIGJlIHNldFxuICAgKi9cbiAgc2V0UmVuZGVyaW5nT3B0aW9ucyhyZW5kZXJpbmdPcHRpb25zOiBQYXJ0aWFsPFJlbmRlck1hdGVyaWFsUmVuZGVyaW5nT3B0aW9ucz4gPSB7fSkge1xuICAgIGNvbnN0IG5ld1Byb3BlcnRpZXMgPSBPYmplY3Qua2V5cyhyZW5kZXJpbmdPcHRpb25zKS5maWx0ZXIoXG4gICAgICAoa2V5KSA9PiByZW5kZXJpbmdPcHRpb25zW2tleV0gIT09IHRoaXMub3B0aW9ucy5yZW5kZXJpbmdba2V5XVxuICAgIClcblxuICAgIHRoaXMub3B0aW9ucy5yZW5kZXJpbmcgPSB7IC4uLnRoaXMub3B0aW9ucy5yZW5kZXJpbmcsIC4uLnJlbmRlcmluZ09wdGlvbnMgfVxuXG4gICAgaWYgKHRoaXMucGlwZWxpbmVFbnRyeSkge1xuICAgICAgdGhpcy5waXBlbGluZUVudHJ5Lm9wdGlvbnMgPSB7IC4uLnRoaXMucGlwZWxpbmVFbnRyeS5vcHRpb25zLCAuLi50aGlzLm9wdGlvbnMucmVuZGVyaW5nIH1cblxuICAgICAgaWYgKHRoaXMucGlwZWxpbmVFbnRyeS5yZWFkeSAmJiBuZXdQcm9wZXJ0aWVzLmxlbmd0aCkge1xuICAgICAgICB0aHJvd1dhcm5pbmcoXG4gICAgICAgICAgYCR7XG4gICAgICAgICAgICB0aGlzLm9wdGlvbnMubGFiZWxcbiAgICAgICAgICB9OiB0aGUgY2hhbmdlIG9mIHJlbmRlcmluZyBvcHRpb25zIGlzIGNhdXNpbmcgdGhpcyBSZW5kZXJNYXRlcmlhbCBwaXBlbGluZSB0byBiZSBmbHVzaGVkIGFuZCByZWNvbXBpbGVkLiBUaGlzIHNob3VsZCBiZSBhdm9pZGVkLiBSZW5kZXJpbmcgb3B0aW9ucyB0aGF0IGNhdXNlZCB0aGlzOiB7ICR7bmV3UHJvcGVydGllc1xuICAgICAgICAgICAgLm1hcCgoa2V5KSA9PiBgXCIke2tleX1cIjogJHtyZW5kZXJpbmdPcHRpb25zW2tleV19YClcbiAgICAgICAgICAgIC5qb2luKCcsICcpfSB9YFxuICAgICAgICApXG5cbiAgICAgICAgdGhpcy5waXBlbGluZUVudHJ5LmZsdXNoUGlwZWxpbmVFbnRyeSh0aGlzLmJpbmRHcm91cHMpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogQVRUUklCVVRFUyAqL1xuXG4gIC8qKlxuICAgKiBDb21wdXRlIGdlb21ldHJ5IGlmIG5lZWRlZCBhbmQgZ2V0IGFsbCB1c2VmdWwgZ2VvbWV0cnkgcHJvcGVydGllcyBuZWVkZWQgdG8gY3JlYXRlIGF0dHJpYnV0ZXMgYnVmZmVyc1xuICAgKiBAcGFyYW0gZ2VvbWV0cnkgLSB0aGUgZ2VvbWV0cnkgdG8gZHJhd1xuICAgKi9cbiAgc2V0QXR0cmlidXRlc0Zyb21HZW9tZXRyeShnZW9tZXRyeTogQWxsb3dlZEdlb21ldHJpZXMpIHtcbiAgICB0aGlzLmF0dHJpYnV0ZXMgPSB7XG4gICAgICB3Z3NsU3RydWN0RnJhZ21lbnQ6IGdlb21ldHJ5Lndnc2xTdHJ1Y3RGcmFnbWVudCxcbiAgICAgIHZlcnRleEJ1ZmZlcnM6IGdlb21ldHJ5LnZlcnRleEJ1ZmZlcnMsXG4gICAgfVxuICB9XG5cbiAgLyogQklORCBHUk9VUFMgKi9cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBiaW5kIGdyb3VwcyBpZiB0aGV5IG5lZWQgdG8gYmUgY3JlYXRlZCwgYnV0IGZpcnN0IGFkZCBDYW1lcmEgYmluZCBncm91cCBpZiBuZWVkZWRcbiAgICovXG4gIGNyZWF0ZUJpbmRHcm91cHMoKSB7XG4gICAgLy8gY2FtZXJhIGZpcnN0IVxuICAgIC8vIGlmICgodGhpcy5yZW5kZXJlciBhcyBDYW1lcmFSZW5kZXJlcikuY2FtZXJhQmluZEdyb3VwICYmIHRoaXMub3B0aW9ucy5yZW5kZXJpbmcudXNlUHJvamVjdGlvbikge1xuICAgIC8vICAgdGhpcy5iaW5kR3JvdXBzLnB1c2goKHRoaXMucmVuZGVyZXIgYXMgQ2FtZXJhUmVuZGVyZXIpLmNhbWVyYUJpbmRHcm91cClcbiAgICAvLyB9XG4gICAgLy9cbiAgICAvLyBzdXBlci5jcmVhdGVCaW5kR3JvdXBzKClcblxuICAgIC8vIFRPRE8hIG5lZWQgdG8gY2hvc2Ugd2hldGhlciB3ZSBzaG91bGQgYWRkIHRoZSBjYW1lcmEgYmluZCBncm91cCBoZXJlXG4gICAgLy8gaW4gc3VjaCBjYXNlIHdlIG5lZWQgdG8gZmluZCBhIHdheSBub3QgdG8gYmluZCBpdCBpbnNpZGUgdGhlIHJlbmRlciBjYWxsXG4gICAgLy8gYmVjYXVzZSBpdCBpcyBhbHJlYWR5IGJvdW5kIGJ5IHRoZSBzY2VuZSBjbGFzcyBhdCBlYWNoIHJlbmRlciB0byBhdm9pZCBleHRyYSBXZWJHUFUgY29tbWFuZHNcbiAgICBjb25zdCBiaW5kR3JvdXBTdGFydEluZGV4ID0gdGhpcy5vcHRpb25zLnJlbmRlcmluZy51c2VQcm9qZWN0aW9uID8gMSA6IDBcblxuICAgIC8vIHRleHR1cmVzIGZpcnN0XG4gICAgaWYgKHRoaXMudGV4dHVyZXNCaW5kR3JvdXAuc2hvdWxkQ3JlYXRlQmluZEdyb3VwKSB7XG4gICAgICB0aGlzLnRleHR1cmVzQmluZEdyb3VwLnNldEluZGV4KHRoaXMuYmluZEdyb3Vwcy5sZW5ndGggKyBiaW5kR3JvdXBTdGFydEluZGV4KSAvLyBiaW5kR3JvdXAgMCBpcyBvdXIgcmVuZGVyZXIgY2FtZXJhXG4gICAgICB0aGlzLnRleHR1cmVzQmluZEdyb3VwLmNyZWF0ZUJpbmRHcm91cCgpXG5cbiAgICAgIHRoaXMuYmluZEdyb3Vwcy5wdXNoKHRoaXMudGV4dHVyZXNCaW5kR3JvdXApXG4gICAgfVxuXG4gICAgLy8gdGhlbiB1bmlmb3Jtc1xuICAgIHRoaXMuaW5wdXRzQmluZEdyb3Vwcy5mb3JFYWNoKChiaW5kR3JvdXApID0+IHtcbiAgICAgIGlmIChiaW5kR3JvdXAuc2hvdWxkQ3JlYXRlQmluZEdyb3VwKSB7XG4gICAgICAgIGJpbmRHcm91cC5zZXRJbmRleCh0aGlzLmJpbmRHcm91cHMubGVuZ3RoICsgYmluZEdyb3VwU3RhcnRJbmRleClcbiAgICAgICAgYmluZEdyb3VwLmNyZWF0ZUJpbmRHcm91cCgpXG5cbiAgICAgICAgdGhpcy5iaW5kR3JvdXBzLnB1c2goYmluZEdyb3VwKVxuICAgICAgfVxuICAgIH0pXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IC8qIHdnc2wgKi8gYFxuc3RydWN0IFZlcnRleE91dHB1dCB7XG4gIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNGYsXG4gIEBsb2NhdGlvbigwKSB1djogdmVjMmYsXG59O1xuXG5AdmVydGV4IGZuIG1haW4oXG4gIGF0dHJpYnV0ZXM6IEF0dHJpYnV0ZXMsXG4pIC0+IFZlcnRleE91dHB1dCB7XG4gIHZhciB2c091dHB1dDogVmVydGV4T3V0cHV0O1xuXG4gIHZzT3V0cHV0LnBvc2l0aW9uID0gdmVjNGYoYXR0cmlidXRlcy5wb3NpdGlvbiwgMS4wKTtcbiAgdnNPdXRwdXQudXYgPSBhdHRyaWJ1dGVzLnV2O1xuICBcbiAgcmV0dXJuIHZzT3V0cHV0O1xufWBcbiIsImV4cG9ydCBkZWZhdWx0IC8qIHdnc2wgKi8gYFxuQGZyYWdtZW50IGZuIG1haW4oKSAtPiBAbG9jYXRpb24oMCkgdmVjNGYge1xuICByZXR1cm4gdmVjNCgwLjAsIDAuMCwgMC4wLCAxLjApO1xufWBcbiIsImltcG9ydCB7IGdlbmVyYXRlVVVJRCwgdGhyb3dXYXJuaW5nIH0gZnJvbSAnLi4vLi4vLi4vdXRpbHMvdXRpbHMnXG5pbXBvcnQgeyBpc1JlbmRlcmVyLCBSZW5kZXJlciB9IGZyb20gJy4uLy4uL3JlbmRlcmVycy91dGlscydcbmltcG9ydCB7IFJlbmRlck1hdGVyaWFsIH0gZnJvbSAnLi4vLi4vbWF0ZXJpYWxzL1JlbmRlck1hdGVyaWFsJ1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uL3RleHR1cmVzL1RleHR1cmUnXG5pbXBvcnQgeyBHZW9tZXRyeSB9IGZyb20gJy4uLy4uL2dlb21ldHJpZXMvR2VvbWV0cnknXG5pbXBvcnQgeyBSZW5kZXJUZXh0dXJlLCBSZW5kZXJUZXh0dXJlUGFyYW1zIH0gZnJvbSAnLi4vLi4vdGV4dHVyZXMvUmVuZGVyVGV4dHVyZSdcbmltcG9ydCB7IEV4dGVybmFsVGV4dHVyZVBhcmFtcywgVGV4dHVyZVBhcmFtcywgVGV4dHVyZVBhcmVudCB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL1RleHR1cmVzJ1xuaW1wb3J0IHsgUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi4vLi4vcmVuZGVyUGFzc2VzL1JlbmRlclRhcmdldCdcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vLi4vLi4vY3VydGFpbnMvR1BVQ3VydGFpbnMnXG5pbXBvcnQgeyBQcm9qZWN0ZWRNZXNoIH0gZnJvbSAnLi4vLi4vcmVuZGVyZXJzL0dQVVJlbmRlcmVyJ1xuaW1wb3J0IHsgTWF0ZXJpYWwgfSBmcm9tICcuLi8uLi9tYXRlcmlhbHMvTWF0ZXJpYWwnXG5pbXBvcnQgeyBET01FbGVtZW50Qm91bmRpbmdSZWN0IH0gZnJvbSAnLi4vLi4vRE9NL0RPTUVsZW1lbnQnXG5pbXBvcnQgeyBBbGxvd2VkR2VvbWV0cmllcywgUmVuZGVyTWF0ZXJpYWxQYXJhbXMgfSBmcm9tICcuLi8uLi8uLi90eXBlcy9NYXRlcmlhbHMnXG5pbXBvcnQgeyBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzIH0gZnJvbSAnLi9Qcm9qZWN0ZWRNZXNoQmFzZU1peGluJ1xuaW1wb3J0IGRlZmF1bHRfdnNXZ3NsIGZyb20gJy4uLy4uL3NoYWRlcnMvY2h1bmtzL2RlZmF1bHRfdnMud2dzbCdcbmltcG9ydCBkZWZhdWx0X2ZzV2dzbCBmcm9tICcuLi8uLi9zaGFkZXJzL2NodW5rcy9kZWZhdWx0X2ZzLndnc2wnXG5cbmxldCBtZXNoSW5kZXggPSAwXG5cbmV4cG9ydCBpbnRlcmZhY2UgTWVzaEJhc2VSZW5kZXJQYXJhbXMgZXh0ZW5kcyBSZW5kZXJNYXRlcmlhbFBhcmFtcyB7XG4gIC8qKiBXaGV0aGVyIHdlIHNob3VsZCBhZGQgdGhpcyBNZXNoIHRvIG91ciB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX0gdG8gbGV0IGl0IGhhbmRsZSB0aGUgcmVuZGVyaW5nIHByb2Nlc3MgYXV0b21hdGljYWxseSAqL1xuICBhdXRvUmVuZGVyPzogYm9vbGVhblxuICAvKiogRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdG8gZHJhdyB0aGlzIE1lc2ggb3Igbm90ICovXG4gIHZpc2libGU/OiBib29sZWFuXG4gIC8qKiBDb250cm9scyB0aGUgb3JkZXIgaW4gd2hpY2ggdGhpcyBNZXNoIHNob3VsZCBiZSByZW5kZXJlZCBieSBvdXIge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9ICovXG4gIHJlbmRlck9yZGVyPzogbnVtYmVyXG4gIC8qKiB7QGxpbmsgUmVuZGVyVGFyZ2V0fSB0byByZW5kZXIgdGhpcyBNZXNoIHRvICovXG4gIHJlbmRlclRhcmdldD86IFJlbmRlclRhcmdldFxuICAvKiogUGFyYW1ldGVycyB1c2VkIGJ5IHRoaXMgTWVzaCB0byBjcmVhdGUgYSB7QGxpbmsgVGV4dHVyZX0gKi9cbiAgdGV4dHVyZXNPcHRpb25zPzogRXh0ZXJuYWxUZXh0dXJlUGFyYW1zXG59XG5cbi8qKlxuICogQmFzZSBwYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEgTWVzaFxuICovXG5leHBvcnQgaW50ZXJmYWNlIE1lc2hCYXNlUGFyYW1zIGV4dGVuZHMgTWVzaEJhc2VSZW5kZXJQYXJhbXMge1xuICAvKiogR2VvbWV0cnkgdG8gdXNlICovXG4gIGdlb21ldHJ5OiBBbGxvd2VkR2VvbWV0cmllc1xufVxuXG4vKipcbiAqICBCYXNlIG9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhpcyBNZXNoXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTWVzaEJhc2VPcHRpb25zIHtcbiAgLyoqIFRoZSBsYWJlbCBvZiB0aGlzIE1lc2gsIHNlbnQgdG8gdmFyaW91cyBHUFUgb2JqZWN0cyBmb3IgZGVidWdnaW5nIHB1cnBvc2UgKi9cbiAgbGFiZWw/OiBNZXNoQmFzZVBhcmFtc1snbGFiZWwnXVxuICAvKiogU2hhZGVycyB0byB1c2UgYnkgdGhpcyBNZXNoIHtAbGluayBSZW5kZXJNYXRlcmlhbH0gKi9cbiAgc2hhZGVycz86IE1lc2hCYXNlUGFyYW1zWydzaGFkZXJzJ11cbiAgLyoqIFBhcmFtZXRlcnMgdXNlZCBieSB0aGlzIE1lc2ggdG8gY3JlYXRlIGEge0BsaW5rIFRleHR1cmV9ICovXG4gIHRleHR1cmVzT3B0aW9ucz86IEV4dGVybmFsVGV4dHVyZVBhcmFtc1xuICAvKioge0BsaW5rIFJlbmRlclRhcmdldH0gdG8gcmVuZGVyIHRoaXMgTWVzaCB0bywgaWYgYW55ICovXG4gIHJlbmRlclRhcmdldD86IFJlbmRlclRhcmdldCB8IG51bGxcbiAgLyoqIFdoZXRoZXIgd2Ugc2hvdWxkIGFkZCB0aGlzIE1lc2ggdG8gb3VyIHtAbGluayBjb3JlL3NjZW5lcy9TY2VuZS5TY2VuZSB8IFNjZW5lfSB0byBsZXQgaXQgaGFuZGxlIHRoZSByZW5kZXJpbmcgcHJvY2VzcyBhdXRvbWF0aWNhbGx5ICovXG4gIGF1dG9SZW5kZXI/OiBib29sZWFuXG4gIC8qKiBXaGV0aGVyIHRvIGNvbXBpbGUgdGhpcyBNZXNoIHtAbGluayBSZW5kZXJNYXRlcmlhbH0ge0BsaW5rIGNvcmUvcGlwZWxpbmVzL1JlbmRlclBpcGVsaW5lRW50cnkuUmVuZGVyUGlwZWxpbmVFbnRyeSNwaXBlbGluZSB8IHJlbmRlciBwaXBlbGluZX0gYXN5bmNocm9ub3VzbHkgb3Igbm90ICovXG4gIHVzZUFzeW5jUGlwZWxpbmU/OiBib29sZWFuXG59XG5cbi8qKiBAY29uc3QgLSBEZWZhdWx0IE1lc2ggcGFyYW1ldGVycyB0byBtZXJnZSB3aXRoIHVzZXIgZGVmaW5lZCBwYXJhbWV0ZXJzICovXG5jb25zdCBkZWZhdWx0TWVzaEJhc2VQYXJhbXM6IE1lc2hCYXNlUGFyYW1zID0ge1xuICAvLyBnZW9tZXRyeVxuICBnZW9tZXRyeTogbmV3IEdlb21ldHJ5KCksXG4gIC8vIG1hdGVyaWFsXG4gIHNoYWRlcnM6IHt9LFxuICBhdXRvUmVuZGVyOiB0cnVlLFxuICB1c2VQcm9qZWN0aW9uOiBmYWxzZSxcbiAgLy8gcmVuZGVyaW5nXG4gIGN1bGxNb2RlOiAnYmFjaycsXG4gIGRlcHRoOiB0cnVlLFxuICBkZXB0aFdyaXRlRW5hYmxlZDogdHJ1ZSxcbiAgZGVwdGhDb21wYXJlOiAnbGVzcycsXG4gIHRyYW5zcGFyZW50OiBmYWxzZSxcbiAgdmlzaWJsZTogdHJ1ZSxcbiAgcmVuZGVyT3JkZXI6IDAsXG4gIC8vIHRleHR1cmVzXG4gIHRleHR1cmVzT3B0aW9uczoge30sXG59XG5cbi8vIGJhc2VkIG9uIGh0dHBzOi8vc3RhY2tvdmVyZmxvdy5jb20vYS83NTY3MzEwNy8xMzM1NDA2OFxuLy8gd2UgZGVjbGFyZSBmaXJzdCBhIGNsYXNzLCBhbmQgdGhlbiB0aGUgbWl4aW4gd2l0aCBhIHJldHVybiB0eXBlXG4vKipcbiAqIFRoaXMgY2xhc3MgZGVzY3JpYmVzIHRoZSBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIHRvIHNldCB1cCBhIGJhc2ljIE1lc2gsIGltcGxlbWVudGVkIGluIHRoZSB7QGxpbmsgTWVzaEJhc2VNaXhpbn06XG4gKiAtIFNldCBhbmQgcmVuZGVyIHRoZSB7QGxpbmsgR2VvbWV0cnl9IGFuZCB7QGxpbmsgUmVuZGVyTWF0ZXJpYWx9XG4gKiAtIEFkZCBoZWxwZXJzIHRvIGNyZWF0ZSB7QGxpbmsgVGV4dHVyZX0gYW5kIHtAbGluayBSZW5kZXJUZXh0dXJlfVxuICogLSBIYW5kbGUgcmVzaXppbmcsIGRldmljZSBsb3N0L3Jlc3RvcmF0aW9uIGFuZCBkZXN0cm95aW5nIHRoZSByZXNvdXJjZXNcbiAqL1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgTWVzaEJhc2VDbGFzcyB7XG4gIC8qKiBUaGUgdHlwZSBvZiB0aGUge0BsaW5rIE1lc2hCYXNlQ2xhc3N9ICovXG4gIHR5cGU6IHN0cmluZ1xuICAvKiogVGhlIHVuaXZlcnNhbCB1bmlxdWUgaWQgb2YgdGhlIHtAbGluayBNZXNoQmFzZUNsYXNzfSAqL1xuICByZWFkb25seSB1dWlkOiBzdHJpbmdcbiAgLyoqIEluZGV4IG9mIHRoaXMge0BsaW5rIE1lc2hCYXNlQ2xhc3N9LCBpLmUuIGNyZWF0aW9uIG9yZGVyICovXG4gIHJlYWRvbmx5IGluZGV4OiBudW1iZXJcbiAgLyoqIFRoZSB7QGxpbmsgUmVuZGVyZXJ9IHVzZWQgKi9cbiAgcmVuZGVyZXI6IFJlbmRlcmVyXG5cbiAgLyoqIE9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgTWVzaEJhc2VDbGFzc30gKi9cbiAgb3B0aW9uczogTWVzaEJhc2VPcHRpb25zXG5cbiAgLyoqIHtAbGluayBSZW5kZXJNYXRlcmlhbH0gdXNlZCBieSB0aGlzIHtAbGluayBNZXNoQmFzZUNsYXNzfSAqL1xuICBtYXRlcmlhbDogUmVuZGVyTWF0ZXJpYWxcbiAgLyoqIHtAbGluayBBbGxvd2VkR2VvbWV0cmllcyB8IEdlb21ldHJ5fSB1c2VkIGJ5IHRoaXMge0BsaW5rIE1lc2hCYXNlQ2xhc3N9ICovXG4gIGdlb21ldHJ5OiBNZXNoQmFzZVBhcmFtc1snZ2VvbWV0cnknXVxuXG4gIC8qKiB7QGxpbmsgUmVuZGVyVGFyZ2V0fSB0byByZW5kZXIgdGhpcyBNZXNoIHRvLCBpZiBhbnkgKi9cbiAgcmVuZGVyVGFyZ2V0OiBudWxsIHwgUmVuZGVyVGFyZ2V0XG5cbiAgLyoqIENvbnRyb2xzIHRoZSBvcmRlciBpbiB3aGljaCB0aGlzIHtAbGluayBNZXNoQmFzZUNsYXNzfSBzaG91bGQgYmUgcmVuZGVyZWQgYnkgb3VyIHtAbGluayBjb3JlL3NjZW5lcy9TY2VuZS5TY2VuZSB8IFNjZW5lfSAqL1xuICByZW5kZXJPcmRlcjogbnVtYmVyXG4gIC8qKiBXaGV0aGVyIHRoaXMge0BsaW5rIE1lc2hCYXNlQ2xhc3N9IHNob3VsZCBiZSB0cmVhdGVkIGFzIHRyYW5zcGFyZW50LiBJbXBhY3RzIHRoZSB7QGxpbmsgY29yZS9waXBlbGluZXMvUmVuZGVyUGlwZWxpbmVFbnRyeS5SZW5kZXJQaXBlbGluZUVudHJ5I3BpcGVsaW5lIHwgcmVuZGVyIHBpcGVsaW5lfSBibGVuZCBwcm9wZXJ0aWVzICovXG4gIHRyYW5zcGFyZW50OiBib29sZWFuXG5cbiAgLyoqIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRvIGRyYXcgdGhpcyB7QGxpbmsgTWVzaEJhc2VDbGFzc30gb3Igbm90ICovXG4gIHZpc2libGU6IGJvb2xlYW5cbiAgLyoqIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRoaXMge0BsaW5rIE1lc2hCYXNlQ2xhc3N9IGlzIHJlYWR5IHRvIGJlIGRyYXduICovXG4gIF9yZWFkeTogYm9vbGVhblxuXG4gIC8qKiBFbXB0eSBvYmplY3QgdG8gc3RvcmUgYW55IGFkZGl0aW9uYWwgZGF0YSBvciBjdXN0b20gcHJvcGVydGllcyBpbnRvIHlvdXIgTWVzaC4gKi9cbiAgdXNlckRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG5cbiAgLy8gY2FsbGJhY2tzXG4gIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uUmVhZHl9IGNhbGxiYWNrICovXG4gIF9vblJlYWR5Q2FsbGJhY2s6ICgpID0+IHZvaWRcbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25CZWZvcmVSZW5kZXJ9IGNhbGxiYWNrICovXG4gIF9vbkJlZm9yZVJlbmRlckNhbGxiYWNrOiAoKSA9PiB2b2lkXG4gIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uUmVuZGVyfSBjYWxsYmFjayAqL1xuICBfb25SZW5kZXJDYWxsYmFjazogKCkgPT4gdm9pZFxuICAvKiogZnVuY3Rpb24gYXNzaWduZWQgdG8gdGhlIHtAbGluayBvbkFmdGVyUmVuZGVyfSBjYWxsYmFjayAqL1xuICBfb25BZnRlclJlbmRlckNhbGxiYWNrOiAoKSA9PiB2b2lkXG4gIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uQWZ0ZXJSZXNpemV9IGNhbGxiYWNrICovXG4gIF9vbkFmdGVyUmVzaXplQ2FsbGJhY2s6ICgpID0+IHZvaWRcbiAgLyoqXG4gICAqIEFzc2lnbiBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIF9vblJlYWR5Q2FsbGJhY2tcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIHdoZW4ge0BsaW5rIE1lc2hCYXNlQ2xhc3N9IGlzIHJlYWR5XG4gICAqIEByZXR1cm5zIC0gb3VyIE1lc2hcbiAgICovXG4gIG9uUmVhZHk6IChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4gTWVzaEJhc2VDbGFzcyB8IFByb2plY3RlZE1lc2hCYXNlQ2xhc3NcbiAgLyoqXG4gICAqIEFzc2lnbiBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIF9vbkJlZm9yZVJlbmRlckNhbGxiYWNrXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biBqdXN0IGJlZm9yZSB7QGxpbmsgTWVzaEJhc2VDbGFzc30gd2lsbCBiZSByZW5kZXJlZFxuICAgKiBAcmV0dXJucyAtIG91ciBNZXNoXG4gICAqL1xuICBvbkJlZm9yZVJlbmRlcjogKGNhbGxiYWNrOiAoKSA9PiB2b2lkKSA9PiBNZXNoQmFzZUNsYXNzIHwgUHJvamVjdGVkTWVzaEJhc2VDbGFzc1xuICAvKipcbiAgICogQXNzaWduIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gX29uUmVuZGVyQ2FsbGJhY2tcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIHdoZW4ge0BsaW5rIE1lc2hCYXNlQ2xhc3N9IGlzIHJlbmRlcmVkXG4gICAqIEByZXR1cm5zIC0gb3VyIE1lc2hcbiAgICovXG4gIG9uUmVuZGVyOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IE1lc2hCYXNlQ2xhc3MgfCBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzXG4gIC8qKlxuICAgKiBBc3NpZ24gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBfb25BZnRlclJlbmRlckNhbGxiYWNrXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biBqdXN0IGFmdGVyIHtAbGluayBNZXNoQmFzZUNsYXNzfSBoYXMgYmVlbiByZW5kZXJlZFxuICAgKiBAcmV0dXJucyAtIG91ciBNZXNoXG4gICAqL1xuICBvbkFmdGVyUmVuZGVyOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IE1lc2hCYXNlQ2xhc3MgfCBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzXG4gIC8qKlxuICAgKiBBc3NpZ24gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBfb25CZWZvcmVSZW5kZXJDYWxsYmFja1xuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBydW4ganVzdCBhZnRlciB7QGxpbmsgTWVzaEJhc2VDbGFzc30gaGFzIGJlZW4gcmVzaXplZFxuICAgKiBAcmV0dXJucyAtIG91ciBNZXNoXG4gICAqL1xuICBvbkFmdGVyUmVzaXplOiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IE1lc2hCYXNlQ2xhc3MgfCBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzXG5cbiAgLyoqXG4gICAqIHtAbGluayBNZXNoQmFzZUNsYXNzfSBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcmVuZGVyZXIgLSBvdXIge0BsaW5rIFJlbmRlcmVyfSBjbGFzcyBvYmplY3RcbiAgICogQHBhcmFtIGVsZW1lbnQgLSBhIERPTSBIVE1MIEVsZW1lbnQgdGhhdCBjYW4gYmUgYm91bmQgdG8gYSBNZXNoXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIE1lc2hCYXNlUGFyYW1zIHwgTWVzaCBiYXNlIHBhcmFtZXRlcnN9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIsIGVsZW1lbnQ6IEhUTUxFbGVtZW50IHwgbnVsbCwgcGFyYW1ldGVyczogTWVzaEJhc2VQYXJhbXMpXG5cbiAgLyoqXG4gICAqIEdldCBwcml2YXRlICNhdXRvUmVuZGVyIHZhbHVlXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGF1dG9SZW5kZXIoKTogYm9vbGVhbiAvLyBhbGxvdyB0byByZWFkIHZhbHVlIGZyb20gY2hpbGQgY2xhc3Nlc1xuXG4gIC8qKlxuICAgKiBHZXQvc2V0IHdoZXRoZXIgYSBNZXNoIGlzIHJlYWR5IG9yIG5vdFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCByZWFkeSgpOiBib29sZWFuXG4gIHNldCByZWFkeSh2YWx1ZTogYm9vbGVhbilcblxuICAvKipcbiAgICogQWRkIGEgTWVzaCB0byB0aGUgcmVuZGVyZXIgYW5kIHRoZSB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX1cbiAgICovXG4gIGFkZFRvU2NlbmUoKTogdm9pZFxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSBNZXNoIGZyb20gdGhlIHJlbmRlcmVyIGFuZCB0aGUge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9XG4gICAqL1xuICByZW1vdmVGcm9tU2NlbmUoKTogdm9pZFxuXG4gIC8qKlxuICAgKiBTZXQgYSBuZXcge0BsaW5rIFJlbmRlcmVyfSBmb3IgdGhpcyBNZXNoXG4gICAqIEBwYXJhbSByZW5kZXJlciAtIG5ldyB7QGxpbmsgUmVuZGVyZXJ9IHRvIHNldFxuICAgKi9cbiAgc2V0UmVuZGVyZXIocmVuZGVyZXI6IFJlbmRlcmVyIHwgR1BVQ3VydGFpbnMpOiB2b2lkXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB7QGxpbmsgY29yZS9yZW5kZXJlcnMvR1BVRGV2aWNlTWFuYWdlci5HUFVEZXZpY2VNYW5hZ2VyI2RldmljZSB8IGRldmljZX0gaGFzIGJlZW4gbG9zdCB0byBwcmVwYXJlIGV2ZXJ5dGhpbmcgZm9yIHJlc3RvcmF0aW9uLlxuICAgKiBCYXNpY2FsbHkgc2V0IGFsbCB0aGUge0BsaW5rIEdQVUJ1ZmZlcn0gdG8gbnVsbCBzbyB0aGV5IHdpbGwgYmUgcmVzZXQgbmV4dCB0aW1lIHdlIHRyeSB0byBkcmF3IHRoZSBNZXNoXG4gICAqL1xuICBsb3NlQ29udGV4dCgpOiB2b2lkXG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB7QGxpbmsgY29yZS9yZW5kZXJlcnMvR1BVRGV2aWNlTWFuYWdlci5HUFVEZXZpY2VNYW5hZ2VyI2RldmljZSB8IGRldmljZX0gaGFzIGJlZW4gcmVzdG9yZWRcbiAgICovXG4gIHJlc3RvcmVDb250ZXh0KCk6IHZvaWRcblxuICAvKipcbiAgICogU2V0IGRlZmF1bHQgc2hhZGVycyBpZiBvbmUgb3IgYm90aCBvZiB0aGVtIGFyZSBtaXNzaW5nXG4gICAqL1xuICBzZXRTaGFkZXJzKCk6IHZvaWRcblxuICAvKipcbiAgICogQ29tcHV0ZSB0aGUgTWVzaCBnZW9tZXRyeSBpZiBuZWVkZWRcbiAgICovXG4gIGNvbXB1dGVHZW9tZXRyeSgpOiB2b2lkXG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgTWVzaCBHZW9tZXRyeSB2ZXJ0ZXggYW5kIGluZGV4IGJ1ZmZlcnMgaWYgbmVlZGVkXG4gICAqL1xuICBjcmVhdGVHZW9tZXRyeUJ1ZmZlcnMoKTogdm9pZFxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIE1lc2ggZ2VvbWV0cnk6IGNyZWF0ZSBidWZmZXJzIGFuZCBhZGQgYXR0cmlidXRlcyB0byBtYXRlcmlhbFxuICAgKi9cbiAgc2V0R2VvbWV0cnkoKTogdm9pZFxuXG4gIC8qKlxuICAgKiBTZXQgYSBNZXNoIHRyYW5zcGFyZW50IHByb3BlcnR5LCB0aGVuIHNldCBpdHMgbWF0ZXJpYWxcbiAgICogQHBhcmFtIG1lc2hQYXJhbWV0ZXJzIC0ge0BsaW5rIFJlbmRlck1hdGVyaWFsUGFyYW1zIHwgUmVuZGVyTWF0ZXJpYWwgcGFyYW1ldGVyc31cbiAgICovXG4gIHNldE1hdGVyaWFsKG1lc2hQYXJhbWV0ZXJzOiBSZW5kZXJNYXRlcmlhbFBhcmFtcyk6IHZvaWRcblxuICAvKipcbiAgICogU2V0IE1lc2ggbWF0ZXJpYWwgYXR0cmlidXRlc1xuICAgKi9cbiAgc2V0TWF0ZXJpYWxHZW9tZXRyeUF0dHJpYnV0ZXMoKTogdm9pZFxuXG4gIC8qKlxuICAgKiBHZXQgb3VyIHtAbGluayBSZW5kZXJNYXRlcmlhbCN0ZXh0dXJlcyB8IFJlbmRlck1hdGVyaWFsIHRleHR1cmVzIGFycmF5fVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCB0ZXh0dXJlcygpOiBUZXh0dXJlW11cblxuICAvKipcbiAgICogR2V0IG91ciB7QGxpbmsgUmVuZGVyTWF0ZXJpYWwjcmVuZGVyVGV4dHVyZXMgfCBSZW5kZXJNYXRlcmlhbCByZW5kZXIgdGV4dHVyZXMgYXJyYXl9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHJlbmRlclRleHR1cmVzKCk6IFJlbmRlclRleHR1cmVbXVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIFRleHR1cmV9XG4gICAqIEBwYXJhbSBvcHRpb25zIC0ge0BsaW5rIFRleHR1cmVQYXJhbXMgfCBUZXh0dXJlIHBhcmFtZXRlcnN9XG4gICAqIEByZXR1cm5zIC0gbmV3bHkgY3JlYXRlZCBUZXh0dXJlXG4gICAqL1xuICBjcmVhdGVUZXh0dXJlKG9wdGlvbnM6IFRleHR1cmVQYXJhbXMpOiBUZXh0dXJlXG5cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBUZXh0dXJlfVxuICAgKiBAcGFyYW0gdGV4dHVyZSAtIHtAbGluayBUZXh0dXJlfSB0byBhZGRcbiAgICovXG4gIGFkZFRleHR1cmUodGV4dHVyZTogVGV4dHVyZSlcblxuICAvKipcbiAgICogQ2FsbGJhY2sgcnVuIHdoZW4gYSBuZXcge0BsaW5rIFRleHR1cmV9IGhhcyBiZWVuIGNyZWF0ZWRcbiAgICogQHBhcmFtIHRleHR1cmUgLSBuZXdseSBjcmVhdGVkIFRleHR1cmVcbiAgICovXG4gIG9uVGV4dHVyZUFkZGVkKHRleHR1cmU6IFRleHR1cmUpOiB2b2lkXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyB7QGxpbmsgUmVuZGVyVGV4dHVyZX1cbiAgICogQHBhcmFtICBvcHRpb25zIC0ge0BsaW5rIFJlbmRlclRleHR1cmVQYXJhbXMgfCBSZW5kZXJUZXh0dXJlIHBhcmFtZXRlcnN9XG4gICAqIEByZXR1cm5zIC0gbmV3bHkgY3JlYXRlZCBSZW5kZXJUZXh0dXJlXG4gICAqL1xuICBjcmVhdGVSZW5kZXJUZXh0dXJlKG9wdGlvbnM6IFJlbmRlclRleHR1cmVQYXJhbXMpOiBSZW5kZXJUZXh0dXJlXG5cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBSZW5kZXJUZXh0dXJlfVxuICAgKiBAcGFyYW0gcmVuZGVyVGV4dHVyZSAtIHtAbGluayBSZW5kZXJUZXh0dXJlfSB0byBhZGRcbiAgICovXG4gIGFkZFJlbmRlclRleHR1cmUocmVuZGVyVGV4dHVyZTogUmVuZGVyVGV4dHVyZSlcblxuICAvKipcbiAgICogQXNzaWduIG9yIHJlbW92ZSBhIHtAbGluayBSZW5kZXJUYXJnZXR9IHRvIHRoaXMgTWVzaFxuICAgKiBTaW5jZSB0aGlzIG1hbmlwdWxhdGVzIHRoZSB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX0gc3RhY2tzLCBpdCBjYW4gYmUgdXNlZCB0byByZW1vdmUgYSBSZW5kZXJUYXJnZXQgYXMgd2VsbC5cbiAgICogQHBhcmFtIHJlbmRlclRhcmdldCAtIHRoZSBSZW5kZXJUYXJnZXQgdG8gYXNzaWduIG9yIG51bGwgaWYgd2Ugd2FudCB0byByZW1vdmUgdGhlIGN1cnJlbnQgUmVuZGVyVGFyZ2V0XG4gICAqL1xuICBzZXRSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0OiBSZW5kZXJUYXJnZXQgfCBudWxsKTogdm9pZFxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQge0BsaW5rIFJlbmRlck1hdGVyaWFsfSB1bmlmb3Jtc1xuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCB1bmlmb3JtcygpOiBNYXRlcmlhbFsndW5pZm9ybXMnXVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIGN1cnJlbnQge0BsaW5rIFJlbmRlck1hdGVyaWFsfSBzdG9yYWdlc1xuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBzdG9yYWdlcygpOiBNYXRlcmlhbFsnc3RvcmFnZXMnXVxuXG4gIC8qKlxuICAgKiBSZXNpemUgdGhlIE1lc2gncyB0ZXh0dXJlc1xuICAgKiBAcGFyYW0gYm91bmRpbmdSZWN0XG4gICAqL1xuICByZXNpemUoYm91bmRpbmdSZWN0PzogRE9NRWxlbWVudEJvdW5kaW5nUmVjdCk6IHZvaWRcblxuICAvKipcbiAgICogQ2FsbGVkIGJlZm9yZSByZW5kZXJpbmcgdGhlIE1lc2hcbiAgICogU2V0IHRoZSBnZW9tZXRyeSBpZiBuZWVkZWQgKGNyZWF0ZSBidWZmZXJzIGFuZCBhZGQgYXR0cmlidXRlcyB0byB0aGUge0BsaW5rIFJlbmRlck1hdGVyaWFsfSlcbiAgICogVGhlbiBleGVjdXRlcyB7QGxpbmsgUmVuZGVyTWF0ZXJpYWwjb25CZWZvcmVSZW5kZXJ9OiBjcmVhdGUgaXRzIGJpbmQgZ3JvdXBzIGFuZCBwaXBlbGluZSBpZiBuZWVkZWQgYW5kIGV2ZW50dWFsbHkgdXBkYXRlIGl0cyBzdHJ1Y3RcbiAgICovXG4gIG9uQmVmb3JlUmVuZGVyUGFzcygpOiB2b2lkXG5cbiAgLyoqXG4gICAqIFJlbmRlciBvdXIge0BsaW5rIE1lc2hCYXNlQ2xhc3N9IGlmIHRoZSB7QGxpbmsgUmVuZGVyTWF0ZXJpYWx9IGlzIHJlYWR5XG4gICAqIEBwYXJhbSBwYXNzIC0gY3VycmVudCByZW5kZXIgcGFzcyBlbmNvZGVyXG4gICAqL1xuICBvblJlbmRlclBhc3MocGFzczogR1BVUmVuZGVyUGFzc0VuY29kZXIpOiB2b2lkXG5cbiAgLyoqXG4gICAqIENhbGxlZCBhZnRlciBoYXZpbmcgcmVuZGVyZWQgdGhlIE1lc2hcbiAgICovXG4gIG9uQWZ0ZXJSZW5kZXJQYXNzKCk6IHZvaWRcblxuICAvKipcbiAgICogUmVuZGVyIG91ciBNZXNoXG4gICAqIC0gRXhlY3V0ZSB7QGxpbmsgb25CZWZvcmVSZW5kZXJQYXNzfVxuICAgKiAtIFN0b3AgaGVyZSBpZiB7QGxpbmsgUmVuZGVyZXJ9IGlzIG5vdCByZWFkeSBvciBNZXNoIGlzIG5vdCB7QGxpbmsgdmlzaWJsZX1cbiAgICogLSBFeGVjdXRlIHN1cGVyIHJlbmRlciBjYWxsIGlmIGl0IGV4aXN0c1xuICAgKiAtIHtAbGluayBvblJlbmRlclBhc3MgfCByZW5kZXJ9IG91ciB7QGxpbmsgbWF0ZXJpYWx9IGFuZCB7QGxpbmsgZ2VvbWV0cnl9XG4gICAqIC0gRXhlY3V0ZSB7QGxpbmsgb25BZnRlclJlbmRlclBhc3N9XG4gICAqIEBwYXJhbSBwYXNzIC0gY3VycmVudCByZW5kZXIgcGFzcyBlbmNvZGVyXG4gICAqL1xuICByZW5kZXIocGFzczogR1BVUmVuZGVyUGFzc0VuY29kZXIpOiB2b2lkXG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUgTWVzaCBmcm9tIHRoZSB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX0gYW5kIGRlc3Ryb3kgaXRcbiAgICovXG4gIHJlbW92ZSgpOiB2b2lkXG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgdGhlIE1lc2hcbiAgICovXG4gIGRlc3Ryb3koKTogdm9pZFxufVxuXG4vKipcbiAqIFRvIGdldCBzdGFydGVkLCB3ZSBuZWVkIGEgdHlwZSB3aGljaCB3ZSdsbCB1c2UgdG8gZXh0ZW5kXG4gKiBvdGhlciBjbGFzc2VzIGZyb20uIFRoZSBtYWluIHJlc3BvbnNpYmlsaXR5IGlzIHRvIGRlY2xhcmVcbiAqIHRoYXQgdGhlIHR5cGUgYmVpbmcgcGFzc2VkIGluIGlzIGEgY2xhc3MuXG4gKiBXZSB1c2UgYSBnZW5lcmljIHZlcnNpb24gd2hpY2ggY2FuIGFwcGx5IGEgY29uc3RyYWludCBvblxuICogdGhlIGNsYXNzIHdoaWNoIHRoaXMgbWl4aW4gaXMgYXBwbGllZCB0b1xuICogQHR5cGVQYXJhbSBUIC0gdGhlIGJhc2UgY29uc3RydWN0b3JcbiAqL1xuZXhwb3J0IHR5cGUgTWl4aW5Db25zdHJ1Y3RvcjxUID0ge30+ID0gbmV3ICguLi5hcmdzOiBhbnlbXSkgPT4gVFxuXG4vKipcbiAqIFVzZWQgdG8gbWl4IHRoZSBiYXNpYyBNZXNoIHByb3BlcnRpZXMgYW5kIG1ldGhvZHMgZGVmaW5lZCBpbiB7QGxpbmsgTWVzaEJhc2VDbGFzc30gKGJhc2ljYWxseSwgc2V0IGEge0BsaW5rIEdlb21ldHJ5fSBhbmQgYSB7QGxpbmsgUmVuZGVyTWF0ZXJpYWx9IGFuZCByZW5kZXIgdGhlbSwgYWRkIGhlbHBlcnMgdG8gY3JlYXRlIHtAbGluayBUZXh0dXJlfSBhbmQge0BsaW5rIFJlbmRlclRleHR1cmV9KSB3aXRoIGEgZ2l2ZW4gQmFzZSBvZiB0eXBlIHtAbGluayBjb3JlL29iamVjdHMzRC9PYmplY3QzRC5PYmplY3QzRCB8IE9iamVjdDNEfSwge0BsaW5rIGNvcmUvb2JqZWN0czNEL1Byb2plY3RlZE9iamVjdDNELlByb2plY3RlZE9iamVjdDNEIHwgUHJvamVjdGVkT2JqZWN0M0R9LCB7QGxpbmsgY3VydGFpbnMvb2JqZWN0czNEL0RPTU9iamVjdDNELkRPTU9iamVjdDNEIHwgRE9NT2JqZWN0M0R9IG9yIGFuIGVtcHR5IGNsYXNzLlxuICogQGV4cG9ydHMgTWVzaEJhc2VNaXhpblxuICogQHBhcmFtIEJhc2UgLSB0aGUgY2xhc3MgdG8gbWl4IG9udG9cbiAqIEByZXR1cm5zIC0gdGhlIG1peGVkIGNsYXNzZXMsIGNyZWF0aW5nIGEgYmFzaWMgTWVzaC5cbiAqL1xuZnVuY3Rpb24gTWVzaEJhc2VNaXhpbjxUQmFzZSBleHRlbmRzIE1peGluQ29uc3RydWN0b3I+KEJhc2U6IFRCYXNlKTogTWl4aW5Db25zdHJ1Y3RvcjxNZXNoQmFzZUNsYXNzPiAmIFRCYXNlIHtcbiAgLyoqXG4gICAqIE1lc2hCYXNlIGRlZmluZXMgb3VyIGJhc2UgcHJvcGVydGllcyBhbmQgbWV0aG9kc1xuICAgKi9cbiAgcmV0dXJuIGNsYXNzIE1lc2hCYXNlIGV4dGVuZHMgQmFzZSBpbXBsZW1lbnRzIE1lc2hCYXNlQ2xhc3Mge1xuICAgIC8qKiBUaGUgdHlwZSBvZiB0aGUge0BsaW5rIE1lc2hCYXNlfSAqL1xuICAgIHR5cGU6IHN0cmluZ1xuICAgIC8qKiBUaGUgdW5pdmVyc2FsIHVuaXF1ZSBpZCBvZiB0aGUge0BsaW5rIE1lc2hCYXNlfSAqL1xuICAgIHJlYWRvbmx5IHV1aWQ6IHN0cmluZ1xuICAgIC8qKiBJbmRleCBvZiB0aGlzIHtAbGluayBNZXNoQmFzZX0sIGkuZS4gY3JlYXRpb24gb3JkZXIgKi9cbiAgICByZWFkb25seSBpbmRleDogbnVtYmVyXG4gICAgLyoqIFRoZSB7QGxpbmsgUmVuZGVyZXJ9IHVzZWQgKi9cbiAgICByZW5kZXJlcjogUmVuZGVyZXJcblxuICAgIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIE1lc2hCYXNlfSAqL1xuICAgIG9wdGlvbnM6IE1lc2hCYXNlT3B0aW9uc1xuXG4gICAgLyoqIHtAbGluayBSZW5kZXJNYXRlcmlhbH0gdXNlZCBieSB0aGlzIHtAbGluayBNZXNoQmFzZX0gKi9cbiAgICBtYXRlcmlhbDogUmVuZGVyTWF0ZXJpYWxcbiAgICAvKioge0BsaW5rIEFsbG93ZWRHZW9tZXRyaWVzIHwgR2VvbWV0cnl9IHVzZWQgYnkgdGhpcyB7QGxpbmsgTWVzaEJhc2V9ICovXG4gICAgZ2VvbWV0cnk6IE1lc2hCYXNlUGFyYW1zWydnZW9tZXRyeSddXG5cbiAgICAvKioge0BsaW5rIFJlbmRlclRhcmdldH0gdG8gcmVuZGVyIHRoaXMgTWVzaCB0bywgaWYgYW55ICovXG4gICAgcmVuZGVyVGFyZ2V0OiBudWxsIHwgUmVuZGVyVGFyZ2V0XG5cbiAgICAvKiogQ29udHJvbHMgdGhlIG9yZGVyIGluIHdoaWNoIHRoaXMge0BsaW5rIE1lc2hCYXNlfSBzaG91bGQgYmUgcmVuZGVyZWQgYnkgb3VyIHtAbGluayBjb3JlL3NjZW5lcy9TY2VuZS5TY2VuZSB8IFNjZW5lfSAqL1xuICAgIHJlbmRlck9yZGVyOiBudW1iZXJcbiAgICAvKiogV2hldGhlciB0aGlzIHtAbGluayBNZXNoQmFzZX0gc2hvdWxkIGJlIHRyZWF0ZWQgYXMgdHJhbnNwYXJlbnQuIEltcGFjdHMgdGhlIHtAbGluayBjb3JlL3BpcGVsaW5lcy9SZW5kZXJQaXBlbGluZUVudHJ5LlJlbmRlclBpcGVsaW5lRW50cnkjcGlwZWxpbmUgfCByZW5kZXIgcGlwZWxpbmV9IGJsZW5kIHByb3BlcnRpZXMgKi9cbiAgICB0cmFuc3BhcmVudDogYm9vbGVhblxuXG4gICAgLyoqIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHRvIGRyYXcgdGhpcyB7QGxpbmsgTWVzaEJhc2V9IG9yIG5vdCAqL1xuICAgIHZpc2libGU6IGJvb2xlYW5cbiAgICAvKiogRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgdGhpcyB7QGxpbmsgTWVzaEJhc2V9IGlzIHJlYWR5IHRvIGJlIGRyYXduICovXG4gICAgX3JlYWR5OiBib29sZWFuXG5cbiAgICAvKiogRW1wdHkgb2JqZWN0IHRvIHN0b3JlIGFueSBhZGRpdGlvbmFsIGRhdGEgb3IgY3VzdG9tIHByb3BlcnRpZXMgaW50byB5b3VyIHtAbGluayBNZXNoQmFzZX0uICovXG4gICAgdXNlckRhdGE6IFJlY29yZDxzdHJpbmcsIHVua25vd24+XG5cbiAgICAvKiogV2hldGhlciB3ZSBzaG91bGQgYWRkIHRoaXMge0BsaW5rIE1lc2hCYXNlfSB0byBvdXIge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9IHRvIGxldCBpdCBoYW5kbGUgdGhlIHJlbmRlcmluZyBwcm9jZXNzIGF1dG9tYXRpY2FsbHkgKi9cbiAgICAjYXV0b1JlbmRlciA9IHRydWVcblxuICAgIC8vIGNhbGxiYWNrcyAvIGV2ZW50c1xuICAgIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uUmVhZHl9IGNhbGxiYWNrICovXG4gICAgX29uUmVhZHlDYWxsYmFjazogKCkgPT4gdm9pZCA9ICgpID0+IHtcbiAgICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrICovXG4gICAgfVxuICAgIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uQmVmb3JlUmVuZGVyfSBjYWxsYmFjayAqL1xuICAgIF9vbkJlZm9yZVJlbmRlckNhbGxiYWNrOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xuICAgICAgLyogYWxsb3cgZW1wdHkgY2FsbGJhY2sgKi9cbiAgICB9XG4gICAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25SZW5kZXJ9IGNhbGxiYWNrICovXG4gICAgX29uUmVuZGVyQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xuICAgIH1cbiAgICAvKiogZnVuY3Rpb24gYXNzaWduZWQgdG8gdGhlIHtAbGluayBvbkFmdGVyUmVuZGVyfSBjYWxsYmFjayAqL1xuICAgIF9vbkFmdGVyUmVuZGVyQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xuICAgIH1cbiAgICAvKiogZnVuY3Rpb24gYXNzaWduZWQgdG8gdGhlIHtAbGluayBvbkFmdGVyUmVzaXplfSBjYWxsYmFjayAqL1xuICAgIF9vbkFmdGVyUmVzaXplQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1lc2hCYXNlIGNvbnN0cnVjdG9yXG4gICAgICpcbiAgICAgKiBAdHlwZWRlZiBNZXNoQmFzZUFycmF5UGFyYW1zXG4gICAgICogQHR5cGUge2FycmF5fVxuICAgICAqIEBwcm9wZXJ0eSB7KFJlbmRlcmVyfEdQVUN1cnRhaW5zKX0gMCAtIG91ciB7QGxpbmsgUmVuZGVyZXJ9IGNsYXNzIG9iamVjdFxuICAgICAqIEBwcm9wZXJ0eSB7KHN0cmluZ3xIVE1MRWxlbWVudHxudWxsKX0gMSAtIGEgRE9NIEhUTUwgRWxlbWVudCB0aGF0IGNhbiBiZSBib3VuZCB0byBhIE1lc2hcbiAgICAgKiBAcHJvcGVydHkge01lc2hCYXNlUGFyYW1zfSAyIC0ge0BsaW5rIE1lc2hCYXNlUGFyYW1zIHwgTWVzaCBiYXNlIHBhcmFtZXRlcnN9XG4gICAgICpcbiAgICAgKiBAcGFyYW0ge01lc2hCYXNlQXJyYXlQYXJhbXN9IHBhcmFtcyAtIG91ciBNZXNoQmFzZU1peGluIHBhcmFtZXRlcnNcbiAgICAgKi9cbiAgICBjb25zdHJ1Y3RvciguLi5wYXJhbXM6IGFueVtdKSB7XG4gICAgICBzdXBlcihcbiAgICAgICAgcGFyYW1zWzBdIGFzIFJlbmRlcmVyIHwgR1BVQ3VydGFpbnMsXG4gICAgICAgIHBhcmFtc1sxXSBhcyBIVE1MRWxlbWVudCB8IHN0cmluZyB8IG51bGwsXG4gICAgICAgIHsgLi4uZGVmYXVsdE1lc2hCYXNlUGFyYW1zLCAuLi5wYXJhbXNbMl0gfSBhcyBNZXNoQmFzZVBhcmFtc1xuICAgICAgKVxuXG4gICAgICBsZXQgcmVuZGVyZXIgPSBwYXJhbXNbMF1cbiAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB7IC4uLmRlZmF1bHRNZXNoQmFzZVBhcmFtcywgLi4ucGFyYW1zWzJdIH1cblxuICAgICAgdGhpcy50eXBlID0gJ01lc2hCYXNlJ1xuXG4gICAgICB0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKVxuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMgYXMgTWVzaEJhc2UsICdpbmRleCcsIHsgdmFsdWU6IG1lc2hJbmRleCsrIH0pXG5cbiAgICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XG4gICAgICByZW5kZXJlciA9IChyZW5kZXJlciAmJiAocmVuZGVyZXIgYXMgR1BVQ3VydGFpbnMpLnJlbmRlcmVyKSB8fCAocmVuZGVyZXIgYXMgUmVuZGVyZXIpXG5cbiAgICAgIGlzUmVuZGVyZXIocmVuZGVyZXIsIHBhcmFtZXRlcnMubGFiZWwgPyBwYXJhbWV0ZXJzLmxhYmVsICsgJyAnICsgdGhpcy50eXBlIDogdGhpcy50eXBlKVxuXG4gICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJcblxuICAgICAgY29uc3Qge1xuICAgICAgICBsYWJlbCxcbiAgICAgICAgc2hhZGVycyxcbiAgICAgICAgZ2VvbWV0cnksXG4gICAgICAgIHZpc2libGUsXG4gICAgICAgIHJlbmRlck9yZGVyLFxuICAgICAgICByZW5kZXJUYXJnZXQsXG4gICAgICAgIHRleHR1cmVzT3B0aW9ucyxcbiAgICAgICAgYXV0b1JlbmRlcixcbiAgICAgICAgLi4ubWVzaFBhcmFtZXRlcnNcbiAgICAgIH0gPSBwYXJhbWV0ZXJzXG5cbiAgICAgIC8vIHNldCBkZWZhdWx0IHNhbXBsZSBjb3VudFxuICAgICAgbWVzaFBhcmFtZXRlcnMuc2FtcGxlQ291bnQgPVxuICAgICAgICBtZXNoUGFyYW1ldGVycy5zYW1wbGVDb3VudCA/PyAodGhpcy5yZW5kZXJlciAmJiB0aGlzLnJlbmRlcmVyLnJlbmRlclBhc3MpXG4gICAgICAgICAgPyB0aGlzLnJlbmRlcmVyLnJlbmRlclBhc3Mub3B0aW9ucy5zYW1wbGVDb3VudFxuICAgICAgICAgIDogMVxuXG4gICAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAgIC4uLih0aGlzLm9wdGlvbnMgPz8ge30pLCAvLyBtZXJnZSBwb3NzaWJsZSBsb3dlciBvcHRpb25zP1xuICAgICAgICBsYWJlbDogbGFiZWwgPz8gJ01lc2ggJyArIHRoaXMucmVuZGVyZXIubWVzaGVzLmxlbmd0aCxcbiAgICAgICAgc2hhZGVycyxcbiAgICAgICAgdGV4dHVyZXNPcHRpb25zLFxuICAgICAgICAuLi4ocmVuZGVyVGFyZ2V0ICE9PSB1bmRlZmluZWQgJiYgeyByZW5kZXJUYXJnZXQgfSksXG4gICAgICAgIC4uLihhdXRvUmVuZGVyICE9PSB1bmRlZmluZWQgJiYgeyBhdXRvUmVuZGVyIH0pLFxuICAgICAgICAuLi4obWVzaFBhcmFtZXRlcnMudXNlQXN5bmNQaXBlbGluZSAhPT0gdW5kZWZpbmVkICYmIHsgdXNlQXN5bmNQaXBlbGluZTogbWVzaFBhcmFtZXRlcnMudXNlQXN5bmNQaXBlbGluZSB9KSxcbiAgICAgIH1cblxuICAgICAgdGhpcy5yZW5kZXJUYXJnZXQgPSByZW5kZXJUYXJnZXQgPz8gbnVsbFxuXG4gICAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnlcblxuICAgICAgaWYgKGF1dG9SZW5kZXIgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0aGlzLiNhdXRvUmVuZGVyID0gYXV0b1JlbmRlclxuICAgICAgfVxuXG4gICAgICB0aGlzLnZpc2libGUgPSB2aXNpYmxlXG4gICAgICB0aGlzLnJlbmRlck9yZGVyID0gcmVuZGVyT3JkZXJcbiAgICAgIHRoaXMucmVhZHkgPSBmYWxzZVxuXG4gICAgICB0aGlzLnVzZXJEYXRhID0ge31cblxuICAgICAgdGhpcy5jb21wdXRlR2VvbWV0cnkoKVxuXG4gICAgICB0aGlzLnNldE1hdGVyaWFsKHtcbiAgICAgICAgbGFiZWw6IHRoaXMub3B0aW9ucy5sYWJlbCxcbiAgICAgICAgc2hhZGVyczogdGhpcy5vcHRpb25zLnNoYWRlcnMsXG4gICAgICAgIC4uLnsgLi4ubWVzaFBhcmFtZXRlcnMsIHZlcnRpY2VzT3JkZXI6IGdlb21ldHJ5LnZlcnRpY2VzT3JkZXIsIHRvcG9sb2d5OiBnZW9tZXRyeS50b3BvbG9neSB9LFxuICAgICAgfSBhcyBSZW5kZXJNYXRlcmlhbFBhcmFtcylcblxuICAgICAgdGhpcy5hZGRUb1NjZW5lKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQgcHJpdmF0ZSAjYXV0b1JlbmRlciB2YWx1ZVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGdldCBhdXRvUmVuZGVyKCk6IGJvb2xlYW4ge1xuICAgICAgcmV0dXJuIHRoaXMuI2F1dG9SZW5kZXJcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBHZXQvc2V0IHdoZXRoZXIgYSBNZXNoIGlzIHJlYWR5IG9yIG5vdFxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGdldCByZWFkeSgpOiBib29sZWFuIHtcbiAgICAgIHJldHVybiB0aGlzLl9yZWFkeVxuICAgIH1cblxuICAgIHNldCByZWFkeSh2YWx1ZTogYm9vbGVhbikge1xuICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgIHRoaXMuX29uUmVhZHlDYWxsYmFjayAmJiB0aGlzLl9vblJlYWR5Q2FsbGJhY2soKVxuICAgICAgfVxuICAgICAgdGhpcy5fcmVhZHkgPSB2YWx1ZVxuICAgIH1cblxuICAgIC8qIFNDRU5FICovXG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSBNZXNoIHRvIHRoZSByZW5kZXJlciBhbmQgdGhlIHtAbGluayBjb3JlL3NjZW5lcy9TY2VuZS5TY2VuZSB8IFNjZW5lfVxuICAgICAqL1xuICAgIGFkZFRvU2NlbmUoKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLm1lc2hlcy5wdXNoKHRoaXMgYXMgdW5rbm93biBhcyBQcm9qZWN0ZWRNZXNoKVxuXG4gICAgICAvLyB1cGRhdGUgc2FtcGxlIGNvdW50IGlmIG5lZWRlZFxuICAgICAgdGhpcy5tYXRlcmlhbD8uc2V0UmVuZGVyaW5nT3B0aW9ucyh7XG4gICAgICAgIHNhbXBsZUNvdW50OiB0aGlzLnJlbmRlclRhcmdldFxuICAgICAgICAgID8gdGhpcy5yZW5kZXJUYXJnZXQucmVuZGVyUGFzcy5vcHRpb25zLnNhbXBsZUNvdW50XG4gICAgICAgICAgOiB0aGlzLnJlbmRlcmVyLnJlbmRlclBhc3Mub3B0aW9ucy5zYW1wbGVDb3VudCxcbiAgICAgIH0pXG5cbiAgICAgIGlmICh0aGlzLiNhdXRvUmVuZGVyKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuc2NlbmUuYWRkTWVzaCh0aGlzIGFzIHVua25vd24gYXMgUHJvamVjdGVkTWVzaClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZW1vdmUgYSBNZXNoIGZyb20gdGhlIHJlbmRlcmVyIGFuZCB0aGUge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9XG4gICAgICovXG4gICAgcmVtb3ZlRnJvbVNjZW5lKCkge1xuICAgICAgaWYgKHRoaXMuI2F1dG9SZW5kZXIpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5zY2VuZS5yZW1vdmVNZXNoKHRoaXMgYXMgdW5rbm93biBhcyBQcm9qZWN0ZWRNZXNoKVxuICAgICAgfVxuXG4gICAgICB0aGlzLnJlbmRlcmVyLm1lc2hlcyA9IHRoaXMucmVuZGVyZXIubWVzaGVzLmZpbHRlcigobSkgPT4gbS51dWlkICE9PSB0aGlzLnV1aWQpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IGEgbmV3IHtAbGluayBSZW5kZXJlcn0gZm9yIHRoaXMgTWVzaFxuICAgICAqIEBwYXJhbSByZW5kZXJlciAtIG5ldyB7QGxpbmsgUmVuZGVyZXJ9IHRvIHNldFxuICAgICAqL1xuICAgIHNldFJlbmRlcmVyKHJlbmRlcmVyOiBSZW5kZXJlciB8IEdQVUN1cnRhaW5zKSB7XG4gICAgICAvLyB3ZSBjb3VsZCBwYXNzIG91ciBjdXJ0YWlucyBvYmplY3QgT1Igb3VyIGN1cnRhaW5zIHJlbmRlcmVyIG9iamVjdFxuICAgICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIFJlbmRlcmVyKVxuXG4gICAgICBpZiAoXG4gICAgICAgICFyZW5kZXJlciB8fFxuICAgICAgICAhKFxuICAgICAgICAgIHJlbmRlcmVyLnR5cGUgPT09ICdHUFVSZW5kZXJlcicgfHxcbiAgICAgICAgICByZW5kZXJlci50eXBlID09PSAnR1BVQ2FtZXJhUmVuZGVyZXInIHx8XG4gICAgICAgICAgcmVuZGVyZXIudHlwZSA9PT0gJ0dQVUN1cnRhaW5zUmVuZGVyZXInXG4gICAgICAgIClcbiAgICAgICkge1xuICAgICAgICB0aHJvd1dhcm5pbmcoXG4gICAgICAgICAgYCR7dGhpcy5vcHRpb25zLmxhYmVsfTogQ2Fubm90IHNldCAke3JlbmRlcmVyfSBhcyBhIHJlbmRlcmVyIGJlY2F1c2UgaXQgaXMgbm90IG9mIGEgdmFsaWQgUmVuZGVyZXIgdHlwZS5gXG4gICAgICAgIClcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIGNvbnN0IG9sZFJlbmRlcmVyID0gdGhpcy5yZW5kZXJlclxuICAgICAgdGhpcy5yZW1vdmVGcm9tU2NlbmUoKVxuICAgICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyXG4gICAgICB0aGlzLmFkZFRvU2NlbmUoKVxuXG4gICAgICAvLyBpZiBvbGQgcmVuZGVyZXIgZG9lcyBub3QgY29udGFpbiBhbnkgbWVzaGVzIGFueSBtb3JlXG4gICAgICAvLyBjbGVhciBpdFxuICAgICAgaWYgKCFvbGRSZW5kZXJlci5tZXNoZXMubGVuZ3RoKSB7XG4gICAgICAgIG9sZFJlbmRlcmVyLm9uQmVmb3JlUmVuZGVyU2NlbmUuYWRkKFxuICAgICAgICAgIChjb21tYW5kRW5jb2RlcikgPT4ge1xuICAgICAgICAgICAgb2xkUmVuZGVyZXIuZm9yY2VDbGVhcihjb21tYW5kRW5jb2RlcilcbiAgICAgICAgICB9LFxuICAgICAgICAgIHsgb25jZTogdHJ1ZSB9XG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ24gb3IgcmVtb3ZlIGEge0BsaW5rIFJlbmRlclRhcmdldH0gdG8gdGhpcyBNZXNoXG4gICAgICogU2luY2UgdGhpcyBtYW5pcHVsYXRlcyB0aGUge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9IHN0YWNrcywgaXQgY2FuIGJlIHVzZWQgdG8gcmVtb3ZlIGEgUmVuZGVyVGFyZ2V0IGFzIHdlbGwuXG4gICAgICogQHBhcmFtIHJlbmRlclRhcmdldCAtIHRoZSBSZW5kZXJUYXJnZXQgdG8gYXNzaWduIG9yIG51bGwgaWYgd2Ugd2FudCB0byByZW1vdmUgdGhlIGN1cnJlbnQgUmVuZGVyVGFyZ2V0XG4gICAgICovXG4gICAgc2V0UmVuZGVyVGFyZ2V0KHJlbmRlclRhcmdldDogUmVuZGVyVGFyZ2V0IHwgbnVsbCkge1xuICAgICAgaWYgKHJlbmRlclRhcmdldCAmJiByZW5kZXJUYXJnZXQudHlwZSAhPT0gJ1JlbmRlclRhcmdldCcpIHtcbiAgICAgICAgdGhyb3dXYXJuaW5nKGAke3RoaXMub3B0aW9ucy5sYWJlbCA/PyB0aGlzLnR5cGV9OiByZW5kZXJUYXJnZXQgaXMgbm90IGEgUmVuZGVyVGFyZ2V0OiAke3JlbmRlclRhcmdldH1gKVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gZW5zdXJlIHRoZSBtZXNoIGlzIGluIHRoZSBjb3JyZWN0IHNjZW5lIHN0YWNrXG4gICAgICB0aGlzLnJlbW92ZUZyb21TY2VuZSgpXG4gICAgICB0aGlzLnJlbmRlclRhcmdldCA9IHJlbmRlclRhcmdldFxuICAgICAgdGhpcy5hZGRUb1NjZW5lKClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUge0BsaW5rIGNvcmUvcmVuZGVyZXJzL0dQVURldmljZU1hbmFnZXIuR1BVRGV2aWNlTWFuYWdlciNkZXZpY2UgfCBkZXZpY2V9IGhhcyBiZWVuIGxvc3QgdG8gcHJlcGFyZSBldmVyeXRoaW5nIGZvciByZXN0b3JhdGlvbi5cbiAgICAgKiBCYXNpY2FsbHkgc2V0IGFsbCB0aGUge0BsaW5rIEdQVUJ1ZmZlcn0gdG8gbnVsbCBzbyB0aGV5IHdpbGwgYmUgcmVzZXQgbmV4dCB0aW1lIHdlIHRyeSB0byBkcmF3IHRoZSBNZXNoXG4gICAgICovXG4gICAgbG9zZUNvbnRleHQoKSB7XG4gICAgICAvLyBmaXJzdCB0aGUgZ2VvbWV0cnlcbiAgICAgIHRoaXMuZ2VvbWV0cnkudmVydGV4QnVmZmVycy5mb3JFYWNoKCh2ZXJ0ZXhCdWZmZXIpID0+IHtcbiAgICAgICAgdmVydGV4QnVmZmVyLmJ1ZmZlciA9IG51bGxcbiAgICAgIH0pXG5cbiAgICAgIGlmICgnaW5kZXhCdWZmZXInIGluIHRoaXMuZ2VvbWV0cnkpIHtcbiAgICAgICAgdGhpcy5nZW9tZXRyeS5pbmRleEJ1ZmZlci5idWZmZXIgPSBudWxsXG4gICAgICB9XG5cbiAgICAgIC8vIHRoZW4gdGhlIG1hdGVyaWFsXG4gICAgICB0aGlzLm1hdGVyaWFsLmxvc2VDb250ZXh0KClcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiB0aGUge0BsaW5rIGNvcmUvcmVuZGVyZXJzL0dQVURldmljZU1hbmFnZXIuR1BVRGV2aWNlTWFuYWdlciNkZXZpY2UgfCBkZXZpY2V9IGhhcyBiZWVuIHJlc3RvcmVkXG4gICAgICovXG4gICAgcmVzdG9yZUNvbnRleHQoKSB7XG4gICAgICB0aGlzLm1hdGVyaWFsLnJlc3RvcmVDb250ZXh0KClcbiAgICB9XG5cbiAgICAvKiBTSEFERVJTICovXG5cbiAgICAvKipcbiAgICAgKiBTZXQgZGVmYXVsdCBzaGFkZXJzIGlmIG9uZSBvciBib3RoIG9mIHRoZW0gYXJlIG1pc3NpbmdcbiAgICAgKi9cbiAgICBzZXRTaGFkZXJzKCkge1xuICAgICAgbGV0IHsgc2hhZGVycyB9ID0gdGhpcy5vcHRpb25zXG5cbiAgICAgIGlmICghc2hhZGVycykge1xuICAgICAgICBzaGFkZXJzID0ge1xuICAgICAgICAgIHZlcnRleDoge1xuICAgICAgICAgICAgY29kZTogZGVmYXVsdF92c1dnc2wsXG4gICAgICAgICAgICBlbnRyeVBvaW50OiAnbWFpbicsXG4gICAgICAgICAgfSxcbiAgICAgICAgICBmcmFnbWVudDoge1xuICAgICAgICAgICAgY29kZTogZGVmYXVsdF9mc1dnc2wsXG4gICAgICAgICAgICBlbnRyeVBvaW50OiAnbWFpbicsXG4gICAgICAgICAgfSxcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKCFzaGFkZXJzLnZlcnRleCB8fCAhc2hhZGVycy52ZXJ0ZXguY29kZSkge1xuICAgICAgICAgIHNoYWRlcnMudmVydGV4ID0ge1xuICAgICAgICAgICAgY29kZTogZGVmYXVsdF92c1dnc2wsXG4gICAgICAgICAgICBlbnRyeVBvaW50OiAnbWFpbicsXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFzaGFkZXJzLmZyYWdtZW50IHx8ICFzaGFkZXJzLmZyYWdtZW50LmNvZGUpIHtcbiAgICAgICAgICBzaGFkZXJzLmZyYWdtZW50ID0ge1xuICAgICAgICAgICAgY29kZTogZGVmYXVsdF9mc1dnc2wsXG4gICAgICAgICAgICBlbnRyeVBvaW50OiAnbWFpbicsXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogR0VPTUVUUlkgKi9cblxuICAgIC8qKlxuICAgICAqIENvbXB1dGUgdGhlIE1lc2ggZ2VvbWV0cnkgaWYgbmVlZGVkXG4gICAgICovXG4gICAgY29tcHV0ZUdlb21ldHJ5KCkge1xuICAgICAgaWYgKHRoaXMuZ2VvbWV0cnkuc2hvdWxkQ29tcHV0ZSkge1xuICAgICAgICB0aGlzLmdlb21ldHJ5LmNvbXB1dGVHZW9tZXRyeSgpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIHRoZSBNZXNoIEdlb21ldHJ5IHZlcnRleCBhbmQgaW5kZXggYnVmZmVycyBpZiBuZWVkZWRcbiAgICAgKi9cbiAgICBjcmVhdGVHZW9tZXRyeUJ1ZmZlcnMoKSB7XG4gICAgICBpZiAoIXRoaXMuZ2VvbWV0cnkucmVhZHkpIHtcbiAgICAgICAgdGhpcy5nZW9tZXRyeS52ZXJ0ZXhCdWZmZXJzLmZvckVhY2goKHZlcnRleEJ1ZmZlcikgPT4ge1xuICAgICAgICAgIGlmICghdmVydGV4QnVmZmVyLmJ1ZmZlcikge1xuICAgICAgICAgICAgdmVydGV4QnVmZmVyLmJ1ZmZlciA9IHRoaXMucmVuZGVyZXIuY3JlYXRlQnVmZmVyKHtcbiAgICAgICAgICAgICAgbGFiZWw6IHRoaXMub3B0aW9ucy5sYWJlbCArICcgZ2VvbWV0cnk6ICcgKyB2ZXJ0ZXhCdWZmZXIubmFtZSArICcgYnVmZmVyJyxcbiAgICAgICAgICAgICAgc2l6ZTogdmVydGV4QnVmZmVyLmFycmF5LmJ5dGVMZW5ndGgsXG4gICAgICAgICAgICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5WRVJURVggfCBHUFVCdWZmZXJVc2FnZS5DT1BZX0RTVCxcbiAgICAgICAgICAgIH0pXG5cbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIucXVldWVXcml0ZUJ1ZmZlcih2ZXJ0ZXhCdWZmZXIuYnVmZmVyLCAwLCB2ZXJ0ZXhCdWZmZXIuYXJyYXkpXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIC8vIGlmIGl0J3MgYW4gaW5kZXhlZCBnZW9tZXRyeSwgY3JlYXRlIGluZGV4IEdQVUJ1ZmZlciBhcyB3ZWxsXG4gICAgICAgIGlmICgnaW5kZXhCdWZmZXInIGluIHRoaXMuZ2VvbWV0cnkgJiYgdGhpcy5nZW9tZXRyeS5pbmRleEJ1ZmZlciAmJiAhdGhpcy5nZW9tZXRyeS5pbmRleEJ1ZmZlci5idWZmZXIpIHtcbiAgICAgICAgICB0aGlzLmdlb21ldHJ5LmluZGV4QnVmZmVyLmJ1ZmZlciA9IHRoaXMucmVuZGVyZXIuY3JlYXRlQnVmZmVyKHtcbiAgICAgICAgICAgIGxhYmVsOiB0aGlzLm9wdGlvbnMubGFiZWwgKyAnIGdlb21ldHJ5OiBpbmRleCBidWZmZXInLFxuICAgICAgICAgICAgc2l6ZTogdGhpcy5nZW9tZXRyeS5pbmRleEJ1ZmZlci5hcnJheS5ieXRlTGVuZ3RoLFxuICAgICAgICAgICAgdXNhZ2U6IEdQVUJ1ZmZlclVzYWdlLklOREVYIHwgR1BVQnVmZmVyVXNhZ2UuQ09QWV9EU1QsXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIHRoaXMucmVuZGVyZXIucXVldWVXcml0ZUJ1ZmZlcih0aGlzLmdlb21ldHJ5LmluZGV4QnVmZmVyLmJ1ZmZlciwgMCwgdGhpcy5nZW9tZXRyeS5pbmRleEJ1ZmZlci5hcnJheSlcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFNldCBvdXIgTWVzaCBnZW9tZXRyeTogY3JlYXRlIGJ1ZmZlcnMgYW5kIGFkZCBhdHRyaWJ1dGVzIHRvIG1hdGVyaWFsXG4gICAgICovXG4gICAgc2V0R2VvbWV0cnkoKSB7XG4gICAgICBpZiAodGhpcy5nZW9tZXRyeSAmJiB0aGlzLnJlbmRlcmVyLnJlYWR5KSB7XG4gICAgICAgIHRoaXMuY3JlYXRlR2VvbWV0cnlCdWZmZXJzKClcbiAgICAgICAgdGhpcy5zZXRNYXRlcmlhbEdlb21ldHJ5QXR0cmlidXRlcygpXG4gICAgICB9XG4gICAgfVxuXG4gICAgLyogTUFURVJJQUwgKi9cblxuICAgIC8qKlxuICAgICAqIFNldCBhIE1lc2ggdHJhbnNwYXJlbnQgcHJvcGVydHksIHRoZW4gc2V0IGl0cyBtYXRlcmlhbFxuICAgICAqIEBwYXJhbSBtZXNoUGFyYW1ldGVycyAtIHtAbGluayBSZW5kZXJNYXRlcmlhbFBhcmFtcyB8IFJlbmRlck1hdGVyaWFsIHBhcmFtZXRlcnN9XG4gICAgICovXG4gICAgc2V0TWF0ZXJpYWwobWVzaFBhcmFtZXRlcnM6IFJlbmRlck1hdGVyaWFsUGFyYW1zKSB7XG4gICAgICB0aGlzLnRyYW5zcGFyZW50ID0gbWVzaFBhcmFtZXRlcnMudHJhbnNwYXJlbnRcblxuICAgICAgdGhpcy5zZXRTaGFkZXJzKClcblxuICAgICAgdGhpcy5tYXRlcmlhbCA9IG5ldyBSZW5kZXJNYXRlcmlhbCh0aGlzLnJlbmRlcmVyLCBtZXNoUGFyYW1ldGVycylcbiAgICAgIC8vIGFkZCBldmVudHVhbCB0ZXh0dXJlcyBwYXNzZWQgYXMgcGFyYW1ldGVyc1xuICAgICAgdGhpcy5tYXRlcmlhbC5vcHRpb25zLnRleHR1cmVzXG4gICAgICAgID8uZmlsdGVyKCh0ZXh0dXJlKSA9PiB0ZXh0dXJlIGluc3RhbmNlb2YgVGV4dHVyZSlcbiAgICAgICAgLmZvckVhY2goKHRleHR1cmUpID0+IHRoaXMub25UZXh0dXJlQWRkZWQodGV4dHVyZSkpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogU2V0IE1lc2ggbWF0ZXJpYWwgYXR0cmlidXRlc1xuICAgICAqL1xuICAgIHNldE1hdGVyaWFsR2VvbWV0cnlBdHRyaWJ1dGVzKCkge1xuICAgICAgaWYgKHRoaXMubWF0ZXJpYWwgJiYgIXRoaXMubWF0ZXJpYWwuYXR0cmlidXRlcykge1xuICAgICAgICB0aGlzLm1hdGVyaWFsLnNldEF0dHJpYnV0ZXNGcm9tR2VvbWV0cnkodGhpcy5nZW9tZXRyeSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvKiBURVhUVVJFUyAqL1xuXG4gICAgLyoqXG4gICAgICogR2V0IG91ciB7QGxpbmsgUmVuZGVyTWF0ZXJpYWwjdGV4dHVyZXMgfCBSZW5kZXJNYXRlcmlhbCB0ZXh0dXJlcyBhcnJheX1cbiAgICAgKiBAcmVhZG9ubHlcbiAgICAgKi9cbiAgICBnZXQgdGV4dHVyZXMoKTogVGV4dHVyZVtdIHtcbiAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsPy50ZXh0dXJlcyB8fCBbXVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCBvdXIge0BsaW5rIFJlbmRlck1hdGVyaWFsI3JlbmRlclRleHR1cmVzIHwgUmVuZGVyTWF0ZXJpYWwgcmVuZGVyIHRleHR1cmVzIGFycmF5fVxuICAgICAqIEByZWFkb25seVxuICAgICAqL1xuICAgIGdldCByZW5kZXJUZXh0dXJlcygpOiBSZW5kZXJUZXh0dXJlW10ge1xuICAgICAgcmV0dXJuIHRoaXMubWF0ZXJpYWw/LnJlbmRlclRleHR1cmVzIHx8IFtdXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGEgbmV3IHtAbGluayBUZXh0dXJlfVxuICAgICAqIEBwYXJhbSBvcHRpb25zIC0ge0BsaW5rIFRleHR1cmVQYXJhbXMgfCBUZXh0dXJlIHBhcmFtZXRlcnN9XG4gICAgICogQHJldHVybnMgLSBuZXdseSBjcmVhdGVkIHtAbGluayBUZXh0dXJlfVxuICAgICAqL1xuICAgIGNyZWF0ZVRleHR1cmUob3B0aW9uczogVGV4dHVyZVBhcmFtcyk6IFRleHR1cmUge1xuICAgICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5uYW1lID0gJ3RleHR1cmUnICsgdGhpcy50ZXh0dXJlcy5sZW5ndGhcbiAgICAgIH1cblxuICAgICAgaWYgKCFvcHRpb25zLmxhYmVsKSB7XG4gICAgICAgIG9wdGlvbnMubGFiZWwgPSB0aGlzLm9wdGlvbnMubGFiZWwgKyAnICcgKyBvcHRpb25zLm5hbWVcbiAgICAgIH1cblxuICAgICAgY29uc3QgdGV4dHVyZSA9IG5ldyBUZXh0dXJlKHRoaXMucmVuZGVyZXIsIHsgLi4ub3B0aW9ucywgLi4udGhpcy5vcHRpb25zLnRleHR1cmVzT3B0aW9ucyB9KVxuXG4gICAgICB0aGlzLmFkZFRleHR1cmUodGV4dHVyZSlcblxuICAgICAgcmV0dXJuIHRleHR1cmVcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBZGQgYSB7QGxpbmsgVGV4dHVyZX1cbiAgICAgKiBAcGFyYW0gdGV4dHVyZSAtIHtAbGluayBUZXh0dXJlfSB0byBhZGRcbiAgICAgKi9cbiAgICBhZGRUZXh0dXJlKHRleHR1cmU6IFRleHR1cmUpIHtcbiAgICAgIHRoaXMubWF0ZXJpYWwuYWRkVGV4dHVyZSh0ZXh0dXJlKVxuICAgICAgdGhpcy5vblRleHR1cmVBZGRlZCh0ZXh0dXJlKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENhbGxiYWNrIHJ1biB3aGVuIGEgbmV3IHtAbGluayBUZXh0dXJlfSBoYXMgYmVlbiBhZGRlZFxuICAgICAqIEBwYXJhbSB0ZXh0dXJlIC0gbmV3bHkgY3JlYXRlZCBUZXh0dXJlXG4gICAgICovXG4gICAgb25UZXh0dXJlQWRkZWQodGV4dHVyZTogVGV4dHVyZSkge1xuICAgICAgdGV4dHVyZS5wYXJlbnRNZXNoID0gdGhpcyBhcyB1bmtub3duIGFzIFRleHR1cmVQYXJlbnRcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBDcmVhdGUgYSBuZXcge0BsaW5rIFJlbmRlclRleHR1cmV9XG4gICAgICogQHBhcmFtICBvcHRpb25zIC0ge0BsaW5rIFJlbmRlclRleHR1cmVQYXJhbXMgfCBSZW5kZXJUZXh0dXJlIHBhcmFtZXRlcnN9XG4gICAgICogQHJldHVybnMgLSBuZXdseSBjcmVhdGVkIHtAbGluayBSZW5kZXJUZXh0dXJlfVxuICAgICAqL1xuICAgIGNyZWF0ZVJlbmRlclRleHR1cmUob3B0aW9uczogUmVuZGVyVGV4dHVyZVBhcmFtcyk6IFJlbmRlclRleHR1cmUge1xuICAgICAgaWYgKCFvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgb3B0aW9ucy5uYW1lID0gJ3JlbmRlclRleHR1cmUnICsgdGhpcy5yZW5kZXJUZXh0dXJlcy5sZW5ndGhcbiAgICAgIH1cblxuICAgICAgY29uc3QgcmVuZGVyVGV4dHVyZSA9IG5ldyBSZW5kZXJUZXh0dXJlKHRoaXMucmVuZGVyZXIsIG9wdGlvbnMpXG5cbiAgICAgIHRoaXMuYWRkUmVuZGVyVGV4dHVyZShyZW5kZXJUZXh0dXJlKVxuXG4gICAgICByZXR1cm4gcmVuZGVyVGV4dHVyZVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFkZCBhIHtAbGluayBSZW5kZXJUZXh0dXJlfVxuICAgICAqIEBwYXJhbSByZW5kZXJUZXh0dXJlIC0ge0BsaW5rIFJlbmRlclRleHR1cmV9IHRvIGFkZFxuICAgICAqL1xuICAgIGFkZFJlbmRlclRleHR1cmUocmVuZGVyVGV4dHVyZTogUmVuZGVyVGV4dHVyZSkge1xuICAgICAgdGhpcy5tYXRlcmlhbC5hZGRUZXh0dXJlKHJlbmRlclRleHR1cmUpXG4gICAgfVxuXG4gICAgLyogQklORElOR1MgKi9cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB7QGxpbmsgUmVuZGVyTWF0ZXJpYWx9IHVuaWZvcm1zXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZ2V0IHVuaWZvcm1zKCk6IE1hdGVyaWFsWyd1bmlmb3JtcyddIHtcbiAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsPy51bmlmb3Jtc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEdldCB0aGUgY3VycmVudCB7QGxpbmsgUmVuZGVyTWF0ZXJpYWx9IHN0b3JhZ2VzXG4gICAgICogQHJlYWRvbmx5XG4gICAgICovXG4gICAgZ2V0IHN0b3JhZ2VzKCk6IE1hdGVyaWFsWydzdG9yYWdlcyddIHtcbiAgICAgIHJldHVybiB0aGlzLm1hdGVyaWFsPy5zdG9yYWdlc1xuICAgIH1cblxuICAgIC8qIFJFU0laRSAqL1xuXG4gICAgLyoqXG4gICAgICogUmVzaXplIHRoZSBNZXNoJ3MgcmVuZGVyIHRleHR1cmVzIG9ubHkgaWYgdGhleSdyZSBub3Qgc3RvcmFnZSB0ZXh0dXJlc1xuICAgICAqL1xuICAgIHJlc2l6ZVJlbmRlclRleHR1cmVzKCkge1xuICAgICAgdGhpcy5yZW5kZXJUZXh0dXJlc1xuICAgICAgICA/LmZpbHRlcigocmVuZGVyVGV4dHVyZSkgPT4gcmVuZGVyVGV4dHVyZS5vcHRpb25zLnVzYWdlICE9PSAnc3RvcmFnZVRleHR1cmUnKVxuICAgICAgICAuZm9yRWFjaCgocmVuZGVyVGV4dHVyZSkgPT4gcmVuZGVyVGV4dHVyZS5yZXNpemUoKSlcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXNpemUgdGhlIE1lc2gncyB0ZXh0dXJlc1xuICAgICAqIEBwYXJhbSBib3VuZGluZ1JlY3RcbiAgICAgKi9cbiAgICByZXNpemUoYm91bmRpbmdSZWN0PzogRE9NRWxlbWVudEJvdW5kaW5nUmVjdCB8IG51bGwpIHtcbiAgICAgIC8vIHJlc2l6ZSByZW5kZXIgdGV4dHVyZXMgZmlyc3RcbiAgICAgIHRoaXMucmVzaXplUmVuZGVyVGV4dHVyZXMoKVxuXG4gICAgICAvLyBAdHMtaWdub3JlXG4gICAgICBpZiAoc3VwZXIucmVzaXplKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmVcbiAgICAgICAgc3VwZXIucmVzaXplKGJvdW5kaW5nUmVjdClcbiAgICAgIH1cblxuICAgICAgLy8gcmVzaXplIHRleHR1cmVzXG4gICAgICB0aGlzLnRleHR1cmVzPy5mb3JFYWNoKCh0ZXh0dXJlKSA9PiB7XG4gICAgICAgIHRleHR1cmUucmVzaXplKClcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuX29uQWZ0ZXJSZXNpemVDYWxsYmFjayAmJiB0aGlzLl9vbkFmdGVyUmVzaXplQ2FsbGJhY2soKVxuICAgIH1cblxuICAgIC8qIEVWRU5UUyAqL1xuXG4gICAgLyoqXG4gICAgICogQXNzaWduIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gX29uUmVhZHlDYWxsYmFja1xuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biB3aGVuIHtAbGluayBNZXNoQmFzZX0gaXMgcmVhZHlcbiAgICAgKiBAcmV0dXJucyAtIG91ciBNZXNoXG4gICAgICovXG4gICAgb25SZWFkeShjYWxsYmFjazogKCkgPT4gdm9pZCk6IE1lc2hCYXNlIHwgUHJvamVjdGVkTWVzaEJhc2VDbGFzcyB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25SZWFkeUNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ24gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBfb25CZWZvcmVSZW5kZXJDYWxsYmFja1xuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biBqdXN0IGJlZm9yZSB7QGxpbmsgTWVzaEJhc2V9IHdpbGwgYmUgcmVuZGVyZWRcbiAgICAgKiBAcmV0dXJucyAtIG91ciBNZXNoXG4gICAgICovXG4gICAgb25CZWZvcmVSZW5kZXIoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBNZXNoQmFzZSB8IFByb2plY3RlZE1lc2hCYXNlQ2xhc3Mge1xuICAgICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICAgIHRoaXMuX29uQmVmb3JlUmVuZGVyQ2FsbGJhY2sgPSBjYWxsYmFja1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFzc2lnbiBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIF9vblJlbmRlckNhbGxiYWNrXG4gICAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIHdoZW4ge0BsaW5rIE1lc2hCYXNlfSBpcyByZW5kZXJlZFxuICAgICAqIEByZXR1cm5zIC0gb3VyIE1lc2hcbiAgICAgKi9cbiAgICBvblJlbmRlcihjYWxsYmFjazogKCkgPT4gdm9pZCk6IE1lc2hCYXNlIHwgUHJvamVjdGVkTWVzaEJhc2VDbGFzcyB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25SZW5kZXJDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0aGlzXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXNzaWduIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gX29uQWZ0ZXJSZW5kZXJDYWxsYmFja1xuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biBqdXN0IGFmdGVyIHtAbGluayBNZXNoQmFzZX0gaGFzIGJlZW4gcmVuZGVyZWRcbiAgICAgKiBAcmV0dXJucyAtIG91ciBNZXNoXG4gICAgICovXG4gICAgb25BZnRlclJlbmRlcihjYWxsYmFjazogKCkgPT4gdm9pZCk6IE1lc2hCYXNlIHwgUHJvamVjdGVkTWVzaEJhc2VDbGFzcyB7XG4gICAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgICAgdGhpcy5fb25BZnRlclJlbmRlckNhbGxiYWNrID0gY2FsbGJhY2tcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBBc3NpZ24gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBfb25CZWZvcmVSZW5kZXJDYWxsYmFja1xuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biBqdXN0IGFmdGVyIHtAbGluayBNZXNoQmFzZX0gaGFzIGJlZW4gcmVzaXplZFxuICAgICAqIEByZXR1cm5zIC0gb3VyIE1lc2hcbiAgICAgKi9cbiAgICBvbkFmdGVyUmVzaXplKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogTWVzaEJhc2UgfCBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzIHtcbiAgICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgICB0aGlzLl9vbkFmdGVyUmVzaXplQ2FsbGJhY2sgPSBjYWxsYmFja1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIC8qIFJFTkRFUiAqL1xuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGJlZm9yZSByZW5kZXJpbmcgdGhlIE1lc2hcbiAgICAgKiBTZXQgdGhlIGdlb21ldHJ5IGlmIG5lZWRlZCAoY3JlYXRlIGJ1ZmZlcnMgYW5kIGFkZCBhdHRyaWJ1dGVzIHRvIHRoZSB7QGxpbmsgUmVuZGVyTWF0ZXJpYWx9KVxuICAgICAqIFRoZW4gZXhlY3V0ZXMge0BsaW5rIFJlbmRlck1hdGVyaWFsI29uQmVmb3JlUmVuZGVyfTogY3JlYXRlIGl0cyBiaW5kIGdyb3VwcyBhbmQgcGlwZWxpbmUgaWYgbmVlZGVkIGFuZCBldmVudHVhbGx5IHVwZGF0ZSBpdHMgc3RydWN0XG4gICAgICovXG4gICAgb25CZWZvcmVSZW5kZXJQYXNzKCkge1xuICAgICAgaWYgKCF0aGlzLnJlbmRlcmVyLnJlYWR5KSByZXR1cm5cblxuICAgICAgaWYgKHRoaXMubWF0ZXJpYWwgJiYgdGhpcy5tYXRlcmlhbC5yZWFkeSAmJiB0aGlzLmdlb21ldHJ5ICYmIHRoaXMuZ2VvbWV0cnkucmVhZHkgJiYgIXRoaXMucmVhZHkpIHtcbiAgICAgICAgdGhpcy5yZWFkeSA9IHRydWVcbiAgICAgIH1cblxuICAgICAgdGhpcy5zZXRHZW9tZXRyeSgpXG5cbiAgICAgIHRoaXMuX29uQmVmb3JlUmVuZGVyQ2FsbGJhY2sgJiYgdGhpcy5fb25CZWZvcmVSZW5kZXJDYWxsYmFjaygpXG5cbiAgICAgIHRoaXMubWF0ZXJpYWwub25CZWZvcmVSZW5kZXIoKVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJlbmRlciBvdXIge0BsaW5rIE1lc2hCYXNlfSBpZiB0aGUge0BsaW5rIFJlbmRlck1hdGVyaWFsfSBpcyByZWFkeVxuICAgICAqIEBwYXJhbSBwYXNzIC0gY3VycmVudCByZW5kZXIgcGFzcyBlbmNvZGVyXG4gICAgICovXG4gICAgb25SZW5kZXJQYXNzKHBhc3M6IEdQVVJlbmRlclBhc3NFbmNvZGVyKSB7XG4gICAgICBpZiAoIXRoaXMubWF0ZXJpYWwucmVhZHkpIHJldHVyblxuXG4gICAgICB0aGlzLl9vblJlbmRlckNhbGxiYWNrICYmIHRoaXMuX29uUmVuZGVyQ2FsbGJhY2soKVxuXG4gICAgICAvLyByZW5kZXIgb3UgbWF0ZXJpYWxcbiAgICAgIHRoaXMubWF0ZXJpYWwucmVuZGVyKHBhc3MpXG4gICAgICAvLyB0aGVuIHJlbmRlciBvdXIgZ2VvbWV0cnlcbiAgICAgIHRoaXMuZ2VvbWV0cnkucmVuZGVyKHBhc3MpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQ2FsbGVkIGFmdGVyIGhhdmluZyByZW5kZXJlZCB0aGUgTWVzaFxuICAgICAqL1xuICAgIG9uQWZ0ZXJSZW5kZXJQYXNzKCkge1xuICAgICAgdGhpcy5fb25BZnRlclJlbmRlckNhbGxiYWNrICYmIHRoaXMuX29uQWZ0ZXJSZW5kZXJDYWxsYmFjaygpXG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmVuZGVyIG91ciBNZXNoXG4gICAgICogLSBFeGVjdXRlIHtAbGluayBvbkJlZm9yZVJlbmRlclBhc3N9XG4gICAgICogLSBTdG9wIGhlcmUgaWYge0BsaW5rIFJlbmRlcmVyfSBpcyBub3QgcmVhZHkgb3IgTWVzaCBpcyBub3Qge0BsaW5rIHZpc2libGV9XG4gICAgICogLSBFeGVjdXRlIHN1cGVyIHJlbmRlciBjYWxsIGlmIGl0IGV4aXN0c1xuICAgICAqIC0ge0BsaW5rIG9uUmVuZGVyUGFzcyB8IHJlbmRlcn0gb3VyIHtAbGluayBtYXRlcmlhbH0gYW5kIHtAbGluayBnZW9tZXRyeX1cbiAgICAgKiAtIEV4ZWN1dGUge0BsaW5rIG9uQWZ0ZXJSZW5kZXJQYXNzfVxuICAgICAqIEBwYXJhbSBwYXNzIC0gY3VycmVudCByZW5kZXIgcGFzcyBlbmNvZGVyXG4gICAgICovXG4gICAgcmVuZGVyKHBhc3M6IEdQVVJlbmRlclBhc3NFbmNvZGVyKSB7XG4gICAgICB0aGlzLm9uQmVmb3JlUmVuZGVyUGFzcygpXG5cbiAgICAgIC8vIG5vIHBvaW50IHRvIHJlbmRlciBpZiB0aGUgV2ViR1BVIGRldmljZSBpcyBub3QgcmVhZHlcbiAgICAgIGlmICghdGhpcy5yZW5kZXJlci5yZWFkeSB8fCAhdGhpcy52aXNpYmxlKSByZXR1cm5cblxuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaWYgKHN1cGVyLnJlbmRlcikge1xuICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgIHN1cGVyLnJlbmRlcigpXG4gICAgICB9XG5cbiAgICAgICF0aGlzLnJlbmRlcmVyLnByb2R1Y3Rpb24gJiYgcGFzcy5wdXNoRGVidWdHcm91cCh0aGlzLm9wdGlvbnMubGFiZWwpXG5cbiAgICAgIHRoaXMub25SZW5kZXJQYXNzKHBhc3MpXG5cbiAgICAgICF0aGlzLnJlbmRlcmVyLnByb2R1Y3Rpb24gJiYgcGFzcy5wb3BEZWJ1Z0dyb3VwKClcblxuICAgICAgdGhpcy5vbkFmdGVyUmVuZGVyUGFzcygpXG4gICAgfVxuXG4gICAgLyogREVTVFJPWSAqL1xuXG4gICAgLyoqXG4gICAgICogUmVtb3ZlIHRoZSBNZXNoIGZyb20gdGhlIHtAbGluayBjb3JlL3NjZW5lcy9TY2VuZS5TY2VuZSB8IFNjZW5lfSBhbmQgZGVzdHJveSBpdFxuICAgICAqL1xuICAgIHJlbW92ZSgpIHtcbiAgICAgIHRoaXMucmVtb3ZlRnJvbVNjZW5lKClcbiAgICAgIHRoaXMuZGVzdHJveSgpXG5cbiAgICAgIC8vIGlmIHRoZSByZW5kZXJlciBkb2VzIG5vdCBjb250YWluIGFueSBtZXNoZXMgYW55IG1vcmVcbiAgICAgIC8vIGNsZWFyIGl0XG4gICAgICBpZiAoIXRoaXMucmVuZGVyZXIubWVzaGVzLmxlbmd0aCkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLm9uQmVmb3JlUmVuZGVyU2NlbmUuYWRkKFxuICAgICAgICAgIChjb21tYW5kRW5jb2RlcikgPT4ge1xuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5mb3JjZUNsZWFyKGNvbW1hbmRFbmNvZGVyKVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBvbmNlOiB0cnVlIH1cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERlc3Ryb3kgdGhlIE1lc2hcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgaWYgKHN1cGVyLmRlc3Ryb3kpIHtcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxuICAgICAgICBzdXBlci5kZXN0cm95KClcbiAgICAgIH1cblxuICAgICAgdGhpcy5tYXRlcmlhbD8uZGVzdHJveSgpXG5cbiAgICAgIC8vIHJlbW92ZSBnZW9tZXRyeSBidWZmZXJzIGZyb20gZGV2aWNlIGNhY2hlXG4gICAgICB0aGlzLmdlb21ldHJ5LnZlcnRleEJ1ZmZlcnMuZm9yRWFjaCgodmVydGV4QnVmZmVyKSA9PiB7XG4gICAgICAgIC8vIHVzZSBvcmlnaW5hbCB2ZXJ0ZXggYnVmZmVyIGxhYmVsIGluIGNhc2UgaXQgaGFzIGJlZW4gc3dhcHBlZCAodXN1YWxseSBieSBhIGNvbXB1dGUgcGFzcylcbiAgICAgICAgdGhpcy5yZW5kZXJlci5yZW1vdmVCdWZmZXIoXG4gICAgICAgICAgdmVydGV4QnVmZmVyLmJ1ZmZlcixcbiAgICAgICAgICB0aGlzLm9wdGlvbnMubGFiZWwgKyAnIGdlb21ldHJ5OiAnICsgdmVydGV4QnVmZmVyLm5hbWUgKyAnIGJ1ZmZlcidcbiAgICAgICAgKVxuICAgICAgfSlcblxuICAgICAgaWYgKCdpbmRleEJ1ZmZlcicgaW4gdGhpcy5nZW9tZXRyeSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLnJlbW92ZUJ1ZmZlcih0aGlzLmdlb21ldHJ5LmluZGV4QnVmZmVyLmJ1ZmZlcilcbiAgICAgIH1cblxuICAgICAgdGhpcy5nZW9tZXRyeT8uZGVzdHJveSgpXG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCB7IE1lc2hCYXNlTWl4aW4gfVxuIiwiaW1wb3J0IHsgUGxhbmVHZW9tZXRyeSB9IGZyb20gJy4uL2NvcmUvZ2VvbWV0cmllcy9QbGFuZUdlb21ldHJ5J1xuXG4vKipcbiAqIFVzZWQgdG8gY2FjaGUge0BsaW5rIFBsYW5lR2VvbWV0cnl9IGFuZCBhdm9pZCBhcyBtYW55IGxhcmdlIGFycmF5IGNvbXB1dGF0aW9ucyBhcyBwb3NzaWJsZS48YnI+XG4gKiBDb3VsZCBiZSBpbXByb3ZlZCB0byBoYW5kbGUgb3RoZXIgY2FjaGVzLlxuICovXG5leHBvcnQgY2xhc3MgQ2FjaGVNYW5hZ2VyIHtcbiAgLyoqIEFycmF5IG9mIGNhY2hlZCB7QGxpbmsgUGxhbmVHZW9tZXRyeX0gKi9cbiAgcGxhbmVHZW9tZXRyaWVzOiBQbGFuZUdlb21ldHJ5W11cblxuICAvKipcbiAgICogQ2FjaGVNYW5hZ2VyIGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnBsYW5lR2VvbWV0cmllcyA9IFtdXG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgYSBnaXZlbiB7QGxpbmsgUGxhbmVHZW9tZXRyeX0gaXMgYWxyZWFkeSBjYWNoZWQgYmFzZWQgb24gaXRzIHtAbGluayBQbGFuZUdlb21ldHJ5I2RlZmluaXRpb24uaWQgfCBkZWZpbml0aW9uIGlkfVxuICAgKiBAcGFyYW0gcGxhbmVHZW9tZXRyeSAtIHtAbGluayBQbGFuZUdlb21ldHJ5fSB0byBjaGVja1xuICAgKiBAcmV0dXJucyAtIHtAbGluayBQbGFuZUdlb21ldHJ5fSBmb3VuZCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgKi9cbiAgZ2V0UGxhbmVHZW9tZXRyeShwbGFuZUdlb21ldHJ5OiBQbGFuZUdlb21ldHJ5KTogUGxhbmVHZW9tZXRyeSB8IG51bGwge1xuICAgIHJldHVybiB0aGlzLnBsYW5lR2VvbWV0cmllcy5maW5kKChlbGVtZW50KSA9PiBlbGVtZW50LmRlZmluaXRpb24uaWQgPT09IHBsYW5lR2VvbWV0cnkuZGVmaW5pdGlvbi5pZClcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIGdpdmVuIHtAbGluayBQbGFuZUdlb21ldHJ5fSBpcyBhbHJlYWR5IGNhY2hlZCBiYXNlZCBvbiBpdHMge0BsaW5rIFBsYW5lR2VvbWV0cnkjZGVmaW5pdGlvbiB8IGRlZmluaXRpb24gaWR9XG4gICAqIEBwYXJhbSBwbGFuZUdlb21ldHJ5SUQgLSB7QGxpbmsgUGxhbmVHZW9tZXRyeSNkZWZpbml0aW9uLmlkIHwgUGxhbmVHZW9tZXRyeSBkZWZpbml0aW9uIGlkfVxuICAgKiBAcmV0dXJucyAtIHtAbGluayBQbGFuZUdlb21ldHJ5fSBmb3VuZCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgKi9cbiAgZ2V0UGxhbmVHZW9tZXRyeUJ5SUQocGxhbmVHZW9tZXRyeUlEOiBudW1iZXIpOiBQbGFuZUdlb21ldHJ5IHwgbnVsbCB7XG4gICAgcmV0dXJuIHRoaXMucGxhbmVHZW9tZXRyaWVzLmZpbmQoKGVsZW1lbnQpID0+IGVsZW1lbnQuZGVmaW5pdGlvbi5pZCA9PT0gcGxhbmVHZW9tZXRyeUlEKVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBQbGFuZUdlb21ldHJ5fSB0byBvdXIgY2FjaGUge0BsaW5rIHBsYW5lR2VvbWV0cmllc30gYXJyYXlcbiAgICogQHBhcmFtIHBsYW5lR2VvbWV0cnlcbiAgICovXG4gIGFkZFBsYW5lR2VvbWV0cnkocGxhbmVHZW9tZXRyeTogUGxhbmVHZW9tZXRyeSkge1xuICAgIHRoaXMucGxhbmVHZW9tZXRyaWVzLnB1c2gocGxhbmVHZW9tZXRyeSlcbiAgfVxuXG4gIC8qKlxuICAgKiBEZXN0cm95IG91ciB7QGxpbmsgQ2FjaGVNYW5hZ2VyfVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnBsYW5lR2VvbWV0cmllcyA9IFtdXG4gIH1cbn1cblxuLyoqIEBleHBvcnRzIEBjb25zdCBjYWNoZU1hbmFnZXIgLSB7QGxpbmsgQ2FjaGVNYW5hZ2VyfSBjbGFzcyBvYmplY3QgKi9cbmV4cG9ydCBjb25zdCBjYWNoZU1hbmFnZXIgPSBuZXcgQ2FjaGVNYW5hZ2VyKCkgYXMgQ2FjaGVNYW5hZ2VyXG4iLCJpbXBvcnQgeyBNZXNoQmFzZU1peGluLCBNZXNoQmFzZVJlbmRlclBhcmFtcyB9IGZyb20gJy4vbWl4aW5zL01lc2hCYXNlTWl4aW4nXG5pbXBvcnQgeyBpc1JlbmRlcmVyLCBSZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmVycy91dGlscydcbmltcG9ydCB7IFBsYW5lR2VvbWV0cnkgfSBmcm9tICcuLi9nZW9tZXRyaWVzL1BsYW5lR2VvbWV0cnknXG5pbXBvcnQgeyBET01FbGVtZW50Qm91bmRpbmdSZWN0LCBSZWN0QkJveCB9IGZyb20gJy4uL0RPTS9ET01FbGVtZW50J1xuaW1wb3J0IHsgVmVjMiB9IGZyb20gJy4uLy4uL21hdGgvVmVjMidcbmltcG9ydCB7IGNhY2hlTWFuYWdlciB9IGZyb20gJy4uLy4uL3V0aWxzL0NhY2hlTWFuYWdlcidcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vLi4vY3VydGFpbnMvR1BVQ3VydGFpbnMnXG5cbi8qKlxuICogQ3JlYXRlIGEgMXgxIHF1YWQgKG9yIHBsYW5lKSBjb3ZlcmluZyB0aGUgZnVsbCB2aWV3cG9ydCwgdXNlZnVsIGZvciBwb3N0cHJvY2Vzc2luZyBvciBiYWNrZ3JvdW5kIGVmZmVjdHMuXG4gKlxuICogSXQgY29uc2lzdHMgb2YgYSB7QGxpbmsgUGxhbmVHZW9tZXRyeX0gYW5kIHtAbGluayBjb3JlL21hdGVyaWFscy9SZW5kZXJNYXRlcmlhbC5SZW5kZXJNYXRlcmlhbCB8IFJlbmRlck1hdGVyaWFsfSBhbmQgYSBmZXcgdXRpbGl0aWVzIG1ldGhvZCB0byBoZWxwIGNyZWF0ZSB7QGxpbmsgY29yZS90ZXh0dXJlcy9UZXh0dXJlLlRleHR1cmUgfCBUZXh0dXJlfSBhbmQge0BsaW5rIGNvcmUvdGV4dHVyZXMvUmVuZGVyVGV4dHVyZS5SZW5kZXJUZXh0dXJlIHwgUmVuZGVyVGV4dHVyZX0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIHNldCBvdXIgbWFpbiBHUFVDdXJ0YWlucyBpbnN0YW5jZVxuICogY29uc3QgZ3B1Q3VydGFpbnMgPSBuZXcgR1BVQ3VydGFpbnMoe1xuICogICBjb250YWluZXI6ICcjY2FudmFzJyAvLyBzZWxlY3RvciBvZiBvdXIgV2ViR1BVIGNhbnZhcyBjb250YWluZXJcbiAqIH0pXG4gKlxuICogLy8gc2V0IHRoZSBHUFUgZGV2aWNlXG4gKiAvLyBub3RlIHRoaXMgaXMgYXN5bmNocm9ub3VzXG4gKiBhd2FpdCBncHVDdXJ0YWlucy5zZXREZXZpY2UoKVxuICpcbiAqIC8vIGNyZWF0ZSBhIGZ1bGxzY3JlZW4gcGxhbmVcbiAqIC8vIHdpbGwgdXNlIHRoZSBub3JtYWxzIGNvbG9ycyBhcyBkZWZhdWx0IHNoYWRpbmdcbiAqIGNvbnN0IGZ1bGxzY3JlZW5QbGFuZSA9IG5ldyBGdWxsc2NyZWVuUGxhbmUoZ3B1Q3VydGFpbnMsIHtcbiAqICAgbGFiZWw6ICdNeSBmdWxsc2NyZWVuIHBsYW5lJyxcbiAqICAgc2hhZGVyczoge1xuICogICAgIGZyYWdtZW50OiB7XG4gKiAgICAgICBjb2RlOiBmcmFnbWVudENvZGUsIC8vIGFzc3VtZSBpdCBpcyBhIHZhbGlkIFdHU0wgZnJhZ21lbnQgc2hhZGVyXG4gKiAgICAgfSxcbiAqICAgfSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEZ1bGxzY3JlZW5QbGFuZSBleHRlbmRzIE1lc2hCYXNlTWl4aW4oY2xhc3Mge30pIHtcbiAgLyoqIFRoZSB0eXBlIG9mIHRoZSB7QGxpbmsgRnVsbHNjcmVlblBsYW5lfSAqL1xuICB0eXBlOiBzdHJpbmdcbiAgLyoqIE9iamVjdCBkZWZpbmluZyB0aGUgIHtAbGluayBGdWxsc2NyZWVuUGxhbmV9IHNpemUgKi9cbiAgc2l6ZToge1xuICAgIC8qKiBkb2N1bWVudCBIVE1MIHNpemUgKi9cbiAgICBkb2N1bWVudDogUmVjdEJCb3hcbiAgfVxuXG4gIC8qKlxuICAgKiBGdWxsc2NyZWVuUGxhbmUgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0ge0BsaW5rIFJlbmRlcmVyfSBvYmplY3Qgb3Ige0BsaW5rIEdQVUN1cnRhaW5zfSBjbGFzcyBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgRnVsbHNjcmVlblBsYW5lfVxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBNZXNoQmFzZVJlbmRlclBhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZSB0byBjcmVhdGUgdGhpcyB7QGxpbmsgRnVsbHNjcmVlblBsYW5lfVxuICAgKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyIHwgR1BVQ3VydGFpbnMsIHBhcmFtZXRlcnMgPSB7fSBhcyBNZXNoQmFzZVJlbmRlclBhcmFtcykge1xuICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XG4gICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIFJlbmRlcmVyKVxuXG4gICAgaXNSZW5kZXJlcihyZW5kZXJlciwgcGFyYW1ldGVycy5sYWJlbCA/IHBhcmFtZXRlcnMubGFiZWwgKyAnIEZ1bGxzY3JlZW5RdWFkTWVzaCcgOiAnRnVsbHNjcmVlblF1YWRNZXNoJylcblxuICAgIC8vIGNhbiB3ZSBnZXQgYSBjYWNoZWQgZ2VvbWV0cnk/XG4gICAgbGV0IGdlb21ldHJ5ID0gY2FjaGVNYW5hZ2VyLmdldFBsYW5lR2VvbWV0cnlCeUlEKDIpIC8vIDEgKiAxICsgMVxuXG4gICAgaWYgKCFnZW9tZXRyeSkge1xuICAgICAgLy8gd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgcGxhbmUgZ2VvbWV0cnlcbiAgICAgIGdlb21ldHJ5ID0gbmV3IFBsYW5lR2VvbWV0cnkoeyB3aWR0aFNlZ21lbnRzOiAxLCBoZWlnaHRTZWdtZW50czogMSB9KVxuICAgICAgY2FjaGVNYW5hZ2VyLmFkZFBsYW5lR2VvbWV0cnkoZ2VvbWV0cnkpXG4gICAgfVxuXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIHN1cGVyKHJlbmRlcmVyLCBudWxsLCB7IGdlb21ldHJ5LCAuLi5wYXJhbWV0ZXJzIH0pXG5cbiAgICB0aGlzLnNpemUgPSB7XG4gICAgICBkb2N1bWVudDoge1xuICAgICAgICB3aWR0aDogdGhpcy5yZW5kZXJlci5ib3VuZGluZ1JlY3Qud2lkdGgsXG4gICAgICAgIGhlaWdodDogdGhpcy5yZW5kZXJlci5ib3VuZGluZ1JlY3QuaGVpZ2h0LFxuICAgICAgICB0b3A6IHRoaXMucmVuZGVyZXIuYm91bmRpbmdSZWN0LnRvcCxcbiAgICAgICAgbGVmdDogdGhpcy5yZW5kZXJlci5ib3VuZGluZ1JlY3QubGVmdCxcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ0Z1bGxzY3JlZW5RdWFkTWVzaCdcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemUgb3VyIHtAbGluayBGdWxsc2NyZWVuUGxhbmV9XG4gICAqIEBwYXJhbSBib3VuZGluZ1JlY3QgLSB0aGUgbmV3IGJvdW5kaW5nIHJlY3RhbmdsZVxuICAgKi9cbiAgcmVzaXplKGJvdW5kaW5nUmVjdDogRE9NRWxlbWVudEJvdW5kaW5nUmVjdCB8IG51bGwgPSBudWxsKSB7XG4gICAgdGhpcy5zaXplLmRvY3VtZW50ID0gYm91bmRpbmdSZWN0ID8/IHRoaXMucmVuZGVyZXIuYm91bmRpbmdSZWN0XG5cbiAgICBzdXBlci5yZXNpemUoYm91bmRpbmdSZWN0KVxuICB9XG5cbiAgLyoqXG4gICAqIFRha2UgdGhlIHBvaW50ZXIge0BsaW5rIFZlYzIgfCB2ZWN0b3J9IHBvc2l0aW9uIHJlbGF0aXZlIHRvIHRoZSBkb2N1bWVudCBhbmQgcmV0dXJucyBpdCByZWxhdGl2ZSB0byBvdXIge0BsaW5rIEZ1bGxzY3JlZW5QbGFuZX1cbiAgICogSXQgcmFuZ2VzIGZyb20gLTEgdG8gMSBvbiBib3RoIGF4aXNcbiAgICogQHBhcmFtIG1vdXNlQ29vcmRzIC0gcG9pbnRlciB7QGxpbmsgVmVjMiB8IHZlY3Rvcn0gY29vcmRpbmF0ZXNcbiAgICogQHJldHVybnMgLSB0aGUgbWFwcGVkIHtAbGluayBWZWMyIHwgdmVjdG9yfSBjb29yZGluYXRlcyBpbiB0aGUgWy0xLCAxXSByYW5nZVxuICAgKi9cbiAgbW91c2VUb1BsYW5lQ29vcmRzKG1vdXNlQ29vcmRzOiBWZWMyID0gbmV3IFZlYzIoKSk6IFZlYzIge1xuICAgIC8vIG1vdXNlIHBvc2l0aW9uIGNvbnZlcnNpb24gZnJvbSBkb2N1bWVudCB0byBwbGFuZSBzcGFjZVxuICAgIHJldHVybiBuZXcgVmVjMihcbiAgICAgICgobW91c2VDb29yZHMueCAtIHRoaXMuc2l6ZS5kb2N1bWVudC5sZWZ0KSAvIHRoaXMuc2l6ZS5kb2N1bWVudC53aWR0aCkgKiAyIC0gMSxcbiAgICAgIDEgLSAoKG1vdXNlQ29vcmRzLnkgLSB0aGlzLnNpemUuZG9jdW1lbnQudG9wKSAvIHRoaXMuc2l6ZS5kb2N1bWVudC5oZWlnaHQpICogMlxuICAgIClcbiAgfVxufVxuIiwiaW1wb3J0IHsgT2JqZWN0M0QsIE9iamVjdDNETWF0cmljZXNUeXBlLCBPYmplY3QzRFRyYW5zZm9ybU1hdHJpeCB9IGZyb20gJy4vT2JqZWN0M0QnXHJcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vLi4vY3VydGFpbnMvR1BVQ3VydGFpbnMnXHJcbmltcG9ydCB7IENhbWVyYVJlbmRlcmVyLCBpc0NhbWVyYVJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL3V0aWxzJ1xyXG5pbXBvcnQgeyBNYXQ0IH0gZnJvbSAnLi4vLi4vbWF0aC9NYXQ0J1xyXG5pbXBvcnQgeyBDYW1lcmEgfSBmcm9tICcuLi9jYW1lcmEvQ2FtZXJhJ1xyXG5cclxuLyoqIERlZmluZXMgYWxsIGtpbmQgb2YgcG9zc2libGUge0BsaW5rIFByb2plY3RlZE9iamVjdDNEfSBtYXRyaXggdHlwZXMgKi9cclxuZXhwb3J0IHR5cGUgUHJvamVjdGVkT2JqZWN0M0RNYXRyaWNlc1R5cGUgPSBPYmplY3QzRE1hdHJpY2VzVHlwZSB8ICdtb2RlbFZpZXcnIHwgJ21vZGVsVmlld1Byb2plY3Rpb24nXHJcbi8qKiBEZWZpbmVzIGFsbCBwb3NzaWJsZSB7QGxpbmsgT2JqZWN0M0RUcmFuc2Zvcm1NYXRyaXggfCBtYXRyaXggb2JqZWN0fSB1c2VkIGJ5IG91ciB7QGxpbmsgUHJvamVjdGVkT2JqZWN0M0R9ICovXHJcbmV4cG9ydCB0eXBlIFByb2plY3RlZE9iamVjdDNETWF0cmljZXMgPSBSZWNvcmQ8UHJvamVjdGVkT2JqZWN0M0RNYXRyaWNlc1R5cGUsIE9iamVjdDNEVHJhbnNmb3JtTWF0cml4PlxyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gYXBwbHkgdGhlIHtAbGluayBDYW1lcmEjcHJvamVjdGlvbk1hdHJpeCB8IHByb2plY3Rpb259IGFuZCB7QGxpbmsgQ2FtZXJhI3ZpZXdNYXRyaXggfCB2aWV3fSBtYXRyaWNlcyBvZiBhIHtAbGluayBDYW1lcmF9IHRvIGFuIHtAbGluayBPYmplY3QzRH0sIGluIG9yZGVyIHRvIGNvbXB1dGUge0BsaW5rIFByb2plY3RlZE9iamVjdDNEI21vZGVsVmlld01hdHJpeCB8IG1vZGVsVmlld30gYW5kIHtAbGluayBQcm9qZWN0ZWRPYmplY3QzRCNtb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4IHwgbW9kZWxWaWV3UHJvamVjdGlvbn0gbWF0cmljZXMuXHJcbiAqL1xyXG5leHBvcnQgY2xhc3MgUHJvamVjdGVkT2JqZWN0M0QgZXh0ZW5kcyBPYmplY3QzRCB7XHJcbiAgLyoqIHtAbGluayBDYW1lcmEgfCBDYW1lcmF9IG9iamVjdCB1c2VkIHRvIGNvbXB1dGUge0BsaW5rIFByb2plY3RlZE9iamVjdDNEI21vZGVsVmlld01hdHJpeCB8IG1vZGVsIHZpZXd9IGFuZCB7QGxpbmsgUHJvamVjdGVkT2JqZWN0M0QjbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCB8IG1vZGVsIHZpZXcgcHJvamVjdGlvbn0gbWF0cmljZXMgKi9cclxuICBjYW1lcmE6IENhbWVyYVxyXG5cclxuICAvKioge0BsaW5rIFByb2plY3RlZE9iamVjdDNETWF0cmljZXMgfCBNYXRyaWNlcyBvYmplY3R9IG9mIHRoZSB7QGxpbmsgUHJvamVjdGVkT2JqZWN0M0R9ICovXHJcbiAgbWF0cmljZXM6IFByb2plY3RlZE9iamVjdDNETWF0cmljZXNcclxuXHJcbiAgLyoqXHJcbiAgICogUHJvamVjdGVkT2JqZWN0M0QgY29uc3RydWN0b3JcclxuICAgKiBAcGFyYW0gcmVuZGVyZXIgLSB7QGxpbmsgQ2FtZXJhUmVuZGVyZXJ9IG9iamVjdCBvciB7QGxpbmsgR1BVQ3VydGFpbnN9IGNsYXNzIG9iamVjdCB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBQcm9qZWN0ZWRPYmplY3QzRH1cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogQ2FtZXJhUmVuZGVyZXIgfCBHUFVDdXJ0YWlucykge1xyXG4gICAgc3VwZXIoKVxyXG4gICAgLy8gd2UgY291bGQgcGFzcyBvdXIgY3VydGFpbnMgb2JqZWN0IE9SIG91ciBjdXJ0YWlucyByZW5kZXJlciBvYmplY3RcclxuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBDYW1lcmFSZW5kZXJlcilcclxuXHJcbiAgICBpc0NhbWVyYVJlbmRlcmVyKHJlbmRlcmVyLCAnUHJvamVjdGVkT2JqZWN0M0QnKVxyXG5cclxuICAgIHRoaXMuY2FtZXJhID0gcmVuZGVyZXIuY2FtZXJhXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZWxsIG91ciBwcm9qZWN0aW9uIG1hdHJpeCBzdGFjayB0byB1cGRhdGVcclxuICAgKi9cclxuICBhcHBseVBvc2l0aW9uKCkge1xyXG4gICAgc3VwZXIuYXBwbHlQb3NpdGlvbigpXHJcbiAgICB0aGlzLnNob3VsZFVwZGF0ZVByb2plY3Rpb25NYXRyaXhTdGFjaygpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZWxsIG91ciBwcm9qZWN0aW9uIG1hdHJpeCBzdGFjayB0byB1cGRhdGVcclxuICAgKi9cclxuICBhcHBseVJvdGF0aW9uKCkge1xyXG4gICAgc3VwZXIuYXBwbHlSb3RhdGlvbigpXHJcbiAgICB0aGlzLnNob3VsZFVwZGF0ZVByb2plY3Rpb25NYXRyaXhTdGFjaygpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZWxsIG91ciBwcm9qZWN0aW9uIG1hdHJpeCBzdGFjayB0byB1cGRhdGVcclxuICAgKi9cclxuICBhcHBseVNjYWxlKCkge1xyXG4gICAgc3VwZXIuYXBwbHlTY2FsZSgpXHJcbiAgICB0aGlzLnNob3VsZFVwZGF0ZVByb2plY3Rpb25NYXRyaXhTdGFjaygpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZWxsIG91ciBwcm9qZWN0aW9uIG1hdHJpeCBzdGFjayB0byB1cGRhdGVcclxuICAgKi9cclxuICBhcHBseVRyYW5zZm9ybU9yaWdpbigpIHtcclxuICAgIHN1cGVyLmFwcGx5VHJhbnNmb3JtT3JpZ2luKClcclxuICAgIHRoaXMuc2hvdWxkVXBkYXRlUHJvamVjdGlvbk1hdHJpeFN0YWNrKClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBvdXIgdHJhbnNmb3JtIGFuZCBwcm9qZWN0aW9uIG1hdHJpY2VzXHJcbiAgICovXHJcbiAgc2V0TWF0cmljZXMoKSB7XHJcbiAgICBzdXBlci5zZXRNYXRyaWNlcygpXHJcblxyXG4gICAgdGhpcy5tYXRyaWNlcyA9IHtcclxuICAgICAgLi4udGhpcy5tYXRyaWNlcyxcclxuICAgICAgbW9kZWxWaWV3OiB7XHJcbiAgICAgICAgbWF0cml4OiBuZXcgTWF0NCgpLFxyXG4gICAgICAgIHNob3VsZFVwZGF0ZTogZmFsc2UsXHJcbiAgICAgICAgb25VcGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgIC8vIG91ciBtb2RlbCB2aWV3IG1hdHJpeCBpcyBvdXIgbW9kZWwgbWF0cml4IG11bHRpcGxpZWQgd2l0aCBvdXIgY2FtZXJhIHZpZXcgbWF0cml4XHJcbiAgICAgICAgICB0aGlzLm1vZGVsVmlld01hdHJpeC5tdWx0aXBseU1hdHJpY2VzKHRoaXMudmlld01hdHJpeCwgdGhpcy53b3JsZE1hdHJpeClcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgICBtb2RlbFZpZXdQcm9qZWN0aW9uOiB7XHJcbiAgICAgICAgbWF0cml4OiBuZXcgTWF0NCgpLFxyXG4gICAgICAgIHNob3VsZFVwZGF0ZTogZmFsc2UsXHJcbiAgICAgICAgb25VcGRhdGU6ICgpID0+IHtcclxuICAgICAgICAgIC8vIG91ciBtb2RlbFZpZXdQcm9qZWN0aW9uIG1hdHJpeCwgdXNlZnVsIGZvciBib3VuZGluZyBib3ggY2FsY3VsYXRpb25zIGFuZCBmcnVzdHVtIGN1bGxpbmdcclxuICAgICAgICAgIC8vIHRoaXMgaXMgdGhlIHJlc3VsdCBvZiBvdXIgcHJvamVjdGlvbiBtYXRyaXggbXVsdGlwbGllZCBieSBvdXIgbW9kZWxWaWV3IG1hdHJpeFxyXG4gICAgICAgICAgdGhpcy5tb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4Lm11bHRpcGx5TWF0cmljZXModGhpcy5wcm9qZWN0aW9uTWF0cml4LCB0aGlzLm1vZGVsVmlld01hdHJpeClcclxuICAgICAgICB9LFxyXG4gICAgICB9LFxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IG91ciB7QGxpbmsgbW9kZWxWaWV3TWF0cml4IHwgbW9kZWwgdmlldyBtYXRyaXh9XHJcbiAgICovXHJcbiAgZ2V0IG1vZGVsVmlld01hdHJpeCgpOiBNYXQ0IHtcclxuICAgIHJldHVybiB0aGlzLm1hdHJpY2VzLm1vZGVsVmlldy5tYXRyaXhcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBvdXIge0BsaW5rIG1vZGVsVmlld01hdHJpeCB8IG1vZGVsIHZpZXcgbWF0cml4fVxyXG4gICAqIEBwYXJhbSB2YWx1ZSAtIG5ldyB7QGxpbmsgbW9kZWxWaWV3TWF0cml4IHwgbW9kZWwgdmlldyBtYXRyaXh9XHJcbiAgICovXHJcbiAgc2V0IG1vZGVsVmlld01hdHJpeCh2YWx1ZTogTWF0NCkge1xyXG4gICAgdGhpcy5tYXRyaWNlcy5tb2RlbFZpZXcubWF0cml4ID0gdmFsdWVcclxuICAgIHRoaXMubWF0cmljZXMubW9kZWxWaWV3LnNob3VsZFVwZGF0ZSA9IHRydWVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBvdXIge0BsaW5rIENhbWVyYSN2aWV3TWF0cml4IHwgY2FtZXJhIHZpZXcgbWF0cml4fVxyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIGdldCB2aWV3TWF0cml4KCk6IE1hdDQge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FtZXJhLnZpZXdNYXRyaXhcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBvdXIge0BsaW5rIENhbWVyYSNwcm9qZWN0aW9uTWF0cml4IHwgY2FtZXJhIHByb2plY3Rpb24gbWF0cml4fVxyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIGdldCBwcm9qZWN0aW9uTWF0cml4KCk6IE1hdDQge1xyXG4gICAgcmV0dXJuIHRoaXMuY2FtZXJhLnByb2plY3Rpb25NYXRyaXhcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCBvdXIge0BsaW5rIG1vZGVsVmlld1Byb2plY3Rpb25NYXRyaXggfCBtb2RlbCB2aWV3IHByb2plY3Rpb24gbWF0cml4fVxyXG4gICAqL1xyXG4gIGdldCBtb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4KCk6IE1hdDQge1xyXG4gICAgcmV0dXJuIHRoaXMubWF0cmljZXMubW9kZWxWaWV3UHJvamVjdGlvbi5tYXRyaXhcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCBvdXIge0BsaW5rIG1vZGVsVmlld1Byb2plY3Rpb25NYXRyaXggfCBtb2RlbCB2aWV3IHByb2plY3Rpb24gbWF0cml4fVxyXG4gICAqIEBwYXJhbSB2YWx1ZSAtIG5ldyB7QGxpbmsgbW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCB8IG1vZGVsIHZpZXcgcHJvamVjdGlvbiBtYXRyaXh9c1xyXG4gICAqL1xyXG4gIHNldCBtb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4KHZhbHVlOiBNYXQ0KSB7XHJcbiAgICB0aGlzLm1hdHJpY2VzLm1vZGVsVmlld1Byb2plY3Rpb24ubWF0cml4ID0gdmFsdWVcclxuICAgIHRoaXMubWF0cmljZXMubW9kZWxWaWV3UHJvamVjdGlvbi5zaG91bGRVcGRhdGUgPSB0cnVlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgb3VyIHByb2plY3Rpb24gbWF0cmljZXMgc2hvdWxkVXBkYXRlIGZsYWdzIHRvIHRydWUgKHRlbGwgdGhlbSB0byB1cGRhdGUpXHJcbiAgICovXHJcbiAgc2hvdWxkVXBkYXRlUHJvamVjdGlvbk1hdHJpeFN0YWNrKCkge1xyXG4gICAgdGhpcy5tYXRyaWNlcy5tb2RlbFZpZXcuc2hvdWxkVXBkYXRlID0gdHJ1ZVxyXG4gICAgdGhpcy5tYXRyaWNlcy5tb2RlbFZpZXdQcm9qZWN0aW9uLnNob3VsZFVwZGF0ZSA9IHRydWVcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZW4gdGhlIHdvcmxkIG1hdHJpeCB1cGRhdGUsIHRlbGwgb3VyIHByb2plY3Rpb24gbWF0cml4IHRvIHVwZGF0ZSBhcyB3ZWxsXHJcbiAgICovXHJcbiAgc2hvdWxkVXBkYXRlV29ybGRNYXRyaXgoKSB7XHJcbiAgICBzdXBlci5zaG91bGRVcGRhdGVXb3JsZE1hdHJpeCgpXHJcbiAgICB0aGlzLnNob3VsZFVwZGF0ZVByb2plY3Rpb25NYXRyaXhTdGFjaygpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUZWxsIGFsbCBvdXIgbWF0cmljZXMgdG8gdXBkYXRlXHJcbiAgICovXHJcbiAgc2hvdWxkVXBkYXRlTWF0cml4U3RhY2soKSB7XHJcbiAgICB0aGlzLnNob3VsZFVwZGF0ZU1vZGVsTWF0cml4KClcclxuICAgIHRoaXMuc2hvdWxkVXBkYXRlUHJvamVjdGlvbk1hdHJpeFN0YWNrKClcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgLyogd2dzbCAqLyBgXHJcbnN0cnVjdCBWZXJ0ZXhPdXRwdXQge1xyXG4gIEBidWlsdGluKHBvc2l0aW9uKSBwb3NpdGlvbjogdmVjNGYsXHJcbiAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyZixcclxuICBAbG9jYXRpb24oMSkgbm9ybWFsOiB2ZWMzZixcclxufTtcclxuXHJcbkB2ZXJ0ZXggZm4gbWFpbihcclxuICBhdHRyaWJ1dGVzOiBBdHRyaWJ1dGVzLFxyXG4pIC0+IFZlcnRleE91dHB1dCB7XHJcbiAgdmFyIHZzT3V0cHV0OiBWZXJ0ZXhPdXRwdXQ7XHJcblxyXG4gIHZzT3V0cHV0LnBvc2l0aW9uID0gZ2V0T3V0cHV0UG9zaXRpb24oYXR0cmlidXRlcy5wb3NpdGlvbik7XHJcbiAgdnNPdXRwdXQudXYgPSBhdHRyaWJ1dGVzLnV2O1xyXG4gIHZzT3V0cHV0Lm5vcm1hbCA9IGF0dHJpYnV0ZXMubm9ybWFsO1xyXG4gIFxyXG4gIHJldHVybiB2c091dHB1dDtcclxufWBcclxuIiwiZXhwb3J0IGRlZmF1bHQgLyogd2dzbCAqLyBgXG5zdHJ1Y3QgVlNPdXRwdXQge1xuICBAYnVpbHRpbihwb3NpdGlvbikgcG9zaXRpb246IHZlYzRmLFxuICBAbG9jYXRpb24oMCkgdXY6IHZlYzJmLFxuICBAbG9jYXRpb24oMSkgbm9ybWFsOiB2ZWMzZixcbn07XG5cbkBmcmFnbWVudCBmbiBtYWluKGZzSW5wdXQ6IFZTT3V0cHV0KSAtPiBAbG9jYXRpb24oMCkgdmVjNGYge1xuICAvLyBub3JtYWxzXG4gIHJldHVybiB2ZWM0KG5vcm1hbGl6ZShmc0lucHV0Lm5vcm1hbCkgKiAwLjUgKyAwLjUsIDEuMCk7XG59YFxuIiwiaW1wb3J0IHsgQ2FtZXJhUmVuZGVyZXIsIGlzQ2FtZXJhUmVuZGVyZXIgfSBmcm9tICcuLi8uLi9yZW5kZXJlcnMvdXRpbHMnXHJcbmltcG9ydCB7IERPTUZydXN0dW0gfSBmcm9tICcuLi8uLi9ET00vRE9NRnJ1c3R1bSdcclxuaW1wb3J0IHsgTWVzaEJhc2VDbGFzcywgTWVzaEJhc2VNaXhpbiwgTWVzaEJhc2VPcHRpb25zLCBNZXNoQmFzZVBhcmFtcywgTWl4aW5Db25zdHJ1Y3RvciB9IGZyb20gJy4vTWVzaEJhc2VNaXhpbidcclxuaW1wb3J0IHsgR1BVQ3VydGFpbnMgfSBmcm9tICcuLi8uLi8uLi9jdXJ0YWlucy9HUFVDdXJ0YWlucydcclxuaW1wb3J0IHsgRE9NRWxlbWVudEJvdW5kaW5nUmVjdCwgUmVjdENvb3JkcyB9IGZyb20gJy4uLy4uL0RPTS9ET01FbGVtZW50J1xyXG5pbXBvcnQgeyBSZW5kZXJNYXRlcmlhbFBhcmFtcyB9IGZyb20gJy4uLy4uLy4uL3R5cGVzL01hdGVyaWFscydcclxuaW1wb3J0IHsgUHJvamVjdGVkT2JqZWN0M0QgfSBmcm9tICcuLi8uLi9vYmplY3RzM0QvUHJvamVjdGVkT2JqZWN0M0QnXHJcbmltcG9ydCB7IERPTU9iamVjdDNEIH0gZnJvbSAnLi4vLi4vLi4vY3VydGFpbnMvb2JqZWN0czNEL0RPTU9iamVjdDNEJ1xyXG5pbXBvcnQgZGVmYXVsdF9wcm9qZWN0ZWRfdnNXZ3NsIGZyb20gJy4uLy4uL3NoYWRlcnMvY2h1bmtzL2RlZmF1bHRfcHJvamVjdGVkX3ZzLndnc2wnXHJcbmltcG9ydCBkZWZhdWx0X25vcm1hbF9mc1dnc2wgZnJvbSAnLi4vLi4vc2hhZGVycy9jaHVua3MvZGVmYXVsdF9ub3JtYWxfZnMud2dzbCdcclxuXHJcbi8qKlxyXG4gKiBCYXNlIHBhcmFtZXRlcnMgdXNlZCB0byBjcmVhdGUgYSBQcm9qZWN0ZWRNZXNoXHJcbiAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3RlZE1lc2hCYXNlUGFyYW1zIHtcclxuICAvKiogV2hldGhlciB0aGlzIFByb2plY3RlZE1lc2ggc2hvdWxkIGJlIGZydXN0dW0gY3VsbGVkIChub3QgZHJhd24gd2hlbiBvdXRzaWRlIG9mIHtAbGluayBDYW1lcmFSZW5kZXJlciNjYW1lcmEgfCBjYW1lcmF9IGZydXN0dW0pICovXHJcbiAgZnJ1c3R1bUN1bGxlZD86IGJvb2xlYW5cclxuICAvKiogTWFyZ2lucyAoaW4gcGl4ZWxzKSB0byBhcHBsaWVkIHRvIHRoZSB7QGxpbmsgUHJvamVjdGVkTWVzaEJhc2VDbGFzcyNkb21GcnVzdHVtIHwgRE9NIEZydXN0dW19IHRvIGRldGVybWluZSBpZiB0aGlzIFByb2plY3RlZE1lc2ggc2hvdWxkIGJlIGZydXN0dW0gY3VsbGVkIG9yIG5vdCAqL1xyXG4gIERPTUZydXN0dW1NYXJnaW5zPzogUmVjdENvb3Jkc1xyXG59XHJcblxyXG4vKiogUGFyYW1ldGVycyB1c2VkIHRvIGNyZWF0ZSBhIFByb2plY3RlZE1lc2ggKi9cclxuZXhwb3J0IGludGVyZmFjZSBQcm9qZWN0ZWRNZXNoUGFyYW1ldGVycyBleHRlbmRzIE1lc2hCYXNlUGFyYW1zLCBQcm9qZWN0ZWRNZXNoQmFzZVBhcmFtcyB7fVxyXG5cclxuLyoqIEBjb25zdCAtIERlZmF1bHQgUHJvamVjdGVkTWVzaCBwYXJhbWV0ZXJzIHRvIG1lcmdlIHdpdGggdXNlciBkZWZpbmVkIHBhcmFtZXRlcnMgKi9cclxuY29uc3QgZGVmYXVsdFByb2plY3RlZE1lc2hQYXJhbXM6IFByb2plY3RlZE1lc2hCYXNlUGFyYW1zID0ge1xyXG4gIC8vIGZydXN0dW0gY3VsbGluZyBhbmQgdmlzaWJpbGl0eVxyXG4gIGZydXN0dW1DdWxsZWQ6IHRydWUsXHJcbiAgRE9NRnJ1c3R1bU1hcmdpbnM6IHtcclxuICAgIHRvcDogMCxcclxuICAgIHJpZ2h0OiAwLFxyXG4gICAgYm90dG9tOiAwLFxyXG4gICAgbGVmdDogMCxcclxuICB9LFxyXG59XHJcblxyXG4vKiogQmFzZSBvcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMgUHJvamVjdGVkTWVzaCAqL1xyXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3RlZE1lc2hCYXNlT3B0aW9ucyBleHRlbmRzIE1lc2hCYXNlT3B0aW9ucywgUGFydGlhbDxQcm9qZWN0ZWRNZXNoQmFzZVBhcmFtcz4ge31cclxuXHJcbi8qKlxyXG4gKiBUaGlzIGNsYXNzIGRlc2NyaWJlcyB0aGUgcHJvcGVydGllcyBhbmQgbWV0aG9kcyB0byBzZXQgdXAgYSBQcm9qZWN0ZWQgTWVzaCAoaS5lLiBhIGJhc2ljIHtAbGluayBNZXNoQmFzZUNsYXNzIHwgTWVzaH0gd2l0aCB7QGxpbmsgUHJvamVjdGVkT2JqZWN0M0R9IHRyYW5zZm9ybWF0aW9ucyBtYXRyaWNlcyBhbmQgYSB7QGxpbmsgY29yZS9jYW1lcmEvQ2FtZXJhLkNhbWVyYSB8IENhbWVyYX0gdG8gdXNlIGZvciBwcm9qZWN0aW9uKSwgaW1wbGVtZW50ZWQgaW4gdGhlIHtAbGluayBQcm9qZWN0ZWRNZXNoQmFzZU1peGlufTpcclxuICogLSBIYW5kbGUgdGhlIGZydXN0dW0gY3VsbGluZyAoY2hlY2sgaWYgdGhlIHtAbGluayBQcm9qZWN0ZWRPYmplY3QzRH0gY3VycmVudGx5IGxpZXMgaW5zaWRlIHRoZSB7QGxpbmsgY29yZS9jYW1lcmEvQ2FtZXJhLkNhbWVyYSB8IENhbWVyYX0gZnJ1c3R1bSlcclxuICogLSBBZGQgY2FsbGJhY2tzIGZvciB3aGVuIHRoZSBNZXNoIGVudGVycyBvciBsZWF2ZXMgdGhlIHtAbGluayBjb3JlL2NhbWVyYS9DYW1lcmEuQ2FtZXJhIHwgQ2FtZXJhfSBmcnVzdHVtXHJcbiAqL1xyXG5leHBvcnQgZGVjbGFyZSBjbGFzcyBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzIGV4dGVuZHMgTWVzaEJhc2VDbGFzcyB7XHJcbiAgLyoqIFRoZSB7QGxpbmsgQ2FtZXJhUmVuZGVyZXJ9IHVzZWQgKi9cclxuICByZW5kZXJlcjogQ2FtZXJhUmVuZGVyZXJcclxuICAvKiogVGhlIFByb2plY3RlZE1lc2gge0BsaW5rIERPTUZydXN0dW19IGNsYXNzIG9iamVjdCAqL1xyXG4gIGRvbUZydXN0dW06IERPTUZydXN0dW1cclxuICAvKiogV2hldGhlciB0aGlzIFByb2plY3RlZE1lc2ggc2hvdWxkIGJlIGZydXN0dW0gY3VsbGVkIChub3QgZHJhd24gd2hlbiBvdXRzaWRlIG9mIHtAbGluayBDYW1lcmFSZW5kZXJlciNjYW1lcmEgfCBjYW1lcmF9IGZydXN0dW0pICovXHJcbiAgZnJ1c3R1bUN1bGxlZDogYm9vbGVhblxyXG4gIC8qKiBNYXJnaW5zIChpbiBwaXhlbHMpIHRvIGFwcGxpZWQgdG8gdGhlIHtAbGluayBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzI2RvbUZydXN0dW0gfCBET00gRnJ1c3R1bX0gdG8gZGV0ZXJtaW5lIGlmIHRoaXMgUHJvamVjdGVkTWVzaCBzaG91bGQgYmUgZnJ1c3R1bSBjdWxsZWQgb3Igbm90ICovXHJcbiAgRE9NRnJ1c3R1bU1hcmdpbnM6IFJlY3RDb29yZHNcclxuXHJcbiAgLy8gY2FsbGJhY2tzXHJcbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25SZUVudGVyVmlld30gY2FsbGJhY2sgKi9cclxuICBfb25SZUVudGVyVmlld0NhbGxiYWNrOiAoKSA9PiB2b2lkXHJcbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25MZWF2ZVZpZXd9IGNhbGxiYWNrICovXHJcbiAgX29uTGVhdmVWaWV3Q2FsbGJhY2s6ICgpID0+IHZvaWRcclxuXHJcbiAgLyoqXHJcbiAgICoge0BsaW5rIFByb2plY3RlZE1lc2hCYXNlQ2xhc3N9IGNvbnN0cnVjdG9yXHJcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0gb3VyIHtAbGluayBDYW1lcmFSZW5kZXJlcn0gY2xhc3Mgb2JqZWN0XHJcbiAgICogQHBhcmFtIGVsZW1lbnQgLSBhIERPTSBIVE1MIEVsZW1lbnQgdGhhdCBjYW4gYmUgYm91bmQgdG8gYSBNZXNoXHJcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgUHJvamVjdGVkTWVzaFBhcmFtZXRlcnMgfCBQcm9qZWN0ZWQgTWVzaCBiYXNlIHBhcmFtZXRlcnN9XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IENhbWVyYVJlbmRlcmVyLCBlbGVtZW50OiBIVE1MRWxlbWVudCB8IG51bGwsIHBhcmFtZXRlcnM6IFByb2plY3RlZE1lc2hQYXJhbWV0ZXJzKVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgZGVmYXVsdCBzaGFkZXJzIGlmIG9uZSBvciBib3RoIG9mIHRoZW0gYXJlIG1pc3NpbmdcclxuICAgKi9cclxuICBzZXRTaGFkZXJzKCk6IHZvaWRcclxuXHJcbiAgLyoqXHJcbiAgICogT3ZlcnJpZGUge0BsaW5rIE1lc2hCYXNlQ2xhc3N9IG1ldGhvZCB0byBhZGQgdGhlIGRvbUZydXN0dW1cclxuICAgKi9cclxuICBjb21wdXRlR2VvbWV0cnkoKTogdm9pZFxyXG5cclxuICAvKipcclxuICAgKiBTZXQgYSBNZXNoIG1hdHJpY2VzIHVuaWZvcm1zIGlucHV0cyB0aGVuIGNhbGwge0BsaW5rIE1lc2hCYXNlQ2xhc3N9IHN1cGVyIG1ldGhvZFxyXG4gICAqIEBwYXJhbSBtZXNoUGFyYW1ldGVycyAtIHtAbGluayBSZW5kZXJNYXRlcmlhbFBhcmFtcyB8IFJlbmRlck1hdGVyaWFsIHBhcmFtZXRlcnN9XHJcbiAgICovXHJcbiAgc2V0TWF0ZXJpYWwobWVzaFBhcmFtZXRlcnM6IFJlbmRlck1hdGVyaWFsUGFyYW1zKTogdm9pZFxyXG5cclxuICAvKipcclxuICAgKiBSZXNpemUgb3VyIE1lc2hcclxuICAgKiBAcGFyYW0gYm91bmRpbmdSZWN0IC0gdGhlIG5ldyBib3VuZGluZyByZWN0YW5nbGVcclxuICAgKi9cclxuICByZXNpemUoYm91bmRpbmdSZWN0OiBET01FbGVtZW50Qm91bmRpbmdSZWN0IHwgbnVsbCk6IHZvaWRcclxuXHJcbiAgLyoqXHJcbiAgICogQXBwbHkgc2NhbGUgYW5kIHJlc2l6ZSB0ZXh0dXJlc1xyXG4gICAqL1xyXG4gIGFwcGx5U2NhbGUoKTogdm9pZFxyXG5cclxuICAvKipcclxuICAgKiBHZXQgb3VyIHtAbGluayBET01GcnVzdHVtfSBwcm9qZWN0ZWQgYm91bmRpbmcgcmVjdGFuZ2xlXHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICovXHJcbiAgZ2V0IHByb2plY3RlZEJvdW5kaW5nUmVjdCgpOiBET01FbGVtZW50Qm91bmRpbmdSZWN0XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0IGxlYXN0IG9uZSBvZiB0aGUgbWF0cml4IGhhcyBiZWVuIHVwZGF0ZWQsIHVwZGF0ZSBhY2NvcmRpbmcgdW5pZm9ybXMgYW5kIGZydXN0dW1cclxuICAgKi9cclxuICBvbkFmdGVyTWF0cml4U3RhY2tVcGRhdGUoKTogdm9pZFxyXG5cclxuICAvKipcclxuICAgKiBBc3NpZ24gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBfb25SZUVudGVyVmlld0NhbGxiYWNrXHJcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIHdoZW4ge0BsaW5rIFByb2plY3RlZE1lc2hCYXNlQ2xhc3N9IGlzIHJlZW50ZXJpbmcgdGhlIHZpZXcgZnJ1c3R1bVxyXG4gICAqIEByZXR1cm5zIC0gb3VyIE1lc2hcclxuICAgKi9cclxuICBvblJlRW50ZXJWaWV3OiAoY2FsbGJhY2s6ICgpID0+IHZvaWQpID0+IFByb2plY3RlZE1lc2hCYXNlQ2xhc3NcclxuICAvKipcclxuICAgKiBBc3NpZ24gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBfb25MZWF2ZVZpZXdDYWxsYmFja1xyXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biB3aGVuIHtAbGluayBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzfSBpcyBsZWF2aW5nIHRoZSB2aWV3IGZydXN0dW1cclxuICAgKiBAcmV0dXJucyAtIG91ciBNZXNoXHJcbiAgICovXHJcbiAgb25MZWF2ZVZpZXc6IChjYWxsYmFjazogKCkgPT4gdm9pZCkgPT4gUHJvamVjdGVkTWVzaEJhc2VDbGFzc1xyXG5cclxuICAvKipcclxuICAgKiBDYWxsZWQgYmVmb3JlIHJlbmRlcmluZyB0aGUgTWVzaCB0byB1cGRhdGUgbWF0cmljZXMgYW5kIHtAbGluayBET01GcnVzdHVtfS5cclxuICAgKiBGaXJzdCwgd2UgdXBkYXRlIG91ciBtYXRyaWNlcyB0byBoYXZlIGZyZXNoIHJlc3VsdHMuIEl0IGV2ZW50dWFsbHkgY2FsbHMgb25BZnRlck1hdHJpeFN0YWNrVXBkYXRlKCkgaWYgYXQgbGVhc3Qgb25lIG1hdHJpeCBoYXMgYmVlbiB1cGRhdGVkLlxyXG4gICAqIFRoZW4gd2UgY2hlY2sgaWYgd2UgbmVlZCB0byB1cGRhdGUgdGhlIHtAbGluayBET01GcnVzdHVtfSBwcm9qZWN0ZWQgYm91bmRpbmcgcmVjdGFuZ2xlLlxyXG4gICAqIEZpbmFsbHkgd2UgY2FsbCB7QGxpbmsgTWVzaEJhc2VDbGFzcyNvbkJlZm9yZVJlbmRlclBhc3MgfCBNZXNoIGJhc2Ugb25CZWZvcmVSZW5kZXJQYXNzfSBzdXBlclxyXG4gICAqL1xyXG4gIG9uQmVmb3JlUmVuZGVyUGFzcygpOiB2b2lkXHJcblxyXG4gIC8qKlxyXG4gICAqIE9ubHkgcmVuZGVyIHRoZSBNZXNoIGlmIGl0IGlzIGluIHZpZXcgZnJ1c3R1bS5cclxuICAgKiBTaW5jZSByZW5kZXIoKSBpcyBhY3R1YWxseSBjYWxsZWQgYmVmb3JlIG9uUmVuZGVyUGFzcygpLCB3ZSBhcmUgc3VyZSB0byBoYXZlIGZyZXNoIGZydXN0dW0gYm91bmRpbmcgcmVjdGFuZ2xlIHZhbHVlcyBoZXJlLlxyXG4gICAqIEBwYXJhbSBwYXNzIC0gY3VycmVudCByZW5kZXIgcGFzc1xyXG4gICAqL1xyXG4gIG9uUmVuZGVyUGFzcyhwYXNzOiBHUFVSZW5kZXJQYXNzRW5jb2Rlcik6IHZvaWRcclxufVxyXG5cclxuLyoqXHJcbiAqIFVzZWQgdG8gYWRkIHRoZSBwcm9wZXJ0aWVzIGFuZCBtZXRob2RzIGRlZmluZWQgaW4ge0BsaW5rIFByb2plY3RlZE1lc2hCYXNlQ2xhc3N9IHRvIHRoZSB7QGxpbmsgTWVzaEJhc2VDbGFzc30gYW5kIG1peCBpdCB3aXRoIGEgZ2l2ZW4gQmFzZSBvZiB0eXBlIHtAbGluayBQcm9qZWN0ZWRPYmplY3QzRH0gb3Ige0BsaW5rIERPTU9iamVjdDNEfS5cclxuICogQGV4cG9ydHNcclxuICogQHBhcmFtIEJhc2UgLSB0aGUgY2xhc3MgdG8gbWl4IG9udG8sIHNob3VsZCBiZSBvZiB7QGxpbmsgUHJvamVjdGVkT2JqZWN0M0R9IG9yIHtAbGluayBET01PYmplY3QzRH0gdHlwZVxyXG4gKiBAcmV0dXJucyAtIHRoZSBtaXhlZCBjbGFzc2VzLCBjcmVhdGluZyBhIFByb2plY3RlZCBNZXNoLlxyXG4gKi9cclxuZnVuY3Rpb24gUHJvamVjdGVkTWVzaEJhc2VNaXhpbjxUQmFzZSBleHRlbmRzIE1peGluQ29uc3RydWN0b3I8UHJvamVjdGVkT2JqZWN0M0Q+PihcclxuICBCYXNlOiBUQmFzZVxyXG4pOiBNaXhpbkNvbnN0cnVjdG9yPFByb2plY3RlZE1lc2hCYXNlQ2xhc3M+ICYgVEJhc2Uge1xyXG4gIC8qKlxyXG4gICAqIFByb2plY3RlZE1lc2hCYXNlIGRlZmluZXMgb3VyIGJhc2UgcHJvcGVydGllcyBhbmQgbWV0aG9kc1xyXG4gICAqL1xyXG4gIHJldHVybiBjbGFzcyBQcm9qZWN0ZWRNZXNoQmFzZSBleHRlbmRzIE1lc2hCYXNlTWl4aW4oQmFzZSkge1xyXG4gICAgLyoqIFRoZSB7QGxpbmsgQ2FtZXJhUmVuZGVyZXJ9IHVzZWQgKi9cclxuICAgIHJlbmRlcmVyOiBDYW1lcmFSZW5kZXJlclxyXG4gICAgLyoqIFRoZSBQcm9qZWN0ZWRNZXNoIHtAbGluayBET01GcnVzdHVtfSBjbGFzcyBvYmplY3QgKi9cclxuICAgIGRvbUZydXN0dW06IERPTUZydXN0dW1cclxuICAgIC8qKiBXaGV0aGVyIHRoaXMgUHJvamVjdGVkTWVzaCBzaG91bGQgYmUgZnJ1c3R1bSBjdWxsZWQgKG5vdCBkcmF3biB3aGVuIG91dHNpZGUgb2Yge0BsaW5rIENhbWVyYVJlbmRlcmVyI2NhbWVyYSB8IGNhbWVyYX0gZnJ1c3R1bSkgKi9cclxuICAgIGZydXN0dW1DdWxsZWQ6IGJvb2xlYW5cclxuICAgIC8qKiBNYXJnaW5zIChpbiBwaXhlbHMpIHRvIGFwcGxpZWQgdG8gdGhlIHtAbGluayBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzI2RvbUZydXN0dW0gfCBET00gRnJ1c3R1bX0gdG8gZGV0ZXJtaW5lIGlmIHRoaXMgUHJvamVjdGVkTWVzaCBzaG91bGQgYmUgZnJ1c3R1bSBjdWxsZWQgb3Igbm90ICovXHJcbiAgICBET01GcnVzdHVtTWFyZ2luczogUmVjdENvb3Jkc1xyXG5cclxuICAgIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFByb2plY3RlZE1lc2hCYXNlQ2xhc3N9ICovXHJcbiAgICBvcHRpb25zOiBQcm9qZWN0ZWRNZXNoQmFzZU9wdGlvbnNcclxuXHJcbiAgICAvLyBjYWxsYmFja3MgLyBldmVudHNcclxuICAgIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uUmVFbnRlclZpZXd9IGNhbGxiYWNrICovXHJcbiAgICBfb25SZUVudGVyVmlld0NhbGxiYWNrOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xyXG4gICAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xyXG4gICAgfVxyXG4gICAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25MZWF2ZVZpZXd9IGNhbGxiYWNrICovXHJcbiAgICBfb25MZWF2ZVZpZXdDYWxsYmFjazogKCkgPT4gdm9pZCA9ICgpID0+IHtcclxuICAgICAgLyogYWxsb3cgZW1wdHkgY2FsbGJhY2sgKi9cclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIFByb2plY3RlZE1lc2hCYXNlIGNvbnN0cnVjdG9yXHJcbiAgICAgKlxyXG4gICAgICogQHR5cGVkZWYgTWVzaEJhc2VBcnJheVBhcmFtc1xyXG4gICAgICogQHR5cGUge2FycmF5fVxyXG4gICAgICogQHByb3BlcnR5IHsoQ2FtZXJhUmVuZGVyZXJ8R1BVQ3VydGFpbnMpfSAwIC0gb3VyIHJlbmRlcmVyIGNsYXNzIG9iamVjdFxyXG4gICAgICogQHByb3BlcnR5IHsoc3RyaW5nfEhUTUxFbGVtZW50fG51bGwpfSAxIC0gdGhlIERPTSBIVE1MIEVsZW1lbnQgdGhhdCBjYW4gYmUgYm91bmQgdG8gYSBNZXNoXHJcbiAgICAgKiBAcHJvcGVydHkge1Byb2plY3RlZE1lc2hQYXJhbWV0ZXJzfSAyIC0gUHJvamVjdGVkIE1lc2ggcGFyYW1ldGVyc1xyXG4gICAgICpcclxuICAgICAqIEBwYXJhbSB7TWVzaEJhc2VBcnJheVBhcmFtc30gcGFyYW1zIC0gb3VyIE1lc2hCYXNlTWl4aW4gcGFyYW1ldGVyc1xyXG4gICAgICovXHJcbiAgICBjb25zdHJ1Y3RvciguLi5wYXJhbXM6IGFueVtdKSB7XHJcbiAgICAgIHN1cGVyKFxyXG4gICAgICAgIHBhcmFtc1swXSBhcyBDYW1lcmFSZW5kZXJlciB8IEdQVUN1cnRhaW5zLFxyXG4gICAgICAgIHBhcmFtc1sxXSBhcyBIVE1MRWxlbWVudCB8IHN0cmluZyxcclxuICAgICAgICB7IC4uLmRlZmF1bHRQcm9qZWN0ZWRNZXNoUGFyYW1zLCAuLi5wYXJhbXNbMl0sIC4uLnsgdXNlUHJvamVjdGlvbjogdHJ1ZSB9IH0gYXMgUHJvamVjdGVkTWVzaFBhcmFtZXRlcnNcclxuICAgICAgKVxyXG5cclxuICAgICAgbGV0IHJlbmRlcmVyID0gcGFyYW1zWzBdXHJcblxyXG4gICAgICAvLyBmb3JjZSB0aGlzIG1lc2ggdG8gdXNlIHByb2plY3Rpb24hXHJcbiAgICAgIGNvbnN0IHBhcmFtZXRlcnMgPSB7XHJcbiAgICAgICAgLi4uZGVmYXVsdFByb2plY3RlZE1lc2hQYXJhbXMsXHJcbiAgICAgICAgLi4ucGFyYW1zWzJdLFxyXG4gICAgICAgIC4uLnsgdXNlUHJvamVjdGlvbjogdHJ1ZSB9LFxyXG4gICAgICB9IGFzIFByb2plY3RlZE1lc2hQYXJhbWV0ZXJzXHJcblxyXG4gICAgICB0aGlzLnR5cGUgPSAnTWVzaFRyYW5zZm9ybWVkJ1xyXG5cclxuICAgICAgLy8gd2UgY291bGQgcGFzcyBvdXIgY3VydGFpbnMgb2JqZWN0IE9SIG91ciBjdXJ0YWlucyByZW5kZXJlciBvYmplY3RcclxuICAgICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIENhbWVyYVJlbmRlcmVyKVxyXG5cclxuICAgICAgaXNDYW1lcmFSZW5kZXJlcihyZW5kZXJlciwgcGFyYW1ldGVycy5sYWJlbCA/IHBhcmFtZXRlcnMubGFiZWwgKyAnICcgKyB0aGlzLnR5cGUgOiB0aGlzLnR5cGUpXHJcblxyXG4gICAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJcclxuXHJcbiAgICAgIGNvbnN0IHsgZ2VvbWV0cnksIGZydXN0dW1DdWxsZWQsIERPTUZydXN0dW1NYXJnaW5zIH0gPSBwYXJhbWV0ZXJzXHJcblxyXG4gICAgICB0aGlzLm9wdGlvbnMgPSB7XHJcbiAgICAgICAgLi4uKHRoaXMub3B0aW9ucyA/PyB7fSksIC8vIG1lcmdlIHBvc3NpYmxlIGxvd2VyIG9wdGlvbnM/XHJcbiAgICAgICAgZnJ1c3R1bUN1bGxlZCxcclxuICAgICAgICBET01GcnVzdHVtTWFyZ2lucyxcclxuICAgICAgfVxyXG5cclxuICAgICAgdGhpcy5zZXRET01GcnVzdHVtKClcclxuXHJcbiAgICAgIC8vIGV4cGxpY2l0bHkgbmVlZGVkIGZvciBET00gRnJ1c3R1bVxyXG4gICAgICB0aGlzLmdlb21ldHJ5ID0gZ2VvbWV0cnlcclxuXHJcbiAgICAgIC8vIHRlbGwgdGhlIG1vZGVsIGFuZCBwcm9qZWN0aW9uIG1hdHJpY2VzIHRvIHVwZGF0ZSByaWdodCBhd2F5XHJcbiAgICAgIHRoaXMuc2hvdWxkVXBkYXRlTWF0cml4U3RhY2soKVxyXG4gICAgfVxyXG5cclxuICAgIC8qIFNIQURFUlMgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBkZWZhdWx0IHNoYWRlcnMgaWYgb25lIG9yIGJvdGggb2YgdGhlbSBhcmUgbWlzc2luZ1xyXG4gICAgICovXHJcbiAgICBzZXRTaGFkZXJzKCkge1xyXG4gICAgICBsZXQgeyBzaGFkZXJzIH0gPSB0aGlzLm9wdGlvbnNcclxuXHJcbiAgICAgIGlmICghc2hhZGVycykge1xyXG4gICAgICAgIHNoYWRlcnMgPSB7XHJcbiAgICAgICAgICB2ZXJ0ZXg6IHtcclxuICAgICAgICAgICAgY29kZTogZGVmYXVsdF9wcm9qZWN0ZWRfdnNXZ3NsLFxyXG4gICAgICAgICAgICBlbnRyeVBvaW50OiAnbWFpbicsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgZnJhZ21lbnQ6IHtcclxuICAgICAgICAgICAgY29kZTogZGVmYXVsdF9ub3JtYWxfZnNXZ3NsLFxyXG4gICAgICAgICAgICBlbnRyeVBvaW50OiAnbWFpbicsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAoIXNoYWRlcnMudmVydGV4IHx8ICFzaGFkZXJzLnZlcnRleC5jb2RlKSB7XHJcbiAgICAgICAgICBzaGFkZXJzLnZlcnRleCA9IHtcclxuICAgICAgICAgICAgY29kZTogZGVmYXVsdF9wcm9qZWN0ZWRfdnNXZ3NsLFxyXG4gICAgICAgICAgICBlbnRyeVBvaW50OiAnbWFpbicsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoIXNoYWRlcnMuZnJhZ21lbnQgfHwgIXNoYWRlcnMuZnJhZ21lbnQuY29kZSkge1xyXG4gICAgICAgICAgc2hhZGVycy5mcmFnbWVudCA9IHtcclxuICAgICAgICAgICAgY29kZTogZGVmYXVsdF9ub3JtYWxfZnNXZ3NsLFxyXG4gICAgICAgICAgICBlbnRyeVBvaW50OiAnbWFpbicsXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgLyogR0VPTUVUUlkgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCB0aGUgTWVzaCBmcnVzdHVtIGN1bGxpbmdcclxuICAgICAqL1xyXG4gICAgc2V0RE9NRnJ1c3R1bSgpIHtcclxuICAgICAgdGhpcy5kb21GcnVzdHVtID0gbmV3IERPTUZydXN0dW0oe1xyXG4gICAgICAgIGJvdW5kaW5nQm94OiB0aGlzLmdlb21ldHJ5LmJvdW5kaW5nQm94LFxyXG4gICAgICAgIG1vZGVsVmlld1Byb2plY3Rpb25NYXRyaXg6IHRoaXMubW9kZWxWaWV3UHJvamVjdGlvbk1hdHJpeCxcclxuICAgICAgICBjb250YWluZXJCb3VuZGluZ1JlY3Q6IHRoaXMucmVuZGVyZXIuYm91bmRpbmdSZWN0LFxyXG4gICAgICAgIERPTUZydXN0dW1NYXJnaW5zOiB0aGlzLm9wdGlvbnMuRE9NRnJ1c3R1bU1hcmdpbnMsXHJcbiAgICAgICAgb25SZUVudGVyVmlldzogKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5fb25SZUVudGVyVmlld0NhbGxiYWNrICYmIHRoaXMuX29uUmVFbnRlclZpZXdDYWxsYmFjaygpXHJcbiAgICAgICAgfSxcclxuICAgICAgICBvbkxlYXZlVmlldzogKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5fb25MZWF2ZVZpZXdDYWxsYmFjayAmJiB0aGlzLl9vbkxlYXZlVmlld0NhbGxiYWNrKClcclxuICAgICAgICB9LFxyXG4gICAgICB9KVxyXG5cclxuICAgICAgdGhpcy5ET01GcnVzdHVtTWFyZ2lucyA9IHRoaXMuZG9tRnJ1c3R1bS5ET01GcnVzdHVtTWFyZ2luc1xyXG4gICAgICB0aGlzLmZydXN0dW1DdWxsZWQgPSB0aGlzLm9wdGlvbnMuZnJ1c3R1bUN1bGxlZFxyXG4gICAgICB0aGlzLmRvbUZydXN0dW0uc2hvdWxkVXBkYXRlID0gdGhpcy5mcnVzdHVtQ3VsbGVkXHJcbiAgICB9XHJcblxyXG4gICAgLyogTUFURVJJQUwgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFNldCBhIE1lc2ggbWF0cmljZXMgdW5pZm9ybXMgaW5wdXRzIHRoZW4gY2FsbCB7QGxpbmsgTWVzaEJhc2VDbGFzc30gc3VwZXIgbWV0aG9kXHJcbiAgICAgKiBAcGFyYW0gbWVzaFBhcmFtZXRlcnMgLSB7QGxpbmsgUmVuZGVyTWF0ZXJpYWxQYXJhbXMgfCBSZW5kZXJNYXRlcmlhbCBwYXJhbWV0ZXJzfVxyXG4gICAgICovXHJcbiAgICBzZXRNYXRlcmlhbChtZXNoUGFyYW1ldGVyczogUmVuZGVyTWF0ZXJpYWxQYXJhbXMpIHtcclxuICAgICAgLy8gYWRkIG1hdHJpY2VzIHVuaWZvcm1zXHJcbiAgICAgIGNvbnN0IG1hdHJpY2VzVW5pZm9ybXMgPSB7XHJcbiAgICAgICAgbGFiZWw6ICdNYXRyaWNlcycsXHJcbiAgICAgICAgc3RydWN0OiB7XHJcbiAgICAgICAgICBtb2RlbDoge1xyXG4gICAgICAgICAgICBuYW1lOiAnbW9kZWwnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbWF0NHg0ZicsXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLm1vZGVsTWF0cml4LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIHdvcmxkOiB7XHJcbiAgICAgICAgICAgIG5hbWU6ICd3b3JsZCcsXHJcbiAgICAgICAgICAgIHR5cGU6ICdtYXQ0eDRmJyxcclxuICAgICAgICAgICAgdmFsdWU6IHRoaXMud29ybGRNYXRyaXgsXHJcbiAgICAgICAgICB9LFxyXG4gICAgICAgICAgbW9kZWxWaWV3OiB7XHJcbiAgICAgICAgICAgIC8vIG1vZGVsIHZpZXcgbWF0cml4ICh3b3JsZCBtYXRyaXggbXVsdGlwbGllZCBieSBjYW1lcmEgdmlldyBtYXRyaXgpXHJcbiAgICAgICAgICAgIG5hbWU6ICdtb2RlbFZpZXcnLFxyXG4gICAgICAgICAgICB0eXBlOiAnbWF0NHg0ZicsXHJcbiAgICAgICAgICAgIHZhbHVlOiB0aGlzLm1vZGVsVmlld01hdHJpeCxcclxuICAgICAgICAgIH0sXHJcbiAgICAgICAgICBtb2RlbFZpZXdQcm9qZWN0aW9uOiB7XHJcbiAgICAgICAgICAgIG5hbWU6ICdtb2RlbFZpZXdQcm9qZWN0aW9uJyxcclxuICAgICAgICAgICAgdHlwZTogJ21hdDR4NGYnLFxyXG4gICAgICAgICAgICB2YWx1ZTogdGhpcy5tb2RlbFZpZXdQcm9qZWN0aW9uTWF0cml4LFxyXG4gICAgICAgICAgfSxcclxuICAgICAgICB9LFxyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIW1lc2hQYXJhbWV0ZXJzLnVuaWZvcm1zKSBtZXNoUGFyYW1ldGVycy51bmlmb3JtcyA9IHt9XHJcbiAgICAgIG1lc2hQYXJhbWV0ZXJzLnVuaWZvcm1zLm1hdHJpY2VzID0gbWF0cmljZXNVbmlmb3Jtc1xyXG5cclxuICAgICAgc3VwZXIuc2V0TWF0ZXJpYWwobWVzaFBhcmFtZXRlcnMpXHJcbiAgICB9XHJcblxyXG4gICAgLyogU0laRSAmIFRSQU5TRk9STVMgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIFJlc2l6ZSBvdXIge0BsaW5rIFByb2plY3RlZE1lc2hCYXNlQ2xhc3N9XHJcbiAgICAgKiBAcGFyYW0gYm91bmRpbmdSZWN0IC0gdGhlIG5ldyBib3VuZGluZyByZWN0YW5nbGVcclxuICAgICAqL1xyXG4gICAgcmVzaXplKGJvdW5kaW5nUmVjdD86IERPTUVsZW1lbnRCb3VuZGluZ1JlY3QgfCBudWxsKSB7XHJcbiAgICAgIGlmICh0aGlzLmRvbUZydXN0dW0pIHRoaXMuZG9tRnJ1c3R1bS5zZXRDb250YWluZXJCb3VuZGluZ1JlY3QodGhpcy5yZW5kZXJlci5ib3VuZGluZ1JlY3QpXHJcblxyXG4gICAgICBzdXBlci5yZXNpemUoYm91bmRpbmdSZWN0KVxyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXBwbHkgc2NhbGUgYW5kIHJlc2l6ZSB0ZXh0dXJlc1xyXG4gICAgICovXHJcbiAgICBhcHBseVNjYWxlKCkge1xyXG4gICAgICBzdXBlci5hcHBseVNjYWxlKClcclxuXHJcbiAgICAgIC8vIHJlc2l6ZSB0ZXh0dXJlcyBvbiBzY2FsZSBjaGFuZ2UhXHJcbiAgICAgIHRoaXMudGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSkgPT4gdGV4dHVyZS5yZXNpemUoKSlcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEdldCBvdXIge0BsaW5rIERPTUZydXN0dW19IHByb2plY3RlZCBib3VuZGluZyByZWN0YW5nbGVcclxuICAgICAqIEByZWFkb25seVxyXG4gICAgICovXHJcbiAgICBnZXQgcHJvamVjdGVkQm91bmRpbmdSZWN0KCk6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3Qge1xyXG4gICAgICByZXR1cm4gdGhpcy5kb21GcnVzdHVtPy5wcm9qZWN0ZWRCb3VuZGluZ1JlY3RcclxuICAgIH1cclxuXHJcbiAgICAvKipcclxuICAgICAqIEF0IGxlYXN0IG9uZSBvZiB0aGUgbWF0cml4IGhhcyBiZWVuIHVwZGF0ZWQsIHVwZGF0ZSBhY2NvcmRpbmcgdW5pZm9ybXMgYW5kIGZydXN0dW1cclxuICAgICAqL1xyXG4gICAgb25BZnRlck1hdHJpeFN0YWNrVXBkYXRlKCkge1xyXG4gICAgICBpZiAodGhpcy5tYXRlcmlhbCkge1xyXG4gICAgICAgIHRoaXMubWF0ZXJpYWwuc2hvdWxkVXBkYXRlSW5wdXRzQmluZGluZ3MoJ21hdHJpY2VzJylcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRoaXMuZG9tRnJ1c3R1bSkgdGhpcy5kb21GcnVzdHVtLnNob3VsZFVwZGF0ZSA9IHRydWVcclxuICAgIH1cclxuXHJcbiAgICAvKiBFVkVOVFMgKi9cclxuXHJcbiAgICAvKipcclxuICAgICAqIEFzc2lnbiBhIGNhbGxiYWNrIGZ1bmN0aW9uIHRvIF9vblJlRW50ZXJWaWV3Q2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biB3aGVuIHtAbGluayBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzfSBpcyByZWVudGVyaW5nIHRoZSB2aWV3IGZydXN0dW1cclxuICAgICAqIEByZXR1cm5zIC0gb3VyIE1lc2hcclxuICAgICAqL1xyXG4gICAgb25SZUVudGVyVmlldyhjYWxsYmFjazogKCkgPT4gdm9pZCk6IFByb2plY3RlZE1lc2hCYXNlQ2xhc3Mge1xyXG4gICAgICBpZiAoY2FsbGJhY2spIHtcclxuICAgICAgICB0aGlzLl9vblJlRW50ZXJWaWV3Q2FsbGJhY2sgPSBjYWxsYmFja1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXR1cm4gdGhpc1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogQXNzaWduIGEgY2FsbGJhY2sgZnVuY3Rpb24gdG8gX29uTGVhdmVWaWV3Q2FsbGJhY2tcclxuICAgICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biB3aGVuIHtAbGluayBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzfSBpcyBsZWF2aW5nIHRoZSB2aWV3IGZydXN0dW1cclxuICAgICAqIEByZXR1cm5zIC0gb3VyIE1lc2hcclxuICAgICAqL1xyXG4gICAgb25MZWF2ZVZpZXcoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBQcm9qZWN0ZWRNZXNoQmFzZUNsYXNzIHtcclxuICAgICAgaWYgKGNhbGxiYWNrKSB7XHJcbiAgICAgICAgdGhpcy5fb25MZWF2ZVZpZXdDYWxsYmFjayA9IGNhbGxiYWNrXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiB0aGlzXHJcbiAgICB9XHJcblxyXG4gICAgLyogUkVOREVSICovXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBDYWxsZWQgYmVmb3JlIHJlbmRlcmluZyB0aGUgTWVzaCB0byB1cGRhdGUgbWF0cmljZXMgYW5kIHtAbGluayBET01GcnVzdHVtfS5cclxuICAgICAqIEZpcnN0LCB3ZSB1cGRhdGUgb3VyIG1hdHJpY2VzIHRvIGhhdmUgZnJlc2ggcmVzdWx0cy4gSXQgZXZlbnR1YWxseSBjYWxscyBvbkFmdGVyTWF0cml4U3RhY2tVcGRhdGUoKSBpZiBhdCBsZWFzdCBvbmUgbWF0cml4IGhhcyBiZWVuIHVwZGF0ZWQuXHJcbiAgICAgKiBUaGVuIHdlIGNoZWNrIGlmIHdlIG5lZWQgdG8gdXBkYXRlIHRoZSB7QGxpbmsgRE9NRnJ1c3R1bX0gcHJvamVjdGVkIGJvdW5kaW5nIHJlY3RhbmdsZS5cclxuICAgICAqIEZpbmFsbHkgd2UgY2FsbCB7QGxpbmsgTWVzaEJhc2VDbGFzcyNvbkJlZm9yZVJlbmRlclBhc3MgfCBNZXNoIGJhc2Ugb25CZWZvcmVSZW5kZXJQYXNzfSBzdXBlclxyXG4gICAgICovXHJcbiAgICBvbkJlZm9yZVJlbmRlclBhc3MoKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlTWF0cml4U3RhY2soKVxyXG5cclxuICAgICAgaWYgKHRoaXMuZG9tRnJ1c3R1bSAmJiB0aGlzLmRvbUZydXN0dW0uc2hvdWxkVXBkYXRlICYmIHRoaXMuZnJ1c3R1bUN1bGxlZCkge1xyXG4gICAgICAgIHRoaXMuZG9tRnJ1c3R1bS5jb21wdXRlUHJvamVjdGVkVG9Eb2N1bWVudENvb3JkcygpXHJcbiAgICAgICAgdGhpcy5kb21GcnVzdHVtLnNob3VsZFVwZGF0ZSA9IGZhbHNlXHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHN1cGVyLm9uQmVmb3JlUmVuZGVyUGFzcygpXHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBPbmx5IHJlbmRlciB0aGUgTWVzaCBpZiBpdCBpcyBpbiB2aWV3IGZydXN0dW0uXHJcbiAgICAgKiBTaW5jZSByZW5kZXIoKSBpcyBhY3R1YWxseSBjYWxsZWQgYmVmb3JlIG9uUmVuZGVyUGFzcygpLCB3ZSBhcmUgc3VyZSB0byBoYXZlIGZyZXNoIGZydXN0dW0gYm91bmRpbmcgcmVjdGFuZ2xlIHZhbHVlcyBoZXJlLlxyXG4gICAgICogQHBhcmFtIHBhc3MgLSBjdXJyZW50IHJlbmRlciBwYXNzXHJcbiAgICAgKi9cclxuICAgIG9uUmVuZGVyUGFzcyhwYXNzOiBHUFVSZW5kZXJQYXNzRW5jb2Rlcikge1xyXG4gICAgICBpZiAoIXRoaXMubWF0ZXJpYWwucmVhZHkpIHJldHVyblxyXG5cclxuICAgICAgdGhpcy5fb25SZW5kZXJDYWxsYmFjayAmJiB0aGlzLl9vblJlbmRlckNhbGxiYWNrKClcclxuXHJcbiAgICAgIGlmICgodGhpcy5kb21GcnVzdHVtICYmIHRoaXMuZG9tRnJ1c3R1bS5pc0ludGVyc2VjdGluZykgfHwgIXRoaXMuZnJ1c3R1bUN1bGxlZCkge1xyXG4gICAgICAgIC8vIHJlbmRlciBvdSBtYXRlcmlhbFxyXG4gICAgICAgIHRoaXMubWF0ZXJpYWwucmVuZGVyKHBhc3MpXHJcbiAgICAgICAgLy8gdGhlbiByZW5kZXIgb3VyIGdlb21ldHJ5XHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeS5yZW5kZXIocGFzcylcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IHsgUHJvamVjdGVkTWVzaEJhc2VNaXhpbiB9XHJcbiIsImltcG9ydCB7IENhbWVyYVJlbmRlcmVyLCBpc0NhbWVyYVJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL3V0aWxzJ1xuaW1wb3J0IHsgUHJvamVjdGVkT2JqZWN0M0QgfSBmcm9tICcuLi9vYmplY3RzM0QvUHJvamVjdGVkT2JqZWN0M0QnXG5pbXBvcnQgeyBQcm9qZWN0ZWRNZXNoQmFzZU1peGluIH0gZnJvbSAnLi9taXhpbnMvUHJvamVjdGVkTWVzaEJhc2VNaXhpbidcbmltcG9ydCB7IE1lc2hCYXNlUGFyYW1zIH0gZnJvbSAnLi9taXhpbnMvTWVzaEJhc2VNaXhpbidcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vLi4vY3VydGFpbnMvR1BVQ3VydGFpbnMnXG5cbi8qKlxuICogQ3JlYXRlIGEgM0QgTWVzaC5cbiAqXG4gKiBBIDNEIE1lc2ggaXMgYSBiYXNpY2FsbHkgYSB7QGxpbmsgUHJvamVjdGVkT2JqZWN0M0R9IHdpdGggYSB7QGxpbmsgY29yZS9nZW9tZXRyaWVzL0dlb21ldHJ5Lkdlb21ldHJ5IHwgR2VvbWV0cnl9IGFuZCBhIHtAbGluayBjb3JlL21hdGVyaWFscy9SZW5kZXJNYXRlcmlhbC5SZW5kZXJNYXRlcmlhbCB8IFJlbmRlck1hdGVyaWFsfS5cbiAqXG4gKiBZb3UgbmVlZCB0byBwYXNzIGF0IGxlYXN0IGEgdmFsaWQge0BsaW5rIGNvcmUvZ2VvbWV0cmllcy9HZW9tZXRyeS5HZW9tZXRyeSB8IEdlb21ldHJ5fSBhcyBwYXJhbWV0ZXIuPGJyPlxuICogSWYgbm8gc2hhZGVycyBhcmUgcHJvdmlkZWQsIGl0IHdpbGwgdXNlIHRoZSBub3JtYWxzIGNvbG9ycyBhcyBkZWZhdWx0IHNoYWRpbmcuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIHNldCBvdXIgbWFpbiBHUFVDdXJ0YWlucyBpbnN0YW5jZVxuICogY29uc3QgZ3B1Q3VydGFpbnMgPSBuZXcgR1BVQ3VydGFpbnMoe1xuICogICBjb250YWluZXI6ICcjY2FudmFzJyAvLyBzZWxlY3RvciBvZiBvdXIgV2ViR1BVIGNhbnZhcyBjb250YWluZXJcbiAqIH0pXG4gKlxuICogLy8gc2V0IHRoZSBHUFUgZGV2aWNlXG4gKiAvLyBub3RlIHRoaXMgaXMgYXN5bmNocm9ub3VzXG4gKiBhd2FpdCBncHVDdXJ0YWlucy5zZXREZXZpY2UoKVxuICpcbiAqIC8vIGNyZWF0ZSBhIG1lc2ggd2l0aCBhIGJveCBnZW9tZXRyeVxuICogLy8gd2lsbCB1c2UgdGhlIG5vcm1hbHMgY29sb3JzIGFzIGRlZmF1bHQgc2hhZGluZ1xuICogY29uc3QgbWVzaCA9IG5ldyBNZXNoKGdwdUN1cnRhaW5zLCB7XG4gKiAgIGxhYmVsOiAnTXkgbWVzaCcsXG4gKiAgIGdlb21ldHJ5OiBuZXcgQm94R2VvbWV0cnkoKSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIE1lc2ggZXh0ZW5kcyBQcm9qZWN0ZWRNZXNoQmFzZU1peGluKFByb2plY3RlZE9iamVjdDNEKSB7XG4gIC8qKlxuICAgKiBNZXNoIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSByZW5kZXJlciAtIHtAbGluayBDYW1lcmFSZW5kZXJlcn0gb2JqZWN0IG9yIHtAbGluayBHUFVDdXJ0YWluc30gY2xhc3Mgb2JqZWN0IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIE1lc2h9XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIE1lc2hCYXNlUGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBNZXNofVxuICAgKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IENhbWVyYVJlbmRlcmVyIHwgR1BVQ3VydGFpbnMsIHBhcmFtZXRlcnM6IE1lc2hCYXNlUGFyYW1zKSB7XG4gICAgLy8gd2UgY291bGQgcGFzcyBvdXIgY3VydGFpbnMgb2JqZWN0IE9SIG91ciBjdXJ0YWlucyByZW5kZXJlciBvYmplY3RcbiAgICByZW5kZXJlciA9IChyZW5kZXJlciAmJiAocmVuZGVyZXIgYXMgR1BVQ3VydGFpbnMpLnJlbmRlcmVyKSB8fCAocmVuZGVyZXIgYXMgQ2FtZXJhUmVuZGVyZXIpXG5cbiAgICBpc0NhbWVyYVJlbmRlcmVyKHJlbmRlcmVyLCBwYXJhbWV0ZXJzLmxhYmVsID8gcGFyYW1ldGVycy5sYWJlbCArICcgTWVzaCcgOiAnTWVzaCcpXG5cbiAgICAvLyBAdHMtaWdub3JlXG4gICAgc3VwZXIocmVuZGVyZXIsIG51bGwsIHBhcmFtZXRlcnMpXG5cbiAgICB0aGlzLnR5cGUgPSAnTWVzaCdcbiAgfVxufVxuIiwiaW1wb3J0IHsgaXNSZW5kZXJlciwgUmVuZGVyZXIgfSBmcm9tICcuLi9yZW5kZXJlcnMvdXRpbHMnXG5pbXBvcnQgeyBQaXBlbGluZUVudHJ5T3B0aW9ucywgUGlwZWxpbmVFbnRyeVBhcmFtcywgUGlwZWxpbmVFbnRyeVN0YXR1cyB9IGZyb20gJy4uLy4uL3R5cGVzL1BpcGVsaW5lRW50cmllcydcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vLi4vY3VydGFpbnMvR1BVQ3VydGFpbnMnXG5pbXBvcnQgeyBBbGxvd2VkQmluZEdyb3VwcyB9IGZyb20gJy4uLy4uL3R5cGVzL0JpbmRHcm91cHMnXG5pbXBvcnQgeyBNYXRlcmlhbFNoYWRlcnNUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMvTWF0ZXJpYWxzJ1xuXG5sZXQgcGlwZWxpbmVJZCA9IDBcblxuLyoqXG4gKiBVc2VkIGFzIGEgYmFzZSBjbGFzcyB0byBjcmVhdGUgYSBwaXBlbGluZSBlbnRyeS48YnI+XG4gKiB7QGxpbmsgUGlwZWxpbmVFbnRyeX0gcm9sZXMgYXJlOlxuICogLSBQYXRjaCB0aGUgZ2l2ZW4ge0BsaW5rIGNvcmUvbWF0ZXJpYWxzL01hdGVyaWFsLk1hdGVyaWFsIHwgTWF0ZXJpYWx9IHNoYWRlcnMgY29kZSBhbmQgY3JlYXRlIHRoZSBjb3JyZXNwb25kaW5nIHtAbGluayBHUFVTaGFkZXJNb2R1bGV9LlxuICogLSBDcmVhdGUgYSB7QGxpbmsgR1BVUGlwZWxpbmVMYXlvdXQgfCBwaXBlbGluZSBsYXlvdXR9IHdpdGggdGhlIGdpdmVuIHtAbGluayBjb3JlL21hdGVyaWFscy9NYXRlcmlhbC5NYXRlcmlhbCNiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9XG4gKiAtIENyZWF0ZSBhIEdQVSBwaXBlbGluZVxuICovXG5leHBvcnQgY2xhc3MgUGlwZWxpbmVFbnRyeSB7XG4gIC8qKiBUaGUgdHlwZSBvZiB0aGUge0BsaW5rIFBpcGVsaW5lRW50cnl9ICovXG4gIHR5cGU6IHN0cmluZ1xuICAvKiogVGhlIHtAbGluayBSZW5kZXJlcn0gdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgUGlwZWxpbmVFbnRyeX0gKi9cbiAgcmVuZGVyZXI6IFJlbmRlcmVyXG4gIC8qKiBJbmRleCBvZiB0aGlzIHtAbGluayBQaXBlbGluZUVudHJ5fSwgaS5lLiBjcmVhdGlvbiBvcmRlciAqL1xuICByZWFkb25seSBpbmRleDogbnVtYmVyXG4gIC8qKiB7QGxpbmsgR1BVUGlwZWxpbmVMYXlvdXQgfCBQaXBlbGluZSBsYXlvdXR9IGNyZWF0ZWQgYmFzZWQgb24gdGhlIGdpdmVuIHtAbGluayBiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9ICovXG4gIGxheW91dDogR1BVUGlwZWxpbmVMYXlvdXQgfCBudWxsXG4gIC8qKiBUaGUgR1BVIHBpcGVsaW5lICovXG4gIHBpcGVsaW5lOiBHUFVSZW5kZXJQaXBlbGluZSB8IEdQVUNvbXB1dGVQaXBlbGluZSB8IG51bGxcbiAgLyoqIFRoZSBwaXBlbGluZSB7QGxpbmsgUGlwZWxpbmVFbnRyeVN0YXR1cyB8IGNvbXBpbGF0aW9uIHN0YXR1c30gKi9cbiAgc3RhdHVzOiBQaXBlbGluZUVudHJ5U3RhdHVzXG4gIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFBpcGVsaW5lRW50cnl9ICovXG4gIG9wdGlvbnM6IFBpcGVsaW5lRW50cnlPcHRpb25zXG5cbiAgLyoqIHtAbGluayBjb3JlL21hdGVyaWFscy9NYXRlcmlhbC5NYXRlcmlhbCNiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9IHVzZWQgdG8gcGF0Y2ggdGhlIHNoYWRlcnMgYW5kIGNyZWF0ZSB0aGUge0BsaW5rIFBpcGVsaW5lRW50cnkjbGF5b3V0IHwgcGlwZWxpbmUgbGF5b3V0fSAqL1xuICBiaW5kR3JvdXBzOiBBbGxvd2VkQmluZEdyb3Vwc1tdXG5cbiAgLyoqXG4gICAqIFBpcGVsaW5lRW50cnkgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgUGlwZWxpbmVFbnRyeVBhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFBpcGVsaW5lRW50cnl9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzOiBQaXBlbGluZUVudHJ5UGFyYW1zKSB7XG4gICAgdGhpcy50eXBlID0gJ1BpcGVsaW5lRW50cnknXG5cbiAgICBsZXQgeyByZW5kZXJlciB9ID0gcGFyYW1ldGVyc1xuICAgIGNvbnN0IHsgbGFiZWwsIHNoYWRlcnMsIHVzZUFzeW5jIH0gPSBwYXJhbWV0ZXJzXG5cbiAgICAvLyB3ZSBjb3VsZCBwYXNzIG91ciBjdXJ0YWlucyBvYmplY3QgT1Igb3VyIGN1cnRhaW5zIHJlbmRlcmVyIG9iamVjdFxuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBSZW5kZXJlcilcblxuICAgIGlzUmVuZGVyZXIocmVuZGVyZXIsIGxhYmVsID8gbGFiZWwgKyAnICcgKyB0aGlzLnR5cGUgOiB0aGlzLnR5cGUpXG5cbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJcblxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzIGFzIFBpcGVsaW5lRW50cnksICdpbmRleCcsIHsgdmFsdWU6IHBpcGVsaW5lSWQrKyB9KVxuXG4gICAgdGhpcy5sYXlvdXQgPSBudWxsXG4gICAgdGhpcy5waXBlbGluZSA9IG51bGxcblxuICAgIHRoaXMuc3RhdHVzID0ge1xuICAgICAgY29tcGlsaW5nOiBmYWxzZSxcbiAgICAgIGNvbXBpbGVkOiBmYWxzZSxcbiAgICAgIGVycm9yOiBudWxsLFxuICAgIH1cblxuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGxhYmVsLFxuICAgICAgc2hhZGVycyxcbiAgICAgIHVzZUFzeW5jOiB1c2VBc3luYyAhPT0gdW5kZWZpbmVkID8gdXNlQXN5bmMgOiB0cnVlLFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciB0aGUge0BsaW5rIHBpcGVsaW5lfSBpcyByZWFkeSwgaS5lLiBzdWNjZXNzZnVsbHkgY29tcGlsZWRcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgcmVhZHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLnN0YXR1cy5jb21waWxpbmcgJiYgdGhpcy5zdGF0dXMuY29tcGlsZWQgJiYgIXRoaXMuc3RhdHVzLmVycm9yXG4gIH1cblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgdGhlIHtAbGluayBwaXBlbGluZX0gaXMgcmVhZHkgdG8gYmUgY29tcGlsZWQsIGkuZS4gd2UgaGF2ZSBub3QgYWxyZWFkeSB0cmllZCB0byBjb21waWxlIGl0LCBhbmQgaXQncyBub3QgY3VycmVudGx5IGNvbXBpbGluZyBuZWl0aGVyXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGNhbkNvbXBpbGUoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICF0aGlzLnN0YXR1cy5jb21waWxpbmcgJiYgIXRoaXMuc3RhdHVzLmNvbXBpbGVkICYmICF0aGlzLnN0YXR1cy5lcnJvclxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvdXIge0BsaW5rIFBpcGVsaW5lRW50cnkjYmluZEdyb3VwcyB8IHBpcGVsaW5lIGVudHJ5IGJpbmQgZ3JvdXBzfVxuICAgKiBAcGFyYW0gYmluZEdyb3VwcyAtIHtAbGluayBjb3JlL21hdGVyaWFscy9NYXRlcmlhbC5NYXRlcmlhbCNiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9IHRvIHVzZSB3aXRoIHRoaXMge0BsaW5rIFBpcGVsaW5lRW50cnl9XG4gICAqL1xuICBzZXRQaXBlbGluZUVudHJ5QmluZEdyb3VwcyhiaW5kR3JvdXBzOiBBbGxvd2VkQmluZEdyb3Vwc1tdKSB7XG4gICAgdGhpcy5iaW5kR3JvdXBzID0gYmluZEdyb3Vwc1xuICB9XG5cbiAgLyogU0hBREVSUyAqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB7QGxpbmsgR1BVU2hhZGVyTW9kdWxlfVxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIFBhcmFtZXRlcnMgdXNlZFxuICAgKiBAcGFyYW0gcGFyYW1ldGVycy5jb2RlIC0gcGF0Y2hlZCBXR1NMIGNvZGUgc3RyaW5nXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzLnR5cGUgLSB7QGxpbmsgTWF0ZXJpYWxTaGFkZXJzVHlwZSB8IHNoYWRlciB0eXBlfVxuICAgKiBAcmV0dXJucyAtIGNvbXBpbGVkIHtAbGluayBHUFVTaGFkZXJNb2R1bGV9IGlmIHN1Y2Nlc3NmdWxcbiAgICovXG4gIGNyZWF0ZVNoYWRlck1vZHVsZSh7IGNvZGUgPSAnJywgdHlwZSA9ICd2ZXJ0ZXgnIH06IHsgY29kZTogc3RyaW5nOyB0eXBlOiBNYXRlcmlhbFNoYWRlcnNUeXBlIH0pOiBHUFVTaGFkZXJNb2R1bGUge1xuICAgIGNvbnN0IHNoYWRlck1vZHVsZSA9IHRoaXMucmVuZGVyZXIuY3JlYXRlU2hhZGVyTW9kdWxlKHtcbiAgICAgIGxhYmVsOiB0aGlzLm9wdGlvbnMubGFiZWwgKyAnOiAnICsgdHlwZSArICdTaGFkZXIgbW9kdWxlJyxcbiAgICAgIGNvZGUsXG4gICAgfSlcblxuICAgIGlmICgnZ2V0Q29tcGlsYXRpb25JbmZvJyBpbiBzaGFkZXJNb2R1bGUgJiYgIXRoaXMucmVuZGVyZXIucHJvZHVjdGlvbikge1xuICAgICAgc2hhZGVyTW9kdWxlLmdldENvbXBpbGF0aW9uSW5mbygpLnRoZW4oKGNvbXBpbGF0aW9uSW5mbykgPT4ge1xuICAgICAgICBmb3IgKGNvbnN0IG1lc3NhZ2Ugb2YgY29tcGlsYXRpb25JbmZvLm1lc3NhZ2VzKSB7XG4gICAgICAgICAgbGV0IGZvcm1hdHRlZE1lc3NhZ2UgPSAnJ1xuICAgICAgICAgIGlmIChtZXNzYWdlLmxpbmVOdW0pIHtcbiAgICAgICAgICAgIGZvcm1hdHRlZE1lc3NhZ2UgKz0gYExpbmUgJHttZXNzYWdlLmxpbmVOdW19OiR7bWVzc2FnZS5saW5lUG9zfSAtICR7Y29kZS5zdWJzdHJpbmcoXG4gICAgICAgICAgICAgIG1lc3NhZ2Uub2Zmc2V0LFxuICAgICAgICAgICAgICBtZXNzYWdlLm9mZnNldCArIG1lc3NhZ2UubGVuZ3RoXG4gICAgICAgICAgICApfVxcbmBcbiAgICAgICAgICB9XG4gICAgICAgICAgZm9ybWF0dGVkTWVzc2FnZSArPSBtZXNzYWdlLm1lc3NhZ2VcblxuICAgICAgICAgIHN3aXRjaCAobWVzc2FnZS50eXBlKSB7XG4gICAgICAgICAgICBjYXNlICdlcnJvcic6XG4gICAgICAgICAgICAgIC8vIFRPRE8gbWVzaCBvbkVycm9yP1xuICAgICAgICAgICAgICBjb25zb2xlLmVycm9yKGAke3RoaXMub3B0aW9ucy5sYWJlbH0gY29tcGlsYXRpb24gZXJyb3I6XFxuJHtmb3JtYXR0ZWRNZXNzYWdlfWApXG4gICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICBjYXNlICd3YXJuaW5nJzpcbiAgICAgICAgICAgICAgY29uc29sZS53YXJuKGAke3RoaXMub3B0aW9ucy5sYWJlbH0gY29tcGlsYXRpb24gd2FybmluZzpcXG4ke2Zvcm1hdHRlZE1lc3NhZ2V9YClcbiAgICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgICAgIGNhc2UgJ2luZm8nOlxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgJHt0aGlzLm9wdGlvbnMubGFiZWx9IGNvbXBpbGF0aW9uIGluZm9ybWF0aW9uOlxcbiR7Zm9ybWF0dGVkTWVzc2FnZX1gKVxuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gc2hhZGVyTW9kdWxlXG4gIH1cblxuICAvKiBTRVRVUCAqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHtAbGluayBQaXBlbGluZUVudHJ5fSBzaGFkZXJzXG4gICAqL1xuICBjcmVhdGVTaGFkZXJzKCkge1xuICAgIC8qIHdpbGwgYmUgb3ZlcnJpZGVuICovXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBwaXBlbGluZSBlbnRyeSB7QGxpbmsgbGF5b3V0fVxuICAgKi9cbiAgY3JlYXRlUGlwZWxpbmVMYXlvdXQoKSB7XG4gICAgdGhpcy5sYXlvdXQgPSB0aGlzLnJlbmRlcmVyLmNyZWF0ZVBpcGVsaW5lTGF5b3V0KHtcbiAgICAgIGxhYmVsOiB0aGlzLm9wdGlvbnMubGFiZWwgKyAnIGxheW91dCcsXG4gICAgICBiaW5kR3JvdXBMYXlvdXRzOiB0aGlzLmJpbmRHcm91cHMubWFwKChiaW5kR3JvdXApID0+IGJpbmRHcm91cC5iaW5kR3JvdXBMYXlvdXQpLFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSB7QGxpbmsgUGlwZWxpbmVFbnRyeX0gZGVzY3JpcHRvclxuICAgKi9cbiAgY3JlYXRlUGlwZWxpbmVEZXNjcmlwdG9yKCkge1xuICAgIC8qIHdpbGwgYmUgb3ZlcnJpZGVuICovXG4gIH1cblxuICAvKipcbiAgICogRmx1c2ggYSB7QGxpbmsgUGlwZWxpbmVFbnRyeX0sIGkuZS4gcmVzZXQgaXRzIHtAbGluayBiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9LCB7QGxpbmsgbGF5b3V0fSBhbmQgZGVzY3JpcHRvciBhbmQgcmVjb21waWxlIHRoZSB7QGxpbmsgcGlwZWxpbmV9XG4gICAqIFVzZWQgd2hlbiBvbmUgb2YgdGhlIGJpbmQgZ3JvdXAgb3IgcmVuZGVyaW5nIHByb3BlcnR5IGhhcyBjaGFuZ2VkXG4gICAqIEBwYXJhbSBuZXdCaW5kR3JvdXBzIC0gbmV3IHtAbGluayBiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9IGluIGNhc2UgdGhleSBoYXZlIGNoYW5nZWRcbiAgICovXG4gIGZsdXNoUGlwZWxpbmVFbnRyeShuZXdCaW5kR3JvdXBzOiBBbGxvd2VkQmluZEdyb3Vwc1tdID0gW10pIHtcbiAgICB0aGlzLnN0YXR1cy5jb21waWxpbmcgPSBmYWxzZVxuICAgIHRoaXMuc3RhdHVzLmNvbXBpbGVkID0gZmFsc2VcbiAgICB0aGlzLnN0YXR1cy5lcnJvciA9IG51bGxcblxuICAgIHRoaXMuc2V0UGlwZWxpbmVFbnRyeUJpbmRHcm91cHMobmV3QmluZEdyb3VwcylcbiAgICB0aGlzLmNvbXBpbGVQaXBlbGluZUVudHJ5KClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdXAgYSB7QGxpbmsgcGlwZWxpbmV9IGJ5IGNyZWF0aW5nIHRoZSBzaGFkZXJzLCB0aGUge0BsaW5rIGxheW91dH0gYW5kIHRoZSBkZXNjcmlwdG9yXG4gICAqL1xuICBjb21waWxlUGlwZWxpbmVFbnRyeSgpIHtcbiAgICB0aGlzLnN0YXR1cy5jb21waWxpbmcgPSB0cnVlXG5cbiAgICB0aGlzLmNyZWF0ZVNoYWRlcnMoKVxuICAgIHRoaXMuY3JlYXRlUGlwZWxpbmVMYXlvdXQoKVxuICAgIHRoaXMuY3JlYXRlUGlwZWxpbmVEZXNjcmlwdG9yKClcbiAgfVxufVxuIiwiZXhwb3J0IGRlZmF1bHQgLyogd2dzbCAqLyBgXHJcbmZuIGdldE91dHB1dFBvc2l0aW9uKHBvc2l0aW9uOiB2ZWMzZikgLT4gdmVjNGYge1xyXG4gIHJldHVybiBtYXRyaWNlcy5tb2RlbFZpZXdQcm9qZWN0aW9uICogdmVjNGYocG9zaXRpb24sIDEuMCk7XHJcbn1gXHJcbiIsImV4cG9ydCBkZWZhdWx0IC8qIHdnc2wgKi8gYFxuZm4gZ2V0VVZDb3Zlcih1djogdmVjMmYsIHRleHR1cmVNYXRyaXg6IG1hdDR4NGYpIC0+IHZlYzJmIHtcbiAgcmV0dXJuICh0ZXh0dXJlTWF0cml4ICogdmVjNGYodXYsIDAuMCwgMS4wKSkueHk7XG59YFxuIiwiZXhwb3J0IGRlZmF1bHQgLyogd2dzbCAqLyBgXG5mbiBnZXRWZXJ0ZXgyRFRvVVZDb29yZHModmVydGV4OiB2ZWMyZikgLT4gdmVjMmYge1xuICByZXR1cm4gdmVjMihcbiAgICB2ZXJ0ZXgueCAqIDAuNSArIDAuNSxcbiAgICAwLjUgLSB2ZXJ0ZXgueSAqIDAuNVxuICApO1xufVxuXG5mbiBnZXRWZXJ0ZXgzRFRvVVZDb29yZHModmVydGV4OiB2ZWMzZikgLT4gdmVjMmYge1xuICByZXR1cm4gdmVjMihcbiAgICB2ZXJ0ZXgueCAqIDAuNSArIDAuNSxcbiAgICAwLjUgLSB2ZXJ0ZXgueSAqIDAuNVxuICApO1xufVxuYFxuIiwiaW1wb3J0IHsgUmVuZGVyTWF0ZXJpYWxTaGFkZXJzVHlwZSB9IGZyb20gJy4uLy4uL3R5cGVzL01hdGVyaWFscydcbmltcG9ydCBnZXRfb3V0cHV0X3Bvc2l0aW9uIGZyb20gJy4vY2h1bmtzL2dldF9vdXRwdXRfcG9zaXRpb24ud2dzbCdcbmltcG9ydCBnZXRfdXZfY292ZXIgZnJvbSAnLi9jaHVua3MvZ2V0X3V2X2NvdmVyLndnc2wnXG5pbXBvcnQgZ2V0X3ZlcnRleF90b191dl9jb29yZHMgZnJvbSAnLi9jaHVua3MvZ2V0X3ZlcnRleF90b191dl9jb29yZHMud2dzbCdcblxuLyoqIERlZmluZXMge0BsaW5rIFNoYWRlckNodW5rc30gb2JqZWN0IHN0cnVjdHVyZSAqL1xuZXhwb3J0IHR5cGUgU2hhZGVyQ2h1bmtzID0gUmVjb3JkPFJlbmRlck1hdGVyaWFsU2hhZGVyc1R5cGUsIFJlY29yZDxzdHJpbmcsIHN0cmluZz4+XG4vKiogRGVmaW5lcyB7QGxpbmsgUHJvamVjdGVkU2hhZGVyQ2h1bmtzfSBvYmplY3Qgc3RydWN0dXJlICovXG5leHBvcnQgdHlwZSBQcm9qZWN0ZWRTaGFkZXJDaHVua3MgPSBSZWNvcmQ8UmVuZGVyTWF0ZXJpYWxTaGFkZXJzVHlwZSwgUmVjb3JkPHN0cmluZywgc3RyaW5nPj5cblxuLyoqXG4gKiBVc2VmdWwgV0dTTCBjb2RlIGNodW5rcyBhZGRlZCB0byB0aGUgdmVydGV4IGFuZC9vciBmcmFnbWVudCBzaGFkZXJzXG4gKi9cbmV4cG9ydCBjb25zdCBTaGFkZXJDaHVua3MgPSB7XG4gIC8qKiBXR1NMIGNvZGUgY2h1bmtzIGFkZGVkIHRvIHRoZSB2ZXJ0ZXggc2hhZGVyICovXG4gIHZlcnRleDoge1xuICAgIC8qKiBBcHBsaWVzIGdpdmVuIHRleHR1cmUgbWF0cml4IHRvIGdpdmVuIHV2IGNvb3JkaW5hdGVzICovXG4gICAgZ2V0X3V2X2NvdmVyLFxuICB9LFxuICAvKiogV0dTTCBjb2RlIGNodW5rcyBhZGRlZCB0byB0aGUgZnJhZ21lbnQgc2hhZGVyICovXG4gIGZyYWdtZW50OiB7XG4gICAgLyoqIEFwcGxpZXMgZ2l2ZW4gdGV4dHVyZSBtYXRyaXggdG8gZ2l2ZW4gdXYgY29vcmRpbmF0ZXMgKi9cbiAgICBnZXRfdXZfY292ZXIsXG4gICAgLyoqIENvbnZlcnQgdmVydGV4IHBvc2l0aW9uIHRvIHV2IGNvb3JkaW5hdGVzICovXG4gICAgZ2V0X3ZlcnRleF90b191dl9jb29yZHMsXG4gIH0sXG59IGFzIFNoYWRlckNodW5rc1xuXG4vKipcbiAqIFVzZWZ1bCBXR1NMIGNvZGUgY2h1bmtzIGFkZGVkIHRvIHRoZSBwcm9qZWN0ZWQgTWVzaGVzIHZlcnRleCBhbmQvb3IgZnJhZ21lbnQgc2hhZGVyc1xuICovXG5leHBvcnQgY29uc3QgUHJvamVjdGVkU2hhZGVyQ2h1bmtzID0ge1xuICAvKiogV0dTTCBjb2RlIGNodW5rcyBhZGRlZCB0byB0aGUgdmVydGV4IHNoYWRlciAqL1xuICB2ZXJ0ZXg6IHtcbiAgICAvKiogR2V0IG91dHB1dCB2ZWM0ZiBwb3NpdGlvbiB2ZWN0b3IgYnkgYXBwbHlpbmcgbW9kZWwgdmlldyBwcm9qZWN0aW9uIG1hdHJpeCB0byB2ZWMzZiBhdHRyaWJ1dGUgcG9zaXRpb24gdmVjdG9yICovXG4gICAgZ2V0X291dHB1dF9wb3NpdGlvbixcbiAgfSxcbiAgLyoqIFdHU0wgY29kZSBjaHVua3MgYWRkZWQgdG8gdGhlIGZyYWdtZW50IHNoYWRlciAqL1xuICBmcmFnbWVudDoge30sXG59IGFzIFByb2plY3RlZFNoYWRlckNodW5rc1xuIiwiaW1wb3J0IHsgUGlwZWxpbmVFbnRyeSB9IGZyb20gJy4vUGlwZWxpbmVFbnRyeSdcbmltcG9ydCB7IFByb2plY3RlZFNoYWRlckNodW5rcywgU2hhZGVyQ2h1bmtzIH0gZnJvbSAnLi4vc2hhZGVycy9TaGFkZXJDaHVua3MnXG5pbXBvcnQgeyBDYW1lcmFSZW5kZXJlciwgaXNSZW5kZXJlciwgUmVuZGVyZXIgfSBmcm9tICcuLi9yZW5kZXJlcnMvdXRpbHMnXG5pbXBvcnQgeyB0aHJvd0Vycm9yIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnXG5pbXBvcnQge1xuICBQaXBlbGluZUVudHJ5UGFyYW1zLFxuICBQaXBlbGluZUVudHJ5U2hhZGVycyxcbiAgUmVuZGVyUGlwZWxpbmVFbnRyeU9wdGlvbnMsXG4gIFJlbmRlclBpcGVsaW5lRW50cnlQYXJhbXMsXG4gIFJlbmRlclBpcGVsaW5lRW50cnlQcm9wZXJ0aWVzUGFyYW1zXG59IGZyb20gJy4uLy4uL3R5cGVzL1BpcGVsaW5lRW50cmllcydcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vLi4vY3VydGFpbnMvR1BVQ3VydGFpbnMnXG5pbXBvcnQgeyBBbGxvd2VkQmluZEdyb3VwcywgQmluZEdyb3VwQnVmZmVyQmluZGluZ0VsZW1lbnQgfSBmcm9tICcuLi8uLi90eXBlcy9CaW5kR3JvdXBzJ1xuaW1wb3J0IHsgUmVuZGVyTWF0ZXJpYWxBdHRyaWJ1dGVzIH0gZnJvbSAnLi4vLi4vdHlwZXMvTWF0ZXJpYWxzJ1xuXG4vKipcbiAqIFVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIFBpcGVsaW5lRW50cnl9IHNwZWNpZmljYWxseSBkZXNpZ25lZCB0byBoYW5kbGUge0BsaW5rIGNvcmUvbWF0ZXJpYWxzL1JlbmRlck1hdGVyaWFsLlJlbmRlck1hdGVyaWFsIHwgUmVuZGVyTWF0ZXJpYWx9LlxuICpcbiAqICMjIFNoYWRlcnMgcGF0Y2hpbmdcbiAqXG4gKiBUaGUge0BsaW5rIFJlbmRlclBpcGVsaW5lRW50cnl9IHVzZXMgZWFjaCBvZiBpdHMge0BsaW5rIFJlbmRlclBpcGVsaW5lRW50cnkjYmluZEdyb3VwcyB8IGJpbmQgZ3JvdXBzfSB7QGxpbmsgY29yZS9iaW5kaW5ncy9CaW5kaW5nLkJpbmRpbmcgfCBCaW5kaW5nfSB0byBwYXRjaCB0aGUgZ2l2ZW4gY29tcHV0ZSBzaGFkZXIgYmVmb3JlIGNyZWF0aW5nIHRoZSB7QGxpbmsgR1BVU2hhZGVyTW9kdWxlfS48YnI+XG4gKiBJdCB3aWxsIHByZXBlbmQgZXZlcnkge0BsaW5rIGNvcmUvYmluZGluZ3MvQmluZGluZy5CaW5kaW5nIHwgQmluZGluZ30gV0dTTCBjb2RlIHNuaXBwZXRzIChvciBmcmFnbWVudHMpIHdpdGggdGhlIGNvcnJlY3QgYmluZCBncm91cCBhbmQgYmluZGluZ3MgaW5kaWNlcy5cbiAqXG4gKiAjIyBQaXBlbGluZSBjb21waWxhdGlvblxuICpcbiAqIFRoZSB7QGxpbmsgUmVuZGVyUGlwZWxpbmVFbnRyeX0gd2lsbCB0aGVuIGNyZWF0ZSBhIHtAbGluayBHUFVSZW5kZXJQaXBlbGluZX0gKGFzeW5jaHJvbm91c2x5IGJ5IGRlZmF1bHQpLlxuICovXG5leHBvcnQgY2xhc3MgUmVuZGVyUGlwZWxpbmVFbnRyeSBleHRlbmRzIFBpcGVsaW5lRW50cnkge1xuICAvKiogU2hhZGVycyB0byB1c2Ugd2l0aCB0aGlzIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5fSAqL1xuICBzaGFkZXJzOiBQaXBlbGluZUVudHJ5U2hhZGVyc1xuICAvKioge0BsaW5rIFJlbmRlck1hdGVyaWFsQXR0cmlidXRlcyB8IEdlb21ldHJ5IGF0dHJpYnV0ZXN9IHNlbnQgdG8gdGhlIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5fSAqL1xuICBhdHRyaWJ1dGVzOiBSZW5kZXJNYXRlcmlhbEF0dHJpYnV0ZXNcbiAgLyoqIHtAbGluayBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgfCBSZW5kZXIgcGlwZWxpbmUgZGVzY3JpcHRvcn0gYmFzZWQgb24ge0BsaW5rIGxheW91dH0gYW5kIHtAbGluayBzaGFkZXJzfSAqL1xuICBkZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgfCBudWxsXG4gIC8qKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFJlbmRlclBpcGVsaW5lRW50cnl9ICovXG4gIG9wdGlvbnM6IFJlbmRlclBpcGVsaW5lRW50cnlPcHRpb25zXG5cbiAgLyoqXG4gICAqIFJlbmRlclBpcGVsaW5lRW50cnkgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgUmVuZGVyUGlwZWxpbmVFbnRyeVBhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFJlbmRlclBpcGVsaW5lRW50cnl9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihwYXJhbWV0ZXJzOiBSZW5kZXJQaXBlbGluZUVudHJ5UGFyYW1zKSB7XG4gICAgbGV0IHsgcmVuZGVyZXIgfSA9IHBhcmFtZXRlcnNcbiAgICBjb25zdCB7IGxhYmVsLCAuLi5yZW5kZXJpbmdPcHRpb25zIH0gPSBwYXJhbWV0ZXJzXG5cbiAgICAvLyB3ZSBjb3VsZCBwYXNzIG91ciBjdXJ0YWlucyBvYmplY3QgT1Igb3VyIGN1cnRhaW5zIHJlbmRlcmVyIG9iamVjdFxuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBSZW5kZXJlcilcblxuICAgIGNvbnN0IHR5cGUgPSAnUmVuZGVyUGlwZWxpbmVFbnRyeSdcblxuICAgIGlzUmVuZGVyZXIocmVuZGVyZXIsIGxhYmVsID8gbGFiZWwgKyAnICcgKyB0eXBlIDogdHlwZSlcblxuICAgIHN1cGVyKHBhcmFtZXRlcnMpXG5cbiAgICB0aGlzLnR5cGUgPSB0eXBlXG5cbiAgICB0aGlzLnNoYWRlcnMgPSB7XG4gICAgICB2ZXJ0ZXg6IHtcbiAgICAgICAgaGVhZDogJycsXG4gICAgICAgIGNvZGU6ICcnLFxuICAgICAgICBtb2R1bGU6IG51bGwsXG4gICAgICB9LFxuICAgICAgZnJhZ21lbnQ6IHtcbiAgICAgICAgaGVhZDogJycsXG4gICAgICAgIGNvZGU6ICcnLFxuICAgICAgICBtb2R1bGU6IG51bGwsXG4gICAgICB9LFxuICAgICAgZnVsbDoge1xuICAgICAgICBoZWFkOiAnJyxcbiAgICAgICAgY29kZTogJycsXG4gICAgICAgIG1vZHVsZTogbnVsbCxcbiAgICAgIH0sXG4gICAgfVxuXG4gICAgdGhpcy5kZXNjcmlwdG9yID0gbnVsbFxuXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgLi4udGhpcy5vcHRpb25zLFxuICAgICAgLi4ucmVuZGVyaW5nT3B0aW9ucyxcbiAgICB9IGFzIFJlbmRlclBpcGVsaW5lRW50cnlPcHRpb25zXG4gIH1cblxuICAvLyBUT0RPISBuZWVkIHRvIGNob3NlIHdoZXRoZXIgd2Ugc2hvdWxkIHNpbGVudGx5IGFkZCB0aGUgY2FtZXJhIGJpbmQgZ3JvdXAgaGVyZVxuICAvLyBvciBleHBsaWNpdGx5IGluIHRoZSBSZW5kZXJNYXRlcmlhbCBjbGFzcyBjcmVhdGVCaW5kR3JvdXBzKCkgbWV0aG9kXG4gIC8qKlxuICAgKiBNZXJnZSBvdXIge0BsaW5rIGJpbmRHcm91cHMgfCBwaXBlbGluZSBlbnRyeSBiaW5kIGdyb3Vwc30gd2l0aCB0aGUge0BsaW5rIENhbWVyYVJlbmRlcmVyI2NhbWVyYUJpbmRHcm91cCB8IGNhbWVyYSBiaW5kIGdyb3VwfSBpZiBuZWVkZWQgYW5kIHNldCB0aGVtXG4gICAqIEBwYXJhbSBiaW5kR3JvdXBzIC0ge0BsaW5rIGNvcmUvbWF0ZXJpYWxzL1JlbmRlck1hdGVyaWFsLlJlbmRlck1hdGVyaWFsI2JpbmRHcm91cHMgfCBiaW5kIGdyb3Vwc30gdG8gdXNlIHdpdGggdGhpcyB7QGxpbmsgUmVuZGVyUGlwZWxpbmVFbnRyeX1cbiAgICovXG4gIHNldFBpcGVsaW5lRW50cnlCaW5kR3JvdXBzKGJpbmRHcm91cHM6IEFsbG93ZWRCaW5kR3JvdXBzW10pIHtcbiAgICB0aGlzLmJpbmRHcm91cHMgPVxuICAgICAgJ2NhbWVyYUJpbmRHcm91cCcgaW4gdGhpcy5yZW5kZXJlciAmJiB0aGlzLm9wdGlvbnMudXNlUHJvamVjdGlvblxuICAgICAgICA/IFt0aGlzLnJlbmRlcmVyLmNhbWVyYUJpbmRHcm91cCwgLi4uYmluZEdyb3Vwc11cbiAgICAgICAgOiBiaW5kR3JvdXBzXG4gIH1cblxuICAvKipcbiAgICogU2V0IHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5fSBwcm9wZXJ0aWVzIChpbiB0aGlzIGNhc2UgdGhlIHtAbGluayBiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9IGFuZCB7QGxpbmsgYXR0cmlidXRlc30pXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0gdGhlIHtAbGluayBjb3JlL21hdGVyaWFscy9SZW5kZXJNYXRlcmlhbC5SZW5kZXJNYXRlcmlhbCNiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9IGFuZCB7QGxpbmsgY29yZS9tYXRlcmlhbHMvUmVuZGVyTWF0ZXJpYWwuUmVuZGVyTWF0ZXJpYWwjYXR0cmlidXRlcyB8IGF0dHJpYnV0ZXN9IHRvIHVzZVxuICAgKi9cbiAgc2V0UGlwZWxpbmVFbnRyeVByb3BlcnRpZXMocGFyYW1ldGVyczogUmVuZGVyUGlwZWxpbmVFbnRyeVByb3BlcnRpZXNQYXJhbXMpIHtcbiAgICBjb25zdCB7IGF0dHJpYnV0ZXMsIGJpbmRHcm91cHMgfSA9IHBhcmFtZXRlcnNcblxuICAgIHRoaXMuYXR0cmlidXRlcyA9IGF0dHJpYnV0ZXNcblxuICAgIHRoaXMuc2V0UGlwZWxpbmVFbnRyeUJpbmRHcm91cHMoYmluZEdyb3VwcylcbiAgfVxuXG4gIC8qIFNIQURFUlMgKi9cblxuICAvKipcbiAgICogUGF0Y2ggdGhlIHNoYWRlcnMgYnkgYXBwZW5kaW5nIGFsbCB0aGUgbmVjZXNzYXJ5IHNoYWRlciBjaHVua3MsIHtAbGluayBiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9KSBhbmQge0BsaW5rIGF0dHJpYnV0ZXN9IFdHU0wgY29kZSBmcmFnbWVudHMgdG8gdGhlIGdpdmVuIHtAbGluayBQaXBlbGluZUVudHJ5UGFyYW1zI3NoYWRlcnMgfCBwYXJhbWV0ZXIgc2hhZGVyIGNvZGV9XG4gICAqL1xuICBwYXRjaFNoYWRlcnMoKSB7XG4gICAgdGhpcy5zaGFkZXJzLnZlcnRleC5oZWFkID0gJydcbiAgICB0aGlzLnNoYWRlcnMudmVydGV4LmNvZGUgPSAnJ1xuICAgIHRoaXMuc2hhZGVycy5mcmFnbWVudC5oZWFkID0gJydcbiAgICB0aGlzLnNoYWRlcnMuZnJhZ21lbnQuY29kZSA9ICcnXG4gICAgdGhpcy5zaGFkZXJzLmZ1bGwuaGVhZCA9ICcnXG4gICAgdGhpcy5zaGFkZXJzLmZ1bGwuY29kZSA9ICcnXG5cbiAgICAvLyBmaXJzdCBhZGQgY2h1bmtzXG4gICAgZm9yIChjb25zdCBjaHVuayBpbiBTaGFkZXJDaHVua3MudmVydGV4KSB7XG4gICAgICB0aGlzLnNoYWRlcnMudmVydGV4LmhlYWQgPSBgJHtTaGFkZXJDaHVua3MudmVydGV4W2NodW5rXX1cXG4ke3RoaXMuc2hhZGVycy52ZXJ0ZXguaGVhZH1gXG4gICAgICB0aGlzLnNoYWRlcnMuZnVsbC5oZWFkID0gYCR7U2hhZGVyQ2h1bmtzLnZlcnRleFtjaHVua119XFxuJHt0aGlzLnNoYWRlcnMuZnVsbC5oZWFkfWBcbiAgICB9XG5cbiAgICBmb3IgKGNvbnN0IGNodW5rIGluIFNoYWRlckNodW5rcy5mcmFnbWVudCkge1xuICAgICAgdGhpcy5zaGFkZXJzLmZyYWdtZW50LmhlYWQgPSBgJHtTaGFkZXJDaHVua3MuZnJhZ21lbnRbY2h1bmtdfVxcbiR7dGhpcy5zaGFkZXJzLmZyYWdtZW50LmhlYWR9YFxuXG4gICAgICBpZiAodGhpcy5zaGFkZXJzLmZ1bGwuaGVhZC5pbmRleE9mKFNoYWRlckNodW5rcy5mcmFnbWVudFtjaHVua10pID09PSAtMSkge1xuICAgICAgICB0aGlzLnNoYWRlcnMuZnVsbC5oZWFkID0gYCR7U2hhZGVyQ2h1bmtzLmZyYWdtZW50W2NodW5rXX1cXG4ke3RoaXMuc2hhZGVycy5mdWxsLmhlYWR9YFxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICh0aGlzLm9wdGlvbnMudXNlUHJvamVjdGlvbikge1xuICAgICAgZm9yIChjb25zdCBjaHVuayBpbiBQcm9qZWN0ZWRTaGFkZXJDaHVua3MudmVydGV4KSB7XG4gICAgICAgIHRoaXMuc2hhZGVycy52ZXJ0ZXguaGVhZCA9IGAke1Byb2plY3RlZFNoYWRlckNodW5rcy52ZXJ0ZXhbY2h1bmtdfVxcbiR7dGhpcy5zaGFkZXJzLnZlcnRleC5oZWFkfWBcbiAgICAgICAgdGhpcy5zaGFkZXJzLmZ1bGwuaGVhZCA9IGAke1Byb2plY3RlZFNoYWRlckNodW5rcy52ZXJ0ZXhbY2h1bmtdfVxcbiR7dGhpcy5zaGFkZXJzLmZ1bGwuaGVhZH1gXG4gICAgICB9XG5cbiAgICAgIGZvciAoY29uc3QgY2h1bmsgaW4gUHJvamVjdGVkU2hhZGVyQ2h1bmtzLmZyYWdtZW50KSB7XG4gICAgICAgIHRoaXMuc2hhZGVycy5mcmFnbWVudC5oZWFkID0gYCR7UHJvamVjdGVkU2hhZGVyQ2h1bmtzLmZyYWdtZW50W2NodW5rXX1cXG4ke3RoaXMuc2hhZGVycy5mcmFnbWVudC5oZWFkfWBcblxuICAgICAgICBpZiAodGhpcy5zaGFkZXJzLmZ1bGwuaGVhZC5pbmRleE9mKFByb2plY3RlZFNoYWRlckNodW5rcy5mcmFnbWVudFtjaHVua10pID09PSAtMSkge1xuICAgICAgICAgIHRoaXMuc2hhZGVycy5mdWxsLmhlYWQgPSBgJHtQcm9qZWN0ZWRTaGFkZXJDaHVua3MuZnJhZ21lbnRbY2h1bmtdfVxcbiR7dGhpcy5zaGFkZXJzLmZ1bGwuaGVhZH1gXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBjb25zdCBncm91cHNCaW5kaW5ncyA9IFtdXG4gICAgdGhpcy5iaW5kR3JvdXBzLmZvckVhY2goKGJpbmRHcm91cCkgPT4ge1xuICAgICAgbGV0IGJpbmRJbmRleCA9IDBcbiAgICAgIGJpbmRHcm91cC5iaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nLCBiaW5kaW5nSW5kZXgpID0+IHtcbiAgICAgICAgYmluZGluZy53Z3NsR3JvdXBGcmFnbWVudC5mb3JFYWNoKChncm91cEZyYWdtZW50LCBncm91cEZyYWdtZW50SW5kZXgpID0+IHtcbiAgICAgICAgICBncm91cHNCaW5kaW5ncy5wdXNoKHtcbiAgICAgICAgICAgIGdyb3VwSW5kZXg6IGJpbmRHcm91cC5pbmRleCxcbiAgICAgICAgICAgIHZpc2liaWxpdHk6IGJpbmRpbmcudmlzaWJpbGl0eSxcbiAgICAgICAgICAgIGJpbmRJbmRleCxcbiAgICAgICAgICAgIHdnc2xTdHJ1Y3RGcmFnbWVudDogKGJpbmRpbmcgYXMgQmluZEdyb3VwQnVmZmVyQmluZGluZ0VsZW1lbnQpLndnc2xTdHJ1Y3RGcmFnbWVudCxcbiAgICAgICAgICAgIHdnc2xHcm91cEZyYWdtZW50OiBncm91cEZyYWdtZW50LFxuICAgICAgICAgICAgbmV3TGluZTpcbiAgICAgICAgICAgICAgYmluZGluZ0luZGV4ID09PSBiaW5kR3JvdXAuYmluZGluZ3MubGVuZ3RoIC0gMSAmJlxuICAgICAgICAgICAgICBncm91cEZyYWdtZW50SW5kZXggPT09IGJpbmRpbmcud2dzbEdyb3VwRnJhZ21lbnQubGVuZ3RoIC0gMSxcbiAgICAgICAgICB9KVxuXG4gICAgICAgICAgYmluZEluZGV4KytcbiAgICAgICAgfSlcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIGdyb3Vwc0JpbmRpbmdzLmZvckVhY2goKGdyb3VwQmluZGluZykgPT4ge1xuICAgICAgaWYgKFxuICAgICAgICBncm91cEJpbmRpbmcudmlzaWJpbGl0eSA9PT0gR1BVU2hhZGVyU3RhZ2UuVkVSVEVYIHx8XG4gICAgICAgIGdyb3VwQmluZGluZy52aXNpYmlsaXR5ID09PSAoR1BVU2hhZGVyU3RhZ2UuVkVSVEVYIHwgR1BVU2hhZGVyU3RhZ2UuRlJBR01FTlQgfCBHUFVTaGFkZXJTdGFnZS5DT01QVVRFKVxuICAgICAgKSB7XG4gICAgICAgIC8vIGRvIG5vdCBkdXBsaWNhdGUgc3RydWN0c1xuICAgICAgICBpZiAoXG4gICAgICAgICAgZ3JvdXBCaW5kaW5nLndnc2xTdHJ1Y3RGcmFnbWVudCAmJlxuICAgICAgICAgIHRoaXMuc2hhZGVycy52ZXJ0ZXguaGVhZC5pbmRleE9mKGdyb3VwQmluZGluZy53Z3NsU3RydWN0RnJhZ21lbnQpID09PSAtMVxuICAgICAgICApIHtcbiAgICAgICAgICB0aGlzLnNoYWRlcnMudmVydGV4LmhlYWQgPSBgXFxuJHtncm91cEJpbmRpbmcud2dzbFN0cnVjdEZyYWdtZW50fVxcbiR7dGhpcy5zaGFkZXJzLnZlcnRleC5oZWFkfWBcbiAgICAgICAgfVxuXG4gICAgICAgIC8vIGRvIG5vdCBkdXBsaWNhdGUgc3RydWN0IHZhciBhcyB3ZWxsXG4gICAgICAgIGlmICh0aGlzLnNoYWRlcnMudmVydGV4LmhlYWQuaW5kZXhPZihncm91cEJpbmRpbmcud2dzbEdyb3VwRnJhZ21lbnQpID09PSAtMSkge1xuICAgICAgICAgIHRoaXMuc2hhZGVycy52ZXJ0ZXguaGVhZCA9IGAke3RoaXMuc2hhZGVycy52ZXJ0ZXguaGVhZH1cXG5AZ3JvdXAoJHtncm91cEJpbmRpbmcuZ3JvdXBJbmRleH0pIEBiaW5kaW5nKCR7Z3JvdXBCaW5kaW5nLmJpbmRJbmRleH0pICR7Z3JvdXBCaW5kaW5nLndnc2xHcm91cEZyYWdtZW50fWBcblxuICAgICAgICAgIGlmIChncm91cEJpbmRpbmcubmV3TGluZSkgdGhpcy5zaGFkZXJzLnZlcnRleC5oZWFkICs9IGBcXG5gXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICBncm91cEJpbmRpbmcudmlzaWJpbGl0eSA9PT0gR1BVU2hhZGVyU3RhZ2UuRlJBR01FTlQgfHxcbiAgICAgICAgZ3JvdXBCaW5kaW5nLnZpc2liaWxpdHkgPT09IChHUFVTaGFkZXJTdGFnZS5WRVJURVggfCBHUFVTaGFkZXJTdGFnZS5GUkFHTUVOVCB8IEdQVVNoYWRlclN0YWdlLkNPTVBVVEUpXG4gICAgICApIHtcbiAgICAgICAgLy8gZG8gbm90IGR1cGxpY2F0ZSBzdHJ1Y3RzXG4gICAgICAgIGlmIChcbiAgICAgICAgICBncm91cEJpbmRpbmcud2dzbFN0cnVjdEZyYWdtZW50ICYmXG4gICAgICAgICAgdGhpcy5zaGFkZXJzLmZyYWdtZW50LmhlYWQuaW5kZXhPZihncm91cEJpbmRpbmcud2dzbFN0cnVjdEZyYWdtZW50KSA9PT0gLTFcbiAgICAgICAgKSB7XG4gICAgICAgICAgdGhpcy5zaGFkZXJzLmZyYWdtZW50LmhlYWQgPSBgXFxuJHtncm91cEJpbmRpbmcud2dzbFN0cnVjdEZyYWdtZW50fVxcbiR7dGhpcy5zaGFkZXJzLmZyYWdtZW50LmhlYWR9YFxuICAgICAgICB9XG5cbiAgICAgICAgLy8gZG8gbm90IGR1cGxpY2F0ZSBzdHJ1Y3QgdmFyIGFzIHdlbGxcbiAgICAgICAgaWYgKHRoaXMuc2hhZGVycy5mcmFnbWVudC5oZWFkLmluZGV4T2YoZ3JvdXBCaW5kaW5nLndnc2xHcm91cEZyYWdtZW50KSA9PT0gLTEpIHtcbiAgICAgICAgICB0aGlzLnNoYWRlcnMuZnJhZ21lbnQuaGVhZCA9IGAke3RoaXMuc2hhZGVycy5mcmFnbWVudC5oZWFkfVxcbkBncm91cCgke2dyb3VwQmluZGluZy5ncm91cEluZGV4fSkgQGJpbmRpbmcoJHtncm91cEJpbmRpbmcuYmluZEluZGV4fSkgJHtncm91cEJpbmRpbmcud2dzbEdyb3VwRnJhZ21lbnR9YFxuXG4gICAgICAgICAgaWYgKGdyb3VwQmluZGluZy5uZXdMaW5lKSB0aGlzLnNoYWRlcnMuZnJhZ21lbnQuaGVhZCArPSBgXFxuYFxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChncm91cEJpbmRpbmcud2dzbFN0cnVjdEZyYWdtZW50ICYmIHRoaXMuc2hhZGVycy5mdWxsLmhlYWQuaW5kZXhPZihncm91cEJpbmRpbmcud2dzbFN0cnVjdEZyYWdtZW50KSA9PT0gLTEpIHtcbiAgICAgICAgdGhpcy5zaGFkZXJzLmZ1bGwuaGVhZCA9IGBcXG4ke2dyb3VwQmluZGluZy53Z3NsU3RydWN0RnJhZ21lbnR9XFxuJHt0aGlzLnNoYWRlcnMuZnVsbC5oZWFkfWBcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuc2hhZGVycy5mdWxsLmhlYWQuaW5kZXhPZihncm91cEJpbmRpbmcud2dzbEdyb3VwRnJhZ21lbnQpID09PSAtMSkge1xuICAgICAgICB0aGlzLnNoYWRlcnMuZnVsbC5oZWFkID0gYCR7dGhpcy5zaGFkZXJzLmZ1bGwuaGVhZH1cXG5AZ3JvdXAoJHtncm91cEJpbmRpbmcuZ3JvdXBJbmRleH0pIEBiaW5kaW5nKCR7Z3JvdXBCaW5kaW5nLmJpbmRJbmRleH0pICR7Z3JvdXBCaW5kaW5nLndnc2xHcm91cEZyYWdtZW50fWBcblxuICAgICAgICBpZiAoZ3JvdXBCaW5kaW5nLm5ld0xpbmUpIHRoaXMuc2hhZGVycy5mdWxsLmhlYWQgKz0gYFxcbmBcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgLy8gYWRkIGF0dHJpYnV0ZXMgdG8gdmVydGV4IHNoYWRlciBvbmx5XG4gICAgdGhpcy5zaGFkZXJzLnZlcnRleC5oZWFkID0gYCR7dGhpcy5hdHRyaWJ1dGVzLndnc2xTdHJ1Y3RGcmFnbWVudH1cXG4ke3RoaXMuc2hhZGVycy52ZXJ0ZXguaGVhZH1gXG4gICAgdGhpcy5zaGFkZXJzLmZ1bGwuaGVhZCA9IGAke3RoaXMuYXR0cmlidXRlcy53Z3NsU3RydWN0RnJhZ21lbnR9XFxuJHt0aGlzLnNoYWRlcnMuZnVsbC5oZWFkfWBcblxuICAgIHRoaXMuc2hhZGVycy52ZXJ0ZXguY29kZSA9IHRoaXMuc2hhZGVycy52ZXJ0ZXguaGVhZCArIHRoaXMub3B0aW9ucy5zaGFkZXJzLnZlcnRleC5jb2RlXG4gICAgdGhpcy5zaGFkZXJzLmZyYWdtZW50LmNvZGUgPSB0aGlzLnNoYWRlcnMuZnJhZ21lbnQuaGVhZCArIHRoaXMub3B0aW9ucy5zaGFkZXJzLmZyYWdtZW50LmNvZGVcblxuICAgIC8vIGNoZWNrIGlmIGl0cyBvbmUgc2hhZGVyIHN0cmluZyB3aXRoIGRpZmZlcmVudCBlbnRyeSBwb2ludHNcbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdGlvbnMuc2hhZGVycy52ZXJ0ZXguZW50cnlQb2ludCAhPT0gdGhpcy5vcHRpb25zLnNoYWRlcnMuZnJhZ21lbnQuZW50cnlQb2ludCAmJlxuICAgICAgdGhpcy5vcHRpb25zLnNoYWRlcnMudmVydGV4LmNvZGUubG9jYWxlQ29tcGFyZSh0aGlzLm9wdGlvbnMuc2hhZGVycy5mcmFnbWVudC5jb2RlKSA9PT0gMFxuICAgICkge1xuICAgICAgdGhpcy5zaGFkZXJzLmZ1bGwuY29kZSA9IHRoaXMuc2hhZGVycy5mdWxsLmhlYWQgKyB0aGlzLm9wdGlvbnMuc2hhZGVycy52ZXJ0ZXguY29kZVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLnNoYWRlcnMuZnVsbC5jb2RlID1cbiAgICAgICAgdGhpcy5zaGFkZXJzLmZ1bGwuaGVhZCArIHRoaXMub3B0aW9ucy5zaGFkZXJzLnZlcnRleC5jb2RlICsgdGhpcy5vcHRpb25zLnNoYWRlcnMuZnJhZ21lbnQuY29kZVxuICAgIH1cbiAgfVxuXG4gIC8qIFNFVFVQICovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUge0BsaW5rIHNoYWRlcnN9OiBwYXRjaCB0aGVtIGFuZCBjcmVhdGUgdGhlIHtAbGluayBHUFVTaGFkZXJNb2R1bGV9XG4gICAqL1xuICBjcmVhdGVTaGFkZXJzKCkge1xuICAgIHRoaXMucGF0Y2hTaGFkZXJzKClcblxuICAgIGNvbnN0IGlzU2FtZVNoYWRlciA9XG4gICAgICB0aGlzLm9wdGlvbnMuc2hhZGVycy52ZXJ0ZXguZW50cnlQb2ludCAhPT0gdGhpcy5vcHRpb25zLnNoYWRlcnMuZnJhZ21lbnQuZW50cnlQb2ludCAmJlxuICAgICAgdGhpcy5vcHRpb25zLnNoYWRlcnMudmVydGV4LmNvZGUubG9jYWxlQ29tcGFyZSh0aGlzLm9wdGlvbnMuc2hhZGVycy5mcmFnbWVudC5jb2RlKSA9PT0gMFxuXG4gICAgdGhpcy5zaGFkZXJzLnZlcnRleC5tb2R1bGUgPSB0aGlzLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG4gICAgICBjb2RlOiB0aGlzLnNoYWRlcnNbaXNTYW1lU2hhZGVyID8gJ2Z1bGwnIDogJ3ZlcnRleCddLmNvZGUsXG4gICAgICB0eXBlOiAndmVydGV4JyxcbiAgICB9KVxuXG4gICAgdGhpcy5zaGFkZXJzLmZyYWdtZW50Lm1vZHVsZSA9IHRoaXMuY3JlYXRlU2hhZGVyTW9kdWxlKHtcbiAgICAgIGNvZGU6IHRoaXMuc2hhZGVyc1tpc1NhbWVTaGFkZXIgPyAnZnVsbCcgOiAnZnJhZ21lbnQnXS5jb2RlLFxuICAgICAgdHlwZTogJ2ZyYWdtZW50JyxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSB0aGUgcmVuZGVyIHBpcGVsaW5lIHtAbGluayBkZXNjcmlwdG9yfVxuICAgKi9cbiAgY3JlYXRlUGlwZWxpbmVEZXNjcmlwdG9yKCkge1xuICAgIGlmICghdGhpcy5zaGFkZXJzLnZlcnRleC5tb2R1bGUgfHwgIXRoaXMuc2hhZGVycy5mcmFnbWVudC5tb2R1bGUpIHJldHVyblxuXG4gICAgbGV0IHZlcnRleExvY2F0aW9uSW5kZXggPSAtMVxuXG4gICAgLy8gd2Ugd2lsbCBhc3N1bWUgb3VyIHJlbmRlcmVyIGFscGhhTW9kZSBpcyBzZXQgdG8gJ3ByZW11bHRpcGxpZWQnXG4gICAgLy8gd2UgZWl0aGVyIGRpc2FibGUgYmxlbmRpbmcgaWYgbWVzaCBpZiBvcGFxdWVcbiAgICAvLyB1c2UgYSBjdXN0b20gYmxlbmRpbmcgaWYgc2V0XG4gICAgLy8gb3IgdXNlIHRoaXMgYmxlbmQgZXF1YXRpb24gaWYgbWVzaCBpcyB0cmFuc3BhcmVudCAoc2VlIGh0dHBzOi8vbGltbnUuY29tL3dlYmdsLWJsZW5kaW5nLXlvdXJlLXByb2JhYmx5LXdyb25nLylcbiAgICBjb25zdCBibGVuZCA9XG4gICAgICB0aGlzLm9wdGlvbnMuYmxlbmQgPz9cbiAgICAgICh0aGlzLm9wdGlvbnMudHJhbnNwYXJlbnQgJiYge1xuICAgICAgICBjb2xvcjoge1xuICAgICAgICAgIHNyY0ZhY3RvcjogJ3NyYy1hbHBoYScsXG4gICAgICAgICAgZHN0RmFjdG9yOiAnb25lLW1pbnVzLXNyYy1hbHBoYScsXG4gICAgICAgIH0sXG4gICAgICAgIGFscGhhOiB7XG4gICAgICAgICAgc3JjRmFjdG9yOiAnb25lJyxcbiAgICAgICAgICBkc3RGYWN0b3I6ICdvbmUtbWludXMtc3JjLWFscGhhJyxcbiAgICAgICAgfSxcbiAgICAgIH0pXG5cbiAgICB0aGlzLmRlc2NyaXB0b3IgPSB7XG4gICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsLFxuICAgICAgbGF5b3V0OiB0aGlzLmxheW91dCxcbiAgICAgIHZlcnRleDoge1xuICAgICAgICBtb2R1bGU6IHRoaXMuc2hhZGVycy52ZXJ0ZXgubW9kdWxlLFxuICAgICAgICBlbnRyeVBvaW50OiB0aGlzLm9wdGlvbnMuc2hhZGVycy52ZXJ0ZXguZW50cnlQb2ludCxcbiAgICAgICAgYnVmZmVyczogdGhpcy5hdHRyaWJ1dGVzLnZlcnRleEJ1ZmZlcnMubWFwKCh2ZXJ0ZXhCdWZmZXIpID0+IHtcbiAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3RlcE1vZGU6IHZlcnRleEJ1ZmZlci5zdGVwTW9kZSxcbiAgICAgICAgICAgIGFycmF5U3RyaWRlOiB2ZXJ0ZXhCdWZmZXIuYXJyYXlTdHJpZGUgKiA0LCAvLyA0IGJ5dGVzIGVhY2hcbiAgICAgICAgICAgIGF0dHJpYnV0ZXM6IHZlcnRleEJ1ZmZlci5hdHRyaWJ1dGVzLm1hcCgoYXR0cmlidXRlKSA9PiB7XG4gICAgICAgICAgICAgIHZlcnRleExvY2F0aW9uSW5kZXgrK1xuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIHNoYWRlckxvY2F0aW9uOiB2ZXJ0ZXhMb2NhdGlvbkluZGV4LFxuICAgICAgICAgICAgICAgIG9mZnNldDogYXR0cmlidXRlLmJ1ZmZlck9mZnNldCwgLy8gcHJldmlvdXMgYXR0cmlidXRlIHNpemUgKiA0XG4gICAgICAgICAgICAgICAgZm9ybWF0OiBhdHRyaWJ1dGUuYnVmZmVyRm9ybWF0LFxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgfSxcbiAgICAgIGZyYWdtZW50OiB7XG4gICAgICAgIG1vZHVsZTogdGhpcy5zaGFkZXJzLmZyYWdtZW50Lm1vZHVsZSxcbiAgICAgICAgZW50cnlQb2ludDogdGhpcy5vcHRpb25zLnNoYWRlcnMuZnJhZ21lbnQuZW50cnlQb2ludCxcbiAgICAgICAgdGFyZ2V0czogW1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGZvcm1hdDogdGhpcy5vcHRpb25zLnRhcmdldEZvcm1hdCA/PyB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucHJlZmVycmVkRm9ybWF0LFxuICAgICAgICAgICAgLi4uKGJsZW5kICYmIHtcbiAgICAgICAgICAgICAgYmxlbmQsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICB9LFxuICAgICAgICBdLFxuICAgICAgfSxcbiAgICAgIHByaW1pdGl2ZToge1xuICAgICAgICB0b3BvbG9neTogdGhpcy5vcHRpb25zLnRvcG9sb2d5LFxuICAgICAgICBmcm9udEZhY2U6IHRoaXMub3B0aW9ucy52ZXJ0aWNlc09yZGVyLFxuICAgICAgICBjdWxsTW9kZTogdGhpcy5vcHRpb25zLmN1bGxNb2RlLFxuICAgICAgfSxcbiAgICAgIC4uLih0aGlzLm9wdGlvbnMuZGVwdGggJiYge1xuICAgICAgICBkZXB0aFN0ZW5jaWw6IHtcbiAgICAgICAgICBkZXB0aFdyaXRlRW5hYmxlZDogdGhpcy5vcHRpb25zLmRlcHRoV3JpdGVFbmFibGVkLFxuICAgICAgICAgIGRlcHRoQ29tcGFyZTogdGhpcy5vcHRpb25zLmRlcHRoQ29tcGFyZSxcbiAgICAgICAgICBmb3JtYXQ6ICdkZXB0aDI0cGx1cycsXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICAgIC4uLih0aGlzLm9wdGlvbnMuc2FtcGxlQ291bnQgPiAxICYmIHtcbiAgICAgICAgbXVsdGlzYW1wbGU6IHtcbiAgICAgICAgICBjb3VudDogdGhpcy5vcHRpb25zLnNhbXBsZUNvdW50LFxuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgfSBhcyBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3JcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHJlbmRlciB7QGxpbmsgcGlwZWxpbmV9XG4gICAqL1xuICBjcmVhdGVSZW5kZXJQaXBlbGluZSgpIHtcbiAgICBpZiAoIXRoaXMuc2hhZGVycy52ZXJ0ZXgubW9kdWxlIHx8ICF0aGlzLnNoYWRlcnMuZnJhZ21lbnQubW9kdWxlKSByZXR1cm5cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLnBpcGVsaW5lID0gdGhpcy5yZW5kZXJlci5jcmVhdGVSZW5kZXJQaXBlbGluZSh0aGlzLmRlc2NyaXB0b3IpXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMuc3RhdHVzLmVycm9yID0gZXJyb3JcbiAgICAgIHRocm93RXJyb3IoZXJyb3IpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFzeW5jaHJvbm91c2x5IGNyZWF0ZSB0aGUgcmVuZGVyIHtAbGluayBwaXBlbGluZX1cbiAgICogQGFzeW5jXG4gICAqIEByZXR1cm5zIC0gdm9pZCBwcm9taXNlIHJlc3VsdFxuICAgKi9cbiAgYXN5bmMgY3JlYXRlUmVuZGVyUGlwZWxpbmVBc3luYygpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBpZiAoIXRoaXMuc2hhZGVycy52ZXJ0ZXgubW9kdWxlIHx8ICF0aGlzLnNoYWRlcnMuZnJhZ21lbnQubW9kdWxlKSByZXR1cm5cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLnBpcGVsaW5lID0gYXdhaXQgdGhpcy5yZW5kZXJlci5jcmVhdGVSZW5kZXJQaXBlbGluZUFzeW5jKHRoaXMuZGVzY3JpcHRvcilcbiAgICAgIHRoaXMuc3RhdHVzLmNvbXBpbGVkID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0dXMuY29tcGlsaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdHVzLmVycm9yID0gbnVsbFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLnN0YXR1cy5lcnJvciA9IGVycm9yXG4gICAgICB0aHJvd0Vycm9yKGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIHtAbGluayBQaXBlbGluZUVudHJ5I2NvbXBpbGVQaXBlbGluZUVudHJ5IHwgUGlwZWxpbmVFbnRyeSBjb21waWxlUGlwZWxpbmVFbnRyeX0gbWV0aG9kLCB0aGVuIGNyZWF0ZSBvdXIgcmVuZGVyIHtAbGluayBwaXBlbGluZX1cbiAgICogQGFzeW5jXG4gICAqL1xuICBhc3luYyBjb21waWxlUGlwZWxpbmVFbnRyeSgpOiBQcm9taXNlPHZvaWQ+IHtcbiAgICBzdXBlci5jb21waWxlUGlwZWxpbmVFbnRyeSgpXG5cbiAgICBpZiAodGhpcy5vcHRpb25zLnVzZUFzeW5jKSB7XG4gICAgICBhd2FpdCB0aGlzLmNyZWF0ZVJlbmRlclBpcGVsaW5lQXN5bmMoKVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmNyZWF0ZVJlbmRlclBpcGVsaW5lKClcbiAgICAgIHRoaXMuc3RhdHVzLmNvbXBpbGVkID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0dXMuY29tcGlsaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdHVzLmVycm9yID0gbnVsbFxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZWxpbmVFbnRyeSB9IGZyb20gJy4vUGlwZWxpbmVFbnRyeSdcbmltcG9ydCB7IGlzUmVuZGVyZXIsIFJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL3V0aWxzJ1xuaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJ1xuaW1wb3J0IHsgUGlwZWxpbmVFbnRyeVBhcmFtcywgUGlwZWxpbmVFbnRyeVByb3BlcnRpZXNQYXJhbXMsIFBpcGVsaW5lRW50cnlTaGFkZXJzIH0gZnJvbSAnLi4vLi4vdHlwZXMvUGlwZWxpbmVFbnRyaWVzJ1xuaW1wb3J0IHsgQmluZEdyb3VwQnVmZmVyQmluZGluZ0VsZW1lbnQgfSBmcm9tICcuLi8uLi90eXBlcy9CaW5kR3JvdXBzJ1xuaW1wb3J0IHsgR1BVQ3VydGFpbnMgfSBmcm9tICcuLi8uLi9jdXJ0YWlucy9HUFVDdXJ0YWlucydcblxuLyoqXG4gKiBVc2VkIHRvIGNyZWF0ZSBhIHtAbGluayBQaXBlbGluZUVudHJ5fSBzcGVjaWZpY2FsbHkgZGVzaWduZWQgdG8gaGFuZGxlIHtAbGluayBjb3JlL21hdGVyaWFscy9Db21wdXRlTWF0ZXJpYWwuQ29tcHV0ZU1hdGVyaWFsIHwgQ29tcHV0ZU1hdGVyaWFsfS5cbiAqXG4gKiAjIyBTaGFkZXJzIHBhdGNoaW5nXG4gKlxuICogVGhlIHtAbGluayBDb21wdXRlUGlwZWxpbmVFbnRyeX0gdXNlcyBlYWNoIG9mIGl0cyB7QGxpbmsgQ29tcHV0ZVBpcGVsaW5lRW50cnkjYmluZEdyb3VwcyB8IGJpbmQgZ3JvdXBzfSB7QGxpbmsgY29yZS9iaW5kaW5ncy9CaW5kaW5nLkJpbmRpbmcgfCBCaW5kaW5nfSB0byBwYXRjaCB0aGUgZ2l2ZW4gY29tcHV0ZSBzaGFkZXIgYmVmb3JlIGNyZWF0aW5nIHRoZSB7QGxpbmsgR1BVU2hhZGVyTW9kdWxlfS48YnI+XG4gKiBJdCB3aWxsIHByZXBlbmQgZXZlcnkge0BsaW5rIGNvcmUvYmluZGluZ3MvQmluZGluZy5CaW5kaW5nIHwgQmluZGluZ30gV0dTTCBjb2RlIHNuaXBwZXRzIChvciBmcmFnbWVudHMpIHdpdGggdGhlIGNvcnJlY3QgYmluZCBncm91cCBhbmQgYmluZGluZ3MgaW5kaWNlcy5cbiAqXG4gKiAjIyBQaXBlbGluZSBjb21waWxhdGlvblxuICpcbiAqIFRoZSB7QGxpbmsgQ29tcHV0ZVBpcGVsaW5lRW50cnl9IHdpbGwgdGhlbiBjcmVhdGUgYSB7QGxpbmsgR1BVQ29tcHV0ZVBpcGVsaW5lfSAoYXN5bmNocm9ub3VzbHkgYnkgZGVmYXVsdCkuXG4gKi9cbmV4cG9ydCBjbGFzcyBDb21wdXRlUGlwZWxpbmVFbnRyeSBleHRlbmRzIFBpcGVsaW5lRW50cnkge1xuICAvKiogU2hhZGVycyB0byB1c2Ugd2l0aCB0aGlzIHtAbGluayBDb21wdXRlUGlwZWxpbmVFbnRyeX0gKi9cbiAgc2hhZGVyczogUGlwZWxpbmVFbnRyeVNoYWRlcnNcbiAgLyoqIHtAbGluayBHUFVDb21wdXRlUGlwZWxpbmVEZXNjcmlwdG9yIHwgQ29tcHV0ZSBwaXBlbGluZSBkZXNjcmlwdG9yfSBiYXNlZCBvbiB7QGxpbmsgbGF5b3V0fSBhbmQge0BsaW5rIHNoYWRlcnN9ICovXG4gIGRlc2NyaXB0b3I6IEdQVUNvbXB1dGVQaXBlbGluZURlc2NyaXB0b3IgfCBudWxsXG5cbiAgLyoqXG4gICAqIENvbXB1dGVQaXBlbGluZUVudHJ5IGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIFBpcGVsaW5lRW50cnlQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBDb21wdXRlUGlwZWxpbmVFbnRyeX1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHBhcmFtZXRlcnM6IFBpcGVsaW5lRW50cnlQYXJhbXMpIHtcbiAgICBsZXQgeyByZW5kZXJlciB9ID0gcGFyYW1ldGVyc1xuICAgIGNvbnN0IHsgbGFiZWwgfSA9IHBhcmFtZXRlcnNcblxuICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XG4gICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIFJlbmRlcmVyKVxuXG4gICAgY29uc3QgdHlwZSA9ICdDb21wdXRlUGlwZWxpbmVFbnRyeSdcblxuICAgIGlzUmVuZGVyZXIocmVuZGVyZXIsIGxhYmVsID8gbGFiZWwgKyAnICcgKyB0eXBlIDogdHlwZSlcblxuICAgIHN1cGVyKHBhcmFtZXRlcnMpXG5cbiAgICB0aGlzLnR5cGUgPSB0eXBlXG5cbiAgICB0aGlzLnNoYWRlcnMgPSB7XG4gICAgICBjb21wdXRlOiB7XG4gICAgICAgIGhlYWQ6ICcnLFxuICAgICAgICBjb2RlOiAnJyxcbiAgICAgICAgbW9kdWxlOiBudWxsLFxuICAgICAgfSxcbiAgICB9XG5cbiAgICB0aGlzLmRlc2NyaXB0b3IgPSBudWxsXG4gIH1cblxuICAvKipcbiAgICogU2V0IHtAbGluayBDb21wdXRlUGlwZWxpbmVFbnRyeX0gcHJvcGVydGllcyAoaW4gdGhpcyBjYXNlIHRoZSB7QGxpbmsgYmluZEdyb3VwcyB8IGJpbmQgZ3JvdXBzfSlcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB0aGUge0BsaW5rIGNvcmUvbWF0ZXJpYWxzL0NvbXB1dGVNYXRlcmlhbC5Db21wdXRlTWF0ZXJpYWwjYmluZEdyb3VwcyB8IGJpbmQgZ3JvdXBzfSB0byB1c2VcbiAgICovXG4gIHNldFBpcGVsaW5lRW50cnlQcm9wZXJ0aWVzKHBhcmFtZXRlcnM6IFBpcGVsaW5lRW50cnlQcm9wZXJ0aWVzUGFyYW1zKSB7XG4gICAgY29uc3QgeyBiaW5kR3JvdXBzIH0gPSBwYXJhbWV0ZXJzXG5cbiAgICB0aGlzLnNldFBpcGVsaW5lRW50cnlCaW5kR3JvdXBzKGJpbmRHcm91cHMpXG4gIH1cblxuICAvKiBTSEFERVJTICovXG5cbiAgLyoqXG4gICAqIFBhdGNoIHRoZSBzaGFkZXJzIGJ5IGFwcGVuZGluZyBhbGwgdGhlIHtAbGluayBiaW5kR3JvdXBzIHwgYmluZCBncm91cHN9KSBXR1NMIGNvZGUgZnJhZ21lbnRzIHRvIHRoZSBnaXZlbiB7QGxpbmsgUGlwZWxpbmVFbnRyeVBhcmFtcyNzaGFkZXJzIHwgcGFyYW1ldGVyIHNoYWRlciBjb2RlfVxuICAgKi9cbiAgcGF0Y2hTaGFkZXJzKCkge1xuICAgIHRoaXMuc2hhZGVycy5jb21wdXRlLmhlYWQgPSAnJ1xuICAgIHRoaXMuc2hhZGVycy5jb21wdXRlLmNvZGUgPSAnJ1xuXG4gICAgY29uc3QgZ3JvdXBzQmluZGluZ3MgPSBbXVxuICAgIHRoaXMuYmluZEdyb3Vwcy5mb3JFYWNoKChiaW5kR3JvdXApID0+IHtcbiAgICAgIGxldCBiaW5kSW5kZXggPSAwXG4gICAgICBiaW5kR3JvdXAuYmluZGluZ3MuZm9yRWFjaCgoYmluZGluZywgYmluZGluZ0luZGV4KSA9PiB7XG4gICAgICAgIGJpbmRpbmcud2dzbEdyb3VwRnJhZ21lbnQuZm9yRWFjaCgoZ3JvdXBGcmFnbWVudCwgZ3JvdXBGcmFnbWVudEluZGV4KSA9PiB7XG4gICAgICAgICAgZ3JvdXBzQmluZGluZ3MucHVzaCh7XG4gICAgICAgICAgICBncm91cEluZGV4OiBiaW5kR3JvdXAuaW5kZXgsXG4gICAgICAgICAgICB2aXNpYmlsaXR5OiBiaW5kaW5nLnZpc2liaWxpdHksXG4gICAgICAgICAgICBiaW5kSW5kZXgsXG4gICAgICAgICAgICB3Z3NsU3RydWN0RnJhZ21lbnQ6IChiaW5kaW5nIGFzIEJpbmRHcm91cEJ1ZmZlckJpbmRpbmdFbGVtZW50KS53Z3NsU3RydWN0RnJhZ21lbnQsXG4gICAgICAgICAgICB3Z3NsR3JvdXBGcmFnbWVudDogZ3JvdXBGcmFnbWVudCxcbiAgICAgICAgICAgIG5ld0xpbmU6XG4gICAgICAgICAgICAgIGJpbmRpbmdJbmRleCA9PT0gYmluZEdyb3VwLmJpbmRpbmdzLmxlbmd0aCAtIDEgJiZcbiAgICAgICAgICAgICAgZ3JvdXBGcmFnbWVudEluZGV4ID09PSBiaW5kaW5nLndnc2xHcm91cEZyYWdtZW50Lmxlbmd0aCAtIDEsXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGJpbmRJbmRleCsrXG4gICAgICAgIH0pXG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBncm91cHNCaW5kaW5ncy5mb3JFYWNoKChncm91cEJpbmRpbmcpID0+IHtcbiAgICAgIC8vIGRvIG5vdCBkdXBsaWNhdGUgc3RydWN0c1xuICAgICAgaWYgKFxuICAgICAgICBncm91cEJpbmRpbmcud2dzbFN0cnVjdEZyYWdtZW50ICYmXG4gICAgICAgIHRoaXMuc2hhZGVycy5jb21wdXRlLmhlYWQuaW5kZXhPZihncm91cEJpbmRpbmcud2dzbFN0cnVjdEZyYWdtZW50KSA9PT0gLTFcbiAgICAgICkge1xuICAgICAgICB0aGlzLnNoYWRlcnMuY29tcHV0ZS5oZWFkID0gYFxcbiR7Z3JvdXBCaW5kaW5nLndnc2xTdHJ1Y3RGcmFnbWVudH1cXG4ke3RoaXMuc2hhZGVycy5jb21wdXRlLmhlYWR9YFxuICAgICAgfVxuXG4gICAgICAvLyBkbyBub3QgZHVwbGljYXRlIHN0cnVjdCB2YXIgYXMgd2VsbFxuICAgICAgaWYgKHRoaXMuc2hhZGVycy5jb21wdXRlLmhlYWQuaW5kZXhPZihncm91cEJpbmRpbmcud2dzbEdyb3VwRnJhZ21lbnQpID09PSAtMSkge1xuICAgICAgICB0aGlzLnNoYWRlcnMuY29tcHV0ZS5oZWFkID0gYCR7dGhpcy5zaGFkZXJzLmNvbXB1dGUuaGVhZH1cXG5AZ3JvdXAoJHtncm91cEJpbmRpbmcuZ3JvdXBJbmRleH0pIEBiaW5kaW5nKCR7Z3JvdXBCaW5kaW5nLmJpbmRJbmRleH0pICR7Z3JvdXBCaW5kaW5nLndnc2xHcm91cEZyYWdtZW50fWBcbiAgICAgIH1cblxuICAgICAgaWYgKGdyb3VwQmluZGluZy5uZXdMaW5lKSB0aGlzLnNoYWRlcnMuY29tcHV0ZS5oZWFkICs9IGBcXG5gXG4gICAgfSlcblxuICAgIHRoaXMuc2hhZGVycy5jb21wdXRlLmNvZGUgPSB0aGlzLnNoYWRlcnMuY29tcHV0ZS5oZWFkICsgdGhpcy5vcHRpb25zLnNoYWRlcnMuY29tcHV0ZS5jb2RlXG4gIH1cblxuICAvKiBTRVRVUCAqL1xuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHtAbGluayBzaGFkZXJzfTogcGF0Y2ggdGhlbSBhbmQgY3JlYXRlIHRoZSB7QGxpbmsgR1BVU2hhZGVyTW9kdWxlfVxuICAgKi9cbiAgY3JlYXRlU2hhZGVycygpIHtcbiAgICB0aGlzLnBhdGNoU2hhZGVycygpXG5cbiAgICB0aGlzLnNoYWRlcnMuY29tcHV0ZS5tb2R1bGUgPSB0aGlzLmNyZWF0ZVNoYWRlck1vZHVsZSh7XG4gICAgICBjb2RlOiB0aGlzLnNoYWRlcnMuY29tcHV0ZS5jb2RlLFxuICAgICAgdHlwZTogJ2NvbXB1dGUnLFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBjb21wdXRlIHBpcGVsaW5lIHtAbGluayBkZXNjcmlwdG9yfVxuICAgKi9cbiAgY3JlYXRlUGlwZWxpbmVEZXNjcmlwdG9yKCkge1xuICAgIGlmICghdGhpcy5zaGFkZXJzLmNvbXB1dGUubW9kdWxlKSByZXR1cm5cblxuICAgIHRoaXMuZGVzY3JpcHRvciA9IHtcbiAgICAgIGxhYmVsOiB0aGlzLm9wdGlvbnMubGFiZWwsXG4gICAgICBsYXlvdXQ6IHRoaXMubGF5b3V0LFxuICAgICAgY29tcHV0ZToge1xuICAgICAgICBtb2R1bGU6IHRoaXMuc2hhZGVycy5jb21wdXRlLm1vZHVsZSxcbiAgICAgICAgZW50cnlQb2ludDogdGhpcy5vcHRpb25zLnNoYWRlcnMuY29tcHV0ZS5lbnRyeVBvaW50LFxuICAgICAgfSxcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIHRoZSBjb21wdXRlIHtAbGluayBwaXBlbGluZX1cbiAgICovXG4gIGNyZWF0ZUNvbXB1dGVQaXBlbGluZSgpIHtcbiAgICBpZiAoIXRoaXMuc2hhZGVycy5jb21wdXRlLm1vZHVsZSkgcmV0dXJuXG5cbiAgICB0cnkge1xuICAgICAgdGhpcy5waXBlbGluZSA9IHRoaXMucmVuZGVyZXIuY3JlYXRlQ29tcHV0ZVBpcGVsaW5lKHRoaXMuZGVzY3JpcHRvcilcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgdGhpcy5zdGF0dXMuZXJyb3IgPSBlcnJvclxuICAgICAgdGhyb3dFcnJvcihlcnJvcilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQXN5bmNocm9ub3VzbHkgY3JlYXRlIHRoZSBjb21wdXRlIHtAbGluayBwaXBlbGluZX1cbiAgICogQGFzeW5jXG4gICAqIEByZXR1cm5zIC0gdm9pZCBwcm9taXNlIHJlc3VsdFxuICAgKi9cbiAgYXN5bmMgY3JlYXRlQ29tcHV0ZVBpcGVsaW5lQXN5bmMoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgaWYgKCF0aGlzLnNoYWRlcnMuY29tcHV0ZS5tb2R1bGUpIHJldHVyblxuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMucGlwZWxpbmUgPSBhd2FpdCB0aGlzLnJlbmRlcmVyLmNyZWF0ZUNvbXB1dGVQaXBlbGluZUFzeW5jKHRoaXMuZGVzY3JpcHRvcilcbiAgICAgIHRoaXMuc3RhdHVzLmNvbXBpbGVkID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0dXMuY29tcGlsaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdHVzLmVycm9yID0gbnVsbFxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLnN0YXR1cy5lcnJvciA9IGVycm9yXG4gICAgICB0aHJvd0Vycm9yKGVycm9yKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsIHtAbGluayBQaXBlbGluZUVudHJ5I2NvbXBpbGVQaXBlbGluZUVudHJ5IHwgUGlwZWxpbmVFbnRyeSBjb21waWxlUGlwZWxpbmVFbnRyeX0gbWV0aG9kLCB0aGVuIGNyZWF0ZSBvdXIgY29tcHV0ZSB7QGxpbmsgcGlwZWxpbmV9XG4gICAqIEBhc3luY1xuICAgKi9cbiAgYXN5bmMgY29tcGlsZVBpcGVsaW5lRW50cnkoKTogUHJvbWlzZTx2b2lkPiB7XG4gICAgc3VwZXIuY29tcGlsZVBpcGVsaW5lRW50cnkoKVxuXG4gICAgaWYgKHRoaXMub3B0aW9ucy51c2VBc3luYykge1xuICAgICAgYXdhaXQgdGhpcy5jcmVhdGVDb21wdXRlUGlwZWxpbmVBc3luYygpXG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuY3JlYXRlQ29tcHV0ZVBpcGVsaW5lKClcbiAgICAgIHRoaXMuc3RhdHVzLmNvbXBpbGVkID0gdHJ1ZVxuICAgICAgdGhpcy5zdGF0dXMuY29tcGlsaW5nID0gZmFsc2VcbiAgICAgIHRoaXMuc3RhdHVzLmVycm9yID0gbnVsbFxuICAgIH1cbiAgfVxufVxuIiwiaW1wb3J0IHsgUmVuZGVyUGlwZWxpbmVFbnRyeSB9IGZyb20gJy4vUmVuZGVyUGlwZWxpbmVFbnRyeSdcbmltcG9ydCB7IENvbXB1dGVQaXBlbGluZUVudHJ5IH0gZnJvbSAnLi9Db21wdXRlUGlwZWxpbmVFbnRyeSdcbmltcG9ydCB7XG4gIFBpcGVsaW5lRW50cnlQYXJhbXMsXG4gIFJlbmRlclBpcGVsaW5lRW50cnlCYXNlUGFyYW1zLFxuICBSZW5kZXJQaXBlbGluZUVudHJ5UGFyYW1zXG59IGZyb20gJy4uLy4uL3R5cGVzL1BpcGVsaW5lRW50cmllcydcblxuLyoqIERlZmluZXMgYWxsIHR5cGVzIG9mIGFsbG93ZWQge0BsaW5rIGNvcmUvcGlwZWxpbmVzL1BpcGVsaW5lRW50cnkuUGlwZWxpbmVFbnRyeSB8IFBpcGVsaW5lRW50cnl9IGNsYXNzIG9iamVjdHMgKi9cbmV4cG9ydCB0eXBlIEFsbG93ZWRQaXBlbGluZUVudHJpZXMgPSBSZW5kZXJQaXBlbGluZUVudHJ5IHwgQ29tcHV0ZVBpcGVsaW5lRW50cnlcblxuLyoqXG4gKiBVc2VkIHRvIGNyZWF0ZSBhbmQga2VlcCB0cmFjayBvZiBib3RoIHtAbGluayBDb21wdXRlUGlwZWxpbmVFbnRyeX0gYW5kIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5fS48YnI+XG4gKiBQZXJmb3JtIGNoZWNrcyB0byBldmVudHVhbGx5IHVzZSBhIGNhY2hlZCBwaXBlbGluZSBlbnRyeSBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG9uZS48YnI+XG4gKiBUaGUgZW5kIGdvYWwgaXMgdG8gY2FjaGUgcGlwZWxpbmVzIGFuZCByZXVzZSB0aGVtIChhcyB3ZWxsIGFzIGJpbmQgZ3JvdXBzKS48YnI+XG4gKiBBbHNvIHJlc3BvbnNpYmxlIGZvciBzZXR0aW5nIHRoZSBjdXJyZW50IHBhc3MgZW5jb2RlciBwaXBlbGluZSBpbiBvcmRlciB0byBhdm9pZCByZWR1bmRhbnQgc2V0UGlwZWxpbmUgY2FsbHMuPGJyPlxuICogQ3JlYXRlZCBpbnRlcm5hbGx5IGJ5IHRoZSB7QGxpbmsgY29yZS9yZW5kZXJlcnMvR1BVRGV2aWNlTWFuYWdlci5HUFVEZXZpY2VNYW5hZ2VyIHwgR1BVRGV2aWNlTWFuYWdlcn0uPGJyPlxuICogQHNlZSB7QGxpbmsgaHR0cHM6Ly90b2ppLmRldi93ZWJncHUtYmVzdC1wcmFjdGljZXMvYmluZC1ncm91cHMjZ3JvdXBpbmctcmVzb3VyY2VzLWJhc2VkLW9uLWZyZXF1ZW5jeS1vZi1jaGFuZ2UgfCBXZWJHUFUgQmluZCBHcm91cCBiZXN0IHByYWN0aWNlc31cbiAqL1xuZXhwb3J0IGNsYXNzIFBpcGVsaW5lTWFuYWdlciB7XG4gIC8qKiBUaGUgdHlwZSBvZiB0aGUge0BsaW5rIFBpcGVsaW5lTWFuYWdlcn0gKi9cbiAgdHlwZTogc3RyaW5nXG4gIC8qKiBLZWVwIHRyYWNrIG9mIHRoZSBjdXJyZW50IGJvdW5kIHBpcGVsaW5lIGluIG9yZGVyIHRvIGF2b2lkIHJlZHVuZGFudCBzZXRQaXBlbGluZSBjYWxscyAqL1xuICBjdXJyZW50UGlwZWxpbmVJbmRleDogbnVtYmVyIHwgbnVsbFxuICAvKiogQXJyYXkgb2YgYWxyZWFkeSBjcmVhdGVkIHtAbGluayBDb21wdXRlUGlwZWxpbmVFbnRyeX0gYW5kIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5fSAqL1xuICBwaXBlbGluZUVudHJpZXM6IEFsbG93ZWRQaXBlbGluZUVudHJpZXNbXVxuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHRoaXMudHlwZSA9ICdQaXBlbGluZU1hbmFnZXInXG5cbiAgICB0aGlzLmN1cnJlbnRQaXBlbGluZUluZGV4ID0gbnVsbFxuICAgIHRoaXMucGlwZWxpbmVFbnRyaWVzID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHByb3ZpZGVkIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5QmFzZVBhcmFtcyB8IFJlbmRlclBpcGVsaW5lRW50cnkgcGFyYW1ldGVyc30gYmVsb25ncyB0byBhbiBhbHJlYWR5IGNyZWF0ZWQge0BsaW5rIFJlbmRlclBpcGVsaW5lRW50cnl9LlxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5QmFzZVBhcmFtcyB8IFJlbmRlclBpcGVsaW5lRW50cnkgcGFyYW1ldGVyc31cbiAgICogQHJldHVybnMgLSB0aGUgZm91bmQge0BsaW5rIFJlbmRlclBpcGVsaW5lRW50cnl9LCBvciBudWxsIGlmIG5vdCBmb3VuZFxuICAgKi9cbiAgaXNTYW1lUmVuZGVyUGlwZWxpbmUocGFyYW1ldGVyczogUmVuZGVyUGlwZWxpbmVFbnRyeUJhc2VQYXJhbXMpOiBSZW5kZXJQaXBlbGluZUVudHJ5IHwgbnVsbCB7XG4gICAgY29uc3Qge1xuICAgICAgc2hhZGVycyxcbiAgICAgIGN1bGxNb2RlLFxuICAgICAgZGVwdGgsXG4gICAgICBkZXB0aFdyaXRlRW5hYmxlZCxcbiAgICAgIGRlcHRoQ29tcGFyZSxcbiAgICAgIHRyYW5zcGFyZW50LFxuICAgICAgdmVydGljZXNPcmRlcixcbiAgICAgIHRvcG9sb2d5LFxuICAgICAgc2FtcGxlQ291bnQsXG4gICAgfSA9IHBhcmFtZXRlcnNcblxuICAgIHJldHVybiB0aGlzLnBpcGVsaW5lRW50cmllc1xuICAgICAgLmZpbHRlcigocGlwZWxpbmVFbnRyeSkgPT4gcGlwZWxpbmVFbnRyeSBpbnN0YW5jZW9mIFJlbmRlclBpcGVsaW5lRW50cnkpXG4gICAgICAuZmluZCgocGlwZWxpbmVFbnRyeTogUmVuZGVyUGlwZWxpbmVFbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHBpcGVsaW5lRW50cnlcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHNoYWRlcnMudmVydGV4LmNvZGUubG9jYWxlQ29tcGFyZShvcHRpb25zLnNoYWRlcnMudmVydGV4LmNvZGUpID09PSAwICYmXG4gICAgICAgICAgc2hhZGVycy52ZXJ0ZXguZW50cnlQb2ludCA9PT0gb3B0aW9ucy5zaGFkZXJzLnZlcnRleC5lbnRyeVBvaW50ICYmXG4gICAgICAgICAgc2hhZGVycy5mcmFnbWVudC5jb2RlLmxvY2FsZUNvbXBhcmUob3B0aW9ucy5zaGFkZXJzLmZyYWdtZW50LmNvZGUpID09PSAwICYmXG4gICAgICAgICAgc2hhZGVycy5mcmFnbWVudC5lbnRyeVBvaW50ID09PSBvcHRpb25zLnNoYWRlcnMuZnJhZ21lbnQuZW50cnlQb2ludCAmJlxuICAgICAgICAgIGN1bGxNb2RlID09PSBvcHRpb25zLmN1bGxNb2RlICYmXG4gICAgICAgICAgZGVwdGggPT09IG9wdGlvbnMuZGVwdGggJiZcbiAgICAgICAgICBkZXB0aFdyaXRlRW5hYmxlZCA9PT0gb3B0aW9ucy5kZXB0aFdyaXRlRW5hYmxlZCAmJlxuICAgICAgICAgIGRlcHRoQ29tcGFyZSA9PT0gb3B0aW9ucy5kZXB0aENvbXBhcmUgJiZcbiAgICAgICAgICB0cmFuc3BhcmVudCA9PT0gb3B0aW9ucy50cmFuc3BhcmVudCAmJlxuICAgICAgICAgIHNhbXBsZUNvdW50ID09PSBvcHRpb25zLnNhbXBsZUNvdW50ICYmXG4gICAgICAgICAgdmVydGljZXNPcmRlciA9PT0gb3B0aW9ucy52ZXJ0aWNlc09yZGVyICYmXG4gICAgICAgICAgdG9wb2xvZ3kgPT09IG9wdGlvbnMudG9wb2xvZ3lcbiAgICAgICAgKVxuICAgICAgfSkgYXMgUmVuZGVyUGlwZWxpbmVFbnRyeSB8IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHtAbGluayBSZW5kZXJQaXBlbGluZUVudHJ5fSBoYXMgYWxyZWFkeSBiZWVuIGNyZWF0ZWQgd2l0aCB0aGUgZ2l2ZW4ge0BsaW5rIFJlbmRlclBpcGVsaW5lRW50cnlQYXJhbXMgfCBwYXJhbWV0ZXJzfS5cbiAgICogVXNlIGl0IGlmIGZvdW5kLCBlbHNlIGNyZWF0ZSBhIG5ldyBvbmUgYW5kIGFkZCBpdCB0byB0aGUge0BsaW5rIHBpcGVsaW5lRW50cmllc30gYXJyYXkuXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIFJlbmRlclBpcGVsaW5lRW50cnlQYXJhbXMgfCBSZW5kZXJQaXBlbGluZUVudHJ5IHBhcmFtZXRlcnN9XG4gICAqIEByZXR1cm5zIC0ge0BsaW5rIFJlbmRlclBpcGVsaW5lRW50cnl9LCBlaXRoZXIgZnJvbSBjYWNoZSBvciBuZXdseSBjcmVhdGVkXG4gICAqL1xuICBjcmVhdGVSZW5kZXJQaXBlbGluZShwYXJhbWV0ZXJzOiBSZW5kZXJQaXBlbGluZUVudHJ5UGFyYW1zKTogUmVuZGVyUGlwZWxpbmVFbnRyeSB7XG4gICAgY29uc3QgZXhpc3RpbmdQaXBlbGluZUVudHJ5ID0gdGhpcy5pc1NhbWVSZW5kZXJQaXBlbGluZShwYXJhbWV0ZXJzKVxuXG4gICAgaWYgKGV4aXN0aW5nUGlwZWxpbmVFbnRyeSkge1xuICAgICAgcmV0dXJuIGV4aXN0aW5nUGlwZWxpbmVFbnRyeVxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBwaXBlbGluZUVudHJ5ID0gbmV3IFJlbmRlclBpcGVsaW5lRW50cnkocGFyYW1ldGVycylcblxuICAgICAgdGhpcy5waXBlbGluZUVudHJpZXMucHVzaChwaXBlbGluZUVudHJ5KVxuXG4gICAgICByZXR1cm4gcGlwZWxpbmVFbnRyeVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVja3MgaWYgdGhlIHByb3ZpZGVkIHtAbGluayBQaXBlbGluZUVudHJ5UGFyYW1zIHwgcGFyYW1ldGVyc30gYmVsb25ncyB0byBhbiBhbHJlYWR5IGNyZWF0ZWQge0BsaW5rIENvbXB1dGVQaXBlbGluZUVudHJ5fS5cbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgUGlwZWxpbmVFbnRyeVBhcmFtcyB8IFBpcGVsaW5lRW50cnkgcGFyYW1ldGVyc31cbiAgICogQHJldHVybnMgLSB0aGUgZm91bmQge0BsaW5rIENvbXB1dGVQaXBlbGluZUVudHJ5fSwgb3IgbnVsbCBpZiBub3QgZm91bmRcbiAgICovXG4gIGlzU2FtZUNvbXB1dGVQaXBlbGluZShwYXJhbWV0ZXJzOiBQaXBlbGluZUVudHJ5UGFyYW1zKSB7XG4gICAgY29uc3QgeyBzaGFkZXJzIH0gPSBwYXJhbWV0ZXJzXG5cbiAgICByZXR1cm4gdGhpcy5waXBlbGluZUVudHJpZXNcbiAgICAgIC5maWx0ZXIoKHBpcGVsaW5lRW50cnkpID0+IHBpcGVsaW5lRW50cnkgaW5zdGFuY2VvZiBDb21wdXRlUGlwZWxpbmVFbnRyeSlcbiAgICAgIC5maW5kKChwaXBlbGluZUVudHJ5OiBDb21wdXRlUGlwZWxpbmVFbnRyeSkgPT4ge1xuICAgICAgICBjb25zdCB7IG9wdGlvbnMgfSA9IHBpcGVsaW5lRW50cnlcblxuICAgICAgICByZXR1cm4gKFxuICAgICAgICAgIHNoYWRlcnMuY29tcHV0ZS5jb2RlLmxvY2FsZUNvbXBhcmUob3B0aW9ucy5zaGFkZXJzLmNvbXB1dGUuY29kZSkgPT09IDAgJiZcbiAgICAgICAgICBzaGFkZXJzLmNvbXB1dGUuZW50cnlQb2ludCA9PT0gb3B0aW9ucy5zaGFkZXJzLmNvbXB1dGUuZW50cnlQb2ludFxuICAgICAgICApXG4gICAgICB9KSBhcyBDb21wdXRlUGlwZWxpbmVFbnRyeSB8IG51bGxcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHtAbGluayBDb21wdXRlUGlwZWxpbmVFbnRyeX0gaGFzIGFscmVhZHkgYmVlbiBjcmVhdGVkIHdpdGggdGhlIGdpdmVuIHtAbGluayBQaXBlbGluZUVudHJ5UGFyYW1zIHwgcGFyYW1ldGVyc30uXG4gICAqIFVzZSBpdCBpZiBmb3VuZCwgZWxzZSBjcmVhdGUgYSBuZXcgb25lIGFuZCBhZGQgaXQgdG8gdGhlIHtAbGluayBwaXBlbGluZUVudHJpZXN9IGFycmF5LlxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBQaXBlbGluZUVudHJ5UGFyYW1zIHwgUGlwZWxpbmVFbnRyeSBwYXJhbWV0ZXJzfVxuICAgKiBAcmV0dXJucyAtIG5ld2x5IGNyZWF0ZWQge0BsaW5rIENvbXB1dGVQaXBlbGluZUVudHJ5fVxuICAgKi9cbiAgY3JlYXRlQ29tcHV0ZVBpcGVsaW5lKHBhcmFtZXRlcnM6IFBpcGVsaW5lRW50cnlQYXJhbXMpOiBDb21wdXRlUGlwZWxpbmVFbnRyeSB7XG4gICAgY29uc3QgZXhpc3RpbmdQaXBlbGluZUVudHJ5ID0gdGhpcy5pc1NhbWVDb21wdXRlUGlwZWxpbmUocGFyYW1ldGVycylcblxuICAgIGlmIChleGlzdGluZ1BpcGVsaW5lRW50cnkpIHtcbiAgICAgIHJldHVybiBleGlzdGluZ1BpcGVsaW5lRW50cnlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgcGlwZWxpbmVFbnRyeSA9IG5ldyBDb21wdXRlUGlwZWxpbmVFbnRyeShwYXJhbWV0ZXJzKVxuXG4gICAgICB0aGlzLnBpcGVsaW5lRW50cmllcy5wdXNoKHBpcGVsaW5lRW50cnkpXG5cbiAgICAgIHJldHVybiBwaXBlbGluZUVudHJ5XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHRoZSBnaXZlbiB7QGxpbmsgQWxsb3dlZFBpcGVsaW5lRW50cmllcyB8IFBpcGVsaW5lRW50cnl9IGlzIGFscmVhZHkgc2V0LCBpZiBub3Qgc2V0IGl0XG4gICAqIEBwYXJhbSBwYXNzIC0gY3VycmVudCBwYXNzIGVuY29kZXJcbiAgICogQHBhcmFtIHBpcGVsaW5lRW50cnkgLSB0aGUge0BsaW5rIEFsbG93ZWRQaXBlbGluZUVudHJpZXMgfCBQaXBlbGluZUVudHJ5fSB0byBzZXRcbiAgICovXG4gIHNldEN1cnJlbnRQaXBlbGluZShwYXNzOiBHUFVSZW5kZXJQYXNzRW5jb2RlciB8IEdQVUNvbXB1dGVQYXNzRW5jb2RlciwgcGlwZWxpbmVFbnRyeTogQWxsb3dlZFBpcGVsaW5lRW50cmllcykge1xuICAgIGlmIChwaXBlbGluZUVudHJ5LmluZGV4ICE9PSB0aGlzLmN1cnJlbnRQaXBlbGluZUluZGV4KSB7XG4gICAgICBwYXNzLnNldFBpcGVsaW5lKHBpcGVsaW5lRW50cnkucGlwZWxpbmUgYXMgR1BVUmVuZGVyUGlwZWxpbmUgJiBHUFVDb21wdXRlUGlwZWxpbmUpXG4gICAgICB0aGlzLmN1cnJlbnRQaXBlbGluZUluZGV4ID0gcGlwZWxpbmVFbnRyeS5pbmRleFxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCB0aGUge0BsaW5rIFBpcGVsaW5lTWFuYWdlciNjdXJyZW50UGlwZWxpbmVJbmRleCB8IGN1cnJlbnQgcGlwZWxpbmUgaW5kZXh9IHNvIHRoZSBuZXh0IHtAbGluayBBbGxvd2VkUGlwZWxpbmVFbnRyaWVzIHwgUGlwZWxpbmVFbnRyeX0gd2lsbCBiZSBzZXQgZm9yIHN1cmVcbiAgICovXG4gIHJlc2V0Q3VycmVudFBpcGVsaW5lKCkge1xuICAgIHRoaXMuY3VycmVudFBpcGVsaW5lSW5kZXggPSBudWxsXG4gIH1cbn1cbiIsImltcG9ydCB7IERPTUVsZW1lbnQgfSBmcm9tICcuLi9jb3JlL0RPTS9ET01FbGVtZW50J1xuXG4vKipcbiAqIERlZmluZXMgYSB7QGxpbmsgUmVzaXplTWFuYWdlcn0gZW50cnlcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZXNpemVNYW5hZ2VyRW50cnkge1xuICAvKioge0BsaW5rIEhUTUxFbGVtZW50fSB0byB0cmFjayAqL1xuICBlbGVtZW50OiBET01FbGVtZW50WydlbGVtZW50J10gfCBFbGVtZW50XG4gIC8qKiBQcmlvcml0eSBpbiB3aGljaCB0byBjYWxsIHRoZSBjYWxsYmFjayBmdW5jdGlvbiAqL1xuICBwcmlvcml0eT86IG51bWJlclxuICAvKiogRnVuY3Rpb24gdG8gZXhlY3V0ZSB3aGVuIHRoZSB7QGxpbmsgZWxlbWVudH0gaXMgcmVzaXplZCAqL1xuICBjYWxsYmFjazogKCkgPT4gdm9pZCB8IG51bGxcbn1cblxuLyoqXG4gKiBUaW55IHdyYXBwZXIgYXJvdW5kIHtAbGluayBSZXNpemVPYnNlcnZlcn0gdXNlZCB0byBleGVjdXRlIGNhbGxiYWNrcyB3aGVuIGdpdmVuIHtAbGluayBIVE1MRWxlbWVudH0gc2l6ZSBjaGFuZ2VzLlxuICovXG5leHBvcnQgY2xhc3MgUmVzaXplTWFuYWdlciB7XG4gIC8qKiBXaGV0aGVyIHdlIHNob3VsZCBhZGQgZWxlbWVudHMgdG8gb3VyIHtAbGluayByZXNpemVPYnNlcnZlcn0gb3Igbm90ICovXG4gIHNob3VsZFdhdGNoOiBib29sZWFuXG4gIC8qKiBBcnJheSBvZiB7QGxpbmsgUmVzaXplTWFuYWdlckVudHJ5IHwgZW50cmllc30gKi9cbiAgZW50cmllczogUmVzaXplTWFuYWdlckVudHJ5W11cbiAgLyoqIHtAbGluayBSZXNpemVPYnNlcnZlcn0gdXNlZCAqL1xuICByZXNpemVPYnNlcnZlcjogUmVzaXplT2JzZXJ2ZXJcblxuICAvKipcbiAgICogUmVzaXplTWFuYWdlciBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoKSB7XG4gICAgLy8gZGVmYXVsdCB0byB0cnVlXG4gICAgdGhpcy5zaG91bGRXYXRjaCA9IHRydWVcblxuICAgIHRoaXMuZW50cmllcyA9IFtdXG5cbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyID0gbmV3IFJlc2l6ZU9ic2VydmVyKChvYnNlcnZlZEVudHJpZXMpID0+IHtcbiAgICAgIC8vIGdldCBhbGwgZW50cmllcyBjb3JyZXNwb25kaW5nIHRvIHRoYXQgZWxlbWVudCwgYW5kIHNvcnQgdGhlbSBieSBwcmlvcml0eVxuICAgICAgY29uc3QgYWxsRW50cmllcyA9IG9ic2VydmVkRW50cmllc1xuICAgICAgICAubWFwKChvYnNlcnZlZEVudHJ5KSA9PiB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuZW50cmllcy5maWx0ZXIoKGUpID0+IGUuZWxlbWVudC5pc1NhbWVOb2RlKG9ic2VydmVkRW50cnkudGFyZ2V0KSlcbiAgICAgICAgfSlcbiAgICAgICAgLmZsYXQoKVxuICAgICAgICAuc29ydCgoYSwgYikgPT4gYi5wcmlvcml0eSAtIGEucHJpb3JpdHkpXG5cbiAgICAgIGFsbEVudHJpZXM/LmZvckVhY2goKGVudHJ5KSA9PiB7XG4gICAgICAgIGlmIChlbnRyeSAmJiBlbnRyeS5jYWxsYmFjaykge1xuICAgICAgICAgIGVudHJ5LmNhbGxiYWNrKClcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB7QGxpbmsgc2hvdWxkV2F0Y2h9XG4gICAqIEBwYXJhbSBzaG91bGRXYXRjaCAtIHdoZXRoZXIgdG8gd2F0Y2ggb3Igbm90XG4gICAqL1xuICB1c2VPYnNlcnZlcihzaG91bGRXYXRjaCA9IHRydWUpIHtcbiAgICB0aGlzLnNob3VsZFdhdGNoID0gc2hvdWxkV2F0Y2hcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFjayBhbiB7QGxpbmsgSFRNTEVsZW1lbnR9IHNpemUgY2hhbmdlIGFuZCBleGVjdXRlIGEgY2FsbGJhY2sgZnVuY3Rpb24gd2hlbiBpdCBoYXBwZW5zXG4gICAqIEBwYXJhbSBlbnRyeSAtIHtAbGluayBSZXNpemVNYW5hZ2VyRW50cnkgfCBlbnRyeX0gdG8gd2F0Y2hcbiAgICovXG4gIG9ic2VydmUoeyBlbGVtZW50LCBwcmlvcml0eSwgY2FsbGJhY2sgfTogUmVzaXplTWFuYWdlckVudHJ5KSB7XG4gICAgaWYgKCFlbGVtZW50IHx8ICF0aGlzLnNob3VsZFdhdGNoKSByZXR1cm5cblxuICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIub2JzZXJ2ZShlbGVtZW50KVxuXG4gICAgY29uc3QgZW50cnkgPSB7XG4gICAgICBlbGVtZW50LFxuICAgICAgcHJpb3JpdHksXG4gICAgICBjYWxsYmFjayxcbiAgICB9XG5cbiAgICB0aGlzLmVudHJpZXMucHVzaChlbnRyeSlcbiAgfVxuXG4gIC8qKlxuICAgKiBVbm9ic2VydmUgYW4ge0BsaW5rIEhUTUxFbGVtZW50fSBhbmQgcmVtb3ZlIGl0IGZyb20gb3VyIHtAbGluayBlbnRyaWVzfSBhcnJheVxuICAgKiBAcGFyYW0gZWxlbWVudCAtIHtAbGluayBIVE1MRWxlbWVudH0gdG8gdW5vYnNlcnZlXG4gICAqL1xuICB1bm9ic2VydmUoZWxlbWVudDogRE9NRWxlbWVudFsnZWxlbWVudCddIHwgRWxlbWVudCkge1xuICAgIHRoaXMucmVzaXplT2JzZXJ2ZXIudW5vYnNlcnZlKGVsZW1lbnQpXG4gICAgdGhpcy5lbnRyaWVzID0gdGhpcy5lbnRyaWVzLmZpbHRlcigoZSkgPT4gIWUuZWxlbWVudC5pc1NhbWVOb2RlKGVsZW1lbnQpKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgb3VyIHtAbGluayBSZXNpemVNYW5hZ2VyfVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLnJlc2l6ZU9ic2VydmVyLmRpc2Nvbm5lY3QoKVxuICB9XG59XG5cbi8qKiBAZXhwb3J0cyBAY29uc3QgcmVzaXplTWFuYWdlciAtIHtAbGluayBSZXNpemVNYW5hZ2VyfSBjbGFzcyBvYmplY3QgKi9cbmV4cG9ydCBjb25zdCByZXNpemVNYW5hZ2VyID0gbmV3IFJlc2l6ZU1hbmFnZXIoKSBhcyBSZXNpemVNYW5hZ2VyXG4iLCJpbXBvcnQgeyByZXNpemVNYW5hZ2VyLCBSZXNpemVNYW5hZ2VyLCBSZXNpemVNYW5hZ2VyRW50cnkgfSBmcm9tICcuLi8uLi91dGlscy9SZXNpemVNYW5hZ2VyJ1xuaW1wb3J0IHsgdGhyb3dFcnJvciB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJ1xuXG4vKipcbiAqIERlZmluZXMgYSByZWN0YW5ndWxhciBjb29yZGluYXRlcyBvYmplY3RcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZWN0Q29vcmRzIHtcbiAgLyoqIHRvcCBwb3NpdGlvbiAqL1xuICB0b3A6IG51bWJlclxuICAvKiogcmlnaHQgcG9zaXRpb24gKi9cbiAgcmlnaHQ6IG51bWJlclxuICAvKiogYm90dG9tIHBvc2l0aW9uICovXG4gIGJvdHRvbTogbnVtYmVyXG4gIC8qKiBsZWZ0IHBvc2l0aW9uICovXG4gIGxlZnQ6IG51bWJlclxufVxuXG4vKipcbiAqIERlZmluZXMgYSBzaXplIG9iamVjdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlY3RTaXplIHtcbiAgLyoqIHdpZHRoIG9mIHRoZSByZWN0YW5nbGUgKi9cbiAgd2lkdGg6IG51bWJlclxuICAvKiogaGVpZ2h0IG9mIHRoZSByZWN0YW5nbGUgKi9cbiAgaGVpZ2h0OiBudW1iZXJcbn1cblxuLyoqXG4gKiBEZWZpbmVzIGEgcmVjdGFuZ3VsYXIgYm91bmRpbmcgYm94IG9iamVjdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIFJlY3RCQm94IGV4dGVuZHMgUmVjdFNpemUge1xuICAvKiogdG9wIHBvc2l0aW9uIG9mIHRoZSBib3VuZGluZyBib3ggKi9cbiAgdG9wOiBudW1iZXJcbiAgLyoqIGxlZnQgcG9zaXRpb24gb2YgdGhlIGJvdW5kaW5nIGJveCAqL1xuICBsZWZ0OiBudW1iZXJcbn1cblxuLyoqXG4gKiBEZWZpbmVzIGEgRE9NIHBvc2l0aW9uIG9iamVjdFxuICovXG5leHBvcnQgaW50ZXJmYWNlIERPTVBvc2l0aW9uIHtcbiAgLyoqIFggcG9zaXRpb24gKi9cbiAgeDogbnVtYmVyXG4gIC8qKiBZIHBvc2l0aW9uICovXG4gIHk6IG51bWJlclxufVxuXG4vKipcbiAqIERlZmluZXMgYSBjb21wbGV0ZSBET00gRWxlbWVudCBib3VuZGluZyByZWN0IG9iamVjdCwgc2ltaWxhciB0byBhIHtAbGluayBET01SZWN0fVxuICovXG5leHBvcnQgaW50ZXJmYWNlIERPTUVsZW1lbnRCb3VuZGluZ1JlY3QgZXh0ZW5kcyBSZWN0Q29vcmRzLCBSZWN0QkJveCwgRE9NUG9zaXRpb24ge31cblxuLyoqXG4gKiBQYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIERPTUVsZW1lbnR9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgRE9NRWxlbWVudFBhcmFtcyB7XG4gIC8qKiB7QGxpbmsgSFRNTEVsZW1lbnR9IG9yIHN0cmluZyByZXByZXNlbnRpbmcgYW4ge0BsaW5rIEhUTUxFbGVtZW50fSBzZWxlY3RvciBvZiB0aGUgZWxlbWVudCB0aGUgcmVzaXplIG9ic2VydmVyIHNob3VsZCB0cmFjayAqL1xuICBlbGVtZW50Pzogc3RyaW5nIHwgRWxlbWVudFxuICAvKiogT3JkZXIgaW4gd2hpY2ggdGhlIHtAbGluayByZXNpemVNYW5hZ2VyfSBjYWxsYmFjayBpcyBleGVjdXRlZCAqL1xuICBwcmlvcml0eT86IFJlc2l6ZU1hbmFnZXJFbnRyeVsncHJpb3JpdHknXVxuICAvKiogQ2FsbGJhY2sgdG8gdHVuIHdoZW4gdGhlIHtAbGluayBET01FbGVtZW50I2VsZW1lbnQgfCBlbGVtZW50fSBzaXplIGNoYW5nZWQgKi9cbiAgb25TaXplQ2hhbmdlZD86IChib3VuZGluZ1JlY3Q6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3QgfCBudWxsKSA9PiB2b2lkIHwgbnVsbFxuICAvKiogQ2FsbGJhY2sgdG8gdHVuIHdoZW4gdGhlIHtAbGluayBET01FbGVtZW50I2VsZW1lbnQgfCBlbGVtZW50fSBwb3NpdGlvbiBjaGFuZ2VkICovXG4gIG9uUG9zaXRpb25DaGFuZ2VkPzogKGJvdW5kaW5nUmVjdDogRE9NRWxlbWVudEJvdW5kaW5nUmVjdCB8IG51bGwpID0+IHZvaWQgfCBudWxsXG59XG5cbi8qKlxuICogVXNlZCB0byB0cmFjayBhIERPTSBFbGVtZW50IHNpemUgYW5kIHBvc2l0aW9uIGJ5IHVzaW5nIGEgcmVzaXplIG9ic2VydmVyIHByb3ZpZGVkIGJ5IHtAbGluayBSZXNpemVNYW5hZ2VyfS48YnI+XG4gKiBFeGVjdXRlIGNhbGxiYWNrcyB3aGVuIHRoZSBib3VuZGluZyByZWN0YW5nbGUgb2YgdGhlIERPTSBFbGVtZW50IGNoYW5nZXMsIHdoaWNoIG1lYW5zIHdoZW4gaXRzIHNpemUgYW5kL29yIHBvc2l0aW9uIGNoYW5nZS5cbiAqL1xuZXhwb3J0IGNsYXNzIERPTUVsZW1lbnQge1xuICAvKiogVGhlIEhUTUwgZWxlbWVudCB0byB0cmFjayAqL1xuICBlbGVtZW50OiBIVE1MRWxlbWVudFxuICAvKiogUHJpb3JpdHkgYXQgd2hpY2ggdGhpcyBlbGVtZW50IHtAbGluayBvblNpemVDaGFuZ2VkfSBmdW5jdGlvbiBtdXN0IGJlIGNhbGxlZCAqL1xuICBwcmlvcml0eTogUmVzaXplTWFuYWdlckVudHJ5Wydwcmlvcml0eSddXG4gIC8qKiBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUgdGltZW91dCBpcyBzdGlsbCBydW5uaW5nIGFuZCB3ZSBzaG91bGQgYXZvaWQgYSBuZXcgY29tcHV0YXRpb24gKi9cbiAgaXNSZXNpemluZzogYm9vbGVhblxuICAvKiogQ2FsbGJhY2sgdG8gcnVuIHdoZW5ldmVyIHRoZSB7QGxpbmsgZWxlbWVudH0gc2l6ZSBjaGFuZ2VkICovXG4gIG9uU2l6ZUNoYW5nZWQ6IChib3VuZGluZ1JlY3Q6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3QgfCBudWxsKSA9PiB2b2lkIHwgbnVsbFxuICAvKiogQ2FsbGJhY2sgdG8gcnVuIHdoZW5ldmVyIHRoZSB7QGxpbmsgZWxlbWVudH0gcG9zaXRpb24gY2hhbmdlZCAqL1xuICBvblBvc2l0aW9uQ2hhbmdlZDogKGJvdW5kaW5nUmVjdDogRE9NRWxlbWVudEJvdW5kaW5nUmVjdCB8IG51bGwpID0+IHZvaWQgfCBudWxsXG4gIC8qKiBUaGUge0BsaW5rIFJlc2l6ZU1hbmFnZXJ9IHVzZWQsIGJhc2ljYWxseSBhIHdyYXBwZXIgYXJvdW5kIGEge0BsaW5rIFJlc2l6ZU9ic2VydmVyfSAqL1xuICByZXNpemVNYW5hZ2VyOiBSZXNpemVNYW5hZ2VyXG4gIC8qKiBDdXJyZW50ICB7QGxpbmsgZWxlbWVudH0gYm91bmRpbmcgcmVjdGFuZ2xlICovXG4gIF9ib3VuZGluZ1JlY3Q6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3RcblxuICAvKipcbiAgICogRE9NRWxlbWVudCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBET01FbGVtZW50UGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgb3VyIERPTUVsZW1lbnRcbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHtcbiAgICAgIGVsZW1lbnQgPSBkb2N1bWVudC5ib2R5LFxuICAgICAgcHJpb3JpdHkgPSAxLFxuICAgICAgb25TaXplQ2hhbmdlZCA9IChib3VuZGluZ1JlY3QgPSBudWxsKSA9PiB7XG4gICAgICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrICovXG4gICAgICB9LFxuICAgICAgb25Qb3NpdGlvbkNoYW5nZWQgPSAoYm91bmRpbmdSZWN0ID0gbnVsbCkgPT4ge1xuICAgICAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xuICAgICAgfSxcbiAgICB9ID0ge30gYXMgRE9NRWxlbWVudFBhcmFtc1xuICApIHtcbiAgICBpZiAodHlwZW9mIGVsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0aGlzLmVsZW1lbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGVsZW1lbnQpXG5cbiAgICAgIGlmICghdGhpcy5lbGVtZW50KSB7XG4gICAgICAgIGNvbnN0IG5vdEZvdW5kRWwgPSB0eXBlb2YgZWxlbWVudCA9PT0gJ3N0cmluZycgPyBgJyR7ZWxlbWVudH0nIHNlbGVjdG9yYCA6IGAke2VsZW1lbnR9IEhUTUxFbGVtZW50YFxuICAgICAgICB0aHJvd0Vycm9yKGBET01FbGVtZW50OiBjb3JyZXNwb25kaW5nICR7bm90Rm91bmRFbH0gbm90IGZvdW5kLmApXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQgYXMgSFRNTEVsZW1lbnRcbiAgICB9XG5cbiAgICB0aGlzLnByaW9yaXR5ID0gcHJpb3JpdHlcblxuICAgIHRoaXMuaXNSZXNpemluZyA9IGZhbHNlXG5cbiAgICB0aGlzLm9uU2l6ZUNoYW5nZWQgPSBvblNpemVDaGFuZ2VkXG4gICAgdGhpcy5vblBvc2l0aW9uQ2hhbmdlZCA9IG9uUG9zaXRpb25DaGFuZ2VkXG5cbiAgICB0aGlzLnJlc2l6ZU1hbmFnZXIgPSByZXNpemVNYW5hZ2VyXG5cbiAgICB0aGlzLnJlc2l6ZU1hbmFnZXIub2JzZXJ2ZSh7XG4gICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICBwcmlvcml0eTogdGhpcy5wcmlvcml0eSxcbiAgICAgIGNhbGxiYWNrOiAoKSA9PiB7XG4gICAgICAgIHRoaXMuc2V0U2l6ZSgpXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICAvLyBzZXQgc2l6ZSByaWdodCBhd2F5IG9uIGluaXRcbiAgICB0aGlzLnNldFNpemUoKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIHdoZXRoZXIgMiBib3VuZGluZyByZWN0YW5nbGVzIGFyZSBlcXVhbHNcbiAgICogQHBhcmFtIHJlY3QxIC0gZmlyc3QgYm91bmRpbmcgcmVjdGFuZ2xlXG4gICAqIEBwYXJhbSByZWN0MiAtIHNlY29uZCBib3VuZGluZyByZWN0YW5nbGVcbiAgICogQHJldHVybnMgLSB3aGV0aGVyIHRoZSByZWN0YW5nbGVzIGFyZSBlcXVhbHMgb3Igbm90XG4gICAqL1xuICBjb21wYXJlQm91bmRpbmdSZWN0KHJlY3QxOiBET01SZWN0IHwgRE9NRWxlbWVudEJvdW5kaW5nUmVjdCwgcmVjdDI6IERPTVJlY3QgfCBET01FbGVtZW50Qm91bmRpbmdSZWN0KTogYm9vbGVhbiB7XG4gICAgcmV0dXJuICFbJ3gnLCAneScsICdsZWZ0JywgJ3RvcCcsICdyaWdodCcsICdib3R0b20nLCAnd2lkdGgnLCAnaGVpZ2h0J10uc29tZSgoaykgPT4gcmVjdDFba10gIT09IHJlY3QyW2tdKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvdXIgZWxlbWVudCBib3VuZGluZyByZWN0YW5nbGVcbiAgICovXG4gIGdldCBib3VuZGluZ1JlY3QoKTogRE9NRWxlbWVudEJvdW5kaW5nUmVjdCB7XG4gICAgcmV0dXJuIHRoaXMuX2JvdW5kaW5nUmVjdFxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvdXIgZWxlbWVudCBib3VuZGluZyByZWN0YW5nbGVcbiAgICogQHBhcmFtIGJvdW5kaW5nUmVjdCAtIG5ldyBib3VuZGluZyByZWN0YW5nbGVcbiAgICovXG4gIHNldCBib3VuZGluZ1JlY3QoYm91bmRpbmdSZWN0OiBET01FbGVtZW50Qm91bmRpbmdSZWN0KSB7XG4gICAgY29uc3QgaXNTYW1lUmVjdCA9ICEhdGhpcy5ib3VuZGluZ1JlY3QgJiYgdGhpcy5jb21wYXJlQm91bmRpbmdSZWN0KGJvdW5kaW5nUmVjdCwgdGhpcy5ib3VuZGluZ1JlY3QpXG5cbiAgICB0aGlzLl9ib3VuZGluZ1JlY3QgPSB7XG4gICAgICB0b3A6IGJvdW5kaW5nUmVjdC50b3AsXG4gICAgICByaWdodDogYm91bmRpbmdSZWN0LnJpZ2h0LFxuICAgICAgYm90dG9tOiBib3VuZGluZ1JlY3QuYm90dG9tLFxuICAgICAgbGVmdDogYm91bmRpbmdSZWN0LmxlZnQsXG4gICAgICB3aWR0aDogYm91bmRpbmdSZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiBib3VuZGluZ1JlY3QuaGVpZ2h0LFxuICAgICAgeDogYm91bmRpbmdSZWN0LngsXG4gICAgICB5OiBib3VuZGluZ1JlY3QueSxcbiAgICB9XG5cbiAgICBpZiAoIWlzU2FtZVJlY3QpIHtcbiAgICAgIHRoaXMub25TaXplQ2hhbmdlZCh0aGlzLmJvdW5kaW5nUmVjdClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlIG91ciBlbGVtZW50IGJvdW5kaW5nIHJlY3RhbmdsZSBiZWNhdXNlIHRoZSBzY3JvbGwgcG9zaXRpb24gaGFzIGNoYW5nZWRcbiAgICogQHBhcmFtIGRlbHRhIC0gc2Nyb2xsIGRlbHRhIHZhbHVlcyBhbG9uZyBYIGFuZCBZIGF4aXNcbiAgICovXG4gIHVwZGF0ZVNjcm9sbFBvc2l0aW9uKGRlbHRhOiBET01Qb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9KSB7XG4gICAgaWYgKHRoaXMuaXNSZXNpemluZykgcmV0dXJuXG5cbiAgICB0aGlzLl9ib3VuZGluZ1JlY3QudG9wICs9IGRlbHRhLnlcbiAgICB0aGlzLl9ib3VuZGluZ1JlY3QubGVmdCArPSBkZWx0YS54XG5cbiAgICBpZiAoZGVsdGEueCB8fCBkZWx0YS55KSB7XG4gICAgICB0aGlzLm9uUG9zaXRpb25DaGFuZ2VkKHRoaXMuYm91bmRpbmdSZWN0KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIGVsZW1lbnQgYm91bmRpbmcgcmVjdGFuZ2xlLCBlaXRoZXIgYnkgYSB2YWx1ZSBvciBhIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBjYWxsXG4gICAqIEBwYXJhbSBib3VuZGluZ1JlY3QgLSBuZXcgYm91bmRpbmcgcmVjdGFuZ2xlXG4gICAqL1xuICBzZXRTaXplKGJvdW5kaW5nUmVjdDogRE9NRWxlbWVudEJvdW5kaW5nUmVjdCB8IG51bGwgPSBudWxsKSB7XG4gICAgaWYgKCF0aGlzLmVsZW1lbnQpIHJldHVyblxuXG4gICAgdGhpcy5ib3VuZGluZ1JlY3QgPSBib3VuZGluZ1JlY3QgPz8gdGhpcy5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXG5cbiAgICB0aGlzLmlzUmVzaXppbmcgPSBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgb3VyIERPTUVsZW1lbnQgLSByZW1vdmUgZnJvbSByZXNpemUgb2JzZXJ2ZXIgYW5kIGNsZWFyIHRocm90dGxlIHRpbWVvdXRcbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5yZXNpemVNYW5hZ2VyLnVub2JzZXJ2ZSh0aGlzLmVsZW1lbnQpXG4gIH1cbn1cbiIsImV4cG9ydCBkZWZhdWx0IC8qIHdnc2wgKi8gYFxuc3RydWN0IFZTT3V0cHV0IHtcbiAgQGJ1aWx0aW4ocG9zaXRpb24pIHBvc2l0aW9uOiB2ZWM0ZixcbiAgQGxvY2F0aW9uKDApIHV2OiB2ZWMyZixcbn07XG5cbkBmcmFnbWVudCBmbiBtYWluKGZzSW5wdXQ6IFZTT3V0cHV0KSAtPiBAbG9jYXRpb24oMCkgdmVjNGYge1xuICByZXR1cm4gdGV4dHVyZVNhbXBsZShyZW5kZXJUZXh0dXJlLCBkZWZhdWx0U2FtcGxlciwgZnNJbnB1dC51dik7XG59YFxuIiwiaW1wb3J0IHsgRnVsbHNjcmVlblBsYW5lIH0gZnJvbSAnLi4vbWVzaGVzL0Z1bGxzY3JlZW5QbGFuZSdcbmltcG9ydCB7IGlzUmVuZGVyZXIsIFJlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL3V0aWxzJ1xuaW1wb3J0IHsgUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi9SZW5kZXJUYXJnZXQnXG5pbXBvcnQgeyBHUFVDdXJ0YWlucyB9IGZyb20gJy4uLy4uL2N1cnRhaW5zL0dQVUN1cnRhaW5zJ1xuaW1wb3J0IHsgTWVzaEJhc2VSZW5kZXJQYXJhbXMgfSBmcm9tICcuLi9tZXNoZXMvbWl4aW5zL01lc2hCYXNlTWl4aW4nXG5pbXBvcnQgeyBSZW5kZXJUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvUmVuZGVyVGV4dHVyZSdcbmltcG9ydCBkZWZhdWx0X3Bhc3NfZnNXR1NsIGZyb20gJy4uL3NoYWRlcnMvY2h1bmtzL2RlZmF1bHRfcGFzc19mcy53Z3NsJ1xuXG4vKipcbiAqIFBhcmFtZXRlcnMgdXNlZCB0byBjcmVhdGUgYSB7QGxpbmsgU2hhZGVyUGFzc31cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTaGFkZXJQYXNzUGFyYW1zIGV4dGVuZHMgTWVzaEJhc2VSZW5kZXJQYXJhbXMge1xuICAvKiogT3B0aW9uYWwge0BsaW5rIFJlbmRlclRhcmdldH0gdG8gYXNzaWduIHRvIHRoZSB7QGxpbmsgU2hhZGVyUGFzc30gKi9cbiAgcmVuZGVyVGFyZ2V0PzogUmVuZGVyVGFyZ2V0XG59XG5cbi8qKlxuICogVXNlZCB0byBhcHBseSBwb3N0cHJvY2Vzc2luZywgaS5lLiBkcmF3IG1lc2hlcyB0byBhIHtAbGluayBSZW5kZXJUZXh0dXJlfSBhbmQgdGhlbiBkcmF3IGEge0BsaW5rIEZ1bGxzY3JlZW5QbGFuZX0gdXNpbmcgdGhhdCB0ZXh0dXJlIGFzIGFuIGlucHV0LlxuICpcbiAqIEEgU2hhZGVyUGFzcyBjb3VsZCBlaXRoZXIgcG9zdCBwcm9jZXNzIHRoZSB3aG9sZSBzY2VuZSBvciBqdXN0IGEgYnVuY2ggb2YgbWVzaGVzIHVzaW5nIGEgc3BlY2lmaWMge0BsaW5rIFJlbmRlclRhcmdldH0uXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIHNldCBvdXIgbWFpbiBHUFVDdXJ0YWlucyBpbnN0YW5jZVxuICogY29uc3QgZ3B1Q3VydGFpbnMgPSBuZXcgR1BVQ3VydGFpbnMoe1xuICogICBjb250YWluZXI6ICcjY2FudmFzJyAvLyBzZWxlY3RvciBvZiBvdXIgV2ViR1BVIGNhbnZhcyBjb250YWluZXJcbiAqIH0pXG4gKlxuICogLy8gc2V0IHRoZSBHUFUgZGV2aWNlXG4gKiAvLyBub3RlIHRoaXMgaXMgYXN5bmNocm9ub3VzXG4gKiBhd2FpdCBncHVDdXJ0YWlucy5zZXREZXZpY2UoKVxuICpcbiAqIC8vIGNyZWF0ZSBhIFNoYWRlclBhc3NcbiAqIGNvbnN0IHNoYWRlclBhc3MgPSBuZXcgU2hhZGVyUGFzcyhncHVDdXJ0YWluLCB7XG4gKiAgIGxhYmVsOiAnTXkgc2hhZGVyIHBhc3MnLFxuICogICBzaGFkZXJzOiB7XG4gKiAgICAgZnJhZ21lbnQ6IHtcbiAqICAgICAgIGNvZGU6IHNoYWRlclBhc3NDb2RlLCAvLyBhc3N1bWUgaXQgaXMgYSB2YWxpZCBXR1NMIGZyYWdtZW50IHNoYWRlclxuICogICAgIH0sXG4gKiAgIH0sXG4gKiB9KVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBTaGFkZXJQYXNzIGV4dGVuZHMgRnVsbHNjcmVlblBsYW5lIHtcbiAgLyoqIHtAbGluayBSZW5kZXJUYXJnZXR9IGNvbnRlbnQgdG8gdXNlIGFzIGFuIGlucHV0IGlmIHNwZWNpZmllZCAqL1xuICByZW5kZXJUYXJnZXQ6IFJlbmRlclRhcmdldCB8IHVuZGVmaW5lZFxuXG4gIC8qKlxuICAgKiBTaGFkZXJQYXNzIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSByZW5kZXJlciAtIHtAbGluayBSZW5kZXJlcn0gb2JqZWN0IG9yIHtAbGluayBHUFVDdXJ0YWluc30gY2xhc3Mgb2JqZWN0IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFNoYWRlclBhc3N9XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIFNoYWRlclBhc3NQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2UgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFNoYWRlclBhc3N9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihyZW5kZXJlcjogUmVuZGVyZXIgfCBHUFVDdXJ0YWlucywgcGFyYW1ldGVyczogU2hhZGVyUGFzc1BhcmFtcyA9IHt9KSB7XG4gICAgLy8gd2UgY291bGQgcGFzcyBvdXIgY3VydGFpbnMgb2JqZWN0IE9SIG91ciBjdXJ0YWlucyByZW5kZXJlciBvYmplY3RcbiAgICByZW5kZXJlciA9IChyZW5kZXJlciAmJiAocmVuZGVyZXIgYXMgR1BVQ3VydGFpbnMpLnJlbmRlcmVyKSB8fCAocmVuZGVyZXIgYXMgUmVuZGVyZXIpXG5cbiAgICBpc1JlbmRlcmVyKHJlbmRlcmVyLCBwYXJhbWV0ZXJzLmxhYmVsID8gcGFyYW1ldGVycy5sYWJlbCArICcgU2hhZGVyUGFzcycgOiAnU2hhZGVyUGFzcycpXG5cbiAgICAvLyBmb3JjZSB0cmFuc3BhcmVuY3kgdG8gYWxsb3cgZm9yIGNvcnJlY3QgYmxlbmRpbmcgYmV0d2VlbiBzdWNjZXNzaXZlIHBhc3Nlc1xuICAgIHBhcmFtZXRlcnMudHJhbnNwYXJlbnQgPSB0cnVlXG4gICAgcGFyYW1ldGVycy5sYWJlbCA9IHBhcmFtZXRlcnMubGFiZWwgPz8gJ1NoYWRlclBhc3MgJyArIHJlbmRlcmVyLnNoYWRlclBhc3Nlcz8ubGVuZ3RoXG5cbiAgICBpZiAoIXBhcmFtZXRlcnMuc2hhZGVycykge1xuICAgICAgcGFyYW1ldGVycy5zaGFkZXJzID0ge31cbiAgICB9XG5cbiAgICBpZiAoIXBhcmFtZXRlcnMuc2hhZGVycy5mcmFnbWVudCkge1xuICAgICAgcGFyYW1ldGVycy5zaGFkZXJzLmZyYWdtZW50ID0ge1xuICAgICAgICBjb2RlOiBkZWZhdWx0X3Bhc3NfZnNXR1NsLFxuICAgICAgICBlbnRyeVBvaW50OiAnbWFpbicsXG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZm9yY2UgdGhlIHBvc3QgcHJvY2Vzc2luZyBwYXNzZXMgdG8gbm90IHVzZSBkZXB0aFxuICAgIHBhcmFtZXRlcnMuZGVwdGggPSBmYWxzZVxuXG4gICAgc3VwZXIocmVuZGVyZXIsIHBhcmFtZXRlcnMpXG5cbiAgICB0aGlzLnR5cGUgPSAnU2hhZGVyUGFzcydcblxuICAgIHRoaXMuY3JlYXRlUmVuZGVyVGV4dHVyZSh7XG4gICAgICBsYWJlbDogcGFyYW1ldGVycy5sYWJlbCA/IGAke3BhcmFtZXRlcnMubGFiZWx9IHJlbmRlciB0ZXh0dXJlYCA6ICdTaGFkZXIgcGFzcyByZW5kZXIgdGV4dHVyZScsXG4gICAgICBuYW1lOiAncmVuZGVyVGV4dHVyZScsXG4gICAgICBmcm9tVGV4dHVyZTogdGhpcy5yZW5kZXJUYXJnZXQgPyB0aGlzLnJlbmRlclRhcmdldC5yZW5kZXJUZXh0dXJlIDogbnVsbCxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvdXIgbWFpbiB7QGxpbmsgUmVuZGVyVGV4dHVyZX0sIHRoZSBvbmUgdGhhdCBjb250YWlucyBvdXIgcG9zdCBwcm9jZXNzZWQgY29udGVudFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCByZW5kZXJUZXh0dXJlKCk6IFJlbmRlclRleHR1cmUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnJlbmRlclRleHR1cmVzLmZpbmQoKHRleHR1cmUpID0+IHRleHR1cmUub3B0aW9ucy5uYW1lID09PSAncmVuZGVyVGV4dHVyZScpXG4gIH1cblxuICAvKipcbiAgICogQXNzaWduIG9yIHJlbW92ZSBhIHtAbGluayBSZW5kZXJUYXJnZXR9IHRvIHRoaXMge0BsaW5rIFNoYWRlclBhc3N9XG4gICAqIFNpbmNlIHRoaXMgbWFuaXB1bGF0ZXMgdGhlIHtAbGluayBjb3JlL3NjZW5lcy9TY2VuZS5TY2VuZSB8IFNjZW5lfSBzdGFja3MsIGl0IGNhbiBiZSB1c2VkIHRvIHJlbW92ZSBhIFJlbmRlclRhcmdldCBhcyB3ZWxsLlxuICAgKiBBbHNvIGNvcHkgb3IgcmVtb3ZlIHRoZSB7QGxpbmsgUmVuZGVyVGFyZ2V0I3JlbmRlclRleHR1cmUgfCByZW5kZXIgdGFyZ2V0IHJlbmRlciB0ZXh0dXJlfSBpbnRvIHRoZSB7QGxpbmsgU2hhZGVyUGFzc30ge0BsaW5rIHJlbmRlclRleHR1cmV9XG4gICAqIEBwYXJhbSByZW5kZXJUYXJnZXQgLSB0aGUge0BsaW5rIFJlbmRlclRhcmdldH0gdG8gYXNzaWduIG9yIG51bGwgaWYgd2Ugd2FudCB0byByZW1vdmUgdGhlIGN1cnJlbnQge0BsaW5rIFJlbmRlclRhcmdldH1cbiAgICovXG4gIHNldFJlbmRlclRhcmdldChyZW5kZXJUYXJnZXQ6IFJlbmRlclRhcmdldCB8IG51bGwpIHtcbiAgICBzdXBlci5zZXRSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0KVxuXG4gICAgaWYgKHJlbmRlclRhcmdldCkge1xuICAgICAgdGhpcy5yZW5kZXJUZXh0dXJlLmNvcHkodGhpcy5yZW5kZXJUYXJnZXQucmVuZGVyVGV4dHVyZSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5yZW5kZXJUZXh0dXJlLm9wdGlvbnMuZnJvbVRleHR1cmUgPSBudWxsXG4gICAgICB0aGlzLnJlbmRlclRleHR1cmUuY3JlYXRlVGV4dHVyZSgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCB0aGUge0BsaW5rIFNoYWRlclBhc3N9IHRvIHRoZSByZW5kZXJlciBhbmQgdGhlIHtAbGluayBjb3JlL3NjZW5lcy9TY2VuZS5TY2VuZSB8IFNjZW5lfVxuICAgKi9cbiAgYWRkVG9TY2VuZSgpIHtcbiAgICB0aGlzLnJlbmRlcmVyLnNoYWRlclBhc3Nlcy5wdXNoKHRoaXMpXG5cbiAgICBpZiAodGhpcy5hdXRvUmVuZGVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNjZW5lLmFkZFNoYWRlclBhc3ModGhpcylcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIHRoZSB7QGxpbmsgU2hhZGVyUGFzc30gZnJvbSB0aGUgcmVuZGVyZXIgYW5kIHRoZSB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX1cbiAgICovXG4gIHJlbW92ZUZyb21TY2VuZSgpIHtcbiAgICBpZiAodGhpcy5yZW5kZXJUYXJnZXQpIHtcbiAgICAgIHRoaXMucmVuZGVyVGFyZ2V0LmRlc3Ryb3koKVxuICAgIH1cblxuICAgIGlmICh0aGlzLmF1dG9SZW5kZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2NlbmUucmVtb3ZlU2hhZGVyUGFzcyh0aGlzKVxuICAgIH1cblxuICAgIHRoaXMucmVuZGVyZXIuc2hhZGVyUGFzc2VzID0gdGhpcy5yZW5kZXJlci5zaGFkZXJQYXNzZXMuZmlsdGVyKChzUCkgPT4gc1AudXVpZCAhPT0gdGhpcy51dWlkKVxuICB9XG59XG4iLCJpbXBvcnQgeyBpc1JlbmRlcmVyLCBSZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmVycy91dGlscydcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJ1xuaW1wb3J0IHsgR1BVQ3VydGFpbnMgfSBmcm9tICcuLi8uLi9jdXJ0YWlucy9HUFVDdXJ0YWlucydcbmltcG9ydCB7IFJlbmRlclRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9SZW5kZXJUZXh0dXJlJ1xuXG4vKipcbiAqIFBhcmFtZXRlcnMgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgUmVuZGVyUGFzc31cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJQYXNzUGFyYW1zIHtcbiAgLyoqIFRoZSBsYWJlbCBvZiB0aGUge0BsaW5rIFJlbmRlclBhc3N9LCBzZW50IHRvIHZhcmlvdXMgR1BVIG9iamVjdHMgZm9yIGRlYnVnZ2luZyBwdXJwb3NlICovXG4gIGxhYmVsPzogc3RyaW5nXG4gIC8qKiBUaGUge0BsaW5rIEdQVUxvYWRPcCB8IGxvYWQgb3BlcmF0aW9ufSB0byBwZXJmb3JtIHdoaWxlIGRyYXdpbmcgdGhpcyB7QGxpbmsgUmVuZGVyUGFzc30gKi9cbiAgbG9hZE9wPzogR1BVTG9hZE9wXG4gIC8qKiBUaGUge0BsaW5rIEdQVUNvbG9yIHwgY29sb3IgdmFsdWVzfSB0byBjbGVhciB0byBiZWZvcmUgZHJhd2luZyB0aGlzIHtAbGluayBSZW5kZXJQYXNzfSAqL1xuICBjbGVhclZhbHVlPzogR1BVQ29sb3JcbiAgLyoqIE9wdGlvbmFsIGZvcm1hdCBvZiB0aGUgY29sb3IgYXR0YWNobWVudCB0ZXh0dXJlICovXG4gIHRhcmdldEZvcm1hdDogR1BVVGV4dHVyZUZvcm1hdFxuICAvKiogV2hldGhlciB0aGUge0BsaW5rIFJlbmRlclBhc3Mjdmlld1RleHR1cmUgfCB2aWV3IHRleHR1cmV9IHNob3VsZCB1c2UgbXVsdGlzYW1wbGluZyBvciBub3QgKi9cbiAgc2FtcGxlQ291bnQ/OiBHUFVTaXplMzJcblxuICAvKiogV2hldGhlciB0aGlzIHtAbGluayBSZW5kZXJQYXNzfSBzaG91bGQgaGFuZGxlIGEgZGVwdGggdGV4dHVyZSAqL1xuICBkZXB0aD86IGJvb2xlYW5cbiAgLyoqIFdoZXRoZXIgdGhpcyB7QGxpbmsgUmVuZGVyUGFzc30gc2hvdWxkIHVzZSBhbiBhbHJlYWR5IGNyZWF0ZWQgZGVwdGggdGV4dHVyZSAqL1xuICBkZXB0aFRleHR1cmU/OiBSZW5kZXJUZXh0dXJlXG4gIC8qKiBUaGUge0BsaW5rIEdQVUxvYWRPcCB8IGRlcHRoIGxvYWQgb3BlcmF0aW9ufSB0byBwZXJmb3JtIHdoaWxlIGRyYXdpbmcgdGhpcyB7QGxpbmsgUmVuZGVyUGFzc30gKi9cbiAgZGVwdGhMb2FkT3A/OiBHUFVMb2FkT3BcbiAgLyoqIFRoZSBkZXB0aCBjbGVhciB2YWx1ZSB0byBjbGVhciB0byBiZWZvcmUgZHJhd2luZyB0aGlzIHtAbGluayBSZW5kZXJQYXNzfSAqL1xuICBkZXB0aENsZWFyVmFsdWU/OiBHUFVSZW5kZXJQYXNzRGVwdGhTdGVuY2lsQXR0YWNobWVudFsnZGVwdGhDbGVhclZhbHVlJ11cbn1cblxuLyoqXG4gKiBVc2VkIGJ5IHtAbGluayBjb3JlL3JlbmRlclBhc3Nlcy9SZW5kZXJUYXJnZXQuUmVuZGVyVGFyZ2V0IHwgUmVuZGVyVGFyZ2V0fSBhbmQgdGhlIHtAbGluayBSZW5kZXJlcn0gdG8gcmVuZGVyIHRvIGEge0BsaW5rIFJlbmRlclBhc3Mjdmlld1RleHR1cmUgfCB2aWV3IHRleHR1cmV9IHVzaW5nIGEgc3BlY2lmaWMge0BsaW5rIEdQVVJlbmRlclBhc3NEZXNjcmlwdG9yIHwgcmVuZGVyIHBhc3MgZGVzY3JpcHRvcn0uXG4gKi9cbmV4cG9ydCBjbGFzcyBSZW5kZXJQYXNzIHtcbiAgLyoqIHtAbGluayBSZW5kZXJlcn0gdXNlZCBieSB0aGlzIHtAbGluayBSZW5kZXJQYXNzfSAqL1xuICByZW5kZXJlcjogUmVuZGVyZXJcbiAgLyoqIFRoZSB0eXBlIG9mIHRoZSB7QGxpbmsgUmVuZGVyUGFzc30gKi9cbiAgdHlwZTogc3RyaW5nXG4gIC8qKiBUaGUgdW5pdmVyc2FsIHVuaXF1ZSBpZCBvZiB0aGlzIHtAbGluayBSZW5kZXJQYXNzfSAqL1xuICByZWFkb25seSB1dWlkOiBzdHJpbmdcblxuICAvKiogT3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBSZW5kZXJQYXNzfSAqL1xuICBvcHRpb25zOiBSZW5kZXJQYXNzUGFyYW1zXG5cbiAgLyoqIERlcHRoIHtAbGluayBSZW5kZXJUZXh0dXJlfSB0byB1c2Ugd2l0aCB0aGlzIHtAbGluayBSZW5kZXJQYXNzfSBpZiBpdCBzaG91bGQgaGFuZGxlIGRlcHRoICovXG4gIGRlcHRoVGV4dHVyZTogUmVuZGVyVGV4dHVyZSB8IHVuZGVmaW5lZFxuICAvKiogQ29sb3IgYXR0YWNobWVudCB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gdG8gdXNlIHdpdGggdGhpcyB7QGxpbmsgUmVuZGVyUGFzc30gKi9cbiAgdmlld1RleHR1cmU6IFJlbmRlclRleHR1cmVcbiAgLyoqIFJlc29sdmUge0BsaW5rIFJlbmRlclRleHR1cmV9IHRvIHVzZSB3aXRoIHRoaXMge0BsaW5rIFJlbmRlclBhc3N9IGlmIGl0IGlzIHVzaW5nIG11bHRpc2FtcGxpbmcgKi9cbiAgLy9yZXNvbHZlVGV4dHVyZTogUmVuZGVyVGV4dHVyZSB8IHVuZGVmaW5lZFxuXG4gIC8qKiBUaGUge0BsaW5rIFJlbmRlclBhc3N9IHtAbGluayBHUFVSZW5kZXJQYXNzRGVzY3JpcHRvciB8IGRlc2NyaXB0b3J9ICovXG4gIGRlc2NyaXB0b3I6IEdQVVJlbmRlclBhc3NEZXNjcmlwdG9yXG5cbiAgLyoqXG4gICAqIFJlbmRlclBhc3MgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0ge0BsaW5rIFJlbmRlcmVyfSBvYmplY3Qgb3Ige0BsaW5rIEdQVUN1cnRhaW5zfSBjbGFzcyBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgUmVuZGVyUGFzc31cbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgUmVuZGVyUGFzc1BhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFJlbmRlclBhc3N9XG4gICAqL1xuICBjb25zdHJ1Y3RvcihcbiAgICByZW5kZXJlcjogUmVuZGVyZXIgfCBHUFVDdXJ0YWlucyxcbiAgICB7XG4gICAgICBsYWJlbCA9ICdSZW5kZXIgUGFzcycsXG4gICAgICBzYW1wbGVDb3VudCA9IDQsXG4gICAgICBsb2FkT3AgPSAnY2xlYXInIGFzIEdQVUxvYWRPcCxcbiAgICAgIGNsZWFyVmFsdWUgPSBbMCwgMCwgMCwgMF0sXG4gICAgICB0YXJnZXRGb3JtYXQsXG4gICAgICBkZXB0aCA9IHRydWUsXG4gICAgICBkZXB0aFRleHR1cmUsXG4gICAgICBkZXB0aExvYWRPcCA9ICdjbGVhcicgYXMgR1BVTG9hZE9wLFxuICAgICAgZGVwdGhDbGVhclZhbHVlID0gMSxcbiAgICB9ID0ge30gYXMgUmVuZGVyUGFzc1BhcmFtc1xuICApIHtcbiAgICAvLyB3ZSBjb3VsZCBwYXNzIG91ciBjdXJ0YWlucyBvYmplY3QgT1Igb3VyIGN1cnRhaW5zIHJlbmRlcmVyIG9iamVjdFxuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBSZW5kZXJlcilcblxuICAgIGlzUmVuZGVyZXIocmVuZGVyZXIsICdSZW5kZXJQYXNzJylcblxuICAgIHRoaXMudHlwZSA9ICdSZW5kZXJQYXNzJ1xuICAgIHRoaXMudXVpZCA9IGdlbmVyYXRlVVVJRCgpXG5cbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJcbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBsYWJlbCxcbiAgICAgIHNhbXBsZUNvdW50LFxuICAgICAgLy8gY29sb3JcbiAgICAgIGxvYWRPcCxcbiAgICAgIGNsZWFyVmFsdWUsXG4gICAgICB0YXJnZXRGb3JtYXQ6IHRhcmdldEZvcm1hdCA/PyB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucHJlZmVycmVkRm9ybWF0LFxuICAgICAgLy8gZGVwdGhcbiAgICAgIGRlcHRoLFxuICAgICAgLi4uKGRlcHRoVGV4dHVyZSAhPT0gdW5kZWZpbmVkICYmIHsgZGVwdGhUZXh0dXJlIH0pLFxuICAgICAgZGVwdGhMb2FkT3AsXG4gICAgICBkZXB0aENsZWFyVmFsdWUsXG4gICAgfVxuXG4gICAgdGhpcy5zZXRDbGVhclZhbHVlKGNsZWFyVmFsdWUpXG5cbiAgICAvLyBpZiBuZWVkZWQsIGNyZWF0ZSBhIGRlcHRoIHRleHR1cmUgYmVmb3JlIG91ciBkZXNjcmlwdG9yXG4gICAgaWYgKHRoaXMub3B0aW9ucy5kZXB0aCkge1xuICAgICAgdGhpcy5jcmVhdGVEZXB0aFRleHR1cmUoKVxuICAgIH1cblxuICAgIHRoaXMudmlld1RleHR1cmUgPSBuZXcgUmVuZGVyVGV4dHVyZSh0aGlzLnJlbmRlcmVyLCB7XG4gICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsICsgJyB2aWV3IHRleHR1cmUnLFxuICAgICAgbmFtZTogJ3ZpZXdUZXh0dXJlJyxcbiAgICAgIGZvcm1hdDogdGhpcy5vcHRpb25zLnRhcmdldEZvcm1hdCxcbiAgICAgIHNhbXBsZUNvdW50OiB0aGlzLm9wdGlvbnMuc2FtcGxlQ291bnQsXG4gICAgfSlcblxuICAgIC8vIGlmICh0aGlzLm9wdGlvbnMuc2FtcGxlQ291bnQgPiAxKSB7XG4gICAgLy8gICB0aGlzLnJlc29sdmVUZXh0dXJlID0gbmV3IFJlbmRlclRleHR1cmUodGhpcy5yZW5kZXJlciwge1xuICAgIC8vICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsICsgJyByZXNvbHZlIHRleHR1cmUnLFxuICAgIC8vICAgICBuYW1lOiAncmVzb2x2ZVRleHR1cmUnLFxuICAgIC8vICAgICBmb3JtYXQ6IHRoaXMub3B0aW9ucy50YXJnZXRGb3JtYXQsXG4gICAgLy8gICB9KVxuICAgIC8vIH1cblxuICAgIHRoaXMuc2V0UmVuZGVyUGFzc0Rlc2NyaXB0b3IoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvdXIge0BsaW5rIGRlcHRoVGV4dHVyZSB8IGRlcHRoIHRleHR1cmV9XG4gICAqL1xuICBjcmVhdGVEZXB0aFRleHR1cmUoKSB7XG4gICAgdGhpcy5kZXB0aFRleHR1cmUgPSBuZXcgUmVuZGVyVGV4dHVyZSh0aGlzLnJlbmRlcmVyLCB7XG4gICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsICsgJyBkZXB0aCB0ZXh0dXJlJyxcbiAgICAgIG5hbWU6ICdkZXB0aFRleHR1cmUnLFxuICAgICAgdXNhZ2U6ICdkZXB0aFRleHR1cmUnLFxuICAgICAgZm9ybWF0OiAnZGVwdGgyNHBsdXMnLFxuICAgICAgc2FtcGxlQ291bnQ6IHRoaXMub3B0aW9ucy5zYW1wbGVDb3VudCxcbiAgICAgIC4uLih0aGlzLm9wdGlvbnMuZGVwdGhUZXh0dXJlICYmIHsgZnJvbVRleHR1cmU6IHRoaXMub3B0aW9ucy5kZXB0aFRleHR1cmUgfSksXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldCBvdXIge0BsaW5rIGRlcHRoVGV4dHVyZSB8IGRlcHRoIHRleHR1cmV9XG4gICAqL1xuICByZXNldFJlbmRlclBhc3NEZXB0aCgpIHtcbiAgICB0aGlzLmRlcHRoVGV4dHVyZS5mb3JjZVJlc2l6ZSh7XG4gICAgICB3aWR0aDogTWF0aC5mbG9vcih0aGlzLnJlbmRlcmVyLnBpeGVsUmF0aW9Cb3VuZGluZ1JlY3Qud2lkdGgpLFxuICAgICAgaGVpZ2h0OiBNYXRoLmZsb29yKHRoaXMucmVuZGVyZXIucGl4ZWxSYXRpb0JvdW5kaW5nUmVjdC5oZWlnaHQpLFxuICAgICAgZGVwdGg6IDEsXG4gICAgfSlcblxuICAgIHRoaXMuZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxBdHRhY2htZW50LnZpZXcgPSB0aGlzLmRlcHRoVGV4dHVyZS50ZXh0dXJlLmNyZWF0ZVZpZXcoe1xuICAgICAgbGFiZWw6IHRoaXMuZGVwdGhUZXh0dXJlLm9wdGlvbnMubGFiZWwgKyAnIHZpZXcnLFxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVzZXQgb3VyIHtAbGluayB2aWV3VGV4dHVyZSB8IHZpZXcgdGV4dHVyZX1cbiAgICovXG4gIHJlc2V0UmVuZGVyUGFzc1ZpZXcoKSB7XG4gICAgdGhpcy52aWV3VGV4dHVyZS5mb3JjZVJlc2l6ZSh7XG4gICAgICB3aWR0aDogTWF0aC5mbG9vcih0aGlzLnJlbmRlcmVyLnBpeGVsUmF0aW9Cb3VuZGluZ1JlY3Qud2lkdGgpLFxuICAgICAgaGVpZ2h0OiBNYXRoLmZsb29yKHRoaXMucmVuZGVyZXIucGl4ZWxSYXRpb0JvdW5kaW5nUmVjdC5oZWlnaHQpLFxuICAgICAgZGVwdGg6IDEsXG4gICAgfSlcblxuICAgIHRoaXMuZGVzY3JpcHRvci5jb2xvckF0dGFjaG1lbnRzWzBdLnZpZXcgPSB0aGlzLnZpZXdUZXh0dXJlLnRleHR1cmUuY3JlYXRlVmlldyh7XG4gICAgICBsYWJlbDogdGhpcy52aWV3VGV4dHVyZS5vcHRpb25zLmxhYmVsICsgJyB2aWV3JyxcbiAgICB9KVxuXG4gICAgLy8gaWYgKHRoaXMub3B0aW9ucy5zYW1wbGVDb3VudCA+IDEpIHtcbiAgICAvLyAgIHRoaXMucmVzb2x2ZVRleHR1cmUuZm9yY2VSZXNpemUoe1xuICAgIC8vICAgICB3aWR0aDogTWF0aC5mbG9vcih0aGlzLnJlbmRlcmVyLnBpeGVsUmF0aW9Cb3VuZGluZ1JlY3Qud2lkdGgpLFxuICAgIC8vICAgICBoZWlnaHQ6IE1hdGguZmxvb3IodGhpcy5yZW5kZXJlci5waXhlbFJhdGlvQm91bmRpbmdSZWN0LmhlaWdodCksXG4gICAgLy8gICAgIGRlcHRoOiAxLFxuICAgIC8vICAgfSlcbiAgICAvL1xuICAgIC8vICAgdGhpcy5kZXNjcmlwdG9yLmNvbG9yQXR0YWNobWVudHNbMF0ucmVzb2x2ZVRhcmdldCA9IHRoaXMucmVzb2x2ZVRleHR1cmUudGV4dHVyZS5jcmVhdGVWaWV3KClcbiAgICAvLyB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciByZW5kZXIgcGFzcyB7QGxpbmsgZGVzY3JpcHRvcn1cbiAgICovXG4gIHNldFJlbmRlclBhc3NEZXNjcmlwdG9yKCkge1xuICAgIHRoaXMuZGVzY3JpcHRvciA9IHtcbiAgICAgIGxhYmVsOiB0aGlzLm9wdGlvbnMubGFiZWwgKyAnIGRlc2NyaXB0b3InLFxuICAgICAgY29sb3JBdHRhY2htZW50czogW1xuICAgICAgICB7XG4gICAgICAgICAgLy8gdmlldzogPC0gdG8gYmUgZmlsbGVkIG91dCB3aGVuIHdlIHNldCBvdXIgcmVuZGVyIHBhc3Mgdmlld1xuICAgICAgICAgIHZpZXc6IHRoaXMudmlld1RleHR1cmUudGV4dHVyZS5jcmVhdGVWaWV3KHtcbiAgICAgICAgICAgIGxhYmVsOiB0aGlzLnZpZXdUZXh0dXJlLm9wdGlvbnMubGFiZWwgKyAnIHZpZXcnLFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIC8vIC4uLih0aGlzLm9wdGlvbnMuc2FtcGxlQ291bnQgPiAxICYmIHtcbiAgICAgICAgICAvLyAgIHJlc29sdmVUYXJnZXQ6IHRoaXMucmVzb2x2ZVRleHR1cmUudGV4dHVyZS5jcmVhdGVWaWV3KHtcbiAgICAgICAgICAvLyAgICAgbGFiZWw6IHRoaXMucmVzb2x2ZVRleHR1cmUub3B0aW9ucy5sYWJlbCArICcgdmlldycsXG4gICAgICAgICAgLy8gICB9KSxcbiAgICAgICAgICAvLyB9KSxcbiAgICAgICAgICAvLyBjbGVhciB2YWx1ZXNcbiAgICAgICAgICBjbGVhclZhbHVlOiB0aGlzLm9wdGlvbnMuY2xlYXJWYWx1ZSxcbiAgICAgICAgICAvLyBsb2FkT3A6ICdjbGVhcicgc3BlY2lmaWVzIHRvIGNsZWFyIHRoZSB0ZXh0dXJlIHRvIHRoZSBjbGVhciB2YWx1ZSBiZWZvcmUgZHJhd2luZ1xuICAgICAgICAgIC8vIFRoZSBvdGhlciBvcHRpb24gaXMgJ2xvYWQnIHdoaWNoIG1lYW5zIGxvYWQgdGhlIGV4aXN0aW5nIGNvbnRlbnRzIG9mIHRoZSB0ZXh0dXJlIGludG8gdGhlIEdQVSBzbyB3ZSBjYW4gZHJhdyBvdmVyIHdoYXQncyBhbHJlYWR5IHRoZXJlLlxuICAgICAgICAgIGxvYWRPcDogdGhpcy5vcHRpb25zLmxvYWRPcCxcbiAgICAgICAgICAvLyBzdG9yZU9wOiAnc3RvcmUnIG1lYW5zIHN0b3JlIHRoZSByZXN1bHQgb2Ygd2hhdCB3ZSBkcmF3LlxuICAgICAgICAgIC8vIFdlIGNvdWxkIGFsc28gcGFzcyAnZGlzY2FyZCcgd2hpY2ggd291bGQgdGhyb3cgYXdheSB3aGF0IHdlIGRyYXcuXG4gICAgICAgICAgLy8gc2VlIGh0dHBzOi8vd2ViZ3B1ZnVuZGFtZW50YWxzLm9yZy93ZWJncHUvbGVzc29ucy93ZWJncHUtbXVsdGlzYW1wbGluZy5odG1sXG4gICAgICAgICAgc3RvcmVPcDogJ3N0b3JlJyxcbiAgICAgICAgfSxcbiAgICAgIF0sXG4gICAgICAuLi4odGhpcy5vcHRpb25zLmRlcHRoICYmIHtcbiAgICAgICAgZGVwdGhTdGVuY2lsQXR0YWNobWVudDoge1xuICAgICAgICAgIHZpZXc6IHRoaXMuZGVwdGhUZXh0dXJlLnRleHR1cmUuY3JlYXRlVmlldyh7XG4gICAgICAgICAgICBsYWJlbDogdGhpcy5kZXB0aFRleHR1cmUub3B0aW9ucy5sYWJlbCArICcgdmlldycsXG4gICAgICAgICAgfSksXG4gICAgICAgICAgZGVwdGhDbGVhclZhbHVlOiB0aGlzLm9wdGlvbnMuZGVwdGhDbGVhclZhbHVlLFxuICAgICAgICAgIC8vIHRoZSBzYW1lIHdheSBsb2FkT3AgaXMgd29ya2luZywgd2UgY2FuIHNwZWNpZnkgaWYgd2Ugd2FudCB0byBjbGVhciBvciBsb2FkIHRoZSBwcmV2aW91cyBkZXB0aCBidWZmZXIgcmVzdWx0XG4gICAgICAgICAgZGVwdGhMb2FkT3A6IHRoaXMub3B0aW9ucy5kZXB0aExvYWRPcCxcbiAgICAgICAgICBkZXB0aFN0b3JlT3A6ICdzdG9yZScsXG4gICAgICAgIH0sXG4gICAgICB9KSxcbiAgICB9IGFzIEdQVVJlbmRlclBhc3NEZXNjcmlwdG9yXG4gIH1cblxuICAvKipcbiAgICogUmVzaXplIG91ciB7QGxpbmsgUmVuZGVyUGFzc306IHJlc2V0IGl0cyB7QGxpbmsgUmVuZGVyVGV4dHVyZX1cbiAgICovXG4gIHJlc2l6ZSgpIHtcbiAgICAvLyByZXNldCB0ZXh0dXJlc1xuICAgIGlmICh0aGlzLm9wdGlvbnMuZGVwdGgpIHRoaXMucmVzZXRSZW5kZXJQYXNzRGVwdGgoKVxuICAgIHRoaXMucmVzZXRSZW5kZXJQYXNzVmlldygpXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB7QGxpbmsgZGVzY3JpcHRvcn0ge0BsaW5rIEdQVUxvYWRPcCB8IGxvYWQgb3BlcmF0aW9ufVxuICAgKiBAcGFyYW0gbG9hZE9wIC0gbmV3IHtAbGluayBHUFVMb2FkT3AgfCBsb2FkIG9wZXJhdGlvbn0gdG8gdXNlXG4gICAqL1xuICBzZXRMb2FkT3AobG9hZE9wOiBHUFVMb2FkT3AgPSAnY2xlYXInKSB7XG4gICAgdGhpcy5vcHRpb25zLmxvYWRPcCA9IGxvYWRPcFxuICAgIGlmICh0aGlzLmRlc2NyaXB0b3IpIHtcbiAgICAgIGlmICh0aGlzLmRlc2NyaXB0b3IuY29sb3JBdHRhY2htZW50cykge1xuICAgICAgICB0aGlzLmRlc2NyaXB0b3IuY29sb3JBdHRhY2htZW50c1swXS5sb2FkT3AgPSBsb2FkT3BcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB7QGxpbmsgZGVzY3JpcHRvcn0ge0BsaW5rIEdQVUxvYWRPcCB8IGRlcHRoIGxvYWQgb3BlcmF0aW9ufVxuICAgKiBAcGFyYW0gZGVwdGhMb2FkT3AgLSBuZXcge0BsaW5rIEdQVUxvYWRPcCB8IGRlcHRoIGxvYWQgb3BlcmF0aW9ufSB0byB1c2VcbiAgICovXG4gIHNldERlcHRoTG9hZE9wKGRlcHRoTG9hZE9wOiBHUFVMb2FkT3AgPSAnY2xlYXInKSB7XG4gICAgdGhpcy5vcHRpb25zLmRlcHRoTG9hZE9wID0gZGVwdGhMb2FkT3BcbiAgICBpZiAodGhpcy5vcHRpb25zLmRlcHRoICYmIHRoaXMuZGVzY3JpcHRvci5kZXB0aFN0ZW5jaWxBdHRhY2htZW50KSB7XG4gICAgICB0aGlzLmRlc2NyaXB0b3IuZGVwdGhTdGVuY2lsQXR0YWNobWVudC5kZXB0aExvYWRPcCA9IGRlcHRoTG9hZE9wXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvdXIge0BsaW5rIEdQVUNvbG9yIHwgY2xlYXIgY29sb3JzIHZhbHVlfS48YnI+XG4gICAqIEJld2FyZSB0aGF0IGlmIHRoZSB7QGxpbmsgcmVuZGVyZXJ9IGlzIHVzaW5nIHtAbGluayBjb3JlL3JlbmRlcmVycy9HUFVSZW5kZXJlci5HUFVSZW5kZXJlciNhbHBoYU1vZGUgfCBwcmVtdWx0aXBsaWVkIGFscGhhIG1vZGV9LCB5b3VyIFIsIEcgYW5kIEIgY2hhbm5lbHMgc2hvdWxkIGJlIHByZW11bHRpcGxpZWQgYnkgeW91ciBhbHBoYSBjaGFubmVsLlxuICAgKiBAcGFyYW0gY2xlYXJWYWx1ZSAtIG5ldyB7QGxpbmsgR1BVQ29sb3IgfCBjbGVhciBjb2xvcnMgdmFsdWV9IHRvIHVzZVxuICAgKi9cbiAgc2V0Q2xlYXJWYWx1ZShjbGVhclZhbHVlOiBHUFVDb2xvciA9IFswLCAwLCAwLCAwXSkge1xuICAgIGlmICh0aGlzLnJlbmRlcmVyLmFscGhhTW9kZSA9PT0gJ3ByZW11bHRpcGxpZWQnKSB7XG4gICAgICBjb25zdCBhbHBoYSA9IGNsZWFyVmFsdWVbM11cbiAgICAgIGNsZWFyVmFsdWVbMF0gPSBNYXRoLm1pbihjbGVhclZhbHVlWzBdLCBhbHBoYSlcbiAgICAgIGNsZWFyVmFsdWVbMV0gPSBNYXRoLm1pbihjbGVhclZhbHVlWzFdLCBhbHBoYSlcbiAgICAgIGNsZWFyVmFsdWVbMl0gPSBNYXRoLm1pbihjbGVhclZhbHVlWzJdLCBhbHBoYSlcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5vcHRpb25zLmNsZWFyVmFsdWUgPSBjbGVhclZhbHVlXG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZGVzY3JpcHRvciAmJiB0aGlzLmRlc2NyaXB0b3IuY29sb3JBdHRhY2htZW50cykge1xuICAgICAgdGhpcy5kZXNjcmlwdG9yLmNvbG9yQXR0YWNobWVudHNbMF0uY2xlYXJWYWx1ZSA9IGNsZWFyVmFsdWVcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSBvdXIge0BsaW5rIFJlbmRlclBhc3N9XG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIHRoaXMudmlld1RleHR1cmU/LmRlc3Ryb3koKVxuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuZGVwdGhUZXh0dXJlICYmIHRoaXMuZGVwdGhUZXh0dXJlKSB7XG4gICAgICB0aGlzLmRlcHRoVGV4dHVyZS5kZXN0cm95KClcbiAgICB9XG5cbiAgICAvL3RoaXMucmVzb2x2ZVRleHR1cmU/LmRlc3Ryb3koKVxuICB9XG59XG4iLCJpbXBvcnQgeyBpc1JlbmRlcmVyLCBSZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmVycy91dGlscydcbmltcG9ydCB7IFJlbmRlclBhc3MsIFJlbmRlclBhc3NQYXJhbXMgfSBmcm9tICcuL1JlbmRlclBhc3MnXG5pbXBvcnQgeyBSZW5kZXJUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvUmVuZGVyVGV4dHVyZSdcbmltcG9ydCB7IGdlbmVyYXRlVVVJRCB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJ1xuaW1wb3J0IHsgR1BVQ3VydGFpbnMgfSBmcm9tICcuLi8uLi9jdXJ0YWlucy9HUFVDdXJ0YWlucydcbmltcG9ydCB7IERPTUVsZW1lbnRCb3VuZGluZ1JlY3QgfSBmcm9tICcuLi9ET00vRE9NRWxlbWVudCdcblxuLyoqXG4gKiBQYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIFJlbmRlclRhcmdldH1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJUYXJnZXRQYXJhbXMgZXh0ZW5kcyBSZW5kZXJQYXNzUGFyYW1zIHtcbiAgLyoqIFdoZXRoZXIgd2Ugc2hvdWxkIGFkZCB0aGlzIHtAbGluayBSZW5kZXJUYXJnZXR9IHRvIG91ciB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX0gdG8gbGV0IGl0IGhhbmRsZSB0aGUgcmVuZGVyaW5nIHByb2Nlc3MgYXV0b21hdGljYWxseSAqL1xuICBhdXRvUmVuZGVyPzogYm9vbGVhblxufVxuXG4vKipcbiAqIFVzZWQgdG8gZHJhdyBtZXNoZXMgdG8gYSB7QGxpbmsgUmVuZGVyUGFzcyN2aWV3VGV4dHVyZSB8IFJlbmRlclBhc3MgdmlldyB0ZXh0dXJlfSBpbnN0ZWFkIG9mIGRpcmVjdGx5IHRvIHNjcmVlbi5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gc2V0IG91ciBtYWluIEdQVUN1cnRhaW5zIGluc3RhbmNlXG4gKiBjb25zdCBncHVDdXJ0YWlucyA9IG5ldyBHUFVDdXJ0YWlucyh7XG4gKiAgIGNvbnRhaW5lcjogJyNjYW52YXMnIC8vIHNlbGVjdG9yIG9mIG91ciBXZWJHUFUgY2FudmFzIGNvbnRhaW5lclxuICogfSlcbiAqXG4gKiAvLyBzZXQgdGhlIEdQVSBkZXZpY2VcbiAqIC8vIG5vdGUgdGhpcyBpcyBhc3luY2hyb25vdXNcbiAqIGF3YWl0IGdwdUN1cnRhaW5zLnNldERldmljZSgpXG4gKlxuICogY29uc3QgcmVuZGVyVGFyZ2V0ID0gbmV3IFJlbmRlclRhcmdldChncHVDdXJ0YWlucywge1xuICogICBsYWJlbDogJ015IHJlbmRlciB0YXJnZXQnLFxuICogfSlcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUmVuZGVyVGFyZ2V0IHtcbiAgLyoqIHtAbGluayBSZW5kZXJlcn0gdXNlZCBieSB0aGlzIHtAbGluayBSZW5kZXJUYXJnZXR9ICovXG4gIHJlbmRlcmVyOiBSZW5kZXJlclxuICAvKiogVGhlIHR5cGUgb2YgdGhlIHtAbGluayBSZW5kZXJUYXJnZXR9ICovXG4gIHR5cGU6IHN0cmluZ1xuICAvKiogVGhlIHVuaXZlcnNhbCB1bmlxdWUgaWQgb2YgdGhpcyB7QGxpbmsgUmVuZGVyVGFyZ2V0fSAqL1xuICByZWFkb25seSB1dWlkOiBzdHJpbmdcblxuICAvKiogT3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBSZW5kZXJUYXJnZXR9ICovXG4gIG9wdGlvbnM6IFJlbmRlclRhcmdldFBhcmFtc1xuXG4gIC8qKiB7QGxpbmsgUmVuZGVyUGFzc30gdXNlZCBieSB0aGlzIHtAbGluayBSZW5kZXJUYXJnZXR9ICovXG4gIHJlbmRlclBhc3M6IFJlbmRlclBhc3NcbiAgLyoqIHtAbGluayBSZW5kZXJUZXh0dXJlfSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgYnkgdGhlIHtAbGluayByZW5kZXJQYXNzfSB3aGVuIHtAbGluayBjb3JlL3JlbmRlcmVycy9HUFVSZW5kZXJlci5HUFVSZW5kZXJlciNzZXRSZW5kZXJQYXNzQ3VycmVudFRleHR1cmUgfCBzZXR0aW5nIHRoZSBjdXJyZW50IHRleHR1cmV9ICovXG4gIHJlbmRlclRleHR1cmU6IFJlbmRlclRleHR1cmVcblxuICAvKiogV2hldGhlciB3ZSBzaG91bGQgYWRkIHRoaXMge0BsaW5rIFJlbmRlclRhcmdldH0gdG8gb3VyIHtAbGluayBjb3JlL3NjZW5lcy9TY2VuZS5TY2VuZSB8IFNjZW5lfSB0byBsZXQgaXQgaGFuZGxlIHRoZSByZW5kZXJpbmcgcHJvY2VzcyBhdXRvbWF0aWNhbGx5ICovXG4gICNhdXRvUmVuZGVyID0gdHJ1ZVxuXG4gIC8qKlxuICAgKiBSZW5kZXJUYXJnZXQgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0ge0BsaW5rIFJlbmRlcmVyfSBvYmplY3Qgb3Ige0BsaW5rIEdQVUN1cnRhaW5zfSBjbGFzcyBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgUmVuZGVyVGFyZ2V0fVxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBSZW5kZXJUYXJnZXRQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2UgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFJlbmRlclRhcmdldH1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHJlbmRlcmVyOiBSZW5kZXJlciB8IEdQVUN1cnRhaW5zLCBwYXJhbWV0ZXJzOiBSZW5kZXJUYXJnZXRQYXJhbXMpIHtcbiAgICAvLyB3ZSBjb3VsZCBwYXNzIG91ciBjdXJ0YWlucyBvYmplY3QgT1Igb3VyIGN1cnRhaW5zIHJlbmRlcmVyIG9iamVjdFxuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBSZW5kZXJlcilcblxuICAgIGlzUmVuZGVyZXIocmVuZGVyZXIsICdSZW5kZXJUYXJnZXQnKVxuXG4gICAgdGhpcy50eXBlID0gJ1JlbmRlclRhcmdldCdcbiAgICB0aGlzLnJlbmRlcmVyID0gcmVuZGVyZXJcbiAgICB0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKVxuXG4gICAgY29uc3QgeyBsYWJlbCwgdGFyZ2V0Rm9ybWF0LCBhdXRvUmVuZGVyLCAuLi5yZW5kZXJQYXNzUGFyYW1zIH0gPSBwYXJhbWV0ZXJzXG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICBsYWJlbCxcbiAgICAgIC4uLnJlbmRlclBhc3NQYXJhbXMsXG4gICAgICB0YXJnZXRGb3JtYXQ6IHRhcmdldEZvcm1hdCA/PyB0aGlzLnJlbmRlcmVyLm9wdGlvbnMucHJlZmVycmVkRm9ybWF0LFxuICAgICAgYXV0b1JlbmRlcixcbiAgICB9XG5cbiAgICBpZiAoYXV0b1JlbmRlciAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aGlzLiNhdXRvUmVuZGVyID0gYXV0b1JlbmRlclxuICAgIH1cblxuICAgIHRoaXMucmVuZGVyUGFzcyA9IG5ldyBSZW5kZXJQYXNzKHRoaXMucmVuZGVyZXIsIHtcbiAgICAgIGxhYmVsOiB0aGlzLm9wdGlvbnMubGFiZWwgPyBgJHt0aGlzLm9wdGlvbnMubGFiZWx9IFJlbmRlciBQYXNzYCA6ICdSZW5kZXIgVGFyZ2V0IFJlbmRlciBQYXNzJyxcbiAgICAgIHRhcmdldEZvcm1hdDogdGhpcy5vcHRpb25zLnRhcmdldEZvcm1hdCxcbiAgICAgIGRlcHRoVGV4dHVyZTogdGhpcy5yZW5kZXJlci5yZW5kZXJQYXNzLmRlcHRoVGV4dHVyZSwgLy8gcmV1c2UgcmVuZGVyZXIgZGVwdGggdGV4dHVyZSBmb3IgZXZlcnkgcGFzc1xuICAgICAgLi4ucmVuZGVyUGFzc1BhcmFtcyxcbiAgICB9KVxuXG4gICAgLy8gdGhpcyBpcyB0aGUgdGV4dHVyZSB0aGF0IHdpbGwgYmUgcmVzb2x2ZWQgd2hlbiBzZXR0aW5nIHRoZSBjdXJyZW50IHJlbmRlciBwYXNzIHRleHR1cmVcbiAgICB0aGlzLnJlbmRlclRleHR1cmUgPSBuZXcgUmVuZGVyVGV4dHVyZSh0aGlzLnJlbmRlcmVyLCB7XG4gICAgICBsYWJlbDogdGhpcy5vcHRpb25zLmxhYmVsID8gYCR7dGhpcy5vcHRpb25zLmxhYmVsfSBSZW5kZXIgVGV4dHVyZWAgOiAnUmVuZGVyIFRhcmdldCBSZW5kZXIgVGV4dHVyZScsXG4gICAgICBuYW1lOiAncmVuZGVyVGV4dHVyZScsXG4gICAgICBmb3JtYXQ6IHRoaXMub3B0aW9ucy50YXJnZXRGb3JtYXQsXG4gICAgfSlcblxuICAgIHRoaXMuYWRkVG9TY2VuZSgpXG4gIH1cblxuICAvKipcbiAgICogQWRkIHRoZSB7QGxpbmsgUmVuZGVyVGFyZ2V0fSB0byB0aGUgcmVuZGVyZXIgYW5kIHRoZSB7QGxpbmsgY29yZS9zY2VuZXMvU2NlbmUuU2NlbmUgfCBTY2VuZX1cbiAgICovXG4gIGFkZFRvU2NlbmUoKSB7XG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXJUYXJnZXRzLnB1c2godGhpcylcblxuICAgIGlmICh0aGlzLiNhdXRvUmVuZGVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNjZW5lLmFkZFJlbmRlclRhcmdldCh0aGlzKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgdGhlIHtAbGluayBSZW5kZXJUYXJnZXR9IGZyb20gdGhlIHJlbmRlcmVyIGFuZCB0aGUge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9XG4gICAqL1xuICByZW1vdmVGcm9tU2NlbmUoKSB7XG4gICAgaWYgKHRoaXMuI2F1dG9SZW5kZXIpIHtcbiAgICAgIHRoaXMucmVuZGVyZXIuc2NlbmUucmVtb3ZlUmVuZGVyVGFyZ2V0KHRoaXMpXG4gICAgfVxuXG4gICAgdGhpcy5yZW5kZXJlci5yZW5kZXJUYXJnZXRzID0gdGhpcy5yZW5kZXJlci5yZW5kZXJUYXJnZXRzLmZpbHRlcigocmVuZGVyVGFyZ2V0KSA9PiByZW5kZXJUYXJnZXQudXVpZCAhPT0gdGhpcy51dWlkKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2l6ZSBvdXIge0BsaW5rIHJlbmRlclBhc3N9IGFuZCB7QGxpbmsgcmVuZGVyVGV4dHVyZX1cbiAgICogQHBhcmFtIGJvdW5kaW5nUmVjdCAtIG5ldyB7QGxpbmsgRE9NRWxlbWVudEJvdW5kaW5nUmVjdCB8IGJvdW5kaW5nIHJlY3RhbmdsZX1cbiAgICovXG4gIHJlc2l6ZShib3VuZGluZ1JlY3Q6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3QpIHtcbiAgICAvLyByZXNldCB0aGUgbmV3bHkgY3JlYXRlZCByZW5kZXJlciByZW5kZXIgcGFzcyBkZXB0aCB0ZXh0dXJlXG4gICAgdGhpcy5yZW5kZXJQYXNzLm9wdGlvbnMuZGVwdGhUZXh0dXJlLnRleHR1cmUgPSB0aGlzLnJlbmRlcmVyLnJlbmRlclBhc3MuZGVwdGhUZXh0dXJlLnRleHR1cmVcbiAgICB0aGlzLnJlbmRlclBhc3M/LnJlc2l6ZSgpXG4gICAgdGhpcy5yZW5kZXJUZXh0dXJlPy5yZXNpemUoKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBvdXIge0BsaW5rIFJlbmRlclRhcmdldH0uIEFsaWFzIG9mIHtAbGluayBSZW5kZXJUYXJnZXQjZGVzdHJveX1cbiAgICovXG4gIHJlbW92ZSgpIHtcbiAgICB0aGlzLmRlc3Ryb3koKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgb3VyIHtAbGluayBSZW5kZXJUYXJnZXR9XG4gICAqL1xuICBkZXN0cm95KCkge1xuICAgIC8vIHJlbGVhc2UgbWVzaCBzdHJ1Y3RcbiAgICB0aGlzLnJlbmRlcmVyLm1lc2hlcy5mb3JFYWNoKChtZXNoKSA9PiB7XG4gICAgICBpZiAobWVzaC5yZW5kZXJUYXJnZXQgJiYgbWVzaC5yZW5kZXJUYXJnZXQudXVpZCA9PT0gdGhpcy51dWlkKSB7XG4gICAgICAgIG1lc2guc2V0UmVuZGVyVGFyZ2V0KG51bGwpXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIHJlbGVhc2Ugc2hhZGVyIHBhc3NlcyBzdHJ1Y3RcbiAgICB0aGlzLnJlbmRlcmVyLnNoYWRlclBhc3Nlcy5mb3JFYWNoKChzaGFkZXJQYXNzKSA9PiB7XG4gICAgICBpZiAoc2hhZGVyUGFzcy5yZW5kZXJUYXJnZXQgJiYgc2hhZGVyUGFzcy5yZW5kZXJUYXJnZXQudXVpZCA9PT0gdGhpcy51dWlkKSB7XG4gICAgICAgIC8vIGZvcmNlIHJlbmRlciB0YXJnZXQgdG8gbnVsbCBiZWZvcmUgcmVtb3ZpbmcgLyByZS1hZGRpbmcgdG8gc2NlbmVcbiAgICAgICAgc2hhZGVyUGFzcy5yZW5kZXJUYXJnZXQgPSBudWxsXG4gICAgICAgIHNoYWRlclBhc3Muc2V0UmVuZGVyVGFyZ2V0KG51bGwpXG4gICAgICB9XG4gICAgfSlcblxuICAgIC8vIHJlbW92ZSBmcm9tIHNjZW5lIGFuZCByZW5kZXJlciBhcnJheVxuICAgIHRoaXMucmVtb3ZlRnJvbVNjZW5lKClcblxuICAgIHRoaXMucmVuZGVyUGFzcz8uZGVzdHJveSgpXG4gICAgdGhpcy5yZW5kZXJUZXh0dXJlPy5kZXN0cm95KClcbiAgfVxufVxuIiwiaW1wb3J0IHsgaXNSZW5kZXJlciwgUmVuZGVyZXIgfSBmcm9tICcuLi8uLi9jb3JlL3JlbmRlcmVycy91dGlscydcbmltcG9ydCB7IFJlbmRlclRhcmdldCB9IGZyb20gJy4uLy4uL2NvcmUvcmVuZGVyUGFzc2VzL1JlbmRlclRhcmdldCdcbmltcG9ydCB7IEZ1bGxzY3JlZW5QbGFuZSB9IGZyb20gJy4uLy4uL2NvcmUvbWVzaGVzL0Z1bGxzY3JlZW5QbGFuZSdcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vR1BVQ3VydGFpbnMnXG5pbXBvcnQgeyBSZW5kZXJUZXh0dXJlLCBSZW5kZXJUZXh0dXJlUGFyYW1zIH0gZnJvbSAnLi4vLi4vY29yZS90ZXh0dXJlcy9SZW5kZXJUZXh0dXJlJ1xuaW1wb3J0IHsgTWVzaEJhc2VSZW5kZXJQYXJhbXMgfSBmcm9tICcuLi8uLi9jb3JlL21lc2hlcy9taXhpbnMvTWVzaEJhc2VNaXhpbidcblxuLyoqXG4gKiBVc2VkIHRvIGNyZWF0ZSBhIHNwZWNpYWwgdHlwZSBvZiB7QGxpbmsgRnVsbHNjcmVlblBsYW5lfSB0aGF0IGFsbG93cyB0byB1c2UgdGhlIHByZXZpb3VzIGZyYW1lIGZyYWdtZW50IHNoYWRlciBvdXRwdXQgYXMgYW4gaW5wdXQgdGV4dHVyZS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gc2V0IG91ciBtYWluIEdQVUN1cnRhaW5zIGluc3RhbmNlXG4gKiBjb25zdCBncHVDdXJ0YWlucyA9IG5ldyBHUFVDdXJ0YWlucyh7XG4gKiAgIGNvbnRhaW5lcjogJyNjYW52YXMnIC8vIHNlbGVjdG9yIG9mIG91ciBXZWJHUFUgY2FudmFzIGNvbnRhaW5lclxuICogfSlcbiAqXG4gKiAvLyBzZXQgdGhlIEdQVSBkZXZpY2VcbiAqIC8vIG5vdGUgdGhpcyBpcyBhc3luY2hyb25vdXNcbiAqIGF3YWl0IGdwdUN1cnRhaW5zLnNldERldmljZSgpXG4gKlxuICogLy8gY3JlYXRlIGEgUGluZ1BvbmdQbGFuZVxuICogY29uc3Qgc2hhZGVyUGFzcyA9IG5ldyBQaW5nUG9uZ1BsYW5lKGdwdUN1cnRhaW4sIHtcbiAqICAgbGFiZWw6ICdNeSBwaW5nIHBvbmcgcGxhbmUnLFxuICogICBzaGFkZXJzOiB7XG4gKiAgICAgZnJhZ21lbnQ6IHtcbiAqICAgICAgIGNvZGU6IHBpbmdQb25nQ29kZSwgLy8gYXNzdW1lIGl0IGlzIGEgdmFsaWQgV0dTTCBmcmFnbWVudCBzaGFkZXJcbiAqICAgICB9LFxuICogICB9LFxuICogfSlcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUGluZ1BvbmdQbGFuZSBleHRlbmRzIEZ1bGxzY3JlZW5QbGFuZSB7XG4gIC8qKiB7QGxpbmsgUmVuZGVyVGFyZ2V0fSBjb250ZW50IHRvIHVzZSBhcyBhbiBpbnB1dCAqL1xuICByZW5kZXJUYXJnZXQ6IFJlbmRlclRhcmdldFxuXG4gIC8qKlxuICAgKiBQaW5nUG9uZ1BsYW5lIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSByZW5kZXJlciAtIHtAbGluayBSZW5kZXJlcn0gb2JqZWN0IG9yIHtAbGluayBHUFVDdXJ0YWluc30gY2xhc3Mgb2JqZWN0IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIFBpbmdQb25nUGxhbmV9XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIE1lc2hCYXNlUmVuZGVyUGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBQaW5nUG9uZ1BsYW5lfVxuICAgKi9cbiAgY29uc3RydWN0b3IocmVuZGVyZXI6IFJlbmRlcmVyIHwgR1BVQ3VydGFpbnMsIHBhcmFtZXRlcnMgPSB7fSBhcyBNZXNoQmFzZVJlbmRlclBhcmFtcykge1xuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBSZW5kZXJlcilcblxuICAgIGlzUmVuZGVyZXIocmVuZGVyZXIsIHBhcmFtZXRlcnMubGFiZWwgPyBwYXJhbWV0ZXJzLmxhYmVsICsgJyBQaW5nUG9uZ1BsYW5lJyA6ICdQaW5nUG9uZ1BsYW5lJylcblxuICAgIC8vIHdlIHdpbGwgcmVuZGVyIGludG8gYSBzZXBhcmF0ZSB0ZXh0dXJlXG4gICAgcGFyYW1ldGVycy5yZW5kZXJUYXJnZXQgPSBuZXcgUmVuZGVyVGFyZ2V0KHJlbmRlcmVyLCB7XG4gICAgICBsYWJlbDogcGFyYW1ldGVycy5sYWJlbCA/IHBhcmFtZXRlcnMubGFiZWwgKyAnIHJlbmRlciB0YXJnZXQnIDogJ1BpbmcgUG9uZyByZW5kZXIgdGFyZ2V0JyxcbiAgICAgIGRlcHRoOiBmYWxzZSxcbiAgICAgIC4uLihwYXJhbWV0ZXJzLnRhcmdldEZvcm1hdCAmJiB7IHRhcmdldEZvcm1hdDogcGFyYW1ldGVycy50YXJnZXRGb3JtYXQgfSksXG4gICAgfSlcblxuICAgIC8vIG5vIGJsZW5kaW5nIGFuZCBkZXB0aCBmb3IgcGluZyBwb25nIHBsYW5lc1xuICAgIHBhcmFtZXRlcnMudHJhbnNwYXJlbnQgPSBmYWxzZVxuICAgIHBhcmFtZXRlcnMuZGVwdGggPSBmYWxzZVxuICAgIHBhcmFtZXRlcnMubGFiZWwgPSBwYXJhbWV0ZXJzLmxhYmVsID8/ICdQaW5nUG9uZ1BsYW5lICcgKyByZW5kZXJlci5waW5nUG9uZ1BsYW5lcz8ubGVuZ3RoXG5cbiAgICBzdXBlcihyZW5kZXJlciwgcGFyYW1ldGVycylcblxuICAgIHRoaXMudHlwZSA9ICdQaW5nUG9uZ1BsYW5lJ1xuXG4gICAgdGhpcy5jcmVhdGVSZW5kZXJUZXh0dXJlKHtcbiAgICAgIGxhYmVsOiBwYXJhbWV0ZXJzLmxhYmVsID8gYCR7cGFyYW1ldGVycy5sYWJlbH0gcmVuZGVyIHRleHR1cmVgIDogJ1BpbmdQb25nUGxhbmUgcmVuZGVyIHRleHR1cmUnLFxuICAgICAgbmFtZTogJ3JlbmRlclRleHR1cmUnLFxuICAgICAgLi4uKHBhcmFtZXRlcnMudGFyZ2V0Rm9ybWF0ICYmIHsgZm9ybWF0OiBwYXJhbWV0ZXJzLnRhcmdldEZvcm1hdCB9KSxcbiAgICB9IGFzIFJlbmRlclRleHR1cmVQYXJhbXMpXG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciBtYWluIHtAbGluayBSZW5kZXJUZXh0dXJlfSwgdGhlIG9uZSB0aGF0IGNvbnRhaW5zIG91ciBwaW5nIHBvbmcgY29udGVudFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCByZW5kZXJUZXh0dXJlKCk6IFJlbmRlclRleHR1cmUgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLnJlbmRlclRleHR1cmVzLmZpbmQoKHRleHR1cmUpID0+IHRleHR1cmUub3B0aW9ucy5uYW1lID09PSAncmVuZGVyVGV4dHVyZScpXG4gIH1cblxuICAvKipcbiAgICogQWRkIHRoZSB7QGxpbmsgUGluZ1BvbmdQbGFuZX0gdG8gdGhlIHJlbmRlcmVyIGFuZCB0aGUge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9XG4gICAqL1xuICBhZGRUb1NjZW5lKCkge1xuICAgIHRoaXMucmVuZGVyZXIucGluZ1BvbmdQbGFuZXMucHVzaCh0aGlzKVxuXG4gICAgaWYgKHRoaXMuYXV0b1JlbmRlcikge1xuICAgICAgdGhpcy5yZW5kZXJlci5zY2VuZS5hZGRQaW5nUG9uZ1BsYW5lKHRoaXMpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSB0aGUge0BsaW5rIFBpbmdQb25nUGxhbmV9IGZyb20gdGhlIHJlbmRlcmVyIGFuZCB0aGUge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9XG4gICAqL1xuICByZW1vdmVGcm9tU2NlbmUoKSB7XG4gICAgaWYgKHRoaXMucmVuZGVyVGFyZ2V0KSB7XG4gICAgICB0aGlzLnJlbmRlclRhcmdldC5kZXN0cm95KClcbiAgICB9XG5cbiAgICBpZiAodGhpcy5hdXRvUmVuZGVyKSB7XG4gICAgICB0aGlzLnJlbmRlcmVyLnNjZW5lLnJlbW92ZVBpbmdQb25nUGxhbmUodGhpcylcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlcmVyLnBpbmdQb25nUGxhbmVzID0gdGhpcy5yZW5kZXJlci5waW5nUG9uZ1BsYW5lcy5maWx0ZXIoKHBQUCkgPT4gcFBQLnV1aWQgIT09IHRoaXMudXVpZClcbiAgfVxufVxuIiwiaW1wb3J0IHsgUHJvamVjdGVkT2JqZWN0M0QgfSBmcm9tICcuLi8uLi9jb3JlL29iamVjdHMzRC9Qcm9qZWN0ZWRPYmplY3QzRCdcclxuaW1wb3J0IHsgR1BVQ3VydGFpbnNSZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmVycy9HUFVDdXJ0YWluc1JlbmRlcmVyJ1xyXG5pbXBvcnQgeyBHUFVDdXJ0YWlucyB9IGZyb20gJy4uL0dQVUN1cnRhaW5zJ1xyXG5pbXBvcnQgeyBpc0N1cnRhaW5zUmVuZGVyZXIgfSBmcm9tICcuLi8uLi9jb3JlL3JlbmRlcmVycy91dGlscydcclxuaW1wb3J0IHsgRE9NRWxlbWVudCwgRE9NRWxlbWVudEJvdW5kaW5nUmVjdCwgRE9NRWxlbWVudFBhcmFtcywgRE9NUG9zaXRpb24sIFJlY3RCQm94IH0gZnJvbSAnLi4vLi4vY29yZS9ET00vRE9NRWxlbWVudCdcclxuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjMydcclxuaW1wb3J0IHsgT2JqZWN0M0RUcmFuc2Zvcm1zIH0gZnJvbSAnLi4vLi4vY29yZS9vYmplY3RzM0QvT2JqZWN0M0QnXHJcblxyXG4vKiogRGVmaW5lcyB0aGUge0BsaW5rIERPTU9iamVjdDNEfSBib3VuZGluZyBib3hlcyBpbiBib3RoIGRvY3VtZW50IGFuZCB3b3JsZCBzcGFjZXMgKi9cclxuZXhwb3J0IGludGVyZmFjZSBET01PYmplY3QzRFNpemUge1xyXG4gIC8qKiBUaGUge0BsaW5rIERPTU9iamVjdDNEfSBib3VuZGluZyBib3ggaW4gd29ybGQgc3BhY2UgKi9cclxuICB3b3JsZDogUmVjdEJCb3hcclxuICAvKiogVGhlIHtAbGluayBET01PYmplY3QzRH0gYm91bmRpbmcgYm94IGluIGRvY3VtZW50IHNwYWNlICovXHJcbiAgZG9jdW1lbnQ6IFJlY3RCQm94XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBEZWZpbmVzIGFsbCBuZWNlc3Nhcnkge0BsaW5rIFZlYzMgfCB2ZWN0b3JzfS97QGxpbmsgbWF0aC9RdWF0LlF1YXQgfCBxdWF0ZXJuaW9uc30gdG8gY29tcHV0ZSBhIDNEIHtAbGluayBtYXRoL01hdDQuTWF0NCB8IG1vZGVsIG1hdHJpeH0gYmFzZWQgb24gYSBET00ge0BsaW5rIEhUTUxFbGVtZW50fVxyXG4gKi9cclxuZXhwb3J0IGludGVyZmFjZSBET01PYmplY3QzRFRyYW5zZm9ybXMgZXh0ZW5kcyBPbWl0PE9iamVjdDNEVHJhbnNmb3JtcywgJ29yaWdpbicgfCAncG9zaXRpb24nPiB7XHJcbiAgLyoqIFRyYW5zZm9ybWF0aW9uIG9yaWdpbiBvYmplY3QgKi9cclxuICBvcmlnaW46IHtcclxuICAgIC8qKiBUcmFuc2Zvcm1hdGlvbiBvcmlnaW4ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHJlbGF0aXZlIHRvIHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9ICovXHJcbiAgICBtb2RlbDogVmVjM1xyXG4gICAgLyoqIFRyYW5zZm9ybWF0aW9uIG9yaWdpbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gcmVsYXRpdmUgdG8gdGhlIDNEIHdvcmxkICovXHJcbiAgICB3b3JsZDogVmVjM1xyXG4gIH1cclxuICAvKiogUG9zaXRpb24gb2JqZWN0ICovXHJcbiAgcG9zaXRpb246IHtcclxuICAgIC8qKiBQb3NpdGlvbiB7QGxpbmsgVmVjMyB8IHZlY3Rvcn0gcmVsYXRpdmUgdG8gdGhlIDNEIHdvcmxkICovXHJcbiAgICB3b3JsZDogVmVjM1xyXG4gICAgLyoqIEFkZGl0aW9uYWwgdHJhbnNsYXRpb24ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHJlbGF0aXZlIHRvIHRoZSBET00gZG9jdW1lbnQgKi9cclxuICAgIGRvY3VtZW50OiBWZWMzXHJcbiAgfVxyXG59XHJcblxyXG4vKipcclxuICogUGFyYW1ldGVycyB1c2VkIHRvIGNyZWF0ZSBhIHtAbGluayBET01PYmplY3QzRH1cclxuICovXHJcbmV4cG9ydCBpbnRlcmZhY2UgRE9NT2JqZWN0M0RQYXJhbXMge1xyXG4gIC8qKiBXaGV0aGVyIHRvIGF1dG9tYXRpY2FsbHkgdXBkYXRlIHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9IGRvY3VtZW50IGFuZCB3b3JsZCBwb3NpdGlvbnMgb24gc2Nyb2xsICovXHJcbiAgd2F0Y2hTY3JvbGw/OiBib29sZWFuXHJcbn1cclxuXHJcbi8qKlxyXG4gKiBUaGlzIHNwZWNpYWwga2luZCBvZiB7QGxpbmsgUHJvamVjdGVkT2JqZWN0M0R9IHVzZXMgYW4ge0BsaW5rIEhUTUxFbGVtZW50fSB0byBjb252ZXJ0IHRoZSBjb3JyZXNwb25kaW5nIFggYW5kIFkge0BsaW5rIERPTU9iamVjdDNEI3NjYWxlIHwgc2NhbGV9IGFuZCB7QGxpbmsgRE9NT2JqZWN0M0QjcG9zaXRpb24gfCBwb3NpdGlvbn0gcmVsYXRpdmUgdG8gdGhlIDNEIHdvcmxkIHNwYWNlLlxyXG4gKlxyXG4gKiBJbnRlcm5hbGx5IHVzZWQgYnkgdGhlIHtAbGluayBjdXJ0YWlucy9tZXNoZXMvRE9NTWVzaC5ET01NZXNoIHwgRE9NTWVzaH0gYW5kIHtAbGluayBjdXJ0YWlucy9tZXNoZXMvUGxhbmUuUGxhbmUgfCBQbGFuZX1cclxuICovXHJcbmV4cG9ydCBjbGFzcyBET01PYmplY3QzRCBleHRlbmRzIFByb2plY3RlZE9iamVjdDNEIHtcclxuICAvKioge0BsaW5rIEdQVUN1cnRhaW5zUmVuZGVyZXJ9IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIERPTU9iamVjdDNEfSAqL1xyXG4gIHJlbmRlcmVyOiBHUFVDdXJ0YWluc1JlbmRlcmVyXHJcblxyXG4gIC8qKiBEZWZpbmVzIHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9IGJvdW5kaW5nIGJveGVzIGluIGJvdGggZG9jdW1lbnQgYW5kIHdvcmxkIHNwYWNlcyAqL1xyXG4gIHNpemU6IERPTU9iamVjdDNEU2l6ZVxyXG4gIC8qKiB7QGxpbmsgRE9NRWxlbWVudH0gdXNlZCB0byB0cmFjayB0aGUgZ2l2ZW4ge0BsaW5rIEhUTUxFbGVtZW50fSBzaXplIGNoYW5nZSAqL1xyXG4gIGRvbUVsZW1lbnQ6IERPTUVsZW1lbnRcclxuXHJcbiAgLyoqIFdoZXRoZXIgdG8gYXV0b21hdGljYWxseSB1cGRhdGUgdGhlIHtAbGluayBET01PYmplY3QzRH0gZG9jdW1lbnQgYW5kIHdvcmxkIHBvc2l0aW9ucyBvbiBzY3JvbGwgKi9cclxuICB3YXRjaFNjcm9sbDogYm9vbGVhblxyXG5cclxuICAvKioge0BsaW5rIERPTU9iamVjdDNEVHJhbnNmb3JtcyB8IFRyYW5zZm9ybWF0aW9uIG9iamVjdH0gb2YgdGhlIHtAbGluayBET01PYmplY3QzRH0gKi9cclxuICB0cmFuc2Zvcm1zOiBET01PYmplY3QzRFRyYW5zZm9ybXNcclxuXHJcbiAgLyoqIFByaXZhdGUge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHVzZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgYWN0dWFsIHtAbGluayBET01PYmplY3QzRFRyYW5zZm9ybXMjcG9zaXRpb24ud29ybGQgfCB3b3JsZCBwb3NpdGlvbn0gYWNjb3VudGluZyB0aGUge0BsaW5rIERPTU9iamVjdDNEVHJhbnNmb3JtcyNwb3NpdGlvbi5kb2N1bWVudCB8IGFkZGl0aW9uYWwgZG9jdW1lbnQgdHJhbnNsYXRpb259IGNvbnZlcnRlZCBpbnRvIHdvcmxkIHNwYWNlICovXHJcbiAgI0RPTU9iamVjdFdvcmxkUG9zaXRpb246IFZlYzMgPSBuZXcgVmVjMygpXHJcbiAgLyoqIFByaXZhdGUge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHVzZWQgdG8ga2VlcCB0cmFjayBvZiB0aGUgYWN0dWFsIHtAbGluayBET01PYmplY3QzRH0gd29ybGQgc2NhbGUgYWNjb3VudGluZyB0aGUge0BsaW5rIERPTU9iamVjdDNEI3NpemUud29ybGQgfCBET01PYmplY3QzRCB3b3JsZCBzaXplfSAqL1xyXG4gICNET01PYmplY3RXb3JsZFNjYWxlOiBWZWMzID0gbmV3IFZlYzMoKVxyXG5cclxuICAvKipcclxuICAgKiBET01PYmplY3QzRCBjb25zdHJ1Y3RvclxyXG4gICAqIEBwYXJhbSByZW5kZXJlciAtIHtAbGluayBHUFVDdXJ0YWluc1JlbmRlcmVyfSBvYmplY3Qgb3Ige0BsaW5rIEdQVUN1cnRhaW5zfSBjbGFzcyBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgRE9NT2JqZWN0M0R9XHJcbiAgICogQHBhcmFtIGVsZW1lbnQgLSB7QGxpbmsgSFRNTEVsZW1lbnR9IG9yIHN0cmluZyByZXByZXNlbnRpbmcgYW4ge0BsaW5rIEhUTUxFbGVtZW50fSBzZWxlY3RvciB1c2VkIHRvIHNjYWxlIGFuZCBwb3NpdGlvbiB0aGUge0BsaW5rIERPTU9iamVjdDNEfVxyXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIERPTU9iamVjdDNEUGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgRE9NT2JqZWN0M0R9XHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICByZW5kZXJlcjogR1BVQ3VydGFpbnNSZW5kZXJlciB8IEdQVUN1cnRhaW5zLFxyXG4gICAgZWxlbWVudDogRE9NRWxlbWVudFBhcmFtc1snZWxlbWVudCddLFxyXG4gICAgcGFyYW1ldGVyczogRE9NT2JqZWN0M0RQYXJhbXNcclxuICApIHtcclxuICAgIHN1cGVyKHJlbmRlcmVyKVxyXG5cclxuICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XHJcbiAgICByZW5kZXJlciA9IChyZW5kZXJlciAmJiAocmVuZGVyZXIgYXMgR1BVQ3VydGFpbnMpLnJlbmRlcmVyKSB8fCAocmVuZGVyZXIgYXMgR1BVQ3VydGFpbnNSZW5kZXJlcilcclxuXHJcbiAgICBpc0N1cnRhaW5zUmVuZGVyZXIocmVuZGVyZXIsICdET00zRE9iamVjdCcpXHJcblxyXG4gICAgdGhpcy5yZW5kZXJlciA9IHJlbmRlcmVyXHJcblxyXG4gICAgdGhpcy5zaXplID0ge1xyXG4gICAgICB3b3JsZDoge1xyXG4gICAgICAgIHdpZHRoOiAwLFxyXG4gICAgICAgIGhlaWdodDogMCxcclxuICAgICAgICB0b3A6IDAsXHJcbiAgICAgICAgbGVmdDogMCxcclxuICAgICAgfSxcclxuICAgICAgZG9jdW1lbnQ6IHtcclxuICAgICAgICB3aWR0aDogMCxcclxuICAgICAgICBoZWlnaHQ6IDAsXHJcbiAgICAgICAgdG9wOiAwLFxyXG4gICAgICAgIGxlZnQ6IDAsXHJcbiAgICAgIH0sXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy53YXRjaFNjcm9sbCA9IHBhcmFtZXRlcnMud2F0Y2hTY3JvbGxcclxuXHJcbiAgICB0aGlzLmNhbWVyYSA9IHRoaXMucmVuZGVyZXIuY2FtZXJhXHJcblxyXG4gICAgdGhpcy5zZXRET01FbGVtZW50KGVsZW1lbnQpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHtAbGluayBkb21FbGVtZW50IHwgRE9NIEVsZW1lbnR9XHJcbiAgICogQHBhcmFtIGVsZW1lbnQgLSB7QGxpbmsgSFRNTEVsZW1lbnR9IG9yIHN0cmluZyByZXByZXNlbnRpbmcgYW4ge0BsaW5rIEhUTUxFbGVtZW50fSBzZWxlY3RvciB0byB1c2VcclxuICAgKi9cclxuICBzZXRET01FbGVtZW50KGVsZW1lbnQ6IERPTUVsZW1lbnRQYXJhbXNbJ2VsZW1lbnQnXSkge1xyXG4gICAgdGhpcy5kb21FbGVtZW50ID0gbmV3IERPTUVsZW1lbnQoe1xyXG4gICAgICBlbGVtZW50LFxyXG4gICAgICBvblNpemVDaGFuZ2VkOiAoYm91bmRpbmdSZWN0KSA9PiB0aGlzLnJlc2l6ZShib3VuZGluZ1JlY3QpLFxyXG4gICAgICBvblBvc2l0aW9uQ2hhbmdlZDogKGJvdW5kaW5nUmVjdCkgPT4gdGhpcy5vblBvc2l0aW9uQ2hhbmdlZChib3VuZGluZ1JlY3QpLFxyXG4gICAgfSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFVwZGF0ZSBzaXplIGFuZCBwb3NpdGlvbiB3aGVuIHRoZSB7QGxpbmsgZG9tRWxlbWVudCB8IERPTSBFbGVtZW50fSBwb3NpdGlvbiBjaGFuZ2VkXHJcbiAgICogQHBhcmFtIGJvdW5kaW5nUmVjdCAtIHRoZSBuZXcgYm91bmRpbmcgcmVjdGFuZ2xlXHJcbiAgICovXHJcbiAgb25Qb3NpdGlvbkNoYW5nZWQoYm91bmRpbmdSZWN0PzogRE9NRWxlbWVudEJvdW5kaW5nUmVjdCB8IG51bGwpIHtcclxuICAgIGlmICh0aGlzLndhdGNoU2Nyb2xsKSB7XHJcbiAgICAgIHRoaXMuc2l6ZS5kb2N1bWVudCA9IGJvdW5kaW5nUmVjdCA/PyB0aGlzLmRvbUVsZW1lbnQuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxyXG4gICAgICB0aGlzLnVwZGF0ZVNpemVBbmRQb3NpdGlvbigpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXNldCB0aGUge0BsaW5rIGRvbUVsZW1lbnQgfCBET01FbGVtZW50fVxyXG4gICAqIEBwYXJhbSBlbGVtZW50IC0gdGhlIG5ldyB7QGxpbmsgSFRNTEVsZW1lbnR9IG9yIHN0cmluZyByZXByZXNlbnRpbmcgYW4ge0BsaW5rIEhUTUxFbGVtZW50fSBzZWxlY3RvciB0byB1c2VcclxuICAgKi9cclxuICByZXNldERPTUVsZW1lbnQoZWxlbWVudDogc3RyaW5nIHwgSFRNTEVsZW1lbnQpIHtcclxuICAgIGlmICh0aGlzLmRvbUVsZW1lbnQpIHtcclxuICAgICAgdGhpcy5kb21FbGVtZW50LmRlc3Ryb3koKVxyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc2V0RE9NRWxlbWVudChlbGVtZW50KVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlIHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9IHNpemVzIGFuZCBwb3NpdGlvblxyXG4gICAqL1xyXG4gIHVwZGF0ZVNpemVBbmRQb3NpdGlvbigpIHtcclxuICAgIHRoaXMuc2V0V29ybGRTaXplcygpXHJcbiAgICB0aGlzLmFwcGx5UG9zaXRpb24oKVxyXG5cclxuICAgIHRoaXMuc2hvdWxkVXBkYXRlTW9kZWxNYXRyaXgoKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlIHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9IHNpemVzLCBwb3NpdGlvbiBhbmQgcHJvamVjdGlvblxyXG4gICAqL1xyXG4gIHNob3VsZFVwZGF0ZU1hdHJpeFN0YWNrKCkge1xyXG4gICAgdGhpcy51cGRhdGVTaXplQW5kUG9zaXRpb24oKVxyXG5cclxuICAgIHN1cGVyLnNob3VsZFVwZGF0ZU1hdHJpeFN0YWNrKClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2l6ZSB0aGUge0BsaW5rIERPTU9iamVjdDNEfVxyXG4gICAqIEBwYXJhbSBib3VuZGluZ1JlY3QgLSBuZXcge0BsaW5rIGRvbUVsZW1lbnQgfCBET00gRWxlbWVudH0ge0BsaW5rIERPTUVsZW1lbnQjYm91bmRpbmdSZWN0IHwgYm91bmRpbmcgcmVjdGFuZ2xlfVxyXG4gICAqL1xyXG4gIHJlc2l6ZShib3VuZGluZ1JlY3Q/OiBET01FbGVtZW50Qm91bmRpbmdSZWN0IHwgbnVsbCkge1xyXG4gICAgaWYgKCFib3VuZGluZ1JlY3QgJiYgKCF0aGlzLmRvbUVsZW1lbnQgfHwgdGhpcy5kb21FbGVtZW50Py5pc1Jlc2l6aW5nKSkgcmV0dXJuXHJcblxyXG4gICAgdGhpcy5zaXplLmRvY3VtZW50ID0gYm91bmRpbmdSZWN0ID8/IHRoaXMuZG9tRWxlbWVudC5lbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpXHJcbiAgICB0aGlzLnNob3VsZFVwZGF0ZU1hdHJpeFN0YWNrKClcclxuICB9XHJcblxyXG4gIC8qIEJPVU5ESU5HIEJPWEVTIEdFVFRFUlMgKi9cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSB7QGxpbmsgZG9tRWxlbWVudCB8IERPTSBFbGVtZW50fSB7QGxpbmsgRE9NRWxlbWVudCNib3VuZGluZ1JlY3QgfCBib3VuZGluZyByZWN0YW5nbGV9XHJcbiAgICogQHJlYWRvbmx5XHJcbiAgICovXHJcbiAgZ2V0IGJvdW5kaW5nUmVjdCgpOiBET01FbGVtZW50Qm91bmRpbmdSZWN0IHtcclxuICAgIHJldHVybiB0aGlzLmRvbUVsZW1lbnQuYm91bmRpbmdSZWN0XHJcbiAgfVxyXG5cclxuICAvKiBUUkFOU0ZPTVMgKi9cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IG91ciB0cmFuc2Zvcm1zIHByb3BlcnRpZXMgYW5kIHtAbGluayBWZWMzI29uQ2hhbmdlIHwgb25DaGFuZ2UgdmVjdG9yfSBjYWxsYmFja3NcclxuICAgKi9cclxuICBzZXRUcmFuc2Zvcm1zKCkge1xyXG4gICAgc3VwZXIuc2V0VHJhbnNmb3JtcygpXHJcblxyXG4gICAgLy8gcmVzZXQgb3VyIG1vZGVsIHRyYW5zZm9ybSBvcmlnaW4gdG8gcmVmbGVjdCBDU1MgdHJhbnNmb3JtIG9yaWdpbnNcclxuICAgIHRoaXMudHJhbnNmb3Jtcy5vcmlnaW4ubW9kZWwuc2V0KDAuNSwgMC41LCAwKVxyXG5cclxuICAgIHRoaXMudHJhbnNmb3Jtcy5vcmlnaW4ud29ybGQgPSBuZXcgVmVjMygpXHJcbiAgICB0aGlzLnRyYW5zZm9ybXMucG9zaXRpb24uZG9jdW1lbnQgPSBuZXcgVmVjMygpXHJcblxyXG4gICAgdGhpcy5kb2N1bWVudFBvc2l0aW9uLm9uQ2hhbmdlKCgpID0+IHRoaXMuYXBwbHlQb3NpdGlvbigpKVxyXG4gICAgdGhpcy50cmFuc2Zvcm1PcmlnaW4ub25DaGFuZ2UoKCkgPT4gdGhpcy5zZXRXb3JsZFRyYW5zZm9ybU9yaWdpbigpKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSB7QGxpbmsgRE9NT2JqZWN0M0RUcmFuc2Zvcm1zI3Bvc2l0aW9uLmRvY3VtZW50IHwgYWRkaXRpb25hbCB0cmFuc2xhdGlvbiByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnR9XHJcbiAgICovXHJcbiAgZ2V0IGRvY3VtZW50UG9zaXRpb24oKTogVmVjMyB7XHJcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1zLnBvc2l0aW9uLmRvY3VtZW50XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHtAbGluayBET01PYmplY3QzRFRyYW5zZm9ybXMjcG9zaXRpb24uZG9jdW1lbnQgfCBhZGRpdGlvbmFsIHRyYW5zbGF0aW9uIHJlbGF0aXZlIHRvIHRoZSBkb2N1bWVudH1cclxuICAgKiBAcGFyYW0gdmFsdWUgLSBhZGRpdGlvbmFsIHRyYW5zbGF0aW9uIHJlbGF0aXZlIHRvIHRoZSBkb2N1bWVudCB0byBhcHBseVxyXG4gICAqL1xyXG4gIHNldCBkb2N1bWVudFBvc2l0aW9uKHZhbHVlOiBWZWMzKSB7XHJcbiAgICB0aGlzLnRyYW5zZm9ybXMucG9zaXRpb24uZG9jdW1lbnQgPSB2YWx1ZVxyXG4gICAgdGhpcy5hcHBseVBvc2l0aW9uKClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUge0BsaW5rIGRvbUVsZW1lbnQgfCBET00gZWxlbWVudH0gc2NhbGUgaW4gd29ybGQgc3BhY2VcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKi9cclxuICBnZXQgRE9NT2JqZWN0V29ybGRTY2FsZSgpOiBWZWMzIHtcclxuICAgIHJldHVybiB0aGlzLiNET01PYmplY3RXb3JsZFNjYWxlLmNsb25lKClcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUge0BsaW5rIERPTU9iamVjdDNEfSBzY2FsZSBpbiB3b3JsZCBzcGFjZSAoYWNjb3VudGluZyBmb3Ige0BsaW5rIHNjYWxlfSlcclxuICAgKiBAcmVhZG9ubHlcclxuICAgKi9cclxuICBnZXQgd29ybGRTY2FsZSgpOiBWZWMzIHtcclxuICAgIHJldHVybiB0aGlzLkRPTU9iamVjdFdvcmxkU2NhbGUubXVsdGlwbHkodGhpcy5zY2FsZSlcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEdldCB0aGUge0BsaW5rIERPTU9iamVjdDNEfSBwb3NpdGlvbiBpbiB3b3JsZCBzcGFjZVxyXG4gICAqIEByZWFkb25seVxyXG4gICAqL1xyXG4gIGdldCB3b3JsZFBvc2l0aW9uKCk6IFZlYzMge1xyXG4gICAgcmV0dXJuIHRoaXMuI0RPTU9iamVjdFdvcmxkUG9zaXRpb24uY2xvbmUoKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9IHRyYW5zZm9ybSBvcmlnaW4gcmVsYXRpdmUgdG8gdGhlIHtAbGluayBET01PYmplY3QzRH1cclxuICAgKi9cclxuICBnZXQgdHJhbnNmb3JtT3JpZ2luKCk6IFZlYzMge1xyXG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3Jtcy5vcmlnaW4ubW9kZWxcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldCB0aGUge0BsaW5rIERPTU9iamVjdDNEfSB0cmFuc2Zvcm0gb3JpZ2luIHJlbGF0aXZlIHRvIHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9XHJcbiAgICogQHBhcmFtIHZhbHVlIC0gbmV3IHRyYW5zZm9ybSBvcmlnaW5cclxuICAgKi9cclxuICBzZXQgdHJhbnNmb3JtT3JpZ2luKHZhbHVlOiBWZWMzKSB7XHJcbiAgICB0aGlzLnRyYW5zZm9ybXMub3JpZ2luLm1vZGVsID0gdmFsdWVcclxuICAgIHRoaXMuc2V0V29ybGRUcmFuc2Zvcm1PcmlnaW4oKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogR2V0IHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9IHRyYW5zZm9ybSBvcmlnaW4gaW4gd29ybGQgc3BhY2VcclxuICAgKi9cclxuICBnZXQgd29ybGRUcmFuc2Zvcm1PcmlnaW4oKTogVmVjMyB7XHJcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1zLm9yaWdpbi53b3JsZFxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2V0IHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9IHRyYW5zZm9ybSBvcmlnaW4gaW4gd29ybGQgc3BhY2VcclxuICAgKiBAcGFyYW0gdmFsdWUgLSBuZXcgd29ybGQgc3BhY2UgdHJhbnNmb3JtIG9yaWdpblxyXG4gICAqL1xyXG4gIHNldCB3b3JsZFRyYW5zZm9ybU9yaWdpbih2YWx1ZTogVmVjMykge1xyXG4gICAgdGhpcy50cmFuc2Zvcm1zLm9yaWdpbi53b3JsZCA9IHZhbHVlXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHtAbGluayBET01PYmplY3QzRH0gd29ybGQgcG9zaXRpb24gdXNpbmcgaXRzIHdvcmxkIHBvc2l0aW9uIGFuZCBkb2N1bWVudCB0cmFuc2xhdGlvbiBjb252ZXJ0ZWQgdG8gd29ybGQgc3BhY2VcclxuICAgKi9cclxuICBhcHBseVBvc2l0aW9uKCkge1xyXG4gICAgdGhpcy5hcHBseURvY3VtZW50UG9zaXRpb24oKVxyXG4gICAgc3VwZXIuYXBwbHlQb3NpdGlvbigpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb21wdXRlIHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9IHdvcmxkIHBvc2l0aW9uIHVzaW5nIGl0cyB3b3JsZCBwb3NpdGlvbiBhbmQgZG9jdW1lbnQgdHJhbnNsYXRpb24gY29udmVydGVkIHRvIHdvcmxkIHNwYWNlXHJcbiAgICovXHJcbiAgYXBwbHlEb2N1bWVudFBvc2l0aW9uKCkge1xyXG4gICAgLy8gYXZvaWQgdW5uZWNlc3NhcnkgY2FsY3VsYXRpb25zIGlmIHdlIGRvbid0IGhhdmUgYSB1c2VycyBzZXQgcmVsYXRpdmUgcG9zaXRpb25cclxuICAgIGxldCB3b3JsZFBvc2l0aW9uID0gbmV3IFZlYzMoMCwgMCwgMClcclxuICAgIGlmICghdGhpcy5kb2N1bWVudFBvc2l0aW9uLmVxdWFscyh3b3JsZFBvc2l0aW9uKSkge1xyXG4gICAgICB3b3JsZFBvc2l0aW9uID0gdGhpcy5kb2N1bWVudFRvV29ybGRTcGFjZSh0aGlzLmRvY3VtZW50UG9zaXRpb24pXHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy4jRE9NT2JqZWN0V29ybGRQb3NpdGlvbi5zZXQoXHJcbiAgICAgIHRoaXMucG9zaXRpb24ueCArIHRoaXMuc2l6ZS53b3JsZC5sZWZ0ICsgd29ybGRQb3NpdGlvbi54LFxyXG4gICAgICB0aGlzLnBvc2l0aW9uLnkgKyB0aGlzLnNpemUud29ybGQudG9wICsgd29ybGRQb3NpdGlvbi55LFxyXG4gICAgICB0aGlzLnBvc2l0aW9uLnogKyB0aGlzLmRvY3VtZW50UG9zaXRpb24ueiAvIHRoaXMuY2FtZXJhLkNTU1BlcnNwZWN0aXZlXHJcbiAgICApXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBcHBseSB0aGUgdHJhbnNmb3JtIG9yaWdpbiBhbmQgc2V0IHRoZSB7QGxpbmsgRE9NT2JqZWN0M0R9IHdvcmxkIHRyYW5zZm9ybSBvcmlnaW5cclxuICAgKi9cclxuICBhcHBseVRyYW5zZm9ybU9yaWdpbigpIHtcclxuICAgIGlmICghdGhpcy5zaXplKSByZXR1cm5cclxuXHJcbiAgICB0aGlzLnNldFdvcmxkVHJhbnNmb3JtT3JpZ2luKClcclxuXHJcbiAgICBzdXBlci5hcHBseVRyYW5zZm9ybU9yaWdpbigpXHJcbiAgfVxyXG5cclxuICAvKiBNQVRSSUNFUyAqL1xyXG5cclxuICAvKipcclxuICAgKiBVcGRhdGUgdGhlIHtAbGluayBtb2RlbE1hdHJpeCB8IG1vZGVsIG1hdHJpeH0gYWNjb3VudGluZyB0aGUge0BsaW5rIERPTU9iamVjdDNEfSB3b3JsZCBwb3NpdGlvbiBhbmQge0BsaW5rIERPTU9iamVjdDNEfSB3b3JsZCBzY2FsZVxyXG4gICAqL1xyXG4gIHVwZGF0ZU1vZGVsTWF0cml4KCkge1xyXG4gICAgLy8gb3ZlcnJpZGUgZm9yIHRoaXMgc3BlY2lhbCBjYXNlXHJcbiAgICAvLyBjb21wb3NlIG91ciBtb2RlbCB0cmFuc2Zvcm1hdGlvbiBtYXRyaXggZnJvbSBjdXN0b20gb3JpZ2luXHJcbiAgICB0aGlzLm1vZGVsTWF0cml4LmNvbXBvc2VGcm9tT3JpZ2luKFxyXG4gICAgICB0aGlzLiNET01PYmplY3RXb3JsZFBvc2l0aW9uLFxyXG4gICAgICB0aGlzLnF1YXRlcm5pb24sXHJcbiAgICAgIHRoaXMuc2NhbGUsXHJcbiAgICAgIHRoaXMud29ybGRUcmFuc2Zvcm1PcmlnaW5cclxuICAgIClcclxuXHJcbiAgICAvLyB3ZSBuZWVkIHRvIHNjYWxlIG91ciBtZXNoZXMsIGZyb20gYSBzcXVhcmUgdG8gYSByaWdodCBzaXplZCByZWN0YW5nbGVcclxuICAgIC8vIHdlJ3JlIGRvaW5nIHRoaXMgYWZ0ZXIgb3VyIHRyYW5zZm9ybWF0aW9uIG1hdHJpeCBiZWNhdXNlIHRoaXMgc2NhbGUgdHJhbnNmb3JtYXRpb24gYWx3YXlzIGhhdmUgdGhlIHNhbWUgb3JpZ2luXHJcbiAgICB0aGlzLm1vZGVsTWF0cml4LnNjYWxlKHRoaXMuI0RPTU9iamVjdFdvcmxkU2NhbGUpXHJcblxyXG4gICAgdGhpcy5zaG91bGRVcGRhdGVXb3JsZE1hdHJpeCgpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDb252ZXJ0IGEgZG9jdW1lbnQgcG9zaXRpb24ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9IHRvIGEgd29ybGQgcG9zaXRpb24ge0BsaW5rIFZlYzMgfCB2ZWN0b3J9XHJcbiAgICogQHBhcmFtIHZlY3RvciAtIGRvY3VtZW50IHBvc2l0aW9uIHtAbGluayBWZWMzIHwgdmVjdG9yfSBjb252ZXJ0ZWQgdG8gd29ybGQgc3BhY2VcclxuICAgKi9cclxuICBkb2N1bWVudFRvV29ybGRTcGFjZSh2ZWN0b3I6IFZlYzMgPSBuZXcgVmVjMygpKTogVmVjMyB7XHJcbiAgICByZXR1cm4gbmV3IFZlYzMoXHJcbiAgICAgICgodmVjdG9yLnggKiB0aGlzLnJlbmRlcmVyLnBpeGVsUmF0aW8pIC8gdGhpcy5yZW5kZXJlci5ib3VuZGluZ1JlY3Qud2lkdGgpICogdGhpcy5jYW1lcmEuc2NyZWVuUmF0aW8ud2lkdGgsXHJcbiAgICAgIC0oKHZlY3Rvci55ICogdGhpcy5yZW5kZXJlci5waXhlbFJhdGlvKSAvIHRoaXMucmVuZGVyZXIuYm91bmRpbmdSZWN0LmhlaWdodCkgKiB0aGlzLmNhbWVyYS5zY3JlZW5SYXRpby5oZWlnaHQsXHJcbiAgICAgIHZlY3Rvci56XHJcbiAgICApXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHtAbGluayBET01PYmplY3QzRCNzaXplLndvcmxkIHwgd29ybGQgc2l6ZX0gYW5kIHNldCB0aGUge0BsaW5rIERPTU9iamVjdDNEfSB3b3JsZCB0cmFuc2Zvcm0gb3JpZ2luXHJcbiAgICovXHJcbiAgc2V0V29ybGRTaXplcygpIHtcclxuICAgIGNvbnN0IGNvbnRhaW5lckJvdW5kaW5nUmVjdCA9IHRoaXMucmVuZGVyZXIuYm91bmRpbmdSZWN0XHJcblxyXG4gICAgLy8gZGltZW5zaW9ucyBhbmQgcG9zaXRpb25zIG9mIG91ciBwbGFuZSBpbiB0aGUgZG9jdW1lbnQgYW5kIGNsaXAgc3BhY2VzXHJcbiAgICAvLyBkb24ndCBmb3JnZXQgcG9zaXRpb25zIGluIHdlYmdsIHNwYWNlIGFyZSByZWZlcnJpbmcgdG8gdGhlIGNlbnRlciBvZiBvdXIgcGxhbmUgYW5kIGNhbnZhc1xyXG4gICAgY29uc3QgcGxhbmVDZW50ZXIgPSB7XHJcbiAgICAgIHg6IHRoaXMuc2l6ZS5kb2N1bWVudC53aWR0aCAvIDIgKyB0aGlzLnNpemUuZG9jdW1lbnQubGVmdCxcclxuICAgICAgeTogdGhpcy5zaXplLmRvY3VtZW50LmhlaWdodCAvIDIgKyB0aGlzLnNpemUuZG9jdW1lbnQudG9wLFxyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvbnRhaW5lckNlbnRlciA9IHtcclxuICAgICAgeDogY29udGFpbmVyQm91bmRpbmdSZWN0LndpZHRoIC8gMiArIGNvbnRhaW5lckJvdW5kaW5nUmVjdC5sZWZ0LFxyXG4gICAgICB5OiBjb250YWluZXJCb3VuZGluZ1JlY3QuaGVpZ2h0IC8gMiArIGNvbnRhaW5lckJvdW5kaW5nUmVjdC50b3AsXHJcbiAgICB9XHJcblxyXG4gICAgLy8gb3VyIERPTSBvYmplY3Qgd29ybGQgc2l6ZVxyXG4gICAgLy8gc2luY2Ugb3VyIHZlcnRpY2VzIHZhbHVlcyByYW5nZSBmcm9tIC0xIHRvIDEsIHdlIG5lZWQgdG8gc2NhbGUgaXQgcmVsYXRpdmVseSB0byBvdXIgY2FudmFzXHJcbiAgICAvLyB0byBkaXNwbGF5IGFuIGFjY3VyYXRlbHkgc2l6ZWQgb2JqZWN0XHJcbiAgICB0aGlzLnNpemUud29ybGQgPSB7XHJcbiAgICAgIHdpZHRoOiAoKHRoaXMuc2l6ZS5kb2N1bWVudC53aWR0aCAvIGNvbnRhaW5lckJvdW5kaW5nUmVjdC53aWR0aCkgKiB0aGlzLmNhbWVyYS5zY3JlZW5SYXRpby53aWR0aCkgLyAyLFxyXG4gICAgICBoZWlnaHQ6ICgodGhpcy5zaXplLmRvY3VtZW50LmhlaWdodCAvIGNvbnRhaW5lckJvdW5kaW5nUmVjdC5oZWlnaHQpICogdGhpcy5jYW1lcmEuc2NyZWVuUmF0aW8uaGVpZ2h0KSAvIDIsXHJcbiAgICAgIHRvcDogKChjb250YWluZXJDZW50ZXIueSAtIHBsYW5lQ2VudGVyLnkpIC8gY29udGFpbmVyQm91bmRpbmdSZWN0LmhlaWdodCkgKiB0aGlzLmNhbWVyYS5zY3JlZW5SYXRpby5oZWlnaHQsXHJcbiAgICAgIGxlZnQ6ICgocGxhbmVDZW50ZXIueCAtIGNvbnRhaW5lckNlbnRlci54KSAvIGNvbnRhaW5lckJvdW5kaW5nUmVjdC53aWR0aCkgKiB0aGlzLmNhbWVyYS5zY3JlZW5SYXRpby53aWR0aCxcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLiNET01PYmplY3RXb3JsZFNjYWxlLnNldCh0aGlzLnNpemUud29ybGQud2lkdGgsIHRoaXMuc2l6ZS53b3JsZC5oZWlnaHQsIDEpXHJcblxyXG4gICAgdGhpcy5zZXRXb3JsZFRyYW5zZm9ybU9yaWdpbigpXHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXQgdGhlIHtAbGluayBET01PYmplY3QzRH0gd29ybGQgdHJhbnNmb3JtIG9yaWdpbiBhbmQgdGVsbCB0aGUgbWF0cmljZXMgdG8gdXBkYXRlXHJcbiAgICovXHJcbiAgc2V0V29ybGRUcmFuc2Zvcm1PcmlnaW4oKSB7XHJcbiAgICAvLyBzZXQgdHJhbnNmb3JtYXRpb24gb3JpZ2luIHJlbGF0aXZlIHRvIHdvcmxkIHNwYWNlIGFzIHdlbGxcclxuICAgIHRoaXMudHJhbnNmb3Jtcy5vcmlnaW4ud29ybGQgPSBuZXcgVmVjMyhcclxuICAgICAgKHRoaXMudHJhbnNmb3JtT3JpZ2luLnggKiAyIC0gMSkgKiAvLyBiZXR3ZWVuIC0xIGFuZCAxXHJcbiAgICAgICAgdGhpcy5zaXplLndvcmxkLndpZHRoLFxyXG4gICAgICAtKHRoaXMudHJhbnNmb3JtT3JpZ2luLnkgKiAyIC0gMSkgKiAvLyBiZXR3ZWVuIC0xIGFuZCAxXHJcbiAgICAgICAgdGhpcy5zaXplLndvcmxkLmhlaWdodCxcclxuICAgICAgdGhpcy50cmFuc2Zvcm1PcmlnaW4uelxyXG4gICAgKVxyXG5cclxuICAgIHRoaXMuc2hvdWxkVXBkYXRlTW9kZWxNYXRyaXgoKVxyXG4gICAgdGhpcy5zaG91bGRVcGRhdGVQcm9qZWN0aW9uTWF0cml4U3RhY2soKVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlIHRoZSB7QGxpbmsgZG9tRWxlbWVudCB8IERPTSBFbGVtZW50fSBzY3JvbGwgcG9zaXRpb25cclxuICAgKiBAcGFyYW0gZGVsdGEgLSBsYXN0IHtAbGluayB1dGlscy9TY3JvbGxNYW5hZ2VyLlNjcm9sbE1hbmFnZXIuZGVsdGEgfCBzY3JvbGwgZGVsdGEgdmFsdWVzfVxyXG4gICAqL1xyXG4gIHVwZGF0ZVNjcm9sbFBvc2l0aW9uKGRlbHRhOiBET01Qb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9KSB7XHJcbiAgICAvLyBhY3R1YWxseSB1cGRhdGUgdGhlIHBsYW5lIHBvc2l0aW9uIG9ubHkgaWYgbGFzdCBYIGRlbHRhIG9yIGxhc3QgWSBkZWx0YSBpcyBub3QgZXF1YWwgdG8gMFxyXG4gICAgaWYgKGRlbHRhLnggfHwgZGVsdGEueSkge1xyXG4gICAgICAvLyBzZXQgbmV3IHBvc2l0aW9ucyBiYXNlZCBvbiBvdXIgZGVsdGEgd2l0aG91dCB0cmlnZ2VyaW5nIHJlZmxvd1xyXG4gICAgICB0aGlzLmRvbUVsZW1lbnQudXBkYXRlU2Nyb2xsUG9zaXRpb24oZGVsdGEpXHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBEZXN0cm95IG91ciB7QGxpbmsgRE9NT2JqZWN0M0R9XHJcbiAgICovXHJcbiAgZGVzdHJveSgpIHtcclxuICAgIHRoaXMuZG9tRWxlbWVudD8uZGVzdHJveSgpXHJcbiAgfVxyXG59XHJcbiIsImltcG9ydCB7IERPTU9iamVjdDNEIH0gZnJvbSAnLi4vb2JqZWN0czNEL0RPTU9iamVjdDNEJ1xuaW1wb3J0IHsgaXNDdXJ0YWluc1JlbmRlcmVyIH0gZnJvbSAnLi4vLi4vY29yZS9yZW5kZXJlcnMvdXRpbHMnXG5pbXBvcnQgeyBQcm9qZWN0ZWRNZXNoQmFzZU1peGluIH0gZnJvbSAnLi4vLi4vY29yZS9tZXNoZXMvbWl4aW5zL1Byb2plY3RlZE1lc2hCYXNlTWl4aW4nXG5pbXBvcnQgeyBNZXNoQmFzZVJlbmRlclBhcmFtcyB9IGZyb20gJy4uLy4uL2NvcmUvbWVzaGVzL21peGlucy9NZXNoQmFzZU1peGluJ1xuaW1wb3J0IHsgdGhyb3dXYXJuaW5nIH0gZnJvbSAnLi4vLi4vdXRpbHMvdXRpbHMnXG5pbXBvcnQgeyBHUFVDdXJ0YWluc1JlbmRlcmVyIH0gZnJvbSAnLi4vcmVuZGVyZXJzL0dQVUN1cnRhaW5zUmVuZGVyZXInXG5pbXBvcnQgeyBHUFVDdXJ0YWlucyB9IGZyb20gJy4uL0dQVUN1cnRhaW5zJ1xuaW1wb3J0IHsgVGV4dHVyZSB9IGZyb20gJy4uLy4uL2NvcmUvdGV4dHVyZXMvVGV4dHVyZSdcbmltcG9ydCB7IEFsbG93ZWRHZW9tZXRyaWVzIH0gZnJvbSAnLi4vLi4vdHlwZXMvTWF0ZXJpYWxzJ1xuaW1wb3J0IHsgUmVuZGVyVGV4dHVyZSwgUmVuZGVyVGV4dHVyZVBhcmFtcyB9IGZyb20gJy4uLy4uL2NvcmUvdGV4dHVyZXMvUmVuZGVyVGV4dHVyZSdcbmltcG9ydCB7IERPTUVsZW1lbnRCb3VuZGluZ1JlY3QsIERPTUVsZW1lbnRQYXJhbXMgfSBmcm9tICcuLi8uLi9jb3JlL0RPTS9ET01FbGVtZW50J1xuXG4vKipcbiAqIEJhc2UgcGFyYW1ldGVycyB0byBjcmVhdGUgYSB7QGxpbmsgRE9NTWVzaH1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBET01NZXNoQmFzZVBhcmFtcyBleHRlbmRzIE1lc2hCYXNlUmVuZGVyUGFyYW1zIHtcbiAgLyoqIFdoZXRoZXIgdG8gYXV0b21hdGljYWxseSBjcmVhdGUgYSB7QGxpbmsgVGV4dHVyZX0gZm9yIGFsbCB7QGxpbmsgSFRNTEltYWdlRWxlbWVudH0sIHtAbGluayBIVE1MVmlkZW9FbGVtZW50fSBhbmQge0BsaW5rIEhUTUxDYW52YXNFbGVtZW50fSBjaGlsZCBvZiB0aGUgc3BlY2lmaWVkIHtAbGluayBET01NZXNofSB7QGxpbmsgSFRNTEVsZW1lbnR9ICovXG4gIGF1dG9sb2FkU291cmNlcz86IGJvb2xlYW5cbiAgLyoqIFdoZXRoZXIgdG8gYXV0b21hdGljYWxseSB1cGRhdGUgdGhlIHtAbGluayBET01NZXNofSBwb3NpdGlvbiBvbiBzY3JvbGwgKi9cbiAgd2F0Y2hTY3JvbGw/OiBib29sZWFuXG59XG5cbi8qKlxuICogUGFyYW1ldGVycyB0byBjcmVhdGUgYSB7QGxpbmsgRE9NTWVzaH1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBET01NZXNoUGFyYW1zIGV4dGVuZHMgRE9NTWVzaEJhc2VQYXJhbXMge1xuICAvKioge0BsaW5rIGNvcmUvZ2VvbWV0cmllcy9HZW9tZXRyeS5HZW9tZXRyeSB8IEdlb21ldHJ5fSB0byB1c2Ugd2l0aCB0aGUge0BsaW5rIERPTU1lc2h9ICovXG4gIGdlb21ldHJ5OiBBbGxvd2VkR2VvbWV0cmllc1xufVxuXG4vKiogQGNvbnN0IC0gZGVmYXVsdCB7QGxpbmsgRE9NTWVzaH0gcGFyYW1ldGVycyAqL1xuY29uc3QgZGVmYXVsdERPTU1lc2hQYXJhbXMgPSB7XG4gIGF1dG9sb2FkU291cmNlczogdHJ1ZSxcbiAgd2F0Y2hTY3JvbGw6IHRydWUsXG59IGFzIERPTU1lc2hCYXNlUGFyYW1zXG5cbi8qKlxuICogQ3JlYXRlIGEge0BsaW5rIGNvcmUvbWVzaGVzL01lc2guTWVzaCB8IE1lc2h9IGJhc2VkIG9uIGEge0BsaW5rIERPTU9iamVjdDNEfSwgd2hpY2ggYWxsb3cgdGhlIHtAbGluayBjb3JlL21lc2hlcy9NZXNoLk1lc2ggfCBNZXNofSB0byBiZSBzY2FsZWQgYW5kIHBvc2l0aW9uZWQgYmFzZWQgb24gYSB7QGxpbmsgSFRNTEVsZW1lbnR9IHtAbGluayBET01FbGVtZW50Qm91bmRpbmdSZWN0IHwgYm91bmRpbmcgcmVjdGFuZ2xlfS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gc2V0IG91ciBtYWluIEdQVUN1cnRhaW5zIGluc3RhbmNlXG4gKiBjb25zdCBncHVDdXJ0YWlucyA9IG5ldyBHUFVDdXJ0YWlucyh7XG4gKiAgIGNvbnRhaW5lcjogJyNjYW52YXMnIC8vIHNlbGVjdG9yIG9mIG91ciBXZWJHUFUgY2FudmFzIGNvbnRhaW5lclxuICogfSlcbiAqXG4gKiAvLyBzZXQgdGhlIEdQVSBkZXZpY2VcbiAqIC8vIG5vdGUgdGhpcyBpcyBhc3luY2hyb25vdXNcbiAqIGF3YWl0IGdwdUN1cnRhaW5zLnNldERldmljZSgpXG4gKlxuICogLy8gY3JlYXRlIGEgRE9NTWVzaCB3aXRoIGEgYm94IGdlb21ldHJ5LFxuICogLy8gYXNzdW1pbmcgdGhlcmUncyBhIEhUTUwgZWxlbWVudCB3aXRoIHRoZSBcIm1lc2hcIiBJRCBpbiB0aGUgRE9NXG4gKiAvLyB3aWxsIHVzZSB0aGUgbm9ybWFscyBjb2xvcnMgYXMgZGVmYXVsdCBzaGFkaW5nXG4gKiBjb25zdCBkb21NZXNoID0gbmV3IERPTU1lc2goZ3B1Q3VydGFpbnMsICcjbWVzaCcsIHtcbiAqICAgbGFiZWw6ICdNeSBET00gTWVzaCcsXG4gKiAgIGdlb21ldHJ5OiBuZXcgQm94R2VvbWV0cnkoKSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIERPTU1lc2ggZXh0ZW5kcyBQcm9qZWN0ZWRNZXNoQmFzZU1peGluKERPTU9iamVjdDNEKSB7XG4gIC8qKiB7QGxpbmsgR1BVQ3VydGFpbnNSZW5kZXJlcn0gdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgRE9NT2JqZWN0M0R9ICovXG4gIHJlbmRlcmVyOiBHUFVDdXJ0YWluc1JlbmRlcmVyXG4gIC8qKiBXaGV0aGVyIHRvIGF1dG9tYXRpY2FsbHkgY3JlYXRlIGEge0BsaW5rIFRleHR1cmV9IGZvciBhbGwge0BsaW5rIEhUTUxJbWFnZUVsZW1lbnR9LCB7QGxpbmsgSFRNTFZpZGVvRWxlbWVudH0gYW5kIHtAbGluayBIVE1MQ2FudmFzRWxlbWVudH0gY2hpbGQgb2YgdGhlIHNwZWNpZmllZCB7QGxpbmsgRE9NTWVzaH0ge0BsaW5rIEhUTUxFbGVtZW50fSAqL1xuICBhdXRvbG9hZFNvdXJjZXM6IGJvb2xlYW5cbiAgLyoqIFdoZXRoZXIgYWxsIHRoZSBzb3VyY2VzIGhhdmUgYmVlbiBzdWNjZXNzZnVsbHkgbG9hZGVkICovXG4gIF9zb3VyY2VzUmVhZHk6IGJvb2xlYW5cblxuICAvLyBjYWxsYmFja3MgLyBldmVudHNcbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25Mb2FkaW5nfSBjYWxsYmFjayAqL1xuICBfb25Mb2FkaW5nQ2FsbGJhY2sgPSAodGV4dHVyZTogVGV4dHVyZSk6IHZvaWQgPT4ge1xuICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrICovXG4gIH1cblxuICAvKipcbiAgICogRE9NTWVzaCBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcmVuZGVyZXIgLSB7QGxpbmsgR1BVQ3VydGFpbnNSZW5kZXJlcn0gb2JqZWN0IG9yIHtAbGluayBHUFVDdXJ0YWluc30gY2xhc3Mgb2JqZWN0IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIERPTU1lc2h9XG4gICAqIEBwYXJhbSBlbGVtZW50IC0ge0BsaW5rIEhUTUxFbGVtZW50fSBvciBzdHJpbmcgcmVwcmVzZW50aW5nIGFuIHtAbGluayBIVE1MRWxlbWVudH0gc2VsZWN0b3IgdXNlZCB0byBzY2FsZSBhbmQgcG9zaXRpb24gdGhlIHtAbGluayBET01NZXNofVxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBET01NZXNoUGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgRE9NTWVzaH1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlbmRlcmVyOiBHUFVDdXJ0YWluc1JlbmRlcmVyIHwgR1BVQ3VydGFpbnMsXG4gICAgZWxlbWVudDogRE9NRWxlbWVudFBhcmFtc1snZWxlbWVudCddLFxuICAgIHBhcmFtZXRlcnM6IERPTU1lc2hQYXJhbXNcbiAgKSB7XG4gICAgc3VwZXIocmVuZGVyZXIsIGVsZW1lbnQsIHsgLi4uZGVmYXVsdERPTU1lc2hQYXJhbXMsIC4uLnBhcmFtZXRlcnMgfSlcblxuICAgIHBhcmFtZXRlcnMgPSB7IC4uLmRlZmF1bHRET01NZXNoUGFyYW1zLCAuLi5wYXJhbWV0ZXJzIH1cblxuICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XG4gICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zUmVuZGVyZXIpXG5cbiAgICBpc0N1cnRhaW5zUmVuZGVyZXIocmVuZGVyZXIsIHBhcmFtZXRlcnMubGFiZWwgPyBwYXJhbWV0ZXJzLmxhYmVsICsgJyBET01NZXNoJyA6ICdET01NZXNoJylcblxuICAgIHRoaXMudHlwZSA9ICdET01NZXNoJ1xuXG4gICAgY29uc3QgeyBhdXRvbG9hZFNvdXJjZXMgfSA9IHBhcmFtZXRlcnNcblxuICAgIHRoaXMuYXV0b2xvYWRTb3VyY2VzID0gYXV0b2xvYWRTb3VyY2VzXG5cbiAgICB0aGlzLnNvdXJjZXNSZWFkeSA9IGZhbHNlXG4gICAgdGhpcy5zZXRJbml0U291cmNlcygpXG4gIH1cblxuICAvKipcbiAgICogR2V0L3NldCB3aGV0aGVyIG91ciB7QGxpbmsgbWF0ZXJpYWx9IGFuZCB7QGxpbmsgZ2VvbWV0cnl9IGFyZSByZWFkeVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCByZWFkeSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5fcmVhZHlcbiAgfVxuXG4gIHNldCByZWFkeSh2YWx1ZTogYm9vbGVhbikge1xuICAgIHRoaXMuX3JlYWR5ID0gdmFsdWVcblxuICAgIGlmICh0aGlzLkRPTU1lc2hSZWFkeSkge1xuICAgICAgdGhpcy5fb25SZWFkeUNhbGxiYWNrICYmIHRoaXMuX29uUmVhZHlDYWxsYmFjaygpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldC9zZXQgd2hldGhlciBhbGwgdGhlIGluaXRpYWwge0BsaW5rIERPTU1lc2h9IHNvdXJjZXMgaGF2ZSBiZWVuIHN1Y2Nlc3NmdWxseSBsb2FkZWRcbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgc291cmNlc1JlYWR5KCk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0aGlzLl9zb3VyY2VzUmVhZHlcbiAgfVxuXG4gIHNldCBzb3VyY2VzUmVhZHkodmFsdWU6IGJvb2xlYW4pIHtcbiAgICB0aGlzLl9zb3VyY2VzUmVhZHkgPSB2YWx1ZVxuXG4gICAgaWYgKHRoaXMuRE9NTWVzaFJlYWR5KSB7XG4gICAgICB0aGlzLl9vblJlYWR5Q2FsbGJhY2sgJiYgdGhpcy5fb25SZWFkeUNhbGxiYWNrKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IHdoZXRoZXIgb3VyIHtAbGluayBET01NZXNofSBpcyByZWFkeS4gQSB7QGxpbmsgRE9NTWVzaH0gaXMgcmVhZHkgd2hlbiBpdHMge0BsaW5rIHNvdXJjZXNSZWFkeSB8IHNvdXJjZXMgYXJlIHJlYWR5fSBhbmQgaXRzIHtAbGluayBtYXRlcmlhbH0gYW5kIHtAbGluayBnZW9tZXRyeX0gYXJlIHJlYWR5LlxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBET01NZXNoUmVhZHkoKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMucmVhZHkgJiYgdGhpcy5zb3VyY2VzUmVhZHlcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgRE9NTWVzaH0gdG8gdGhlIHJlbmRlcmVyIGFuZCB0aGUge0BsaW5rIGNvcmUvc2NlbmVzL1NjZW5lLlNjZW5lIHwgU2NlbmV9XG4gICAqL1xuICBhZGRUb1NjZW5lKCkge1xuICAgIHN1cGVyLmFkZFRvU2NlbmUoKVxuICAgIDsodGhpcy5yZW5kZXJlciBhcyBHUFVDdXJ0YWluc1JlbmRlcmVyKS5kb21NZXNoZXMucHVzaCh0aGlzKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBET01NZXNofSBmcm9tIHRoZSByZW5kZXJlciBhbmQgdGhlIHtAbGluayBjb3JlL3NjZW5lcy9TY2VuZS5TY2VuZSB8IFNjZW5lfVxuICAgKi9cbiAgcmVtb3ZlRnJvbVNjZW5lKCkge1xuICAgIHN1cGVyLnJlbW92ZUZyb21TY2VuZSgpXG4gICAgOyh0aGlzLnJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zUmVuZGVyZXIpLmRvbU1lc2hlcyA9ICh0aGlzLnJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zUmVuZGVyZXIpLmRvbU1lc2hlcy5maWx0ZXIoXG4gICAgICAobSkgPT4gbS51dWlkICE9PSB0aGlzLnV1aWRcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogTG9hZCBpbml0aWFsIHtAbGluayBET01NZXNofSBzb3VyY2VzIGlmIG5lZWRlZCBhbmQgY3JlYXRlIGFzc29jaWF0ZWQge0BsaW5rIFRleHR1cmV9XG4gICAqL1xuICBzZXRJbml0U291cmNlcygpIHtcbiAgICBsZXQgbG9hZGVyU2l6ZSA9IDBcbiAgICBsZXQgc291cmNlc0xvYWRlZCA9IDBcblxuICAgIGlmICh0aGlzLmF1dG9sb2FkU291cmNlcykge1xuICAgICAgY29uc3QgaW1hZ2VzID0gdGhpcy5kb21FbGVtZW50LmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnaW1nJylcbiAgICAgIGNvbnN0IHZpZGVvcyA9IHRoaXMuZG9tRWxlbWVudC5lbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJ3ZpZGVvJylcbiAgICAgIGNvbnN0IGNhbnZhc2VzID0gdGhpcy5kb21FbGVtZW50LmVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCgnY2FudmFzJylcblxuICAgICAgbG9hZGVyU2l6ZSA9IGltYWdlcy5sZW5ndGggKyB2aWRlb3MubGVuZ3RoICsgY2FudmFzZXMubGVuZ3RoXG5cbiAgICAgIGNvbnN0IG9uU291cmNlVXBsb2FkZWQgPSAodGV4dHVyZSkgPT4ge1xuICAgICAgICBzb3VyY2VzTG9hZGVkKytcblxuICAgICAgICB0aGlzLl9vbkxvYWRpbmdDYWxsYmFjayAmJiB0aGlzLl9vbkxvYWRpbmdDYWxsYmFjayh0ZXh0dXJlKVxuXG4gICAgICAgIGlmIChzb3VyY2VzTG9hZGVkID09PSBsb2FkZXJTaXplKSB7XG4gICAgICAgICAgdGhpcy5zb3VyY2VzUmVhZHkgPSB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCFsb2FkZXJTaXplKSB7XG4gICAgICAgIHRoaXMuc291cmNlc1JlYWR5ID0gdHJ1ZVxuICAgICAgfVxuXG4gICAgICAvLyBsb2FkIGltYWdlc1xuICAgICAgaWYgKGltYWdlcy5sZW5ndGgpIHtcbiAgICAgICAgaW1hZ2VzLmZvckVhY2goKGltYWdlKSA9PiB7XG4gICAgICAgICAgY29uc3QgdGV4dHVyZSA9IHRoaXMuY3JlYXRlVGV4dHVyZSh7XG4gICAgICAgICAgICBuYW1lOiBpbWFnZS5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGV4dHVyZS1uYW1lJykgPz8gJ3RleHR1cmUnICsgdGhpcy50ZXh0dXJlcy5sZW5ndGgsXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIHRleHR1cmUub25Tb3VyY2VVcGxvYWRlZCgoKSA9PiBvblNvdXJjZVVwbG9hZGVkKHRleHR1cmUpKS5sb2FkSW1hZ2UoaW1hZ2Uuc3JjKVxuICAgICAgICB9KVxuICAgICAgfVxuXG4gICAgICAvLyBsb2FkIHZpZGVvc1xuICAgICAgaWYgKHZpZGVvcy5sZW5ndGgpIHtcbiAgICAgICAgdmlkZW9zLmZvckVhY2goKHZpZGVvKSA9PiB7XG4gICAgICAgICAgY29uc3QgdGV4dHVyZSA9IHRoaXMuY3JlYXRlVGV4dHVyZSh7XG4gICAgICAgICAgICBuYW1lOiB2aWRlby5nZXRBdHRyaWJ1dGUoJ2RhdGEtdGV4dHVyZS1uYW1lJykgPz8gJ3RleHR1cmUnICsgdGhpcy50ZXh0dXJlcy5sZW5ndGgsXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIHRleHR1cmUub25Tb3VyY2VVcGxvYWRlZCgoKSA9PiBvblNvdXJjZVVwbG9hZGVkKHRleHR1cmUpKS5sb2FkVmlkZW8odmlkZW8pXG4gICAgICAgIH0pXG4gICAgICB9XG5cbiAgICAgIC8vIGxvYWQgY2FudmFzZXNcbiAgICAgIGlmIChjYW52YXNlcy5sZW5ndGgpIHtcbiAgICAgICAgY2FudmFzZXMuZm9yRWFjaCgoY2FudmFzKSA9PiB7XG4gICAgICAgICAgY29uc3QgdGV4dHVyZSA9IHRoaXMuY3JlYXRlVGV4dHVyZSh7XG4gICAgICAgICAgICBuYW1lOiBjYW52YXMuZ2V0QXR0cmlidXRlKCdkYXRhLXRleHR1cmUtbmFtZScpID8/ICd0ZXh0dXJlJyArIHRoaXMudGV4dHVyZXMubGVuZ3RoLFxuICAgICAgICAgIH0pXG5cbiAgICAgICAgICB0ZXh0dXJlLm9uU291cmNlVXBsb2FkZWQoKCkgPT4gb25Tb3VyY2VVcGxvYWRlZCh0ZXh0dXJlKSkubG9hZENhbnZhcyhjYW52YXMpXG4gICAgICAgIH0pXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuc291cmNlc1JlYWR5ID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNldC9jaGFuZ2UgdGhlIHtAbGluayBkb21FbGVtZW50IHwgRE9NIEVsZW1lbnR9XG4gICAqIEBwYXJhbSBlbGVtZW50IC0gbmV3IHtAbGluayBIVE1MRWxlbWVudH0gb3Igc3RyaW5nIHJlcHJlc2VudGluZyBhbiB7QGxpbmsgSFRNTEVsZW1lbnR9IHNlbGVjdG9yIHRvIHVzZVxuICAgKi9cbiAgcmVzZXRET01FbGVtZW50KGVsZW1lbnQ6IHN0cmluZyB8IEhUTUxFbGVtZW50KSB7XG4gICAgaWYgKCEhZWxlbWVudCkge1xuICAgICAgc3VwZXIucmVzZXRET01FbGVtZW50KGVsZW1lbnQpXG4gICAgfSBlbHNlIGlmICghZWxlbWVudCAmJiAhdGhpcy5yZW5kZXJlci5wcm9kdWN0aW9uKSB7XG4gICAgICB0aHJvd1dhcm5pbmcoXG4gICAgICAgIGAke3RoaXMub3B0aW9ucy5sYWJlbH06IFlvdSBhcmUgdHJ5aW5nIHRvIHJlc2V0IGEgJHt0aGlzLnR5cGV9IHdpdGggYSBIVE1MIGVsZW1lbnQgdGhhdCBkb2VzIG5vdCBleGlzdC4gVGhlIG9sZCBIVE1MIGVsZW1lbnQgd2lsbCBiZSBrZXB0IGluc3RlYWQuYFxuICAgICAgKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3VyIHtAbGluayBET01NZXNoI2RvbUVsZW1lbnQgfCBET00gRWxlbWVudH0ge0BsaW5rIGNvcmUvRE9NL0RPTUVsZW1lbnQuRE9NRWxlbWVudCNib3VuZGluZ1JlY3QgfCBib3VuZGluZyByZWN0YW5nbGV9IGFjY291bnRpbmcgZm9yIGN1cnJlbnQge0BsaW5rIGNvcmUvcmVuZGVyZXJzL0dQVVJlbmRlcmVyLkdQVVJlbmRlcmVyI3BpeGVsUmF0aW8gfCByZW5kZXJlciBwaXhlbCByYXRpb31cbiAgICovXG4gIGdldCBwaXhlbFJhdGlvQm91bmRpbmdSZWN0KCk6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3Qge1xuICAgIGNvbnN0IGRldmljZVBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA/PyAxXG4gICAgY29uc3Qgc2NhbGVCb3VuZGluZ1JlY3QgPSB0aGlzLnJlbmRlcmVyLnBpeGVsUmF0aW8gLyBkZXZpY2VQaXhlbFJhdGlvXG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5kb21FbGVtZW50LmJvdW5kaW5nUmVjdCkucmVkdWNlKFxuICAgICAgKGEsIGtleSkgPT4gKHsgLi4uYSwgW2tleV06IHRoaXMuZG9tRWxlbWVudC5ib3VuZGluZ1JlY3Rba2V5XSAqIHNjYWxlQm91bmRpbmdSZWN0IH0pLFxuICAgICAge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgaGVpZ2h0OiAwLFxuICAgICAgICB0b3A6IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICB9XG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIG5ldyB7QGxpbmsgUmVuZGVyVGV4dHVyZX1cbiAgICogQHBhcmFtICBvcHRpb25zIC0ge0BsaW5rIFJlbmRlclRleHR1cmVQYXJhbXMgfCBSZW5kZXJUZXh0dXJlIHBhcmFtZXRlcnN9XG4gICAqIEByZXR1cm5zIC0gbmV3bHkgY3JlYXRlZCB7QGxpbmsgUmVuZGVyVGV4dHVyZX1cbiAgICovXG4gIGNyZWF0ZVJlbmRlclRleHR1cmUob3B0aW9uczogUmVuZGVyVGV4dHVyZVBhcmFtcyk6IFJlbmRlclRleHR1cmUge1xuICAgIG9wdGlvbnMgPSB7XG4gICAgICAuLi5vcHRpb25zLFxuICAgICAgc2l6ZTogeyB3aWR0aDogdGhpcy5waXhlbFJhdGlvQm91bmRpbmdSZWN0LndpZHRoLCBoZWlnaHQ6IHRoaXMucGl4ZWxSYXRpb0JvdW5kaW5nUmVjdC5oZWlnaHQgfSxcbiAgICB9XG5cbiAgICByZXR1cm4gc3VwZXIuY3JlYXRlUmVuZGVyVGV4dHVyZShvcHRpb25zKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlc2l6ZSB0aGUgTWVzaCdzIHJlbmRlciB0ZXh0dXJlcyBvbmx5IGlmIHRoZXkncmUgbm90IHN0b3JhZ2UgdGV4dHVyZXNcbiAgICovXG4gIHJlc2l6ZVJlbmRlclRleHR1cmVzKCkge1xuICAgIHRoaXMucmVuZGVyVGV4dHVyZXNcbiAgICAgID8uZmlsdGVyKChyZW5kZXJUZXh0dXJlKSA9PiByZW5kZXJUZXh0dXJlLm9wdGlvbnMudXNhZ2UgPT09ICd0ZXh0dXJlJylcbiAgICAgIC5mb3JFYWNoKChyZW5kZXJUZXh0dXJlKSA9PlxuICAgICAgICByZW5kZXJUZXh0dXJlLnJlc2l6ZSh7IHdpZHRoOiB0aGlzLnBpeGVsUmF0aW9Cb3VuZGluZ1JlY3Qud2lkdGgsIGhlaWdodDogdGhpcy5waXhlbFJhdGlvQm91bmRpbmdSZWN0LmhlaWdodCB9KVxuICAgICAgKVxuICB9XG5cbiAgLyogRVZFTlRTICovXG5cbiAgLyoqXG4gICAqIENhbGxlZCBlYWNoIHRpbWUgb25lIG9mIHRoZSBpbml0aWFsIHNvdXJjZXMgYXNzb2NpYXRlZCB7QGxpbmsgVGV4dHVyZSN0ZXh0dXJlIHwgR1BVIHRleHR1cmV9IGhhcyBiZWVuIHVwbG9hZGVkIHRvIHRoZSBHUFVcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gY2FsbCBlYWNoIHRpbWUgYSB7QGxpbmsgVGV4dHVyZSN0ZXh0dXJlIHwgR1BVIHRleHR1cmV9IGhhcyBiZWVuIHVwbG9hZGVkIHRvIHRoZSBHUFVcbiAgICogQHJldHVybnMgLSBvdXIge0BsaW5rIERPTU1lc2h9XG4gICAqL1xuICBvbkxvYWRpbmcoY2FsbGJhY2s6ICh0ZXh0dXJlOiBUZXh0dXJlKSA9PiB2b2lkKTogRE9NTWVzaCB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9vbkxvYWRpbmdDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuIiwiaW1wb3J0IHsgaXNDdXJ0YWluc1JlbmRlcmVyIH0gZnJvbSAnLi4vLi4vY29yZS9yZW5kZXJlcnMvdXRpbHMnXG5pbXBvcnQgeyBQbGFuZUdlb21ldHJ5LCBQbGFuZUdlb21ldHJ5UGFyYW1zIH0gZnJvbSAnLi4vLi4vY29yZS9nZW9tZXRyaWVzL1BsYW5lR2VvbWV0cnknXG5pbXBvcnQgeyBET01NZXNoLCBET01NZXNoQmFzZVBhcmFtcywgRE9NTWVzaFBhcmFtcyB9IGZyb20gJy4vRE9NTWVzaCdcbmltcG9ydCB7IFZlYzMgfSBmcm9tICcuLi8uLi9tYXRoL1ZlYzMnXG5pbXBvcnQgeyBWZWMyIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWMyJ1xuaW1wb3J0IHsgY2FjaGVNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vdXRpbHMvQ2FjaGVNYW5hZ2VyJ1xuaW1wb3J0IHsgR1BVQ3VydGFpbnNSZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmVycy9HUFVDdXJ0YWluc1JlbmRlcmVyJ1xuaW1wb3J0IHsgR1BVQ3VydGFpbnMgfSBmcm9tICcuLi9HUFVDdXJ0YWlucydcbmltcG9ydCB7IERPTUVsZW1lbnRQYXJhbXMgfSBmcm9tICcuLi8uLi9jb3JlL0RPTS9ET01FbGVtZW50J1xuXG4vKipcbiAqIFBhcmFtZXRlcnMgdXNlZCB0byBjcmVhdGUgYSB7QGxpbmsgUGxhbmV9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUGxhbmVQYXJhbXMgZXh0ZW5kcyBET01NZXNoQmFzZVBhcmFtcywgUGxhbmVHZW9tZXRyeVBhcmFtcyB7XG4gIC8qKiBPcHRpb25hbCB7QGxpbmsgUGxhbmVHZW9tZXRyeX0gdG8gdXNlICovXG4gIGdlb21ldHJ5PzogUGxhbmVHZW9tZXRyeVxufVxuXG4vKiogQGNvbnN0IC0gZGVmYXVsdCB7QGxpbmsgUGxhbmV9IHBhcmFtZXRlcnMgKi9cbmNvbnN0IGRlZmF1bHRQbGFuZVBhcmFtcyA9IHtcbiAgbGFiZWw6ICdQbGFuZScsXG5cbiAgLy8gZ2VvbWV0cnlcbiAgaW5zdGFuY2VzQ291bnQ6IDEsXG4gIHZlcnRleEJ1ZmZlcnM6IFtdLFxufSBhcyBQbGFuZVBhcmFtc1xuXG4vKipcbiAqIFVzZWQgdG8gY3JlYXRlIGEgc3BlY2lhbCB7QGxpbmsgRE9NTWVzaH0gY2xhc3Mgb2JqZWN0IHVzaW5nIGEge0BsaW5rIFBsYW5lR2VvbWV0cnl9LlxuICogVGhpcyBtZWFucyBhIHF1YWQgdGhhdCBsb29rcyBsaWtlIGFuIG9yZGluYXJ5IHtAbGluayBIVE1MRWxlbWVudH0gYnV0IHdpdGggV2ViR1BVIHJlbmRlcmluZyBjYXBhYmlsaXRpZXMuXG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIHNldCBvdXIgbWFpbiBHUFVDdXJ0YWlucyBpbnN0YW5jZVxuICogY29uc3QgZ3B1Q3VydGFpbnMgPSBuZXcgR1BVQ3VydGFpbnMoe1xuICogICBjb250YWluZXI6ICcjY2FudmFzJyAvLyBzZWxlY3RvciBvZiBvdXIgV2ViR1BVIGNhbnZhcyBjb250YWluZXJcbiAqIH0pXG4gKlxuICogLy8gc2V0IHRoZSBHUFUgZGV2aWNlXG4gKiAvLyBub3RlIHRoaXMgaXMgYXN5bmNocm9ub3VzXG4gKiBhd2FpdCBncHVDdXJ0YWlucy5zZXREZXZpY2UoKVxuICpcbiAqIC8vIGNyZWF0ZSBhIFBsYW5lLFxuICogLy8gYXNzdW1pbmcgdGhlcmUncyBhIEhUTUwgZWxlbWVudCB3aXRoIHRoZSBcInBsYW5lXCIgSUQgaW4gdGhlIERPTVxuICogLy8gd2lsbCB1c2UgdGhlIG5vcm1hbHMgY29sb3JzIGFzIGRlZmF1bHQgc2hhZGluZ1xuICogY29uc3QgcGxhbmUgPSBuZXcgUGxhbmUoZ3B1Q3VydGFpbnMsICcjcGxhbmUnLCB7XG4gKiAgIGxhYmVsOiAnTXkgcGxhbmUnLFxuICogfSlcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgUGxhbmUgZXh0ZW5kcyBET01NZXNoIHtcbiAgLyoqXG4gICAqIFBsYW5lIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSByZW5kZXJlciAtIHtAbGluayBHUFVDdXJ0YWluc1JlbmRlcmVyfSBvYmplY3Qgb3Ige0BsaW5rIEdQVUN1cnRhaW5zfSBjbGFzcyBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgUGxhbmV9XG4gICAqIEBwYXJhbSBlbGVtZW50IC0ge0BsaW5rIEhUTUxFbGVtZW50fSBvciBzdHJpbmcgcmVwcmVzZW50aW5nIGFuIHtAbGluayBIVE1MRWxlbWVudH0gc2VsZWN0b3IgdXNlZCB0byBzY2FsZSBhbmQgcG9zaXRpb24gdGhlIHtAbGluayBQbGFuZX1cbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgUGxhbmVQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBQbGFuZX1cbiAgICovXG4gIGNvbnN0cnVjdG9yKFxuICAgIHJlbmRlcmVyOiBHUFVDdXJ0YWluc1JlbmRlcmVyIHwgR1BVQ3VydGFpbnMsXG4gICAgZWxlbWVudDogRE9NRWxlbWVudFBhcmFtc1snZWxlbWVudCddLFxuICAgIHBhcmFtZXRlcnMgPSB7fSBhcyBQbGFuZVBhcmFtc1xuICApIHtcbiAgICAvLyB3ZSBjb3VsZCBwYXNzIG91ciBjdXJ0YWlucyBvYmplY3QgT1Igb3VyIGN1cnRhaW5zIHJlbmRlcmVyIG9iamVjdFxuICAgIHJlbmRlcmVyID0gKHJlbmRlcmVyICYmIChyZW5kZXJlciBhcyBHUFVDdXJ0YWlucykucmVuZGVyZXIpIHx8IChyZW5kZXJlciBhcyBHUFVDdXJ0YWluc1JlbmRlcmVyKVxuXG4gICAgaXNDdXJ0YWluc1JlbmRlcmVyKHJlbmRlcmVyLCBwYXJhbWV0ZXJzLmxhYmVsID8gcGFyYW1ldGVycy5sYWJlbCArICcgUGxhbmUnIDogJ1BsYW5lJylcblxuICAgIC8vIGFzc2lnbiBkZWZhdWx0IHBhcmFtcyBpZiBuZWVkZWRcbiAgICBjb25zdCBwYXJhbXMgPSB7IC4uLmRlZmF1bHRQbGFuZVBhcmFtcywgLi4ucGFyYW1ldGVycyB9XG5cbiAgICBsZXQgeyBnZW9tZXRyeSwgd2lkdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMsIC4uLkRPTU1lc2hQYXJhbXMgfSA9IHBhcmFtc1xuICAgIGNvbnN0IHsgaW5zdGFuY2VzQ291bnQsIHZlcnRleEJ1ZmZlcnMsIC4uLm1hdGVyaWFsUGFyYW1zIH0gPSBET01NZXNoUGFyYW1zXG5cbiAgICAvLyBjYW4gd2UgZ2V0IGEgY2FjaGVkIGdlb21ldHJ5P1xuICAgIGlmICghZ2VvbWV0cnkgfHwgZ2VvbWV0cnkudHlwZSAhPT0gJ1BsYW5lR2VvbWV0cnknKSB7XG4gICAgICB3aWR0aFNlZ21lbnRzID0gd2lkdGhTZWdtZW50cyA/PyAxXG4gICAgICBoZWlnaHRTZWdtZW50cyA9IGhlaWdodFNlZ21lbnRzID8/IDFcblxuICAgICAgY29uc3QgZ2VvbWV0cnlJRCA9IHdpZHRoU2VnbWVudHMgKiBoZWlnaHRTZWdtZW50cyArIHdpZHRoU2VnbWVudHNcblxuICAgICAgLy8gaWYgdGhlcmUncyBubyBhZGRpdGlvbmFsIHZlcnRleCBidWZmZXJzLCB0cnkgdG8gZ2V0IGEgZ2VvbWV0cnkgZnJvbSBjYWNoZVxuICAgICAgaWYgKCF2ZXJ0ZXhCdWZmZXJzLmxlbmd0aCkge1xuICAgICAgICBnZW9tZXRyeSA9IGNhY2hlTWFuYWdlci5nZXRQbGFuZUdlb21ldHJ5QnlJRChnZW9tZXRyeUlEKVxuICAgICAgfVxuXG4gICAgICBpZiAoIWdlb21ldHJ5KSB7XG4gICAgICAgIC8vIG5vIGNhY2hlZCBwbGFuZSBnZW9tZXRyeSwgd2UgbmVlZCB0byBjcmVhdGUgYSBuZXcgb25lXG4gICAgICAgIGdlb21ldHJ5ID0gbmV3IFBsYW5lR2VvbWV0cnkoeyB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cywgaW5zdGFuY2VzQ291bnQsIHZlcnRleEJ1ZmZlcnMgfSlcbiAgICAgICAgY2FjaGVNYW5hZ2VyLmFkZFBsYW5lR2VvbWV0cnkoZ2VvbWV0cnkgYXMgUGxhbmVHZW9tZXRyeSlcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGlmIGdlb21ldHJ5IGNvbWVzIGZyb20gY2FjaGUsIGZvcmNlIGluc3RhbmNlcyBjb3VudFxuICAgICAgICBnZW9tZXRyeS5pbnN0YW5jZXNDb3VudCA9IGluc3RhbmNlc0NvdW50XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gZ2V0IERPTU1lc2ggcGFyYW1zXG4gICAgc3VwZXIocmVuZGVyZXIsIGVsZW1lbnQsIHsgZ2VvbWV0cnksIC4uLm1hdGVyaWFsUGFyYW1zIH0gYXMgRE9NTWVzaFBhcmFtcylcblxuICAgIHRoaXMudHlwZSA9ICdQbGFuZSdcbiAgfVxuXG4gIC8qKlxuICAgKiBUYWtlIHRoZSBwb2ludGVyIHtAbGluayBWZWMyIHwgdmVjdG9yfSBwb3NpdGlvbiByZWxhdGl2ZSB0byB0aGUgZG9jdW1lbnQgYW5kIHJldHVybnMgaXQgcmVsYXRpdmUgdG8gb3VyIHtAbGluayBQbGFuZX1cbiAgICogSXQgcmFuZ2VzIGZyb20gLTEgdG8gMSBvbiBib3RoIGF4aXNcbiAgICogQHBhcmFtIG1vdXNlQ29vcmRzIC0gcG9pbnRlciB7QGxpbmsgVmVjMiB8IHZlY3Rvcn0gY29vcmRpbmF0ZXNcbiAgICogQHJldHVybnMgLSByYXljYXN0ZWQge0BsaW5rIFZlYzIgfCB2ZWN0b3J9IGNvb3JkaW5hdGVzIHJlbGF0aXZlIHRvIHRoZSB7QGxpbmsgUGxhbmV9XG4gICAqL1xuICBtb3VzZVRvUGxhbmVDb29yZHMobW91c2VDb29yZHM6IFZlYzIgPSBuZXcgVmVjMigpKTogVmVjMiB7XG4gICAgLy8gVE9ETyBzaW1wbGlmeSBpZiBubyByb3RhdGlvbiBzZXQ/XG4gICAgLy8gcmF5Y2FzdGluZ1xuICAgIC8vIGJhc2VkIG9uIGh0dHBzOi8vcGVvcGxlLmNzLmNsZW1zb24uZWR1L35kaG91c2UvY291cnNlcy80MDUvbm90ZXMvcmF5Y2FzdC5wZGZcblxuICAgIC8vIGNvbnZlcnQgbW91c2UgcG9zaXRpb24gdG8gM2Qgbm9ybWFsaXNlZCBkZXZpY2UgY29vcmRpbmF0ZXMgKGZyb20gWy0xLCAtMV0gdG8gWzEsIDFdKVxuICAgIGNvbnN0IHdvcmxkTW91c2UgPSB7XG4gICAgICB4OiAyICogKG1vdXNlQ29vcmRzLnggLyB0aGlzLnJlbmRlcmVyLnBpeGVsUmF0aW9Cb3VuZGluZ1JlY3Qud2lkdGgpIC0gMSxcbiAgICAgIHk6IDIgKiAoMSAtIG1vdXNlQ29vcmRzLnkgLyB0aGlzLnJlbmRlcmVyLnBpeGVsUmF0aW9Cb3VuZGluZ1JlY3QuaGVpZ2h0KSAtIDEsXG4gICAgfVxuXG4gICAgY29uc3QgcmF5T3JpZ2luID0gdGhpcy5jYW1lcmEucG9zaXRpb24uY2xvbmUoKVxuXG4gICAgLy8gcmF5IGRpcmVjdGlvbiBiYXNlZCBvbiBub3JtYWxpc2VkIGNvb3JkaW5hdGVzIGFuZCBwbGFuZSB0cmFuc2xhdGlvblxuICAgIGNvbnN0IHJheURpcmVjdGlvbiA9IG5ldyBWZWMzKHdvcmxkTW91c2UueCwgd29ybGRNb3VzZS55LCAtMC41KVxuXG4gICAgLy8gdW5wcm9qZWN0IHJheSBkaXJlY3Rpb25cbiAgICByYXlEaXJlY3Rpb24udW5wcm9qZWN0KHRoaXMuY2FtZXJhKVxuICAgIHJheURpcmVjdGlvbi5zdWIocmF5T3JpZ2luKS5ub3JtYWxpemUoKVxuXG4gICAgLy8gcGxhbmUgbm9ybWFscyAoY291bGQgYWxzbyBiZSBbMCwgMCwgLTFdLCBtYWtlcyBubyBkaWZmZXJlbmNlLCByYXljYXN0aW5nIGxhbmRzIHRoZSBzYW1lIHJlc3VsdCBmb3IgYm90aCBmYWNlKVxuICAgIGNvbnN0IHBsYW5lTm9ybWFscyA9IG5ldyBWZWMzKDAsIDAsIDEpXG5cbiAgICAvLyBhcHBseSBwbGFuZSBxdWF0ZXJuaW9uIHRvIHBsYW5lIG5vcm1hbHNcbiAgICBwbGFuZU5vcm1hbHMuYXBwbHlRdWF0KHRoaXMucXVhdGVybmlvbikubm9ybWFsaXplKClcblxuICAgIGNvbnN0IHJlc3VsdCA9IG5ldyBWZWMzKDAsIDAsIDApXG5cbiAgICBjb25zdCBkZW5vbWluYXRvciA9IHBsYW5lTm9ybWFscy5kb3QocmF5RGlyZWN0aW9uKVxuXG4gICAgaWYgKE1hdGguYWJzKGRlbm9taW5hdG9yKSA+PSAwLjAwMDEpIHtcbiAgICAgIGNvbnN0IGludmVyc2VWaWV3TWF0cml4ID0gdGhpcy5tb2RlbE1hdHJpeC5nZXRJbnZlcnNlKCkucHJlbXVsdGlwbHkodGhpcy5jYW1lcmEudmlld01hdHJpeClcblxuICAgICAgLy8gZ2V0IHRoZSBwbGFuZSdzIGNlbnRlciBjb29yZGluYXRlc1xuICAgICAgLy8gc3RhcnQgd2l0aCBvdXIgdHJhbnNmb3JtIG9yaWdpbiBwb2ludFxuICAgICAgY29uc3QgcGxhbmVPcmlnaW4gPSB0aGlzLndvcmxkVHJhbnNmb3JtT3JpZ2luLmNsb25lKCkuYWRkKHRoaXMud29ybGRQb3NpdGlvbilcblxuICAgICAgLy8gcm90YXRlIG91ciB0cmFuc2Zvcm0gb3JpZ2luIGFib3V0IHdvcmxkIGNlbnRlclxuICAgICAgY29uc3Qgcm90YXRlZE9yaWdpbiA9IG5ldyBWZWMzKFxuICAgICAgICB0aGlzLndvcmxkUG9zaXRpb24ueCAtIHBsYW5lT3JpZ2luLngsXG4gICAgICAgIHRoaXMud29ybGRQb3NpdGlvbi55IC0gcGxhbmVPcmlnaW4ueSxcbiAgICAgICAgdGhpcy53b3JsZFBvc2l0aW9uLnogLSBwbGFuZU9yaWdpbi56XG4gICAgICApXG4gICAgICByb3RhdGVkT3JpZ2luLmFwcGx5UXVhdCh0aGlzLnF1YXRlcm5pb24pXG5cbiAgICAgIC8vIGFkZCBpdCB0byBvdXIgcGxhbmUgb3JpZ2luXG4gICAgICBwbGFuZU9yaWdpbi5hZGQocm90YXRlZE9yaWdpbilcblxuICAgICAgLy8gZGlzdGFuY2UgZnJvbSByYXkgb3JpZ2luIHRvIHBsYW5lXG4gICAgICBjb25zdCBkaXN0YW5jZSA9IHBsYW5lTm9ybWFscy5kb3QocGxhbmVPcmlnaW4uY2xvbmUoKS5zdWIocmF5T3JpZ2luKSkgLyBkZW5vbWluYXRvclxuICAgICAgcmVzdWx0LmNvcHkocmF5T3JpZ2luLmFkZChyYXlEaXJlY3Rpb24ubXVsdGlwbHlTY2FsYXIoZGlzdGFuY2UpKSlcblxuICAgICAgcmVzdWx0LmFwcGx5TWF0NChpbnZlcnNlVmlld01hdHJpeClcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gbm8gaW50ZXJzZWN0aW9uIVxuICAgICAgcmVzdWx0LnNldChJbmZpbml0eSwgSW5maW5pdHksIEluZmluaXR5KVxuICAgIH1cblxuICAgIHJldHVybiBuZXcgVmVjMihyZXN1bHQueCwgcmVzdWx0LnkpXG4gIH1cbn1cbiIsImltcG9ydCB7IENhbWVyYVJlbmRlcmVyLCBpc1JlbmRlcmVyLCBSZW5kZXJlciB9IGZyb20gJy4uL3JlbmRlcmVycy91dGlscydcbmltcG9ydCB7IERPTVByb2plY3RlZE1lc2gsIFByb2plY3RlZE1lc2gsIFJlbmRlcmVkTWVzaCB9IGZyb20gJy4uL3JlbmRlcmVycy9HUFVSZW5kZXJlcidcbmltcG9ydCB7IFNoYWRlclBhc3MgfSBmcm9tICcuLi9yZW5kZXJQYXNzZXMvU2hhZGVyUGFzcydcbmltcG9ydCB7IFBpbmdQb25nUGxhbmUgfSBmcm9tICcuLi8uLi9jdXJ0YWlucy9tZXNoZXMvUGluZ1BvbmdQbGFuZSdcbmltcG9ydCB7IENvbXB1dGVQYXNzIH0gZnJvbSAnLi4vY29tcHV0ZVBhc3Nlcy9Db21wdXRlUGFzcydcbmltcG9ydCB7IEdQVUN1cnRhaW5zIH0gZnJvbSAnLi4vLi4vY3VydGFpbnMvR1BVQ3VydGFpbnMnXG5pbXBvcnQgeyBSZW5kZXJUYXJnZXQgfSBmcm9tICcuLi9yZW5kZXJQYXNzZXMvUmVuZGVyVGFyZ2V0J1xuaW1wb3J0IHsgRE9NTWVzaCB9IGZyb20gJy4uLy4uL2N1cnRhaW5zL21lc2hlcy9ET01NZXNoJ1xuaW1wb3J0IHsgUGxhbmUgfSBmcm9tICcuLi8uLi9jdXJ0YWlucy9tZXNoZXMvUGxhbmUnXG5pbXBvcnQgeyBSZW5kZXJQYXNzIH0gZnJvbSAnLi4vcmVuZGVyUGFzc2VzL1JlbmRlclBhc3MnXG5pbXBvcnQgeyBSZW5kZXJUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvUmVuZGVyVGV4dHVyZSdcbmltcG9ydCB7IFdyaXRhYmxlQnVmZmVyQmluZGluZyB9IGZyb20gJy4uL2JpbmRpbmdzL1dyaXRhYmxlQnVmZmVyQmluZGluZydcblxuLyoqXG4gKiBNZXNoZXMgcmVuZGVyaW5nIG9yZGVyIGlzIGRlcGVuZGFudCBvZiB0aGVpciB0cmFuc3BhcmVuY3kgc2V0dGluZ1xuICovXG5leHBvcnQgaW50ZXJmYWNlIFByb2plY3Rpb25TdGFjayB7XG4gIC8qKiBvcGFxdWUgTWVzaGVzIHdpbGwgYmUgZHJhd24gZmlyc3QgKi9cbiAgb3BhcXVlOiBQcm9qZWN0ZWRNZXNoW11cbiAgLyoqIHRyYW5zcGFyZW50IE1lc2hlcyB3aWxsIGJlIGRyYXduIGxhc3QgKi9cbiAgdHJhbnNwYXJlbnQ6IFByb2plY3RlZE1lc2hbXVxufVxuXG4vKiogTWVzaGVzIHdpbGwgYmUgc3RhY2tlZCBpbiAyIGRpZmZlcmVudCBvYmplY3RzIHdoZXRoZXIgdGhleSBhcmUgcHJvamVjdGVkICh1c2UgYSB7QGxpbmsgY29yZS9jYW1lcmEvQ2FtZXJhLkNhbWVyYSB8IENhbWVyYX0pIG9yIG5vdCAqL1xuZXhwb3J0IHR5cGUgUHJvamVjdGlvblR5cGUgPSAndW5Qcm9qZWN0ZWQnIHwgJ3Byb2plY3RlZCdcblxuLyoqXG4gKiBNZXNoZXMgd2lsbCBiZSBwdXQgaW50byB0d28gc3RhY2tzIG9mIHByb2plY3RlZC91bnByb2plY3RlZCB0cmFuc3BhcmVudCBhbmQgb3BhcXVlcyBtZXNoZXMgYXJyYXlzXG4gKi9cbmV4cG9ydCB0eXBlIFN0YWNrID0gUmVjb3JkPFByb2plY3Rpb25UeXBlLCBQcm9qZWN0aW9uU3RhY2s+XG5cbi8qKlxuICogQSBSZW5kZXJQYXNzRW50cnkgb2JqZWN0IGlzIHVzZWQgdG8gZ3JvdXAgTWVzaGVzIGJhc2VkIG9uIHRoZWlyIHJlbmRlcmluZyB0YXJnZXRcbiAqL1xuZXhwb3J0IGludGVyZmFjZSBSZW5kZXJQYXNzRW50cnkge1xuICAvKioge0BsaW5rIFJlbmRlclBhc3N9IHRhcmdldCB1c2VkIG9udG8gd2hpY2ggcmVuZGVyICovXG4gIHJlbmRlclBhc3M6IFJlbmRlclBhc3NcbiAgLyoqIHtAbGluayBSZW5kZXJUZXh0dXJlfSB0byByZW5kZXIgdG8gaWYgYW55IChpZiBub3Qgc3BlY2lmaWVkIHRoZW4gdGhpcyB7QGxpbmsgUmVuZGVyUGFzc0VudHJ5fSBNZXNoZXMgd2lsbCBiZSByZW5kZXJlZCBkaXJlY3RseSB0byBzY3JlZW4pICovXG4gIHJlbmRlclRleHR1cmU6IFJlbmRlclRleHR1cmUgfCBudWxsXG4gIC8qKiBPcHRpb25hbCBmdW5jdGlvbiB0byBleGVjdXRlIGp1c3QgYmVmb3JlIHJlbmRlcmluZyB0aGUgTWVzaGVzLCB1c2VmdWwgZm9yIGV2ZW50dWFsIHRleHR1cmUgY29weSAqL1xuICBvbkJlZm9yZVJlbmRlclBhc3M6ICgoY29tbWFuZEVuY29kZXI/OiBHUFVDb21tYW5kRW5jb2Rlciwgc3dhcENoYWluVGV4dHVyZT86IEdQVVRleHR1cmUpID0+IHZvaWQpIHwgbnVsbFxuICAvKiogT3B0aW9uYWwgZnVuY3Rpb24gdG8gZXhlY3V0ZSBqdXN0IGFmdGVyIHJlbmRlcmluZyB0aGUgTWVzaGVzLCB1c2VmdWwgZm9yIGV2ZW50dWFsIHRleHR1cmUgY29weSAqL1xuICBvbkFmdGVyUmVuZGVyUGFzczogKChjb21tYW5kRW5jb2Rlcj86IEdQVUNvbW1hbmRFbmNvZGVyLCBzd2FwQ2hhaW5UZXh0dXJlPzogR1BVVGV4dHVyZSkgPT4gdm9pZCkgfCBudWxsXG4gIC8qKiBJZiB0aGlzIHtAbGluayBSZW5kZXJQYXNzRW50cnl9IG5lZWRzIHRvIHJlbmRlciBvbmx5IG9uZSBNZXNoICovXG4gIGVsZW1lbnQ6IFJlbmRlcmVkTWVzaCB8IG51bGxcbiAgLyoqIElmIHRoaXMge0BsaW5rIFJlbmRlclBhc3NFbnRyeX0gbmVlZHMgdG8gcmVuZGVyIG11bHRpcGxlIE1lc2hlcywgdGhlbiB1c2UgYSB7QGxpbmsgU3RhY2t9IG9iamVjdCAqL1xuICBzdGFjazogU3RhY2sgfCBudWxsXG59XG5cbi8qKiBEZWZpbmVzIGFsbCBvdXIgcG9zc2libGUgcmVuZGVyIHRhcmdldHMgKi9cbmV4cG9ydCB0eXBlIFJlbmRlclBhc3NFbnRyaWVzVHlwZSA9ICdwaW5nUG9uZycgfCAncmVuZGVyVGFyZ2V0JyB8ICdzY3JlZW4nXG4vKiogRGVmaW5lcyBvdXIgcmVuZGVyIHBhc3MgZW50cmllcyBvYmplY3QgKi9cbmV4cG9ydCB0eXBlIFJlbmRlclBhc3NFbnRyaWVzID0gUmVjb3JkPFJlbmRlclBhc3NFbnRyaWVzVHlwZSwgUmVuZGVyUGFzc0VudHJ5W10+XG5cbi8qKlxuICogVXNlZCB0byBieSB0aGUge0BsaW5rIFJlbmRlcmVyfSByZW5kZXIgZXZlcnl0aGluZyB0aGF0IG5lZWRzIHRvIGJlIHJlbmRlcmVkIChjb21wdXRlIHBhc3NlcyBhbmQgbWVzaGVzKSBpbiB0aGUgcmlnaHQgb3JkZXIgd2l0aCB0aGUgcmlnaHQgcGFzcyBkZXNjcmlwdG9ycyBhbmQgdGFyZ2V0IHRleHR1cmVzLCBwZXJmb3JtIHRleHR1cmVzIGNvcHkgYXQgdGhlIHJpZ2h0IHRpbWUsIGV0Yy5cbiAqXG4gKiAjIyBSZW5kZXIgb3JkZXJcbiAqXG4gKiAtIFJ1biBhbGwgdGhlIHtAbGluayBDb21wdXRlUGFzc30gZmlyc3QsIHNvcnRlZCBieSB0aGVpciB7QGxpbmsgQ29tcHV0ZVBhc3MjcmVuZGVyT3JkZXIgfCByZW5kZXJPcmRlcn1cbiAqIC0gVGhlbiByZW5kZXIgYWxsIHtAbGluayByZW5kZXJQYXNzRW50cmllc30gcGluZ1BvbmcgZW50cmllcyBNZXNoZXMsIHNvcnRlZCBieSB0aGVpciB7QGxpbmsgUGluZ1BvbmdQbGFuZSNyZW5kZXJPcmRlciB8IHJlbmRlck9yZGVyfVxuICogLSBUaGVuIGFsbCBNZXNoZXMgdGhhdCBuZWVkIHRvIGJlIHJlbmRlcmVkIGludG8gc3BlY2lmaWMge0BsaW5rIHJlbmRlclBhc3NFbnRyaWVzfSByZW5kZXJUYXJnZXQgZW50cmllczpcbiAqICAgLSBGaXJzdCwgdGhlIG9wYXF1ZSB1bnByb2plY3RlZCBNZXNoZXMgKGkuZS4gb3BhcXVlIHtAbGluayBjb3JlL21lc2hlcy9GdWxsc2NyZWVuUGxhbmUuRnVsbHNjcmVlblBsYW5lIHwgRnVsbHNjcmVlblBsYW5lfSwgaWYgYW55KSwgc29ydGVkIGJ5IHRoZWlyIHtAbGluayBjb3JlL21lc2hlcy9GdWxsc2NyZWVuUGxhbmUuRnVsbHNjcmVlblBsYW5lI3JlbmRlck9yZGVyIHwgcmVuZGVyT3JkZXJ9XG4gKiAgIC0gVGhlbiwgdGhlIHRyYW5zcGFyZW50IHVucHJvamVjdGVkIE1lc2hlcyAoaS5lLiB0cmFuc3BhcmVudCB7QGxpbmsgY29yZS9tZXNoZXMvRnVsbHNjcmVlblBsYW5lLkZ1bGxzY3JlZW5QbGFuZSB8IEZ1bGxzY3JlZW5QbGFuZX0sIGlmIGFueSksIHNvcnRlZCBieSB0aGVpciB7QGxpbmsgY29yZS9tZXNoZXMvRnVsbHNjcmVlblBsYW5lLkZ1bGxzY3JlZW5QbGFuZSNyZW5kZXJPcmRlciB8IHJlbmRlck9yZGVyfVxuICogICAtIFRoZW4sIHRoZSBvcGFxdWUgcHJvamVjdGVkIE1lc2hlcyAoaS5lLiBvcGFxdWUge0BsaW5rIGNvcmUvbWVzaGVzL01lc2guTWVzaCB8IE1lc2h9LCB7QGxpbmsgRE9NTWVzaH0gb3Ige0BsaW5rIFBsYW5lfSksIHNvcnRlZCBieSB0aGVpciB7QGxpbmsgY29yZS9tZXNoZXMvTWVzaC5NZXNoI3JlbmRlck9yZGVyIHwgcmVuZGVyT3JkZXJ9XG4gKiAgIC0gRmluYWxseSwgdGhlIHRyYW5zcGFyZW50IHByb2plY3RlZCBNZXNoZXMgKGkuZS4gdHJhbnNwYXJlbnQge0BsaW5rIGNvcmUvbWVzaGVzL01lc2guTWVzaCB8IE1lc2h9LCB7QGxpbmsgRE9NTWVzaH0gb3Ige0BsaW5rIFBsYW5lfSksIHNvcnRlZCBieSB0aGVpciBaIHBvc2l0aW9uIGFuZCB0aGVuIHRoZWlyIHtAbGluayBjb3JlL21lc2hlcy9NZXNoLk1lc2gjcmVuZGVyT3JkZXIgfCByZW5kZXJPcmRlcn1cbiAqIC0gRmluYWxseSBhbGwgTWVzaGVzIHRoYXQgbmVlZCB0byBiZSByZW5kZXJlZCBkaXJlY3RseSB0byB0aGUge0BsaW5rIHJlbmRlclBhc3NFbnRyaWVzfSBzY3JlZW4gKHRoZSB7QGxpbmsgUmVuZGVyZXJ9IGN1cnJlbnQgdGV4dHVyZSksIGluIHRoZSBzYW1lIG9yZGVyIHRoYW4gYWJvdmUuXG4gKi9cbmV4cG9ydCBjbGFzcyBTY2VuZSB7XG4gIC8qKiB7QGxpbmsgUmVuZGVyZXJ9IHVzZWQgYnkgdGhpcyB7QGxpbmsgU2NlbmV9ICovXG4gIHJlbmRlcmVyOiBSZW5kZXJlclxuICAvKiogQXJyYXkgb2Yge0BsaW5rIENvbXB1dGVQYXNzfSB0byByZW5kZXIsIG9yZGVyZWQgYnkge0BsaW5rIENvbXB1dGVQYXNzI3JlbmRlck9yZGVyIHwgcmVuZGVyT3JkZXJ9ICovXG4gIGNvbXB1dGVQYXNzRW50cmllczogQ29tcHV0ZVBhc3NbXVxuICAvKipcbiAgICogQSB7QGxpbmsgUmVuZGVyUGFzc0VudHJpZXN9IG9iamVjdCB0aGF0IHdpbGwgY29udGFpbiBldmVyeSBNZXNoZXMgdGhhdCBuZWVkIHRvIGJlIGRyYXduLCBwdXQgaW5zaWRlIGVhY2ggb25lIG9mIG91ciB0aHJlZSBlbnRyaWVzIHR5cGUgYXJyYXlzOiAncGluZ1BvbmcnLCAncmVuZGVyVGFyZ2V0JyBhbmQgJ3NjcmVlbicuXG4gICAqIC0gVGhlIHtAbGluayBTY2VuZX0gd2lsbCBmaXJzdCByZW5kZXIgYWxsIHtAbGluayByZW5kZXJQYXNzRW50cmllc30gcGluZ1BvbmcgZW50cmllcyBNZXNoZXNcbiAgICogLSBUaGVuIGFsbCBNZXNoZXMgdGhhdCBuZWVkIHRvIGJlIHJlbmRlcmVkIGludG8gc3BlY2lmaWMge0BsaW5rIHJlbmRlclBhc3NFbnRyaWVzfSByZW5kZXJUYXJnZXQgZW50cmllc1xuICAgKiAtIEZpbmFsbHkgYWxsIE1lc2hlcyB0aGF0IG5lZWQgdG8gYmUgcmVuZGVyZWQgdG8gdGhlIHtAbGluayByZW5kZXJQYXNzRW50cmllc30gc2NyZWVuXG4gICAqL1xuICByZW5kZXJQYXNzRW50cmllczogUmVuZGVyUGFzc0VudHJpZXNcblxuICAvKipcbiAgICogU2NlbmUgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0ge0BsaW5rIFJlbmRlcmVyfSBvYmplY3Qgb3Ige0BsaW5rIEdQVUN1cnRhaW5zfSBjbGFzcyBvYmplY3QgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgU2NlbmV9XG4gICAqL1xuICBjb25zdHJ1Y3Rvcih7IHJlbmRlcmVyIH06IHsgcmVuZGVyZXI6IFJlbmRlcmVyIHwgR1BVQ3VydGFpbnMgfSkge1xuICAgIC8vIHdlIGNvdWxkIHBhc3Mgb3VyIGN1cnRhaW5zIG9iamVjdCBPUiBvdXIgY3VydGFpbnMgcmVuZGVyZXIgb2JqZWN0XG4gICAgcmVuZGVyZXIgPSAocmVuZGVyZXIgJiYgKHJlbmRlcmVyIGFzIEdQVUN1cnRhaW5zKS5yZW5kZXJlcikgfHwgKHJlbmRlcmVyIGFzIFJlbmRlcmVyKVxuXG4gICAgaXNSZW5kZXJlcihyZW5kZXJlciwgJ1NjZW5lJylcblxuICAgIHRoaXMucmVuZGVyZXIgPSByZW5kZXJlclxuXG4gICAgdGhpcy5jb21wdXRlUGFzc0VudHJpZXMgPSBbXVxuXG4gICAgdGhpcy5yZW5kZXJQYXNzRW50cmllcyA9IHtcbiAgICAgIC8qKiBBcnJheSBvZiB7QGxpbmsgUmVuZGVyUGFzc0VudHJ5fSB0aGF0IHdpbGwgaGFuZGxlIHtAbGluayBQaW5nUG9uZ1BsYW5lfS4gRWFjaCB7QGxpbmsgUGluZ1BvbmdQbGFuZX0gd2lsbCBiZSBhZGRlZCBhcyBhIGRpc3RpbmN0IHtAbGluayBSZW5kZXJQYXNzRW50cnl9IGhlcmUgKi9cbiAgICAgIHBpbmdQb25nOiBbXSBhcyBSZW5kZXJQYXNzRW50cnlbXSxcbiAgICAgIC8qKiBBcnJheSBvZiB7QGxpbmsgUmVuZGVyUGFzc0VudHJ5fSB0aGF0IHdpbGwgcmVuZGVyIHRvIGEgc3BlY2lmaWMge0BsaW5rIFJlbmRlclRhcmdldH0uIEVhY2gge0BsaW5rIFJlbmRlclRhcmdldH0gd2lsbCBiZSBhZGRlZCBhcyBhIGRpc3RpbmN0IHtAbGluayBSZW5kZXJQYXNzRW50cnl9IGhlcmUgKi9cbiAgICAgIHJlbmRlclRhcmdldDogW10gYXMgUmVuZGVyUGFzc0VudHJ5W10sXG4gICAgICAvKiogQXJyYXkgb2Yge0BsaW5rIFJlbmRlclBhc3NFbnRyeX0gdGhhdCB3aWxsIHJlbmRlciBkaXJlY3RseSB0byB0aGUgc2NyZWVuLiBPdXIgZmlyc3QgZW50cnkgd2lsbCBjb250YWluIGFsbCB0aGUgTWVzaGVzIHRoYXQgZG8gbm90IGhhdmUgYW55IHtAbGluayBSZW5kZXJUYXJnZXR9IGFzc2lnbmVkLiBGb2xsb3dpbmcgZW50cmllcyB3aWxsIGJlIGNyZWF0ZWQgZm9yIGV2ZXJ5IGdsb2JhbCB7QGxpbmsgU2hhZGVyUGFzc30gKi9cbiAgICAgIHNjcmVlbjogW1xuICAgICAgICAvLyBhZGQgb3VyIGJhc2ljIHNjZW5lIGVudHJ5XG4gICAgICAgIHtcbiAgICAgICAgICByZW5kZXJQYXNzOiB0aGlzLnJlbmRlcmVyLnJlbmRlclBhc3MsXG4gICAgICAgICAgcmVuZGVyVGV4dHVyZTogbnVsbCxcbiAgICAgICAgICBvbkJlZm9yZVJlbmRlclBhc3M6IG51bGwsXG4gICAgICAgICAgb25BZnRlclJlbmRlclBhc3M6IG51bGwsXG4gICAgICAgICAgZWxlbWVudDogbnVsbCwgLy8gZXhwbGljaXRseSBzZXQgdG8gbnVsbFxuICAgICAgICAgIHN0YWNrOiB7XG4gICAgICAgICAgICB1blByb2plY3RlZDoge1xuICAgICAgICAgICAgICBvcGFxdWU6IFtdLFxuICAgICAgICAgICAgICB0cmFuc3BhcmVudDogW10sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcHJvamVjdGVkOiB7XG4gICAgICAgICAgICAgIG9wYXF1ZTogW10sXG4gICAgICAgICAgICAgIHRyYW5zcGFyZW50OiBbXSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIF0gYXMgUmVuZGVyUGFzc0VudHJ5W10sXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgbnVtYmVyIG9mIG1lc2hlcyBhIHtAbGluayBSZW5kZXJQYXNzRW50cnkgfCByZW5kZXIgcGFzcyBlbnRyeX0gc2hvdWxkIGRyYXcuXG4gICAqIEBwYXJhbSByZW5kZXJQYXNzRW50cnkgLSBUaGUge0BsaW5rIFJlbmRlclBhc3NFbnRyeSB8IHJlbmRlciBwYXNzIGVudHJ5fSB0byB0ZXN0XG4gICAqL1xuICBnZXRSZW5kZXJQYXNzRW50cnlMZW5ndGgocmVuZGVyUGFzc0VudHJ5OiBSZW5kZXJQYXNzRW50cnkpOiBudW1iZXIge1xuICAgIGlmICghcmVuZGVyUGFzc0VudHJ5KSB7XG4gICAgICByZXR1cm4gMFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVuZGVyUGFzc0VudHJ5LmVsZW1lbnRcbiAgICAgICAgPyAxXG4gICAgICAgIDogcmVuZGVyUGFzc0VudHJ5LnN0YWNrLnVuUHJvamVjdGVkLm9wYXF1ZS5sZW5ndGggK1xuICAgICAgICAgICAgcmVuZGVyUGFzc0VudHJ5LnN0YWNrLnVuUHJvamVjdGVkLnRyYW5zcGFyZW50Lmxlbmd0aCArXG4gICAgICAgICAgICByZW5kZXJQYXNzRW50cnkuc3RhY2sucHJvamVjdGVkLm9wYXF1ZS5sZW5ndGggK1xuICAgICAgICAgICAgcmVuZGVyUGFzc0VudHJ5LnN0YWNrLnByb2plY3RlZC50cmFuc3BhcmVudC5sZW5ndGhcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQWRkIGEge0BsaW5rIENvbXB1dGVQYXNzfSB0byBvdXIgc2NlbmUge0BsaW5rIGNvbXB1dGVQYXNzRW50cmllc30gYXJyYXlcbiAgICogQHBhcmFtIGNvbXB1dGVQYXNzIC0ge0BsaW5rIENvbXB1dGVQYXNzfSB0byBhZGRcbiAgICovXG4gIGFkZENvbXB1dGVQYXNzKGNvbXB1dGVQYXNzOiBDb21wdXRlUGFzcykge1xuICAgIHRoaXMuY29tcHV0ZVBhc3NFbnRyaWVzLnB1c2goY29tcHV0ZVBhc3MpXG4gICAgdGhpcy5jb21wdXRlUGFzc0VudHJpZXMuc29ydCgoYSwgYikgPT4ge1xuICAgICAgaWYgKGEucmVuZGVyT3JkZXIgIT09IGIucmVuZGVyT3JkZXIpIHtcbiAgICAgICAgcmV0dXJuIGEucmVuZGVyT3JkZXIgLSBiLnJlbmRlck9yZGVyXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYS5pbmRleCAtIGIuaW5kZXhcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBDb21wdXRlUGFzc30gZnJvbSBvdXIgc2NlbmUge0BsaW5rIGNvbXB1dGVQYXNzRW50cmllc30gYXJyYXlcbiAgICogQHBhcmFtIGNvbXB1dGVQYXNzIC0ge0BsaW5rIENvbXB1dGVQYXNzfSB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZUNvbXB1dGVQYXNzKGNvbXB1dGVQYXNzOiBDb21wdXRlUGFzcykge1xuICAgIHRoaXMuY29tcHV0ZVBhc3NFbnRyaWVzID0gdGhpcy5jb21wdXRlUGFzc0VudHJpZXMuZmlsdGVyKChjUCkgPT4gY1AudXVpZCAhPT0gY29tcHV0ZVBhc3MudXVpZClcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgUmVuZGVyVGFyZ2V0fSB0byBvdXIgc2NlbmUge0BsaW5rIHJlbmRlclBhc3NFbnRyaWVzfSByZW5kZXJUYXJnZXQgYXJyYXkuXG4gICAqIEV2ZXJ5IE1lc2hlcyBsYXRlciBhZGRlZCB0byB0aGlzIHtAbGluayBSZW5kZXJUYXJnZXR9IHdpbGwgYmUgcmVuZGVyZWQgdG8gdGhlIHtAbGluayBSZW5kZXJUYXJnZXQjcmVuZGVyVGV4dHVyZSB8IFJlbmRlclRhcmdldCBSZW5kZXJUZXh0dXJlfSB1c2luZyB0aGUge0BsaW5rIFJlbmRlclRhcmdldCNyZW5kZXJQYXNzLmRlc2NyaXB0b3IgfCBSZW5kZXJUYXJnZXQgUmVuZGVyUGFzcyBkZXNjcmlwdG9yfVxuICAgKiBAcGFyYW0gcmVuZGVyVGFyZ2V0IC0ge0BsaW5rIFJlbmRlclRhcmdldH0gdG8gYWRkXG4gICAqL1xuICBhZGRSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0OiBSZW5kZXJUYXJnZXQpIHtcbiAgICAvLyBpZiBSVCBpcyBub3QgYWxyZWFkeSBpbiB0aGUgcmVuZGVyIHBhc3MgZW50cmllc1xuICAgIGlmICghdGhpcy5yZW5kZXJQYXNzRW50cmllcy5yZW5kZXJUYXJnZXQuZmluZCgoZW50cnkpID0+IGVudHJ5LnJlbmRlclBhc3MudXVpZCA9PT0gcmVuZGVyVGFyZ2V0LnJlbmRlclBhc3MudXVpZCkpXG4gICAgICB0aGlzLnJlbmRlclBhc3NFbnRyaWVzLnJlbmRlclRhcmdldC5wdXNoKHtcbiAgICAgICAgcmVuZGVyUGFzczogcmVuZGVyVGFyZ2V0LnJlbmRlclBhc3MsXG4gICAgICAgIHJlbmRlclRleHR1cmU6IHJlbmRlclRhcmdldC5yZW5kZXJUZXh0dXJlLFxuICAgICAgICBvbkJlZm9yZVJlbmRlclBhc3M6IG51bGwsXG4gICAgICAgIG9uQWZ0ZXJSZW5kZXJQYXNzOiBudWxsLFxuICAgICAgICBlbGVtZW50OiBudWxsLCAvLyBleHBsaWNpdGx5IHNldCB0byBudWxsXG4gICAgICAgIHN0YWNrOiB7XG4gICAgICAgICAgdW5Qcm9qZWN0ZWQ6IHtcbiAgICAgICAgICAgIG9wYXF1ZTogW10sXG4gICAgICAgICAgICB0cmFuc3BhcmVudDogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgICBwcm9qZWN0ZWQ6IHtcbiAgICAgICAgICAgIG9wYXF1ZTogW10sXG4gICAgICAgICAgICB0cmFuc3BhcmVudDogW10sXG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgIH0gYXMgUmVuZGVyUGFzc0VudHJ5KVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBSZW5kZXJUYXJnZXR9IGZyb20gb3VyIHNjZW5lIHtAbGluayByZW5kZXJQYXNzRW50cmllc30gcmVuZGVyVGFyZ2V0IGFycmF5LlxuICAgKiBAcGFyYW0gcmVuZGVyVGFyZ2V0IC0ge0BsaW5rIFJlbmRlclRhcmdldH0gdG8gYWRkXG4gICAqL1xuICByZW1vdmVSZW5kZXJUYXJnZXQocmVuZGVyVGFyZ2V0OiBSZW5kZXJUYXJnZXQpIHtcbiAgICB0aGlzLnJlbmRlclBhc3NFbnRyaWVzLnJlbmRlclRhcmdldCA9IHRoaXMucmVuZGVyUGFzc0VudHJpZXMucmVuZGVyVGFyZ2V0LmZpbHRlcihcbiAgICAgIChlbnRyeSkgPT4gZW50cnkucmVuZGVyUGFzcy51dWlkICE9PSByZW5kZXJUYXJnZXQucmVuZGVyUGFzcy51dWlkXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgY29ycmVjdCB7QGxpbmsgcmVuZGVyUGFzc0VudHJpZXMgfCByZW5kZXIgcGFzcyBlbnRyeX0gKGVpdGhlciB7QGxpbmsgcmVuZGVyUGFzc0VudHJpZXN9IHJlbmRlclRhcmdldCBvciB7QGxpbmsgcmVuZGVyUGFzc0VudHJpZXN9IHNjcmVlbikge0BsaW5rIFN0YWNrfSBvbnRvIHdoaWNoIHRoaXMgTWVzaCBzaG91bGQgYmUgYWRkZWQsIGRlcGVuZGluZyBvbiB3aGV0aGVyIGl0J3MgcHJvamVjdGVkIG9yIG5vdFxuICAgKiBAcGFyYW0gbWVzaCAtIE1lc2ggdG8gY2hlY2tcbiAgICogQHJldHVybnMgLSB0aGUgY29ycmVzcG9uZGluZyByZW5kZXIgcGFzcyBlbnRyeSB7QGxpbmsgU3RhY2t9XG4gICAqL1xuICBnZXRNZXNoUHJvamVjdGlvblN0YWNrKG1lc2g6IFByb2plY3RlZE1lc2gpOiBQcm9qZWN0aW9uU3RhY2sge1xuICAgIC8vIGZpcnN0IGdldCBjb3JyZWN0IHJlbmRlciBwYXNzIGVudHkgYW5kIHN0YWNrXG4gICAgY29uc3QgcmVuZGVyUGFzc0VudHJ5ID0gbWVzaC5yZW5kZXJUYXJnZXRcbiAgICAgID8gdGhpcy5yZW5kZXJQYXNzRW50cmllcy5yZW5kZXJUYXJnZXQuZmluZChcbiAgICAgICAgICAocGFzc0VudHJ5KSA9PiBwYXNzRW50cnkucmVuZGVyUGFzcy51dWlkID09PSBtZXNoLnJlbmRlclRhcmdldC5yZW5kZXJQYXNzLnV1aWRcbiAgICAgICAgKVxuICAgICAgOiB0aGlzLnJlbmRlclBhc3NFbnRyaWVzLnNjcmVlblswXVxuXG4gICAgY29uc3QgeyBzdGFjayB9ID0gcmVuZGVyUGFzc0VudHJ5XG5cbiAgICByZXR1cm4gbWVzaC5tYXRlcmlhbC5vcHRpb25zLnJlbmRlcmluZy51c2VQcm9qZWN0aW9uID8gc3RhY2sucHJvamVjdGVkIDogc3RhY2sudW5Qcm9qZWN0ZWRcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSBNZXNoIHRvIHRoZSBjb3JyZWN0IHtAbGluayByZW5kZXJQYXNzRW50cmllcyB8IHJlbmRlciBwYXNzIGVudHJ5fSB7QGxpbmsgU3RhY2t9IGFycmF5LlxuICAgKiBNZXNoZXMgYXJlIHRoZW4gb3JkZXJlZCBieSB0aGVpciB7QGxpbmsgY29yZS9tZXNoZXMvbWl4aW5zL01lc2hCYXNlTWl4aW4uTWVzaEJhc2VDbGFzcyNpbmRleCB8IGluZGV4ZXMgKG9yZGVyIG9mIGNyZWF0aW9uXX0sIHBvc2l0aW9uIGFsb25nIHRoZSBaIGF4aXMgaW4gY2FzZSB0aGV5IGFyZSB0cmFuc3BhcmVudCBhbmQgdGhlbiB7QGxpbmsgY29yZS9tZXNoZXMvbWl4aW5zL01lc2hCYXNlTWl4aW4uTWVzaEJhc2VDbGFzcyNyZW5kZXJPcmRlciB8IHJlbmRlck9yZGVyfVxuICAgKiBAcGFyYW0gbWVzaCAtIE1lc2ggdG8gYWRkXG4gICAqL1xuICBhZGRNZXNoKG1lc2g6IFByb2plY3RlZE1lc2gpIHtcbiAgICBjb25zdCBwcm9qZWN0aW9uU3RhY2sgPSB0aGlzLmdldE1lc2hQcm9qZWN0aW9uU3RhY2sobWVzaClcblxuICAgIC8vIHJlYnVpbGQgc3RhY2tcbiAgICBjb25zdCBzaW1pbGFyTWVzaGVzID0gbWVzaC50cmFuc3BhcmVudCA/IFsuLi5wcm9qZWN0aW9uU3RhY2sudHJhbnNwYXJlbnRdIDogWy4uLnByb2plY3Rpb25TdGFjay5vcGFxdWVdXG5cbiAgICAvLyBmaW5kIGlmIHRoZXJlJ3MgYWxyZWFkeSBhIHBsYW5lIHdpdGggdGhlIHNhbWUgcGlwZWxpbmUgd2l0aCBhIGZpbmRMYXN0SW5kZXggZnVuY3Rpb25cbiAgICBsZXQgc2libGluZ01lc2hJbmRleCA9IC0xXG5cbiAgICBmb3IgKGxldCBpID0gc2ltaWxhck1lc2hlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgaWYgKHNpbWlsYXJNZXNoZXNbaV0ubWF0ZXJpYWwucGlwZWxpbmVFbnRyeS5pbmRleCA9PT0gbWVzaC5tYXRlcmlhbC5waXBlbGluZUVudHJ5LmluZGV4KSB7XG4gICAgICAgIHNpYmxpbmdNZXNoSW5kZXggPSBpICsgMVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIGlmIGZpbmRJbmRleCByZXR1cm5lZCAtMSAobm8gbWF0Y2hpbmcgcGlwZWxpbmUpXG4gICAgc2libGluZ01lc2hJbmRleCA9IE1hdGgubWF4KDAsIHNpYmxpbmdNZXNoSW5kZXgpXG5cbiAgICAvLyBhZGQgaXQgdG8gb3VyIHN0YWNrIHBsYW5lIGFycmF5XG4gICAgc2ltaWxhck1lc2hlcy5zcGxpY2Uoc2libGluZ01lc2hJbmRleCwgMCwgbWVzaClcbiAgICBzaW1pbGFyTWVzaGVzLnNvcnQoKGEsIGIpID0+IGEuaW5kZXggLSBiLmluZGV4KVxuXG4gICAgLy8gc29ydCBieSBaIHBvcyBpZiB0cmFuc3BhcmVudFxuICAgIGlmICgobWVzaCBpbnN0YW5jZW9mIERPTU1lc2ggfHwgbWVzaCBpbnN0YW5jZW9mIFBsYW5lKSAmJiBtZXNoLnRyYW5zcGFyZW50KSB7XG4gICAgICBzaW1pbGFyTWVzaGVzLnNvcnQoXG4gICAgICAgIChhLCBiKSA9PiAoYiBhcyBET01Qcm9qZWN0ZWRNZXNoKS5kb2N1bWVudFBvc2l0aW9uLnogLSAoYSBhcyBET01Qcm9qZWN0ZWRNZXNoKS5kb2N1bWVudFBvc2l0aW9uLnpcbiAgICAgIClcbiAgICB9XG5cbiAgICAvLyB0aGVuIHNvcnQgYnkgdGhlaXIgcmVuZGVyIG9yZGVyXG4gICAgc2ltaWxhck1lc2hlcy5zb3J0KChhLCBiKSA9PiBhLnJlbmRlck9yZGVyIC0gYi5yZW5kZXJPcmRlcilcblxuICAgIG1lc2gudHJhbnNwYXJlbnQgPyAocHJvamVjdGlvblN0YWNrLnRyYW5zcGFyZW50ID0gc2ltaWxhck1lc2hlcykgOiAocHJvamVjdGlvblN0YWNrLm9wYXF1ZSA9IHNpbWlsYXJNZXNoZXMpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEgTWVzaCBmcm9tIG91ciB7QGxpbmsgU2NlbmV9XG4gICAqIEBwYXJhbSBtZXNoIC0gTWVzaCB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZU1lc2gobWVzaDogUHJvamVjdGVkTWVzaCkge1xuICAgIGNvbnN0IHByb2plY3Rpb25TdGFjayA9IHRoaXMuZ2V0TWVzaFByb2plY3Rpb25TdGFjayhtZXNoKVxuXG4gICAgaWYgKG1lc2gudHJhbnNwYXJlbnQpIHtcbiAgICAgIHByb2plY3Rpb25TdGFjay50cmFuc3BhcmVudCA9IHByb2plY3Rpb25TdGFjay50cmFuc3BhcmVudC5maWx0ZXIoKG0pID0+IG0udXVpZCAhPT0gbWVzaC51dWlkKVxuICAgIH0gZWxzZSB7XG4gICAgICBwcm9qZWN0aW9uU3RhY2sub3BhcXVlID0gcHJvamVjdGlvblN0YWNrLm9wYXF1ZS5maWx0ZXIoKG0pID0+IG0udXVpZCAhPT0gbWVzaC51dWlkKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgU2hhZGVyUGFzc30gdG8gb3VyIHNjZW5lIHtAbGluayByZW5kZXJQYXNzRW50cmllc30gc2NyZWVuIGFycmF5LlxuICAgKiBCZWZvcmUgcmVuZGVyaW5nIHRoZSB7QGxpbmsgU2hhZGVyUGFzc30sIHdlIHdpbGwgY29weSB0aGUgY29ycmVjdCBpbnB1dCB0ZXh0dXJlIGludG8gaXRzIHtAbGluayBTaGFkZXJQYXNzI3JlbmRlclRleHR1cmUgfCByZW5kZXJUZXh0dXJlfVxuICAgKiBUaGlzIGFsc28gaGFuZGxlcyB0aGUge0BsaW5rIHJlbmRlclBhc3NFbnRyaWVzfSBzY3JlZW4gYXJyYXkgZW50cmllcyBvcmRlcjogV2Ugd2lsbCBmaXJzdCBkcmF3IHNlbGVjdGl2ZSBwYXNzZXMsIHRoZW4gb3VyIG1haW4gc2NyZWVuIHBhc3MgYW5kIGZpbmFsbHkgZ2xvYmFsIHBvc3QgcHJvY2Vzc2luZyBwYXNzZXMuXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcC9zYW5kYm94L3dlYmdwdS1yZW5kZXItdG8tMi10ZXh0dXJlcy13aXRob3V0LXRleHR1cmUtY29weS1jNHN4NHM/ZmlsZT0lMkZzcmMlMkZpbmRleC5qcyUzQTEwJTJDNCB8IG1pbmltYWwgY29kZSBleGFtcGxlfVxuICAgKiBAcGFyYW0gc2hhZGVyUGFzcyAtIHtAbGluayBTaGFkZXJQYXNzfSB0byBhZGRcbiAgICovXG4gIGFkZFNoYWRlclBhc3Moc2hhZGVyUGFzczogU2hhZGVyUGFzcykge1xuICAgIGNvbnN0IG9uQmVmb3JlUmVuZGVyUGFzcyA9IHNoYWRlclBhc3MucmVuZGVyVGFyZ2V0XG4gICAgICA/IG51bGxcbiAgICAgIDogKGNvbW1hbmRFbmNvZGVyLCBzd2FwQ2hhaW5UZXh0dXJlKSA9PiB7XG4gICAgICAgICAgLy8gZHJhdyB0aGUgY29udGVudCBpbnRvIG91ciByZW5kZXIgdGV4dHVyZVxuICAgICAgICAgIC8vIGlmIGl0J3MgYSBnbG9iYWwgcG9zdCBwcm9jZXNzaW5nIHBhc3MsIGNvcHkgdGhlIGNvbnRleHQgY3VycmVudCB0ZXh0dXJlIGludG8gaXRzIHJlbmRlclRleHR1cmVcbiAgICAgICAgICBpZiAoc2hhZGVyUGFzcy5yZW5kZXJUZXh0dXJlKSB7XG4gICAgICAgICAgICBjb21tYW5kRW5jb2Rlci5jb3B5VGV4dHVyZVRvVGV4dHVyZShcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRleHR1cmU6IHN3YXBDaGFpblRleHR1cmUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlOiBzaGFkZXJQYXNzLnJlbmRlclRleHR1cmUudGV4dHVyZSxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgW3NoYWRlclBhc3MucmVuZGVyVGV4dHVyZS5zaXplLndpZHRoLCBzaGFkZXJQYXNzLnJlbmRlclRleHR1cmUuc2l6ZS5oZWlnaHRdXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaWYgd2Ugd2FudCB0byBwb3N0IHByb2Nlc3MgdGhlIHdob2xlIHNjZW5lLCBjbGVhciByZW5kZXIgcGFzcyBjb250ZW50XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5wb3N0UHJvY2Vzc2luZ1Bhc3Muc2V0TG9hZE9wKCdjbGVhcicpXG4gICAgICAgIH1cblxuICAgIGNvbnN0IG9uQWZ0ZXJSZW5kZXJQYXNzID0gc2hhZGVyUGFzcy5yZW5kZXJUYXJnZXRcbiAgICAgID8gKGNvbW1hbmRFbmNvZGVyLCBzd2FwQ2hhaW5UZXh0dXJlKSA9PiB7XG4gICAgICAgICAgLy8gaWYgd2UgcmVuZGVyIHRvIGEgdGFyZ2V0LCBjb3B5IHRoZSByZXN1bHQgc28gd2UgY2FuIGNoYWluIHJlbmRlciB0byB0ZXh0dXJlc1xuICAgICAgICAgIGlmIChzaGFkZXJQYXNzLnJlbmRlclRhcmdldCAmJiBzaGFkZXJQYXNzLnJlbmRlclRhcmdldC5yZW5kZXJUZXh0dXJlKSB7XG4gICAgICAgICAgICBjb21tYW5kRW5jb2Rlci5jb3B5VGV4dHVyZVRvVGV4dHVyZShcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHRleHR1cmU6IHN3YXBDaGFpblRleHR1cmUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICB0ZXh0dXJlOiBzaGFkZXJQYXNzLnJlbmRlclRhcmdldC5yZW5kZXJUZXh0dXJlLnRleHR1cmUsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIFtzaGFkZXJQYXNzLnJlbmRlclRhcmdldC5yZW5kZXJUZXh0dXJlLnNpemUud2lkdGgsIHNoYWRlclBhc3MucmVuZGVyVGFyZ2V0LnJlbmRlclRleHR1cmUuc2l6ZS5oZWlnaHRdXG4gICAgICAgICAgICApXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICA6IG51bGxcblxuICAgIGNvbnN0IHNoYWRlclBhc3NFbnRyeSA9IHtcbiAgICAgIHJlbmRlclBhc3M6IHRoaXMucmVuZGVyZXIucG9zdFByb2Nlc3NpbmdQYXNzLCAvLyByZW5kZXIgZGlyZWN0bHkgdG8gc2NyZWVuXG4gICAgICByZW5kZXJUZXh0dXJlOiBudWxsLFxuICAgICAgb25CZWZvcmVSZW5kZXJQYXNzLFxuICAgICAgb25BZnRlclJlbmRlclBhc3MsXG4gICAgICBlbGVtZW50OiBzaGFkZXJQYXNzLFxuICAgICAgc3RhY2s6IG51bGwsIC8vIGV4cGxpY2l0bHkgc2V0IHRvIG51bGxcbiAgICB9XG5cbiAgICB0aGlzLnJlbmRlclBhc3NFbnRyaWVzLnNjcmVlbi5wdXNoKHNoYWRlclBhc3NFbnRyeSlcblxuICAgIC8vIHNjcmVlbiBwYXNzZXMgYXJlIHNvcnRlZCBieSAyIGNyaXRlcmlhXG4gICAgLy8gZmlyc3Qgd2UgZHJhdyByZW5kZXIgcGFzc2VzIHRoYXQgaGF2ZSBhIHJlbmRlciB0YXJnZXQgT1Igb3VyIHNjZW5lIHBhc3MsIG9yZGVyZWQgYnkgcmVuZGVyT3JkZXJcbiAgICAvLyB0aGVuIHdlIGRyYXcgb3VyIGZ1bGwgcG9zdCBwcm9jZXNzaW5nIHBhc3MsIG9yZGVyZWQgYnkgcmVuZGVyT3JkZXJcbiAgICB0aGlzLnJlbmRlclBhc3NFbnRyaWVzLnNjcmVlbi5zb3J0KChhLCBiKSA9PiB7XG4gICAgICBjb25zdCBpc1Bvc3RQcm9BID0gYS5lbGVtZW50ICYmICFhLmVsZW1lbnQucmVuZGVyVGFyZ2V0XG4gICAgICBjb25zdCByZW5kZXJPcmRlckEgPSBhLmVsZW1lbnQgPyBhLmVsZW1lbnQucmVuZGVyT3JkZXIgOiAwXG4gICAgICBjb25zdCBpbmRleEEgPSBhLmVsZW1lbnQgPyBhLmVsZW1lbnQuaW5kZXggOiAwXG5cbiAgICAgIGNvbnN0IGlzUG9zdFByb0IgPSBiLmVsZW1lbnQgJiYgIWIuZWxlbWVudC5yZW5kZXJUYXJnZXRcbiAgICAgIGNvbnN0IHJlbmRlck9yZGVyQiA9IGIuZWxlbWVudCA/IGIuZWxlbWVudC5yZW5kZXJPcmRlciA6IDBcbiAgICAgIGNvbnN0IGluZGV4QiA9IGIuZWxlbWVudCA/IGIuZWxlbWVudC5pbmRleCA6IDBcblxuICAgICAgaWYgKGlzUG9zdFByb0EgJiYgIWlzUG9zdFByb0IpIHtcbiAgICAgICAgcmV0dXJuIDFcbiAgICAgIH0gZWxzZSBpZiAoIWlzUG9zdFByb0EgJiYgaXNQb3N0UHJvQikge1xuICAgICAgICByZXR1cm4gLTFcbiAgICAgIH0gZWxzZSBpZiAocmVuZGVyT3JkZXJBICE9PSByZW5kZXJPcmRlckIpIHtcbiAgICAgICAgcmV0dXJuIHJlbmRlck9yZGVyQSAtIHJlbmRlck9yZGVyQlxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGluZGV4QSAtIGluZGV4QlxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEge0BsaW5rIFNoYWRlclBhc3N9IGZyb20gb3VyIHNjZW5lIHtAbGluayByZW5kZXJQYXNzRW50cmllc30gc2NyZWVuIGFycmF5XG4gICAqIEBwYXJhbSBzaGFkZXJQYXNzIC0ge0BsaW5rIFNoYWRlclBhc3N9IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlU2hhZGVyUGFzcyhzaGFkZXJQYXNzOiBTaGFkZXJQYXNzKSB7XG4gICAgdGhpcy5yZW5kZXJQYXNzRW50cmllcy5zY3JlZW4gPSB0aGlzLnJlbmRlclBhc3NFbnRyaWVzLnNjcmVlbi5maWx0ZXIoXG4gICAgICAoZW50cnkpID0+ICFlbnRyeS5lbGVtZW50IHx8IGVudHJ5LmVsZW1lbnQudXVpZCAhPT0gc2hhZGVyUGFzcy51dWlkXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBQaW5nUG9uZ1BsYW5lfSB0byBvdXIgc2NlbmUge0BsaW5rIHJlbmRlclBhc3NFbnRyaWVzfSBwaW5nUG9uZyBhcnJheS5cbiAgICogQWZ0ZXIgcmVuZGVyaW5nIHRoZSB7QGxpbmsgUGluZ1BvbmdQbGFuZX0sIHdlIHdpbGwgY29weSB0aGUgY29udGV4dCBjdXJyZW50IHRleHR1cmUgaW50byBpdHMge0BsaW5rIFBpbmdQb25nUGxhbmUjcmVuZGVyVGV4dHVyZSB8IHJlbmRlclRleHR1cmV9IHNvIHdlJ2xsIGJlIGFibGUgdG8gdXNlIGl0IGFzIGFuIGlucHV0IGZvciB0aGUgbmV4dCBwYXNzXG4gICAqIEBzZWUge0BsaW5rIGh0dHBzOi8vY29kZXNhbmRib3guaW8vcC9zYW5kYm94L3dlYmdwdS1yZW5kZXItcGluZy1wb25nLXRvLXRleHR1cmUtdXNlLWluLXF1YWQtZ3dqeDlwIHwgbWluaW1hbCBjb2RlIGV4YW1wbGV9XG4gICAqIEBwYXJhbSBwaW5nUG9uZ1BsYW5lXG4gICAqL1xuICBhZGRQaW5nUG9uZ1BsYW5lKHBpbmdQb25nUGxhbmU6IFBpbmdQb25nUGxhbmUpIHtcbiAgICB0aGlzLnJlbmRlclBhc3NFbnRyaWVzLnBpbmdQb25nLnB1c2goe1xuICAgICAgcmVuZGVyUGFzczogcGluZ1BvbmdQbGFuZS5yZW5kZXJUYXJnZXQucmVuZGVyUGFzcyxcbiAgICAgIHJlbmRlclRleHR1cmU6IHBpbmdQb25nUGxhbmUucmVuZGVyVGFyZ2V0LnJlbmRlclRleHR1cmUsXG4gICAgICBvbkJlZm9yZVJlbmRlclBhc3M6IG51bGwsXG4gICAgICBvbkFmdGVyUmVuZGVyUGFzczogKGNvbW1hbmRFbmNvZGVyLCBzd2FwQ2hhaW5UZXh0dXJlKSA9PiB7XG4gICAgICAgIC8vIENvcHkgdGhlIHJlbmRlcmluZyByZXN1bHRzIGZyb20gdGhlIHN3YXBDaGFpblRleHR1cmUgaW50byBvdXIgfHBpbmdQb25nUGxhbmUgdGV4dHVyZXwuXG4gICAgICAgIGNvbW1hbmRFbmNvZGVyLmNvcHlUZXh0dXJlVG9UZXh0dXJlKFxuICAgICAgICAgIHtcbiAgICAgICAgICAgIHRleHR1cmU6IHN3YXBDaGFpblRleHR1cmUsXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICB0ZXh0dXJlOiBwaW5nUG9uZ1BsYW5lLnJlbmRlclRleHR1cmUudGV4dHVyZSxcbiAgICAgICAgICB9LFxuICAgICAgICAgIFtwaW5nUG9uZ1BsYW5lLnJlbmRlclRleHR1cmUuc2l6ZS53aWR0aCwgcGluZ1BvbmdQbGFuZS5yZW5kZXJUZXh0dXJlLnNpemUuaGVpZ2h0XVxuICAgICAgICApXG4gICAgICB9LFxuICAgICAgZWxlbWVudDogcGluZ1BvbmdQbGFuZSxcbiAgICAgIHN0YWNrOiBudWxsLCAvLyBleHBsaWNpdGx5IHNldCB0byBudWxsXG4gICAgfSBhcyBSZW5kZXJQYXNzRW50cnkpXG5cbiAgICAvLyBzb3J0IGJ5IHRoZWlyIHJlbmRlciBvcmRlclxuICAgIHRoaXMucmVuZGVyUGFzc0VudHJpZXMucGluZ1Bvbmcuc29ydCgoYSwgYikgPT4gYS5lbGVtZW50LnJlbmRlck9yZGVyIC0gYi5lbGVtZW50LnJlbmRlck9yZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBQaW5nUG9uZ1BsYW5lfSBmcm9tIG91ciBzY2VuZSB7QGxpbmsgcmVuZGVyUGFzc0VudHJpZXN9IHBpbmdQb25nIGFycmF5LlxuICAgKiBAcGFyYW0gcGluZ1BvbmdQbGFuZSAtIHtAbGluayBQaW5nUG9uZ1BsYW5lfSB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZVBpbmdQb25nUGxhbmUocGluZ1BvbmdQbGFuZTogUGluZ1BvbmdQbGFuZSkge1xuICAgIHRoaXMucmVuZGVyUGFzc0VudHJpZXMucGluZ1BvbmcgPSB0aGlzLnJlbmRlclBhc3NFbnRyaWVzLnBpbmdQb25nLmZpbHRlcihcbiAgICAgIChlbnRyeSkgPT4gZW50cnkuZWxlbWVudC51dWlkICE9PSBwaW5nUG9uZ1BsYW5lLnV1aWRcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogR2V0IGFueSByZW5kZXJlZCBvYmplY3Qgb3Ige0BsaW5rIFJlbmRlclRhcmdldH0ge0BsaW5rIFJlbmRlclBhc3NFbnRyeX0uIFVzZWZ1bCB0byBvdmVycmlkZSBhIHtAbGluayBSZW5kZXJQYXNzRW50cnkjb25CZWZvcmVSZW5kZXJQYXNzIHwgUmVuZGVyUGFzc0VudHJ5IG9uQmVmb3JlUmVuZGVyUGFzc30gb3Ige0BsaW5rIFJlbmRlclBhc3NFbnRyeSNvbkFmdGVyUmVuZGVyUGFzcyB8IFJlbmRlclBhc3NFbnRyeSBvbkFmdGVyUmVuZGVyUGFzc30gZGVmYXVsdCBiZWhhdmlvci5cbiAgICogQHBhcmFtIG9iamVjdCAtIFRoZSBvYmplY3QgZnJvbSB3aGljaCB3ZSB3YW50IHRvIGdldCB0aGUgcGFyZW50TWVzaCB7QGxpbmsgUmVuZGVyUGFzc0VudHJ5fVxuICAgKiBAcmV0dXJucyAtIHRoZSB7QGxpbmsgUmVuZGVyUGFzc0VudHJ5fSBpZiBmb3VuZFxuICAgKi9cbiAgZ2V0T2JqZWN0UmVuZGVyUGFzc0VudHJ5KG9iamVjdDogUmVuZGVyZWRNZXNoIHwgUmVuZGVyVGFyZ2V0KTogUmVuZGVyUGFzc0VudHJ5IHwgdW5kZWZpbmVkIHtcbiAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgUmVuZGVyVGFyZ2V0KSB7XG4gICAgICByZXR1cm4gdGhpcy5yZW5kZXJQYXNzRW50cmllcy5yZW5kZXJUYXJnZXQuZmluZCgoZW50cnkpID0+IGVudHJ5LnJlbmRlclBhc3MudXVpZCA9PT0gb2JqZWN0LnJlbmRlclBhc3MudXVpZClcbiAgICB9IGVsc2UgaWYgKG9iamVjdCBpbnN0YW5jZW9mIFBpbmdQb25nUGxhbmUpIHtcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclBhc3NFbnRyaWVzLnBpbmdQb25nLmZpbmQoKGVudHJ5KSA9PiBlbnRyeS5lbGVtZW50LnV1aWQgPT09IG9iamVjdC51dWlkKVxuICAgIH0gZWxzZSBpZiAob2JqZWN0IGluc3RhbmNlb2YgU2hhZGVyUGFzcykge1xuICAgICAgcmV0dXJuIHRoaXMucmVuZGVyUGFzc0VudHJpZXMuc2NyZWVuLmZpbmQoKGVudHJ5KSA9PiBlbnRyeS5lbGVtZW50Py51dWlkID09PSBvYmplY3QudXVpZClcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc3QgZW50cnlUeXBlID0gb2JqZWN0LnJlbmRlclRhcmdldCA/ICdyZW5kZXJUYXJnZXQnIDogJ3NjcmVlbidcbiAgICAgIHJldHVybiB0aGlzLnJlbmRlclBhc3NFbnRyaWVzW2VudHJ5VHlwZV0uZmluZCgoZW50cnkpID0+IHtcbiAgICAgICAgcmV0dXJuIFtcbiAgICAgICAgICAuLi5lbnRyeS5zdGFjay51blByb2plY3RlZC5vcGFxdWUsXG4gICAgICAgICAgLi4uZW50cnkuc3RhY2sudW5Qcm9qZWN0ZWQudHJhbnNwYXJlbnQsXG4gICAgICAgICAgLi4uZW50cnkuc3RhY2sucHJvamVjdGVkLm9wYXF1ZSxcbiAgICAgICAgICAuLi5lbnRyeS5zdGFjay5wcm9qZWN0ZWQudHJhbnNwYXJlbnQsXG4gICAgICAgIF0uc29tZSgobWVzaCkgPT4gbWVzaC51dWlkID09PSBvYmplY3QudXVpZClcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEhlcmUgd2UgcmVuZGVyIGEge0BsaW5rIFJlbmRlclBhc3NFbnRyeX06XG4gICAqIC0gU2V0IGl0cyB7QGxpbmsgUmVuZGVyUGFzcyNkZXNjcmlwdG9yIHwgcmVuZGVyUGFzcyBkZXNjcmlwdG9yfSB2aWV3IG9yIHJlc29sdmVUYXJnZXQgYW5kIGdldCBpdCBhdCBhcyBzd2FwIGNoYWluIHRleHR1cmVcbiAgICogLSBFeGVjdXRlIHtAbGluayBSZW5kZXJQYXNzRW50cnkjb25CZWZvcmVSZW5kZXJQYXNzIHwgb25CZWZvcmVSZW5kZXJQYXNzfSBjYWxsYmFjayBpZiBzcGVjaWZpZWRcbiAgICogLSBCZWdpbiB0aGUge0BsaW5rIEdQVVJlbmRlclBhc3NFbmNvZGVyIHwgR1BVIHJlbmRlciBwYXNzIGVuY29kZXJ9IHVzaW5nIG91ciB7QGxpbmsgUmVuZGVyUGFzcyNkZXNjcmlwdG9yIHwgcmVuZGVyUGFzcyBkZXNjcmlwdG9yfVxuICAgKiAtIFJlbmRlciB0aGUgc2luZ2xlIGVsZW1lbnQgaWYgc3BlY2lmaWVkIG9yIHRoZSByZW5kZXIgcGFzcyBlbnRyeSB7QGxpbmsgU3RhY2t9OiBkcmF3IHVucHJvamVjdGVkIG9wYXF1ZSAvIHRyYW5zcGFyZW50IG1lc2hlcyBmaXJzdCwgdGhlbiBzZXQgdGhlIHtAbGluayBDYW1lcmFSZW5kZXJlciNjYW1lcmFCaW5kR3JvdXAgfCBjYW1lcmEgYmluZCBncm91cH0gYW5kIGRyYXcgcHJvamVjdGVkIG9wYXF1ZSAvIHRyYW5zcGFyZW50IG1lc2hlc1xuICAgKiAtIEVuZCB0aGUge0BsaW5rIEdQVVJlbmRlclBhc3NFbmNvZGVyIHwgR1BVIHJlbmRlciBwYXNzIGVuY29kZXJ9XG4gICAqIC0gRXhlY3V0ZSB7QGxpbmsgUmVuZGVyUGFzc0VudHJ5I29uQWZ0ZXJSZW5kZXJQYXNzIHwgb25BZnRlclJlbmRlclBhc3N9IGNhbGxiYWNrIGlmIHNwZWNpZmllZFxuICAgKiAtIFJlc2V0IHtAbGluayBjb3JlL3BpcGVsaW5lcy9QaXBlbGluZU1hbmFnZXIuUGlwZWxpbmVNYW5hZ2VyI2N1cnJlbnRQaXBlbGluZUluZGV4IHwgcGlwZWxpbmUgbWFuYWdlciBjdXJyZW50IHBpcGVsaW5lfVxuICAgKiBAcGFyYW0gY29tbWFuZEVuY29kZXIgLSBjdXJyZW50IHtAbGluayBHUFVDb21tYW5kRW5jb2Rlcn1cbiAgICogQHBhcmFtIHJlbmRlclBhc3NFbnRyeSAtIHtAbGluayBSZW5kZXJQYXNzRW50cnl9IHRvIHJlbmRlclxuICAgKi9cbiAgcmVuZGVyU2luZ2xlUGFzc0VudHJ5KGNvbW1hbmRFbmNvZGVyOiBHUFVDb21tYW5kRW5jb2RlciwgcmVuZGVyUGFzc0VudHJ5OiBSZW5kZXJQYXNzRW50cnkpIHtcbiAgICAvLyBzZXQgdGhlIHBhc3MgdGV4dHVyZSB0byByZW5kZXIgdG9cbiAgICBjb25zdCBzd2FwQ2hhaW5UZXh0dXJlID0gdGhpcy5yZW5kZXJlci5zZXRSZW5kZXJQYXNzQ3VycmVudFRleHR1cmUoXG4gICAgICByZW5kZXJQYXNzRW50cnkucmVuZGVyUGFzcyxcbiAgICAgIHJlbmRlclBhc3NFbnRyeS5yZW5kZXJUZXh0dXJlPy50ZXh0dXJlXG4gICAgKVxuXG4gICAgcmVuZGVyUGFzc0VudHJ5Lm9uQmVmb3JlUmVuZGVyUGFzcyAmJiByZW5kZXJQYXNzRW50cnkub25CZWZvcmVSZW5kZXJQYXNzKGNvbW1hbmRFbmNvZGVyLCBzd2FwQ2hhaW5UZXh0dXJlKVxuXG4gICAgLy8gbm93IGJlZ2luIG91ciBhY3R1YWwgcmVuZGVyIHBhc3NcbiAgICBjb25zdCBwYXNzID0gY29tbWFuZEVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKHJlbmRlclBhc3NFbnRyeS5yZW5kZXJQYXNzLmRlc2NyaXB0b3IpXG4gICAgIXRoaXMucmVuZGVyZXIucHJvZHVjdGlvbiAmJlxuICAgICAgcGFzcy5wdXNoRGVidWdHcm91cChcbiAgICAgICAgcmVuZGVyUGFzc0VudHJ5LmVsZW1lbnRcbiAgICAgICAgICA/IGAke3JlbmRlclBhc3NFbnRyeS5lbGVtZW50Lm9wdGlvbnMubGFiZWx9IHJlbmRlciBwYXNzIHVzaW5nICR7cmVuZGVyUGFzc0VudHJ5LnJlbmRlclBhc3Mub3B0aW9ucy5sYWJlbH0gZGVzY3JpcHRvcmBcbiAgICAgICAgICA6IGBSZW5kZXIgc3RhY2sgcGFzcyB1c2luZyAke3JlbmRlclBhc3NFbnRyeS5yZW5kZXJQYXNzLm9wdGlvbnMubGFiZWx9JHtcbiAgICAgICAgICAgICAgcmVuZGVyUGFzc0VudHJ5LnJlbmRlclRleHR1cmUgPyAnIG9udG8gJyArIHJlbmRlclBhc3NFbnRyeS5yZW5kZXJUZXh0dXJlLm9wdGlvbnMubGFiZWwgOiAnJ1xuICAgICAgICAgICAgfWBcbiAgICAgIClcblxuICAgIC8vIHBhc3MgZW50cmllcyBjYW4gaGF2ZSBhIHNpbmdsZSBlbGVtZW50IG9yIGEgc3RhY2tcbiAgICBpZiAocmVuZGVyUGFzc0VudHJ5LmVsZW1lbnQpIHtcbiAgICAgIHJlbmRlclBhc3NFbnRyeS5lbGVtZW50LnJlbmRlcihwYXNzKVxuICAgIH0gZWxzZSBpZiAocmVuZGVyUGFzc0VudHJ5LnN0YWNrKSB7XG4gICAgICAvLyBkcmF3IHVuUHJvamVjdGVkIHJlZ3VsYXIgbWVzaGVzXG4gICAgICByZW5kZXJQYXNzRW50cnkuc3RhY2sudW5Qcm9qZWN0ZWQub3BhcXVlLmZvckVhY2goKG1lc2gpID0+IG1lc2gucmVuZGVyKHBhc3MpKVxuICAgICAgcmVuZGVyUGFzc0VudHJ5LnN0YWNrLnVuUHJvamVjdGVkLnRyYW5zcGFyZW50LmZvckVhY2goKG1lc2gpID0+IG1lc2gucmVuZGVyKHBhc3MpKVxuXG4gICAgICAvLyB0aGVuIGRyYXcgcHJvamVjdGVkIG1lc2hlc1xuICAgICAgaWYgKHJlbmRlclBhc3NFbnRyeS5zdGFjay5wcm9qZWN0ZWQub3BhcXVlLmxlbmd0aCB8fCByZW5kZXJQYXNzRW50cnkuc3RhY2sucHJvamVjdGVkLnRyYW5zcGFyZW50Lmxlbmd0aCkge1xuICAgICAgICBpZiAoKHRoaXMucmVuZGVyZXIgYXMgQ2FtZXJhUmVuZGVyZXIpLmNhbWVyYUJpbmRHcm91cCkge1xuICAgICAgICAgIC8vIHNldCBjYW1lcmEgYmluZCBncm91cCBvbmNlXG4gICAgICAgICAgcGFzcy5zZXRCaW5kR3JvdXAoXG4gICAgICAgICAgICAodGhpcy5yZW5kZXJlciBhcyBDYW1lcmFSZW5kZXJlcikuY2FtZXJhQmluZEdyb3VwLmluZGV4LFxuICAgICAgICAgICAgKHRoaXMucmVuZGVyZXIgYXMgQ2FtZXJhUmVuZGVyZXIpLmNhbWVyYUJpbmRHcm91cC5iaW5kR3JvdXBcbiAgICAgICAgICApXG4gICAgICAgIH1cblxuICAgICAgICByZW5kZXJQYXNzRW50cnkuc3RhY2sucHJvamVjdGVkLm9wYXF1ZS5mb3JFYWNoKChtZXNoKSA9PiBtZXNoLnJlbmRlcihwYXNzKSlcbiAgICAgICAgcmVuZGVyUGFzc0VudHJ5LnN0YWNrLnByb2plY3RlZC50cmFuc3BhcmVudC5mb3JFYWNoKChtZXNoKSA9PiBtZXNoLnJlbmRlcihwYXNzKSlcbiAgICAgIH1cbiAgICB9XG5cbiAgICAhdGhpcy5yZW5kZXJlci5wcm9kdWN0aW9uICYmIHBhc3MucG9wRGVidWdHcm91cCgpXG4gICAgcGFzcy5lbmQoKVxuXG4gICAgcmVuZGVyUGFzc0VudHJ5Lm9uQWZ0ZXJSZW5kZXJQYXNzICYmIHJlbmRlclBhc3NFbnRyeS5vbkFmdGVyUmVuZGVyUGFzcyhjb21tYW5kRW5jb2Rlciwgc3dhcENoYWluVGV4dHVyZSlcblxuICAgIHRoaXMucmVuZGVyZXIucGlwZWxpbmVNYW5hZ2VyLnJlc2V0Q3VycmVudFBpcGVsaW5lKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgb3VyIHtAbGluayBTY2VuZX1cbiAgICogLSBSZW5kZXIge0BsaW5rIGNvbXB1dGVQYXNzRW50cmllc30gZmlyc3RcbiAgICogLSBUaGVuIG91ciB7QGxpbmsgcmVuZGVyUGFzc0VudHJpZXN9XG4gICAqIEBwYXJhbSBjb21tYW5kRW5jb2RlciAtIGN1cnJlbnQge0BsaW5rIEdQVUNvbW1hbmRFbmNvZGVyfVxuICAgKi9cbiAgcmVuZGVyKGNvbW1hbmRFbmNvZGVyOiBHUFVDb21tYW5kRW5jb2Rlcikge1xuICAgIHRoaXMuY29tcHV0ZVBhc3NFbnRyaWVzLmZvckVhY2goKGNvbXB1dGVQYXNzKSA9PiB7XG4gICAgICBjb25zdCBwYXNzID0gY29tbWFuZEVuY29kZXIuYmVnaW5Db21wdXRlUGFzcygpXG4gICAgICBjb21wdXRlUGFzcy5yZW5kZXIocGFzcylcbiAgICAgIHBhc3MuZW5kKClcblxuICAgICAgY29tcHV0ZVBhc3MuY29weUJ1ZmZlclRvUmVzdWx0KGNvbW1hbmRFbmNvZGVyKVxuXG4gICAgICB0aGlzLnJlbmRlcmVyLnBpcGVsaW5lTWFuYWdlci5yZXNldEN1cnJlbnRQaXBlbGluZSgpXG4gICAgfSlcblxuICAgIGZvciAoY29uc3QgcmVuZGVyUGFzc0VudHJ5VHlwZSBpbiB0aGlzLnJlbmRlclBhc3NFbnRyaWVzKSB7XG4gICAgICBsZXQgcGFzc0RyYXduQ291bnQgPSAwXG5cbiAgICAgIHRoaXMucmVuZGVyUGFzc0VudHJpZXNbcmVuZGVyUGFzc0VudHJ5VHlwZV0uZm9yRWFjaCgocmVuZGVyUGFzc0VudHJ5KSA9PiB7XG4gICAgICAgIC8vIGVhcmx5IGJhaWwgaWYgdGhlcmUncyBub3RoaW5nIHRvIGRyYXdcbiAgICAgICAgaWYgKCF0aGlzLmdldFJlbmRlclBhc3NFbnRyeUxlbmd0aChyZW5kZXJQYXNzRW50cnkpKSByZXR1cm5cblxuICAgICAgICAvLyBpZiB3ZSdyZSBkcmF3aW5nIHRvIHNjcmVlbiBhbmQgaXQncyBub3Qgb3VyIGZpcnN0IHBhc3MsIGxvYWQgcmVzdWx0IGZyb20gcHJldmlvdXMgcGFzc2VzXG4gICAgICAgIC8vIHBvc3QgcHJvY2Vzc2luZyBzY2VuZSBwYXNzIHdpbGwgY2xlYXIgY29udGVudCBpbnNpZGUgb25CZWZvcmVSZW5kZXJQYXNzIGFueXdheVxuICAgICAgICByZW5kZXJQYXNzRW50cnkucmVuZGVyUGFzcy5zZXRMb2FkT3AoXG4gICAgICAgICAgcmVuZGVyUGFzc0VudHJ5VHlwZSA9PT0gJ3NjcmVlbicgJiYgcGFzc0RyYXduQ291bnQgIT09IDAgPyAnbG9hZCcgOiAnY2xlYXInXG4gICAgICAgIClcblxuICAgICAgICBwYXNzRHJhd25Db3VudCsrXG5cbiAgICAgICAgdGhpcy5yZW5kZXJTaW5nbGVQYXNzRW50cnkoY29tbWFuZEVuY29kZXIsIHJlbmRlclBhc3NFbnRyeSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIExvZ3MgYWxsIHRoZSBtYWluIGNvbW1hbmRzIGV4ZWN1dGVkIGR1cmluZyBlYWNoIHtAbGluayBTY2VuZSNyZW5kZXIgfCBTY2VuZSByZW5kZXJ9IGNhbGxzLlxuICAgKi9cbiAgbG9nUmVuZGVyQ29tbWFuZHMoKSB7XG4gICAgY29uc3QgcmVuZGVyQ29tbWFuZHMgPSBbXVxuXG4gICAgdGhpcy5jb21wdXRlUGFzc0VudHJpZXMuZm9yRWFjaCgoY29tcHV0ZVBhc3MpID0+IHtcbiAgICAgIHJlbmRlckNvbW1hbmRzLnB1c2goe1xuICAgICAgICBjb21tYW5kOiAnUmVuZGVyIENvbXB1dGVQYXNzJyxcbiAgICAgICAgY29udGVudDogY29tcHV0ZVBhc3Mub3B0aW9ucy5sYWJlbCxcbiAgICAgIH0pXG5cbiAgICAgIGNvbXB1dGVQYXNzLm1hdGVyaWFsLmJpbmRHcm91cHMuZm9yRWFjaCgoYmluZEdyb3VwKSA9PiB7XG4gICAgICAgIGJpbmRHcm91cC5idWZmZXJCaW5kaW5ncy5mb3JFYWNoKChiaW5kaW5nOiBXcml0YWJsZUJ1ZmZlckJpbmRpbmcpID0+IHtcbiAgICAgICAgICBpZiAoYmluZGluZy5zaG91bGRDb3B5UmVzdWx0KSB7XG4gICAgICAgICAgICByZW5kZXJDb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgICAgY29tbWFuZDogYENvcHkgYnVmZmVyIHRvIGJ1ZmZlcmAsXG4gICAgICAgICAgICAgIHNvdXJjZTogYCR7YmluZGluZy5uYW1lfSBidWZmZXJgLFxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogYCR7YmluZGluZy5uYW1lfSByZXN1bHQgYnVmZmVyYCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfVxuICAgICAgICB9KVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgZm9yIChjb25zdCByZW5kZXJQYXNzRW50cnlUeXBlIGluIHRoaXMucmVuZGVyUGFzc0VudHJpZXMpIHtcbiAgICAgIGxldCBwYXNzRHJhd25Db3VudCA9IDBcblxuICAgICAgdGhpcy5yZW5kZXJQYXNzRW50cmllc1tyZW5kZXJQYXNzRW50cnlUeXBlXS5mb3JFYWNoKChyZW5kZXJQYXNzRW50cnkpID0+IHtcbiAgICAgICAgLy8gZWFybHkgYmFpbCBpZiB0aGVyZSdzIG5vdGhpbmcgdG8gZHJhd1xuICAgICAgICBpZiAoIXRoaXMuZ2V0UmVuZGVyUGFzc0VudHJ5TGVuZ3RoKHJlbmRlclBhc3NFbnRyeSkpIHJldHVyblxuXG4gICAgICAgIGNvbnN0IGRlc3RpbmF0aW9uID0gcmVuZGVyUGFzc0VudHJ5LnJlbmRlclRleHR1cmVcbiAgICAgICAgICA/IGAke3JlbmRlclBhc3NFbnRyeS5yZW5kZXJUZXh0dXJlLm9wdGlvbnMubGFiZWx9YFxuICAgICAgICAgIDogJ0NvbnRleHQgY3VycmVudCB0ZXh0dXJlJ1xuXG4gICAgICAgIGxldCBkZXNjcmlwdG9yID0gcmVuZGVyUGFzc0VudHJ5LnJlbmRlclBhc3Mub3B0aW9ucy5sYWJlbFxuXG4gICAgICAgIGNvbnN0IG9wZXJhdGlvbnMgPSB7XG4gICAgICAgICAgbG9hZE9wOlxuICAgICAgICAgICAgcmVuZGVyUGFzc0VudHJ5VHlwZSA9PT0gJ3NjcmVlbicgJiYgcGFzc0RyYXduQ291bnQgPiAwID8gJ2xvYWQnIDogcmVuZGVyUGFzc0VudHJ5LnJlbmRlclBhc3Mub3B0aW9ucy5sb2FkT3AsXG4gICAgICAgICAgZGVwdGhMb2FkT3A6IHVuZGVmaW5lZCxcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJQYXNzRW50cnkucmVuZGVyUGFzcy5vcHRpb25zLmRlcHRoKSB7XG4gICAgICAgICAgb3BlcmF0aW9ucy5kZXB0aExvYWRPcCA9IHJlbmRlclBhc3NFbnRyeS5yZW5kZXJQYXNzLm9wdGlvbnMuZGVwdGhMb2FkT3BcbiAgICAgICAgfVxuXG4gICAgICAgIHBhc3NEcmF3bkNvdW50KytcblxuICAgICAgICBpZiAocmVuZGVyUGFzc0VudHJ5LmVsZW1lbnQpIHtcbiAgICAgICAgICBpZiAocmVuZGVyUGFzc0VudHJ5LmVsZW1lbnQudHlwZSA9PT0gJ1NoYWRlclBhc3MnICYmICFyZW5kZXJQYXNzRW50cnkuZWxlbWVudC5yZW5kZXJUYXJnZXQpIHtcbiAgICAgICAgICAgIHJlbmRlckNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICBjb21tYW5kOiBgQ29weSB0ZXh0dXJlIHRvIHRleHR1cmVgLFxuICAgICAgICAgICAgICBzb3VyY2U6IGRlc3RpbmF0aW9uLFxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogYCR7cmVuZGVyUGFzc0VudHJ5LmVsZW1lbnQub3B0aW9ucy5sYWJlbH0gcmVuZGVyVGV4dHVyZWAsXG4gICAgICAgICAgICB9KVxuXG4gICAgICAgICAgICBvcGVyYXRpb25zLmxvYWRPcCA9ICdjbGVhcidcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBkZXNjcmlwdG9yICs9ICcgJyArIEpTT04uc3RyaW5naWZ5KG9wZXJhdGlvbnMpXG5cbiAgICAgICAgICByZW5kZXJDb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgIGNvbW1hbmQ6IGBSZW5kZXIgJHtyZW5kZXJQYXNzRW50cnkuZWxlbWVudC50eXBlfWAsXG4gICAgICAgICAgICBzb3VyY2U6IHJlbmRlclBhc3NFbnRyeS5lbGVtZW50Lm9wdGlvbnMubGFiZWwsXG4gICAgICAgICAgICBkZXN0aW5hdGlvbixcbiAgICAgICAgICAgIGRlc2NyaXB0b3IsXG4gICAgICAgICAgfSlcblxuICAgICAgICAgIGlmIChyZW5kZXJQYXNzRW50cnkuZWxlbWVudC50eXBlID09PSAnU2hhZGVyUGFzcycgJiYgcmVuZGVyUGFzc0VudHJ5LmVsZW1lbnQucmVuZGVyVGFyZ2V0KSB7XG4gICAgICAgICAgICByZW5kZXJDb21tYW5kcy5wdXNoKHtcbiAgICAgICAgICAgICAgY29tbWFuZDogYENvcHkgdGV4dHVyZSB0byB0ZXh0dXJlYCxcbiAgICAgICAgICAgICAgc291cmNlOiBkZXN0aW5hdGlvbixcbiAgICAgICAgICAgICAgZGVzdGluYXRpb246IGAke3JlbmRlclBhc3NFbnRyeS5lbGVtZW50LnJlbmRlclRhcmdldC5vcHRpb25zLmxhYmVsfSByZW5kZXJUZXh0dXJlYCxcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgfSBlbHNlIGlmIChyZW5kZXJQYXNzRW50cnkuZWxlbWVudC50eXBlID09PSAnUGluZ1BvbmdQbGFuZScpIHtcbiAgICAgICAgICAgIHJlbmRlckNvbW1hbmRzLnB1c2goe1xuICAgICAgICAgICAgICBjb21tYW5kOiBgQ29weSB0ZXh0dXJlIHRvIHRleHR1cmVgLFxuICAgICAgICAgICAgICBzb3VyY2U6IGRlc3RpbmF0aW9uLFxuICAgICAgICAgICAgICBkZXN0aW5hdGlvbjogYCR7cmVuZGVyUGFzc0VudHJ5LmVsZW1lbnQucmVuZGVyVGV4dHVyZS5vcHRpb25zLmxhYmVsfWAsXG4gICAgICAgICAgICB9KVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChyZW5kZXJQYXNzRW50cnkuc3RhY2spIHtcbiAgICAgICAgICBkZXNjcmlwdG9yICs9ICcgJyArIEpTT04uc3RyaW5naWZ5KG9wZXJhdGlvbnMpXG5cbiAgICAgICAgICBmb3IgKGNvbnN0IHN0YWNrVHlwZSBpbiByZW5kZXJQYXNzRW50cnkuc3RhY2spIHtcbiAgICAgICAgICAgIGZvciAoY29uc3Qgb2JqZWN0VHlwZSBpbiByZW5kZXJQYXNzRW50cnkuc3RhY2tbc3RhY2tUeXBlXSkge1xuICAgICAgICAgICAgICBpZiAocmVuZGVyUGFzc0VudHJ5LnN0YWNrW3N0YWNrVHlwZV1bb2JqZWN0VHlwZV0ubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgcmVuZGVyQ29tbWFuZHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICBjb21tYW5kOiBgUmVuZGVyIHN0YWNrICgke3N0YWNrVHlwZX0gJHtvYmplY3RUeXBlfSBvYmplY3RzKWAsXG4gICAgICAgICAgICAgICAgICBzb3VyY2U6IHJlbmRlclBhc3NFbnRyeS5zdGFja1tzdGFja1R5cGVdW29iamVjdFR5cGVdLFxuICAgICAgICAgICAgICAgICAgZGVzdGluYXRpb24sXG4gICAgICAgICAgICAgICAgICBkZXNjcmlwdG9yLFxuICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgfVxuXG4gICAgY29uc29sZS50YWJsZShyZW5kZXJDb21tYW5kcylcbiAgfVxufVxuIiwiLyoqIERlZmluZXMgYSB0YXNrIHF1ZXVlIGl0ZW0gKi9cbmV4cG9ydCBpbnRlcmZhY2UgVGFza1F1ZXVlSXRlbSB7XG4gIC8qKiBVbmlxdWUgaWQgb2YgdGhlIHRhc2sgcXVldWUgaXRlbSAqL1xuICBpZDogbnVtYmVyXG4gIC8qKiBQcmlvcml0eSBvcmRlciBpbiB0aGUge0BsaW5rIFRhc2tzUXVldWVNYW5hZ2VyI3F1ZXVlIHwgdGFza3MgcXVldWUgYXJyYXl9ICovXG4gIG9yZGVyOiBudW1iZXJcbiAgLyoqIENhbGxiYWNrIHRvIGV4ZWN1dGUgKi9cbiAgY2FsbGJhY2s6IChhcmdzPzogYW55KSA9PiB2b2lkXG4gIC8qKiBXaGV0aGVyIHRvIGV4ZWN1dGUgdGhlIHRhc2sgb25seSBvbmNlIGFuZCB0aGVtIGF1dG9tYXRpY2FsbHkgcmVtb3ZlIGl0IGZyb20gdGhlIHtAbGluayBUYXNrc1F1ZXVlTWFuYWdlciNxdWV1ZSB8IHRhc2tzIHF1ZXVlIGFycmF5fSAqL1xuICBvbmNlOiBib29sZWFuXG59XG5cbi8qKiBQYXJhbWV0ZXJzIHVzZWQgdG8gYWRkIGEgdGFzayB0byB0aGUge0BsaW5rIFRhc2tzUXVldWVNYW5hZ2VyI3F1ZXVlIHwgdGFza3MgcXVldWUgYXJyYXl9ICovXG5leHBvcnQgdHlwZSBUYXNrUXVldWVJdGVtUGFyYW1zID0gUGFydGlhbDxPbWl0PFRhc2tRdWV1ZUl0ZW0sICdpZCcgfCAnY2FsbGJhY2snPj5cblxuLyoqXG4gKiBVc2VkIHRvIGtlZXAgdHJhY2sgb2YgYSBidW5jaCBvZiBjYWxsYmFja3MgYW5kIGV4ZWN1dGUgdGhlbSBpbiB0aGUgcmlnaHQgb3JkZXIgd2hlbiBuZWVkZWRcbiAqL1xuZXhwb3J0IGNsYXNzIFRhc2tzUXVldWVNYW5hZ2VyIHtcbiAgLyoqIEFycmF5IG9mIHtAbGluayBUYXNrUXVldWVJdGVtIHwgdGFzayBxdWV1ZSBpdGVtfSB0byBleGVjdXRlICovXG4gIHF1ZXVlOiBUYXNrUXVldWVJdGVtW11cbiAgLyoqIFByaXZhdGUgbnVtYmVyIHRvIGFzc2lnbiBhIHVuaXF1ZSBpZCB0byBlYWNoIHtAbGluayBUYXNrUXVldWVJdGVtIHwgdGFzayBxdWV1ZSBpdGVtfSAqL1xuICAjdGFza0NvdW50ID0gMFxuXG4gIC8qKlxuICAgKiBUYXNrUXVldWVNYW5hZ2VyIGNvbnN0cnVjdG9yXG4gICAqL1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnF1ZXVlID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgVGFza1F1ZXVlSXRlbSB8IHRhc2sgcXVldWUgaXRlbX0gdG8gdGhlIHF1ZXVlXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIGFkZCB0byB0aGUge0BsaW5rIFRhc2tRdWV1ZUl0ZW0gfCB0YXNrIHF1ZXVlIGl0ZW19XG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIFRhc2tRdWV1ZUl0ZW1QYXJhbXMgfCBwYXJhbWV0ZXJzfSBvZiB0aGUge0BsaW5rIFRhc2tRdWV1ZUl0ZW0gfCB0YXNrIHF1ZXVlIGl0ZW19IHRvIGFkZFxuICAgKiBAcmV0dXJucyAtIHtAbGluayBUYXNrUXVldWVJdGVtI2lkIHwgaWR9IG9mIHRoZSBuZXcge0BsaW5rIFRhc2tRdWV1ZUl0ZW0gfCB0YXNrIHF1ZXVlIGl0ZW19LCB1c2VmdWwgdG8gbGF0ZXIgcmVtb3ZlIHRoZSB0YXNrIGlmIG5lZWRlZFxuICAgKi9cbiAgYWRkKFxuICAgIGNhbGxiYWNrOiBUYXNrUXVldWVJdGVtWydjYWxsYmFjayddID0gKGFyZ3M/OiBhbnkpID0+IHtcbiAgICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrcyAqL1xuICAgIH0sXG4gICAgeyBvcmRlciA9IHRoaXMucXVldWUubGVuZ3RoLCBvbmNlID0gZmFsc2UgfSA9IHt9IGFzIFRhc2tRdWV1ZUl0ZW1QYXJhbXNcbiAgKTogVGFza1F1ZXVlSXRlbVsnaWQnXSB7XG4gICAgY29uc3QgdGFzayA9IHtcbiAgICAgIGNhbGxiYWNrLFxuICAgICAgb3JkZXIsXG4gICAgICBvbmNlLFxuICAgICAgaWQ6IHRoaXMuI3Rhc2tDb3VudCxcbiAgICB9XG5cbiAgICAvLyBpbmNyZW1lbnQgaWRcbiAgICB0aGlzLiN0YXNrQ291bnQrK1xuXG4gICAgdGhpcy5xdWV1ZS5wdXNoKHRhc2spXG4gICAgdGhpcy5xdWV1ZS5zb3J0KChhLCBiKSA9PiB7XG4gICAgICByZXR1cm4gYS5vcmRlciAtIGIub3JkZXJcbiAgICB9KVxuXG4gICAgcmV0dXJuIHRhc2suaWRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSB7QGxpbmsgVGFza1F1ZXVlSXRlbSB8IHRhc2sgcXVldWUgaXRlbX0gZnJvbSB0aGUgcXVldWVcbiAgICogQHBhcmFtIHRhc2tJZCAtIHtAbGluayBUYXNrUXVldWVJdGVtI2lkIHwgaWR9IG9mIHRoZSBuZXcge0BsaW5rIFRhc2tRdWV1ZUl0ZW0gfCB0YXNrIHF1ZXVlIGl0ZW19IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlKHRhc2tJZCA9IDApIHtcbiAgICB0aGlzLnF1ZXVlID0gdGhpcy5xdWV1ZS5maWx0ZXIoKHRhc2spID0+IHRhc2suaWQgIT09IHRhc2tJZClcbiAgfVxuXG4gIC8qKlxuICAgKiBFeGVjdXRlIHRoZSB7QGxpbmsgVGFza3NRdWV1ZU1hbmFnZXIjcXVldWUgfCB0YXNrcyBxdWV1ZSBhcnJheX1cbiAgICovXG4gIGV4ZWN1dGUoYXJncz86IGFueSkge1xuICAgIHRoaXMucXVldWUuZm9yRWFjaCgodGFzaykgPT4ge1xuICAgICAgdGFzay5jYWxsYmFjayhhcmdzKVxuXG4gICAgICAvLyBpZiBpdCB3YXMgYSBvbmUgdGltZSBjYWxsYmFjaywgcmVtb3ZlIGl0XG4gICAgICBpZiAodGFzay5vbmNlKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlKHRhc2suaWQpXG4gICAgICB9XG4gICAgfSlcbiAgfVxufVxuIiwiaW1wb3J0IHsgUGlwZWxpbmVNYW5hZ2VyIH0gZnJvbSAnLi4vcGlwZWxpbmVzL1BpcGVsaW5lTWFuYWdlcidcbmltcG9ydCB7IERPTUVsZW1lbnQsIERPTUVsZW1lbnRCb3VuZGluZ1JlY3QgfSBmcm9tICcuLi9ET00vRE9NRWxlbWVudCdcbmltcG9ydCB7IFNjZW5lIH0gZnJvbSAnLi4vc2NlbmVzL1NjZW5lJ1xuaW1wb3J0IHsgUmVuZGVyUGFzcywgUmVuZGVyUGFzc1BhcmFtcyB9IGZyb20gJy4uL3JlbmRlclBhc3Nlcy9SZW5kZXJQYXNzJ1xuaW1wb3J0IHsgZ2VuZXJhdGVVVUlELCB0aHJvd1dhcm5pbmcgfSBmcm9tICcuLi8uLi91dGlscy91dGlscydcblxuaW1wb3J0IHsgQ29tcHV0ZVBhc3MgfSBmcm9tICcuLi9jb21wdXRlUGFzc2VzL0NvbXB1dGVQYXNzJ1xuaW1wb3J0IHsgUGluZ1BvbmdQbGFuZSB9IGZyb20gJy4uLy4uL2N1cnRhaW5zL21lc2hlcy9QaW5nUG9uZ1BsYW5lJ1xuaW1wb3J0IHsgU2hhZGVyUGFzcyB9IGZyb20gJy4uL3JlbmRlclBhc3Nlcy9TaGFkZXJQYXNzJ1xuaW1wb3J0IHsgUmVuZGVyVGFyZ2V0IH0gZnJvbSAnLi4vcmVuZGVyUGFzc2VzL1JlbmRlclRhcmdldCdcbmltcG9ydCB7IFRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9UZXh0dXJlJ1xuaW1wb3J0IHsgU2FtcGxlciB9IGZyb20gJy4uL3NhbXBsZXJzL1NhbXBsZXInXG5cbmltcG9ydCB7IERPTU1lc2ggfSBmcm9tICcuLi8uLi9jdXJ0YWlucy9tZXNoZXMvRE9NTWVzaCdcbmltcG9ydCB7IFBsYW5lIH0gZnJvbSAnLi4vLi4vY3VydGFpbnMvbWVzaGVzL1BsYW5lJ1xuaW1wb3J0IHsgTWVzaCB9IGZyb20gJy4uL21lc2hlcy9NZXNoJ1xuaW1wb3J0IHsgVGFza3NRdWV1ZU1hbmFnZXIgfSBmcm9tICcuLi8uLi91dGlscy9UYXNrc1F1ZXVlTWFuYWdlcidcbmltcG9ydCB7IEFsbG93ZWRCaW5kR3JvdXBzIH0gZnJvbSAnLi4vLi4vdHlwZXMvQmluZEdyb3VwcydcbmltcG9ydCB7IFJlbmRlclRleHR1cmUgfSBmcm9tICcuLi90ZXh0dXJlcy9SZW5kZXJUZXh0dXJlJ1xuaW1wb3J0IHsgR1BVRGV2aWNlTWFuYWdlciB9IGZyb20gJy4vR1BVRGV2aWNlTWFuYWdlcidcbmltcG9ydCB7IEZ1bGxzY3JlZW5QbGFuZSB9IGZyb20gJy4uL21lc2hlcy9GdWxsc2NyZWVuUGxhbmUnXG5cbi8qKlxuICogUGFyYW1ldGVycyB1c2VkIHRvIGNyZWF0ZSBhIHtAbGluayBHUFVSZW5kZXJlcn1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHUFVSZW5kZXJlclBhcmFtcyB7XG4gIC8qKiBUaGUge0BsaW5rIEdQVURldmljZU1hbmFnZXJ9IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIEdQVVJlbmRlcmVyfSAqL1xuICBkZXZpY2VNYW5hZ2VyOiBHUFVEZXZpY2VNYW5hZ2VyXG4gIC8qKiB7QGxpbmsgSFRNTEVsZW1lbnR9IG9yIHNlbGVjdG9yIHVzZWQgYXMgYSBjb250YWluZXIgZm9yIG91ciB7QGxpbmsgR1BVUmVuZGVyZXIjY2FudmFzIHwgY2FudmFzfSAqL1xuICBjb250YWluZXI6IHN0cmluZyB8IEhUTUxFbGVtZW50XG4gIC8qKiBQaXhlbCByYXRpbyB0byB1c2UgZm9yIHJlbmRlcmluZyAqL1xuICBwaXhlbFJhdGlvPzogbnVtYmVyXG4gIC8qKiBUZXh0dXJlIHJlbmRlcmluZyB7QGxpbmsgR1BVVGV4dHVyZUZvcm1hdCB8IHByZWZlcnJlZCBmb3JtYXR9ICovXG4gIHByZWZlcnJlZEZvcm1hdD86IEdQVVRleHR1cmVGb3JtYXRcbiAgLyoqIFNldCB0aGUge0BsaW5rIEdQVUNhbnZhc0NvbnRleHQgfCBjb250ZXh0fSBhbHBoYSBtb2RlICovXG4gIGFscGhhTW9kZT86IEdQVUNhbnZhc0FscGhhTW9kZVxuXG4gIC8qKiBXaGV0aGVyIHRoZSB7QGxpbmsgR1BVUmVuZGVyZXJ9IHNob3VsZCBhZGQgYW4gZXh0cmEge0BsaW5rIFNoYWRlclBhc3N9IE1TQUEgcGFzcyBhZnRlciBkcmF3aW5nIHRoZSB3aG9sZSBzY2VuZS4gKi9cbiAgbXVsdGlzYW1wbGVkPzogYm9vbGVhblxuXG4gIC8qKiBUaGUge0BsaW5rIEdQVVJlbmRlcmVyI3JlbmRlclBhc3MgfCByZW5kZXJlciBSZW5kZXJQYXNzfSBwYXJhbWV0ZXJzICovXG4gIHJlbmRlclBhc3M/OiB7XG4gICAgLyoqIFdoZXRoZXIgdGhlIHtAbGluayBHUFVSZW5kZXJlciNyZW5kZXJQYXNzIHwgcmVuZGVyZXIgUmVuZGVyUGFzc30gc2hvdWxkIGhhbmRsZSBkZXB0aC4gRGVmYXVsdCB0byBgdHJ1ZWAgKi9cbiAgICBkZXB0aDogUmVuZGVyUGFzc1BhcmFtc1snZGVwdGgnXVxuICAgIC8qKiBUaGUge0BsaW5rIEdQVVJlbmRlcmVyI3JlbmRlclBhc3MgfCByZW5kZXJlciBSZW5kZXJQYXNzfSBzYW1wbGUgY291bnQgKGkuZS4gd2hldGhlciBpdCBzaG91bGQgdXNlIG11bHRpc2FtcGxlZCBhbnRpYWxpYXNpbmcpLiBEZWZhdWx0IHRvIGA0YCAqL1xuICAgIHNhbXBsZUNvdW50OiBSZW5kZXJQYXNzUGFyYW1zWydzYW1wbGVDb3VudCddXG4gICAgLyoqIFRoZSB7QGxpbmsgR1BVQ29sb3IgfCBjb2xvciB2YWx1ZXN9IHRvIGNsZWFyIHRvIGJlZm9yZSBkcmF3aW5nIHRoZSB7QGxpbmsgR1BVUmVuZGVyZXIjcmVuZGVyUGFzcyB8IHJlbmRlcmVyIFJlbmRlclBhc3N9LiBEZWZhdWx0IHRvIGBbMCwgMCwgMCwgMF1gICovXG4gICAgY2xlYXJWYWx1ZTogR1BVQ29sb3JcbiAgfVxufVxuXG4vKiogQW55IE1lc2ggdGhhdCBpcyBib3VuZCB0byBhIERPTSBFbGVtZW50ICovXG5leHBvcnQgdHlwZSBET01Qcm9qZWN0ZWRNZXNoID0gRE9NTWVzaCB8IFBsYW5lXG4vKiogQW55IE1lc2ggdGhhdCBpcyBwcm9qZWN0ZWQgKGkuZSB1c2UgYSB7QGxpbmsgY29yZS9jYW1lcmEvQ2FtZXJhLkNhbWVyYSB8IENhbWVyYX0gdG8gY29tcHV0ZSBhIG1vZGVsIHZpZXcgcHJvamVjdGlvbiBtYXRyaXgpICovXG5leHBvcnQgdHlwZSBQcm9qZWN0ZWRNZXNoID0gTWVzaCB8IERPTVByb2plY3RlZE1lc2hcbi8qKiBBbnkgTWVzaCB0aGF0IGNhbiBiZSBkcmF3biwgaW5jbHVkaW5nIGZ1bGxzY3JlZW4gcXVhZCBtZXNoZXMgdXNlZCBmb3IgcG9zdCBwcm9jZXNzaW5nICovXG5leHBvcnQgdHlwZSBSZW5kZXJlZE1lc2ggPSBQcm9qZWN0ZWRNZXNoIHwgUGluZ1BvbmdQbGFuZSB8IFNoYWRlclBhc3MgfCBGdWxsc2NyZWVuUGxhbmVcbi8qKiBBbnkgTWVzaCBvciBDb21wdXRlIHBhc3MgKi9cbmV4cG9ydCB0eXBlIFNjZW5lT2JqZWN0ID0gUmVuZGVyZWRNZXNoIHwgQ29tcHV0ZVBhc3NcblxuLyoqXG4gKiBCYXNlIHJlbmRlcmVyIGNsYXNzLCB0aGF0IGNvdWxkIHRlY2huaWNhbGx5IGJlIHVzZWQgdG8gcmVuZGVyIGNvbXB1dGUgcGFzc2VzIGFuZCBkcmF3IGZ1bGxzY3JlZW4gcXVhZHMsIGV2ZW4gdGhvIGl0IGlzIHN0cm9uZ2x5IGFkdmlzZWQgdG8gdXNlIGF0IGxlYXN0IHRoZSB7QGxpbmsgY29yZS9yZW5kZXJlcnMvR1BVQ2FtZXJhUmVuZGVyZXIuR1BVQ2FtZXJhUmVuZGVyZXIgfCBHUFVDYW1lcmFSZW5kZXJlcn0gY2xhc3MgaW5zdGVhZC5cbiAqIEEgcmVuZGVyZXIgaXMgcmVzcG9uc2libGUgZm9yOlxuICogLSBTZXR0aW5nIGEge0BsaW5rIEdQVUNhbnZhc0NvbnRleHQgfCBjb250ZXh0fVxuICogLSBIYW5kbGluZyB0aGUge0BsaW5rIEhUTUxDYW52YXNFbGVtZW50IHwgY2FudmFzfSBvbnRvIGV2ZXJ5dGhpbmcgaXMgZHJhd25cbiAqIC0gQ3JlYXRpbmcgYSB7QGxpbmsgUmVuZGVyUGFzc30gdGhhdCB3aWxsIGhhbmRsZSBvdXIgcmVuZGVyIGFuZCBkZXB0aCB0ZXh0dXJlcyBhbmQgdGhlIHJlbmRlciBwYXNzIGRlc2NyaXB0b3JcbiAqIC0gS2VlcGluZyB0cmFjayBvZiBldmVyeSBzcGVjaWZpYyBjbGFzcyBvYmplY3RzIGNyZWF0ZWQgcmVsYXRpdmUgdG8gY29tcHV0aW5nIGFuZCByZW5kZXJpbmdcbiAqIC0gQ3JlYXRpbmcgYSB7QGxpbmsgU2NlbmV9IGNsYXNzIHRoYXQgd2lsbCB0YWtlIGNhcmUgb2YgdGhlIHJlbmRlcmluZyBwcm9jZXNzIG9mIGFsbCBwcmV2aW91c2x5IG1lbnRpb25lZCBvYmplY3RzXG4gKi9cbmV4cG9ydCBjbGFzcyBHUFVSZW5kZXJlciB7XG4gIC8qKiBUaGUgdHlwZSBvZiB0aGUge0BsaW5rIEdQVVJlbmRlcmVyfSAqL1xuICB0eXBlOiBzdHJpbmdcbiAgLyoqIFRoZSB1bml2ZXJzYWwgdW5pcXVlIGlkIG9mIHRoaXMge0BsaW5rIEdQVVJlbmRlcmVyfSAqL1xuICByZWFkb25seSB1dWlkOiBzdHJpbmdcblxuICAvKiogVGhlIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyfSB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBHUFVSZW5kZXJlcn0gKi9cbiAgZGV2aWNlTWFuYWdlcjogR1BVRGV2aWNlTWFuYWdlclxuXG4gIC8qKiB7QGxpbmsgSFRNTENhbnZhc0VsZW1lbnR9IG9udG8gZXZlcnl0aGluZyBpcyBkcmF3biAqL1xuICBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50XG4gIC8qKiBUaGUgV2ViR1BVIHtAbGluayBHUFVDYW52YXNDb250ZXh0IHwgY29udGV4dH0gdXNlZCAqL1xuICBjb250ZXh0OiBudWxsIHwgR1BVQ2FudmFzQ29udGV4dFxuICAvKiogU2V0IHRoZSB7QGxpbmsgR1BVQ2FudmFzQ29udGV4dCB8IGNvbnRleHR9IGFscGhhIG1vZGUgKi9cbiAgYWxwaGFNb2RlPzogR1BVQ2FudmFzQWxwaGFNb2RlXG5cbiAgLyoqIE9wdGlvbnMgdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgR1BVUmVuZGVyZXJ9ICovXG4gIG9wdGlvbnM6IEdQVVJlbmRlcmVyUGFyYW1zXG5cbiAgLyoqIFdoZXRoZXIgdGhlIHtAbGluayBHUFVSZW5kZXJlcn0gc2hvdWxkIGFkZCBhbiBleHRyYSB7QGxpbmsgU2hhZGVyUGFzc30gTVNBQSBwYXNzIGFmdGVyIGRyYXdpbmcgdGhlIHdob2xlIHNjZW5lLiAqL1xuICBtdWx0aXNhbXBsZWQ6IGJvb2xlYW5cbiAgLyoqIFRoZSB7QGxpbmsgUmVuZGVyUGFzcyB8IHJlbmRlciBwYXNzfSB1c2VkIHRvIHJlbmRlciBvdXIgcmVzdWx0IHRvIHNjcmVlbiAqL1xuICByZW5kZXJQYXNzOiBSZW5kZXJQYXNzXG4gIC8qKiBBZGRpdGlvbmFsIHtAbGluayBSZW5kZXJQYXNzIHwgcmVuZGVyIHBhc3N9IHVzZWQgYnkge0BsaW5rIFNoYWRlclBhc3N9IGZvciBjb21wb3NpdGluZyAvIHBvc3QgcHJvY2Vzc2luZy4gRG9lcyBub3QgaGFuZGxlIGRlcHRoICovXG4gIHBvc3RQcm9jZXNzaW5nUGFzczogUmVuZGVyUGFzc1xuXG4gIC8qKiB7QGxpbmsgUmVuZGVyUGFzcyB8IE11bHRpc2FtcGxlZCByZW5kZXIgcGFzc30gdXNlZCBieSBhbiBpbnRlcm5hbCB7QGxpbmsgU2hhZGVyUGFzc30gZm9yIE1TQUEsIGlmIHtAbGluayBtdWx0aXNhbXBsZWR9IGlzIHNldCB0byBgdHJ1ZWAgKi9cbiAgLy9tdWx0aXNhbXBsaW5nUGFzczogUmVuZGVyUGFzcyB8IHVuZGVmaW5lZFxuXG4gIC8qKiBUaGUge0BsaW5rIFNjZW5lfSB1c2VkICovXG4gIHNjZW5lOiBTY2VuZVxuXG4gIC8qKiBBbiBhcnJheSBjb250YWluaW5nIGFsbCBvdXIgY3JlYXRlZCB7QGxpbmsgQ29tcHV0ZVBhc3N9ICovXG4gIGNvbXB1dGVQYXNzZXM6IENvbXB1dGVQYXNzW11cbiAgLyoqIEFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIG91ciBjcmVhdGVkIHtAbGluayBQaW5nUG9uZ1BsYW5lfSAqL1xuICBwaW5nUG9uZ1BsYW5lczogUGluZ1BvbmdQbGFuZVtdXG4gIC8qKiBBbiBhcnJheSBjb250YWluaW5nIGFsbCBvdXIgY3JlYXRlZCB7QGxpbmsgU2hhZGVyUGFzc30gKi9cbiAgc2hhZGVyUGFzc2VzOiBTaGFkZXJQYXNzW11cbiAgLyoqIEFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIG91ciBjcmVhdGVkIHtAbGluayBSZW5kZXJUYXJnZXR9ICovXG4gIHJlbmRlclRhcmdldHM6IFJlbmRlclRhcmdldFtdXG4gIC8qKiBBbiBhcnJheSBjb250YWluaW5nIGFsbCBvdXIgY3JlYXRlZCB7QGxpbmsgUHJvamVjdGVkTWVzaCB8IHByb2plY3RlZCBtZXNoZXN9ICovXG4gIG1lc2hlczogUHJvamVjdGVkTWVzaFtdXG4gIC8qKiBBbiBhcnJheSBjb250YWluaW5nIGFsbCBvdXIgY3JlYXRlZCB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gKi9cbiAgcmVuZGVyVGV4dHVyZXM6IFJlbmRlclRleHR1cmVbXVxuXG4gIC8qKiBQaXhlbCByYXRpbyB0byB1c2UgZm9yIHJlbmRlcmluZyAqL1xuICBwaXhlbFJhdGlvOiBudW1iZXJcblxuICAvKioge0BsaW5rIERPTUVsZW1lbnR9IHRoYXQgd2lsbCB0cmFjayBvdXIgY2FudmFzIGNvbnRhaW5lciBzaXplICovXG4gIGRvbUVsZW1lbnQ6IERPTUVsZW1lbnRcblxuICAvKiogQWxsb3cgdG8gYWRkIGNhbGxiYWNrcyB0byBiZSBleGVjdXRlZCBhdCBlYWNoIHJlbmRlciBiZWZvcmUgdGhlIHtAbGluayBHUFVDb21tYW5kRW5jb2Rlcn0gaXMgY3JlYXRlZCAqL1xuICBvbkJlZm9yZUNvbW1hbmRFbmNvZGVyQ3JlYXRpb246IFRhc2tzUXVldWVNYW5hZ2VyXG4gIC8qKiBBbGxvdyB0byBhZGQgY2FsbGJhY2tzIHRvIGJlIGV4ZWN1dGVkIGF0IGVhY2ggcmVuZGVyIGFmdGVyIHRoZSB7QGxpbmsgR1BVQ29tbWFuZEVuY29kZXJ9IGhhcyBiZWVuIGNyZWF0ZWQgYnV0IGJlZm9yZSB0aGUge0BsaW5rIFNjZW5lfSBpcyByZW5kZXJlZCAqL1xuICBvbkJlZm9yZVJlbmRlclNjZW5lOiBUYXNrc1F1ZXVlTWFuYWdlclxuICAvKiogQWxsb3cgdG8gYWRkIGNhbGxiYWNrcyB0byBiZSBleGVjdXRlZCBhdCBlYWNoIHJlbmRlciBhZnRlciB0aGUge0BsaW5rIEdQVUNvbW1hbmRFbmNvZGVyfSBoYXMgYmVlbiBjcmVhdGVkIGFuZCBhZnRlciB0aGUge0BsaW5rIFNjZW5lfSBoYXMgYmVlbiByZW5kZXJlZCAqL1xuICBvbkFmdGVyUmVuZGVyU2NlbmU6IFRhc2tzUXVldWVNYW5hZ2VyXG4gIC8qKiBBbGxvdyB0byBhZGQgY2FsbGJhY2tzIHRvIGJlIGV4ZWN1dGVkIGF0IGVhY2ggcmVuZGVyIGFmdGVyIHRoZSB7QGxpbmsgU2NlbmV9IGhhcyBiZWVuIHJlbmRlcmVkIGFuZCB0aGUge0BsaW5rIEdQVUNvbW1hbmRFbmNvZGVyfSBoYXMgYmVlbiBzdWJtaXR0ZWQgKi9cbiAgb25BZnRlckNvbW1hbmRFbmNvZGVyU3VibWlzc2lvbjogVGFza3NRdWV1ZU1hbmFnZXJcblxuICAvLyBjYWxsYmFja3MgLyBldmVudHNcbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25CZWZvcmVSZW5kZXJ9IGNhbGxiYWNrICovXG4gIF9vbkJlZm9yZVJlbmRlckNhbGxiYWNrID0gKGNvbW1hbmRFbmNvZGVyOiBHUFVDb21tYW5kRW5jb2RlcikgPT4ge1xuICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrICovXG4gIH1cbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25BZnRlclJlbmRlcn0gY2FsbGJhY2sgKi9cbiAgX29uQWZ0ZXJSZW5kZXJDYWxsYmFjayA9IChjb21tYW5kRW5jb2RlcjogR1BVQ29tbWFuZEVuY29kZXIpID0+IHtcbiAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xuICB9XG4gIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uQWZ0ZXJSZXNpemV9IGNhbGxiYWNrICovXG4gIF9vbkFmdGVyUmVzaXplQ2FsbGJhY2s6ICgpID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgLyogYWxsb3cgZW1wdHkgY2FsbGJhY2sgKi9cbiAgfVxuXG4gIC8qKlxuICAgKiBHUFVSZW5kZXJlciBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBHUFVSZW5kZXJlclBhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIEdQVVJlbmRlcmVyfVxuICAgKi9cbiAgY29uc3RydWN0b3Ioe1xuICAgIGRldmljZU1hbmFnZXIsXG4gICAgY29udGFpbmVyLFxuICAgIHBpeGVsUmF0aW8gPSAxLFxuICAgIHByZWZlcnJlZEZvcm1hdCxcbiAgICBhbHBoYU1vZGUgPSAncHJlbXVsdGlwbGllZCcsXG4gICAgbXVsdGlzYW1wbGVkID0gdHJ1ZSxcbiAgICByZW5kZXJQYXNzLFxuICB9OiBHUFVSZW5kZXJlclBhcmFtcykge1xuICAgIHRoaXMudHlwZSA9ICdHUFVSZW5kZXJlcidcbiAgICB0aGlzLnV1aWQgPSBnZW5lcmF0ZVVVSUQoKVxuXG4gICAgdGhpcy5kZXZpY2VNYW5hZ2VyID0gZGV2aWNlTWFuYWdlclxuICAgIHRoaXMuZGV2aWNlTWFuYWdlci5hZGRSZW5kZXJlcih0aGlzKVxuXG4gICAgLy8gcmVuZGVyIHBhc3MgZGVmYXVsdCB2YWx1ZXNcbiAgICByZW5kZXJQYXNzID0geyAuLi57IGRlcHRoOiB0cnVlLCBzYW1wbGVDb3VudDogNCwgY2xlYXJWYWx1ZTogWzAsIDAsIDAsIDBdIH0sIC4uLnJlbmRlclBhc3MgfVxuICAgIHByZWZlcnJlZEZvcm1hdCA9IHByZWZlcnJlZEZvcm1hdCA/PyB0aGlzLmRldmljZU1hbmFnZXIuZ3B1Py5nZXRQcmVmZXJyZWRDYW52YXNGb3JtYXQoKVxuXG4gICAgdGhpcy5vcHRpb25zID0ge1xuICAgICAgZGV2aWNlTWFuYWdlcixcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHBpeGVsUmF0aW8sXG4gICAgICBwcmVmZXJyZWRGb3JtYXQsXG4gICAgICBhbHBoYU1vZGUsXG4gICAgICBtdWx0aXNhbXBsZWQsXG4gICAgICByZW5kZXJQYXNzLFxuICAgIH1cblxuICAgIHRoaXMucGl4ZWxSYXRpbyA9IHBpeGVsUmF0aW8gPz8gd2luZG93LmRldmljZVBpeGVsUmF0aW8gPz8gMVxuICAgIHRoaXMuYWxwaGFNb2RlID0gYWxwaGFNb2RlXG5cbiAgICB0aGlzLnNldFRhc2tzUXVldWVzKClcbiAgICB0aGlzLnNldFJlbmRlcmVyT2JqZWN0cygpXG5cbiAgICAvLyBjcmVhdGUgdGhlIGNhbnZhc1xuICAgIGNvbnN0IGlzQ29udGFpbmVyQ2FudmFzID0gY29udGFpbmVyIGluc3RhbmNlb2YgSFRNTENhbnZhc0VsZW1lbnRcbiAgICB0aGlzLmNhbnZhcyA9IGlzQ29udGFpbmVyQ2FudmFzID8gKGNvbnRhaW5lciBhcyBIVE1MQ2FudmFzRWxlbWVudCkgOiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKVxuXG4gICAgLy8gbmVlZGVkIHRvIGdldCBjb250YWluZXIgYm91bmRpbmcgYm94XG4gICAgdGhpcy5kb21FbGVtZW50ID0gbmV3IERPTUVsZW1lbnQoe1xuICAgICAgZWxlbWVudDogY29udGFpbmVyLFxuICAgICAgcHJpb3JpdHk6IDUsIC8vIHJlbmRlcmVyIGNhbGxiYWNrIG5lZWQgdG8gYmUgY2FsbGVkIGZpcnN0XG4gICAgICBvblNpemVDaGFuZ2VkOiAoYm91bmRpbmdSZWN0KSA9PiB0aGlzLnJlc2l6ZShib3VuZGluZ1JlY3QpLFxuICAgIH0pXG5cbiAgICBpZiAoIWlzQ29udGFpbmVyQ2FudmFzKSB7XG4gICAgICAvLyBhcHBlbmQgdGhlIGNhbnZhc1xuICAgICAgdGhpcy5kb21FbGVtZW50LmVsZW1lbnQuYXBwZW5kQ2hpbGQodGhpcy5jYW52YXMpXG4gICAgfVxuXG4gICAgLy8gZGV2aWNlIGlzIGFscmVhZHkgYXZhaWxhYmxlPyBjcmVhdGUgdGhlIGNvbnRleHQhXG4gICAgaWYgKHRoaXMuZGV2aWNlTWFuYWdlci5kZXZpY2UpIHtcbiAgICAgIHRoaXMuc2V0Q29udGV4dCgpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB7QGxpbmsgY2FudmFzfSBzaXplXG4gICAqIEBwYXJhbSBib3VuZGluZ1JlY3QgLSBuZXcge0BsaW5rIGRvbUVsZW1lbnQgfCBET00gRWxlbWVudH0ge0BsaW5rIERPTUVsZW1lbnQjYm91bmRpbmdSZWN0IHwgYm91bmRpbmcgcmVjdGFuZ2xlfVxuICAgKi9cbiAgc2V0U2l6ZShib3VuZGluZ1JlY3Q6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3QpIHtcbiAgICBjb25zdCBkZXZpY2VQaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gPz8gMVxuICAgIGNvbnN0IHNjYWxlQm91bmRpbmdSZWN0ID0gdGhpcy5waXhlbFJhdGlvIC8gZGV2aWNlUGl4ZWxSYXRpb1xuXG4gICAgdGhpcy5jYW52YXMuc3R5bGUud2lkdGggPSBNYXRoLmZsb29yKGJvdW5kaW5nUmVjdC53aWR0aCkgKyAncHgnXG4gICAgdGhpcy5jYW52YXMuc3R5bGUuaGVpZ2h0ID0gTWF0aC5mbG9vcihib3VuZGluZ1JlY3QuaGVpZ2h0KSArICdweCdcblxuICAgIGNvbnN0IHJlbmRlcmluZ1NpemUgPSB7XG4gICAgICB3aWR0aDogTWF0aC5mbG9vcihib3VuZGluZ1JlY3Qud2lkdGggKiBzY2FsZUJvdW5kaW5nUmVjdCksXG4gICAgICBoZWlnaHQ6IE1hdGguZmxvb3IoYm91bmRpbmdSZWN0LmhlaWdodCAqIHNjYWxlQm91bmRpbmdSZWN0KSxcbiAgICB9XG5cbiAgICB0aGlzLmNhbnZhcy53aWR0aCA9IHRoaXMuZGV2aWNlXG4gICAgICA/IE1hdGgubWluKHJlbmRlcmluZ1NpemUud2lkdGgsIHRoaXMuZGV2aWNlLmxpbWl0cy5tYXhUZXh0dXJlRGltZW5zaW9uMkQpXG4gICAgICA6IHJlbmRlcmluZ1NpemUud2lkdGhcbiAgICB0aGlzLmNhbnZhcy5oZWlnaHQgPSB0aGlzLmRldmljZVxuICAgICAgPyBNYXRoLm1pbihyZW5kZXJpbmdTaXplLmhlaWdodCwgdGhpcy5kZXZpY2UubGltaXRzLm1heFRleHR1cmVEaW1lbnNpb24yRClcbiAgICAgIDogcmVuZGVyaW5nU2l6ZS5oZWlnaHRcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNpemUgb3VyIHtAbGluayBHUFVSZW5kZXJlcn1cbiAgICogQHBhcmFtIGJvdW5kaW5nUmVjdCAtIG5ldyB7QGxpbmsgZG9tRWxlbWVudCB8IERPTSBFbGVtZW50fSB7QGxpbmsgRE9NRWxlbWVudCNib3VuZGluZ1JlY3QgfCBib3VuZGluZyByZWN0YW5nbGV9XG4gICAqL1xuICByZXNpemUoYm91bmRpbmdSZWN0OiBET01FbGVtZW50Qm91bmRpbmdSZWN0IHwgbnVsbCA9IG51bGwpIHtcbiAgICBpZiAoIXRoaXMuZG9tRWxlbWVudCAmJiAhYm91bmRpbmdSZWN0KSByZXR1cm5cblxuICAgIGlmICghYm91bmRpbmdSZWN0KSBib3VuZGluZ1JlY3QgPSB0aGlzLmRvbUVsZW1lbnQuZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuXG4gICAgdGhpcy5zZXRTaXplKGJvdW5kaW5nUmVjdClcblxuICAgIHRoaXMub25SZXNpemUoKVxuXG4gICAgdGhpcy5fb25BZnRlclJlc2l6ZUNhbGxiYWNrICYmIHRoaXMuX29uQWZ0ZXJSZXNpemVDYWxsYmFjaygpXG4gIH1cblxuICAvKipcbiAgICogUmVzaXplIGFsbCB0cmFja2VkIG9iamVjdHNcbiAgICovXG4gIG9uUmVzaXplKCkge1xuICAgIC8vIHJlc2l6ZSByZW5kZXIgJiBzaGFkZXIgcGFzc2VzXG4gICAgdGhpcy5yZW5kZXJQYXNzPy5yZXNpemUoKVxuICAgIHRoaXMucG9zdFByb2Nlc3NpbmdQYXNzPy5yZXNpemUoKVxuICAgIC8vdGhpcy5tdWx0aXNhbXBsaW5nUGFzcz8ucmVzaXplKClcblxuICAgIHRoaXMucmVuZGVyVGFyZ2V0cy5mb3JFYWNoKChyZW5kZXJUYXJnZXQpID0+IHJlbmRlclRhcmdldC5yZXNpemUodGhpcy5waXhlbFJhdGlvQm91bmRpbmdSZWN0KSlcbiAgICB0aGlzLnJlbmRlclRleHR1cmVzLmZvckVhY2goKHJlbmRlclRleHR1cmUpID0+IHJlbmRlclRleHR1cmUucmVzaXplKCkpXG5cbiAgICAvLyBmb3JjZSBjb21wdXRlIHBhc3NlcyBvbkFmdGVyUmVzaXplIGNhbGxiYWNrXG4gICAgdGhpcy5jb21wdXRlUGFzc2VzLmZvckVhY2goKGNvbXB1dGVQYXNzKSA9PiBjb21wdXRlUGFzcy5yZXNpemUoKSlcblxuICAgIC8vIG5vdyByZXNpemUgbWVzaGVzIHRoYXQgYXJlIGJvdW5kIHRvIHRoZSByZW5kZXJlciBzaXplXG4gICAgLy8gZXNwZWNpYWxseSB1c2VmdWwgdG8gcmVzaXplIHJlbmRlciB0ZXh0dXJlc1xuICAgIHRoaXMucGluZ1BvbmdQbGFuZXMuZm9yRWFjaCgocGluZ1BvbmdQbGFuZSkgPT4gcGluZ1BvbmdQbGFuZS5yZXNpemUodGhpcy5ib3VuZGluZ1JlY3QpKVxuICAgIHRoaXMuc2hhZGVyUGFzc2VzLmZvckVhY2goKHNoYWRlclBhc3MpID0+IHNoYWRlclBhc3MucmVzaXplKHRoaXMuYm91bmRpbmdSZWN0KSlcbiAgICB0aGlzLm1lc2hlcy5mb3JFYWNoKChtZXNoKSA9PiB7XG4gICAgICBpZiAoISgnZG9tRWxlbWVudCcgaW4gbWVzaCkpIHtcbiAgICAgICAgLy8gcmVzaXplIG1lc2hlcyB0aGF0IGRvIG5vdCBoYXZlIGEgYm91bmQgRE9NIGVsZW1lbnRcbiAgICAgICAgbWVzaC5yZXNpemUodGhpcy5ib3VuZGluZ1JlY3QpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLm9uQmVmb3JlQ29tbWFuZEVuY29kZXJDcmVhdGlvbi5hZGQoXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgLy8gdXBkYXRlIHBvc2l0aW9uIGZvciBET00gbWVzaGVzIG9ubHkgaWYgdGhleSdyZSBub3QgY3VycmVudGx5IGJlaW5nIHJlc2l6ZWRcbiAgICAgICAgICAgIGlmICghbWVzaC5kb21FbGVtZW50LmlzUmVzaXppbmcpIHtcbiAgICAgICAgICAgICAgbWVzaC5kb21FbGVtZW50LnNldFNpemUoKVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgeyBvbmNlOiB0cnVlIH1cbiAgICAgICAgKVxuICAgICAgfVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciB7QGxpbmsgZG9tRWxlbWVudCB8IERPTSBFbGVtZW50fSB7QGxpbmsgRE9NRWxlbWVudCNib3VuZGluZ1JlY3QgfCBib3VuZGluZyByZWN0YW5nbGV9XG4gICAqL1xuICBnZXQgYm91bmRpbmdSZWN0KCk6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3Qge1xuICAgIGlmICghIXRoaXMuZG9tRWxlbWVudC5ib3VuZGluZ1JlY3QpIHtcbiAgICAgIHJldHVybiB0aGlzLmRvbUVsZW1lbnQuYm91bmRpbmdSZWN0XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGJvdW5kaW5nUmVjdCA9IHRoaXMuZG9tRWxlbWVudC5lbGVtZW50Py5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdG9wOiBib3VuZGluZ1JlY3QudG9wLFxuICAgICAgICByaWdodDogYm91bmRpbmdSZWN0LnJpZ2h0LFxuICAgICAgICBib3R0b206IGJvdW5kaW5nUmVjdC5ib3R0b20sXG4gICAgICAgIGxlZnQ6IGJvdW5kaW5nUmVjdC5sZWZ0LFxuICAgICAgICB3aWR0aDogYm91bmRpbmdSZWN0LndpZHRoLFxuICAgICAgICBoZWlnaHQ6IGJvdW5kaW5nUmVjdC5oZWlnaHQsXG4gICAgICAgIHg6IGJvdW5kaW5nUmVjdC54LFxuICAgICAgICB5OiBib3VuZGluZ1JlY3QueSxcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciB7QGxpbmsgZG9tRWxlbWVudCB8IERPTSBFbGVtZW50fSB7QGxpbmsgRE9NRWxlbWVudCNib3VuZGluZ1JlY3QgfCBib3VuZGluZyByZWN0YW5nbGV9IGFjY291bnRpbmcgZm9yIGN1cnJlbnQge0BsaW5rIHBpeGVsUmF0aW8gfCBwaXhlbCByYXRpb31cbiAgICovXG4gIGdldCBwaXhlbFJhdGlvQm91bmRpbmdSZWN0KCk6IERPTUVsZW1lbnRCb3VuZGluZ1JlY3Qge1xuICAgIGNvbnN0IGRldmljZVBpeGVsUmF0aW8gPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbyA/PyAxXG4gICAgY29uc3Qgc2NhbGVCb3VuZGluZ1JlY3QgPSB0aGlzLnBpeGVsUmF0aW8gLyBkZXZpY2VQaXhlbFJhdGlvXG5cbiAgICByZXR1cm4gT2JqZWN0LmtleXModGhpcy5ib3VuZGluZ1JlY3QpLnJlZHVjZShcbiAgICAgIChhLCBrZXkpID0+ICh7IC4uLmEsIFtrZXldOiB0aGlzLmJvdW5kaW5nUmVjdFtrZXldICogc2NhbGVCb3VuZGluZ1JlY3QgfSksXG4gICAgICB7XG4gICAgICAgIHg6IDAsXG4gICAgICAgIHk6IDAsXG4gICAgICAgIHdpZHRoOiAwLFxuICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgcmlnaHQ6IDAsXG4gICAgICAgIGJvdHRvbTogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgIH1cbiAgICApXG4gIH1cblxuICAvKiBVU0VGVUwgREVWSUNFIE1BTkFHRVIgT0JKRUNUUyAqL1xuXG4gIC8qKlxuICAgKiBHZXQgb3VyIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI2RldmljZSB8IGRldmljZX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgZGV2aWNlKCk6IEdQVURldmljZSB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuZGV2aWNlTWFuYWdlci5kZXZpY2VcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgd2hldGhlciBvdXIge0BsaW5rIEdQVURldmljZU1hbmFnZXJ9IGlzIHJlYWR5IChpLmUuIGl0cyB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlciNhZGFwdGVyIHwgYWRhcHRlcn0gYW5kIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI2RldmljZSB8IGRldmljZX0gYXJlIHNldCkgaXRzIHtAbGluayBjb250ZXh0fSBpcyBzZXQgYW5kIGl0cyBzaXplIGlzIHNldFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCByZWFkeSgpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2VNYW5hZ2VyLnJlYWR5ICYmICEhdGhpcy5jb250ZXh0ICYmICEhdGhpcy5jYW52YXMuc3R5bGUud2lkdGhcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3VyIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI3Byb2R1Y3Rpb24gfCBHUFVEZXZpY2VNYW5hZ2VyIHByb2R1Y3Rpb24gZmxhZ31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgcHJvZHVjdGlvbigpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2VNYW5hZ2VyLnByb2R1Y3Rpb25cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHRoZSBjcmVhdGVkIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI3NhbXBsZXJzIHwgc2FtcGxlcnN9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHNhbXBsZXJzKCk6IFNhbXBsZXJbXSB7XG4gICAgcmV0dXJuIHRoaXMuZGV2aWNlTWFuYWdlci5zYW1wbGVyc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgdGhlIGNyZWF0ZWQge0BsaW5rIEdQVURldmljZU1hbmFnZXIjYnVmZmVycyB8IEdQVSBidWZmZXJzfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBidWZmZXJzKCk6IEdQVUJ1ZmZlcltdIHtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2VNYW5hZ2VyLmJ1ZmZlcnNcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgdGhlIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI3BpcGVsaW5lTWFuYWdlciB8IHBpcGVsaW5lIG1hbmFnZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHBpcGVsaW5lTWFuYWdlcigpOiBQaXBlbGluZU1hbmFnZXIge1xuICAgIHJldHVybiB0aGlzLmRldmljZU1hbmFnZXIucGlwZWxpbmVNYW5hZ2VyXG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCB0aGUgcmVuZGVyZWQgb2JqZWN0cyAoaS5lLiBjb21wdXRlIHBhc3NlcywgbWVzaGVzLCBwaW5nIHBvbmcgcGxhbmVzIGFuZCBzaGFkZXIgcGFzc2VzKSBjcmVhdGVkIGJ5IHRoZSB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgZGV2aWNlUmVuZGVyZWRPYmplY3RzKCk6IFNjZW5lT2JqZWN0W10ge1xuICAgIHJldHVybiB0aGlzLmRldmljZU1hbmFnZXIuZGV2aWNlUmVuZGVyZWRPYmplY3RzXG4gIH1cblxuICAvKipcbiAgICogQ29uZmlndXJlIG91ciB7QGxpbmsgY29udGV4dH0gd2l0aCB0aGUgZ2l2ZW4gb3B0aW9uc1xuICAgKi9cbiAgY29uZmlndXJlQ29udGV4dCgpIHtcbiAgICB0aGlzLmNvbnRleHQuY29uZmlndXJlKHtcbiAgICAgIGRldmljZTogdGhpcy5kZXZpY2UsXG4gICAgICBmb3JtYXQ6IHRoaXMub3B0aW9ucy5wcmVmZXJyZWRGb3JtYXQsXG4gICAgICBhbHBoYU1vZGU6IHRoaXMuYWxwaGFNb2RlLFxuICAgICAgLy8gbmVlZGVkIHNvIHdlIGNhbiBjb3B5IHRleHR1cmVzIGZvciBwb3N0IHByb2Nlc3NpbmcgdXNhZ2VcbiAgICAgIHVzYWdlOiBHUFVUZXh0dXJlVXNhZ2UuUkVOREVSX0FUVEFDSE1FTlQgfCBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9TUkMgfCBHUFVUZXh0dXJlVXNhZ2UuQ09QWV9EU1QsXG4gICAgICAvL3ZpZXdGb3JtYXRzOiBbXVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciB7QGxpbmsgY29udGV4dH0gaWYgcG9zc2libGUgYW5kIHNldCB7QGxpbmsgcmVuZGVyUGFzcyB8IG1haW4gcmVuZGVyIHBhc3N9IGFuZCB7QGxpbmsgc2NlbmV9XG4gICAqL1xuICBzZXRDb250ZXh0KCkge1xuICAgIHRoaXMuY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoJ3dlYmdwdScpXG5cbiAgICBpZiAodGhpcy5kZXZpY2UpIHtcbiAgICAgIHRoaXMuY29uZmlndXJlQ29udGV4dCgpXG5cbiAgICAgIHRoaXMuc2V0TWFpblJlbmRlclBhc3NlcygpXG4gICAgICB0aGlzLnNldFNjZW5lKClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI2RldmljZSB8IGRldmljZX0gaXMgbG9zdC5cbiAgICogRm9yY2UgYWxsIG91ciBzY2VuZSBvYmplY3RzIHRvIGxvc2UgY29udGV4dC5cbiAgICovXG4gIGxvc2VDb250ZXh0KCkge1xuICAgIC8vIGZvcmNlIGFsbCBvdXIgc2NlbmUgb2JqZWN0cyB0byBsb3NlIGNvbnRleHRcbiAgICB0aGlzLnJlbmRlcmVkT2JqZWN0cy5mb3JFYWNoKChzY2VuZU9iamVjdCkgPT4gc2NlbmVPYmplY3QubG9zZUNvbnRleHQoKSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUge0BsaW5rIEdQVURldmljZU1hbmFnZXIjZGV2aWNlIHwgZGV2aWNlfSBzaG91bGQgYmUgcmVzdG9yZWQuXG4gICAqIENvbmZpZ3VyZSB0aGUgY29udGV4dCBhZ2FpbiwgcmVzaXplIHRoZSB7QGxpbmsgUmVuZGVyVGFyZ2V0IHwgcmVuZGVyIHRhcmdldHN9IGFuZCB7QGxpbmsgUmVuZGVyVGV4dHVyZSB8IHJlbmRlciB0ZXh0dXJlc30sIHJlc3RvcmUgb3VyIHtAbGluayByZW5kZXJlZE9iamVjdHMgfCByZW5kZXJlZCBvYmplY3RzfSBjb250ZXh0LlxuICAgKiBAYXN5bmNcbiAgICovXG4gIHJlc3RvcmVDb250ZXh0KCkge1xuICAgIHRoaXMuY29uZmlndXJlQ29udGV4dCgpXG5cbiAgICAvLyByZWNyZWF0ZSBhbGwgcmVuZGVyIHRleHR1cmVzIGZpcnN0XG4gICAgdGhpcy5yZW5kZXJUZXh0dXJlcy5mb3JFYWNoKChyZW5kZXJUZXh0dXJlKSA9PiB7XG4gICAgICByZW5kZXJUZXh0dXJlLmZvcmNlUmVzaXplKHtcbiAgICAgICAgd2lkdGg6IE1hdGguZmxvb3IodGhpcy5waXhlbFJhdGlvQm91bmRpbmdSZWN0LndpZHRoKSxcbiAgICAgICAgaGVpZ2h0OiBNYXRoLmZsb29yKHRoaXMucGl4ZWxSYXRpb0JvdW5kaW5nUmVjdC5oZWlnaHQpLFxuICAgICAgICBkZXB0aDogMSxcbiAgICAgIH0pXG4gICAgfSlcblxuICAgIC8vIHJlc2l6ZSByZW5kZXIgcGFzc2VzL3JlY3JlYXRlIHRoZWlyIHRleHR1cmVzXG4gICAgdGhpcy5yZW5kZXJQYXNzPy5yZXNpemUoKVxuICAgIHRoaXMucG9zdFByb2Nlc3NpbmdQYXNzPy5yZXNpemUoKVxuICAgIC8vdGhpcy5tdWx0aXNhbXBsaW5nUGFzcz8ucmVzaXplKClcblxuICAgIHRoaXMucmVuZGVyVGFyZ2V0cy5mb3JFYWNoKChyZW5kZXJUYXJnZXQpID0+IHJlbmRlclRhcmdldC5yZXNpemUodGhpcy5waXhlbFJhdGlvQm91bmRpbmdSZWN0KSlcblxuICAgIC8vIHJlc3RvcmUgY29udGV4dCBvZiBhbGwgb3VyIHNjZW5lIG9iamVjdHNcbiAgICB0aGlzLnJlbmRlcmVkT2JqZWN0cy5mb3JFYWNoKChzY2VuZU9iamVjdCkgPT4gc2NlbmVPYmplY3QucmVzdG9yZUNvbnRleHQoKSlcbiAgfVxuXG4gIC8qIFBJUEVMSU5FUywgU0NFTkUgJiBNQUlOIFJFTkRFUiBQQVNTICovXG5cbiAgLyoqXG4gICAqIFNldCBvdXIge0BsaW5rIHJlbmRlclBhc3MgfCBtYWluIHJlbmRlciBwYXNzfSB0aGF0IHdpbGwgYmUgdXNlZCB0byByZW5kZXIgdGhlIHJlc3VsdCBvZiBvdXIgZHJhdyBjb21tYW5kcyBiYWNrIHRvIHRoZSBzY3JlZW5cbiAgICovXG4gIHNldE1haW5SZW5kZXJQYXNzZXMoKSB7XG4gICAgLy8gVE9ETyBoYW5kbGUgbXVsdGlzYW1wbGluZyBkaWZmZXJlbnRseT9cbiAgICAvLyBjZjogaHR0cHM6Ly93ZWJncHVmdW5kYW1lbnRhbHMub3JnL3dlYmdwdS9sZXNzb25zL3dlYmdwdS1tdWx0aXNhbXBsaW5nLmh0bWwjeW91LWRvLW5vdC1oYXZlLXRvLXNldC1hLXJlc29sdmUtdGFyZ2V0LW9uLWV2ZXJ5LXJlbmRlci1wYXNzXG4gICAgdGhpcy5yZW5kZXJQYXNzID0gbmV3IFJlbmRlclBhc3ModGhpcywge1xuICAgICAgbGFiZWw6ICdNYWluIHJlbmRlciBwYXNzJyxcbiAgICAgIHRhcmdldEZvcm1hdDogdGhpcy5vcHRpb25zLnByZWZlcnJlZEZvcm1hdCxcbiAgICAgIC4uLnRoaXMub3B0aW9ucy5yZW5kZXJQYXNzLFxuICAgIH0pXG5cbiAgICB0aGlzLnBvc3RQcm9jZXNzaW5nUGFzcyA9IG5ldyBSZW5kZXJQYXNzKHRoaXMsIHtcbiAgICAgIGxhYmVsOiAnUG9zdCBwcm9jZXNzaW5nIHJlbmRlciBwYXNzJyxcbiAgICAgIHRhcmdldEZvcm1hdDogdGhpcy5vcHRpb25zLnByZWZlcnJlZEZvcm1hdCxcbiAgICAgIGRlcHRoOiBmYWxzZSxcbiAgICAgIHNhbXBsZUNvdW50OiB0aGlzLm9wdGlvbnMucmVuZGVyUGFzcy5zYW1wbGVDb3VudCwgLy8gVE9ETz9cbiAgICB9KVxuXG4gICAgLy8gVE9ET1xuICAgIC8vIGlmICh0aGlzLm9wdGlvbnMubXVsdGlzYW1wbGVkKSB7XG4gICAgLy8gICB0aGlzLm11bHRpc2FtcGxpbmdQYXNzID0gbmV3IFJlbmRlclBhc3ModGhpcywge1xuICAgIC8vICAgICBsYWJlbDogJ01TQUEgcmVuZGVyIHBhc3MnLFxuICAgIC8vICAgICB0YXJnZXRGb3JtYXQ6IHRoaXMub3B0aW9ucy5wcmVmZXJyZWRGb3JtYXQsXG4gICAgLy8gICAgIGRlcHRoOiBmYWxzZSxcbiAgICAvLyAgICAgbG9hZE9wOiAnbG9hZCcsXG4gICAgLy8gICAgIHNhbXBsZUNvdW50OiA0LFxuICAgIC8vICAgfSlcbiAgICAvL1xuICAgIC8vICAgY29uc3QgcmVzb2x2ZVRleHR1cmUgPSBuZXcgUmVuZGVyVGV4dHVyZSh0aGlzLCB7XG4gICAgLy8gICAgIGxhYmVsOiAnTVNBQSByZW5kZXIgcGFzcyByZXNvbHZlIHRleHR1cmUnLFxuICAgIC8vICAgICBuYW1lOiAncmVzb2x2ZVRleHR1cmUnLFxuICAgIC8vICAgICBmb3JtYXQ6IHRoaXMub3B0aW9ucy5wcmVmZXJyZWRGb3JtYXQsXG4gICAgLy8gICB9KVxuICAgIC8vXG4gICAgLy8gICB0aGlzLm11bHRpc2FtcGxpbmdQYXNzLmRlc2NyaXB0b3IuY29sb3JBdHRhY2htZW50c1swXS5yZXNvbHZlVGFyZ2V0ID0gcmVzb2x2ZVRleHR1cmUudGV4dHVyZS5jcmVhdGVWaWV3KHtcbiAgICAvLyAgICAgbGFiZWw6ICdNU0FBIHJlbmRlciBwYXNzIHJlc29sdmUgdGV4dHVyZSB2aWV3JyxcbiAgICAvLyAgIH0pXG4gICAgLy8gfVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvdXIge0BsaW5rIHNjZW5lfVxuICAgKi9cbiAgc2V0U2NlbmUoKSB7XG4gICAgdGhpcy5zY2VuZSA9IG5ldyBTY2VuZSh7IHJlbmRlcmVyOiB0aGlzIH0pXG4gIH1cblxuICAvKiBCVUZGRVJTICYgQklORElOR1MgKi9cblxuICAvKipcbiAgICogQ3JlYXRlIGEge0BsaW5rIEdQVUJ1ZmZlcn1cbiAgICogQHBhcmFtIGJ1ZmZlckRlc2NyaXB0b3IgLSB7QGxpbmsgR1BVQnVmZmVyRGVzY3JpcHRvciB8IEdQVSBidWZmZXIgZGVzY3JpcHRvcn1cbiAgICogQHJldHVybnMgLSBuZXdseSBjcmVhdGVkIHtAbGluayBHUFVCdWZmZXJ9XG4gICAqL1xuICBjcmVhdGVCdWZmZXIoYnVmZmVyRGVzY3JpcHRvcjogR1BVQnVmZmVyRGVzY3JpcHRvcik6IEdQVUJ1ZmZlciB7XG4gICAgY29uc3QgYnVmZmVyID0gdGhpcy5kZXZpY2U/LmNyZWF0ZUJ1ZmZlcihidWZmZXJEZXNjcmlwdG9yKVxuICAgIHRoaXMuZGV2aWNlTWFuYWdlci5hZGRCdWZmZXIoYnVmZmVyKVxuICAgIHJldHVybiBidWZmZXJcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSB7QGxpbmsgR1BVQnVmZmVyfSBmcm9tIG91ciB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlciNidWZmZXJzIHwgR1BVIGJ1ZmZlcnMgYXJyYXl9XG4gICAqIEBwYXJhbSBidWZmZXIgLSB7QGxpbmsgR1BVQnVmZmVyfSB0byByZW1vdmVcbiAgICogQHBhcmFtIFtvcmlnaW5hbExhYmVsXSAtIG9yaWdpbmFsIHtAbGluayBHUFVCdWZmZXJ9IGxhYmVsIGluIGNhc2UgdGhlIGJ1ZmZlciBoYXMgYmVlbiBzd2FwcGVkIGFuZCBpdHMgbGFiZWwgaGFzIGNoYW5nZWRcbiAgICovXG4gIHJlbW92ZUJ1ZmZlcihidWZmZXI6IEdQVUJ1ZmZlciwgb3JpZ2luYWxMYWJlbD86IHN0cmluZykge1xuICAgIHRoaXMuZGV2aWNlTWFuYWdlci5yZW1vdmVCdWZmZXIoYnVmZmVyLCBvcmlnaW5hbExhYmVsKVxuICB9XG5cbiAgLyoqXG4gICAqIFdyaXRlIHRvIGEge0BsaW5rIEdQVUJ1ZmZlcn1cbiAgICogQHBhcmFtIGJ1ZmZlciAtIHtAbGluayBHUFVCdWZmZXJ9IHRvIHdyaXRlIHRvXG4gICAqIEBwYXJhbSBidWZmZXJPZmZzZXQgLSB7QGxpbmsgR1BVU2l6ZTY0IHwgYnVmZmVyIG9mZnNldH1cbiAgICogQHBhcmFtIGRhdGEgLSB7QGxpbmsgQnVmZmVyU291cmNlIHwgZGF0YX0gdG8gd3JpdGVcbiAgICovXG4gIHF1ZXVlV3JpdGVCdWZmZXIoYnVmZmVyOiBHUFVCdWZmZXIsIGJ1ZmZlck9mZnNldDogR1BVU2l6ZTY0LCBkYXRhOiBCdWZmZXJTb3VyY2UpIHtcbiAgICB0aGlzLmRldmljZT8ucXVldWUud3JpdGVCdWZmZXIoYnVmZmVyLCBidWZmZXJPZmZzZXQsIGRhdGEpXG4gIH1cblxuICAvKipcbiAgICogQ29weSBhIHNvdXJjZSB7QGxpbmsgR1BVQnVmZmVyfSBpbnRvIGEgZGVzdGluYXRpb24ge0BsaW5rIEdQVUJ1ZmZlcn1cbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSBwYXJhbWV0ZXJzIHVzZWQgdG8gcmVhbGl6ZSB0aGUgY29weVxuICAgKiBAcGFyYW0gcGFyYW1ldGVycy5zcmNCdWZmZXIgLSBzb3VyY2Uge0BsaW5rIEdQVUJ1ZmZlcn1cbiAgICogQHBhcmFtIFtwYXJhbWV0ZXJzLmRzdEJ1ZmZlcl0gLSBkZXN0aW5hdGlvbiB7QGxpbmsgR1BVQnVmZmVyfS4gV2lsbCBjcmVhdGUgYSBuZXcgb25lIGlmIG5vbmUgcHJvdmlkZWQuXG4gICAqIEBwYXJhbSBbcGFyYW1ldGVycy5jb21tYW5kRW5jb2Rlcl0gLSB7QGxpbmsgR1BVQ29tbWFuZEVuY29kZXJ9IHRvIHVzZSBmb3IgdGhlIGNvcHkuIFdpbGwgY3JlYXRlIGEgbmV3IG9uZSBhbmQgc3VibWl0IHRoZSBjb21tYW5kIGJ1ZmZlciBpZiBub25lIHByb3ZpZGVkLlxuICAgKiBAcmV0dXJucyAtIGRlc3RpbmF0aW9uIHtAbGluayBHUFVCdWZmZXJ9IGFmdGVyIGNvcHlcbiAgICovXG4gIGNvcHlCdWZmZXJUb0J1ZmZlcih7XG4gICAgc3JjQnVmZmVyLFxuICAgIGRzdEJ1ZmZlcixcbiAgICBjb21tYW5kRW5jb2RlcixcbiAgfToge1xuICAgIHNyY0J1ZmZlcjogR1BVQnVmZmVyXG4gICAgZHN0QnVmZmVyPzogR1BVQnVmZmVyXG4gICAgY29tbWFuZEVuY29kZXI/OiBHUFVDb21tYW5kRW5jb2RlclxuICB9KTogR1BVQnVmZmVyIHwgbnVsbCB7XG4gICAgaWYgKCFzcmNCdWZmZXIpIHtcbiAgICAgIHRocm93V2FybmluZyhgJHt0aGlzLnR5cGV9OiBjYW5ub3QgY29weSB0byBidWZmZXIgYmVjYXVzZSB0aGUgc291cmNlIGJ1ZmZlciBoYXMgbm90IGJlZW4gcHJvdmlkZWRgKVxuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG5cbiAgICBpZiAoIWRzdEJ1ZmZlcikge1xuICAgICAgZHN0QnVmZmVyID0gdGhpcy5jcmVhdGVCdWZmZXIoe1xuICAgICAgICBsYWJlbDogdGhpcy50eXBlICsgJzogZGVzdGluYXRpb24gY29weSBidWZmZXIgZnJvbTogJyArIHNyY0J1ZmZlci5sYWJlbCxcbiAgICAgICAgc2l6ZTogc3JjQnVmZmVyLnNpemUsXG4gICAgICAgIHVzYWdlOiBHUFVCdWZmZXJVc2FnZS5NQVBfUkVBRCB8IEdQVUJ1ZmZlclVzYWdlLkNPUFlfRFNULFxuICAgICAgfSlcbiAgICB9XG5cbiAgICBpZiAoc3JjQnVmZmVyLm1hcFN0YXRlICE9PSAndW5tYXBwZWQnKSB7XG4gICAgICB0aHJvd1dhcm5pbmcoYCR7dGhpcy50eXBlfTogQ2Fubm90IGNvcHkgZnJvbSAke3NyY0J1ZmZlcn0gYmVjYXVzZSBpdCBpcyBjdXJyZW50bHkgbWFwcGVkYClcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICBpZiAoZHN0QnVmZmVyLm1hcFN0YXRlICE9PSAndW5tYXBwZWQnKSB7XG4gICAgICB0aHJvd1dhcm5pbmcoYCR7dGhpcy50eXBlfTogQ2Fubm90IGNvcHkgZnJvbSAke2RzdEJ1ZmZlcn0gYmVjYXVzZSBpdCBpcyBjdXJyZW50bHkgbWFwcGVkYClcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIC8vIGlmIHRoZXJlJ3Mgbm8gY29tbWFuZCBlbmNvZGVyIHByb3ZpZGVkLCB3ZSdsbCBoYXZlIHRvIGNyZWF0ZSBvbmUgYW5kIHN1Ym1pdCBpdCBhZnRlciB0aGUgY29weSBwcm9jZXNzXG4gICAgY29uc3QgaGFzQ29tbWFuZEVuY29kZXIgPSAhIWNvbW1hbmRFbmNvZGVyXG5cbiAgICBpZiAoIWhhc0NvbW1hbmRFbmNvZGVyKSB7XG4gICAgICBjb21tYW5kRW5jb2RlciA9IHRoaXMuZGV2aWNlPy5jcmVhdGVDb21tYW5kRW5jb2Rlcih7IGxhYmVsOiAnQ29weSBidWZmZXIgY29tbWFuZCBlbmNvZGVyJyB9KVxuICAgICAgIXRoaXMucHJvZHVjdGlvbiAmJiBjb21tYW5kRW5jb2Rlci5wdXNoRGVidWdHcm91cCgnQ29weSBidWZmZXIgY29tbWFuZCBlbmNvZGVyJylcbiAgICB9XG5cbiAgICBjb21tYW5kRW5jb2Rlci5jb3B5QnVmZmVyVG9CdWZmZXIoc3JjQnVmZmVyLCAwLCBkc3RCdWZmZXIsIDAsIGRzdEJ1ZmZlci5zaXplKVxuXG4gICAgaWYgKCFoYXNDb21tYW5kRW5jb2Rlcikge1xuICAgICAgIXRoaXMucHJvZHVjdGlvbiAmJiBjb21tYW5kRW5jb2Rlci5wb3BEZWJ1Z0dyb3VwKClcbiAgICAgIGNvbnN0IGNvbW1hbmRCdWZmZXIgPSBjb21tYW5kRW5jb2Rlci5maW5pc2goKVxuICAgICAgdGhpcy5kZXZpY2U/LnF1ZXVlLnN1Ym1pdChbY29tbWFuZEJ1ZmZlcl0pXG4gICAgfVxuXG4gICAgcmV0dXJuIGRzdEJ1ZmZlclxuICB9XG5cbiAgLyogQklORCBHUk9VUFMgJiBMQVlPVVRTICovXG5cbiAgLyoqXG4gICAqIEdldCBhbGwgY3JlYXRlZCB7QGxpbmsgQWxsb3dlZEJpbmRHcm91cHMgfCBiaW5kIGdyb3VwfSB0cmFja2VkIGJ5IG91ciB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgYmluZEdyb3VwcygpOiBBbGxvd2VkQmluZEdyb3Vwc1tdIHtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2VNYW5hZ2VyLmJpbmRHcm91cHNcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgQWxsb3dlZEJpbmRHcm91cHMgfCBiaW5kIGdyb3VwfSB0byBvdXIge0BsaW5rIEdQVURldmljZU1hbmFnZXIjYmluZEdyb3VwcyB8IGJpbmQgZ3JvdXBzIGFycmF5fVxuICAgKiBAcGFyYW0gYmluZEdyb3VwIC0ge0BsaW5rIEFsbG93ZWRCaW5kR3JvdXBzIHwgYmluZCBncm91cH0gdG8gYWRkXG4gICAqL1xuICBhZGRCaW5kR3JvdXAoYmluZEdyb3VwOiBBbGxvd2VkQmluZEdyb3Vwcykge1xuICAgIHRoaXMuZGV2aWNlTWFuYWdlci5hZGRCaW5kR3JvdXAoYmluZEdyb3VwKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBBbGxvd2VkQmluZEdyb3VwcyB8IGJpbmQgZ3JvdXB9IGZyb20gb3VyIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI2JpbmRHcm91cHMgfCBiaW5kIGdyb3VwcyBhcnJheX1cbiAgICogQHBhcmFtIGJpbmRHcm91cCAtIHtAbGluayBBbGxvd2VkQmluZEdyb3VwcyB8IGJpbmQgZ3JvdXB9IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlQmluZEdyb3VwKGJpbmRHcm91cDogQWxsb3dlZEJpbmRHcm91cHMpIHtcbiAgICB0aGlzLmRldmljZU1hbmFnZXIucmVtb3ZlQmluZEdyb3VwKGJpbmRHcm91cClcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB7QGxpbmsgR1BVQmluZEdyb3VwTGF5b3V0fVxuICAgKiBAcGFyYW0gYmluZEdyb3VwTGF5b3V0RGVzY3JpcHRvciAtIHtAbGluayBHUFVCaW5kR3JvdXBMYXlvdXREZXNjcmlwdG9yIHwgR1BVIGJpbmQgZ3JvdXAgbGF5b3V0IGRlc2NyaXB0b3J9XG4gICAqIEByZXR1cm5zIC0gbmV3bHkgY3JlYXRlZCB7QGxpbmsgR1BVQmluZEdyb3VwTGF5b3V0fVxuICAgKi9cbiAgY3JlYXRlQmluZEdyb3VwTGF5b3V0KGJpbmRHcm91cExheW91dERlc2NyaXB0b3I6IEdQVUJpbmRHcm91cExheW91dERlc2NyaXB0b3IpOiBHUFVCaW5kR3JvdXBMYXlvdXQge1xuICAgIHJldHVybiB0aGlzLmRldmljZT8uY3JlYXRlQmluZEdyb3VwTGF5b3V0KGJpbmRHcm91cExheW91dERlc2NyaXB0b3IpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEge0BsaW5rIEdQVUJpbmRHcm91cH1cbiAgICogQHBhcmFtIGJpbmRHcm91cERlc2NyaXB0b3IgLSB7QGxpbmsgR1BVQmluZEdyb3VwRGVzY3JpcHRvciB8IEdQVSBiaW5kIGdyb3VwIGRlc2NyaXB0b3J9XG4gICAqIEByZXR1cm5zIC0gbmV3bHkgY3JlYXRlZCB7QGxpbmsgR1BVQmluZEdyb3VwfVxuICAgKi9cbiAgY3JlYXRlQmluZEdyb3VwKGJpbmRHcm91cERlc2NyaXB0b3I6IEdQVUJpbmRHcm91cERlc2NyaXB0b3IpOiBHUFVCaW5kR3JvdXAge1xuICAgIHJldHVybiB0aGlzLmRldmljZT8uY3JlYXRlQmluZEdyb3VwKGJpbmRHcm91cERlc2NyaXB0b3IpXG4gIH1cblxuICAvKiBTSEFERVJTICYgUElQRUxJTkVTICovXG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHtAbGluayBHUFVTaGFkZXJNb2R1bGV9XG4gICAqIEBwYXJhbSBzaGFkZXJNb2R1bGVEZXNjcmlwdG9yIC0ge0BsaW5rIHNoYWRlck1vZHVsZURlc2NyaXB0b3IgfCBzaGFkZXIgbW9kdWxlIGRlc2NyaXB0b3J9XG4gICAqIEByZXR1cm5zIC0gbmV3bHkgY3JlYXRlZCB7QGxpbmsgR1BVU2hhZGVyTW9kdWxlfVxuICAgKi9cbiAgY3JlYXRlU2hhZGVyTW9kdWxlKHNoYWRlck1vZHVsZURlc2NyaXB0b3I6IEdQVVNoYWRlck1vZHVsZURlc2NyaXB0b3IpOiBHUFVTaGFkZXJNb2R1bGUge1xuICAgIHJldHVybiB0aGlzLmRldmljZT8uY3JlYXRlU2hhZGVyTW9kdWxlKHNoYWRlck1vZHVsZURlc2NyaXB0b3IpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEge0BsaW5rIEdQVVBpcGVsaW5lTGF5b3V0fVxuICAgKiBAcGFyYW0gcGlwZWxpbmVMYXlvdXREZXNjcmlwdG9yIC0ge0BsaW5rIEdQVVBpcGVsaW5lTGF5b3V0RGVzY3JpcHRvciB8IEdQVSBwaXBlbGluZSBsYXlvdXQgZGVzY3JpcHRvcn1cbiAgICogQHJldHVybnMgLSBuZXdseSBjcmVhdGVkIHtAbGluayBHUFVQaXBlbGluZUxheW91dH1cbiAgICovXG4gIGNyZWF0ZVBpcGVsaW5lTGF5b3V0KHBpcGVsaW5lTGF5b3V0RGVzY3JpcHRvcjogR1BVUGlwZWxpbmVMYXlvdXREZXNjcmlwdG9yKTogR1BVUGlwZWxpbmVMYXlvdXQge1xuICAgIHJldHVybiB0aGlzLmRldmljZT8uY3JlYXRlUGlwZWxpbmVMYXlvdXQocGlwZWxpbmVMYXlvdXREZXNjcmlwdG9yKVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIHtAbGluayBHUFVSZW5kZXJQaXBlbGluZX1cbiAgICogQHBhcmFtIHBpcGVsaW5lRGVzY3JpcHRvciAtIHtAbGluayBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IgfCBHUFUgcmVuZGVyIHBpcGVsaW5lIGRlc2NyaXB0b3J9XG4gICAqIEByZXR1cm5zIC0gbmV3bHkgY3JlYXRlZCB7QGxpbmsgR1BVUmVuZGVyUGlwZWxpbmV9XG4gICAqL1xuICBjcmVhdGVSZW5kZXJQaXBlbGluZShwaXBlbGluZURlc2NyaXB0b3I6IEdQVVJlbmRlclBpcGVsaW5lRGVzY3JpcHRvcik6IEdQVVJlbmRlclBpcGVsaW5lIHtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2U/LmNyZWF0ZVJlbmRlclBpcGVsaW5lKHBpcGVsaW5lRGVzY3JpcHRvcilcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3luY2hyb25vdXNseSBjcmVhdGUgYSB7QGxpbmsgR1BVUmVuZGVyUGlwZWxpbmV9XG4gICAqIEBhc3luY1xuICAgKiBAcGFyYW0gcGlwZWxpbmVEZXNjcmlwdG9yIC0ge0BsaW5rIEdQVVJlbmRlclBpcGVsaW5lRGVzY3JpcHRvciB8IEdQVSByZW5kZXIgcGlwZWxpbmUgZGVzY3JpcHRvcn1cbiAgICogQHJldHVybnMgLSBuZXdseSBjcmVhdGVkIHtAbGluayBHUFVSZW5kZXJQaXBlbGluZX1cbiAgICovXG4gIGFzeW5jIGNyZWF0ZVJlbmRlclBpcGVsaW5lQXN5bmMocGlwZWxpbmVEZXNjcmlwdG9yOiBHUFVSZW5kZXJQaXBlbGluZURlc2NyaXB0b3IpOiBQcm9taXNlPEdQVVJlbmRlclBpcGVsaW5lPiB7XG4gICAgcmV0dXJuIGF3YWl0IHRoaXMuZGV2aWNlPy5jcmVhdGVSZW5kZXJQaXBlbGluZUFzeW5jKHBpcGVsaW5lRGVzY3JpcHRvcilcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSB7QGxpbmsgR1BVQ29tcHV0ZVBpcGVsaW5lfVxuICAgKiBAcGFyYW0gcGlwZWxpbmVEZXNjcmlwdG9yIC0ge0BsaW5rIEdQVUNvbXB1dGVQaXBlbGluZURlc2NyaXB0b3IgfCBHUFUgY29tcHV0ZSBwaXBlbGluZSBkZXNjcmlwdG9yfVxuICAgKiBAcmV0dXJucyAtIG5ld2x5IGNyZWF0ZWQge0BsaW5rIEdQVUNvbXB1dGVQaXBlbGluZX1cbiAgICovXG4gIGNyZWF0ZUNvbXB1dGVQaXBlbGluZShwaXBlbGluZURlc2NyaXB0b3I6IEdQVUNvbXB1dGVQaXBlbGluZURlc2NyaXB0b3IpOiBHUFVDb21wdXRlUGlwZWxpbmUge1xuICAgIHJldHVybiB0aGlzLmRldmljZT8uY3JlYXRlQ29tcHV0ZVBpcGVsaW5lKHBpcGVsaW5lRGVzY3JpcHRvcilcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3luY2hyb25vdXNseSBjcmVhdGUgYSB7QGxpbmsgR1BVQ29tcHV0ZVBpcGVsaW5lfVxuICAgKiBAYXN5bmNcbiAgICogQHBhcmFtIHBpcGVsaW5lRGVzY3JpcHRvciAtIHtAbGluayBHUFVDb21wdXRlUGlwZWxpbmVEZXNjcmlwdG9yIHwgR1BVIGNvbXB1dGUgcGlwZWxpbmUgZGVzY3JpcHRvcn1cbiAgICogQHJldHVybnMgLSBuZXdseSBjcmVhdGVkIHtAbGluayBHUFVDb21wdXRlUGlwZWxpbmV9XG4gICAqL1xuICBhc3luYyBjcmVhdGVDb21wdXRlUGlwZWxpbmVBc3luYyhwaXBlbGluZURlc2NyaXB0b3I6IEdQVUNvbXB1dGVQaXBlbGluZURlc2NyaXB0b3IpOiBQcm9taXNlPEdQVUNvbXB1dGVQaXBlbGluZT4ge1xuICAgIHJldHVybiBhd2FpdCB0aGlzLmRldmljZT8uY3JlYXRlQ29tcHV0ZVBpcGVsaW5lQXN5bmMocGlwZWxpbmVEZXNjcmlwdG9yKVxuICB9XG5cbiAgLyogVEVYVFVSRVMgKi9cblxuICAvKipcbiAgICogR2V0IGFsbCBjcmVhdGVkIHtAbGluayBUZXh0dXJlfSB0cmFja2VkIGJ5IG91ciB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgdGV4dHVyZXMoKTogVGV4dHVyZVtdIHtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2VNYW5hZ2VyLnRleHR1cmVzXG4gIH1cblxuICAvKipcbiAgICogQWRkIGEge0BsaW5rIFRleHR1cmV9IHRvIG91ciB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlciN0ZXh0dXJlcyB8IHRleHR1cmVzIGFycmF5fVxuICAgKiBAcGFyYW0gdGV4dHVyZSAtIHtAbGluayBUZXh0dXJlfSB0byBhZGRcbiAgICovXG4gIGFkZFRleHR1cmUodGV4dHVyZTogVGV4dHVyZSkge1xuICAgIHRoaXMuZGV2aWNlTWFuYWdlci5hZGRUZXh0dXJlKHRleHR1cmUpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEge0BsaW5rIFRleHR1cmV9IGZyb20gb3VyIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI3RleHR1cmVzIHwgdGV4dHVyZXMgYXJyYXl9XG4gICAqIEBwYXJhbSB0ZXh0dXJlIC0ge0BsaW5rIFRleHR1cmV9IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlVGV4dHVyZSh0ZXh0dXJlOiBUZXh0dXJlKSB7XG4gICAgdGhpcy5kZXZpY2VNYW5hZ2VyLnJlbW92ZVRleHR1cmUodGV4dHVyZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gdG8gb3VyIHtAbGluayByZW5kZXJUZXh0dXJlc30gYXJyYXlcbiAgICogQHBhcmFtIHRleHR1cmUgLSB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gdG8gYWRkXG4gICAqL1xuICBhZGRSZW5kZXJUZXh0dXJlKHRleHR1cmU6IFJlbmRlclRleHR1cmUpIHtcbiAgICB0aGlzLnJlbmRlclRleHR1cmVzLnB1c2godGV4dHVyZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmUgYSB7QGxpbmsgUmVuZGVyVGV4dHVyZX0gZnJvbSBvdXIge0BsaW5rIHJlbmRlclRleHR1cmVzfSBhcnJheVxuICAgKiBAcGFyYW0gdGV4dHVyZSAtIHtAbGluayBSZW5kZXJUZXh0dXJlfSB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZVJlbmRlclRleHR1cmUodGV4dHVyZTogUmVuZGVyVGV4dHVyZSkge1xuICAgIHRoaXMucmVuZGVyVGV4dHVyZXMgPSB0aGlzLnJlbmRlclRleHR1cmVzLmZpbHRlcigodCkgPT4gdC51dWlkICE9PSB0ZXh0dXJlLnV1aWQpXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEge0BsaW5rIEdQVVRleHR1cmV9XG4gICAqIEBwYXJhbSB0ZXh0dXJlRGVzY3JpcHRvciAtIHtAbGluayBHUFVUZXh0dXJlRGVzY3JpcHRvciB8IEdQVSB0ZXh0dXJlIGRlc2NyaXB0b3J9XG4gICAqIEByZXR1cm5zIC0gbmV3bHkgY3JlYXRlZCB7QGxpbmsgR1BVVGV4dHVyZX1cbiAgICovXG4gIGNyZWF0ZVRleHR1cmUodGV4dHVyZURlc2NyaXB0b3I6IEdQVVRleHR1cmVEZXNjcmlwdG9yKTogR1BVVGV4dHVyZSB7XG4gICAgcmV0dXJuIHRoaXMuZGV2aWNlPy5jcmVhdGVUZXh0dXJlKHRleHR1cmVEZXNjcmlwdG9yKVxuICB9XG5cbiAgLyoqXG4gICAqIFVwbG9hZCBhIHtAbGluayBUZXh0dXJlI3RleHR1cmUgfCB0ZXh0dXJlfSB0byB0aGUgR1BVXG4gICAqIEBwYXJhbSB0ZXh0dXJlIC0ge0BsaW5rIFRleHR1cmV9IGNsYXNzIG9iamVjdCB3aXRoIHRoZSB7QGxpbmsgVGV4dHVyZSN0ZXh0dXJlIHwgdGV4dHVyZX0gdG8gdXBsb2FkXG4gICAqL1xuICB1cGxvYWRUZXh0dXJlKHRleHR1cmU6IFRleHR1cmUpIHtcbiAgICB0aGlzLmRldmljZU1hbmFnZXIudXBsb2FkVGV4dHVyZSh0ZXh0dXJlKVxuICB9XG5cbiAgLyoqXG4gICAqIEltcG9ydCBhIHtAbGluayBHUFVFeHRlcm5hbFRleHR1cmV9XG4gICAqIEBwYXJhbSB2aWRlbyAtIHtAbGluayBIVE1MVmlkZW9FbGVtZW50fSBzb3VyY2VcbiAgICogQHJldHVybnMgLSB7QGxpbmsgR1BVRXh0ZXJuYWxUZXh0dXJlfVxuICAgKi9cbiAgaW1wb3J0RXh0ZXJuYWxUZXh0dXJlKHZpZGVvOiBIVE1MVmlkZW9FbGVtZW50KTogR1BVRXh0ZXJuYWxUZXh0dXJlIHtcbiAgICAvLyBUT0RPIFdlYkNvZGVjcyBtYXkgYmUgdGhlIHdheSB0byBnbyB3aGVuIHRpbWUgY29tZXMhXG4gICAgLy8gaHR0cHM6Ly9kZXZlbG9wZXIuY2hyb21lLmNvbS9ibG9nL25ldy1pbi13ZWJncHUtMTEzLyN1c2Utd2ViY29kZWNzLXZpZGVvZnJhbWUtc291cmNlLWluLWltcG9ydGV4dGVybmFsdGV4dHVyZVxuICAgIC8vIHNlZSBvblZpZGVvRnJhbWVDYWxsYmFjayBtZXRob2QgaW4gVGV4dHVyZSBjbGFzc1xuICAgIC8vIGNvbnN0IHZpZGVvRnJhbWUgPSBuZXcgVmlkZW9GcmFtZSh2aWRlbylcbiAgICAvLyByZXR1cm4gdGhpcy5kZXZpY2U/LmltcG9ydEV4dGVybmFsVGV4dHVyZSh7IHNvdXJjZTogdmlkZW9GcmFtZSB9KVxuICAgIHJldHVybiB0aGlzLmRldmljZT8uaW1wb3J0RXh0ZXJuYWxUZXh0dXJlKHsgc291cmNlOiB2aWRlbyB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEge0BsaW5rIFNhbXBsZXJ9IGhhcyBhbHJlYWR5IGJlZW4gY3JlYXRlZCB3aXRoIHRoZSBzYW1lIHtAbGluayBTYW1wbGVyI29wdGlvbnMgfCBwYXJhbWV0ZXJzfS5cbiAgICogVXNlIGl0IGlmIGZvdW5kLCBlbHNlIGNyZWF0ZSBhIG5ldyBvbmUgYW5kIGFkZCBpdCB0byB0aGUge0BsaW5rIEdQVURldmljZU1hbmFnZXIjc2FtcGxlcnMgfCBzYW1wbGVycyBhcnJheX0uXG4gICAqIEBwYXJhbSBzYW1wbGVyIC0ge0BsaW5rIFNhbXBsZXJ9IHRvIGNyZWF0ZVxuICAgKiBAcmV0dXJucyAtIHRoZSB7QGxpbmsgR1BVU2FtcGxlcn1cbiAgICovXG4gIGNyZWF0ZVNhbXBsZXIoc2FtcGxlcjogU2FtcGxlcik6IEdQVVNhbXBsZXIge1xuICAgIGNvbnN0IGV4aXN0aW5nU2FtcGxlciA9IHRoaXMuc2FtcGxlcnMuZmluZCgoZXhpc3RpbmdTYW1wbGVyKSA9PiB7XG4gICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoZXhpc3RpbmdTYW1wbGVyLm9wdGlvbnMpID09PSBKU09OLnN0cmluZ2lmeShzYW1wbGVyLm9wdGlvbnMpICYmIGV4aXN0aW5nU2FtcGxlci5zYW1wbGVyXG4gICAgfSlcblxuICAgIGlmIChleGlzdGluZ1NhbXBsZXIpIHtcbiAgICAgIHJldHVybiBleGlzdGluZ1NhbXBsZXIuc2FtcGxlclxuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCB7IHR5cGUsIC4uLnNhbXBsZXJPcHRpb25zIH0gPSBzYW1wbGVyLm9wdGlvbnNcbiAgICAgIGNvbnN0IGdwdVNhbXBsZXI6IEdQVVNhbXBsZXIgPSB0aGlzLmRldmljZT8uY3JlYXRlU2FtcGxlcih7XG4gICAgICAgIGxhYmVsOiBzYW1wbGVyLmxhYmVsLFxuICAgICAgICAuLi5zYW1wbGVyT3B0aW9ucyxcbiAgICAgIH0pXG5cbiAgICAgIHRoaXMuZGV2aWNlTWFuYWdlci5hZGRTYW1wbGVyKHNhbXBsZXIpXG5cbiAgICAgIHJldHVybiBncHVTYW1wbGVyXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBTYW1wbGVyfSBmcm9tIG91ciB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlciNzYW1wbGVycyB8IHNhbXBsZXJzIGFycmF5fVxuICAgKiBAcGFyYW0gc2FtcGxlciAtIHtAbGluayBTYW1wbGVyfSB0byByZW1vdmVcbiAgICovXG4gIHJlbW92ZVNhbXBsZXIoc2FtcGxlcjogU2FtcGxlcikge1xuICAgIHRoaXMuZGV2aWNlTWFuYWdlci5yZW1vdmVTYW1wbGVyKHNhbXBsZXIpXG4gIH1cblxuICAvKiBPQkpFQ1RTICYgVEFTS1MgKi9cblxuICAvKipcbiAgICogU2V0IGRpZmZlcmVudCB0YXNrcyBxdWV1ZSBtYW5hZ2VycyB0byBleGVjdXRlIGNhbGxiYWNrcyBhdCBkaWZmZXJlbnQgcGhhc2VzIG9mIG91ciByZW5kZXIgY2FsbDpcbiAgICogLSB7QGxpbmsgb25CZWZvcmVDb21tYW5kRW5jb2RlckNyZWF0aW9ufTogY2FsbGJhY2tzIGV4ZWN1dGVkIGJlZm9yZSB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbW1hbmQgZW5jb2RlclxuICAgKiAtIHtAbGluayBvbkJlZm9yZVJlbmRlclNjZW5lfTogY2FsbGJhY2tzIGV4ZWN1dGVkIGFmdGVyIHRoZSBjcmVhdGlvbiBvZiB0aGUgY29tbWFuZCBlbmNvZGVyIGFuZCBiZWZvcmUgcmVuZGVyaW5nIHRoZSB7QGxpbmsgU2NlbmV9XG4gICAqIC0ge0BsaW5rIG9uQWZ0ZXJSZW5kZXJTY2VuZX06IGNhbGxiYWNrcyBleGVjdXRlZCBhZnRlciB0aGUgY3JlYXRpb24gb2YgdGhlIGNvbW1hbmQgZW5jb2RlciBhbmQgYWZ0ZXIgcmVuZGVyaW5nIHRoZSB7QGxpbmsgU2NlbmV9XG4gICAqIC0ge0BsaW5rIG9uQWZ0ZXJDb21tYW5kRW5jb2RlclN1Ym1pc3Npb259OiBjYWxsYmFja3MgZXhlY3V0ZWQgYWZ0ZXIgdGhlIHN1Ym1pc3Npb24gb2YgdGhlIGNvbW1hbmQgZW5jb2RlclxuICAgKi9cbiAgc2V0VGFza3NRdWV1ZXMoKSB7XG4gICAgdGhpcy5vbkJlZm9yZUNvbW1hbmRFbmNvZGVyQ3JlYXRpb24gPSBuZXcgVGFza3NRdWV1ZU1hbmFnZXIoKVxuICAgIHRoaXMub25CZWZvcmVSZW5kZXJTY2VuZSA9IG5ldyBUYXNrc1F1ZXVlTWFuYWdlcigpXG4gICAgdGhpcy5vbkFmdGVyUmVuZGVyU2NlbmUgPSBuZXcgVGFza3NRdWV1ZU1hbmFnZXIoKVxuICAgIHRoaXMub25BZnRlckNvbW1hbmRFbmNvZGVyU3VibWlzc2lvbiA9IG5ldyBUYXNrc1F1ZXVlTWFuYWdlcigpXG4gIH1cblxuICAvKipcbiAgICogU2V0IGFsbCBvYmplY3RzIGFycmF5cyB0aGF0IHdlJ2xsIGtlZXAgdHJhY2sgb2ZcbiAgICovXG4gIHNldFJlbmRlcmVyT2JqZWN0cygpIHtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIGNvbXB1dGUgcGFzc2VzLCBtZXNoZXMsIGV0Yy5cbiAgICB0aGlzLmNvbXB1dGVQYXNzZXMgPSBbXVxuICAgIHRoaXMucGluZ1BvbmdQbGFuZXMgPSBbXVxuICAgIHRoaXMuc2hhZGVyUGFzc2VzID0gW11cbiAgICB0aGlzLnJlbmRlclRhcmdldHMgPSBbXVxuICAgIHRoaXMubWVzaGVzID0gW11cbiAgICB0aGlzLnJlbmRlclRleHR1cmVzID0gW11cbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHRoaXMge0BsaW5rIEdQVVJlbmRlcmVyfSByZW5kZXJlZCBvYmplY3RzIChpLmUuIGNvbXB1dGUgcGFzc2VzLCBtZXNoZXMsIHBpbmcgcG9uZyBwbGFuZXMgYW5kIHNoYWRlciBwYXNzZXMpXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHJlbmRlcmVkT2JqZWN0cygpOiBTY2VuZU9iamVjdFtdIHtcbiAgICByZXR1cm4gWy4uLnRoaXMuY29tcHV0ZVBhc3NlcywgLi4udGhpcy5tZXNoZXMsIC4uLnRoaXMuc2hhZGVyUGFzc2VzLCAuLi50aGlzLnBpbmdQb25nUGxhbmVzXVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgb2JqZWN0cyAoe0BsaW5rIFJlbmRlcmVkTWVzaCB8IHJlbmRlcmVkIG1lc2hlc30gb3Ige0BsaW5rIENvbXB1dGVQYXNzIHwgY29tcHV0ZSBwYXNzZXN9KSB1c2luZyBhIGdpdmVuIHtAbGluayBBbGxvd2VkQmluZEdyb3VwcyB8IGJpbmQgZ3JvdXB9LlxuICAgKiBVc2VmdWwgdG8ga25vdyBpZiBhIHJlc291cmNlIGlzIHVzZWQgYnkgbXVsdGlwbGUgb2JqZWN0cyBhbmQgaWYgaXQgaXMgc2FmZSB0byBkZXN0cm95IGl0IG9yIG5vdC5cbiAgICogQHBhcmFtIGJpbmRHcm91cCAtIHtAbGluayBBbGxvd2VkQmluZEdyb3VwcyB8IGJpbmQgZ3JvdXB9IHRvIGNoZWNrXG4gICAqL1xuICBnZXRPYmplY3RzQnlCaW5kR3JvdXAoYmluZEdyb3VwOiBBbGxvd2VkQmluZEdyb3Vwcyk6IHVuZGVmaW5lZCB8IFNjZW5lT2JqZWN0W10ge1xuICAgIHJldHVybiB0aGlzLmRldmljZVJlbmRlcmVkT2JqZWN0cy5maWx0ZXIoKG9iamVjdCkgPT4ge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4ub2JqZWN0Lm1hdGVyaWFsLmJpbmRHcm91cHMsXG4gICAgICAgIC4uLm9iamVjdC5tYXRlcmlhbC5pbnB1dHNCaW5kR3JvdXBzLFxuICAgICAgICAuLi5vYmplY3QubWF0ZXJpYWwuY2xvbmVkQmluZEdyb3VwcyxcbiAgICAgIF0uc29tZSgoYkcpID0+IGJHLnV1aWQgPT09IGJpbmRHcm91cC51dWlkKVxuICAgIH0pXG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCBvYmplY3RzICh7QGxpbmsgUmVuZGVyZWRNZXNoIHwgcmVuZGVyZWQgbWVzaGVzfSBvciB7QGxpbmsgQ29tcHV0ZVBhc3MgfCBjb21wdXRlIHBhc3Nlc30pIHVzaW5nIGEgZ2l2ZW4ge0BsaW5rIFRleHR1cmV9IG9yIHtAbGluayBSZW5kZXJUZXh0dXJlfS5cbiAgICogVXNlZnVsIHRvIGtub3cgaWYgYSByZXNvdXJjZSBpcyB1c2VkIGJ5IG11bHRpcGxlIG9iamVjdHMgYW5kIGlmIGl0IGlzIHNhZmUgdG8gZGVzdHJveSBpdCBvciBub3QuXG4gICAqIEBwYXJhbSB0ZXh0dXJlIC0ge0BsaW5rIFRleHR1cmV9IG9yIHtAbGluayBSZW5kZXJUZXh0dXJlfSB0byBjaGVja1xuICAgKi9cbiAgZ2V0T2JqZWN0c0J5VGV4dHVyZSh0ZXh0dXJlOiBUZXh0dXJlIHwgUmVuZGVyVGV4dHVyZSk6IHVuZGVmaW5lZCB8IFNjZW5lT2JqZWN0W10ge1xuICAgIHJldHVybiB0aGlzLmRldmljZVJlbmRlcmVkT2JqZWN0cy5maWx0ZXIoKG9iamVjdCkgPT4ge1xuICAgICAgcmV0dXJuIFsuLi5vYmplY3QubWF0ZXJpYWwudGV4dHVyZXMsIC4uLm9iamVjdC5tYXRlcmlhbC5yZW5kZXJUZXh0dXJlc10uc29tZSgodCkgPT4gdC51dWlkID09PSB0ZXh0dXJlLnV1aWQpXG4gICAgfSlcbiAgfVxuXG4gIC8qIEVWRU5UUyAqL1xuXG4gIC8qKlxuICAgKiBBc3NpZ24gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBfb25CZWZvcmVSZW5kZXJDYWxsYmFja1xuICAgKiBAcGFyYW0gY2FsbGJhY2sgLSBjYWxsYmFjayB0byBydW4ganVzdCBiZWZvcmUgdGhlIHtAbGluayByZW5kZXJ9IG1ldGhvZCB3aWxsIGJlIGV4ZWN1dGVkXG4gICAqIEByZXR1cm5zIC0gb3VyIHtAbGluayBHUFVSZW5kZXJlcn1cbiAgICovXG4gIG9uQmVmb3JlUmVuZGVyKGNhbGxiYWNrOiAoY29tbWFuZEVuY29kZXI/OiBHUFVDb21tYW5kRW5jb2RlcikgPT4gdm9pZCkge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5fb25CZWZvcmVSZW5kZXJDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NpZ24gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBfb25BZnRlclJlbmRlckNhbGxiYWNrXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biBqdXN0IGFmdGVyIHRoZSB7QGxpbmsgcmVuZGVyfSBtZXRob2QgaGFzIGJlZW4gZXhlY3V0ZWRcbiAgICogQHJldHVybnMgLSBvdXIge0BsaW5rIEdQVVJlbmRlcmVyfVxuICAgKi9cbiAgb25BZnRlclJlbmRlcihjYWxsYmFjazogKGNvbW1hbmRFbmNvZGVyPzogR1BVQ29tbWFuZEVuY29kZXIpID0+IHZvaWQpIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uQWZ0ZXJSZW5kZXJDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3NpZ24gYSBjYWxsYmFjayBmdW5jdGlvbiB0byBfb25BZnRlclJlc2l6ZUNhbGxiYWNrXG4gICAqIEBwYXJhbSBjYWxsYmFjayAtIGNhbGxiYWNrIHRvIHJ1biBqdXN0IGFmdGVyIHRoZSB7QGxpbmsgR1BVUmVuZGVyZXJ9IGhhcyBiZWVuIHJlc2l6ZWRcbiAgICogQHJldHVybnMgLSBvdXIge0BsaW5rIEdQVVJlbmRlcmVyfVxuICAgKi9cbiAgb25BZnRlclJlc2l6ZShjYWxsYmFjazogKGNvbW1hbmRFbmNvZGVyPzogR1BVQ29tbWFuZEVuY29kZXIpID0+IHZvaWQpIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uQWZ0ZXJSZXNpemVDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qIFJFTkRFUiAqL1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIGN1cnJlbnQge0BsaW5rIFJlbmRlclBhc3MjZGVzY3JpcHRvciB8IHJlbmRlciBwYXNzIGRlc2NyaXB0b3J9IHRleHR1cmUge0BsaW5rIEdQVVJlbmRlclBhc3NDb2xvckF0dGFjaG1lbnQjdmlldyB8IHZpZXd9IGFuZCB7QGxpbmsgR1BVUmVuZGVyUGFzc0NvbG9yQXR0YWNobWVudCNyZXNvbHZlVGFyZ2V0IHwgcmVzb2x2ZVRhcmdldH0gKGRlcGVuZGluZyBvbiB3aGV0aGVyIHdlJ3JlIHVzaW5nIG11bHRpc2FtcGxpbmcpXG4gICAqIEBwYXJhbSByZW5kZXJQYXNzIC0gY3VycmVudCB7QGxpbmsgUmVuZGVyUGFzc31cbiAgICogQHBhcmFtIHJlbmRlclRleHR1cmUgLSB7QGxpbmsgR1BVVGV4dHVyZX0gdG8gdXNlLCBvciB0aGUge0BsaW5rIGNvbnRleHR9IHtAbGluayBHUFVUZXh0dXJlIHwgY3VycmVudCB0ZXh0dXJlfSBpZiBudWxsXG4gICAqIEByZXR1cm5zIC0gdGhlIHtAbGluayBHUFVUZXh0dXJlIHwgY3VycmVudCByZW5kZXIgdGV4dHVyZX1cbiAgICovXG4gIHNldFJlbmRlclBhc3NDdXJyZW50VGV4dHVyZShyZW5kZXJQYXNzOiBSZW5kZXJQYXNzLCByZW5kZXJUZXh0dXJlOiBHUFVUZXh0dXJlIHwgbnVsbCA9IG51bGwpIHtcbiAgICBpZiAoIXJlbmRlclRleHR1cmUpIHtcbiAgICAgIHJlbmRlclRleHR1cmUgPSB0aGlzLmNvbnRleHQuZ2V0Q3VycmVudFRleHR1cmUoKVxuICAgICAgcmVuZGVyVGV4dHVyZS5sYWJlbCA9IGAke3RoaXMudHlwZX0gY29udGV4dCBjdXJyZW50IHRleHR1cmVgXG4gICAgfVxuXG4gICAgaWYgKHJlbmRlclBhc3Mub3B0aW9ucy5zYW1wbGVDb3VudCA+IDEpIHtcbiAgICAgIHJlbmRlclBhc3MuZGVzY3JpcHRvci5jb2xvckF0dGFjaG1lbnRzWzBdLnZpZXcgPSByZW5kZXJQYXNzLnZpZXdUZXh0dXJlLnRleHR1cmUuY3JlYXRlVmlldyh7XG4gICAgICAgIGxhYmVsOiByZW5kZXJQYXNzLnZpZXdUZXh0dXJlLm9wdGlvbnMubGFiZWwgKyAnIHZpZXcnLFxuICAgICAgfSlcbiAgICAgIHJlbmRlclBhc3MuZGVzY3JpcHRvci5jb2xvckF0dGFjaG1lbnRzWzBdLnJlc29sdmVUYXJnZXQgPSByZW5kZXJUZXh0dXJlLmNyZWF0ZVZpZXcoe1xuICAgICAgICBsYWJlbDogcmVuZGVyVGV4dHVyZS5sYWJlbCArICcgcmVzb2x2ZSB0YXJnZXQgdmlldycsXG4gICAgICB9KVxuICAgIH0gZWxzZSB7XG4gICAgICByZW5kZXJQYXNzLmRlc2NyaXB0b3IuY29sb3JBdHRhY2htZW50c1swXS52aWV3ID0gcmVuZGVyVGV4dHVyZS5jcmVhdGVWaWV3KHtcbiAgICAgICAgbGFiZWw6IHJlbmRlclRleHR1cmUubGFiZWwgKyAnIHZpZXcnLFxuICAgICAgfSlcbiAgICB9XG5cbiAgICByZXR1cm4gcmVuZGVyVGV4dHVyZVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBhIHNpbmdsZSB7QGxpbmsgQ29tcHV0ZVBhc3N9XG4gICAqIEBwYXJhbSBjb21tYW5kRW5jb2RlciAtIGN1cnJlbnQge0BsaW5rIEdQVUNvbW1hbmRFbmNvZGVyfVxuICAgKiBAcGFyYW0gY29tcHV0ZVBhc3MgLSB7QGxpbmsgQ29tcHV0ZVBhc3N9XG4gICAqL1xuICByZW5kZXJTaW5nbGVDb21wdXRlUGFzcyhjb21tYW5kRW5jb2RlcjogR1BVQ29tbWFuZEVuY29kZXIsIGNvbXB1dGVQYXNzOiBDb21wdXRlUGFzcykge1xuICAgIGNvbnN0IHBhc3MgPSBjb21tYW5kRW5jb2Rlci5iZWdpbkNvbXB1dGVQYXNzKClcbiAgICBjb21wdXRlUGFzcy5yZW5kZXIocGFzcylcbiAgICBwYXNzLmVuZCgpXG5cbiAgICBjb21wdXRlUGFzcy5jb3B5QnVmZmVyVG9SZXN1bHQoY29tbWFuZEVuY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIGEgc2luZ2xlIHtAbGluayBSZW5kZXJlZE1lc2ggfCBNZXNofVxuICAgKiBAcGFyYW0gY29tbWFuZEVuY29kZXIgLSBjdXJyZW50IHtAbGluayBHUFVDb21tYW5kRW5jb2Rlcn1cbiAgICogQHBhcmFtIG1lc2ggLSB7QGxpbmsgUmVuZGVyZWRNZXNoIHwgTWVzaH0gdG8gcmVuZGVyXG4gICAqL1xuICByZW5kZXJTaW5nbGVNZXNoKGNvbW1hbmRFbmNvZGVyOiBHUFVDb21tYW5kRW5jb2RlciwgbWVzaDogUmVuZGVyZWRNZXNoKSB7XG4gICAgY29uc3QgcGFzcyA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyh0aGlzLnJlbmRlclBhc3MuZGVzY3JpcHRvcilcbiAgICBtZXNoLnJlbmRlcihwYXNzKVxuICAgIHBhc3MuZW5kKClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgYW4gYXJyYXkgb2Ygb2JqZWN0cyAoZWl0aGVyIHtAbGluayBSZW5kZXJlZE1lc2ggfCBNZXNoZXN9IG9yIHtAbGluayBDb21wdXRlUGFzc30pIG9uY2UuIFRoaXMgbWV0aG9kIHdvbid0IGNhbGwgYW55IG9mIHRoZSByZW5kZXJlciByZW5kZXIgaG9va3MgbGlrZSB7QGxpbmsgb25CZWZvcmVSZW5kZXJ9LCB7QGxpbmsgb25BZnRlclJlbmRlcn1cbiAgICogQHBhcmFtIG9iamVjdHMgLSBBcnJheSBvZiB7QGxpbmsgUmVuZGVyZWRNZXNoIHwgTWVzaGVzfSBvciB7QGxpbmsgQ29tcHV0ZVBhc3N9IHRvIHJlbmRlclxuICAgKi9cbiAgcmVuZGVyT25jZShvYmplY3RzOiBTY2VuZU9iamVjdFtdKSB7XG4gICAgY29uc3QgY29tbWFuZEVuY29kZXIgPSB0aGlzLmRldmljZT8uY3JlYXRlQ29tbWFuZEVuY29kZXIoe1xuICAgICAgbGFiZWw6ICdSZW5kZXIgb25jZSBjb21tYW5kIGVuY29kZXInLFxuICAgIH0pXG4gICAgIXRoaXMucHJvZHVjdGlvbiAmJiBjb21tYW5kRW5jb2Rlci5wdXNoRGVidWdHcm91cCgnUmVuZGVyIG9uY2UgY29tbWFuZCBlbmNvZGVyJylcblxuICAgIHRoaXMucGlwZWxpbmVNYW5hZ2VyLnJlc2V0Q3VycmVudFBpcGVsaW5lKClcblxuICAgIG9iamVjdHMuZm9yRWFjaCgob2JqZWN0KSA9PiB7XG4gICAgICBpZiAob2JqZWN0IGluc3RhbmNlb2YgQ29tcHV0ZVBhc3MpIHtcbiAgICAgICAgdGhpcy5yZW5kZXJTaW5nbGVDb21wdXRlUGFzcyhjb21tYW5kRW5jb2Rlciwgb2JqZWN0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5yZW5kZXJTaW5nbGVNZXNoKGNvbW1hbmRFbmNvZGVyLCBvYmplY3QpXG4gICAgICB9XG4gICAgfSlcblxuICAgICF0aGlzLnByb2R1Y3Rpb24gJiYgY29tbWFuZEVuY29kZXIucG9wRGVidWdHcm91cCgpXG4gICAgY29uc3QgY29tbWFuZEJ1ZmZlciA9IGNvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXG4gICAgdGhpcy5kZXZpY2U/LnF1ZXVlLnN1Ym1pdChbY29tbWFuZEJ1ZmZlcl0pXG5cbiAgICB0aGlzLnBpcGVsaW5lTWFuYWdlci5yZXNldEN1cnJlbnRQaXBlbGluZSgpXG4gIH1cblxuICAvKipcbiAgICogRm9yY2UgdG8gY2xlYXIgYSB7QGxpbmsgR1BVUmVuZGVyZXJ9IGNvbnRlbnQgdG8gaXRzIHtAbGluayBSZW5kZXJQYXNzI29wdGlvbnMuY2xlYXJWYWx1ZSB8IGNsZWFyIHZhbHVlfSBieSByZW5kZXJpbmcgYW5kIGVtcHR5IHBhc3MuXG4gICAqIEBwYXJhbSBjb21tYW5kRW5jb2RlclxuICAgKi9cbiAgZm9yY2VDbGVhcihjb21tYW5kRW5jb2Rlcj86IEdQVUNvbW1hbmRFbmNvZGVyKSB7XG4gICAgLy8gaWYgdGhlcmUncyBubyBjb21tYW5kIGVuY29kZXIgcHJvdmlkZWQsIHdlJ2xsIGhhdmUgdG8gY3JlYXRlIG9uZSBhbmQgc3VibWl0IGl0IGFmdGVyIHRoZSBjb3B5IHByb2Nlc3NcbiAgICBjb25zdCBoYXNDb21tYW5kRW5jb2RlciA9ICEhY29tbWFuZEVuY29kZXJcblxuICAgIGlmICghaGFzQ29tbWFuZEVuY29kZXIpIHtcbiAgICAgIGNvbW1hbmRFbmNvZGVyID0gdGhpcy5kZXZpY2U/LmNyZWF0ZUNvbW1hbmRFbmNvZGVyKHsgbGFiZWw6ICdGb3JjZSBjbGVhciBjb21tYW5kIGVuY29kZXInIH0pXG4gICAgICAhdGhpcy5wcm9kdWN0aW9uICYmIGNvbW1hbmRFbmNvZGVyLnB1c2hEZWJ1Z0dyb3VwKCdGb3JjZSBjbGVhciBjb21tYW5kIGVuY29kZXInKVxuICAgIH1cblxuICAgIHRoaXMuc2V0UmVuZGVyUGFzc0N1cnJlbnRUZXh0dXJlKHRoaXMucmVuZGVyUGFzcylcbiAgICBjb25zdCBwYXNzID0gY29tbWFuZEVuY29kZXIuYmVnaW5SZW5kZXJQYXNzKHRoaXMucmVuZGVyUGFzcy5kZXNjcmlwdG9yKVxuICAgIHBhc3MuZW5kKClcblxuICAgIGlmICghaGFzQ29tbWFuZEVuY29kZXIpIHtcbiAgICAgICF0aGlzLnByb2R1Y3Rpb24gJiYgY29tbWFuZEVuY29kZXIucG9wRGVidWdHcm91cCgpXG4gICAgICBjb25zdCBjb21tYW5kQnVmZmVyID0gY29tbWFuZEVuY29kZXIuZmluaXNoKClcbiAgICAgIHRoaXMuZGV2aWNlPy5xdWV1ZS5zdWJtaXQoW2NvbW1hbmRCdWZmZXJdKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgYnkgdGhlIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI3JlbmRlciB8IEdQVURldmljZU1hbmFnZXIgcmVuZGVyIG1ldGhvZH0gYmVmb3JlIHRoZSB7QGxpbmsgR1BVQ29tbWFuZEVuY29kZXJ9IGhhcyBiZWVuIGNyZWF0ZWRcbiAgICovXG4gIG9uQmVmb3JlQ29tbWFuZEVuY29kZXIoKSB7XG4gICAgaWYgKCF0aGlzLnJlYWR5KSByZXR1cm5cbiAgICAvLyBub3cgcmVuZGVyIVxuICAgIHRoaXMub25CZWZvcmVDb21tYW5kRW5jb2RlckNyZWF0aW9uLmV4ZWN1dGUoKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBieSB0aGUge0BsaW5rIEdQVURldmljZU1hbmFnZXIjcmVuZGVyIHwgR1BVRGV2aWNlTWFuYWdlciByZW5kZXIgbWV0aG9kfSBhZnRlciB0aGUge0BsaW5rIEdQVUNvbW1hbmRFbmNvZGVyfSBoYXMgYmVlbiBjcmVhdGVkLlxuICAgKi9cbiAgb25BZnRlckNvbW1hbmRFbmNvZGVyKCkge1xuICAgIGlmICghdGhpcy5yZWFkeSkgcmV0dXJuXG5cbiAgICB0aGlzLm9uQWZ0ZXJDb21tYW5kRW5jb2RlclN1Ym1pc3Npb24uZXhlY3V0ZSgpXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGF0IGVhY2ggZHJhdyBjYWxsIHRvIHJlbmRlciBvdXIgc2NlbmUgYW5kIGl0cyBjb250ZW50XG4gICAqIEBwYXJhbSBjb21tYW5kRW5jb2RlciAtIGN1cnJlbnQge0BsaW5rIEdQVUNvbW1hbmRFbmNvZGVyfVxuICAgKi9cbiAgcmVuZGVyKGNvbW1hbmRFbmNvZGVyOiBHUFVDb21tYW5kRW5jb2Rlcikge1xuICAgIGlmICghdGhpcy5yZWFkeSkgcmV0dXJuXG5cbiAgICB0aGlzLl9vbkJlZm9yZVJlbmRlckNhbGxiYWNrICYmIHRoaXMuX29uQmVmb3JlUmVuZGVyQ2FsbGJhY2soY29tbWFuZEVuY29kZXIpXG4gICAgdGhpcy5vbkJlZm9yZVJlbmRlclNjZW5lLmV4ZWN1dGUoY29tbWFuZEVuY29kZXIpXG5cbiAgICB0aGlzLnNjZW5lPy5yZW5kZXIoY29tbWFuZEVuY29kZXIpXG5cbiAgICAvLyBUT0RPIG5vdCB3b3JraW5nXG4gICAgLy8gaWYgKHRoaXMub3B0aW9ucy5tdWx0aXNhbXBsZWQgJiYgdGhpcy5tdWx0aXNhbXBsaW5nUGFzcykge1xuICAgIC8vICAgY29uc3QgcGFzcyA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyh0aGlzLm11bHRpc2FtcGxpbmdQYXNzLmRlc2NyaXB0b3IpXG4gICAgLy8gICBwYXNzLmVuZCgpXG4gICAgLy8gfVxuXG4gICAgdGhpcy5fb25BZnRlclJlbmRlckNhbGxiYWNrICYmIHRoaXMuX29uQWZ0ZXJSZW5kZXJDYWxsYmFjayhjb21tYW5kRW5jb2RlcilcbiAgICB0aGlzLm9uQWZ0ZXJSZW5kZXJTY2VuZS5leGVjdXRlKGNvbW1hbmRFbmNvZGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgb3VyIHtAbGluayBHUFVSZW5kZXJlcn0gYW5kIGV2ZXJ5dGhpbmcgdGhhdCBuZWVkcyB0byBiZSBkZXN0cm95ZWQgYXMgd2VsbFxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmRvbUVsZW1lbnQ/LmRlc3Ryb3koKVxuXG4gICAgLy8gZGVzdHJveSByZW5kZXIgcGFzc2VzXG4gICAgdGhpcy5yZW5kZXJQYXNzPy5kZXN0cm95KClcbiAgICB0aGlzLnBvc3RQcm9jZXNzaW5nUGFzcz8uZGVzdHJveSgpXG4gICAgLy90aGlzLm11bHRpc2FtcGxpbmdQYXNzPy5kZXN0cm95KClcblxuICAgIHRoaXMucmVuZGVyVGFyZ2V0cy5mb3JFYWNoKChyZW5kZXJUYXJnZXQpID0+IHJlbmRlclRhcmdldC5kZXN0cm95KCkpXG4gICAgdGhpcy5yZW5kZXJlZE9iamVjdHMuZm9yRWFjaCgoc2NlbmVPYmplY3QpID0+IHNjZW5lT2JqZWN0LnJlbW92ZSgpKVxuXG4gICAgdGhpcy5yZW5kZXJUZXh0dXJlcy5mb3JFYWNoKCh0ZXh0dXJlKSA9PiB0ZXh0dXJlLmRlc3Ryb3koKSlcblxuICAgIHRoaXMuY29udGV4dD8udW5jb25maWd1cmUoKVxuICB9XG59XG4iLCJpbXBvcnQgeyBHUFVSZW5kZXJlciwgR1BVUmVuZGVyZXJQYXJhbXMsIFByb2plY3RlZE1lc2gsIFJlbmRlcmVkTWVzaCwgU2NlbmVPYmplY3QgfSBmcm9tICcuL0dQVVJlbmRlcmVyJ1xuaW1wb3J0IHsgQ2FtZXJhLCBDYW1lcmFCYXNlUGVyc3BlY3RpdmVPcHRpb25zIH0gZnJvbSAnLi4vY2FtZXJhL0NhbWVyYSdcbmltcG9ydCB7IEJ1ZmZlckJpbmRpbmcgfSBmcm9tICcuLi9iaW5kaW5ncy9CdWZmZXJCaW5kaW5nJ1xuaW1wb3J0IHsgQmluZEdyb3VwIH0gZnJvbSAnLi4vYmluZEdyb3Vwcy9CaW5kR3JvdXAnXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWMzJ1xuaW1wb3J0IHsgQWxsb3dlZEJpbmRHcm91cHMgfSBmcm9tICcuLi8uLi90eXBlcy9CaW5kR3JvdXBzJ1xuXG4vKipcbiAqIFBhcmFtZXRlcnMgdXNlZCB0byBjcmVhdGUgYSB7QGxpbmsgR1BVQ2FtZXJhUmVuZGVyZXJ9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR1BVQ2FtZXJhUmVuZGVyZXJQYXJhbXMgZXh0ZW5kcyBHUFVSZW5kZXJlclBhcmFtcyB7XG4gIC8qKiBBbiBvYmplY3QgZGVmaW5pbmcge0BsaW5rIENhbWVyYUJhc2VQZXJzcGVjdGl2ZU9wdGlvbnMgfCBjYW1lcmEgcGVyc3BlY3RpdmUgcGFyYW1ldGVyc30gKi9cbiAgY2FtZXJhOiBDYW1lcmFCYXNlUGVyc3BlY3RpdmVPcHRpb25zXG59XG5cbi8qKlxuICogVGhpcyByZW5kZXJlciBhbHNvIGNyZWF0ZXMgYSB7QGxpbmsgQ2FtZXJhfSBhbmQgaXRzIGFzc29jaWF0ZWQge0BsaW5rIGNhbWVyYUJ1ZmZlckJpbmRpbmcgfCBiaW5kaW5nfSBhbmQge0BsaW5rIGNhbWVyYUJpbmRHcm91cCB8IGJpbmQgZ3JvdXB9Ljxicj5cbiAqIENhbiBiZSBzYWZlbHkgdXNlZCB0byByZW5kZXIgY29tcHV0ZSBwYXNzZXMgYW5kIG1lc2hlcyBpZiB0aGV5IGRvIG5vdCBuZWVkIHRvIGJlIHRpZWQgdG8gdGhlIERPTS5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogLy8gZmlyc3QsIHdlIG5lZWQgYSBXZWJHUFUgZGV2aWNlLCB0aGF0J3Mgd2hhdCBHUFVEZXZpY2VNYW5hZ2VyIGlzIGZvclxuICogY29uc3QgZ3B1RGV2aWNlTWFuYWdlciA9IG5ldyBHUFVEZXZpY2VNYW5hZ2VyKHtcbiAqICAgbGFiZWw6ICdDdXN0b20gZGV2aWNlIG1hbmFnZXInLFxuICogfSlcbiAqXG4gKiAvLyB3ZSBuZWVkIHRvIHdhaXQgZm9yIHRoZSBXZWJHUFUgZGV2aWNlIHRvIGJlIGNyZWF0ZWRcbiAqIGF3YWl0IGdwdURldmljZU1hbmFnZXIuaW5pdCgpXG4gKlxuICogLy8gdGhlbiB3ZSBjYW4gY3JlYXRlIGEgY2FtZXJhIHJlbmRlcmVyXG4gKiBjb25zdCBncHVDYW1lcmFSZW5kZXJlciA9IG5ldyBHUFVDYW1lcmFSZW5kZXJlcih7XG4gKiAgIGRldmljZU1hbmFnZXI6IGdwdURldmljZU1hbmFnZXIsIC8vIHdlIG5lZWQgdGhlIFdlYkdQVSBkZXZpY2UgdG8gY3JlYXRlIHRoZSByZW5kZXJlciBjb250ZXh0XG4gKiAgIGNvbnRhaW5lcjogZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NhbnZhcycpLFxuICogfSlcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgR1BVQ2FtZXJhUmVuZGVyZXIgZXh0ZW5kcyBHUFVSZW5kZXJlciB7XG4gIC8qKiB7QGxpbmsgQ2FtZXJhfSB1c2VkIGJ5IHRoaXMge0BsaW5rIEdQVUNhbWVyYVJlbmRlcmVyfSAqL1xuICBjYW1lcmE6IENhbWVyYVxuICAvKioge0BsaW5rIEJ1ZmZlckJpbmRpbmcgfCBiaW5kaW5nfSBoYW5kbGluZyB0aGUge0BsaW5rIGNhbWVyYX0gbWF0cmljZXMgKi9cbiAgY2FtZXJhQnVmZmVyQmluZGluZzogQnVmZmVyQmluZGluZ1xuICAvKioge0BsaW5rIEJpbmRHcm91cCB8IGJpbmQgZ3JvdXB9IGhhbmRsaW5nIHRoZSB7QGxpbmsgY2FtZXJhQnVmZmVyQmluZGluZyB8IGNhbWVyYSBidWZmZXIgYmluZGluZ30gKi9cbiAgY2FtZXJhQmluZEdyb3VwOiBCaW5kR3JvdXBcblxuICAvKiogT3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBHUFVDYW1lcmFSZW5kZXJlcn0gKi9cbiAgb3B0aW9uczogR1BVQ2FtZXJhUmVuZGVyZXJQYXJhbXNcblxuICAvKipcbiAgICogR1BVQ2FtZXJhUmVuZGVyZXIgY29uc3RydWN0b3JcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgR1BVQ2FtZXJhUmVuZGVyZXJQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBHUFVDYW1lcmFSZW5kZXJlcn1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBkZXZpY2VNYW5hZ2VyLFxuICAgIGNvbnRhaW5lcixcbiAgICBwaXhlbFJhdGlvID0gMSxcbiAgICBwcmVmZXJyZWRGb3JtYXQsXG4gICAgYWxwaGFNb2RlID0gJ3ByZW11bHRpcGxpZWQnLFxuICAgIG11bHRpc2FtcGxlZCA9IHRydWUsXG4gICAgcmVuZGVyUGFzcyxcbiAgICBjYW1lcmEgPSB7fSxcbiAgfTogR1BVQ2FtZXJhUmVuZGVyZXJQYXJhbXMpIHtcbiAgICBzdXBlcih7XG4gICAgICBkZXZpY2VNYW5hZ2VyLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgcGl4ZWxSYXRpbyxcbiAgICAgIHByZWZlcnJlZEZvcm1hdCxcbiAgICAgIGFscGhhTW9kZSxcbiAgICAgIG11bHRpc2FtcGxlZCxcbiAgICAgIHJlbmRlclBhc3MsXG4gICAgfSlcblxuICAgIHRoaXMudHlwZSA9ICdHUFVDYW1lcmFSZW5kZXJlcidcblxuICAgIGNhbWVyYSA9IHsgLi4ueyBmb3Y6IDUwLCBuZWFyOiAwLjAxLCBmYXI6IDUwIH0sIC4uLmNhbWVyYSB9XG5cbiAgICB0aGlzLm9wdGlvbnMgPSB7XG4gICAgICAuLi50aGlzLm9wdGlvbnMsXG4gICAgICBjYW1lcmEsXG4gICAgfVxuXG4gICAgdGhpcy5zZXRDYW1lcmEoY2FtZXJhKVxuXG4gICAgdGhpcy5zZXRDYW1lcmFCaW5kR3JvdXBBbmRCaW5kaW5nKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUge0BsaW5rIGNvcmUvcmVuZGVyZXJzL0dQVURldmljZU1hbmFnZXIuR1BVRGV2aWNlTWFuYWdlciNkZXZpY2UgfCBkZXZpY2V9IGlzIGxvc3QuXG4gICAqIFJlc2V0IGFsbCBvdXIgc2FtcGxlcnMsIGZvcmNlIGFsbCBvdXIgc2NlbmUgb2JqZWN0cyBhbmQgY2FtZXJhIGJpbmQgZ3JvdXAgdG8gbG9zZSBjb250ZXh0LlxuICAgKi9cbiAgbG9zZUNvbnRleHQoKSB7XG4gICAgc3VwZXIubG9zZUNvbnRleHQoKVxuICAgIC8vIGxvc2UgY2FtZXJhIGJpbmQgZ3JvdXAgY29udGV4dCBhcyB3ZWxsXG4gICAgdGhpcy5jYW1lcmFCaW5kR3JvdXAubG9zZUNvbnRleHQoKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB7QGxpbmsgY29yZS9yZW5kZXJlcnMvR1BVRGV2aWNlTWFuYWdlci5HUFVEZXZpY2VNYW5hZ2VyI2RldmljZSB8IGRldmljZX0gc2hvdWxkIGJlIHJlc3RvcmVkLlxuICAgKiBDb25maWd1cmUgdGhlIGNvbnRleHQgYWdhaW4sIHJlc2l6ZSB0aGUge0BsaW5rIGNvcmUvcmVuZGVyUGFzc2VzL1JlbmRlclRhcmdldC5SZW5kZXJUYXJnZXQgfCByZW5kZXIgdGFyZ2V0c30gYW5kIHtAbGluayBjb3JlL3RleHR1cmVzL1JlbmRlclRleHR1cmUuUmVuZGVyVGV4dHVyZSB8IHJlbmRlciB0ZXh0dXJlc30sIHJlc3RvcmUgb3VyIHtAbGluayByZW5kZXJlZE9iamVjdHMgfCByZW5kZXJlZCBvYmplY3RzfSBjb250ZXh0LCByZS13cml0ZSBvdXIge0BsaW5rIGNhbWVyYUJ1ZmZlckJpbmRpbmcgfCBjYW1lcmEgYnVmZmVyIGJpbmRpbmd9LlxuICAgKiBAYXN5bmNcbiAgICovXG4gIGFzeW5jIHJlc3RvcmVDb250ZXh0KCk6IFByb21pc2U8dm9pZD4ge1xuICAgIHRoaXMuY2FtZXJhQnVmZmVyQmluZGluZy5zaG91bGRVcGRhdGUgPSB0cnVlXG4gICAgcmV0dXJuIHN1cGVyLnJlc3RvcmVDb250ZXh0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHtAbGluayBjYW1lcmF9XG4gICAqIEBwYXJhbSBjYW1lcmFQYXJhbWV0ZXJzIC0ge0BsaW5rIENhbWVyYUJhc2VQZXJzcGVjdGl2ZU9wdGlvbnMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSB0aGUge0BsaW5rIGNhbWVyYX1cbiAgICovXG4gIHNldENhbWVyYShjYW1lcmFQYXJhbWV0ZXJzOiBDYW1lcmFCYXNlUGVyc3BlY3RpdmVPcHRpb25zKSB7XG4gICAgY29uc3Qgd2lkdGggPSB0aGlzLmJvdW5kaW5nUmVjdCA/IHRoaXMuYm91bmRpbmdSZWN0LndpZHRoIDogMVxuICAgIGNvbnN0IGhlaWdodCA9IHRoaXMuYm91bmRpbmdSZWN0ID8gdGhpcy5ib3VuZGluZ1JlY3QuaGVpZ2h0IDogMVxuXG4gICAgdGhpcy5jYW1lcmEgPSBuZXcgQ2FtZXJhKHtcbiAgICAgIGZvdjogY2FtZXJhUGFyYW1ldGVycy5mb3YsXG4gICAgICBuZWFyOiBjYW1lcmFQYXJhbWV0ZXJzLm5lYXIsXG4gICAgICBmYXI6IGNhbWVyYVBhcmFtZXRlcnMuZmFyLFxuICAgICAgd2lkdGgsXG4gICAgICBoZWlnaHQsXG4gICAgICBwaXhlbFJhdGlvOiB0aGlzLnBpeGVsUmF0aW8sXG4gICAgICBvbk1hdHJpY2VzQ2hhbmdlZDogKCkgPT4ge1xuICAgICAgICB0aGlzLm9uQ2FtZXJhTWF0cmljZXNDaGFuZ2VkKClcbiAgICAgIH0sXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgdGhlIHtAbGluayBQcm9qZWN0ZWRNZXNoIHwgcHJvamVjdGVkIG1lc2hlc30gc2l6ZXMgYW5kIHBvc2l0aW9ucyB3aGVuIHRoZSB7QGxpbmsgY2FtZXJhfSB7QGxpbmsgQ2FtZXJhI3Bvc2l0aW9uIHwgcG9zaXRpb259IGNoYW5nZXNcbiAgICovXG4gIG9uQ2FtZXJhTWF0cmljZXNDaGFuZ2VkKCkge1xuICAgIHRoaXMudXBkYXRlQ2FtZXJhQmluZGluZ3MoKVxuXG4gICAgdGhpcy5tZXNoZXMuZm9yRWFjaCgobWVzaCkgPT4ge1xuICAgICAgaWYgKCdtb2RlbFZpZXdNYXRyaXgnIGluIG1lc2gpIHtcbiAgICAgICAgbWVzaC5zaG91bGRVcGRhdGVNYXRyaXhTdGFjaygpXG4gICAgICB9XG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHtAbGluayBjYW1lcmFCdWZmZXJCaW5kaW5nIHwgY2FtZXJhIGJ1ZmZlciBiaW5kaW5nfSBhbmQge0BsaW5rIGNhbWVyYUJpbmRHcm91cCB8IGNhbWVyYSBiaW5kIGdyb3VwfVxuICAgKi9cbiAgc2V0Q2FtZXJhQmluZEdyb3VwQW5kQmluZGluZygpIHtcbiAgICB0aGlzLmNhbWVyYUJ1ZmZlckJpbmRpbmcgPSBuZXcgQnVmZmVyQmluZGluZyh7XG4gICAgICBsYWJlbDogJ0NhbWVyYScsXG4gICAgICBuYW1lOiAnY2FtZXJhJyxcbiAgICAgIHZpc2liaWxpdHk6ICd2ZXJ0ZXgnLFxuICAgICAgc3RydWN0OiB7XG4gICAgICAgIG1vZGVsOiB7XG4gICAgICAgICAgLy8gY2FtZXJhIG1vZGVsIG1hdHJpeFxuICAgICAgICAgIG5hbWU6ICdtb2RlbCcsXG4gICAgICAgICAgdHlwZTogJ21hdDR4NGYnLFxuICAgICAgICAgIHZhbHVlOiB0aGlzLmNhbWVyYS5tb2RlbE1hdHJpeCxcbiAgICAgICAgICBvbkJlZm9yZVVwZGF0ZTogKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmFCdWZmZXJCaW5kaW5nLmlucHV0cy5tb2RlbC52YWx1ZSA9IHRoaXMuY2FtZXJhLm1vZGVsTWF0cml4XG4gICAgICAgICAgfSxcbiAgICAgICAgfSxcbiAgICAgICAgdmlldzoge1xuICAgICAgICAgIC8vIGNhbWVyYSB2aWV3IG1hdHJpeFxuICAgICAgICAgIG5hbWU6ICd2aWV3JyxcbiAgICAgICAgICB0eXBlOiAnbWF0NHg0ZicsXG4gICAgICAgICAgdmFsdWU6IHRoaXMuY2FtZXJhLnZpZXdNYXRyaXgsXG4gICAgICAgICAgb25CZWZvcmVVcGRhdGU6ICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuY2FtZXJhQnVmZmVyQmluZGluZy5pbnB1dHMudmlldy52YWx1ZSA9IHRoaXMuY2FtZXJhLnZpZXdNYXRyaXhcbiAgICAgICAgICB9LFxuICAgICAgICB9LFxuICAgICAgICBwcm9qZWN0aW9uOiB7XG4gICAgICAgICAgLy8gY2FtZXJhIHByb2plY3Rpb24gbWF0cml4XG4gICAgICAgICAgbmFtZTogJ3Byb2plY3Rpb24nLFxuICAgICAgICAgIHR5cGU6ICdtYXQ0eDRmJyxcbiAgICAgICAgICB2YWx1ZTogdGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeCxcbiAgICAgICAgICBvbkJlZm9yZVVwZGF0ZTogKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5jYW1lcmFCdWZmZXJCaW5kaW5nLmlucHV0cy5wcm9qZWN0aW9uLnZhbHVlID0gdGhpcy5jYW1lcmEucHJvamVjdGlvbk1hdHJpeFxuICAgICAgICAgIH0sXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICAvLyBub3cgaW5pdGlhbGl6ZSBiaW5kIGdyb3VwXG4gICAgdGhpcy5jYW1lcmFCaW5kR3JvdXAgPSBuZXcgQmluZEdyb3VwKHRoaXMsIHtcbiAgICAgIGxhYmVsOiAnQ2FtZXJhIFVuaWZvcm0gYmluZCBncm91cCcsXG4gICAgICBiaW5kaW5nczogW3RoaXMuY2FtZXJhQnVmZmVyQmluZGluZ10sXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgdGhlIHtAbGluayBjYW1lcmFCaW5kR3JvdXAgfCBjYW1lcmEgYmluZCBncm91cH0gYnVmZmVyc1xuICAgKi9cbiAgc2V0Q2FtZXJhQmluZEdyb3VwKCkge1xuICAgIGlmICh0aGlzLmNhbWVyYUJpbmRHcm91cCAmJiB0aGlzLmNhbWVyYUJpbmRHcm91cC5zaG91bGRDcmVhdGVCaW5kR3JvdXApIHtcbiAgICAgIHRoaXMuY2FtZXJhQmluZEdyb3VwLnNldEluZGV4KDApXG4gICAgICB0aGlzLmNhbWVyYUJpbmRHcm91cC5jcmVhdGVCaW5kR3JvdXAoKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBUZWxsIG91ciB7QGxpbmsgY2FtZXJhQnVmZmVyQmluZGluZyB8IGNhbWVyYSBidWZmZXIgYmluZGluZ30gdGhhdCB3ZSBzaG91bGQgdXBkYXRlIGl0cyBzdHJ1Y3RcbiAgICovXG4gIHVwZGF0ZUNhbWVyYUJpbmRpbmdzKCkge1xuICAgIHRoaXMuY2FtZXJhQnVmZmVyQmluZGluZz8uc2hvdWxkVXBkYXRlQmluZGluZygnbW9kZWwnKVxuICAgIHRoaXMuY2FtZXJhQnVmZmVyQmluZGluZz8uc2hvdWxkVXBkYXRlQmluZGluZygndmlldycpXG4gICAgdGhpcy5jYW1lcmFCdWZmZXJCaW5kaW5nPy5zaG91bGRVcGRhdGVCaW5kaW5nKCdwcm9qZWN0aW9uJylcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIG9iamVjdHMgKHtAbGluayBSZW5kZXJlZE1lc2ggfCByZW5kZXJlZCBtZXNoZXN9IG9yIHtAbGluayBjb3JlL2NvbXB1dGVQYXNzZXMvQ29tcHV0ZVBhc3MuQ29tcHV0ZVBhc3MgfCBjb21wdXRlIHBhc3Nlc30pIHVzaW5nIGEgZ2l2ZW4ge0BsaW5rIEFsbG93ZWRCaW5kR3JvdXBzIHwgYmluZCBncm91cH0sIGluY2x1ZGluZyB7QGxpbmsgY2FtZXJhQmluZEdyb3VwIHwgY2FtZXJhIGJpbmQgZ3JvdXB9LlxuICAgKiBVc2VmdWwgdG8ga25vdyBpZiBhIHJlc291cmNlIGlzIHVzZWQgYnkgbXVsdGlwbGUgb2JqZWN0cyBhbmQgaWYgaXQgaXMgc2FmZSB0byBkZXN0cm95IGl0IG9yIG5vdC5cbiAgICogQHBhcmFtIGJpbmRHcm91cCAtIHtAbGluayBBbGxvd2VkQmluZEdyb3VwcyB8IGJpbmQgZ3JvdXB9IHRvIGNoZWNrXG4gICAqL1xuICBnZXRPYmplY3RzQnlCaW5kR3JvdXAoYmluZEdyb3VwOiBBbGxvd2VkQmluZEdyb3Vwcyk6IHVuZGVmaW5lZCB8IFNjZW5lT2JqZWN0W10ge1xuICAgIHJldHVybiB0aGlzLmRldmljZVJlbmRlcmVkT2JqZWN0cy5maWx0ZXIoKG9iamVjdCkgPT4ge1xuICAgICAgcmV0dXJuIFtcbiAgICAgICAgLi4ub2JqZWN0Lm1hdGVyaWFsLmJpbmRHcm91cHMsXG4gICAgICAgIC4uLm9iamVjdC5tYXRlcmlhbC5pbnB1dHNCaW5kR3JvdXBzLFxuICAgICAgICAuLi5vYmplY3QubWF0ZXJpYWwuY2xvbmVkQmluZEdyb3VwcyxcbiAgICAgICAgdGhpcy5jYW1lcmFCaW5kR3JvdXAsXG4gICAgICBdLnNvbWUoKGJHKSA9PiBiRy51dWlkID09PSBiaW5kR3JvdXAudXVpZClcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvdXIge0BsaW5rIGNhbWVyYX0gcGVyc3BlY3RpdmUgbWF0cml4IG5ldyBwYXJhbWV0ZXJzIChmb3YsIG5lYXIgcGxhbmUgYW5kIGZhciBwbGFuZSlcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgQ2FtZXJhQmFzZVBlcnNwZWN0aXZlT3B0aW9ucyB8IHBhcmFtZXRlcnN9IHRvIHVzZSBmb3IgdGhlIHBlcnNwZWN0aXZlXG4gICAqL1xuICBzZXRQZXJzcGVjdGl2ZSh7IGZvdiwgbmVhciwgZmFyIH06IENhbWVyYUJhc2VQZXJzcGVjdGl2ZU9wdGlvbnMgPSB7fSkge1xuICAgIHRoaXMuY2FtZXJhPy5zZXRQZXJzcGVjdGl2ZSh7XG4gICAgICBmb3YsXG4gICAgICBuZWFyLFxuICAgICAgZmFyLFxuICAgICAgd2lkdGg6IHRoaXMuYm91bmRpbmdSZWN0LndpZHRoLFxuICAgICAgaGVpZ2h0OiB0aGlzLmJvdW5kaW5nUmVjdC5oZWlnaHQsXG4gICAgICBwaXhlbFJhdGlvOiB0aGlzLnBpeGVsUmF0aW8sXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHtAbGluayBjYW1lcmF9IHtAbGluayBDYW1lcmEjcG9zaXRpb24gfCBwb3NpdGlvbn1cbiAgICogQHBhcmFtIHBvc2l0aW9uIC0gbmV3IHtAbGluayBDYW1lcmEjcG9zaXRpb24gfCBwb3NpdGlvbn1cbiAgICovXG4gIHNldENhbWVyYVBvc2l0aW9uKHBvc2l0aW9uOiBWZWMzID0gbmV3IFZlYzMoMCwgMCwgMSkpIHtcbiAgICB0aGlzLmNhbWVyYS5wb3NpdGlvbi5jb3B5KHBvc2l0aW9uKVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGwgb3VyIHtAbGluayBHUFVSZW5kZXJlciNvblJlc2l6ZSB8IEdQVVJlbmRlcmVyIG9uUmVzaXplIG1ldGhvZH0gYW5kIHJlc2l6ZSBvdXIge0BsaW5rIGNhbWVyYX0gYXMgd2VsbFxuICAgKi9cbiAgb25SZXNpemUoKSB7XG4gICAgc3VwZXIub25SZXNpemUoKVxuICAgIHRoaXMuc2V0UGVyc3BlY3RpdmUoKVxuICAgIHRoaXMudXBkYXRlQ2FtZXJhQmluZGluZ3MoKVxuICB9XG5cbiAgLyogUkVOREVSICovXG5cbiAgLyoqXG4gICAqIFVwZGF0ZSB0aGUgY2FtZXJhIG1vZGVsIG1hdHJpeCwgY2hlY2sgaWYgdGhlIHtAbGluayBjYW1lcmFCaW5kR3JvdXAgfCBjYW1lcmEgYmluZCBncm91cH0gc2hvdWxkIGJlIGNyZWF0ZWQsIGNyZWF0ZSBpdCBpZiBuZWVkZWQgYW5kIHRoZW4gdXBkYXRlIGl0XG4gICAqL1xuICB1cGRhdGVDYW1lcmEoKSB7XG4gICAgdGhpcy5jYW1lcmE/LnVwZGF0ZU1hdHJpeFN0YWNrKClcbiAgICB0aGlzLnNldENhbWVyYUJpbmRHcm91cCgpXG4gICAgdGhpcy5jYW1lcmFCaW5kR3JvdXA/LnVwZGF0ZSgpXG4gIH1cblxuICAvKipcbiAgICogUmVuZGVyIGEgc2luZ2xlIHtAbGluayBSZW5kZXJlZE1lc2ggfCBtZXNofSAoYmluZHMgdGhlIHtAbGluayBjYW1lcmFCaW5kR3JvdXAgfCBjYW1lcmEgYmluZCBncm91cH0gaWYgbmVlZGVkKVxuICAgKiBAcGFyYW0gY29tbWFuZEVuY29kZXIgLSBjdXJyZW50IHtAbGluayBHUFVDb21tYW5kRW5jb2Rlcn1cbiAgICogQHBhcmFtIG1lc2ggLSB7QGxpbmsgUmVuZGVyZWRNZXNoIHwgbWVzaH0gdG8gcmVuZGVyXG4gICAqL1xuICByZW5kZXJTaW5nbGVNZXNoKGNvbW1hbmRFbmNvZGVyOiBHUFVDb21tYW5kRW5jb2RlciwgbWVzaDogUmVuZGVyZWRNZXNoKSB7XG4gICAgY29uc3QgcGFzcyA9IGNvbW1hbmRFbmNvZGVyLmJlZ2luUmVuZGVyUGFzcyh0aGlzLnJlbmRlclBhc3MuZGVzY3JpcHRvcilcblxuICAgIC8vIGJpbmQgY2FtZXJhIGlmIG5lZWRlZFxuICAgIGlmIChtZXNoLm1hdGVyaWFsLm9wdGlvbnMucmVuZGVyaW5nLnVzZVByb2plY3Rpb24pIHtcbiAgICAgIHBhc3Muc2V0QmluZEdyb3VwKHRoaXMuY2FtZXJhQmluZEdyb3VwLmluZGV4LCB0aGlzLmNhbWVyYUJpbmRHcm91cC5iaW5kR3JvdXApXG4gICAgfVxuXG4gICAgbWVzaC5yZW5kZXIocGFzcylcbiAgICBwYXNzLmVuZCgpXG4gIH1cblxuICAvKipcbiAgICoge0BsaW5rIHVwZGF0ZUNhbWVyYSB8IFVwZGF0ZSB0aGUgY2FtZXJhfSBhbmQgdGhlbiBjYWxsIG91ciB7QGxpbmsgR1BVUmVuZGVyZXIjcmVuZGVyIHwgR1BVUmVuZGVyZXIgcmVuZGVyIG1ldGhvZH1cbiAgICogQHBhcmFtIGNvbW1hbmRFbmNvZGVyIC0gY3VycmVudCB7QGxpbmsgR1BVQ29tbWFuZEVuY29kZXJ9XG4gICAqL1xuICByZW5kZXIoY29tbWFuZEVuY29kZXI6IEdQVUNvbW1hbmRFbmNvZGVyKSB7XG4gICAgaWYgKCF0aGlzLnJlYWR5KSByZXR1cm5cblxuICAgIHRoaXMudXBkYXRlQ2FtZXJhKClcbiAgICBzdXBlci5yZW5kZXIoY29tbWFuZEVuY29kZXIpXG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSBvdXIge0BsaW5rIEdQVUNhbWVyYVJlbmRlcmVyfVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmNhbWVyYUJpbmRHcm91cD8uZGVzdHJveSgpXG4gICAgc3VwZXIuZGVzdHJveSgpXG4gIH1cbn1cbiIsImltcG9ydCB7IHRocm93RXJyb3IsIHRocm93V2FybmluZyB9IGZyb20gJy4uLy4uL3V0aWxzL3V0aWxzJ1xuaW1wb3J0IHsgZ2VuZXJhdGVNaXBzLCBSZW5kZXJlciB9IGZyb20gJy4vdXRpbHMnXG5pbXBvcnQgeyBTYW1wbGVyIH0gZnJvbSAnLi4vc2FtcGxlcnMvU2FtcGxlcidcbmltcG9ydCB7IFBpcGVsaW5lTWFuYWdlciB9IGZyb20gJy4uL3BpcGVsaW5lcy9QaXBlbGluZU1hbmFnZXInXG5pbXBvcnQgeyBTY2VuZU9iamVjdCB9IGZyb20gJy4vR1BVUmVuZGVyZXInXG5pbXBvcnQgeyBUZXh0dXJlIH0gZnJvbSAnLi4vdGV4dHVyZXMvVGV4dHVyZSdcbmltcG9ydCB7IEFsbG93ZWRCaW5kR3JvdXBzIH0gZnJvbSAnLi4vLi4vdHlwZXMvQmluZEdyb3VwcydcblxuLyoqXG4gKiBQYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIEdQVURldmljZU1hbmFnZXJ9XG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgR1BVRGV2aWNlTWFuYWdlclBhcmFtcyB7XG4gIC8qKiBUaGUgbGFiZWwgb2YgdGhlIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyfSwgdXNlZCB0byBjcmVhdGUgdGhlIHtAbGluayBHUFVEZXZpY2V9IGZvciBkZWJ1Z2dpbmcgcHVycG9zZSAqL1xuICBsYWJlbD86IHN0cmluZ1xuICAvKiogRmxhZyBpbmRpY2F0aW5nIHdoZXRoZXIgd2UncmUgcnVubmluZyB0aGUgcHJvZHVjdGlvbiBtb2RlIG9yIG5vdC4gSWYgbm90LCB1c2VmdWwgd2FybmluZ3MgY291bGQgYmUgbG9nZ2VkIHRvIHRoZSBjb25zb2xlICovXG4gIHByb2R1Y3Rpb24/OiBib29sZWFuXG4gIC8qKiBDYWxsYmFjayB0byBydW4gaWYgdGhlcmUncyBhbnkgZXJyb3Igd2hpbGUgdHJ5aW5nIHRvIHNldCB1cCB0aGUge0BsaW5rIEdQVUFkYXB0ZXIgfCBhZGFwdGVyfSBvciB7QGxpbmsgR1BVRGV2aWNlIHwgZGV2aWNlfSAqL1xuICBvbkVycm9yPzogKCkgPT4gdm9pZFxuICAvKiogQ2FsbGJhY2sgdG8gcnVuIHdoZW5ldmVyIHRoZSB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlciNkZXZpY2UgfCBkZXZpY2V9IGlzIGxvc3QgKi9cbiAgb25EZXZpY2VMb3N0PzogKGluZm8/OiBHUFVEZXZpY2VMb3N0SW5mbykgPT4gdm9pZFxufVxuXG4vKipcbiAqIFJlc3BvbnNpYmxlIGZvciB0aGUgV2ViR1BVIHtAbGluayBHUFVBZGFwdGVyIHwgYWRhcHRlcn0gYW5kIHtAbGluayBHUFVEZXZpY2UgfCBkZXZpY2V9IGNyZWF0aW9ucywgbG9zaW5nIGFuZCByZXN0b3JhdGlvbi5cbiAqXG4gKiBJdCB3aWxsIGNyZWF0ZSBhbGwgdGhlIEdQVSBvYmplY3RzIHRoYXQgbmVlZCBhIHtAbGluayBHUFVEZXZpY2UgfCBkZXZpY2V9IHRvIGRvIHNvLCBhcyB3ZWxsIGFzIGEge0BsaW5rIFBpcGVsaW5lTWFuYWdlcn0uIEl0IHdpbGwgYWxzbyBrZWVwIGEgdHJhY2sgb2YgYWxsIHRoZSB7QGxpbmsgUmVuZGVyZXJ9LCB7QGxpbmsgQWxsb3dlZEJpbmRHcm91cHMgfCBiaW5kIGdyb3Vwc30sIHtAbGluayBTYW1wbGVyfSwge0BsaW5rIFRleHR1cmV9IGFuZCB7QGxpbmsgR1BVQnVmZmVyIHwgR1BVIGJ1ZmZlcnN9IGNyZWF0ZWQuXG4gKlxuICogVGhlIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyfSBpcyBhbHNvIHJlc3BvbnNpYmxlIGZvciBjcmVhdGluZyB0aGUge0BsaW5rIEdQVUNvbW1hbmRCdWZmZXJ9LCByZW5kZXJpbmcgYWxsIHRoZSB7QGxpbmsgUmVuZGVyZXJ9IGFuZCB0aGVuIHN1Ym1pdHRpbmcgdGhlIHtAbGluayBHUFVDb21tYW5kQnVmZmVyfSBhdCBlYWNoIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI3JlbmRlciB8IHJlbmRlcn0gY2FsbHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBHUFVEZXZpY2VNYW5hZ2VyIHtcbiAgLyoqIE51bWJlciBvZiB0aW1lcyBhIHtAbGluayBHUFVEZXZpY2V9IGhhcyBiZWVuIGNyZWF0ZWQgKi9cbiAgaW5kZXg6IG51bWJlclxuICAvKiogVGhlIGxhYmVsIG9mIHRoZSB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlcn0sIHVzZWQgdG8gY3JlYXRlIHRoZSB7QGxpbmsgR1BVRGV2aWNlfSBmb3IgZGVidWdnaW5nIHB1cnBvc2UgKi9cbiAgbGFiZWw6IHN0cmluZ1xuXG4gIC8qKiBGbGFnIGluZGljYXRpbmcgd2hldGhlciB3ZSdyZSBydW5uaW5nIHRoZSBwcm9kdWN0aW9uIG1vZGUgb3Igbm90LiBJZiBub3QsIHVzZWZ1bCB3YXJuaW5ncyBjb3VsZCBiZSBsb2dnZWQgdG8gdGhlIGNvbnNvbGUgKi9cbiAgcHJvZHVjdGlvbjogYm9vbGVhblxuXG4gIC8qKiBUaGUgbmF2aWdhdG9yIHtAbGluayBHUFV9IG9iamVjdCAqL1xuICBncHU6IEdQVSB8IHVuZGVmaW5lZFxuICAvKiogVGhlIFdlYkdQVSB7QGxpbmsgR1BVQWRhcHRlciB8IGFkYXB0ZXJ9IHVzZWQgKi9cbiAgYWRhcHRlcjogR1BVQWRhcHRlciB8IHZvaWRcbiAgLyoqIFRoZSBXZWJHUFUge0BsaW5rIEdQVUFkYXB0ZXIgfCBhZGFwdGVyfSBpbmZvcm1hdGlvbnMgKi9cbiAgYWRhcHRlckluZm9zOiBHUFVBZGFwdGVySW5mbyB8IHVuZGVmaW5lZFxuICAvKiogVGhlIFdlYkdQVSB7QGxpbmsgR1BVRGV2aWNlIHwgZGV2aWNlfSB1c2VkICovXG4gIGRldmljZTogR1BVRGV2aWNlIHwgdW5kZWZpbmVkXG4gIC8qKiBGbGFnIGluZGljYXRpbmcgd2hldGhlciB0aGUge0BsaW5rIEdQVURldmljZU1hbmFnZXJ9IGlzIHJlYWR5LCBpLmUuIGl0cyB7QGxpbmsgYWRhcHRlcn0gYW5kIHtAbGluayBkZXZpY2V9IGhhdmUgYmVlbiBzdWNjZXNzZnVsbHkgY3JlYXRlZCAqL1xuICByZWFkeTogYm9vbGVhblxuXG4gIC8qKiBUaGUge0BsaW5rIFBpcGVsaW5lTWFuYWdlcn0gdXNlZCB0byBjYWNoZSB7QGxpbmsgR1BVUmVuZGVyUGlwZWxpbmV9IGFuZCB7QGxpbmsgR1BVQ29tcHV0ZVBpcGVsaW5lfSBhbmQgc2V0IHRoZW0gb25seSB3aGVuIGFwcHJvcHJpYXRlICovXG4gIHBpcGVsaW5lTWFuYWdlcjogUGlwZWxpbmVNYW5hZ2VyXG5cbiAgLyoqIEFycmF5IG9mIHtAbGluayBSZW5kZXJlciB8IHJlbmRlcmVyc30gdXNpbmcgdGhhdCB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlcn0gKi9cbiAgcmVuZGVyZXJzOiBSZW5kZXJlcltdXG4gIC8qKiBBbiBhcnJheSBjb250YWluaW5nIGFsbCBvdXIgY3JlYXRlZCB7QGxpbmsgQWxsb3dlZEJpbmRHcm91cHN9ICovXG4gIGJpbmRHcm91cHM6IEFsbG93ZWRCaW5kR3JvdXBzW11cbiAgLyoqIEFuIGFycmF5IGNvbnRhaW5pbmcgYWxsIG91ciBjcmVhdGVkIHtAbGluayBHUFVCdWZmZXJ9ICovXG4gIGJ1ZmZlcnM6IEdQVUJ1ZmZlcltdXG4gIC8qKiBBbiBhcnJheSBjb250YWluaW5nIGFsbCBvdXIgY3JlYXRlZCB7QGxpbmsgU2FtcGxlcn0gKi9cbiAgc2FtcGxlcnM6IFNhbXBsZXJbXVxuICAvKiogQW4gYXJyYXkgY29udGFpbmluZyBhbGwgb3VyIGNyZWF0ZWQge0BsaW5rIFRleHR1cmV9ICovXG4gIHRleHR1cmVzOiBUZXh0dXJlW11cbiAgLyoqIEFuIGFycmF5IHRvIGtlZXAgdHJhY2sgb2YgdGhlIG5ld2x5IHVwbG9hZGVkIHtAbGluayBUZXh0dXJlIHwgdGV4dHVyZXN9IGFuZCBzZXQgdGhlaXIge0BsaW5rIFRleHR1cmUjc291cmNlVXBsb2FkZWQgfCBzb3VyY2VVcGxvYWRlZH0gcHJvcGVydHkgKi9cbiAgdGV4dHVyZXNRdWV1ZTogVGV4dHVyZVtdXG5cbiAgLyoqIENhbGxiYWNrIHRvIHJ1biBpZiB0aGVyZSdzIGFueSBlcnJvciB3aGlsZSB0cnlpbmcgdG8gc2V0IHVwIHRoZSB7QGxpbmsgR1BVQWRhcHRlciB8IGFkYXB0ZXJ9IG9yIHtAbGluayBHUFVEZXZpY2UgfCBkZXZpY2V9ICovXG4gIG9uRXJyb3I6ICgpID0+IHZvaWRcbiAgLyoqIENhbGxiYWNrIHRvIHJ1biB3aGVuZXZlciB0aGUge0BsaW5rIGRldmljZX0gaXMgbG9zdCAqL1xuICBvbkRldmljZUxvc3Q6IChpbmZvPzogR1BVRGV2aWNlTG9zdEluZm8pID0+IHZvaWRcblxuICAvKipcbiAgICogR1BVRGV2aWNlTWFuYWdlciBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyUGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlcn1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBsYWJlbCxcbiAgICBwcm9kdWN0aW9uID0gZmFsc2UsXG4gICAgb25FcnJvciA9ICgpID0+IHtcbiAgICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrcyAqL1xuICAgIH0sXG4gICAgb25EZXZpY2VMb3N0ID0gKGluZm8/OiBHUFVEZXZpY2VMb3N0SW5mbykgPT4ge1xuICAgICAgLyogYWxsb3cgZW1wdHkgY2FsbGJhY2tzICovXG4gICAgfSxcbiAgfTogR1BVRGV2aWNlTWFuYWdlclBhcmFtcykge1xuICAgIHRoaXMuaW5kZXggPSAwXG4gICAgdGhpcy5sYWJlbCA9IGxhYmVsID8/ICdHUFVEZXZpY2VNYW5hZ2VyIGluc3RhbmNlJ1xuICAgIHRoaXMucHJvZHVjdGlvbiA9IHByb2R1Y3Rpb25cbiAgICB0aGlzLnJlYWR5ID0gZmFsc2VcblxuICAgIHRoaXMub25FcnJvciA9IG9uRXJyb3JcbiAgICB0aGlzLm9uRGV2aWNlTG9zdCA9IG9uRGV2aWNlTG9zdFxuXG4gICAgdGhpcy5ncHUgPSBuYXZpZ2F0b3IuZ3B1XG5cbiAgICB0aGlzLnNldFBpcGVsaW5lTWFuYWdlcigpXG4gICAgdGhpcy5zZXREZXZpY2VPYmplY3RzKClcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHtAbGluayBhZGFwdGVyfSBhbmQge0BsaW5rIGRldmljZX0gaWYgcG9zc2libGVcbiAgICovXG4gIGFzeW5jIHNldEFkYXB0ZXJBbmREZXZpY2UoKSB7XG4gICAgYXdhaXQgdGhpcy5zZXRBZGFwdGVyKClcbiAgICBhd2FpdCB0aGlzLnNldERldmljZSgpXG4gIH1cblxuICAvKipcbiAgICogU2V0IHVwIG91ciB7QGxpbmsgYWRhcHRlcn0gYW5kIHtAbGluayBkZXZpY2V9IGFuZCBhbGwgdGhlIGFscmVhZHkgY3JlYXRlZCB7QGxpbmsgcmVuZGVyZXJzfSBjb250ZXh0c1xuICAgKi9cbiAgYXN5bmMgaW5pdCgpIHtcbiAgICBhd2FpdCB0aGlzLnNldEFkYXB0ZXJBbmREZXZpY2UoKVxuXG4gICAgLy8gc2V0IGNvbnRleHRcbiAgICBpZiAodGhpcy5kZXZpY2UpIHtcbiAgICAgIHRoaXMucmVuZGVyZXJzLmZvckVhY2goKHJlbmRlcmVyKSA9PiB7XG4gICAgICAgIGlmICghcmVuZGVyZXIuY29udGV4dCkge1xuICAgICAgICAgIHJlbmRlcmVyLnNldENvbnRleHQoKVxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHtAbGluayBhZGFwdGVyfSBpZiBwb3NzaWJsZS5cbiAgICogVGhlIGFkYXB0ZXIgcmVwcmVzZW50cyBhIHNwZWNpZmljIEdQVS4gU29tZSBkZXZpY2VzIGhhdmUgbXVsdGlwbGUgR1BVcy5cbiAgICogQGFzeW5jXG4gICAqL1xuICBhc3luYyBzZXRBZGFwdGVyKCkge1xuICAgIGlmICghdGhpcy5ncHUpIHtcbiAgICAgIHRoaXMub25FcnJvcigpXG4gICAgICB0aHJvd0Vycm9yKFwiR1BVUmVuZGVyZXI6IFdlYkdQVSBpcyBub3Qgc3VwcG9ydGVkIG9uIHlvdXIgYnJvd3Nlci9PUy4gTm8gJ2dwdScgb2JqZWN0IGluICduYXZpZ2F0b3InLlwiKVxuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLmFkYXB0ZXIgPSBhd2FpdCB0aGlzLmdwdT8ucmVxdWVzdEFkYXB0ZXIoKVxuICAgICAgOyh0aGlzLmFkYXB0ZXIgYXMgR1BVQWRhcHRlcik/LnJlcXVlc3RBZGFwdGVySW5mbygpLnRoZW4oKGluZm9zKSA9PiB7XG4gICAgICAgIHRoaXMuYWRhcHRlckluZm9zID0gaW5mb3NcbiAgICAgIH0pXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIHRoaXMub25FcnJvcigpXG4gICAgICB0aHJvd0Vycm9yKFwiR1BVRGV2aWNlTWFuYWdlcjogV2ViR1BVIGlzIG5vdCBzdXBwb3J0ZWQgb24geW91ciBicm93c2VyL09TLiAncmVxdWVzdEFkYXB0ZXInIGZhaWxlZC5cIilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IG91ciB7QGxpbmsgZGV2aWNlfVxuICAgKiBAYXN5bmNcbiAgICovXG4gIGFzeW5jIHNldERldmljZSgpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy5kZXZpY2UgPSBhd2FpdCAodGhpcy5hZGFwdGVyIGFzIEdQVUFkYXB0ZXIpPy5yZXF1ZXN0RGV2aWNlKHtcbiAgICAgICAgbGFiZWw6IHRoaXMubGFiZWwgKyAnICcgKyB0aGlzLmluZGV4LFxuICAgICAgfSlcblxuICAgICAgaWYgKHRoaXMuZGV2aWNlKSB7XG4gICAgICAgIHRoaXMucmVhZHkgPSB0cnVlXG4gICAgICAgIHRoaXMuaW5kZXgrK1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICB0aGlzLm9uRXJyb3IoKVxuICAgICAgdGhyb3dFcnJvcihgJHt0aGlzLmxhYmVsfTogV2ViR1BVIGlzIG5vdCBzdXBwb3J0ZWQgb24geW91ciBicm93c2VyL09TLiAncmVxdWVzdERldmljZScgZmFpbGVkOiAke2Vycm9yfWApXG4gICAgfVxuXG4gICAgdGhpcy5kZXZpY2U/Lmxvc3QudGhlbigoaW5mbykgPT4ge1xuICAgICAgdGhyb3dXYXJuaW5nKGAke3RoaXMubGFiZWx9OiBXZWJHUFUgZGV2aWNlIHdhcyBsb3N0OiAke2luZm8ubWVzc2FnZX1gKVxuXG4gICAgICB0aGlzLmxvc2VEZXZpY2UoKVxuXG4gICAgICAvLyBkbyBub3QgY2FsbCBvbkRldmljZUxvc3QgZXZlbnQgaWYgdGhlIGRldmljZSB3YXMgaW50ZW50aW9uYWxseSBkZXN0cm95ZWRcbiAgICAgIGlmIChpbmZvLnJlYXNvbiAhPT0gJ2Rlc3Ryb3llZCcpIHtcbiAgICAgICAgdGhpcy5vbkRldmljZUxvc3QoaW5mbylcbiAgICAgIH1cbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCBvdXIge0BsaW5rIHBpcGVsaW5lTWFuYWdlciB8IHBpcGVsaW5lIG1hbmFnZXJ9XG4gICAqL1xuICBzZXRQaXBlbGluZU1hbmFnZXIoKSB7XG4gICAgdGhpcy5waXBlbGluZU1hbmFnZXIgPSBuZXcgUGlwZWxpbmVNYW5hZ2VyKClcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2hlbiB0aGUge0BsaW5rIGRldmljZX0gaXMgbG9zdC5cbiAgICogUmVzZXQgYWxsIG91ciByZW5kZXJlcnNcbiAgICovXG4gIGxvc2VEZXZpY2UoKSB7XG4gICAgdGhpcy5yZWFkeSA9IGZhbHNlXG5cbiAgICAvLyBmaXJzdCBjbGVhbiBhbGwgc2FtcGxlcnNcbiAgICB0aGlzLnNhbXBsZXJzLmZvckVhY2goKHNhbXBsZXIpID0+IChzYW1wbGVyLnNhbXBsZXIgPSBudWxsKSlcblxuICAgIHRoaXMucmVuZGVyZXJzLmZvckVhY2goKHJlbmRlcmVyKSA9PiByZW5kZXJlci5sb3NlQ29udGV4dCgpKVxuXG4gICAgLy8gcmVzZXQgdGhlIGJ1ZmZlcnMgYXJyYXksIGl0IHdvdWxkIGV2ZW50dWFsbHkgYmUgcmVwb3B1bGF0ZWQgd2hpbGUgcmVzdG9yaW5nIHRoZSBkZXZpY2VcbiAgICB0aGlzLmJ1ZmZlcnMgPSBbXVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIHRoZSB7QGxpbmsgZGV2aWNlfSBzaG91bGQgYmUgcmVzdG9yZWQuXG4gICAqIFJlc3RvcmUgYWxsIG91ciByZW5kZXJlcnNcbiAgICovXG4gIGFzeW5jIHJlc3RvcmVEZXZpY2UoKSB7XG4gICAgYXdhaXQgdGhpcy5zZXRBZGFwdGVyQW5kRGV2aWNlKClcblxuICAgIGlmICh0aGlzLmRldmljZSkge1xuICAgICAgLy8gbm93IHJlY3JlYXRlIGFsbCB0aGUgc2FtcGxlcnNcbiAgICAgIHRoaXMuc2FtcGxlcnMuZm9yRWFjaCgoc2FtcGxlcikgPT4ge1xuICAgICAgICBjb25zdCB7IHR5cGUsIC4uLnNhbXBsZXJPcHRpb25zIH0gPSBzYW1wbGVyLm9wdGlvbnNcbiAgICAgICAgc2FtcGxlci5zYW1wbGVyID0gdGhpcy5kZXZpY2UuY3JlYXRlU2FtcGxlcih7XG4gICAgICAgICAgbGFiZWw6IHNhbXBsZXIubGFiZWwsXG4gICAgICAgICAgLi4uc2FtcGxlck9wdGlvbnMsXG4gICAgICAgIH0pXG4gICAgICB9KVxuXG4gICAgICAvLyB0aGVuIHRoZSByZW5kZXJlcnNcbiAgICAgIHRoaXMucmVuZGVyZXJzLmZvckVhY2goKHJlbmRlcmVyKSA9PiByZW5kZXJlci5yZXN0b3JlQ29udGV4dCgpKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgYWxsIG9iamVjdHMgYXJyYXlzIHRoYXQgd2UnbGwga2VlcCB0cmFjayBvZlxuICAgKi9cbiAgc2V0RGV2aWNlT2JqZWN0cygpIHtcbiAgICAvLyBrZWVwIHRyYWNrIG9mIHJlbmRlcmVycywgYmluZCBncm91cHMsIGJ1ZmZlcnMsIHNhbXBsZXJzLCB0ZXh0dXJlc1xuICAgIHRoaXMucmVuZGVyZXJzID0gW11cbiAgICB0aGlzLmJpbmRHcm91cHMgPSBbXVxuICAgIHRoaXMuYnVmZmVycyA9IFtdXG4gICAgdGhpcy5zYW1wbGVycyA9IFtdXG4gICAgdGhpcy50ZXh0dXJlcyA9IFtdXG5cbiAgICAvLyBrZWVwIHRyYWNrIG9mIGFsbCB0ZXh0dXJlcyB0aGF0IGFyZSBiZWluZyB1cGxvYWRlZFxuICAgIHRoaXMudGV4dHVyZXNRdWV1ZSA9IFtdXG4gIH1cblxuICAvKipcbiAgICogQWRkIGEge0BsaW5rIFJlbmRlcmVyfSB0byBvdXIge0BsaW5rIHJlbmRlcmVyc30gYXJyYXlcbiAgICogQHBhcmFtIHJlbmRlcmVyIC0ge0BsaW5rIFJlbmRlcmVyfSB0byBhZGRcbiAgICovXG4gIGFkZFJlbmRlcmVyKHJlbmRlcmVyOiBSZW5kZXJlcikge1xuICAgIHRoaXMucmVuZGVyZXJzLnB1c2gocmVuZGVyZXIpXG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEge0BsaW5rIFJlbmRlcmVyfSBmcm9tIG91ciB7QGxpbmsgcmVuZGVyZXJzfSBhcnJheVxuICAgKiBAcGFyYW0gcmVuZGVyZXIgLSB7QGxpbmsgUmVuZGVyZXJ9IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlUmVuZGVyZXIocmVuZGVyZXI6IFJlbmRlcmVyKSB7XG4gICAgdGhpcy5yZW5kZXJlcnMgPSB0aGlzLnJlbmRlcmVycy5maWx0ZXIoKHIpID0+IHIudXVpZCAhPT0gcmVuZGVyZXIudXVpZClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHRoZSByZW5kZXJlZCBvYmplY3RzIChpLmUuIGNvbXB1dGUgcGFzc2VzLCBtZXNoZXMsIHBpbmcgcG9uZyBwbGFuZXMgYW5kIHNoYWRlciBwYXNzZXMpIGNyZWF0ZWQgYnkgdGhpcyB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlcn1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgZGV2aWNlUmVuZGVyZWRPYmplY3RzKCk6IFNjZW5lT2JqZWN0W10ge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmVycy5tYXAoKHJlbmRlcmVyKSA9PiByZW5kZXJlci5yZW5kZXJlZE9iamVjdHMpLmZsYXQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBBbGxvd2VkQmluZEdyb3VwcyB8IGJpbmQgZ3JvdXB9IHRvIG91ciB7QGxpbmsgYmluZEdyb3VwcyB8IGJpbmQgZ3JvdXBzIGFycmF5fVxuICAgKiBAcGFyYW0gYmluZEdyb3VwIC0ge0BsaW5rIEFsbG93ZWRCaW5kR3JvdXBzIHwgYmluZCBncm91cH0gdG8gYWRkXG4gICAqL1xuICBhZGRCaW5kR3JvdXAoYmluZEdyb3VwOiBBbGxvd2VkQmluZEdyb3Vwcykge1xuICAgIGlmICghdGhpcy5iaW5kR3JvdXBzLmZpbmQoKGJHKSA9PiBiRy51dWlkID09PSBiaW5kR3JvdXAudXVpZCkpIHtcbiAgICAgIHRoaXMuYmluZEdyb3Vwcy5wdXNoKGJpbmRHcm91cClcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlIGEge0BsaW5rIEFsbG93ZWRCaW5kR3JvdXBzIHwgYmluZCBncm91cH0gZnJvbSBvdXIge0BsaW5rIGJpbmRHcm91cHMgfCBiaW5kIGdyb3VwcyBhcnJheX1cbiAgICogQHBhcmFtIGJpbmRHcm91cCAtIHtAbGluayBBbGxvd2VkQmluZEdyb3VwcyB8IGJpbmQgZ3JvdXB9IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlQmluZEdyb3VwKGJpbmRHcm91cDogQWxsb3dlZEJpbmRHcm91cHMpIHtcbiAgICB0aGlzLmJpbmRHcm91cHMgPSB0aGlzLmJpbmRHcm91cHMuZmlsdGVyKChiRykgPT4gYkcudXVpZCAhPT0gYmluZEdyb3VwLnV1aWQpXG4gIH1cblxuICAvKipcbiAgICogQWRkIGEge0BsaW5rIEdQVUJ1ZmZlcn0gdG8gb3VyIG91ciB7QGxpbmsgYnVmZmVyc30gYXJyYXlcbiAgICogQHBhcmFtIGJ1ZmZlciAtIHtAbGluayBHUFVCdWZmZXJ9IHRvIGFkZFxuICAgKi9cbiAgYWRkQnVmZmVyKGJ1ZmZlcjogR1BVQnVmZmVyKSB7XG4gICAgdGhpcy5idWZmZXJzLnB1c2goYnVmZmVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBHUFVCdWZmZXJ9IGZyb20gb3VyIHtAbGluayBidWZmZXJzfSBhcnJheVxuICAgKiBAcGFyYW0gYnVmZmVyIC0ge0BsaW5rIEdQVUJ1ZmZlcn0gdG8gcmVtb3ZlXG4gICAqIEBwYXJhbSBbb3JpZ2luYWxMYWJlbF0gLSBvcmlnaW5hbCB7QGxpbmsgR1BVQnVmZmVyfSBsYWJlbCBpbiBjYXNlIHRoZSBidWZmZXIgaGFzIGJlZW4gc3dhcHBlZCBhbmQgaXRzIGxhYmVsIGhhcyBjaGFuZ2VkXG4gICAqL1xuICByZW1vdmVCdWZmZXIoYnVmZmVyOiBHUFVCdWZmZXIsIG9yaWdpbmFsTGFiZWw/OiBzdHJpbmcpIHtcbiAgICBpZiAoYnVmZmVyKSB7XG4gICAgICB0aGlzLmJ1ZmZlcnMgPSB0aGlzLmJ1ZmZlcnMuZmlsdGVyKChiKSA9PiB7XG4gICAgICAgIHJldHVybiAhKGIubGFiZWwgPT09IChvcmlnaW5hbExhYmVsID8/IGJ1ZmZlci5sYWJlbCkgJiYgYi5zaXplID09PSBidWZmZXIuc2l6ZSlcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFkZCBhIHtAbGluayBTYW1wbGVyfSB0byBvdXIge0BsaW5rIHNhbXBsZXJzfSBhcnJheVxuICAgKiBAcGFyYW0gc2FtcGxlciAtIHtAbGluayBTYW1wbGVyfSB0byBhZGRcbiAgICovXG4gIGFkZFNhbXBsZXIoc2FtcGxlcjogU2FtcGxlcikge1xuICAgIHRoaXMuc2FtcGxlcnMucHVzaChzYW1wbGVyKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBTYW1wbGVyfSBmcm9tIG91ciB7QGxpbmsgc2FtcGxlcnN9IGFycmF5XG4gICAqIEBwYXJhbSBzYW1wbGVyIC0ge0BsaW5rIFNhbXBsZXJ9IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlU2FtcGxlcihzYW1wbGVyOiBTYW1wbGVyKSB7XG4gICAgdGhpcy5zYW1wbGVycyA9IHRoaXMuc2FtcGxlcnMuZmlsdGVyKChzKSA9PiBzLnV1aWQgIT09IHNhbXBsZXIudXVpZClcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgYSB7QGxpbmsgVGV4dHVyZX0gdG8gb3VyIHtAbGluayB0ZXh0dXJlc30gYXJyYXlcbiAgICogQHBhcmFtIHRleHR1cmUgLSB7QGxpbmsgVGV4dHVyZX0gdG8gYWRkXG4gICAqL1xuICBhZGRUZXh0dXJlKHRleHR1cmU6IFRleHR1cmUpIHtcbiAgICB0aGlzLnRleHR1cmVzLnB1c2godGV4dHVyZSlcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGxvYWQgYSB7QGxpbmsgVGV4dHVyZSN0ZXh0dXJlIHwgdGV4dHVyZX0gdG8gdGhlIEdQVVxuICAgKiBAcGFyYW0gdGV4dHVyZSAtIHtAbGluayBUZXh0dXJlfSBjbGFzcyBvYmplY3Qgd2l0aCB0aGUge0BsaW5rIFRleHR1cmUjdGV4dHVyZSB8IHRleHR1cmV9IHRvIHVwbG9hZFxuICAgKi9cbiAgdXBsb2FkVGV4dHVyZSh0ZXh0dXJlOiBUZXh0dXJlKSB7XG4gICAgaWYgKHRleHR1cmUuc291cmNlKSB7XG4gICAgICB0cnkge1xuICAgICAgICB0aGlzLmRldmljZT8ucXVldWUuY29weUV4dGVybmFsSW1hZ2VUb1RleHR1cmUoXG4gICAgICAgICAge1xuICAgICAgICAgICAgc291cmNlOiB0ZXh0dXJlLnNvdXJjZSBhcyBHUFVJbWFnZUNvcHlFeHRlcm5hbEltYWdlU291cmNlLFxuICAgICAgICAgICAgZmxpcFk6IHRleHR1cmUub3B0aW9ucy5mbGlwWSxcbiAgICAgICAgICB9IGFzIEdQVUltYWdlQ29weUV4dGVybmFsSW1hZ2UsXG4gICAgICAgICAgeyB0ZXh0dXJlOiB0ZXh0dXJlLnRleHR1cmUgYXMgR1BVVGV4dHVyZSwgcHJlbXVsdGlwbGllZEFscGhhOiB0ZXh0dXJlLm9wdGlvbnMucHJlbXVsdGlwbGllZEFscGhhIH0sXG4gICAgICAgICAgeyB3aWR0aDogdGV4dHVyZS5zaXplLndpZHRoLCBoZWlnaHQ6IHRleHR1cmUuc2l6ZS5oZWlnaHQgfVxuICAgICAgICApXG5cbiAgICAgICAgaWYgKCh0ZXh0dXJlLnRleHR1cmUgYXMgR1BVVGV4dHVyZSkubWlwTGV2ZWxDb3VudCA+IDEpIHtcbiAgICAgICAgICBnZW5lcmF0ZU1pcHModGhpcy5kZXZpY2UsIHRleHR1cmUudGV4dHVyZSBhcyBHUFVUZXh0dXJlKVxuICAgICAgICB9XG5cbiAgICAgICAgLy8gYWRkIHRvIG91ciB0ZXh0dXJlcyBxdWV1ZSBhcnJheSB0byB0cmFjayB3aGVuIGl0IGhhcyBiZWVuIHVwbG9hZGVkXG4gICAgICAgIHRoaXMudGV4dHVyZXNRdWV1ZS5wdXNoKHRleHR1cmUpXG4gICAgICB9IGNhdGNoICh7IG1lc3NhZ2UgfSkge1xuICAgICAgICB0aHJvd0Vycm9yKGBHUFVEZXZpY2VNYW5hZ2VyOiBjb3VsZCBub3QgdXBsb2FkIHRleHR1cmU6ICR7dGV4dHVyZS5vcHRpb25zLm5hbWV9IGJlY2F1c2U6ICR7bWVzc2FnZX1gKVxuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmRldmljZT8ucXVldWUud3JpdGVUZXh0dXJlKFxuICAgICAgICB7IHRleHR1cmU6IHRleHR1cmUudGV4dHVyZSBhcyBHUFVUZXh0dXJlIH0sXG4gICAgICAgIG5ldyBVaW50OEFycmF5KHRleHR1cmUub3B0aW9ucy5wbGFjZWhvbGRlckNvbG9yKSxcbiAgICAgICAgeyBieXRlc1BlclJvdzogdGV4dHVyZS5zaXplLndpZHRoICogNCB9LFxuICAgICAgICB7IHdpZHRoOiB0ZXh0dXJlLnNpemUud2lkdGgsIGhlaWdodDogdGV4dHVyZS5zaXplLmhlaWdodCB9XG4gICAgICApXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhIHtAbGluayBUZXh0dXJlfSBmcm9tIG91ciB7QGxpbmsgdGV4dHVyZXN9IGFycmF5XG4gICAqIEBwYXJhbSB0ZXh0dXJlIC0ge0BsaW5rIFRleHR1cmV9IHRvIHJlbW92ZVxuICAgKi9cbiAgcmVtb3ZlVGV4dHVyZSh0ZXh0dXJlOiBUZXh0dXJlKSB7XG4gICAgdGhpcy50ZXh0dXJlcyA9IHRoaXMudGV4dHVyZXMuZmlsdGVyKCh0KSA9PiB0LnV1aWQgIT09IHRleHR1cmUudXVpZClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW5kZXIgZXZlcnl0aGluZzpcbiAgICogLSBjYWxsIGFsbCBvdXIge0BsaW5rIHJlbmRlcmVyc30ge0BsaW5rIGNvcmUvcmVuZGVyZXJzL0dQVVJlbmRlcmVyLkdQVVJlbmRlcmVyI29uQmVmb3JlQ29tbWFuZEVuY29kZXIgfCBvbkJlZm9yZUNvbW1hbmRFbmNvZGVyfSBjYWxsYmFja3NcbiAgICogLSBjcmVhdGUgYSB7QGxpbmsgR1BVQ29tbWFuZEVuY29kZXJ9XG4gICAqIC0gcmVuZGVyIGFsbCBvdXIge0BsaW5rIHJlbmRlcmVyc31cbiAgICogLSBzdWJtaXQgb3VyIHtAbGluayBHUFVDb21tYW5kQnVmZmVyfVxuICAgKiAtIHVwbG9hZCB7QGxpbmsgVGV4dHVyZSN0ZXh0dXJlIHwgdGV4dHVyZXN9IHRoYXQgZG8gbm90IGhhdmUgYSBwYXJlbnRNZXNoXG4gICAqIC0gZW1wdHkgb3VyIHtAbGluayB0ZXh0dXJlc1F1ZXVlfSBhcnJheVxuICAgKiAtIGNhbGwgYWxsIG91ciB7QGxpbmsgcmVuZGVyZXJzfSB7QGxpbmsgY29yZS9yZW5kZXJlcnMvR1BVUmVuZGVyZXIuR1BVUmVuZGVyZXIjb25BZnRlckNvbW1hbmRFbmNvZGVyIHwgb25BZnRlckNvbW1hbmRFbmNvZGVyfSBjYWxsYmFja3NcbiAgICovXG4gIHJlbmRlcigpIHtcbiAgICBpZiAoIXRoaXMucmVhZHkpIHJldHVyblxuXG4gICAgdGhpcy5yZW5kZXJlcnMuZm9yRWFjaCgocmVuZGVyZXIpID0+IHJlbmRlcmVyLm9uQmVmb3JlQ29tbWFuZEVuY29kZXIoKSlcblxuICAgIGNvbnN0IGNvbW1hbmRFbmNvZGVyID0gdGhpcy5kZXZpY2U/LmNyZWF0ZUNvbW1hbmRFbmNvZGVyKHsgbGFiZWw6IHRoaXMubGFiZWwgKyAnIGNvbW1hbmQgZW5jb2RlcicgfSlcbiAgICAhdGhpcy5wcm9kdWN0aW9uICYmIGNvbW1hbmRFbmNvZGVyLnB1c2hEZWJ1Z0dyb3VwKHRoaXMubGFiZWwgKyAnIGNvbW1hbmQgZW5jb2RlcjogbWFpbiByZW5kZXIgbG9vcCcpXG5cbiAgICB0aGlzLnJlbmRlcmVycy5mb3JFYWNoKChyZW5kZXJlcikgPT4gcmVuZGVyZXIucmVuZGVyKGNvbW1hbmRFbmNvZGVyKSlcblxuICAgICF0aGlzLnByb2R1Y3Rpb24gJiYgY29tbWFuZEVuY29kZXIucG9wRGVidWdHcm91cCgpXG4gICAgY29uc3QgY29tbWFuZEJ1ZmZlciA9IGNvbW1hbmRFbmNvZGVyLmZpbmlzaCgpXG4gICAgdGhpcy5kZXZpY2U/LnF1ZXVlLnN1Ym1pdChbY29tbWFuZEJ1ZmZlcl0pXG5cbiAgICAvLyBoYW5kbGUgdGV4dHVyZXNcbiAgICAvLyBmaXJzdCBjaGVjayBpZiBtZWRpYSB0ZXh0dXJlcyB3aXRob3V0IHBhcmVudE1lc2ggbmVlZCB0byBiZSB1cGxvYWRlZFxuICAgIHRoaXMudGV4dHVyZXNcbiAgICAgIC5maWx0ZXIoKHRleHR1cmUpID0+ICF0ZXh0dXJlLnBhcmVudE1lc2ggJiYgdGV4dHVyZS5zb3VyY2VMb2FkZWQgJiYgIXRleHR1cmUuc291cmNlVXBsb2FkZWQpXG4gICAgICAuZm9yRWFjaCgodGV4dHVyZSkgPT4gdGhpcy51cGxvYWRUZXh0dXJlKHRleHR1cmUpKVxuXG4gICAgLy8gbm8gbmVlZCB0byB1c2UgZGV2aWNlLnF1ZXVlLm9uU3VibWl0dGVkV29ya0RvbmVcbiAgICAvLyBhcyBbS2FpIE5pbm9taXlhXShodHRwczovL2dpdGh1Yi5jb20va2FpbmlubzB4KSBzdGF0ZWQ6XG4gICAgLy8gXCJBbnl0aGluZyB5b3Ugc3VibWl0KCkgYWZ0ZXIgdGhlIGNvcHlFeHRlcm5hbEltYWdlVG9UZXh0dXJlKCkgaXMgZ3VhcmFudGVlZCB0byBzZWUgdGhlIHJlc3VsdCBvZiB0aGF0IGNhbGwuXCJcbiAgICB0aGlzLnRleHR1cmVzUXVldWUuZm9yRWFjaCgodGV4dHVyZSkgPT4ge1xuICAgICAgdGV4dHVyZS5zb3VyY2VVcGxvYWRlZCA9IHRydWVcbiAgICB9KVxuXG4gICAgLy8gY2xlYXIgdGV4dHVyZSBxdWV1ZVxuICAgIHRoaXMudGV4dHVyZXNRdWV1ZSA9IFtdXG5cbiAgICB0aGlzLnJlbmRlcmVycy5mb3JFYWNoKChyZW5kZXJlcikgPT4gcmVuZGVyZXIub25BZnRlckNvbW1hbmRFbmNvZGVyKCkpXG4gIH1cblxuICAvKipcbiAgICogRGVzdHJveSB0aGUge0BsaW5rIEdQVURldmljZU1hbmFnZXJ9IGFuZCBpdHMge0BsaW5rIHJlbmRlcmVyc31cbiAgICovXG4gIGRlc3Ryb3koKSB7XG4gICAgdGhpcy5kZXZpY2U/LmRlc3Ryb3koKVxuICAgIHRoaXMuZGV2aWNlID0gbnVsbFxuXG4gICAgdGhpcy5yZW5kZXJlcnMuZm9yRWFjaCgocmVuZGVyZXIpID0+IHJlbmRlcmVyLmRlc3Ryb3koKSlcblxuICAgIC8vIG5vdyBjbGVhciBldmVyeXRoaW5nIHRoYXQgY291bGQgaGF2ZSBiZWVuIGxlZnQgYmVoaW5kXG4gICAgdGhpcy5iaW5kR3JvdXBzLmZvckVhY2goKGJpbmRHcm91cCkgPT4gYmluZEdyb3VwLmRlc3Ryb3koKSlcbiAgICB0aGlzLmJ1ZmZlcnMuZm9yRWFjaCgoYnVmZmVyKSA9PiBidWZmZXI/LmRlc3Ryb3koKSlcblxuICAgIHRoaXMudGV4dHVyZXMuZm9yRWFjaCgodGV4dHVyZSkgPT4gdGV4dHVyZS5kZXN0cm95KCkpXG5cbiAgICB0aGlzLnNldERldmljZU9iamVjdHMoKVxuICB9XG59XG4iLCJpbXBvcnQgeyBHUFVDYW1lcmFSZW5kZXJlciwgR1BVQ2FtZXJhUmVuZGVyZXJQYXJhbXMgfSBmcm9tICcuLi8uLi9jb3JlL3JlbmRlcmVycy9HUFVDYW1lcmFSZW5kZXJlcidcbmltcG9ydCB7IERPTVByb2plY3RlZE1lc2ggfSBmcm9tICcuLi8uLi9jb3JlL3JlbmRlcmVycy9HUFVSZW5kZXJlcidcblxuLyoqXG4gKiBUaGlzIHJlbmRlcmVyIGp1c3QgZXh0ZW5kcyB0aGUge0BsaW5rIEdQVUNhbWVyYVJlbmRlcmVyfSBieSBrZWVwaW5nIHRyYWNrIG9mIGFsbCB0aGUgY3JlYXRlZCB7QGxpbmsgY3VydGFpbnMvbWVzaGVzL0RPTU1lc2guRE9NTWVzaCB8IERPTSBNZXNoZXN9XG4gKlxuICogQGV4YW1wbGVcbiAqIGBgYGphdmFzY3JpcHRcbiAqIC8vIGZpcnN0LCB3ZSBuZWVkIGEgV2ViR1BVIGRldmljZSwgdGhhdCdzIHdoYXQgR1BVRGV2aWNlTWFuYWdlciBpcyBmb3JcbiAqIGNvbnN0IGdwdURldmljZU1hbmFnZXIgPSBuZXcgR1BVRGV2aWNlTWFuYWdlcih7XG4gKiAgIGxhYmVsOiAnQ3VzdG9tIGRldmljZSBtYW5hZ2VyJyxcbiAqIH0pXG4gKlxuICogLy8gd2UgbmVlZCB0byB3YWl0IGZvciB0aGUgV2ViR1BVIGRldmljZSB0byBiZSBjcmVhdGVkXG4gKiBhd2FpdCBncHVEZXZpY2VNYW5hZ2VyLmluaXQoKVxuICpcbiAqIC8vIHRoZW4gd2UgY2FuIGNyZWF0ZSBhIGN1cnRhaW5zIHJlbmRlcmVyXG4gKiBjb25zdCBncHVDdXJ0YWluc1JlbmRlcmVyID0gbmV3IEdQVUN1cnRhaW5zUmVuZGVyZXIoe1xuICogICBkZXZpY2VNYW5hZ2VyOiBncHVEZXZpY2VNYW5hZ2VyLCAvLyB3ZSBuZWVkIHRoZSBXZWJHUFUgZGV2aWNlIHRvIGNyZWF0ZSB0aGUgcmVuZGVyZXIgY29udGV4dFxuICogICBjb250YWluZXI6IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNjYW52YXMnKSxcbiAqIH0pXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIEdQVUN1cnRhaW5zUmVuZGVyZXIgZXh0ZW5kcyBHUFVDYW1lcmFSZW5kZXJlciB7XG4gIC8qKiBBbGwgY3JlYXRlZCB7QGxpbmsgY3VydGFpbnMvbWVzaGVzL0RPTU1lc2guRE9NTWVzaCB8IERPTSBNZXNoZXN9IGFuZCB7QGxpbmsgY3VydGFpbnMvbWVzaGVzL1BsYW5lLlBsYW5lIHwgcGxhbmVzfSAqL1xuICBkb21NZXNoZXM6IERPTVByb2plY3RlZE1lc2hbXVxuXG4gIC8qKlxuICAgKiBHUFVDdXJ0YWluc1JlbmRlcmVyIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIEdQVUNhbWVyYVJlbmRlcmVyUGFyYW1zIHwgcGFyYW1ldGVyc30gdXNlZCB0byBjcmVhdGUgdGhpcyB7QGxpbmsgR1BVQ3VydGFpbnNSZW5kZXJlcn1cbiAgICovXG4gIGNvbnN0cnVjdG9yKHtcbiAgICBkZXZpY2VNYW5hZ2VyLFxuICAgIGNvbnRhaW5lcixcbiAgICBwaXhlbFJhdGlvID0gMSxcbiAgICBwcmVmZXJyZWRGb3JtYXQsXG4gICAgYWxwaGFNb2RlID0gJ3ByZW11bHRpcGxpZWQnLFxuICAgIG11bHRpc2FtcGxlZCA9IHRydWUsXG4gICAgcmVuZGVyUGFzcyxcbiAgICBjYW1lcmEsXG4gIH06IEdQVUNhbWVyYVJlbmRlcmVyUGFyYW1zKSB7XG4gICAgc3VwZXIoe1xuICAgICAgZGV2aWNlTWFuYWdlcixcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHBpeGVsUmF0aW8sXG4gICAgICBwcmVmZXJyZWRGb3JtYXQsXG4gICAgICBhbHBoYU1vZGUsXG4gICAgICByZW5kZXJQYXNzLFxuICAgICAgbXVsdGlzYW1wbGVkLFxuICAgICAgY2FtZXJhLFxuICAgIH0gYXMgR1BVQ2FtZXJhUmVuZGVyZXJQYXJhbXMpXG5cbiAgICB0aGlzLnR5cGUgPSAnR1BVQ3VydGFpbnNSZW5kZXJlcidcbiAgfVxuXG4gIC8qKlxuICAgKiBBZGQgdGhlIHtAbGluayBHUFVDdXJ0YWluc1JlbmRlcmVyI2RvbU1lc2hlcyB8IGRvbU1lc2hlc30gdG8gb3VyIHRyYWNrZWQgZWxlbWVudHNcbiAgICovXG4gIHNldFJlbmRlcmVyT2JqZWN0cygpIHtcbiAgICBzdXBlci5zZXRSZW5kZXJlck9iamVjdHMoKVxuXG4gICAgdGhpcy5kb21NZXNoZXMgPSBbXVxuICB9XG59XG4iLCJpbXBvcnQgeyBET01Qb3NpdGlvbiB9IGZyb20gJy4uL2NvcmUvRE9NL0RPTUVsZW1lbnQnXG5cbi8qKlxuICogUGFyYW1ldGVycyB1c2VkIHRvIGNyZWF0ZSBhIHtAbGluayBTY3JvbGxNYW5hZ2VyfVxuICovXG5leHBvcnQgaW50ZXJmYWNlIFNjcm9sbE1hbmFnZXJQYXJhbXMge1xuICAvKiogQ3VycmVudCBzY3JvbGwgcG9zaXRpb24gKi9cbiAgc2Nyb2xsPzogRE9NUG9zaXRpb25cbiAgLyoqIExhc3Qgc2Nyb2xsIGRlbHRhcyAqL1xuICBkZWx0YT86IERPTVBvc2l0aW9uXG4gIC8qKiBXaGV0aGVyIHRoZSB7QGxpbmsgU2Nyb2xsTWFuYWdlcn0gc2hvdWxkIGxpc3RlbiB0byB0aGUgd2luZG93IHNjcm9sbCBldmVudCBvciBub3QgKi9cbiAgc2hvdWxkV2F0Y2g/OiBib29sZWFuXG4gIC8qKiBDYWxsYmFjayB0byBleGVjdXRlIGVhY2ggdGltZSB0aGUge0BsaW5rIFNjcm9sbE1hbmFnZXIjc2Nyb2xsIHwgc2Nyb2xsfSB2YWx1ZXMgY2hhbmdlICovXG4gIG9uU2Nyb2xsPzogKGRlbHRhPzogRE9NUG9zaXRpb24pID0+IHZvaWRcbn1cblxuLyoqXG4gKiBVc2VkIHRvIGtlZXAgdHJhY2sgb2Ygb3VyIHNjcm9sbCBwb3NpdGlvbiwgc2Nyb2xsIGRlbHRhcyBhbmQgdHJpZ2dlciBhbiBvblNjcm9sbCBjYWxsYmFjay48YnI+XG4gKiBDb3VsZCBlaXRoZXIgbGlzdGVuIHRvIHRoZSBuYXRpdmUgc2Nyb2xsIGV2ZW50IG9yIGJlIGhvb2tlZCB0byBhbnkgc2Nyb2xsIChuYXR1cmFsIG9yIHZpcnR1YWwpIHNjcm9sbCBldmVudFxuICovXG5leHBvcnQgY2xhc3MgU2Nyb2xsTWFuYWdlciB7XG4gIC8qKiBDdXJyZW50IHNjcm9sbCBwb3NpdGlvbiAqL1xuICBzY3JvbGw6IERPTVBvc2l0aW9uXG4gIC8qKiBMYXN0IHNjcm9sbCBkZWx0YXMgKi9cbiAgZGVsdGE6IERPTVBvc2l0aW9uXG4gIC8qKiBXaGV0aGVyIHRoZSB7QGxpbmsgU2Nyb2xsTWFuYWdlcn0gc2hvdWxkIGxpc3RlbiB0byB0aGUgd2luZG93IHNjcm9sbCBldmVudCBvciBub3QgKi9cbiAgc2hvdWxkV2F0Y2g6IGJvb2xlYW5cbiAgLyoqIENhbGxiYWNrIHRvIGV4ZWN1dGUgZWFjaCB0aW1lIHRoZSB7QGxpbmsgc2Nyb2xsfSB2YWx1ZXMgY2hhbmdlICovXG4gIG9uU2Nyb2xsOiAoZGVsdGE/OiBET01Qb3NpdGlvbikgPT4gdm9pZFxuXG4gIC8qKlxuICAgKiBTY3JvbGxNYW5hZ2VyIGNvbnN0cnVjdG9yXG4gICAqIEBwYXJhbSBwYXJhbWV0ZXJzIC0ge0BsaW5rIFNjcm9sbE1hbmFnZXJQYXJhbXMgfCBwYXJhbWV0ZXJzfSB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBTY3JvbGxNYW5hZ2VyfVxuICAgKi9cbiAgY29uc3RydWN0b3Ioe1xuICAgIHNjcm9sbCA9IHsgeDogMCwgeTogMCB9LFxuICAgIGRlbHRhID0geyB4OiAwLCB5OiAwIH0sXG4gICAgc2hvdWxkV2F0Y2ggPSB0cnVlLFxuICAgIG9uU2Nyb2xsID0gKGRlbHRhOiBET01Qb3NpdGlvbiA9IHsgeDogMCwgeTogMCB9KSA9PiB7XG4gICAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xuICAgIH0sXG4gIH06IFNjcm9sbE1hbmFnZXJQYXJhbXMgPSB7fSkge1xuICAgIHRoaXMuc2Nyb2xsID0gc2Nyb2xsXG4gICAgdGhpcy5kZWx0YSA9IGRlbHRhXG5cbiAgICB0aGlzLnNob3VsZFdhdGNoID0gc2hvdWxkV2F0Y2hcblxuICAgIHRoaXMub25TY3JvbGwgPSBvblNjcm9sbFxuXG4gICAgaWYgKHRoaXMuc2hvdWxkV2F0Y2gpIHtcbiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLnNldFNjcm9sbC5iaW5kKHRoaXMpLCB7IHBhc3NpdmU6IHRydWUgfSlcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIGJ5IHRoZSBzY3JvbGwgZXZlbnQgbGlzdGVuZXJcbiAgICovXG4gIHNldFNjcm9sbCgpIHtcbiAgICB0aGlzLnVwZGF0ZVNjcm9sbFZhbHVlcyh7IHg6IHdpbmRvdy5wYWdlWE9mZnNldCwgeTogd2luZG93LnBhZ2VZT2Zmc2V0IH0pXG4gIH1cblxuICAvKipcbiAgICogVXBkYXRlcyB0aGUgc2Nyb2xsIG1hbmFnZXIgWCBhbmQgWSBzY3JvbGwgdmFsdWVzIGFzIHdlbGwgYXMgbGFzdCBYIGFuZCBZIGRlbHRhc1xuICAgKiBJbnRlcm5hbGx5IGNhbGxlZCBieSB0aGUgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyXG4gICAqIENvdWxkIGJlIGNhbGxlZCBleHRlcm5hbGx5IGFzIHdlbGwgaWYgdGhlIHVzZXIgd2FudHMgdG8gaGFuZGxlIHRoZSBzY3JvbGwgYnkgaGltc2VsZlxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBjb3JlL0RPTS9ET01FbGVtZW50LkRPTVBvc2l0aW9uIHwgc2Nyb2xsIHZhbHVlc31cbiAgICovXG4gIHVwZGF0ZVNjcm9sbFZhbHVlcyh7IHgsIHkgfTogRE9NUG9zaXRpb24pIHtcbiAgICAvLyBnZXQgb3VyIHNjcm9sbCBkZWx0YSB2YWx1ZXNcbiAgICBjb25zdCBsYXN0U2Nyb2xsID0gdGhpcy5zY3JvbGxcbiAgICB0aGlzLnNjcm9sbCA9IHsgeCwgeSB9XG4gICAgdGhpcy5kZWx0YSA9IHtcbiAgICAgIHg6IGxhc3RTY3JvbGwueCAtIHRoaXMuc2Nyb2xsLngsXG4gICAgICB5OiBsYXN0U2Nyb2xsLnkgLSB0aGlzLnNjcm9sbC55LFxuICAgIH1cblxuICAgIGlmICh0aGlzLm9uU2Nyb2xsKSB7XG4gICAgICB0aGlzLm9uU2Nyb2xsKHRoaXMuZGVsdGEpXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgb3VyIHNjcm9sbCBtYW5hZ2VyIChqdXN0IHJlbW92ZSBvdXIgZXZlbnQgbGlzdG5lciBpZiBpdCBoYWQgYmVlbiBhZGRlZCBwcmV2aW91c2x5KVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5zaG91bGRXYXRjaCkge1xuICAgICAgLy8gcGFzc2l2ZSB0cmlnZ2VycyBhIHR5cGVzY3JpcHQgZXJyb3JcbiAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9taWNyb3NvZnQvVHlwZVNjcmlwdC9pc3N1ZXMvMzI5MTIjaXNzdWVjb21tZW50LTUyMjE0Mjk2OVxuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuc2V0U2Nyb2xsLmJpbmQodGhpcyksIHsgcGFzc2l2ZTogdHJ1ZSB9IGFzIEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zICZcbiAgICAgICAgRXZlbnRMaXN0ZW5lck9wdGlvbnMpXG4gICAgfVxuICB9XG59XG4iLCJpbXBvcnQgeyBHUFVDdXJ0YWluc1JlbmRlcmVyIH0gZnJvbSAnLi9yZW5kZXJlcnMvR1BVQ3VydGFpbnNSZW5kZXJlcidcbmltcG9ydCB7IFNjcm9sbE1hbmFnZXIgfSBmcm9tICcuLi91dGlscy9TY3JvbGxNYW5hZ2VyJ1xuaW1wb3J0IHsgcmVzaXplTWFuYWdlciB9IGZyb20gJy4uL3V0aWxzL1Jlc2l6ZU1hbmFnZXInXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vbWF0aC9WZWMzJ1xuaW1wb3J0IHsgUGluZ1BvbmdQbGFuZSB9IGZyb20gJy4vbWVzaGVzL1BpbmdQb25nUGxhbmUnXG5pbXBvcnQgeyBTaGFkZXJQYXNzIH0gZnJvbSAnLi4vY29yZS9yZW5kZXJQYXNzZXMvU2hhZGVyUGFzcydcbmltcG9ydCB7IEdQVVJlbmRlcmVyLCBHUFVSZW5kZXJlclBhcmFtcywgUHJvamVjdGVkTWVzaCB9IGZyb20gJy4uL2NvcmUvcmVuZGVyZXJzL0dQVVJlbmRlcmVyJ1xuaW1wb3J0IHsgRE9NTWVzaCB9IGZyb20gJy4vbWVzaGVzL0RPTU1lc2gnXG5pbXBvcnQgeyBQbGFuZSB9IGZyb20gJy4vbWVzaGVzL1BsYW5lJ1xuaW1wb3J0IHsgQ29tcHV0ZVBhc3MgfSBmcm9tICcuLi9jb3JlL2NvbXB1dGVQYXNzZXMvQ29tcHV0ZVBhc3MnXG5pbXBvcnQgeyBDYW1lcmEsIENhbWVyYUJhc2VQZXJzcGVjdGl2ZU9wdGlvbnMgfSBmcm9tICcuLi9jb3JlL2NhbWVyYS9DYW1lcmEnXG5pbXBvcnQgeyBET01FbGVtZW50Qm91bmRpbmdSZWN0LCBET01FbGVtZW50UGFyYW1zLCBET01Qb3NpdGlvbiB9IGZyb20gJy4uL2NvcmUvRE9NL0RPTUVsZW1lbnQnXG5pbXBvcnQgeyBHUFVDYW1lcmFSZW5kZXJlciwgR1BVQ2FtZXJhUmVuZGVyZXJQYXJhbXMgfSBmcm9tICcuLi9jb3JlL3JlbmRlcmVycy9HUFVDYW1lcmFSZW5kZXJlcidcbmltcG9ydCB7IEdQVURldmljZU1hbmFnZXIgfSBmcm9tICcuLi9jb3JlL3JlbmRlcmVycy9HUFVEZXZpY2VNYW5hZ2VyJ1xuaW1wb3J0IHsgUmVuZGVyZXIgfSBmcm9tICcuLi9jb3JlL3JlbmRlcmVycy91dGlscydcblxuLyoqXG4gKiBPcHRpb25zIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIEdQVUN1cnRhaW5zfVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdQVUN1cnRhaW5zT3B0aW9ucyBleHRlbmRzIE9taXQ8R1BVQ2FtZXJhUmVuZGVyZXJQYXJhbXMsICdkZXZpY2VNYW5hZ2VyJz4ge1xuICAvKiogV2hldGhlciB7QGxpbmsgR1BVQ3VydGFpbnN9IHNob3VsZCBjcmVhdGUgaXRzIG93biByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgbG9vcCB0byByZW5kZXIgb3Igbm90ICovXG4gIGF1dG9SZW5kZXI/OiBib29sZWFuXG4gIC8qKiBXaGV0aGVyIHtAbGluayBHUFVDdXJ0YWluc30gc2hvdWxkIGhhbmRsZSBhbGwgcmVzaXppbmcgYnkgaXRzZWxmIG9yIG5vdCAqL1xuICBhdXRvUmVzaXplPzogYm9vbGVhblxuICAvKiogV2hldGhlciB7QGxpbmsgR1BVQ3VydGFpbnN9IHNob3VsZCBsaXN0ZW4gdG8gc2Nyb2xsIGV2ZW50IG9yIG5vdCAqL1xuICB3YXRjaFNjcm9sbD86IGJvb2xlYW5cbiAgLyoqIEZsYWcgaW5kaWNhdGluZyB3aGV0aGVyIHdlJ3JlIHJ1bm5pbmcgdGhlIHByb2R1Y3Rpb24gbW9kZSBvciBub3QuIElmIG5vdCwgdXNlZnVsIHdhcm5pbmdzIGNvdWxkIGJlIGxvZ2dlZCB0byB0aGUgY29uc29sZSAqL1xuICBwcm9kdWN0aW9uOiBHUFVEZXZpY2VNYW5hZ2VyWydwcm9kdWN0aW9uJ11cbn1cblxuLyoqXG4gKiBQYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIEdQVUN1cnRhaW5zfVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEdQVUN1cnRhaW5zUGFyYW1zIGV4dGVuZHMgUGFydGlhbDxPbWl0PEdQVUN1cnRhaW5zT3B0aW9ucywgJ2NvbnRhaW5lcic+PiB7XG4gIC8qKiB7QGxpbmsgSFRNTEVsZW1lbnR9IG9yIHN0cmluZyByZXByZXNlbnRpbmcgYW4ge0BsaW5rIEhUTUxFbGVtZW50fSBzZWxlY3RvciB0aGF0IHdpbGwgaG9sZCB0aGUgV2ViR1BVIHtAbGluayBIVE1MQ2FudmFzRWxlbWVudH0uIENvdWxkIGJlIHNldCBsYXRlciBpZiBub3Qgc3BlY2lmaWVkLiAqL1xuICBjb250YWluZXI/OiBzdHJpbmcgfCBIVE1MRWxlbWVudCB8IG51bGxcbn1cblxuLyoqXG4gKiBVc2VkIGFzIGEgZ2xvYmFsIGNsYXNzIHRvIGNyZWF0ZSBhIHtAbGluayBHUFVDdXJ0YWluc1JlbmRlcmVyfSwgY3JlYXRlIGFsbCBvYmplY3RzIHRoYXQgbmVlZCBhIHJlZmVyZW5jZSB0byBhIHJlbmRlcmVyLCBsaXN0ZW4gdG8gdmFyaW91cyBldmVudHMgc3VjaCBhcyBzY3JvbGwgYW5kIHJlc2l6ZSBhbmQgcmVuZGVyLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiAvLyBzZXQgb3VyIG1haW4gR1BVQ3VydGFpbnMgaW5zdGFuY2VcbiAqIGNvbnN0IGdwdUN1cnRhaW5zID0gbmV3IEdQVUN1cnRhaW5zKHtcbiAqICAgY29udGFpbmVyOiAnI2NhbnZhcycgLy8gc2VsZWN0b3Igb2Ygb3VyIFdlYkdQVSBjYW52YXMgY29udGFpbmVyXG4gKiB9KVxuICpcbiAqIC8vIHNldCB0aGUgR1BVIGRldmljZVxuICogLy8gbm90ZSB0aGlzIGlzIGFzeW5jaHJvbm91c1xuICogYXdhaXQgZ3B1Q3VydGFpbnMuc2V0RGV2aWNlKClcbiAqIGBgYFxuICovXG5leHBvcnQgY2xhc3MgR1BVQ3VydGFpbnMge1xuICAvKiogVGhlIHR5cGUgb2YgdGhpcyB7QGxpbmsgR1BVQ3VydGFpbnN9ICovXG4gIHR5cGU6IHN0cmluZ1xuICAvKiogT3B0aW9ucyB1c2VkIHRvIGNyZWF0ZSB0aGlzIHtAbGluayBHUFVDdXJ0YWluc30gKi9cbiAgb3B0aW9uczogR1BVQ3VydGFpbnNPcHRpb25zXG4gIC8qKiB7QGxpbmsgSFRNTEVsZW1lbnR9IHRoYXQgd2lsbCBob2xkIHRoZSBXZWJHUFUge0BsaW5rIEhUTUxDYW52YXNFbGVtZW50fSAqL1xuICBjb250YWluZXI6IEhUTUxFbGVtZW50XG5cbiAgLyoqIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyfSB1c2VkIHRvIGhhbmRsZSB0aGUge0BsaW5rIEdQVUFkYXB0ZXJ9IGFuZCB7QGxpbmsgR1BVRGV2aWNlfSAqL1xuICBkZXZpY2VNYW5hZ2VyOiBHUFVEZXZpY2VNYW5hZ2VyXG5cbiAgLyoqIFRpbnkgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyIHdyYXBwZXIgKi9cbiAgc2Nyb2xsTWFuYWdlcjogU2Nyb2xsTWFuYWdlclxuXG4gIC8qKiBSZXF1ZXN0IGFuaW1hdGlvbiBmcmFtZSBjYWxsYmFjayByZXR1cm5lZCBpZCBpZiB1c2VkICovXG4gIGFuaW1hdGlvbkZyYW1lSUQ6IG51bGwgfCBudW1iZXJcblxuICAvLyBjYWxsYmFja3MgLyBldmVudHNcbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25SZW5kZXJ9IGNhbGxiYWNrICovXG4gIF9vblJlbmRlckNhbGxiYWNrOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xuICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrICovXG4gIH1cbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25TY3JvbGx9IGNhbGxiYWNrICovXG4gIF9vblNjcm9sbENhbGxiYWNrOiAoKSA9PiB2b2lkID0gKCkgPT4ge1xuICAgIC8qIGFsbG93IGVtcHR5IGNhbGxiYWNrICovXG4gIH1cbiAgLyoqIGZ1bmN0aW9uIGFzc2lnbmVkIHRvIHRoZSB7QGxpbmsgb25FcnJvcn0gY2FsbGJhY2sgKi9cbiAgX29uRXJyb3JDYWxsYmFjazogKCkgPT4gdm9pZCA9ICgpID0+IHtcbiAgICAvKiBhbGxvdyBlbXB0eSBjYWxsYmFjayAqL1xuICB9XG4gIC8qKiBmdW5jdGlvbiBhc3NpZ25lZCB0byB0aGUge0BsaW5rIG9uQ29udGV4dExvc3R9IGNhbGxiYWNrICovXG4gIF9vbkNvbnRleHRMb3N0Q2FsbGJhY2s6IChpbmZvPzogR1BVRGV2aWNlTG9zdEluZm8pID0+IHZvaWQgPSAoKSA9PiB7XG4gICAgLyogYWxsb3cgZW1wdHkgY2FsbGJhY2sgKi9cbiAgfVxuXG4gIC8qKlxuICAgKiBHUFVDdXJ0YWlucyBjb25zdHJ1Y3RvclxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBHUFVDdXJ0YWluc1BhcmFtcyB8IHBhcmFtZXRlcnN9IHVzZWQgdG8gY3JlYXRlIHRoaXMge0BsaW5rIEdQVUN1cnRhaW5zfVxuICAgKi9cbiAgY29uc3RydWN0b3Ioe1xuICAgIGNvbnRhaW5lcixcbiAgICBwaXhlbFJhdGlvID0gd2luZG93LmRldmljZVBpeGVsUmF0aW8gPz8gMSxcbiAgICBwcmVmZXJyZWRGb3JtYXQsXG4gICAgYWxwaGFNb2RlID0gJ3ByZW11bHRpcGxpZWQnLFxuICAgIHByb2R1Y3Rpb24gPSBmYWxzZSxcbiAgICBtdWx0aXNhbXBsZWQgPSB0cnVlLFxuICAgIHJlbmRlclBhc3MsXG4gICAgY2FtZXJhLFxuICAgIGF1dG9SZW5kZXIgPSB0cnVlLFxuICAgIGF1dG9SZXNpemUgPSB0cnVlLFxuICAgIHdhdGNoU2Nyb2xsID0gdHJ1ZSxcbiAgfTogR1BVQ3VydGFpbnNQYXJhbXMgPSB7fSkge1xuICAgIHRoaXMudHlwZSA9ICdDdXJ0YWluc0dQVSdcblxuICAgIHRoaXMub3B0aW9ucyA9IHtcbiAgICAgIGNvbnRhaW5lcixcbiAgICAgIHBpeGVsUmF0aW8sXG4gICAgICBjYW1lcmEsXG4gICAgICBwcm9kdWN0aW9uLFxuICAgICAgcHJlZmVycmVkRm9ybWF0LFxuICAgICAgYWxwaGFNb2RlLFxuICAgICAgbXVsdGlzYW1wbGVkLFxuICAgICAgcmVuZGVyUGFzcyxcbiAgICAgIGF1dG9SZW5kZXIsXG4gICAgICBhdXRvUmVzaXplLFxuICAgICAgd2F0Y2hTY3JvbGwsXG4gICAgfVxuXG4gICAgdGhpcy5zZXREZXZpY2VNYW5hZ2VyKClcblxuICAgIGlmIChjb250YWluZXIpIHtcbiAgICAgIHRoaXMuc2V0Q29udGFpbmVyKGNvbnRhaW5lcilcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB7QGxpbmsgY29udGFpbmVyfVxuICAgKiBAcGFyYW0gY29udGFpbmVyIC0ge0BsaW5rIEhUTUxFbGVtZW50fSBvciBzdHJpbmcgcmVwcmVzZW50aW5nIGFuIHtAbGluayBIVE1MRWxlbWVudH0gc2VsZWN0b3IgdG8gdXNlXG4gICAqL1xuICBzZXRDb250YWluZXIoY29udGFpbmVyOiBET01FbGVtZW50UGFyYW1zWydlbGVtZW50J10pIHtcbiAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgY29uc3QgY29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIGNvbnRhaW5lci5zZXRBdHRyaWJ1dGUoJ2lkJywgJ2N1cnRhaW5zLWdwdS1jYW52YXMnKVxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpXG4gICAgICB0aGlzLm9wdGlvbnMuY29udGFpbmVyID0gY29udGFpbmVyXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh0eXBlb2YgY29udGFpbmVyID09PSAnc3RyaW5nJykge1xuICAgICAgICBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGNvbnRhaW5lcilcblxuICAgICAgICBpZiAoIWNvbnRhaW5lcikge1xuICAgICAgICAgIGNvbnN0IGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpXG4gICAgICAgICAgY29udGFpbmVyLnNldEF0dHJpYnV0ZSgnaWQnLCAnY3VydGFpbnMtZ3B1LWNhbnZhcycpXG4gICAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChjb250YWluZXIpXG4gICAgICAgICAgdGhpcy5vcHRpb25zLmNvbnRhaW5lciA9IGNvbnRhaW5lclxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIgPSBjb250YWluZXIgYXMgSFRNTEVsZW1lbnRcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChjb250YWluZXIgaW5zdGFuY2VvZiBFbGVtZW50KSB7XG4gICAgICAgIHRoaXMub3B0aW9ucy5jb250YWluZXIgPSBjb250YWluZXIgYXMgSFRNTEVsZW1lbnRcbiAgICAgIH1cbiAgICB9XG5cbiAgICB0aGlzLmNvbnRhaW5lciA9IHRoaXMub3B0aW9ucy5jb250YWluZXIgYXMgSFRNTEVsZW1lbnRcblxuICAgIHRoaXMuc2V0Q3VydGFpbnMoKVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUgZGVmYXVsdCB7QGxpbmsgR1BVQ3VydGFpbnNSZW5kZXJlciB8IHJlbmRlcmVyfVxuICAgKi9cbiAgc2V0TWFpblJlbmRlcmVyKCkge1xuICAgIHRoaXMuY3JlYXRlQ3VydGFpbnNSZW5kZXJlcih7XG4gICAgICBkZXZpY2VNYW5hZ2VyOiB0aGlzLmRldmljZU1hbmFnZXIsXG4gICAgICAvLyBUT0RPIC4uLnRoaXMub3B0aW9ucz9cbiAgICAgIGNvbnRhaW5lcjogdGhpcy5vcHRpb25zLmNvbnRhaW5lcixcbiAgICAgIHBpeGVsUmF0aW86IHRoaXMub3B0aW9ucy5waXhlbFJhdGlvLFxuICAgICAgcHJlZmVycmVkRm9ybWF0OiB0aGlzLm9wdGlvbnMucHJlZmVycmVkRm9ybWF0LFxuICAgICAgYWxwaGFNb2RlOiB0aGlzLm9wdGlvbnMuYWxwaGFNb2RlLFxuICAgICAgbXVsdGlzYW1wbGVkOiB0aGlzLm9wdGlvbnMubXVsdGlzYW1wbGVkLFxuICAgICAgcmVuZGVyUGFzczogdGhpcy5vcHRpb25zLnJlbmRlclBhc3MsXG4gICAgICBjYW1lcmE6IHRoaXMub3B0aW9ucy5jYW1lcmEsXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXRjaCB0aGUgb3B0aW9ucyB3aXRoIGRlZmF1bHQgdmFsdWVzIGJlZm9yZSBjcmVhdGluZyBhIHtAbGluayBSZW5kZXJlcn1cbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSBwYXJhbWV0ZXJzIHRvIHBhdGNoXG4gICAqL1xuICBwYXRjaFJlbmRlcmVyT3B0aW9uczxUIGV4dGVuZHMgR1BVUmVuZGVyZXJQYXJhbXMgfCBHUFVDYW1lcmFSZW5kZXJlclBhcmFtcz4ocGFyYW1ldGVyczogVCk6IFQge1xuICAgIGlmIChwYXJhbWV0ZXJzLnBpeGVsUmF0aW8gPT09IHVuZGVmaW5lZCkgcGFyYW1ldGVycy5waXhlbFJhdGlvID0gdGhpcy5vcHRpb25zLnBpeGVsUmF0aW9cblxuICAgIHJldHVybiBwYXJhbWV0ZXJzXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHtAbGluayBHUFVSZW5kZXJlcn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgR1BVUmVuZGVyZXJQYXJhbXMgfCBwYXJhbWV0ZXJzfSB0byB1c2VcbiAgICovXG4gIGNyZWF0ZVJlbmRlcmVyKHBhcmFtZXRlcnM6IEdQVVJlbmRlcmVyUGFyYW1zKTogR1BVUmVuZGVyZXIge1xuICAgIHBhcmFtZXRlcnMgPSB0aGlzLnBhdGNoUmVuZGVyZXJPcHRpb25zKHBhcmFtZXRlcnMpXG5cbiAgICByZXR1cm4gbmV3IEdQVVJlbmRlcmVyKHsgLi4ucGFyYW1ldGVycywgZGV2aWNlTWFuYWdlcjogdGhpcy5kZXZpY2VNYW5hZ2VyIH0pXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHtAbGluayBHUFVDYW1lcmFSZW5kZXJlcn0gaW5zdGFuY2VcbiAgICogQHBhcmFtIHBhcmFtZXRlcnMgLSB7QGxpbmsgR1BVQ2FtZXJhUmVuZGVyZXJQYXJhbXMgfCBwYXJhbWV0ZXJzfSB0byB1c2VcbiAgICovXG4gIGNyZWF0ZUNhbWVyYVJlbmRlcmVyKHBhcmFtZXRlcnM6IEdQVUNhbWVyYVJlbmRlcmVyUGFyYW1zKTogR1BVQ2FtZXJhUmVuZGVyZXIge1xuICAgIHBhcmFtZXRlcnMgPSB0aGlzLnBhdGNoUmVuZGVyZXJPcHRpb25zKHBhcmFtZXRlcnMpXG5cbiAgICByZXR1cm4gbmV3IEdQVUNhbWVyYVJlbmRlcmVyKHsgLi4ucGFyYW1ldGVycywgZGV2aWNlTWFuYWdlcjogdGhpcy5kZXZpY2VNYW5hZ2VyIH0pXG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlIGEgbmV3IHtAbGluayBHUFVDdXJ0YWluc1JlbmRlcmVyfSBpbnN0YW5jZVxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBHUFVDYW1lcmFSZW5kZXJlclBhcmFtcyB8IHBhcmFtZXRlcnN9IHRvIHVzZVxuICAgKi9cbiAgY3JlYXRlQ3VydGFpbnNSZW5kZXJlcihwYXJhbWV0ZXJzOiBHUFVDYW1lcmFSZW5kZXJlclBhcmFtcyk6IEdQVUN1cnRhaW5zUmVuZGVyZXIge1xuICAgIHBhcmFtZXRlcnMgPSB0aGlzLnBhdGNoUmVuZGVyZXJPcHRpb25zKHBhcmFtZXRlcnMpXG5cbiAgICByZXR1cm4gbmV3IEdQVUN1cnRhaW5zUmVuZGVyZXIoeyAuLi5wYXJhbWV0ZXJzLCBkZXZpY2VNYW5hZ2VyOiB0aGlzLmRldmljZU1hbmFnZXIgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXQgb3VyIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyfVxuICAgKi9cbiAgc2V0RGV2aWNlTWFuYWdlcigpIHtcbiAgICB0aGlzLmRldmljZU1hbmFnZXIgPSBuZXcgR1BVRGV2aWNlTWFuYWdlcih7XG4gICAgICBsYWJlbDogJ0dQVUN1cnRhaW5zIGRlZmF1bHQgZGV2aWNlJyxcbiAgICAgIHByb2R1Y3Rpb246IHRoaXMub3B0aW9ucy5wcm9kdWN0aW9uLFxuICAgICAgb25FcnJvcjogKCkgPT5cbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgdGhpcy5fb25FcnJvckNhbGxiYWNrICYmIHRoaXMuX29uRXJyb3JDYWxsYmFjaygpXG4gICAgICAgIH0sIDApLFxuICAgICAgb25EZXZpY2VMb3N0OiAoaW5mbykgPT4gdGhpcy5fb25Db250ZXh0TG9zdENhbGxiYWNrICYmIHRoaXMuX29uQ29udGV4dExvc3RDYWxsYmFjayhpbmZvKSxcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgY3JlYXRlZCB7QGxpbmsgUmVuZGVyZXJ9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHJlbmRlcmVycygpOiBSZW5kZXJlcltdIHtcbiAgICByZXR1cm4gdGhpcy5kZXZpY2VNYW5hZ2VyLnJlbmRlcmVyc1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCB7QGxpbmsgR1BVQ3VydGFpbnNSZW5kZXJlcn0gY3JlYXRlZFxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCByZW5kZXJlcigpOiBHUFVDdXJ0YWluc1JlbmRlcmVyIHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJlcnNbMF0gYXMgR1BVQ3VydGFpbnNSZW5kZXJlclxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUge0BsaW5rIEdQVURldmljZU1hbmFnZXJ9IHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI2FkYXB0ZXIgfCBhZGFwdGVyfSBhbmQge0BsaW5rIEdQVURldmljZU1hbmFnZXIjZGV2aWNlIHwgZGV2aWNlfSBpZiBwb3NzaWJsZSwgdGhlbiBzZXQgYWxsIGNyZWF0ZWQge0BsaW5rIFJlbmRlcmVyfSBjb250ZXh0c1xuICAgKi9cbiAgYXN5bmMgc2V0RGV2aWNlKCkge1xuICAgIGF3YWl0IHRoaXMuZGV2aWNlTWFuYWdlci5pbml0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXN0b3JlIHRoZSB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlciNhZGFwdGVyIHwgYWRhcHRlcn0gYW5kIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI2RldmljZSB8IGRldmljZX1cbiAgICogQGFzeW5jXG4gICAqL1xuICBhc3luYyByZXN0b3JlQ29udGV4dCgpIHtcbiAgICBhd2FpdCB0aGlzLmRldmljZU1hbmFnZXIucmVzdG9yZURldmljZSgpXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSB2YXJpb3VzIGV2ZW50IGxpc3RlbmVycywgc2V0IHRoZSB7QGxpbmsgR1BVQ3VydGFpbnNSZW5kZXJlcn0gYW5kIHN0YXJ0IHJlbmRlcmluZyBpZiBuZWVkZWRcbiAgICovXG4gIHNldEN1cnRhaW5zKCkge1xuICAgIHRoaXMuaW5pdEV2ZW50cygpXG5cbiAgICB0aGlzLnNldE1haW5SZW5kZXJlcigpXG5cbiAgICAvLyBvbmx5IGlmIGF1dG8gcmVuZGVyXG4gICAgaWYgKHRoaXMub3B0aW9ucy5hdXRvUmVuZGVyKSB7XG4gICAgICB0aGlzLmFuaW1hdGUoKVxuICAgIH1cbiAgfVxuXG4gIC8qIFJFTkRFUkVSIFRSQUNLRUQgT0JKRUNUUyAqL1xuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHRoZSBjcmVhdGVkIHtAbGluayBQaW5nUG9uZ1BsYW5lfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBwaW5nUG9uZ1BsYW5lcygpOiBQaW5nUG9uZ1BsYW5lW10ge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmVycz8ubWFwKChyZW5kZXJlcikgPT4gcmVuZGVyZXIucGluZ1BvbmdQbGFuZXMpLmZsYXQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgdGhlIGNyZWF0ZWQge0BsaW5rIFNoYWRlclBhc3N9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHNoYWRlclBhc3NlcygpOiBTaGFkZXJQYXNzW10ge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmVycz8ubWFwKChyZW5kZXJlcikgPT4gcmVuZGVyZXIuc2hhZGVyUGFzc2VzKS5mbGF0KClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgYWxsIHRoZSBjcmVhdGVkIHtAbGluayBQcm9qZWN0ZWRNZXNoIHwgcHJvamVjdGVkIG1lc2hlc31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgbWVzaGVzKCk6IFByb2plY3RlZE1lc2hbXSB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZXJzPy5tYXAoKHJlbmRlcmVyKSA9PiByZW5kZXJlci5tZXNoZXMpLmZsYXQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgdGhlIGNyZWF0ZWQge0BsaW5rIERPTU1lc2ggfCBET00gTWVzaGVzfSAoaW5jbHVkaW5nIHtAbGluayBQbGFuZSB8IHBsYW5lc30pXG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IGRvbU1lc2hlcygpOiBET01NZXNoW10ge1xuICAgIHJldHVybiB0aGlzLnJlbmRlcmVyc1xuICAgICAgPy5maWx0ZXIoKHJlbmRlcmVyKSA9PiByZW5kZXJlciBpbnN0YW5jZW9mIEdQVUN1cnRhaW5zUmVuZGVyZXIpXG4gICAgICAubWFwKChyZW5kZXJlcjogR1BVQ3VydGFpbnNSZW5kZXJlcikgPT4gcmVuZGVyZXIuZG9tTWVzaGVzKVxuICAgICAgLmZsYXQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBhbGwgdGhlIGNyZWF0ZWQge0BsaW5rIFBsYW5lIHwgcGxhbmVzfVxuICAgKiBAcmVhZG9ubHlcbiAgICovXG4gIGdldCBwbGFuZXMoKTogUGxhbmVbXSB7XG4gICAgcmV0dXJuIHRoaXMuZG9tTWVzaGVzLmZpbHRlcigoZG9tTWVzaCkgPT4gZG9tTWVzaCBpbnN0YW5jZW9mIFBsYW5lKSBhcyBQbGFuZVtdXG4gIH1cblxuICAvKipcbiAgICogR2V0IGFsbCB0aGUgY3JlYXRlZCB7QGxpbmsgQ29tcHV0ZVBhc3MgfCBjb21wdXRlIHBhc3Nlc31cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgY29tcHV0ZVBhc3NlcygpOiBDb21wdXRlUGFzc1tdIHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJlcnM/Lm1hcCgocmVuZGVyZXIpID0+IHJlbmRlcmVyLmNvbXB1dGVQYXNzZXMpLmZsYXQoKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUge0BsaW5rIEdQVUN1cnRhaW5zUmVuZGVyZXIjY2FtZXJhIHwgZGVmYXVsdCBHUFVDdXJ0YWluc1JlbmRlcmVyIGNhbWVyYX1cbiAgICogQHJlYWRvbmx5XG4gICAqL1xuICBnZXQgY2FtZXJhKCk6IENhbWVyYSB7XG4gICAgcmV0dXJuIHRoaXMucmVuZGVyZXI/LmNhbWVyYVxuICB9XG5cbiAgLyoqXG4gICAqIFNldCB0aGUge0BsaW5rIEdQVUN1cnRhaW5zUmVuZGVyZXIjc2V0UGVyc3BlY3RpdmUgfCBkZWZhdWx0IEdQVUN1cnRhaW5zUmVuZGVyZXIgY2FtZXJhfSBwZXJzcGVjdGl2ZVxuICAgKiBAcGFyYW0gcGFyYW1ldGVycyAtIHtAbGluayBDYW1lcmFCYXNlUGVyc3BlY3RpdmVPcHRpb25zIHwgcGFyYW1ldGVyc30gdG8gdXNlIGZvciB0aGUgcGVyc3BlY3RpdmVcbiAgICovXG4gIHNldFBlcnNwZWN0aXZlKHsgZm92ID0gNTAsIG5lYXIgPSAwLjAxLCBmYXIgPSA1MCB9OiBDYW1lcmFCYXNlUGVyc3BlY3RpdmVPcHRpb25zID0ge30pIHtcbiAgICB0aGlzLnJlbmRlcmVyPy5zZXRQZXJzcGVjdGl2ZSh7IGZvdiwgbmVhciwgZmFyIH0pXG4gIH1cblxuICAvKipcbiAgICogU2V0IHRoZSBkZWZhdWx0IHtAbGluayBHUFVDdXJ0YWluc1JlbmRlcmVyI3NldFBlcnNwZWN0aXZlIHwgZGVmYXVsdCBHUFVDdXJ0YWluc1JlbmRlcmVyIGNhbWVyYX0ge0BsaW5rIENhbWVyYSNwb3NpdGlvbiB8IHBvc2l0aW9ufVxuICAgKiBAcGFyYW0gcG9zaXRpb24gLSBuZXcge0BsaW5rIENhbWVyYSNwb3NpdGlvbiB8IHBvc2l0aW9ufVxuICAgKi9cbiAgc2V0Q2FtZXJhUG9zaXRpb24ocG9zaXRpb246IFZlYzMgPSBuZXcgVmVjMygwLCAwLCAxKSkge1xuICAgIHRoaXMucmVuZGVyZXI/LnNldENhbWVyYVBvc2l0aW9uKHBvc2l0aW9uKVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBvdXIge0BsaW5rIEdQVUN1cnRhaW5zUmVuZGVyZXIjc2V0UGVyc3BlY3RpdmUgfCBkZWZhdWx0IEdQVUN1cnRhaW5zUmVuZGVyZXIgYm91bmRpbmcgcmVjdGFuZ2xlfVxuICAgKi9cbiAgZ2V0IGJvdW5kaW5nUmVjdCgpOiBET01FbGVtZW50Qm91bmRpbmdSZWN0IHtcbiAgICByZXR1cm4gdGhpcy5yZW5kZXJlcj8uYm91bmRpbmdSZWN0XG4gIH1cblxuICAvKiBTQ1JPTEwgKi9cblxuICAvKipcbiAgICogU2V0IHRoZSB7QGxpbmsgc2Nyb2xsTWFuYWdlcn1cbiAgICovXG4gIGluaXRTY3JvbGwoKSB7XG4gICAgdGhpcy5zY3JvbGxNYW5hZ2VyID0gbmV3IFNjcm9sbE1hbmFnZXIoe1xuICAgICAgLy8gaW5pdCB2YWx1ZXNcbiAgICAgIHNjcm9sbDoge1xuICAgICAgICB4OiB3aW5kb3cucGFnZVhPZmZzZXQsXG4gICAgICAgIHk6IHdpbmRvdy5wYWdlWU9mZnNldCxcbiAgICAgIH0sXG4gICAgICBkZWx0YToge1xuICAgICAgICB4OiAwLFxuICAgICAgICB5OiAwLFxuICAgICAgfSxcbiAgICAgIHNob3VsZFdhdGNoOiB0aGlzLm9wdGlvbnMud2F0Y2hTY3JvbGwsXG4gICAgICBvblNjcm9sbDogKGRlbHRhKSA9PiB0aGlzLnVwZGF0ZVNjcm9sbChkZWx0YSksXG4gICAgfSlcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgYWxsIHtAbGluayBET01NZXNoI3VwZGF0ZVNjcm9sbFBvc2l0aW9uIHwgRE9NTWVzaCBzY3JvbGwgcG9zaXRpb25zfVxuICAgKiBAcGFyYW0gZGVsdGEgLSBsYXN0IHtAbGluayBTY3JvbGxNYW5hZ2VyI2RlbHRhIHwgc2Nyb2xsIGRlbHRhIHZhbHVlc31cbiAgICovXG4gIHVwZGF0ZVNjcm9sbChkZWx0YTogRE9NUG9zaXRpb24gPSB7IHg6IDAsIHk6IDAgfSkge1xuICAgIHRoaXMuZG9tTWVzaGVzLmZvckVhY2goKG1lc2gpID0+IHtcbiAgICAgIGlmIChtZXNoLmRvbUVsZW1lbnQpIHtcbiAgICAgICAgbWVzaC51cGRhdGVTY3JvbGxQb3NpdGlvbihkZWx0YSlcbiAgICAgIH1cbiAgICB9KVxuXG4gICAgdGhpcy5fb25TY3JvbGxDYWxsYmFjayAmJiB0aGlzLl9vblNjcm9sbENhbGxiYWNrKClcbiAgfVxuXG4gIC8qKlxuICAgKiBVcGRhdGUgb3VyIHtAbGluayBTY3JvbGxNYW5hZ2VyI3Njcm9sbCB8IHNjcm9sbE1hbmFnZXIgc2Nyb2xsIHZhbHVlc30uIENhbGxlZCBlYWNoIHRpbWUgdGhlIHNjcm9sbCBoYXMgY2hhbmdlZCBpZiB7QGxpbmsgR1BVQ3VydGFpbnMjb3B0aW9ucy53YXRjaFNjcm9sbCB8IHdhdGNoU2Nyb2xsIG9wdGlvbn0gaXMgc2V0IHRvIHRydWUuIENvdWxkIGJlIGNhbGxlZCBleHRlcm5hbGx5IGFzIHdlbGwuXG4gICAqIEBwYXJhbSBzY3JvbGwgLSBuZXcge0BsaW5rIERPTVBvc2l0aW9uIHwgc2Nyb2xsIHZhbHVlc31cbiAgICovXG4gIHVwZGF0ZVNjcm9sbFZhbHVlcyhzY3JvbGw6IERPTVBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH0pIHtcbiAgICB0aGlzLnNjcm9sbE1hbmFnZXIudXBkYXRlU2Nyb2xsVmFsdWVzKHNjcm9sbClcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgb3VyIHtAbGluayBTY3JvbGxNYW5hZ2VyI2RlbHRhIHwgc2Nyb2xsTWFuYWdlciBkZWx0YSB2YWx1ZXN9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHNjcm9sbERlbHRhKCk6IERPTVBvc2l0aW9uIHtcbiAgICByZXR1cm4gdGhpcy5zY3JvbGxNYW5hZ2VyLmRlbHRhXG4gIH1cblxuICAvKipcbiAgICogR2V0IG91ciB7QGxpbmsgU2Nyb2xsTWFuYWdlciNzY3JvbGwgfCBzY3JvbGxNYW5hZ2VyIHNjcm9sbCB2YWx1ZXN9XG4gICAqIEByZWFkb25seVxuICAgKi9cbiAgZ2V0IHNjcm9sbFZhbHVlcygpOiBET01Qb3NpdGlvbiB7XG4gICAgcmV0dXJuIHRoaXMuc2Nyb2xsTWFuYWdlci5zY3JvbGxcbiAgfVxuXG4gIC8qIEVWRU5UIExJU1RFTkVSUyAqL1xuXG4gIC8qKlxuICAgKiBTZXQgdGhlIHJlc2l6ZSBhbmQgc2Nyb2xsIGV2ZW50IGxpc3RlbmVyc1xuICAgKi9cbiAgaW5pdEV2ZW50cygpIHtcbiAgICByZXNpemVNYW5hZ2VyLnVzZU9ic2VydmVyKHRoaXMub3B0aW9ucy5hdXRvUmVzaXplKVxuXG4gICAgdGhpcy5pbml0U2Nyb2xsKClcbiAgfVxuXG4gIC8qIEVWRU5UUyAqL1xuXG4gIC8qKlxuICAgKiBDYWxsZWQgYXQgZWFjaCByZW5kZXIgZnJhbWVcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIGF0IGVhY2ggcmVuZGVyXG4gICAqIEByZXR1cm5zIC0gb3VyIHtAbGluayBHUFVDdXJ0YWluc31cbiAgICovXG4gIG9uUmVuZGVyKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogR1BVQ3VydGFpbnMge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5fb25SZW5kZXJDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgZWFjaCB0aW1lIHRoZSB7QGxpbmsgU2Nyb2xsTWFuYWdlciNzY3JvbGwgfCBzY3JvbGxNYW5hZ2VyIHNjcm9sbCB2YWx1ZXN9IGNoYW5nZWRcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIGVhY2ggdGltZSB0aGUge0BsaW5rIFNjcm9sbE1hbmFnZXIjc2Nyb2xsIHwgc2Nyb2xsTWFuYWdlciBzY3JvbGwgdmFsdWVzfSBjaGFuZ2VkXG4gICAqIEByZXR1cm5zIC0gb3VyIHtAbGluayBHUFVDdXJ0YWluc31cbiAgICovXG4gIG9uU2Nyb2xsKGNhbGxiYWNrOiAoKSA9PiB2b2lkKTogR1BVQ3VydGFpbnMge1xuICAgIGlmIChjYWxsYmFjaykge1xuICAgICAgdGhpcy5fb25TY3JvbGxDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgaWYgdGhlcmUncyBiZWVuIGFuIGVycm9yIHdoaWxlIHRyeWluZyB0byBjcmVhdGUgdGhlIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyI2RldmljZSB8IGRldmljZX1cbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIGlmIHRoZXJlJ3MgYmVlbiBhbiBlcnJvciB3aGlsZSB0cnlpbmcgdG8gY3JlYXRlIHRoZSB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlciNkZXZpY2UgfCBkZXZpY2V9XG4gICAqIEByZXR1cm5zIC0gb3VyIHtAbGluayBHUFVDdXJ0YWluc31cbiAgICovXG4gIG9uRXJyb3IoY2FsbGJhY2s6ICgpID0+IHZvaWQpOiBHUFVDdXJ0YWlucyB7XG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB0aGlzLl9vbkVycm9yQ2FsbGJhY2sgPSBjYWxsYmFja1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzXG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdoZW5ldmVyIHRoZSB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlciNkZXZpY2UgfCBkZXZpY2V9IGlzIGxvc3RcbiAgICogQHBhcmFtIGNhbGxiYWNrIC0gY2FsbGJhY2sgdG8gcnVuIHdoZW5ldmVyIHRoZSB7QGxpbmsgR1BVRGV2aWNlTWFuYWdlciNkZXZpY2UgfCBkZXZpY2V9IGlzIGxvc3RcbiAgICogQHJldHVybnMgLSBvdXIge0BsaW5rIEdQVUN1cnRhaW5zfVxuICAgKi9cbiAgb25Db250ZXh0TG9zdChjYWxsYmFjazogKGluZm8/OiBHUFVEZXZpY2VMb3N0SW5mbykgPT4gdm9pZCk6IEdQVUN1cnRhaW5zIHtcbiAgICBpZiAoY2FsbGJhY2spIHtcbiAgICAgIHRoaXMuX29uQ29udGV4dExvc3RDYWxsYmFjayA9IGNhbGxiYWNrXG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXNcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGUgYSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUgbG9vcCBhbmQgcnVuIGl0XG4gICAqL1xuICBhbmltYXRlKCkge1xuICAgIHRoaXMucmVuZGVyKClcbiAgICB0aGlzLmFuaW1hdGlvbkZyYW1lSUQgPSB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0ZS5iaW5kKHRoaXMpKVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbmRlciBvdXIge0BsaW5rIEdQVURldmljZU1hbmFnZXJ9XG4gICAqL1xuICByZW5kZXIoKSB7XG4gICAgdGhpcy5fb25SZW5kZXJDYWxsYmFjayAmJiB0aGlzLl9vblJlbmRlckNhbGxiYWNrKClcblxuICAgIHRoaXMuZGV2aWNlTWFuYWdlci5yZW5kZXIoKVxuICB9XG5cbiAgLyoqXG4gICAqIERlc3Ryb3kgb3VyIHtAbGluayBHUFVDdXJ0YWluc30gYW5kIHtAbGluayBHUFVEZXZpY2VNYW5hZ2VyfVxuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICBpZiAodGhpcy5hbmltYXRpb25GcmFtZUlEKSB7XG4gICAgICB3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5hbmltYXRpb25GcmFtZUlEKVxuICAgIH1cblxuICAgIHRoaXMuZGV2aWNlTWFuYWdlci5kZXN0cm95KClcbiAgICB0aGlzLnNjcm9sbE1hbmFnZXI/LmRlc3Ryb3koKVxuICAgIHJlc2l6ZU1hbmFnZXIuZGVzdHJveSgpXG4gIH1cbn1cbiIsImltcG9ydCB7IEluZGV4ZWRHZW9tZXRyeSB9IGZyb20gJy4uLy4uL2NvcmUvZ2VvbWV0cmllcy9JbmRleGVkR2VvbWV0cnknXG5pbXBvcnQgeyBWZWMzIH0gZnJvbSAnLi4vLi4vbWF0aC9WZWMzJ1xuaW1wb3J0IHsgR2VvbWV0cnlCYXNlUGFyYW1zIH0gZnJvbSAnLi4vLi4vdHlwZXMvR2VvbWV0cmllcydcblxuLyoqXG4gKiBQYXJhbWV0ZXJzIHVzZWQgdG8gY3JlYXRlIGEge0BsaW5rIEJveEdlb21ldHJ5fVxuICovXG5leHBvcnQgaW50ZXJmYWNlIEJveEdlb21ldHJ5UGFyYW1zIGV4dGVuZHMgR2VvbWV0cnlCYXNlUGFyYW1zIHtcbiAgLyoqIE51bWJlciBvZiBzZWdtZW50cyBhbG9uZyB0aGUgWCBheGlzICovXG4gIHdpZHRoU2VnbWVudHM/OiBudW1iZXJcbiAgLyoqIE51bWJlciBvZiBzZWdtZW50cyBhbG9uZyB0aGUgWSBheGlzICovXG4gIGhlaWdodFNlZ21lbnRzPzogbnVtYmVyXG4gIC8qKiBOdW1iZXIgb2Ygc2VnbWVudHMgYWxvbmcgdGhlIFogYXhpcyAqL1xuICBkZXB0aFNlZ21lbnRzPzogbnVtYmVyXG59XG5cbi8qKlxuICogSGVscGVyIHRvIGVhc2lseSBjcmVhdGUgM0QgYm94IGluZGV4ZWQgZ2VvbWV0cmllcy5cbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgamF2YXNjcmlwdFxuICogY29uc3QgYm94R2VvbWV0cnkgPSBuZXcgQm94R2VvbWV0cnkoKVxuICogYGBgXG4gKi9cbmV4cG9ydCBjbGFzcyBCb3hHZW9tZXRyeSBleHRlbmRzIEluZGV4ZWRHZW9tZXRyeSB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHtcbiAgICAgIHdpZHRoU2VnbWVudHMgPSAxLFxuICAgICAgaGVpZ2h0U2VnbWVudHMgPSAxLFxuICAgICAgZGVwdGhTZWdtZW50cyA9IDEsXG4gICAgICBpbnN0YW5jZXNDb3VudCA9IDEsXG4gICAgICB2ZXJ0ZXhCdWZmZXJzID0gW10sXG4gICAgICB0b3BvbG9neSxcbiAgICB9ID0ge30gYXMgQm94R2VvbWV0cnlQYXJhbXNcbiAgKSB7XG4gICAgc3VwZXIoeyB2ZXJ0aWNlc09yZGVyOiAnY2N3JywgdG9wb2xvZ3ksIGluc3RhbmNlc0NvdW50LCB2ZXJ0ZXhCdWZmZXJzIH0pXG5cbiAgICB0aGlzLnR5cGUgPSAnQm94R2VvbWV0cnknXG5cbiAgICAvLyB0YWtlbiBmcm9tIHRocmVlanNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2Jsb2IvZGV2L3NyYy9nZW9tZXRyaWVzL0JveEdlb21ldHJ5LmpzXG4gICAgd2lkdGhTZWdtZW50cyA9IE1hdGguZmxvb3Iod2lkdGhTZWdtZW50cylcbiAgICBoZWlnaHRTZWdtZW50cyA9IE1hdGguZmxvb3IoaGVpZ2h0U2VnbWVudHMpXG4gICAgZGVwdGhTZWdtZW50cyA9IE1hdGguZmxvb3IoZGVwdGhTZWdtZW50cylcblxuICAgIGNvbnN0IHZlcnRpY2VzID0gW11cbiAgICBjb25zdCB1dnMgPSBbXVxuICAgIGNvbnN0IG5vcm1hbHMgPSBbXVxuICAgIGNvbnN0IGluZGljZXMgPSBbXVxuXG4gICAgbGV0IG51bWJlck9mVmVydGljZXMgPSAwXG5cbiAgICBjb25zdCBidWlsZFBsYW5lID0gKHUsIHYsIHcsIHVkaXIsIHZkaXIsIHdpZHRoLCBoZWlnaHQsIGRlcHRoLCBncmlkWCwgZ3JpZFkpID0+IHtcbiAgICAgIGNvbnN0IHNlZ21lbnRXaWR0aCA9IHdpZHRoIC8gZ3JpZFhcbiAgICAgIGNvbnN0IHNlZ21lbnRIZWlnaHQgPSBoZWlnaHQgLyBncmlkWVxuXG4gICAgICBjb25zdCB3aWR0aEhhbGYgPSB3aWR0aCAvIDJcbiAgICAgIGNvbnN0IGhlaWdodEhhbGYgPSBoZWlnaHQgLyAyXG4gICAgICBjb25zdCBkZXB0aEhhbGYgPSBkZXB0aCAvIDJcblxuICAgICAgY29uc3QgZ3JpZFgxID0gZ3JpZFggKyAxXG4gICAgICBjb25zdCBncmlkWTEgPSBncmlkWSArIDFcblxuICAgICAgbGV0IHZlcnRleENvdW50ZXIgPSAwXG5cbiAgICAgIGNvbnN0IHZlY3RvciA9IG5ldyBWZWMzKClcblxuICAgICAgLy8gZ2VuZXJhdGUgdmVydGljZXMsIG5vcm1hbHMgYW5kIHV2c1xuXG4gICAgICBmb3IgKGxldCBpeSA9IDA7IGl5IDwgZ3JpZFkxOyBpeSsrKSB7XG4gICAgICAgIGNvbnN0IHkgPSBpeSAqIHNlZ21lbnRIZWlnaHQgLSBoZWlnaHRIYWxmXG5cbiAgICAgICAgZm9yIChsZXQgaXggPSAwOyBpeCA8IGdyaWRYMTsgaXgrKykge1xuICAgICAgICAgIGNvbnN0IHggPSBpeCAqIHNlZ21lbnRXaWR0aCAtIHdpZHRoSGFsZlxuXG4gICAgICAgICAgLy8gc2V0IHZhbHVlcyB0byBjb3JyZWN0IHZlY3RvciBjb21wb25lbnRcblxuICAgICAgICAgIHZlY3Rvclt1XSA9IHggKiB1ZGlyXG4gICAgICAgICAgdmVjdG9yW3ZdID0geSAqIHZkaXJcbiAgICAgICAgICB2ZWN0b3Jbd10gPSBkZXB0aEhhbGZcblxuICAgICAgICAgIC8vIG5vdyBhcHBseSB2ZWN0b3IgdG8gdmVydGV4IGJ1ZmZlclxuXG4gICAgICAgICAgdmVydGljZXMucHVzaCh2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56KVxuXG4gICAgICAgICAgLy8gc2V0IHZhbHVlcyB0byBjb3JyZWN0IHZlY3RvciBjb21wb25lbnRcblxuICAgICAgICAgIHZlY3Rvclt1XSA9IDBcbiAgICAgICAgICB2ZWN0b3Jbdl0gPSAwXG4gICAgICAgICAgdmVjdG9yW3ddID0gZGVwdGggPiAwID8gMSA6IC0xXG5cbiAgICAgICAgICAvLyBub3cgYXBwbHkgdmVjdG9yIHRvIG5vcm1hbCBidWZmZXJcblxuICAgICAgICAgIG5vcm1hbHMucHVzaCh2ZWN0b3IueCwgdmVjdG9yLnksIHZlY3Rvci56KVxuXG4gICAgICAgICAgLy8gdXZzXG5cbiAgICAgICAgICB1dnMucHVzaChpeCAvIGdyaWRYKVxuICAgICAgICAgIHV2cy5wdXNoKGl5IC8gZ3JpZFkpXG5cbiAgICAgICAgICAvLyBjb3VudGVyc1xuXG4gICAgICAgICAgdmVydGV4Q291bnRlciArPSAxXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgLy8gaW5kaWNlc1xuXG4gICAgICAvLyAxLiB5b3UgbmVlZCB0aHJlZSBpbmRpY2VzIHRvIGRyYXcgYSBzaW5nbGUgZmFjZVxuICAgICAgLy8gMi4gYSBzaW5nbGUgc2VnbWVudCBjb25zaXN0cyBvZiB0d28gZmFjZXNcbiAgICAgIC8vIDMuIHNvIHdlIG5lZWQgdG8gZ2VuZXJhdGUgc2l4ICgyKjMpIGluZGljZXMgcGVyIHNlZ21lbnRcblxuICAgICAgZm9yIChsZXQgaXkgPSAwOyBpeSA8IGdyaWRZOyBpeSsrKSB7XG4gICAgICAgIGZvciAobGV0IGl4ID0gMDsgaXggPCBncmlkWDsgaXgrKykge1xuICAgICAgICAgIGNvbnN0IGEgPSBudW1iZXJPZlZlcnRpY2VzICsgaXggKyBncmlkWDEgKiBpeVxuICAgICAgICAgIGNvbnN0IGIgPSBudW1iZXJPZlZlcnRpY2VzICsgaXggKyBncmlkWDEgKiAoaXkgKyAxKVxuICAgICAgICAgIGNvbnN0IGMgPSBudW1iZXJPZlZlcnRpY2VzICsgKGl4ICsgMSkgKyBncmlkWDEgKiAoaXkgKyAxKVxuICAgICAgICAgIGNvbnN0IGQgPSBudW1iZXJPZlZlcnRpY2VzICsgKGl4ICsgMSkgKyBncmlkWDEgKiBpeVxuXG4gICAgICAgICAgLy8gZmFjZXNcblxuICAgICAgICAgIGluZGljZXMucHVzaChhLCBiLCBkKVxuICAgICAgICAgIGluZGljZXMucHVzaChiLCBjLCBkKVxuXG4gICAgICAgICAgLy8gdXBkYXRlIHRvdGFsIG51bWJlciBvZiB2ZXJ0aWNlc1xuXG4gICAgICAgICAgbnVtYmVyT2ZWZXJ0aWNlcyArPSB2ZXJ0ZXhDb3VudGVyXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBidWlsZFBsYW5lKCd6JywgJ3knLCAneCcsIC0xLCAtMSwgMiwgMiwgMiwgZGVwdGhTZWdtZW50cywgaGVpZ2h0U2VnbWVudHMpIC8vIHB4XG4gICAgYnVpbGRQbGFuZSgneicsICd5JywgJ3gnLCAxLCAtMSwgMiwgMiwgLTIsIGRlcHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzKSAvLyBueFxuICAgIGJ1aWxkUGxhbmUoJ3gnLCAneicsICd5JywgMSwgMSwgMiwgMiwgMiwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cykgLy8gcHlcbiAgICBidWlsZFBsYW5lKCd4JywgJ3onLCAneScsIDEsIC0xLCAyLCAyLCAtMiwgd2lkdGhTZWdtZW50cywgZGVwdGhTZWdtZW50cykgLy8gbnlcbiAgICBidWlsZFBsYW5lKCd4JywgJ3knLCAneicsIDEsIC0xLCAyLCAyLCAyLCB3aWR0aFNlZ21lbnRzLCBoZWlnaHRTZWdtZW50cykgLy8gcHpcbiAgICBidWlsZFBsYW5lKCd4JywgJ3knLCAneicsIC0xLCAtMSwgMiwgMiwgLTIsIHdpZHRoU2VnbWVudHMsIGhlaWdodFNlZ21lbnRzKSAvLyBuelxuXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoe1xuICAgICAgbmFtZTogJ3Bvc2l0aW9uJyxcbiAgICAgIHR5cGU6ICd2ZWMzZicsXG4gICAgICBidWZmZXJGb3JtYXQ6ICdmbG9hdDMyeDMnLFxuICAgICAgc2l6ZTogMyxcbiAgICAgIGFycmF5OiBuZXcgRmxvYXQzMkFycmF5KHZlcnRpY2VzKSxcbiAgICB9KVxuXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoe1xuICAgICAgbmFtZTogJ3V2JyxcbiAgICAgIHR5cGU6ICd2ZWMyZicsXG4gICAgICBidWZmZXJGb3JtYXQ6ICdmbG9hdDMyeDInLFxuICAgICAgc2l6ZTogMixcbiAgICAgIGFycmF5OiBuZXcgRmxvYXQzMkFycmF5KHV2cyksXG4gICAgfSlcblxuICAgIHRoaXMuc2V0QXR0cmlidXRlKHtcbiAgICAgIG5hbWU6ICdub3JtYWwnLFxuICAgICAgdHlwZTogJ3ZlYzNmJyxcbiAgICAgIGJ1ZmZlckZvcm1hdDogJ2Zsb2F0MzJ4MycsXG4gICAgICBzaXplOiAzLFxuICAgICAgYXJyYXk6IG5ldyBGbG9hdDMyQXJyYXkobm9ybWFscyksXG4gICAgfSlcblxuICAgIHRoaXMuc2V0SW5kZXhCdWZmZXIoe1xuICAgICAgYXJyYXk6IHRoaXMudXNlVWludDE2SW5kZXhBcnJheSA/IG5ldyBVaW50MTZBcnJheShpbmRpY2VzKSA6IG5ldyBVaW50MzJBcnJheShpbmRpY2VzKSxcbiAgICAgIGJ1ZmZlckZvcm1hdDogdGhpcy51c2VVaW50MTZJbmRleEFycmF5ID8gJ3VpbnQxNicgOiAndWludDMyJyxcbiAgICB9KVxuICB9XG59XG4iLCJpbXBvcnQgeyBJbmRleGVkR2VvbWV0cnkgfSBmcm9tICcuLi8uLi9jb3JlL2dlb21ldHJpZXMvSW5kZXhlZEdlb21ldHJ5J1xuaW1wb3J0IHsgVmVjMyB9IGZyb20gJy4uLy4uL21hdGgvVmVjMydcbmltcG9ydCB7IEdlb21ldHJ5QmFzZVBhcmFtcyB9IGZyb20gJy4uLy4uL3R5cGVzL0dlb21ldHJpZXMnXG5cbi8qKlxuICogUGFyYW1ldGVycyB1c2VkIHRvIGNyZWF0ZSBhIHtAbGluayBTcGhlcmVHZW9tZXRyeX1cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBTcGhlcmVHZW9tZXRyeVBhcmFtcyBleHRlbmRzIEdlb21ldHJ5QmFzZVBhcmFtcyB7XG4gIC8qKiBOdW1iZXIgb2YgaG9yaXpvbnRhbCBzZWdtZW50cyAqL1xuICB3aWR0aFNlZ21lbnRzPzogbnVtYmVyXG4gIC8qKiBOdW1iZXIgb2YgdmVydGljYWwgc2VnbWVudHMgKi9cbiAgaGVpZ2h0U2VnbWVudHM/OiBudW1iZXJcbiAgLyoqIEhvcml6b250YWwgc3RhcnRpbmcgYW5nbGUgKi9cbiAgcGhpU3RhcnQ/OiBudW1iZXJcbiAgLyoqIEhvcml6b250YWwgc3dlZXAgYW5nbGUgc2l6ZSAqL1xuICBwaGlMZW5ndGg/OiBudW1iZXJcbiAgLyoqIFZlcnRpY2FsIHN0YXJ0aW5nIGFuZ2xlICovXG4gIHRoZXRhU3RhcnQ/OiBudW1iZXJcbiAgLyoqIFZlcnRpY2FsIHN3ZWVwIGFuZ2xlIHNpemUgKi9cbiAgdGhldGFMZW5ndGg/OiBudW1iZXJcbn1cblxuLyoqXG4gKiBIZWxwZXIgdG8gZWFzaWx5IGNyZWF0ZSAzRCBzcGhlcmUgaW5kZXhlZCBnZW9tZXRyaWVzLlxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBqYXZhc2NyaXB0XG4gKiBjb25zdCBzcGhlcmVHZW9tZXRyeSA9IG5ldyBTcGhlcmVHZW9tZXRyeSgpXG4gKiBgYGBcbiAqL1xuZXhwb3J0IGNsYXNzIFNwaGVyZUdlb21ldHJ5IGV4dGVuZHMgSW5kZXhlZEdlb21ldHJ5IHtcbiAgY29uc3RydWN0b3IoXG4gICAge1xuICAgICAgd2lkdGhTZWdtZW50cyA9IDMyLFxuICAgICAgaGVpZ2h0U2VnbWVudHMgPSAxNixcbiAgICAgIHBoaVN0YXJ0ID0gMCxcbiAgICAgIHBoaUxlbmd0aCA9IE1hdGguUEkgKiAyLFxuICAgICAgdGhldGFTdGFydCA9IDAsXG4gICAgICB0aGV0YUxlbmd0aCA9IE1hdGguUEksXG4gICAgICBpbnN0YW5jZXNDb3VudCA9IDEsXG4gICAgICB2ZXJ0ZXhCdWZmZXJzID0gW10sXG4gICAgICB0b3BvbG9neSxcbiAgICB9ID0ge30gYXMgU3BoZXJlR2VvbWV0cnlQYXJhbXNcbiAgKSB7XG4gICAgc3VwZXIoeyB2ZXJ0aWNlc09yZGVyOiAnY2N3JywgdG9wb2xvZ3ksIGluc3RhbmNlc0NvdW50LCB2ZXJ0ZXhCdWZmZXJzIH0pXG5cbiAgICB0aGlzLnR5cGUgPSAnU3BoZXJlR2VvbWV0cnknXG5cbiAgICAvLyB0YWtlbiBmcm9tIHRocmVlanNcbiAgICAvLyBodHRwczovL2dpdGh1Yi5jb20vbXJkb29iL3RocmVlLmpzL2Jsb2IvZGV2L3NyYy9nZW9tZXRyaWVzL1NwaGVyZUdlb21ldHJ5LmpzXG4gICAgd2lkdGhTZWdtZW50cyA9IE1hdGgubWF4KDMsIE1hdGguZmxvb3Iod2lkdGhTZWdtZW50cykpXG4gICAgaGVpZ2h0U2VnbWVudHMgPSBNYXRoLm1heCgyLCBNYXRoLmZsb29yKGhlaWdodFNlZ21lbnRzKSlcblxuICAgIGNvbnN0IHJhZGl1cyA9IDFcbiAgICBjb25zdCB0aGV0YUVuZCA9IE1hdGgubWluKHRoZXRhU3RhcnQgKyB0aGV0YUxlbmd0aCwgTWF0aC5QSSlcblxuICAgIGxldCBpbmRleCA9IDBcbiAgICBjb25zdCBncmlkID0gW11cblxuICAgIGNvbnN0IHZlcnRleCA9IG5ldyBWZWMzKClcbiAgICBjb25zdCBub3JtYWwgPSBuZXcgVmVjMygpXG5cbiAgICAvLyBidWZmZXJzXG5cbiAgICBjb25zdCBpbmRpY2VzID0gW11cbiAgICBjb25zdCB2ZXJ0aWNlcyA9IFtdXG4gICAgY29uc3Qgbm9ybWFscyA9IFtdXG4gICAgY29uc3QgdXZzID0gW11cblxuICAgIC8vIGdlbmVyYXRlIHZlcnRpY2VzLCBub3JtYWxzIGFuZCB1dnNcblxuICAgIGZvciAobGV0IGl5ID0gMDsgaXkgPD0gaGVpZ2h0U2VnbWVudHM7IGl5KyspIHtcbiAgICAgIGNvbnN0IHZlcnRpY2VzUm93ID0gW11cblxuICAgICAgY29uc3QgdiA9IGl5IC8gaGVpZ2h0U2VnbWVudHNcblxuICAgICAgLy8gc3BlY2lhbCBjYXNlIGZvciB0aGUgcG9sZXNcblxuICAgICAgbGV0IHVPZmZzZXQgPSAwXG5cbiAgICAgIGlmIChpeSA9PT0gMCAmJiB0aGV0YVN0YXJ0ID09PSAwKSB7XG4gICAgICAgIHVPZmZzZXQgPSAwLjUgLyB3aWR0aFNlZ21lbnRzXG4gICAgICB9IGVsc2UgaWYgKGl5ID09PSBoZWlnaHRTZWdtZW50cyAmJiB0aGV0YUVuZCA9PT0gTWF0aC5QSSkge1xuICAgICAgICB1T2Zmc2V0ID0gLTAuNSAvIHdpZHRoU2VnbWVudHNcbiAgICAgIH1cblxuICAgICAgZm9yIChsZXQgaXggPSAwOyBpeCA8PSB3aWR0aFNlZ21lbnRzOyBpeCsrKSB7XG4gICAgICAgIGNvbnN0IHUgPSBpeCAvIHdpZHRoU2VnbWVudHNcblxuICAgICAgICAvLyB2ZXJ0ZXhcblxuICAgICAgICB2ZXJ0ZXgueCA9IC1yYWRpdXMgKiBNYXRoLmNvcyhwaGlTdGFydCArIHUgKiBwaGlMZW5ndGgpICogTWF0aC5zaW4odGhldGFTdGFydCArIHYgKiB0aGV0YUxlbmd0aClcbiAgICAgICAgdmVydGV4LnkgPSByYWRpdXMgKiBNYXRoLmNvcyh0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoKVxuICAgICAgICB2ZXJ0ZXgueiA9IHJhZGl1cyAqIE1hdGguc2luKHBoaVN0YXJ0ICsgdSAqIHBoaUxlbmd0aCkgKiBNYXRoLnNpbih0aGV0YVN0YXJ0ICsgdiAqIHRoZXRhTGVuZ3RoKVxuXG4gICAgICAgIHZlcnRpY2VzLnB1c2godmVydGV4LngsIHZlcnRleC55LCB2ZXJ0ZXgueilcblxuICAgICAgICAvLyBub3JtYWxcblxuICAgICAgICBub3JtYWwuY29weSh2ZXJ0ZXgpLm5vcm1hbGl6ZSgpXG4gICAgICAgIG5vcm1hbHMucHVzaChub3JtYWwueCwgbm9ybWFsLnksIG5vcm1hbC56KVxuXG4gICAgICAgIC8vIHV2XG5cbiAgICAgICAgdXZzLnB1c2godSArIHVPZmZzZXQsIHYpXG5cbiAgICAgICAgdmVydGljZXNSb3cucHVzaChpbmRleCsrKVxuICAgICAgfVxuXG4gICAgICBncmlkLnB1c2godmVydGljZXNSb3cpXG4gICAgfVxuXG4gICAgLy8gaW5kaWNlc1xuXG4gICAgZm9yIChsZXQgaXkgPSAwOyBpeSA8IGhlaWdodFNlZ21lbnRzOyBpeSsrKSB7XG4gICAgICBmb3IgKGxldCBpeCA9IDA7IGl4IDwgd2lkdGhTZWdtZW50czsgaXgrKykge1xuICAgICAgICBjb25zdCBhID0gZ3JpZFtpeV1baXggKyAxXVxuICAgICAgICBjb25zdCBiID0gZ3JpZFtpeV1baXhdXG4gICAgICAgIGNvbnN0IGMgPSBncmlkW2l5ICsgMV1baXhdXG4gICAgICAgIGNvbnN0IGQgPSBncmlkW2l5ICsgMV1baXggKyAxXVxuXG4gICAgICAgIGlmIChpeSAhPT0gMCB8fCB0aGV0YVN0YXJ0ID4gMCkgaW5kaWNlcy5wdXNoKGEsIGIsIGQpXG4gICAgICAgIGlmIChpeSAhPT0gaGVpZ2h0U2VnbWVudHMgLSAxIHx8IHRoZXRhRW5kIDwgTWF0aC5QSSkgaW5kaWNlcy5wdXNoKGIsIGMsIGQpXG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoe1xuICAgICAgbmFtZTogJ3Bvc2l0aW9uJyxcbiAgICAgIHR5cGU6ICd2ZWMzZicsXG4gICAgICBidWZmZXJGb3JtYXQ6ICdmbG9hdDMyeDMnLFxuICAgICAgc2l6ZTogMyxcbiAgICAgIGFycmF5OiBuZXcgRmxvYXQzMkFycmF5KHZlcnRpY2VzKSxcbiAgICB9KVxuXG4gICAgdGhpcy5zZXRBdHRyaWJ1dGUoe1xuICAgICAgbmFtZTogJ3V2JyxcbiAgICAgIHR5cGU6ICd2ZWMyZicsXG4gICAgICBidWZmZXJGb3JtYXQ6ICdmbG9hdDMyeDInLFxuICAgICAgc2l6ZTogMixcbiAgICAgIGFycmF5OiBuZXcgRmxvYXQzMkFycmF5KHV2cyksXG4gICAgfSlcblxuICAgIHRoaXMuc2V0QXR0cmlidXRlKHtcbiAgICAgIG5hbWU6ICdub3JtYWwnLFxuICAgICAgdHlwZTogJ3ZlYzNmJyxcbiAgICAgIGJ1ZmZlckZvcm1hdDogJ2Zsb2F0MzJ4MycsXG4gICAgICBzaXplOiAzLFxuICAgICAgYXJyYXk6IG5ldyBGbG9hdDMyQXJyYXkobm9ybWFscyksXG4gICAgfSlcblxuICAgIHRoaXMuc2V0SW5kZXhCdWZmZXIoe1xuICAgICAgYXJyYXk6IHRoaXMudXNlVWludDE2SW5kZXhBcnJheSA/IG5ldyBVaW50MTZBcnJheShpbmRpY2VzKSA6IG5ldyBVaW50MzJBcnJheShpbmRpY2VzKSxcbiAgICAgIGJ1ZmZlckZvcm1hdDogdGhpcy51c2VVaW50MTZJbmRleEFycmF5ID8gJ3VpbnQxNicgOiAndWludDMyJyxcbiAgICB9KVxuICB9XG59XG4iXSwibmFtZXMiOlsiaXNSZW5kZXJlciIsImlzQ2FtZXJhUmVuZGVyZXIiLCJpc0N1cnRhaW5zUmVuZGVyZXIiLCJnZW5lcmF0ZU1pcHMiLCJhcnJheVZpZXciLCJ2YWx1ZSIsImJpbmRpbmdLZXkiLCJidWZmZXJFbGVtZW50IiwiX19wcml2YXRlQWRkIiwiX19wcml2YXRlR2V0IiwiX19wcml2YXRlU2V0IiwiX2F1dG9SZW5kZXIiLCJhdHRyaWJ1dGUiLCJET01NZXNoUGFyYW1zIiwiZXhpc3RpbmdTYW1wbGVyIiwiZGVsdGEiLCJjb250YWluZXIiXSwibWFwcGluZ3MiOiJBQUlPLE1BQU0sZUFBZSxNQUFjO0FBQ3hDLEVBQUEsT0FBTyxzQ0FBdUMsQ0FBQSxPQUFBLENBQVEsT0FBUyxFQUFBLENBQUMsQ0FBTSxLQUFBO0FBQ3BF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LENBQUcsRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxVQUFXLEVBQUE7QUFBQSxJQUMxRSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxDQUFHLEVBQUEsSUFBQSxFQUFNLENBQUcsRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxXQUFZLEVBQUE7QUFBQSxJQUMzRSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxDQUFHLEVBQUEsSUFBQSxFQUFNLENBQUcsRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxXQUFZLEVBQUE7QUFBQSxJQUMzRSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxFQUFJLEVBQUEsSUFBQSxFQUFNLEVBQUksRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxVQUFXLEVBQUE7QUFBQSxJQUM1RSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxFQUFJLEVBQUEsSUFBQSxFQUFNLEVBQUksRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxXQUFZLEVBQUE7QUFBQSxJQUM3RSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxFQUFJLEVBQUEsSUFBQSxFQUFNLEVBQUksRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxZQUFhLEVBQUE7QUFBQSxJQUM5RSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxDQUFHLEVBQUEsSUFBQSxFQUFNLENBQUcsRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxXQUFZLEVBQUE7QUFBQSxJQUMzRSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxFQUFJLEVBQUEsSUFBQSxFQUFNLEVBQUksRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxVQUFXLEVBQUE7QUFBQSxJQUM1RSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxFQUFJLEVBQUEsSUFBQSxFQUFNLEVBQUksRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxXQUFZLEVBQUE7QUFBQSxJQUM3RSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxFQUFJLEVBQUEsSUFBQSxFQUFNLEVBQUksRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxZQUFhLEVBQUE7QUFBQSxJQUM5RSxLQUFBLEVBQU8sRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxDQUFHLEVBQUEsSUFBQSxFQUFNLENBQUcsRUFBQSxJQUFBLEVBQU0sS0FBTyxFQUFBLElBQUEsRUFBTSxXQUFZLEVBQUE7QUFBQTtBQUFBLElBRzNFLE9BQUEsRUFBUyxFQUFFLFdBQUEsRUFBYSxDQUFHLEVBQUEsS0FBQSxFQUFPLENBQUcsRUFBQSxJQUFBLEVBQU0sRUFBSSxFQUFBLElBQUEsRUFBTSxLQUFPLEVBQUEsSUFBQSxFQUFNLFlBQWEsRUFBQTtBQUFBLElBQy9FLE9BQUEsRUFBUyxFQUFFLFdBQUEsRUFBYSxDQUFHLEVBQUEsS0FBQSxFQUFPLENBQUcsRUFBQSxJQUFBLEVBQU0sQ0FBRyxFQUFBLElBQUEsRUFBTSxLQUFPLEVBQUEsSUFBQSxFQUFNLFdBQVksRUFBQTtBQUFBLElBQzdFLE9BQUEsRUFBUyxFQUFFLFdBQUEsRUFBYSxDQUFHLEVBQUEsS0FBQSxFQUFPLENBQUcsRUFBQSxJQUFBLEVBQU0sRUFBSSxFQUFBLElBQUEsRUFBTSxLQUFPLEVBQUEsSUFBQSxFQUFNLFlBQWEsRUFBQTtBQUFBLElBQy9FLE9BQUEsRUFBUyxFQUFFLFdBQUEsRUFBYSxDQUFHLEVBQUEsS0FBQSxFQUFPLENBQUcsRUFBQSxJQUFBLEVBQU0sRUFBSSxFQUFBLElBQUEsRUFBTSxLQUFPLEVBQUEsSUFBQSxFQUFNLFdBQVksRUFBQTtBQUFBLElBQzlFLE9BQUEsRUFBUyxFQUFFLFdBQUEsRUFBYSxDQUFHLEVBQUEsS0FBQSxFQUFPLENBQUcsRUFBQSxJQUFBLEVBQU0sRUFBSSxFQUFBLElBQUEsRUFBTSxLQUFPLEVBQUEsSUFBQSxFQUFNLFlBQWEsRUFBQTtBQUFBLElBQy9FLE9BQUEsRUFBUyxFQUFFLFdBQUEsRUFBYSxDQUFHLEVBQUEsS0FBQSxFQUFPLENBQUcsRUFBQSxJQUFBLEVBQU0sRUFBSSxFQUFBLElBQUEsRUFBTSxLQUFPLEVBQUEsSUFBQSxFQUFNLFdBQVksRUFBQTtBQUFBLElBQzlFLFNBQVMsRUFBRSxXQUFBLEVBQWEsQ0FBRyxFQUFBLEtBQUEsRUFBTyxJQUFJLElBQU0sRUFBQSxFQUFBLEVBQUksR0FBSyxFQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsRUFBRyxJQUFNLEVBQUEsS0FBQSxFQUFPLE1BQU0sWUFBYSxFQUFBO0FBQUEsSUFDN0YsU0FBUyxFQUFFLFdBQUEsRUFBYSxDQUFHLEVBQUEsS0FBQSxFQUFPLEdBQUcsSUFBTSxFQUFBLEVBQUEsRUFBSSxHQUFLLEVBQUEsQ0FBQyxHQUFHLENBQUMsQ0FBQSxFQUFHLElBQU0sRUFBQSxLQUFBLEVBQU8sTUFBTSxXQUFZLEVBQUE7QUFBQSxJQUMzRixTQUFTLEVBQUUsV0FBQSxFQUFhLEVBQUksRUFBQSxLQUFBLEVBQU8sSUFBSSxJQUFNLEVBQUEsRUFBQSxFQUFJLEdBQUssRUFBQSxDQUFDLEdBQUcsQ0FBQyxDQUFBLEVBQUcsSUFBTSxFQUFBLEtBQUEsRUFBTyxNQUFNLFlBQWEsRUFBQTtBQUFBLElBQzlGLFNBQVMsRUFBRSxXQUFBLEVBQWEsRUFBSSxFQUFBLEtBQUEsRUFBTyxHQUFHLElBQU0sRUFBQSxFQUFBLEVBQUksR0FBSyxFQUFBLENBQUMsR0FBRyxDQUFDLENBQUEsRUFBRyxJQUFNLEVBQUEsS0FBQSxFQUFPLE1BQU0sV0FBWSxFQUFBO0FBQUEsSUFDNUYsU0FBUyxFQUFFLFdBQUEsRUFBYSxFQUFJLEVBQUEsS0FB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SUFBTyxHQUFBLElBQUEsQ0FBQTtBQUN0RCxNQUFBLElBQUEsQ0FBSyxTQUFTLENBQUMsQ0FBQSxHQUFJLE9BQU8sSUFBTyxHQUFBLElBQUEsR0FBTyxPQUFPLElBQU8sR0FBQSxJQUFBLENBQUE7QUFDdEQsTUFBQSxJQUFBLENBQUssU0FBUyxDQUFDLENBQUEsR0FBSSxPQUFPLElBQU8sR0FBQSxJQUFBLEdBQU8sT0FBTyxJQUFPLEdBQUEsSUFBQSxDQUFBO0FBQUEsS0FDeEQsTUFBQSxJQUFXLElBQUssQ0FBQSxTQUFBLEtBQWMsS0FBTyxFQUFBO0FBQ25DLE1BQUEsSUFBQSxDQUFLLFNBQVMsQ0FBQyxDQUFBLEdBQUksT0FBTyxJQUFPLEdBQUEsSUFBQSxHQUFPLE9BQU8sSUFBTyxHQUFBLElBQUEsQ0FBQTtBQUN0RCxNQUFBLElBQUEsQ0FBSyxTQUFTLENBQUMsQ0FBQSxHQUFJLE9BQU8sSUFBTyxHQUFBLElBQUEsR0FBTyxPQUFPLElBQU8sR0FBQSxJQUFBLENBQUE7QUFDdEQsTUFBQSxJQUFBLENBQUssU0FBUyxDQUFDLENBQUEsR0FBSSxPQUFPLElBQU8sR0FBQSxJQUFBLEdBQU8sT0FBTyxJQUFPLEdBQUEsSUFBQSxDQUFBO0FBQ3RELE1BQUEsSUFBQSxDQUFLLFNBQVMsQ0FBQyxDQUFBLEdBQUksT0FBTyxJQUFPLEdBQUEsSUFBQSxHQUFPLE9BQU8sSUFBTyxHQUFBLElBQUEsQ0FBQTtBQUFBLEtBQ3hELE1BQUEsSUFBVyxJQUFLLENBQUEsU0FBQSxLQUFjLEtBQU8sRUFBQTtBQUNuQyxNQUFBLElBQUEsQ0FBSyxTQUFTLENBQUMsQ0FBQSxHQUFJLE9BQU8sSUFBTyxHQUFBLElBQUEsR0FBTyxPQUFPLElBQU8sR0FBQSxJQUFBLENBQUE7QUFDdEQsTUFBQSxJQUFBLENBQUssU0FBUyxDQUFDLENBQUEsR0FBSSxPQUFPLElBQU8sR0FBQSxJQUFBLEdBQU8sT0FBTyxJQUFPLEdBQUEsSUFBQSxDQUFBO0FBQ3RELE1BQUEsSUFBQSxDQUFLLFNBQVMsQ0FBQyxDQUFBLEdBQUksT0FBTyxJQUFP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UyxDQUFBLENBQUMsQ0FBSyxHQUFBLENBQUEsR0FBQSxHQUFNLEdBQU8sSUFBQSxDQUFBLENBQUE7QUFBQSxLQUN4QixNQUFBLElBQUEsR0FBQSxHQUFNLEdBQU8sSUFBQSxHQUFBLEdBQU0sR0FBSyxFQUFBO0FBQ2pDLE1BQUEsTUFBTSxJQUFJLENBQU0sR0FBQSxJQUFBLENBQUssS0FBSyxDQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBRyxDQUFBLENBQUE7QUFFL0MsTUFBQSxJQUFBLENBQUssUUFBUyxDQUFBLENBQUMsQ0FBSyxHQUFBLENBQUEsR0FBQSxHQUFNLEdBQU8sSUFBQSxDQUFBLENBQUE7QUFDakMsTUFBSyxJQUFBLENBQUEsUUFBQSxDQUFTLENBQUMsQ0FBQSxHQUFJLElBQU8sR0FBQSxDQUFBLENBQUE7QUFDMUIsTUFBQSxJQUFBLENBQUssUUFBUyxDQUFBLENBQUMsQ0FBSyxHQUFBLENBQUEsR0FBQSxHQUFNLEdBQU8sSUFBQSxDQUFBLENBQUE7QUFDakMsTUFBQSxJQUFBLENBQUssUUFBUyxDQUFBLENBQUMsQ0FBSyxHQUFBLENBQUEsR0FBQSxHQUFNLEdBQU8sSUFBQSxDQUFBLENBQUE7QUFBQSxLQUNuQyxNQUFBLElBQVcsTUFBTSxHQUFLLEVBQUE7QUFDcEIsTUFBQSxNQUFNLElBQUksQ0FBTSxHQUFBLElBQUEsQ0FBSyxLQUFLLENBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFHLENBQUEsQ0FBQTtBQUUvQyxNQUFBLElBQUEsQ0FBSyxRQUFTLENBQUEsQ0FBQyxDQUFLLEdBQUEsQ0FBQSxHQUFBLEdBQU0sR0FBTyxJQUFBLENBQUEsQ0FBQTtBQUNqQyxNQUFBLElBQUEsQ0FBSyxRQUFTLENBQUEsQ0FBQyxDQUFLLEdBQUEsQ0FBQSxHQUFBLEdBQU0sR0FBTyxJQUFBLENBQUEsQ0FBQTtBQUNqQyxNQUFLLElBQUEsQ0FBQSxRQUFBLENBQVMsQ0FBQyxDQUFBLEdBQUksSUFBTyxHQUFBLENBQUEsQ0FBQTtBQUMxQixNQUFBLElBQUEsQ0FBSyxRQUFTLENBQUEsQ0FBQyxDQUFLLEdBQUEsQ0FBQSxHQUFBLEdBQU0sR0FBTyxJQUFBLENBQUEsQ0FBQTtBQUFBLEtBQzVCLE1BQUE7QUFDTCxNQUFBLE1BQU0sSUFBSSxDQUFNLEdBQUEsSUFBQSxDQUFLLEtBQUssQ0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQUcsQ0FBQSxDQUFBO0FBRS9DLE1BQUEsSUFBQSxDQUFLLFFBQVMsQ0FBQSxDQUFDLENBQUssR0FBQSxDQUFBLEdBQUEsR0FBTSxHQUFPLElBQUEsQ0FBQSxDQUFBO0FBQ2pDLE1BQUEsSUFBQSxDQUFLLFFBQVMsQ0FBQSxDQUFDLENBQUssR0FBQSxDQUFBLEdBQUEsR0FBTSxHQUFPLElBQUEsQ0FBQSxDQUFBO0FBQ2pDLE1BQUEsSUFBQSxDQUFLLFFBQVMsQ0FBQSxDQUFDLENBQUssR0FBQSxDQUFBLEdBQUEsR0FBTSxHQUFPLElBQUEsQ0FBQSxDQUFBO0FBQ2pDLE1BQUssSUFBQSxDQUFBLFFBQUEsQ0FBUyxDQUFDLENBQUEsR0FBSSxJQUFPLEdBQUEsQ0FBQSxDQUFBO0FBQUEsS0FDNUI7QUFFQSxJQUFPLE9BQUEsSUFBQSxDQUFBO0FBQUEsR0FDVDtBQUNGOztBQ2pPTyxNQUFNLElBQUssQ0FBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVdoQixXQUFBLENBQVksUUFBeUIsR0FBQSxJQUFJLFlBQWEsQ0FBQTtBQUFBLElBQ3BELENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUNULENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUNULENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUNULENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxHQUNWLENBQUcsRUFBQTtBQUNGLElBQUEsSUFBQSxDQUFLLElBQU8sR0FBQSxNQUFBLENBQUE7QUFDWixJQUFBLElBQUEsQ0FBSyxRQUFXLEdBQUEsUUFBQSxDQUFBO0FBQUEsR0FDbEI7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBd0JBLElBQ0UsR0FDQSxFQUFBLEdBQUEsRUFDQSxHQUNBLEVBQUEsR0FBQSxFQUNBLEtBQ0EsR0FDQSxFQUFBLEdBQUEsRUFDQSxHQUNBLEVBQUEsR0FBQSxFQUNBLEtBQ0EsR0FDQSxFQUFBLEdBQUEsRUFDQSxHQUNBLEVBQUEsR0FBQSxFQUNBLEtBQ0EsR0FDTSxFQUFBO0FBQ04sSUFBQSxNQUFNLEtBQUssSUFBSyxDQUFBLFFBQUEsQ0FBQTtBQUVoQixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUksR0FBQSxHQUFBLENBQUE7QUFDUixJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQUksR0FBQSxHQUFBLENBQUE7QUFDVCxJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQUksR0FBQSxHQUFBLENBQUE7QUFDVCxJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQUksR0FBQSxHQUFBLENBQUE7QUFDVCxJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQUksR0FBQSxHQUFBLENBQUE7QUFDVCxJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQUksR0FBQSxHQUFBLENBQUE7QUFDVCxJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQUksR0FBQSxHQUFBLENBQUE7QUFFVCxJQUFPLE9BQUEsSUFBQSxDQUFBO0FBQUEsR0FDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxRQUFpQixHQUFBO0FBRWYsSUFBSyxJQUFBLENBQUEsR0FBQTtBQUFBLE1BQ0gsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQ1QsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQ1QsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQ1QsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLE1BQUcsQ0FBQTtBQUFBLEtBQ1gsQ0FBQTtBQUVBLElBQU8sT0FBQSxJQUFBLENBQUE7QUFBQSxHQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxZQUFBLENBQWEsS0FBaUMsR0FBQSxJQUFJLFlBQWEsQ0FBQTtBQUFBLElBQzdELENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUNULENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUNULENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUNULENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxJQUFHLENBQUE7QUFBQSxHQUNWLENBQVMsRUFBQTtBQUNSLElBQUEsS0FBQSxJQUFTLElBQUksQ0FBRyxFQUFBLENBQUEsR0FBSSxJQUFLLENBQUEsUUFBQSxDQUFTLFFBQVEsQ0FBSyxFQUFBLEVBQUE7QUFDN0MsTUFBQSxJQUFBLENBQUssUUFBUyxDQUFBLENBQUMsQ0FBSSxHQUFBLEtBQUEsQ0FBTSxDQUFDLENBQUEsQ0FBQTtBQUFBLEtBQzVCO0FBRUEsSUFBTyxPQUFBLElBQUEsQ0FBQTtBQUFBLEdBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxJQUFLLENBQUEsTUFBQSxHQUFlLElBQUksSUFBQSxFQUFjLEVBQUE7QUFDcEMsSUFBQSxNQUFNLFFBQVEsTUFBTyxDQUFBLFFBQUEsQ0FBQTtBQUNyQixJQUFBLElBQUEsQ0FBSyxRQUFTLENBQUEsQ0FBQyxDQUFJLEdBQUEsS0FBQSxDQUFNLENBQUMsQ0FBQSxDQUFBO0FBQzFCLElBQUEsSUFBQSxDQUFLLFFBQVMsQ0FBQSxDQUFDLENBQUksR0FBQSxLQUFBLENBQU0sQ0FBQyxDQUFBLENBQUE7QUFDMUIsSUFBQSxJQUFBLENBQUssUUFBUyxDQUFBLENBQUMsQ0FBSSxHQUFBLEtBQUEsQ0FBTSxDQUFDLENBQUEsQ0FBQTtBQUMxQixJQUFBLElBQUEsQ0FBSyxRQUFTLENBQUEsQ0FBQyxDQUFJLEdBQUEsS0FBQSxDQUFNLENBQUMsQ0FBQSxDQUFBO0FBQzFCLElBQUEsSUFBQSxDQUFLLFFBQVMsQ0FBQSxDQUFDLENBQUksR0FBQSxLQUFBLENBQU0sQ0FBQyxDQUFBLENBQUE7QUFDMUIsSUFBQSxJQUFBLENBQUssUUFBUyxDQUFBLENBQUMsQ0FBSSxHQUFBLEtBQUEsQ0FBTSxDQUFDLENBQUEsQ0FBQTtBQUMxQixJQUFBLElBQUEsQ0FBSyxRQUFTLENBQUEsQ0FBQyxDQUFJLEdBQUEsS0FBQSxDQUFNLENBQUMsQ0FBQSxDQUFBO0FBQzFCLElBQUEsSUFBQSxDQUFLLFFBQVMsQ0FBQSxDQUFDLENBQUksR0FBQSxLQUFBLENBQU0sQ0FBQyxDQUFBLENBQUE7QUFDMUIsSUFBQSxJQUFBLENBQUssUUFBUyxDQUFBLENBQUMsQ0FBSSxHQUFBLEtBQUEsQ0FBTSxDQUFDLENBQUEsQ0FBQTtBQUMxQixJQUFBLElBQUEsQ0FBSyxRQUFTLENBQUEsQ0FBQyxDQUFJLEdBQUEsS0FBQSxDQUFNLENBQUMsQ0FBQSxDQUFBO0FBQzFCLElBQUEsSUFBQSxDQUFLLFFBQVMsQ0FBQSxFQUFFLENBQUksR0FBQSxLQUFBLENBQU0sRUFBRSxDQUFBLENBQUE7QUFDNUIsSUFBQSxJQUFBLENBQUssUUFBUyxDQUFBLEVBQUUsQ0FBSSxHQUFBLEtBQUEsQ0FBTSxFQUFFLENBQUEsQ0FBQTtBQUM1QixJQUFBLElBQUEsQ0FBSyxRQUFTLENBQUEsRUFBRSxDQUFJLEdBQUEsS0FBQSxDQUFNLEVBQUUsQ0FBQSxDQUFBO0FBQzVCLElBQUEsSUFBQSxDQUFLLFFBQVMsQ0FBQSxFQUFFLENBQUksR0FBQSxLQUFBLENBQU0sRUFBRSxDQUFBLENBQUE7QUFDNUIsSUFBQSxJQUFBLENBQUssUUFBUyxDQUFBLEVBQUUsQ0FBSSxHQUFBLEtBQUEsQ0FBTSxFQUFFLENBQUEsQ0FBQTtBQUM1QixJQUFBLElBQUEsQ0FBSyxRQUFTLENBQUEsRUFBRSxDQUFJLEdBQUEsS0FBQSxDQUFNLEVBQUUsQ0FBQSxDQUFBO0FBRTVCLElBQU8sT0FBQSxJQUFBLENBQUE7QUFBQSxHQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU1BLEtBQWMsR0FBQTtBQUNaLElBQUEsT0FBTyxJQUFJLElBQUEsRUFBTyxDQUFBLElBQUEsQ0FBSyxJQUFJLENBQUEsQ0FBQTtBQUFBLEdBQzdCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsUUFBUyxDQUFBLE1BQUEsR0FBZSxJQUFJLElBQUEsRUFBYyxFQUFBO0FBQ3hDLElBQU8sT0FBQSxJQUFBLENBQUssZ0JBQWlCLENBQUEsSUFBQSxFQUFNLE1BQU0sQ0FBQSxDQUFBO0FBQUEsR0FDM0M7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFPQSxXQUFZLENBQUEsTUFBQSxHQUFlLElBQUksSUFBQSxFQUFjLEVBQUE7QUFDM0MsSUFBTyxPQUFBLElBQUEsQ0FBSyxnQkFBaUIsQ0FBQSxNQUFBLEVBQVEsSUFBSSxDQUFBLENBQUE7QUFBQSxHQUMzQztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBUUEsZ0JBQUEsQ0FBaUIsSUFBVSxJQUFJLElBQUEsSUFBUSxDQUFVLEdBQUEsSUFBSSxNQUFjLEVBQUE7QUFDakUsSUFBQSxNQUFNLEtBQUssQ0FBRSxDQUFBLFFBQUEsQ0FBQTtBQUNiLElBQUEsTUFBTSxLQUFLLENBQUUsQ0FBQSxRQUFBLENBQUE7QUFDYixJQUFBLE1BQU0sS0FBSyxJQUFLLENBQUEsUUFBQSxDQUFBO0FBRWhCLElBQUEsTUFBTSxHQUFNLEdBQUEsRUFBQSxDQUFHLENBQUMsQ0FBQSxFQUNkLE1BQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxFQUFHLENBQUEsQ0FBQyxDQUNWLEVBQUEsR0FBQSxHQUFNLEdBQUcsRUFBRSxDQUFBLENBQUE7QUFDYixJQUFBLE1BQU0sR0FBTSxHQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUEsRUFDZCxNQUFNLEVBQUcsQ0FBQSxDQUFDLENBQ1YsRUFBQSxHQUFBLEdBQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxHQUFHLEVBQUUsQ0FBQSxDQUFBO0FBQ2IsSUFBQSxNQUFNLEdBQU0sR0FBQSxFQUFBLENBQUcsQ0FBQyxDQUFBLEVBQ2QsTUFBTSxFQUFHLENBQUEsQ0FBQyxDQUNWLEVBQUEsR0FBQSxHQUFNLEVBQUcsQ0FBQSxFQUFFLENBQ1gsRUFBQSxHQUFBLEdBQU0sR0FBRyxFQUFFLENBQUEsQ0FBQTtBQUNiLElBQUEsTUFBTSxHQUFNLEdBQUEsRUFBQSxDQUFHLENBQUMsQ0FBQSxFQUNkLE1BQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxFQUFHLENBQUEsRUFBRSxDQUNYLEVBQUEsR0FBQSxHQUFNLEdBQUcsRUFBRSxDQUFBLENBQUE7QUFFYixJQUFBLE1BQU0sR0FBTSxHQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUEsRUFDZCxNQUFNLEVBQUcsQ0FBQSxDQUFDLENBQ1YsRUFBQSxHQUFBLEdBQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxHQUFHLEVBQUUsQ0FBQSxDQUFBO0FBQ2IsSUFBQSxNQUFNLEdBQU0sR0FBQSxFQUFBLENBQUcsQ0FBQyxDQUFBLEVBQ2QsTUFBTSxFQUFHLENBQUEsQ0FBQyxDQUNWLEVBQUEsR0FBQSxHQUFNLEVBQUcsQ0FBQSxDQUFDLENBQ1YsRUFBQSxHQUFBLEdBQU0sR0FBRyxFQUFFLENBQUEsQ0FBQTtBQUNiLElBQUEsTUFBTSxHQUFNLEdBQUEsRUFBQSxDQUFHLENBQUMsQ0FBQSxFQUNkLE1BQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxFQUFHLENBQUEsRUFBRSxDQUNYLEVBQUEsR0FBQSxHQUFNLEdBQUcsRUFBRSxDQUFBLENBQUE7QUFDYixJQUFBLE1BQU0sR0FBTSxHQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUEsRUFDZCxNQUFNLEVBQUcsQ0FBQSxDQUFDLENBQ1YsRUFBQSxHQUFBLEdBQU0sRUFBRyxDQUFBLEVBQUUsQ0FDWCxFQUFBLEdBQUEsR0FBTSxHQUFHLEVBQUUsQ0FBQSxDQUFBO0FBRWIsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUNsRCxJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQ2xELElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDbEQsSUFBRyxFQUFBLENBQUEsRUFBRSxJQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUVuRCxJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQ2xELElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDbEQsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUNsRCxJQUFHLEVBQUEsQ0FBQSxFQUFFLElBQUksR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBRW5ELElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDbEQsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUNsRCxJQUFHLEVBQUEsQ0FBQSxFQUFFLElBQUksR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQ25ELElBQUcsRUFBQSxDQUFBLEVBQUUsSUFBSSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFFbkQsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUNsRCxJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQ2xELElBQUcsRUFBQSxDQUFBLEVBQUUsSUFBSSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDbkQsSUFBRyxFQUFBLENBQUEsRUFBRSxJQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUVuRCxJQUFPLE9BQUEsSUFBQSxDQUFBO0FBQUEsR0FDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLG9CQUFxQixDQUFBLE1BQUEsR0FBZSxJQUFJLElBQUEsRUFBYyxFQUFBO0FBT3BELElBQUEsTUFBTSxHQUFNLEdBQUEsQ0FBQSxDQUFBO0FBQ1osSUFBQSxNQUFNLEdBQU0sR0FBQSxDQUFBLENBQUE7QUFDWixJQUFBLE1BQU0sR0FBTSxHQUFBLENBQUEsQ0FBQTtBQUNaLElBQUEsTUFBTSxHQUFNLEdBQUEsQ0FBQSxDQUFBO0FBR1osSUFBQSxNQUFNLE1BQU0sTUFBTyxDQUFBLENBQUEsQ0FBQTtBQUNuQixJQUFBLE1BQU0sTUFBTSxNQUFPLENBQUEsQ0FBQSxDQUFBO0FBQ25CLElBQUEsTUFBTSxNQUFNLE1BQU8sQ0FBQSxDQUFBLENBQUE7QUFFbkIsSUFBQSxNQUFNLEtBQUssSUFBSyxDQUFBLFFBQUEsQ0FBQTtBQUNoQixJQUFBLE1BQU0sS0FBSyxJQUFLLENBQUEsUUFBQSxDQUFBO0FBRWhCLElBQUEsTUFBTSxHQUFNLEdBQUEsRUFBQSxDQUFHLENBQUMsQ0FBQSxFQUNkLE1BQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxFQUFHLENBQUEsQ0FBQyxDQUNWLEVBQUEsR0FBQSxHQUFNLEdBQUcsRUFBRSxDQUFBLENBQUE7QUFDYixJQUFBLE1BQU0sR0FBTSxHQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUEsRUFDZCxNQUFNLEVBQUcsQ0FBQSxDQUFDLENBQ1YsRUFBQSxHQUFBLEdBQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxHQUFHLEVBQUUsQ0FBQSxDQUFBO0FBQ2IsSUFBQSxNQUFNLEdBQU0sR0FBQSxFQUFBLENBQUcsQ0FBQyxDQUFBLEVBQ2QsTUFBTSxFQUFHLENBQUEsQ0FBQyxDQUNWLEVBQUEsR0FBQSxHQUFNLEVBQUcsQ0FBQSxFQUFFLENBQ1gsRUFBQSxHQUFBLEdBQU0sR0FBRyxFQUFFLENBQUEsQ0FBQTtBQUNiLElBQUEsTUFBTSxHQUFNLEdBQUEsRUFBQSxDQUFHLENBQUMsQ0FBQSxFQUNkLE1BQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxFQUFHLENBQUEsRUFBRSxDQUNYLEVBQUEsR0FBQSxHQUFNLEdBQUcsRUFBRSxDQUFBLENBQUE7QUFFYixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUEsR0FBSSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDMUIsSUFBQSxFQUFBLENBQUcsQ0FBQyxDQUFBLEdBQUksR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQzFCLElBQUEsRUFBQSxDQUFHLENBQUMsQ0FBQSxHQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUMxQixJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQUEsR0FBSSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFFM0IsSUFBQSxFQUFBLENBQUcsQ0FBQyxDQUFBLEdBQUksR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQzFCLElBQUEsRUFBQSxDQUFHLENBQUMsQ0FBQSxHQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUMxQixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUEsR0FBSSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDMUIsSUFBQSxFQUFBLENBQUcsRUFBRSxDQUFBLEdBQUksR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBRTNCLElBQUEsRUFBQSxDQUFHLENBQUMsQ0FBQSxHQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUMxQixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUEsR0FBSSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDMUIsSUFBQSxFQUFBLENBQUcsRUFBRSxDQUFBLEdBQUksR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQzNCLElBQUEsRUFBQSxDQUFHLEVBQUUsQ0FBQSxHQUFJLEdBQU0sR0FBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUUzQixJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUNkLElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQ2QsSUFBRyxFQUFBLENBQUEsRUFBRSxJQUFJLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDZixJQUFHLEVBQUEsQ0FBQSxFQUFFLElBQUksR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUVmLElBQU8sT0FBQSxJQUFBLENBQUE7QUFBQSxHQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsZ0JBQWlCLENBQUEsTUFBQSxHQUFlLElBQUksSUFBQSxFQUFjLEVBQUE7QUFLaEQsSUFBQSxNQUFNLEtBQUssSUFBSyxDQUFBLFFBQUEsQ0FBQTtBQUNoQixJQUFBLE1BQU0sS0FBSyxJQUFLLENBQUEsUUFBQSxDQUFBO0FBRWhCLElBQUEsTUFBTSxNQUFNLE1BQU8sQ0FBQSxDQUFBLENBQUE7QUFDbkIsSUFBQSxNQUFNLE1BQU0sTUFBTyxDQUFBLENBQUEsQ0FBQTtBQUNuQixJQUFBLE1BQU0sTUFBTSxNQUFPLENBQUEsQ0FBQSxDQUFBO0FBQ25CLElBQUEsTUFBTSxHQUFNLEdBQUEsQ0FBQSxDQUFBO0FBRVosSUFBQSxNQUFNLEdBQU0sR0FBQSxFQUFBLENBQUcsQ0FBQyxDQUFBLEVBQ2QsTUFBTSxFQUFHLENBQUEsQ0FBQyxDQUNWLEVBQUEsR0FBQSxHQUFNLEVBQUcsQ0FBQSxDQUFDLENBQ1YsRUFBQSxHQUFBLEdBQU0sR0FBRyxFQUFFLENBQUEsQ0FBQTtBQUNiLElBQUEsTUFBTSxHQUFNLEdBQUEsRUFBQSxDQUFHLENBQUMsQ0FBQSxFQUNkLE1BQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxFQUFHLENBQUEsQ0FBQyxDQUNWLEVBQUEsR0FBQSxHQUFNLEdBQUcsRUFBRSxDQUFBLENBQUE7QUFDYixJQUFBLE1BQU0sR0FBTSxHQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUEsRUFDZCxNQUFNLEVBQUcsQ0FBQSxDQUFDLENBQ1YsRUFBQSxHQUFBLEdBQU0sRUFBRyxDQUFBLEVBQUUsQ0FDWCxFQUFBLEdBQUEsR0FBTSxHQUFHLEVBQUUsQ0FBQSxDQUFBO0FBQ2IsSUFBQSxNQUFNLEdBQU0sR0FBQSxFQUFBLENBQUcsQ0FBQyxDQUFBLEVBQ2QsTUFBTSxFQUFHLENBQUEsQ0FBQyxDQUNWLEVBQUEsR0FBQSxHQUFNLEVBQUcsQ0FBQSxFQUFFLENBQ1gsRUFBQSxHQUFBLEdBQU0sR0FBRyxFQUFFLENBQUEsQ0FBQTtBQUViLElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQ2QsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDZCxJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUNkLElBQUcsRUFBQSxDQUFBLEVBQUUsSUFBSSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBRWYsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDZCxJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUNkLElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQ2QsSUFBRyxFQUFBLENBQUEsRUFBRSxJQUFJLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFFZixJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUNkLElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQ2QsSUFBRyxFQUFBLENBQUEsRUFBRSxJQUFJLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDZixJQUFHLEVBQUEsQ0FBQSxFQUFFLElBQUksR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUVmLElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBQ2QsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEdBQU0sR0FBQSxHQUFBLENBQUE7QUFDZCxJQUFHLEVBQUEsQ0FBQSxFQUFFLElBQUksR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUNmLElBQUcsRUFBQSxDQUFBLEVBQUUsSUFBSSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBRWYsSUFBTyxPQUFBLElBQUEsQ0FBQTtBQUFBLEdBQ1Q7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBTUEsTUFBUyxHQUFBO0FBRVAsSUFBQSxNQUFNLEVBQUssR0FBQSxJQUFBLENBQUssUUFDZCxFQUFBLEdBQUEsR0FBTSxHQUFHLENBQUMsQ0FBQSxFQUNWLEdBQU0sR0FBQSxFQUFBLENBQUcsQ0FBQyxDQUFBLEVBQ1YsR0FBTSxHQUFBLEVBQUEsQ0FBRyxDQUFDLENBQ1YsRUFBQSxHQUFBLEdBQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxFQUFHLENBQUEsQ0FBQyxHQUNWLEdBQU0sR0FBQSxFQUFBLENBQUcsQ0FBQyxDQUFBLEVBQ1YsR0FBTSxHQUFBLEVBQUEsQ0FBRyxDQUFDLENBQUEsRUFDVixNQUFNLEVBQUcsQ0FBQSxDQUFDLENBQ1YsRUFBQSxHQUFBLEdBQU0sRUFBRyxDQUFBLENBQUMsQ0FDVixFQUFBLEdBQUEsR0FBTSxHQUFHLENBQUMsQ0FBQSxFQUNWLEdBQU0sR0FBQSxFQUFBLENBQUcsRUFBRSxDQUFBLEVBQ1gsR0FBTSxHQUFBLEVBQUEsQ0FBRyxFQUFFLENBQ1gsRUFBQSxHQUFBLEdBQU0sRUFBRyxDQUFBLEVBQUUsQ0FDWCxFQUFBLEdBQUEsR0FBTSxFQUFHLENBQUEsRUFBRSxHQUNYLEdBQU0sR0FBQSxFQUFBLENBQUcsRUFBRSxDQUFBLEVBQ1gsR0FBTSxHQUFBLEVBQUEsQ0FBRyxFQUFFLENBQUEsRUFDWCxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEtBQzVHLEdBQU0sR0FBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FDNUcsRUFBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsRUFDNUcsR0FBTSxHQUFBLEdBQUEsR0FBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxDQUFBO0FBRTlHLElBQUEsTUFBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsQ0FBQTtBQUV0RCxJQUFBLElBQUksR0FBUSxLQUFBLENBQUE7QUFBRyxNQUFBLE9BQU8sS0FBSyxHQUFJLENBQUEsQ0FBQSxFQUFHLENBQUcsRUFBQSxDQUFBLEVBQUcsR0FBRyxDQUFHLEVBQUEsQ0FBQSxFQUFHLENBQUcsRUFBQSxDQUFBLEVBQUcsR0FBRyxDQUFHLEVBQUEsQ0FBQSxFQUFHLEdBQUcsQ0FBRyxFQUFBLENBQUEsRUFBRyxHQUFHLENBQUMsQ0FBQSxDQUFBO0FBRTdFLElBQUEsTUFBTSxTQUFTLENBQUksR0FBQSxHQUFBLENBQUE7QUFFbkIsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEdBQU0sR0FBQSxNQUFBLENBQUE7QUFDZCxJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQ0QsR0FBQSxDQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FDdkcsSUFBQSxNQUFBLENBQUE7QUFDRixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQ0QsR0FBQSxDQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FDdkcsSUFBQSxNQUFBLENBQUE7QUFDRixJQUFBLEVBQUEsQ0FBRyxDQUFDLENBQ0QsR0FBQSxDQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FDdkcsSUFBQSxNQUFBLENBQUE7QUFFRixJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksR0FBTSxHQUFBLE1BQUEsQ0FBQTtBQUNkLElBQUEsRUFBQSxDQUFHLENBQUMsQ0FDRCxHQUFBLENBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUN2RyxJQUFBLE1BQUEsQ0FBQTtBQUNGLElBQUEsRUFBQSxDQUFHLENBQUMsQ0FDRCxHQUFBLENBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUN2RyxJQUFBLE1BQUEsQ0FBQTtBQUNGLElBQUEsRUFBQSxDQUFHLENBQUMsQ0FDRCxHQUFBLENBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUN2RyxJQUFBLE1BQUEsQ0FBQTtBQUVGLElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxHQUFNLEdBQUEsTUFBQSxDQUFBO0FBQ2QsSUFBQSxFQUFBLENBQUcsQ0FBQyxDQUNELEdBQUEsQ0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQ3ZHLElBQUEsTUFBQSxDQUFBO0FBQ0YsSUFBQSxFQUFBLENBQUcsRUFBRSxDQUNGLEdBQUEsQ0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQ3ZHLElBQUEsTUFBQSxDQUFBO0FBQ0YsSUFBQSxFQUFBLENBQUcsRUFBRSxDQUNGLEdBQUEsQ0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQ3ZHLElBQUEsTUFBQSxDQUFBO0FBRUYsSUFBRyxFQUFBLENBQUEsRUFBRSxJQUFJLEdBQU0sR0FBQSxNQUFBLENBQUE7QUFDZixJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQ0YsR0FBQSxDQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FDdkcsSUFBQSxNQUFBLENBQUE7QUFDRixJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQ0YsR0FBQSxDQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FDdkcsSUFBQSxNQUFBLENBQUE7QUFDRixJQUFBLEVBQUEsQ0FBRyxFQUFFLENBQ0YsR0FBQSxDQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FBTSxHQUFBLEdBQUEsR0FBTSxNQUFNLEdBQU0sR0FBQSxHQUFBLEdBQU0sTUFBTSxHQUFNLEdBQUEsR0FBQSxHQUFNLE1BQU0sR0FDdkcsSUFBQSxNQUFBLENBQUE7QUFFRixJQUFPLE9BQUEsSUFBQSxDQUFBO0FBQUEsR0FDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFNQSxVQUFtQixHQUFBO0FBQ2pCLElBQU8sT0FBQSxJQUFBLENBQUssS0FBTSxFQUFBLENBQUUsTUFBTyxFQUFBLENBQUE7QUFBQSxHQUM3QjtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLFNBQVUsQ0FBQSxNQUFBLEdBQWUsSUFBSSxJQUFBLEVBQWMsRUFBQTtBQUN6QyxJQUFBLE1BQU0sSUFBSSxJQUFLLENBQUEsUUFBQSxDQUFBO0FBRWYsSUFBQSxDQUFBLENBQUUsRUFBRSxDQUFJLEdBQUEsQ0FBQSxDQUFFLENBQUMsQ0FBSSxHQUFBLE1BQUEsQ0FBTyxJQUFJLENBQUUsQ0FBQSxDQUFDLENBQUksR0FBQSxNQUFBLENBQU8sSUFBSSxDQUFFLENBQUEsQ0FBQyxJQUFJLE1BQU8sQ0FBQSxDQUFBLEdBQUksRUFBRSxFQUFFLENBQUEsQ0FBQTtBQUNsRSxJQUFBLENBQUEsQ0FBRSxFQUFFLENBQUksR0FBQSxDQUFBLENBQUUsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLElBQUksQ0FBRSxDQUFBLENBQUMsQ0FBSSxHQUFBLE1BQUEsQ0FBTyxJQUFJLENBQUUsQ0FBQSxDQUFDLElBQUksTUFBTyxDQUFBLENBQUEsR0FBSSxFQUFFLEVBQUUsQ0FBQSxDQUFBO0FBQ2xFLElBQUEsQ0FBQSxDQUFFLEVBQUUsQ0FBSSxHQUFBLENBQUEsQ0FBRSxDQUFDLENBQUksR0FBQSxNQUFBLENBQU8sSUFBSSxDQUFFLENBQUEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLElBQUksQ0FBRSxDQUFBLEVBQUUsSUFBSSxNQUFPLENBQUEsQ0FBQSxHQUFJLEVBQUUsRUFBRSxDQUFBLENBQUE7QUFDbkUsSUFBQSxDQUFBLENBQUUsRUFBRSxDQUFJLEdBQUEsQ0FBQSxDQUFFLENBQUMsQ0FBSSxHQUFBLE1BQUEsQ0FBTyxJQUFJLENBQUUsQ0FBQSxDQUFDLENBQUksR0FBQSxNQUFBLENBQU8sSUFBSSxDQUFFLENBQUEsRUFBRSxJQUFJLE1BQU8sQ0FBQSxDQUFBLEdBQUksRUFBRSxFQUFFLENBQUEsQ0FBQTtBQUVuRSxJQUFPLE9BQUEsSUFBQSxDQUFBO0FBQUEsR0FDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLEtBQU0sQ0FBQSxNQUFBLEdBQWUsSUFBSSxJQUFBLEVBQWMsRUFBQTtBQUNyQyxJQUFBLE1BQU0sSUFBSSxJQUFLLENBQUEsUUFBQSxDQUFBO0FBRWYsSUFBRSxDQUFBLENBQUEsQ0FBQyxLQUFLLE1BQU8sQ0FBQSxDQUFBLENBQUE7QUFDZixJQUFFLENBQUEsQ0FBQSxDQUFDLEtBQUssTUFBTyxDQUFBLENBQUEsQ0FBQTtBQUNmLElBQUUsQ0FBQSxDQUFBLENBQUMsS0FBSyxNQUFPLENBQUEsQ0FBQSxDQUFBO0FBQ2YsSUFBRSxDQUFBLENBQUEsQ0FBQyxLQUFLLE1BQU8sQ0FBQSxDQUFBLENBQUE7QUFDZixJQUFFLENBQUEsQ0FBQSxDQUFDLEtBQUssTUFBTyxDQUFBLENBQUEsQ0FBQTtBQUNmLElBQUUsQ0FBQSxDQUFBLENBQUMsS0FBSyxNQUFPLENBQUEsQ0FBQSxDQUFBO0FBQ2YsSUFBRSxDQUFBLENBQUEsQ0FBQyxLQUFLLE1BQU8sQ0FBQSxDQUFBLENBQUE7QUFDZixJQUFFLENBQUEsQ0FBQSxDQUFDLEtBQUssTUFBTyxDQUFBLENBQUEsQ0FBQTtBQUNmLElBQUUsQ0FBQSxDQUFBLENBQUMsS0FBSyxNQUFPLENBQUEsQ0FBQSxDQUFBO0FBQ2YsSUFBRSxDQUFBLENBQUEsQ0FBQyxLQUFLLE1BQU8sQ0FBQSxDQUFBLENBQUE7QUFDZixJQUFFLENBQUEsQ0FBQSxFQUFFLEtBQUssTUFBTyxDQUFBLENBQUEsQ0FBQTtBQUNoQixJQUFFLENBQUEsQ0FBQSxFQUFFLEtBQUssTUFBTyxDQUFBLENBQUEsQ0FBQTtBQUVoQixJQUFPLE9BQUEsSUFBQSxDQUFBO0FBQUEsR0FDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQU9BLG9CQUFxQixDQUFBLFVBQUEsR0FBbUIsSUFBSSxJQUFBLEVBQWMsRUFBQTtBQUN4RCxJQUFBLE1BQU0sS0FBSyxJQUFLLENBQUEsUUFBQSxDQUFBO0FBRWhCLElBQUEsTUFBTSxJQUFJLFVBQVcsQ0FBQSxRQUFBLENBQVMsQ0FBQyxDQUM3QixFQUFBLENBQUEsR0FBSSxXQUFXLFFBQVMsQ0FBQSxDQUFDLENBQ3pCLEVBQUEsQ0FBQSxHQUFJLFdBQVcsUUFBUyxDQUFBLENBQUMsR0FDekIsQ0FBSSxHQUFBLFVBQUEsQ0FBVyxTQUFTLENBQUMsQ0FBQSxDQUFBO0FBRTNCLElBQUEsTUFBTSxLQUFLLENBQUksR0FBQSxDQUFBLEVBQ2IsS0FBSyxDQUFJLEdBQUEsQ0FBQSxFQUNULEtBQUssQ0FBSSxHQUFBLENBQUEsQ0FBQTtBQUNYLElBQUEsTUFBTSxLQUFLLENBQUksR0FBQSxFQUFBLEVBQ2IsS0FBSyxDQUFJLEdBQUEsRUFBQSxFQUNULEtBQUssQ0FBSSxHQUFBLEVBQUEsQ0FBQTtBQUNYLElBQUEsTUFBTSxLQUFLLENBQUksR0FBQSxFQUFBLEVBQ2IsS0FBSyxDQUFJLEdBQUEsRUFBQSxFQUNULEtBQUssQ0FBSSxHQUFBLEVBQUEsQ0FBQTtBQUNYLElBQUEsTUFBTSxLQUFLLENBQUksR0FBQSxFQUFBLEVBQ2IsS0FBSyxDQUFJLEdBQUEsRUFBQSxFQUNULEtBQUssQ0FBSSxHQUFBLEVBQUEsQ0FBQTtBQUVYLElBQUcsRUFBQSxDQUFBLENBQUMsQ0FBSSxHQUFBLENBQUEsSUFBSyxFQUFLLEdBQUEsRUFBQSxDQUFBLENBQUE7QUFDbEIsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEVBQUssR0FBQSxFQUFBLENBQUE7QUFDYixJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksRUFBSyxHQUFBLEVBQUEsQ0FBQTtBQUViLElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxFQUFLLEdBQUEsRUFBQSxDQUFBO0FBQ2IsSUFBRyxFQUFBLENBQUEsQ0FBQyxDQUFJLEdBQUEsQ0FBQSxJQUFLLEVBQUssR0FBQSxFQUFBLENBQUEsQ0FBQTtBQUNsQixJQUFHLEVBQUEsQ0FBQSxDQUFDLElBQUksRUFBSyxHQUFBLEVBQUEsQ0FBQTtBQUViLElBQUcsRUFBQSxDQUFBLENBQUMsSUFBSSxFQUFLLEdBQUEsRUFBQSxDQUFBO0FBQ2IsSUFBRyxFQUFBLENBQUEsQ0FBQyxJQUFJLEVBQUssR0FBQSxFQUFBLENBQUE7QUFDYixJQUFHLEVBQUEsQ0FBQSxFQUFFLENBQUksR0FBQSxDQUFBLElBQUssRUFBSyxHQUFBLEVBQUEsQ0FBQSxDQUFBO0FBRW5CLElBQU8sT0FBQSxJQUFBLENBQUE7QUFBQSxHQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLE1BQU8sQ0FBQSxHQUFBLEdBQVksSUFBSSxJQUFBLElBQVEsTUFBZSxHQUFBLElBQUksSUFBSyxFQUFBLEVBQUcsS0FBVyxJQUFJLElBQUEsQ0FBSyxDQUFHLEVBQUEs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QUFBO0FBQy9CLElBQU0sTUFBQSxJQUFBLEdBQUEsQ0FBUSxLQUFLLEVBQU0sSUFBQSxFQUFBLENBQUE7QUFDekIsSUFBTSxNQUFBLElBQUEsR0FBQSxDQUFRLEtBQUssRUFBTSxJQUFBLEVBQUEsQ0FBQTtBQUN6QixJQUFNLE1BQUEsSUFBQSxHQUFBLENBQVEsS0FBSyxFQUFNLElBQUEsRUFBQSxDQUFBO0FBQ3pCLElBQU0sTUFBQSxJQUFBLEdBQUEsQ0FBUSxDQUFLLElBQUEsRUFBQSxHQUFLLEVBQU8sQ0FBQSxJQUFBLEVBQUEsQ0FBQTtBQUMvQixJQUFNLE1BQUEsSUFBQSxHQUFBLENBQVEsS0FBSyxFQUFNLElBQUEsRUFBQSxDQUFBO0FBQ3pCLElBQU0sTUFBQSxJQUFBLEdBQUEsQ0FBUSxLQUFLLEVBQU0sSUFBQSxFQUFBLENBQUE7QUFDekIsSUFBTSxNQUFBLElBQUEsR0FBQSxDQUFRLEtBQUssRUFBTSxJQUFBLEVBQUEsQ0FBQTtBQUN6QixJQUFNLE1BQUEsS0FBQSxHQUFBLENBQVMsQ0FBSyxJQUFBLEVBQUEsR0FBSyxFQUFPLENBQUEsSUFBQSxFQUFBLENBQUE7QUFFaEMsSUFBQSxNQUFBLENBQU8sQ0FBQyxDQUFJLEdBQUEsSUFBQSxDQUFBO0FBQ1osSUFBQSxNQUFBLENBQU8sQ0FBQyxDQUFJLEdBQUEsSUFBQSxDQUFBO0FBQ1osSUFBQSxNQUFBLENBQU8sQ0FBQyxDQUFJLEdBQUEsSUFBQSxDQUFBO0FBQ1osSUFBQSxNQUFBLENBQU8sQ0FBQyxDQUFJLEdBQUEsQ0FBQSxDQUFBO0FBQ1osSUFBQSxNQUFBLENBQU8sQ0FBQyxDQUFJLEdBQUEsSUFBQSxDQUFBO0FBQ1osSUFBQSxNQUFBLENBQU8sQ0FBQyxDQUFJLEdBQUEsSUFBQSxDQUFBO0FBQ1osSUFBQSxNQUFBLENBQU8sQ0FBQyxDQUFJLEdBQUEsSUFBQSxDQUFBO0FBQ1osSUFBQSxNQUFBLENBQU8sQ0FBQyxDQUFJLEdBQUEsQ0FBQSxDQUFBO0FBQ1osSUFBQSxNQUFBLENBQU8sQ0FBQyxDQUFJLEdBQUEsSUFBQSxDQUFBO0FB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QUEsQ0FBQTtBQUNsQyxJQUFBLElBQUEsQ0FBSyxJQUFJLElBQUssQ0FBQSxHQUFBLENBQUksSUFBSyxDQUFBLENBQUEsRUFBRyxPQUFPLENBQUMsQ0FBQSxDQUFBO0FBRWxDLElBQU8sT0FBQSxJQUFBLENBQUE7QUFBQSxHQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsR0FBSSxDQUFBLE1BQUEsR0FBZSxJQUFJLElBQUEsRUFBYyxFQUFBO0FBQ25DLElBQUEsSUFBQSxDQUFLLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxJQUFLLENBQUEsQ0FBQSxFQUFHLE9BQU8sQ0FBQyxDQUFBLENBQUE7QUFDbEMsSUFBQSxJQUFBLENBQUssSUFBSSxJQUFLLENBQUEsR0FBQSxDQUFJLElBQUssQ0FBQSxDQUFBLEVBQUcsT0FBTyxDQUFDLENBQUEsQ0FBQTtBQUNsQyxJQUFBLElBQUEsQ0FBSyxJQUFJLElBQUssQ0FBQSxHQUFBLENBQUksSUFBSyxDQUFBLENBQUEsRUFBRyxPQUFPLENBQUMsQ0FBQSxDQUFBO0FBRWxDLElBQU8sT0FBQSxJQUFBLENBQUE7QUFBQSxHQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxLQUFBLENBQU0sTUFBWSxJQUFJLElBQUEsSUFBUSxHQUFZLEdBQUEsSUFBSSxNQUFjLEVBQUE7QUFDMUQsSUFBSyxJQUFBLENBQUEsQ0FBQSxHQUFJLElBQUssQ0FBQSxHQUFBLENBQUksR0FBSSxDQUFBLENBQUEsRUFBRyxJQUFLLENBQUEsR0FBQSxDQUFJLEdBQUksQ0FBQSxDQUFBLEVBQUcsSUFBSyxDQUFBLENBQUMsQ0FBQyxDQUFBLENBQUE7QUFDaEQsSUFBSyxJQUFBLENBQUEsQ0FBQSxHQUFJLElBQUssQ0FBQSxHQUFBLENBQUksR0FBSSxDQUFBLENBQUEsRUFBRyxJQUFLLENBQUEsR0FBQSxDQUFJLEdBQUksQ0FBQSxDQUFBLEVBQUcsSUFBSyxDQUFBLENBQUMsQ0FBQyxDQUFBLENBQUE7QUFDaEQsSUFBSyxJQUFBLENBQUEsQ0FB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QTtBQUN4QixJQUFLLElBQUEsQ0FBQSxDQUFBLEdBQUksRUFBSyxHQUFBLEVBQUEsR0FBSyxFQUFLLEdBQUEsRUFBQSxDQUFBO0FBRXhCLElBQU8sT0FBQSxJQUFBLENBQUE7QUFBQSxHQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFRQSxLQUFLLE1BQWUsR0FBQSxJQUFJLElBQUssRUFBQSxFQUFHLFFBQVEsQ0FBUyxFQUFBO0FBQy9DLElBQUEsSUFBQSxDQUFLLENBQU0sSUFBQSxDQUFBLE1BQUEsQ0FBTyxDQUFJLEdBQUEsSUFBQSxDQUFLLENBQUssSUFBQSxLQUFBLENBQUE7QUFDaEMsSUFBQSxJQUFBLENBQUssQ0FBTSxJQUFBLENBQUEsTUFBQSxDQUFPLENBQUksR0FBQSxJQUFBLENBQUssQ0FBSyxJQUFBLEtBQUEsQ0FBQTtBQUNoQyxJQUFBLElBQUEsQ0FBSyxDQUFNLElBQUEsQ0FBQSxNQUFBLENBQU8sQ0FBSSxHQUFBLElBQUEsQ0FBSyxDQUFLLElBQUEsS0FBQSxDQUFBO0FBRWhDLElBQU8sT0FBQSxJQUFBLENBQUE7QUFBQSxHQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxFQVNBLFNBQVUsQ0FBQSxNQUFBLEdBQWUsSUFBSSxJQUFBLEVBQWMsRUFBQTtBQUN6QyxJQUFBLE1BQU0sSUFBSSxJQUFLLENBQUEsRUFBQSxFQUNiLElBQUksSUFBSyxDQUFBLEVBQUEsRUFDVCxJQUFJLElBQUssQ0FBQSxFQUFBLENBQUE7QUFDWCxJQUFBLE1BQU0sU0FBUyxNQUFPLENBQUEsUUFBQSxDQUFBO0FBRXRCLElBQUEsSUFBSSxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxHQUFJLElBQUksTUFBTyxDQUFBLENBQUMsQ0FBSSxHQUFBLENBQUEsR0FBSSxNQUFPLENBQUEsRUFBRSxDQUFJLEdBQUEsQ0FBQSxHQUFJLE9BQU8sRUFBRSxDQUFBLENBQUE7QUFDbEUsSUFBQSxDQUFBLEdBQUksQ0FBSyxJQUFBLENBQUEsQ0FBQTtBQUVULElBQUEsSUFBQSxDQUFLLENBQUssR0FBQSxDQUFBLE1BQUEsQ0FBTyxDQUFDLENBQUEsR0FBSSxJQUFJLE1BQU8sQ0FBQSxDQUFDLENBQUksR0FBQSxDQUFBLEdBQUksT0FBTyxDQUFDLENBQUEsR0FBSSxDQUFJLEdBQUEsTUFBQSxDQUFPLEVBQUUsQ0FBSyxJQUFBLENBQUEsQ0FBQTtBQUN4RSxJQUFBLElBQUEsQ0FBSyxDQUFLLEdBQUEsQ0FBQSxNQUFBLENBQU8sQ0FBQyxDQUFBLEdBQUksSUFBSSxNQUFPLENBQUEsQ0FBQyxDQUFJLEdBQUEsQ0FBQSxHQUFJLE9BQU8sQ0FBQyxDQUFBLEdBQUksQ0FBSSxHQUFBLE1BQUEsQ0FBTyxFQUFFLENBQUssSUFBQSxDQUFBLENBQUE7QUFDeEUsSUFBQSxJQUFBLENBQUssQ0FBSyxHQUFBLENBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxHQUFJLElBQUksTUFBTyxDQUFBLENBQUMsQ0FBSSxHQUFBLENBQUEsR0FBSSxPQUFPLEVBQUUsQ0FBQSxHQUFJLENBQUksR0FBQSxNQUFBLENBQU8sRUFBRSxDQUFLLElBQUEsQ0FBQSxDQUFBO0FBRXpFLElBQU8sT0FBQSxJQUFBLENBQUE7QUFBQSxHQUNUO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLEVBT0EsU0FBVSxDQUFBLFVBQUEsR0FBbUIsSUFBSSxJQUFBLEVBQWMsRUFBQTtBQUM3QyxJQUFBLE1BQU0sSUFBSSxJQUFLLENBQUEsQ0FBQSxFQUNiLElBQUksSUFBSyxDQUFBLENBQUEsRUFDVCxJQUFJLElBQUssQ0FBQSxDQUFBLENBQUE7QUFDWCxJQUFBLE1BQU0sS0FBSyxVQUFXLENBQUEsUUFBQSxDQUFTLENBQUMsQ0FDOUIsRUFBQSxFQUFBLEdBQUssV0FBVyxRQUFTLENBQUEsQ0FBQyxDQUMxQixFQUFBLEVBQUEsR0FBSyxXQUFXLFFBQVMsQ0FBQSxDQUFDLEdBQzFCLEVBQUssR0FBQSxVQUFBLENBQVcsU0FBUyxDQUFDLENBQUEsQ0FBQTtBQUk1QixJQUFBLE1BQU0sRUFBSyxHQUFBLEVBQUEsR0FBSyxDQUFJLEdBQUEsRUFBQSxHQUFLLElBQUksRUFBSyxHQUFBLENBQUEsQ0FBQTtBQUNsQyxJQUFBLE1BQU0sRUFBSyxHQUFBLEVBQUEsR0FBSyxDQUFJLEdBQUEsRUFBQSxHQUFLLElBQUksRUFBSyxHQUFBLENBQUEsQ0FBQTtBQUNsQyxJQUFBLE1BQU0sRUFBSyxHQUFBLEVBQUEsR0FBSyxDQUFJLEdBQUEsRUFBQSxHQUFLLElBQUksRUFBSyxHQUFBLENBQUEsQ0FBQTtBQUNsQyxJQUFBLE1BQU0sS0FBSyxDQUFDLEVBQUEsR0FBSyxDQUFJLEdBQUEsRUFBQSxHQUFLLElBQUksRUFBSyxHQUFBLENBQUEsQ0FBQTtBQUluQyxJQUFLLElBQUEsQ0FBQSxDQUFBLEdBQUksRUFBSyxHQUFBLEVBQUEsR0FBSyxFQUFLLEdBQUEsQ0FBQyxLQUFLLEVBQUssR0FBQSxDQUFDLEVBQUssR0FBQSxFQUFBLEdBQUssQ0FBQyxFQUFBLENBQUE7QUFDL0MsSUFBSyxJQUFBLENBQUEsQ0FBQSxHQUFJLEVBQUssR0FBQSxFQUFBLEdBQUssRUFBSyxHQUFBLENBQUMsS0FBSyxFQUFLLEdBQUEsQ0FBQyxFQUFLLEdBQUEsRUFBQSxHQUFLLENBQUMsRUFBQSxDQUFBO0FBQy9DLElBQUssSUFBQSxDQUFBLENBQUEsR0FBSSxFQUFLLEdBQUEsRUFBQSxHQUFLLEVBQUssR0FBQSxDQUFDLEtBQUssRUFBSyxHQUFBLENBQUMsRUFBSyxHQUFBLEVBQUEsR0FBSyxDQUFDLEVBQUEsQ0FBQTtBQUUvQyxJQUFPLE9BQUEsSUFBQSxDQUFBO0FBQUEsR0FDVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUEsRUFTQSxjQUFBLENBQWUsSUFBTyxHQUFBLElBQUksSUFBSyxFQUFBLEVBQUcsUUFBUSxDQUFHLEVBQUEsVUFBQSxHQUFhLElBQUksSUFBQSxFQUFRLEVBQUE7QUFFcEUsSUFBQSxPQUFPLEtBQUssU0FBVSxDQUFBLFVBQUEsQ0FBVyxnQkFBaUIsQ0FBQSxJQUFBLEVBQU0sS0FBSyxDQUFDLENBQUEs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LElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFDL0UsTUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxDQUFFLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFBQSxLQUMxRSxNQUFBO0FBQ0wsTUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxDQUFFLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFDL0UsTUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxDQUFFLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFDL0UsTUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxDQUFFLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFDL0UsTUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxDQUFFLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFDL0UsTUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxDQUFFLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFDL0UsTUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxDQUFFLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFDL0UsTUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxDQUFFLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFDL0UsTUFBQSxPQUFBLENBQVEsQ0FBQyxDQUFJLEdBQUEsTUFBQSxDQUFPLENBQUMsQ0FBQSxDQUFFLElBQUksSUFBSyxDQUFBLEdBQUEsQ0FBSSxDQUFHLEVBQUEsSUFBQSxDQUFLLElBQUksQ0FBRyxFQUFBLElBQUEsQ0FBSyxJQUFJLENBQUMsQ0FBQSxDQUFFLFVBQVUsTUFBTSxDQUFBLENBQUE7QUFBQSxLQUNqRjtBQUVBLElBQU0sTUFBQSxjQUFBLEdBQWlCLElBQUksSUFBSyxFQUFBLENBQUE7QUFFaEMsSUFBQSxLQUFBLElBQVMsSUFBSSxDQUFHLEVBQUEsWUFBQSxHQUFlLFFBQVEsTUFBUSxFQUFBLENBQUEsR0FBSSxjQUFjLENB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
